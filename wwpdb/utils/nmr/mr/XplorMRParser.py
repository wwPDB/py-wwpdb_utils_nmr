# Generated from XplorMRParser.g4 by ANTLR 4.10.1
# encoding: utf-8
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
	from typing import TextIO
else:
	from typing.io import TextIO

def serializedATN():
    return [
        4,1,287,2904,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,
        7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,
        13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,
        20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,
        26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,
        33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,
        39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,
        46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,52,7,
        52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,2,57,7,57,2,58,7,58,2,
        59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,2,64,7,64,2,65,7,
        65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,2,71,7,71,2,
        72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,7,77,2,78,7,
        78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,2,84,7,84,2,
        85,7,85,2,86,7,86,2,87,7,87,2,88,7,88,2,89,7,89,2,90,7,90,2,91,7,
        91,2,92,7,92,2,93,7,93,2,94,7,94,2,95,7,95,2,96,7,96,2,97,7,97,2,
        98,7,98,2,99,7,99,2,100,7,100,2,101,7,101,2,102,7,102,2,103,7,103,
        2,104,7,104,2,105,7,105,2,106,7,106,2,107,7,107,2,108,7,108,2,109,
        7,109,2,110,7,110,2,111,7,111,2,112,7,112,2,113,7,113,2,114,7,114,
        2,115,7,115,2,116,7,116,2,117,7,117,2,118,7,118,2,119,7,119,1,0,
        1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,
        1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,
        1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,
        1,0,1,0,1,0,5,0,293,8,0,10,0,12,0,296,9,0,1,0,1,0,1,1,1,1,5,1,302,
        8,1,10,1,12,1,305,9,1,1,1,1,1,1,2,3,2,310,8,2,1,2,1,2,5,2,314,8,
        2,10,2,12,2,317,9,2,1,2,1,2,1,3,1,3,5,3,323,8,3,10,3,12,3,326,9,
        3,1,3,1,3,1,3,5,3,331,8,3,10,3,12,3,334,9,3,1,3,1,3,1,3,5,3,339,
        8,3,10,3,12,3,342,9,3,1,3,1,3,1,3,5,3,347,8,3,10,3,12,3,350,9,3,
        1,3,1,3,1,3,5,3,355,8,3,10,3,12,3,358,9,3,1,3,3,3,361,8,3,1,4,3,
        4,364,8,4,1,4,1,4,5,4,368,8,4,10,4,12,4,371,9,4,1,4,1,4,1,5,3,5,
        376,8,5,1,5,1,5,5,5,380,8,5,10,5,12,5,383,9,5,1,5,1,5,1,6,1,6,5,
        6,389,8,6,10,6,12,6,392,9,6,1,6,1,6,1,7,1,7,5,7,398,8,7,10,7,12,
        7,401,9,7,1,7,1,7,1,8,1,8,5,8,407,8,8,10,8,12,8,410,9,8,1,8,1,8,
        1,9,1,9,5,9,416,8,9,10,9,12,9,419,9,9,1,9,1,9,1,10,1,10,5,10,425,
        8,10,10,10,12,10,428,9,10,1,10,1,10,1,11,1,11,5,11,434,8,11,10,11,
        12,11,437,9,11,1,11,1,11,1,12,1,12,5,12,443,8,12,10,12,12,12,446,
        9,12,1,12,1,12,1,13,1,13,5,13,452,8,13,10,13,12,13,455,9,13,1,13,
        1,13,1,14,1,14,5,14,461,8,14,10,14,12,14,464,9,14,1,14,1,14,1,15,
        1,15,5,15,470,8,15,10,15,12,15,473,9,15,1,15,1,15,1,16,1,16,5,16,
        479,8,16,10,16,12,16,482,9,16,1,16,1,16,1,17,1,17,5,17,488,8,17,
        10,17,12,17,491,9,17,1,17,1,17,1,18,1,18,5,18,497,8,18,10,18,12,
        18,500,9,18,1,18,1,18,1,19,1,19,5,19,506,8,19,10,19,12,19,509,9,
        19,1,19,1,19,1,20,1,20,5,20,515,8,20,10,20,12,20,518,9,20,1,20,1,
        20,1,21,1,21,5,21,524,8,21,10,21,12,21,527,9,21,1,21,1,21,1,22,1,
        22,5,22,533,8,22,10,22,12,22,536,9,22,1,22,1,22,1,23,1,23,5,23,542,
        8,23,10,23,12,23,545,9,23,1,23,1,23,1,24,1,24,5,24,551,8,24,10,24,
        12,24,554,9,24,1,24,1,24,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,
        1,25,1,25,1,25,1,25,1,25,3,25,571,8,25,1,25,1,25,1,25,3,25,576,8,
        25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,
        25,1,25,1,25,3,25,593,8,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,
        25,1,25,1,25,1,25,3,25,606,8,25,1,25,1,25,1,25,1,25,1,25,1,25,1,
        25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,
        25,1,25,1,25,3,25,630,8,25,1,25,3,25,633,8,25,1,26,1,26,1,26,1,26,
        1,26,3,26,640,8,26,1,26,3,26,643,8,26,1,26,5,26,646,8,26,10,26,12,
        26,649,9,26,1,26,1,26,3,26,653,8,26,1,26,1,26,1,26,3,26,658,8,26,
        1,26,3,26,661,8,26,1,26,3,26,664,8,26,5,26,666,8,26,10,26,12,26,
        669,9,26,1,27,1,27,3,27,673,8,27,1,27,1,27,1,27,3,27,678,8,27,1,
        27,1,27,1,27,1,27,1,27,3,27,685,8,27,1,28,1,28,3,28,689,8,28,1,28,
        1,28,1,28,3,28,694,8,28,1,28,1,28,1,28,3,28,699,8,28,1,28,1,28,1,
        28,3,28,704,8,28,1,28,1,28,1,28,3,28,709,8,28,1,28,1,28,1,28,3,28,
        714,8,28,1,28,1,28,1,28,3,28,719,8,28,1,28,3,28,722,8,28,1,29,1,
        29,1,29,1,29,1,29,3,29,729,8,29,1,29,1,29,1,29,1,29,3,29,735,8,29,
        1,29,3,29,738,8,29,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,
        1,30,1,31,1,31,1,31,1,31,3,31,754,8,31,1,31,1,31,1,31,1,31,1,31,
        1,31,1,31,1,31,3,31,764,8,31,1,31,1,31,1,31,3,31,769,8,31,1,31,1,
        31,1,31,1,31,1,31,1,31,1,31,3,31,778,8,31,1,32,1,32,1,32,1,32,1,
        32,1,32,1,32,1,32,1,32,3,32,789,8,32,1,32,3,32,792,8,32,1,33,1,33,
        1,33,3,33,797,8,33,1,33,1,33,1,33,1,33,1,33,3,33,804,8,33,1,33,1,
        33,1,33,1,33,1,33,1,33,1,33,1,33,1,33,1,33,1,33,1,33,3,33,818,8,
        33,1,33,1,33,1,33,3,33,823,8,33,1,33,1,33,1,33,1,33,1,33,1,33,1,
        33,3,33,832,8,33,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,
        34,1,34,1,34,1,34,1,34,1,34,3,34,849,8,34,1,35,1,35,1,35,3,35,854,
        8,35,1,35,1,35,1,35,3,35,859,8,35,1,35,1,35,1,35,3,35,864,8,35,1,
        35,1,35,1,35,1,35,1,35,3,35,871,8,35,1,35,1,35,1,35,3,35,876,8,35,
        1,35,1,35,1,35,1,35,1,35,3,35,883,8,35,1,36,1,36,1,36,1,36,1,36,
        1,36,1,36,1,36,1,36,1,36,3,36,895,8,36,1,37,1,37,1,37,3,37,900,8,
        37,1,37,1,37,1,37,1,37,1,37,3,37,907,8,37,1,37,1,37,1,37,1,37,1,
        37,1,37,1,37,3,37,916,8,37,1,38,1,38,1,38,1,38,1,38,3,38,923,8,38,
        1,39,1,39,1,39,3,39,928,8,39,1,39,1,39,1,39,1,39,1,39,1,39,1,39,
        1,39,1,39,3,39,939,8,39,1,39,1,39,1,39,3,39,944,8,39,1,39,1,39,1,
        39,1,39,1,39,1,39,1,39,1,39,1,39,3,39,955,8,39,1,40,1,40,1,40,1,
        40,1,40,1,40,1,40,3,40,964,8,40,1,41,1,41,1,41,5,41,969,8,41,10,
        41,12,41,972,9,41,1,41,1,41,3,41,976,8,41,1,42,1,42,3,42,980,8,42,
        1,42,1,42,1,42,3,42,985,8,42,1,42,3,42,988,8,42,1,43,1,43,1,43,3,
        43,993,8,43,1,43,1,43,1,43,3,43,998,8,43,1,43,1,43,1,43,3,43,1003,
        8,43,1,43,1,43,3,43,1007,8,43,1,43,1,43,1,43,1,43,3,43,1013,8,43,
        1,43,1,43,3,43,1017,8,43,1,43,1,43,3,43,1021,8,43,1,43,3,43,1024,
        8,43,3,43,1026,8,43,1,43,1,43,3,43,1030,8,43,1,44,1,44,1,44,1,44,
        1,44,1,44,1,45,1,45,1,45,1,45,3,45,1042,8,45,1,45,1,45,1,45,1,45,
        1,45,1,45,3,45,1050,8,45,1,45,1,45,1,45,3,45,1055,8,45,1,45,1,45,
        1,45,1,45,1,45,1,45,1,45,3,45,1064,8,45,1,45,3,45,1067,8,45,1,45,
        1,45,1,45,1,45,1,45,1,45,3,45,1075,8,45,1,46,1,46,1,46,1,46,1,47,
        1,47,1,47,1,47,3,47,1085,8,47,1,47,1,47,1,47,1,47,1,47,1,47,1,47,
        1,47,1,47,3,47,1096,8,47,1,47,1,47,1,47,1,47,1,47,1,47,3,47,1104,
        8,47,1,47,1,47,3,47,1108,8,47,1,47,1,47,1,47,3,47,1113,8,47,1,47,
        1,47,1,47,1,47,1,47,1,47,1,47,1,47,1,47,3,47,1124,8,47,1,47,3,47,
        1127,8,47,1,47,3,47,1130,8,47,1,48,1,48,1,48,1,48,1,48,1,48,1,48,
        1,48,1,48,1,48,3,48,1142,8,48,1,48,1,48,1,48,1,48,1,48,3,48,1149,
        8,48,1,49,1,49,1,49,3,49,1154,8,49,1,49,1,49,1,49,1,49,1,49,1,49,
        1,49,1,49,1,49,1,49,3,49,1166,8,49,1,49,1,49,1,49,3,49,1171,8,49,
        1,49,1,49,1,49,1,49,1,49,1,49,1,49,1,49,1,49,1,49,1,49,1,49,1,49,
        3,49,1186,8,49,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,51,
        1,51,1,51,1,51,1,51,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,
        1,52,1,52,3,52,1213,8,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,
        3,52,1223,8,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,3,52,1233,
        8,52,1,52,3,52,1236,8,52,1,52,1,52,1,52,3,52,1241,8,52,1,53,1,53,
        1,53,3,53,1246,8,53,1,53,1,53,3,53,1250,8,53,1,54,1,54,1,54,1,54,
        1,55,1,55,1,55,1,55,1,55,1,55,3,55,1262,8,55,1,55,1,55,1,56,1,56,
        1,56,1,57,1,57,1,57,1,58,1,58,1,58,1,59,1,59,1,59,1,60,1,60,1,60,
        1,60,1,60,1,60,1,60,1,60,3,60,1286,8,60,1,61,1,61,1,61,1,62,1,62,
        1,62,3,62,1294,8,62,1,62,1,62,1,62,1,62,1,62,3,62,1301,8,62,1,62,
        1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,3,62,1312,8,62,1,62,1,62,
        1,62,1,62,3,62,1318,8,62,1,62,1,62,1,62,1,62,3,62,1324,8,62,1,62,
        1,62,3,62,1328,8,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,
        3,62,1339,8,62,1,62,1,62,1,62,1,62,3,62,1345,8,62,1,62,1,62,1,62,
        1,62,3,62,1351,8,62,1,62,1,62,1,62,1,62,1,62,1,62,3,62,1359,8,62,
        1,62,3,62,1362,8,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,3,62,
        1372,8,62,1,62,1,62,1,62,1,62,3,62,1378,8,62,1,62,1,62,1,62,1,62,
        3,62,1384,8,62,1,62,1,62,1,62,3,62,1389,8,62,1,62,1,62,1,62,1,62,
        1,62,1,62,1,62,3,62,1398,8,62,1,62,3,62,1401,8,62,1,62,3,62,1404,
        8,62,1,62,1,62,3,62,1408,8,62,1,63,1,63,1,63,1,63,1,63,1,63,1,63,
        1,63,1,63,1,63,3,63,1420,8,63,1,63,1,63,1,63,1,63,1,63,3,63,1427,
        8,63,1,63,1,63,1,63,1,63,1,63,3,63,1434,8,63,1,64,1,64,1,64,1,64,
        3,64,1440,8,64,1,64,1,64,1,64,3,64,1445,8,64,1,65,1,65,1,65,1,65,
        1,65,1,66,1,66,1,66,3,66,1455,8,66,1,66,1,66,1,66,1,66,1,66,1,66,
        1,66,1,66,1,66,1,66,3,66,1467,8,66,1,66,1,66,1,66,3,66,1472,8,66,
        1,66,1,66,1,66,1,66,1,66,1,66,1,66,1,66,1,66,3,66,1483,8,66,1,67,
        1,67,1,67,1,67,1,67,1,67,1,67,1,67,1,67,3,67,1494,8,67,1,68,1,68,
        1,68,3,68,1499,8,68,1,68,1,68,1,68,1,68,1,68,1,68,1,68,3,68,1508,
        8,68,1,68,1,68,1,68,1,68,1,68,1,68,1,68,1,68,1,68,1,68,1,68,1,68,
        1,68,1,68,1,68,1,68,1,68,1,68,1,68,1,68,1,68,1,68,1,68,1,68,3,68,
        1534,8,68,1,68,1,68,1,68,1,68,1,68,1,68,1,68,3,68,1543,8,68,1,68,
        3,68,1546,8,68,1,68,1,68,1,68,1,68,1,68,1,68,1,68,1,68,1,68,1,68,
        1,68,1,68,1,68,1,68,1,68,1,68,1,68,3,68,1565,8,68,1,69,1,69,1,69,
        1,69,1,69,1,69,1,70,1,70,1,70,1,70,3,70,1577,8,70,1,70,1,70,1,70,
        3,70,1582,8,70,1,70,1,70,1,70,1,70,1,70,1,70,1,70,1,70,1,70,1,70,
        1,70,1,70,1,70,1,70,1,70,3,70,1599,8,70,1,70,1,70,1,70,3,70,1604,
        8,70,1,70,1,70,1,70,1,70,1,70,1,70,1,70,3,70,1613,8,70,1,71,1,71,
        1,71,1,71,1,71,1,71,1,71,1,71,1,71,1,71,3,71,1625,8,71,1,71,3,71,
        1628,8,71,1,72,1,72,1,72,3,72,1633,8,72,1,72,1,72,1,72,3,72,1638,
        8,72,1,72,1,72,1,72,1,72,1,72,1,72,1,72,1,72,1,72,1,72,1,72,1,72,
        1,72,1,72,3,72,1654,8,72,1,72,1,72,1,72,3,72,1659,8,72,1,72,1,72,
        1,72,1,72,1,72,1,72,1,72,3,72,1668,8,72,1,73,1,73,1,73,3,73,1673,
        8,73,1,73,1,73,1,73,1,73,1,73,1,73,1,73,1,73,1,73,1,73,1,73,1,73,
        3,73,1687,8,73,1,73,1,73,1,73,3,73,1692,8,73,1,73,1,73,1,73,1,73,
        1,73,1,73,1,73,3,73,1701,8,73,1,74,1,74,1,74,1,74,1,74,1,74,1,74,
        1,74,1,74,1,74,1,74,1,74,1,75,1,75,1,75,3,75,1718,8,75,1,75,1,75,
        1,75,1,75,1,75,1,75,1,75,1,75,1,75,1,75,1,75,3,75,1731,8,75,1,75,
        1,75,1,75,3,75,1736,8,75,1,75,1,75,1,75,1,75,1,75,1,75,1,75,1,75,
        1,75,3,75,1747,8,75,1,75,3,75,1750,8,75,1,75,1,75,1,75,1,75,1,75,
        1,75,3,75,1758,8,75,1,76,1,76,1,76,1,76,1,76,1,76,1,76,1,76,1,76,
        1,76,1,76,1,76,1,76,3,76,1773,8,76,1,77,1,77,1,77,1,77,3,77,1779,
        8,77,1,77,1,77,1,77,3,77,1784,8,77,1,77,1,77,1,77,1,77,3,77,1790,
        8,77,1,77,1,77,1,77,3,77,1795,8,77,1,77,1,77,1,77,1,77,3,77,1801,
        8,77,1,77,1,77,1,77,1,77,3,77,1807,8,77,1,77,1,77,1,77,1,77,3,77,
        1813,8,77,1,77,1,77,1,77,1,77,1,77,1,77,1,77,1,77,1,77,1,77,3,77,
        1825,8,77,1,77,3,77,1828,8,77,1,77,1,77,3,77,1832,8,77,1,78,1,78,
        1,78,1,78,1,78,3,78,1839,8,78,1,79,1,79,1,79,1,79,3,79,1845,8,79,
        1,79,1,79,1,79,1,79,1,79,1,79,1,79,1,79,1,79,3,79,1856,8,79,1,79,
        1,79,1,79,3,79,1861,8,79,1,79,1,79,1,79,1,79,1,79,1,79,1,79,3,79,
        1870,8,79,1,79,3,79,1873,8,79,1,79,1,79,1,79,1,79,1,79,1,79,1,79,
        1,79,1,79,1,79,1,79,1,79,1,79,1,79,1,79,3,79,1890,8,79,1,80,1,80,
        1,80,1,80,1,80,1,80,1,80,1,80,3,80,1900,8,80,1,81,1,81,1,81,3,81,
        1905,8,81,1,81,1,81,1,81,1,81,1,81,1,81,1,81,1,81,1,81,3,81,1916,
        8,81,1,81,1,81,1,81,3,81,1921,8,81,1,81,1,81,1,81,1,81,1,81,1,81,
        1,81,1,81,1,81,1,81,1,81,1,81,1,81,1,81,3,81,1937,8,81,1,82,1,82,
        1,82,1,82,1,82,1,82,1,82,1,82,1,82,3,82,1948,8,82,1,83,1,83,1,83,
        3,83,1953,8,83,1,83,1,83,1,83,3,83,1958,8,83,1,83,1,83,1,83,3,83,
        1963,8,83,1,83,1,83,1,83,1,83,1,83,3,83,1970,8,83,1,84,1,84,1,84,
        1,84,1,84,1,84,1,84,1,85,1,85,1,85,3,85,1982,8,85,1,85,1,85,1,85,
        1,85,1,85,1,85,1,85,3,85,1991,8,85,1,85,1,85,1,85,3,85,1996,8,85,
        1,85,1,85,1,85,1,85,1,85,1,85,1,85,3,85,2005,8,85,1,86,1,86,1,86,
        1,86,1,86,1,86,3,86,2013,8,86,1,87,1,87,1,87,1,87,3,87,2019,8,87,
        1,87,1,87,1,87,3,87,2024,8,87,1,87,1,87,1,87,3,87,2029,8,87,1,87,
        1,87,1,87,1,87,1,87,3,87,2036,8,87,1,88,1,88,1,88,1,88,1,88,1,89,
        1,89,1,89,1,89,3,89,2047,8,89,1,89,1,89,1,89,3,89,2052,8,89,1,89,
        1,89,1,89,3,89,2057,8,89,1,89,1,89,1,89,3,89,2062,8,89,1,89,1,89,
        1,89,3,89,2067,8,89,1,89,1,89,1,89,3,89,2072,8,89,1,89,1,89,1,89,
        3,89,2077,8,89,1,89,1,89,1,89,3,89,2082,8,89,1,89,1,89,1,89,3,89,
        2087,8,89,1,89,1,89,1,89,3,89,2092,8,89,1,89,1,89,1,89,3,89,2097,
        8,89,1,89,1,89,1,89,3,89,2102,8,89,1,89,1,89,1,89,3,89,2107,8,89,
        1,89,3,89,2110,8,89,1,90,1,90,1,90,1,90,1,91,1,91,1,91,1,91,1,92,
        1,92,1,92,5,92,2123,8,92,10,92,12,92,2126,9,92,1,93,1,93,1,93,5,
        93,2131,8,93,10,93,12,93,2134,9,93,1,94,1,94,1,94,1,94,1,94,1,94,
        1,94,1,94,1,94,1,94,1,94,1,94,3,94,2148,8,94,1,94,1,94,1,94,1,94,
        1,94,1,94,1,94,1,94,1,94,1,94,1,94,1,94,1,94,1,94,3,94,2164,8,94,
        1,94,3,94,2167,8,94,1,94,1,94,1,94,1,94,1,94,1,94,1,94,1,94,1,94,
        3,94,2178,8,94,1,94,1,94,1,94,3,94,2183,8,94,1,94,3,94,2186,8,94,
        1,94,1,94,1,94,1,94,1,94,1,94,3,94,2194,8,94,1,94,1,94,3,94,2198,
        8,94,1,94,1,94,1,94,1,94,1,94,1,94,1,94,1,94,1,94,3,94,2209,8,94,
        1,94,1,94,3,94,2213,8,94,1,94,1,94,3,94,2217,8,94,1,94,3,94,2220,
        8,94,1,94,1,94,1,94,1,94,1,94,1,94,1,94,1,94,1,94,1,94,1,94,3,94,
        2233,8,94,1,94,3,94,2236,8,94,1,94,1,94,1,94,1,94,1,94,3,94,2243,
        8,94,1,94,3,94,2246,8,94,1,94,1,94,1,94,1,94,1,94,3,94,2253,8,94,
        1,94,1,94,1,94,3,94,2258,8,94,1,94,3,94,2261,8,94,1,94,1,94,1,94,
        1,94,1,94,1,94,1,94,1,94,1,94,1,94,1,94,1,94,3,94,2275,8,94,1,94,
        1,94,1,94,1,94,1,94,1,94,5,94,2283,8,94,10,94,12,94,2286,9,94,1,
        95,1,95,1,96,1,96,1,97,1,97,1,98,1,98,1,99,1,99,1,99,5,99,2299,8,
        99,10,99,12,99,2302,9,99,1,99,3,99,2305,8,99,3,99,2307,8,99,1,99,
        1,99,5,99,2311,8,99,10,99,12,99,2314,9,99,1,99,1,99,1,100,1,100,
        1,100,1,100,1,101,1,101,1,101,1,101,1,101,1,101,3,101,2328,8,101,
        1,102,1,102,1,102,3,102,2333,8,102,1,103,1,103,1,103,3,103,2338,
        8,103,1,104,1,104,1,104,1,104,1,104,1,104,1,104,3,104,2347,8,104,
        1,105,1,105,1,105,1,105,1,105,1,105,1,105,1,105,1,105,1,105,1,105,
        1,105,1,105,1,105,1,105,1,105,1,105,1,105,1,105,1,105,1,105,1,105,
        1,105,1,105,1,105,1,105,1,105,1,105,1,105,1,105,1,105,1,105,1,105,
        1,105,1,105,1,105,1,105,1,105,1,105,1,105,1,105,1,105,1,105,1,105,
        1,105,1,105,1,105,1,105,1,105,1,105,1,105,1,105,1,105,1,105,1,105,
        1,105,1,105,1,105,1,105,1,105,5,105,2409,8,105,10,105,12,105,2412,
        9,105,1,105,1,105,1,105,1,105,1,105,1,105,1,105,1,105,1,105,1,105,
        1,105,1,105,5,105,2426,8,105,10,105,12,105,2429,9,105,1,105,1,105,
        1,105,1,105,1,105,1,105,1,105,1,105,1,105,1,105,1,105,1,105,1,105,
        1,105,1,105,1,105,1,105,1,105,1,105,1,105,1,105,1,105,1,105,1,105,
        1,105,1,105,1,105,1,105,1,105,1,105,1,105,1,105,1,105,1,105,1,105,
        1,105,1,105,3,105,2468,8,105,1,106,1,106,1,106,1,106,1,106,1,107,
        1,107,1,107,1,107,1,107,1,107,1,108,1,108,1,108,3,108,2484,8,108,
        1,109,1,109,1,109,1,109,1,109,5,109,2491,8,109,10,109,12,109,2494,
        9,109,1,109,5,109,2497,8,109,10,109,12,109,2500,9,109,1,109,5,109,
        2503,8,109,10,109,12,109,2506,9,109,3,109,2508,8,109,1,109,1,109,
        1,109,1,109,1,109,5,109,2515,8,109,10,109,12,109,2518,9,109,1,109,
        1,109,1,109,1,109,1,110,1,110,1,110,1,110,1,110,5,110,2529,8,110,
        10,110,12,110,2532,9,110,1,110,5,110,2535,8,110,10,110,12,110,2538,
        9,110,1,110,5,110,2541,8,110,10,110,12,110,2544,9,110,3,110,2546,
        8,110,1,110,1,110,1,110,1,110,1,110,5,110,2553,8,110,10,110,12,110,
        2556,9,110,1,110,1,110,1,110,1,110,1,111,1,111,1,111,1,111,1,111,
        5,111,2567,8,111,10,111,12,111,2570,9,111,1,111,5,111,2573,8,111,
        10,111,12,111,2576,9,111,1,111,5,111,2579,8,111,10,111,12,111,2582,
        9,111,3,111,2584,8,111,1,111,1,111,1,111,1,111,1,111,5,111,2591,
        8,111,10,111,12,111,2594,9,111,1,111,1,111,1,111,1,111,1,112,1,112,
        1,112,1,112,1,112,5,112,2605,8,112,10,112,12,112,2608,9,112,1,112,
        5,112,2611,8,112,10,112,12,112,2614,9,112,1,112,5,112,2617,8,112,
        10,112,12,112,2620,9,112,3,112,2622,8,112,1,112,1,112,1,112,1,112,
        1,112,5,112,2629,8,112,10,112,12,112,2632,9,112,1,112,1,112,1,112,
        1,112,1,113,1,113,1,113,1,113,1,113,5,113,2643,8,113,10,113,12,113,
        2646,9,113,1,113,5,113,2649,8,113,10,113,12,113,2652,9,113,1,113,
        5,113,2655,8,113,10,113,12,113,2658,9,113,3,113,2660,8,113,1,113,
        1,113,1,113,1,113,1,113,5,113,2667,8,113,10,113,12,113,2670,9,113,
        1,113,1,113,1,113,1,113,1,114,1,114,1,114,1,114,1,114,5,114,2681,
        8,114,10,114,12,114,2684,9,114,1,114,5,114,2687,8,114,10,114,12,
        114,2690,9,114,1,114,5,114,2693,8,114,10,114,12,114,2696,9,114,3,
        114,2698,8,114,1,114,1,114,1,114,1,114,1,114,5,114,2705,8,114,10,
        114,12,114,2708,9,114,1,114,1,114,1,114,1,114,1,115,1,115,1,115,
        1,115,1,115,5,115,2719,8,115,10,115,12,115,2722,9,115,1,115,5,115,
        2725,8,115,10,115,12,115,2728,9,115,1,115,5,115,2731,8,115,10,115,
        12,115,2734,9,115,3,115,2736,8,115,1,115,1,115,1,115,1,115,1,115,
        5,115,2743,8,115,10,115,12,115,2746,9,115,1,115,1,115,1,115,1,115,
        1,116,1,116,1,116,1,116,1,116,5,116,2757,8,116,10,116,12,116,2760,
        9,116,1,116,5,116,2763,8,116,10,116,12,116,2766,9,116,1,116,5,116,
        2769,8,116,10,116,12,116,2772,9,116,3,116,2774,8,116,1,116,1,116,
        1,116,1,116,1,116,5,116,2781,8,116,10,116,12,116,2784,9,116,1,116,
        1,116,1,116,1,116,1,117,1,117,1,117,1,117,1,117,5,117,2795,8,117,
        10,117,12,117,2798,9,117,1,117,5,117,2801,8,117,10,117,12,117,2804,
        9,117,1,117,5,117,2807,8,117,10,117,12,117,2810,9,117,3,117,2812,
        8,117,1,117,1,117,1,117,1,117,1,117,5,117,2819,8,117,10,117,12,117,
        2822,9,117,1,117,1,117,1,117,1,117,1,118,1,118,1,118,1,118,1,118,
        5,118,2833,8,118,10,118,12,118,2836,9,118,1,118,5,118,2839,8,118,
        10,118,12,118,2842,9,118,1,118,5,118,2845,8,118,10,118,12,118,2848,
        9,118,3,118,2850,8,118,1,118,1,118,1,118,1,118,1,118,5,118,2857,
        8,118,10,118,12,118,2860,9,118,1,118,1,118,1,118,1,118,1,119,1,119,
        1,119,1,119,1,119,5,119,2871,8,119,10,119,12,119,2874,9,119,1,119,
        5,119,2877,8,119,10,119,12,119,2880,9,119,1,119,5,119,2883,8,119,
        10,119,12,119,2886,9,119,3,119,2888,8,119,1,119,1,119,1,119,1,119,
        1,119,5,119,2895,8,119,10,119,12,119,2898,9,119,1,119,1,119,1,119,
        1,119,1,119,0,1,188,120,0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,
        30,32,34,36,38,40,42,44,46,48,50,52,54,56,58,60,62,64,66,68,70,72,
        74,76,78,80,82,84,86,88,90,92,94,96,98,100,102,104,106,108,110,112,
        114,116,118,120,122,124,126,128,130,132,134,136,138,140,142,144,
        146,148,150,152,154,156,158,160,162,164,166,168,170,172,174,176,
        178,180,182,184,186,188,190,192,194,196,198,200,202,204,206,208,
        210,212,214,216,218,220,222,224,226,228,230,232,234,236,238,0,8,
        1,0,42,43,1,0,184,185,2,0,177,177,186,186,3,0,177,177,179,179,198,
        198,2,0,177,177,179,179,1,0,164,165,1,0,229,233,1,0,268,274,3504,
        0,294,1,0,0,0,2,299,1,0,0,0,4,309,1,0,0,0,6,360,1,0,0,0,8,363,1,
        0,0,0,10,375,1,0,0,0,12,386,1,0,0,0,14,395,1,0,0,0,16,404,1,0,0,
        0,18,413,1,0,0,0,20,422,1,0,0,0,22,431,1,0,0,0,24,440,1,0,0,0,26,
        449,1,0,0,0,28,458,1,0,0,0,30,467,1,0,0,0,32,476,1,0,0,0,34,485,
        1,0,0,0,36,494,1,0,0,0,38,503,1,0,0,0,40,512,1,0,0,0,42,521,1,0,
        0,0,44,530,1,0,0,0,46,539,1,0,0,0,48,548,1,0,0,0,50,632,1,0,0,0,
        52,634,1,0,0,0,54,684,1,0,0,0,56,721,1,0,0,0,58,737,1,0,0,0,60,739,
        1,0,0,0,62,777,1,0,0,0,64,779,1,0,0,0,66,831,1,0,0,0,68,833,1,0,
        0,0,70,882,1,0,0,0,72,884,1,0,0,0,74,915,1,0,0,0,76,917,1,0,0,0,
        78,954,1,0,0,0,80,956,1,0,0,0,82,975,1,0,0,0,84,987,1,0,0,0,86,1029,
        1,0,0,0,88,1031,1,0,0,0,90,1074,1,0,0,0,92,1076,1,0,0,0,94,1129,
        1,0,0,0,96,1131,1,0,0,0,98,1185,1,0,0,0,100,1187,1,0,0,0,102,1196,
        1,0,0,0,104,1240,1,0,0,0,106,1242,1,0,0,0,108,1251,1,0,0,0,110,1255,
        1,0,0,0,112,1265,1,0,0,0,114,1268,1,0,0,0,116,1271,1,0,0,0,118,1274,
        1,0,0,0,120,1277,1,0,0,0,122,1287,1,0,0,0,124,1407,1,0,0,0,126,1409,
        1,0,0,0,128,1444,1,0,0,0,130,1446,1,0,0,0,132,1482,1,0,0,0,134,1484,
        1,0,0,0,136,1564,1,0,0,0,138,1566,1,0,0,0,140,1612,1,0,0,0,142,1614,
        1,0,0,0,144,1667,1,0,0,0,146,1700,1,0,0,0,148,1702,1,0,0,0,150,1757,
        1,0,0,0,152,1759,1,0,0,0,154,1831,1,0,0,0,156,1833,1,0,0,0,158,1889,
        1,0,0,0,160,1891,1,0,0,0,162,1936,1,0,0,0,164,1938,1,0,0,0,166,1969,
        1,0,0,0,168,1971,1,0,0,0,170,2004,1,0,0,0,172,2006,1,0,0,0,174,2035,
        1,0,0,0,176,2037,1,0,0,0,178,2109,1,0,0,0,180,2111,1,0,0,0,182,2115,
        1,0,0,0,184,2119,1,0,0,0,186,2127,1,0,0,0,188,2274,1,0,0,0,190,2287,
        1,0,0,0,192,2289,1,0,0,0,194,2291,1,0,0,0,196,2293,1,0,0,0,198,2295,
        1,0,0,0,200,2317,1,0,0,0,202,2327,1,0,0,0,204,2329,1,0,0,0,206,2334,
        1,0,0,0,208,2346,1,0,0,0,210,2467,1,0,0,0,212,2469,1,0,0,0,214,2474,
        1,0,0,0,216,2480,1,0,0,0,218,2485,1,0,0,0,220,2523,1,0,0,0,222,2561,
        1,0,0,0,224,2599,1,0,0,0,226,2637,1,0,0,0,228,2675,1,0,0,0,230,2713,
        1,0,0,0,232,2751,1,0,0,0,234,2789,1,0,0,0,236,2827,1,0,0,0,238,2865,
        1,0,0,0,240,293,3,2,1,0,241,293,3,4,2,0,242,293,3,6,3,0,243,293,
        3,8,4,0,244,293,3,10,5,0,245,293,3,12,6,0,246,293,3,14,7,0,247,293,
        3,16,8,0,248,293,3,18,9,0,249,293,3,20,10,0,250,293,3,22,11,0,251,
        293,3,24,12,0,252,293,3,26,13,0,253,293,3,28,14,0,254,293,3,30,15,
        0,255,293,3,32,16,0,256,293,3,34,17,0,257,293,3,36,18,0,258,293,
        3,38,19,0,259,293,3,40,20,0,260,293,3,42,21,0,261,293,3,44,22,0,
        262,293,3,46,23,0,263,293,3,48,24,0,264,293,3,198,99,0,265,293,3,
        200,100,0,266,293,3,214,107,0,267,293,3,218,109,0,268,293,3,220,
        110,0,269,293,3,222,111,0,270,293,3,236,118,0,271,293,3,238,119,
        0,272,293,3,226,113,0,273,293,3,224,112,0,274,293,3,228,114,0,275,
        293,3,230,115,0,276,293,3,232,116,0,277,293,3,234,117,0,278,293,
        3,52,26,0,279,293,3,60,30,0,280,293,3,64,32,0,281,293,3,82,41,0,
        282,293,3,88,44,0,283,293,3,176,88,0,284,293,3,180,90,0,285,293,
        3,96,48,0,286,293,3,92,46,0,287,293,3,130,65,0,288,293,3,142,71,
        0,289,293,3,156,78,0,290,293,3,160,80,0,291,293,3,106,53,0,292,240,
        1,0,0,0,292,241,1,0,0,0,292,242,1,0,0,0,292,243,1,0,0,0,292,244,
        1,0,0,0,292,245,1,0,0,0,292,246,1,0,0,0,292,247,1,0,0,0,292,248,
        1,0,0,0,292,249,1,0,0,0,292,250,1,0,0,0,292,251,1,0,0,0,292,252,
        1,0,0,0,292,253,1,0,0,0,292,254,1,0,0,0,292,255,1,0,0,0,292,256,
        1,0,0,0,292,257,1,0,0,0,292,258,1,0,0,0,292,259,1,0,0,0,292,260,
        1,0,0,0,292,261,1,0,0,0,292,262,1,0,0,0,292,263,1,0,0,0,292,264,
        1,0,0,0,292,265,1,0,0,0,292,266,1,0,0,0,292,267,1,0,0,0,292,268,
        1,0,0,0,292,269,1,0,0,0,292,270,1,0,0,0,292,271,1,0,0,0,292,272,
        1,0,0,0,292,273,1,0,0,0,292,274,1,0,0,0,292,275,1,0,0,0,292,276,
        1,0,0,0,292,277,1,0,0,0,292,278,1,0,0,0,292,279,1,0,0,0,292,280,
        1,0,0,0,292,281,1,0,0,0,292,282,1,0,0,0,292,283,1,0,0,0,292,284,
        1,0,0,0,292,285,1,0,0,0,292,286,1,0,0,0,292,287,1,0,0,0,292,288,
        1,0,0,0,292,289,1,0,0,0,292,290,1,0,0,0,292,291,1,0,0,0,293,296,
        1,0,0,0,294,292,1,0,0,0,294,295,1,0,0,0,295,297,1,0,0,0,296,294,
        1,0,0,0,297,298,5,0,0,1,298,1,1,0,0,0,299,303,5,3,0,0,300,302,3,
        50,25,0,301,300,1,0,0,0,302,305,1,0,0,0,303,301,1,0,0,0,303,304,
        1,0,0,0,304,306,1,0,0,0,305,303,1,0,0,0,306,307,5,2,0,0,307,3,1,
        0,0,0,308,310,5,36,0,0,309,308,1,0,0,0,309,310,1,0,0,0,310,311,1,
        0,0,0,311,315,5,37,0,0,312,314,3,58,29,0,313,312,1,0,0,0,314,317,
        1,0,0,0,315,313,1,0,0,0,315,316,1,0,0,0,316,318,1,0,0,0,317,315,
        1,0,0,0,318,319,5,2,0,0,319,5,1,0,0,0,320,324,5,39,0,0,321,323,3,
        62,31,0,322,321,1,0,0,0,323,326,1,0,0,0,324,322,1,0,0,0,324,325,
        1,0,0,0,325,327,1,0,0,0,326,324,1,0,0,0,327,361,5,2,0,0,328,332,
        7,0,0,0,329,331,3,66,33,0,330,329,1,0,0,0,331,334,1,0,0,0,332,330,
        1,0,0,0,332,333,1,0,0,0,333,335,1,0,0,0,334,332,1,0,0,0,335,361,
        5,2,0,0,336,340,5,46,0,0,337,339,3,70,35,0,338,337,1,0,0,0,339,342,
        1,0,0,0,340,338,1,0,0,0,340,341,1,0,0,0,341,343,1,0,0,0,342,340,
        1,0,0,0,343,361,5,2,0,0,344,348,5,49,0,0,345,347,3,74,37,0,346,345,
        1,0,0,0,347,350,1,0,0,0,348,346,1,0,0,0,348,349,1,0,0,0,349,351,
        1,0,0,0,350,348,1,0,0,0,351,361,5,2,0,0,352,356,5,50,0,0,353,355,
        3,78,39,0,354,353,1,0,0,0,355,358,1,0,0,0,356,354,1,0,0,0,356,357,
        1,0,0,0,357,359,1,0,0,0,358,356,1,0,0,0,359,361,5,2,0,0,360,320,
        1,0,0,0,360,328,1,0,0,0,360,336,1,0,0,0,360,344,1,0,0,0,360,352,
        1,0,0,0,361,7,1,0,0,0,362,364,5,36,0,0,363,362,1,0,0,0,363,364,1,
        0,0,0,364,365,1,0,0,0,365,369,5,51,0,0,366,368,3,82,41,0,367,366,
        1,0,0,0,368,371,1,0,0,0,369,367,1,0,0,0,369,370,1,0,0,0,370,372,
        1,0,0,0,371,369,1,0,0,0,372,373,5,2,0,0,373,9,1,0,0,0,374,376,5,
        36,0,0,375,374,1,0,0,0,375,376,1,0,0,0,376,377,1,0,0,0,377,381,5,
        56,0,0,378,380,3,86,43,0,379,378,1,0,0,0,380,383,1,0,0,0,381,379,
        1,0,0,0,381,382,1,0,0,0,382,384,1,0,0,0,383,381,1,0,0,0,384,385,
        5,2,0,0,385,11,1,0,0,0,386,390,5,59,0,0,387,389,3,90,45,0,388,387,
        1,0,0,0,389,392,1,0,0,0,390,388,1,0,0,0,390,391,1,0,0,0,391,393,
        1,0,0,0,392,390,1,0,0,0,393,394,5,2,0,0,394,13,1,0,0,0,395,399,5,
        63,0,0,396,398,3,94,47,0,397,396,1,0,0,0,398,401,1,0,0,0,399,397,
        1,0,0,0,399,400,1,0,0,0,400,402,1,0,0,0,401,399,1,0,0,0,402,403,
        5,2,0,0,403,15,1,0,0,0,404,408,5,65,0,0,405,407,3,98,49,0,406,405,
        1,0,0,0,407,410,1,0,0,0,408,406,1,0,0,0,408,409,1,0,0,0,409,411,
        1,0,0,0,410,408,1,0,0,0,411,412,5,2,0,0,412,17,1,0,0,0,413,417,5,
        69,0,0,414,416,3,104,52,0,415,414,1,0,0,0,416,419,1,0,0,0,417,415,
        1,0,0,0,417,418,1,0,0,0,418,420,1,0,0,0,419,417,1,0,0,0,420,421,
        5,2,0,0,421,19,1,0,0,0,422,426,5,77,0,0,423,425,3,124,62,0,424,423,
        1,0,0,0,425,428,1,0,0,0,426,424,1,0,0,0,426,427,1,0,0,0,427,429,
        1,0,0,0,428,426,1,0,0,0,429,430,5,2,0,0,430,21,1,0,0,0,431,435,5,
        84,0,0,432,434,3,128,64,0,433,432,1,0,0,0,434,437,1,0,0,0,435,433,
        1,0,0,0,435,436,1,0,0,0,436,438,1,0,0,0,437,435,1,0,0,0,438,439,
        5,2,0,0,439,23,1,0,0,0,440,444,5,85,0,0,441,443,3,132,66,0,442,441,
        1,0,0,0,443,446,1,0,0,0,444,442,1,0,0,0,444,445,1,0,0,0,445,447,
        1,0,0,0,446,444,1,0,0,0,447,448,5,2,0,0,448,25,1,0,0,0,449,453,5,
        86,0,0,450,452,3,136,68,0,451,450,1,0,0,0,452,455,1,0,0,0,453,451,
        1,0,0,0,453,454,1,0,0,0,454,456,1,0,0,0,455,453,1,0,0,0,456,457,
        5,2,0,0,457,27,1,0,0,0,458,462,5,90,0,0,459,461,3,140,70,0,460,459,
        1,0,0,0,461,464,1,0,0,0,462,460,1,0,0,0,462,463,1,0,0,0,463,465,
        1,0,0,0,464,462,1,0,0,0,465,466,5,2,0,0,466,29,1,0,0,0,467,471,5,
        92,0,0,468,470,3,144,72,0,469,468,1,0,0,0,470,473,1,0,0,0,471,469,
        1,0,0,0,471,472,1,0,0,0,472,474,1,0,0,0,473,471,1,0,0,0,474,475,
        5,2,0,0,475,31,1,0,0,0,476,480,5,93,0,0,477,479,3,146,73,0,478,477,
        1,0,0,0,479,482,1,0,0,0,480,478,1,0,0,0,480,481,1,0,0,0,481,483,
        1,0,0,0,482,480,1,0,0,0,483,484,5,2,0,0,484,33,1,0,0,0,485,489,5,
        94,0,0,486,488,3,150,75,0,487,486,1,0,0,0,488,491,1,0,0,0,489,487,
        1,0,0,0,489,490,1,0,0,0,490,492,1,0,0,0,491,489,1,0,0,0,492,493,
        5,2,0,0,493,35,1,0,0,0,494,498,5,97,0,0,495,497,3,154,77,0,496,495,
        1,0,0,0,497,500,1,0,0,0,498,496,1,0,0,0,498,499,1,0,0,0,499,501,
        1,0,0,0,500,498,1,0,0,0,501,502,5,2,0,0,502,37,1,0,0,0,503,507,5,
        102,0,0,504,506,3,158,79,0,505,504,1,0,0,0,506,509,1,0,0,0,507,505,
        1,0,0,0,507,508,1,0,0,0,508,510,1,0,0,0,509,507,1,0,0,0,510,511,
        5,2,0,0,511,39,1,0,0,0,512,516,5,113,0,0,513,515,3,162,81,0,514,
        513,1,0,0,0,515,518,1,0,0,0,516,514,1,0,0,0,516,517,1,0,0,0,517,
        519,1,0,0,0,518,516,1,0,0,0,519,520,5,2,0,0,520,41,1,0,0,0,521,525,
        5,114,0,0,522,524,3,166,83,0,523,522,1,0,0,0,524,527,1,0,0,0,525,
        523,1,0,0,0,525,526,1,0,0,0,526,528,1,0,0,0,527,525,1,0,0,0,528,
        529,5,2,0,0,529,43,1,0,0,0,530,534,5,115,0,0,531,533,3,170,85,0,
        532,531,1,0,0,0,533,536,1,0,0,0,534,532,1,0,0,0,534,535,1,0,0,0,
        535,537,1,0,0,0,536,534,1,0,0,0,537,538,5,2,0,0,538,45,1,0,0,0,539,
        543,5,187,0,0,540,542,3,174,87,0,541,540,1,0,0,0,542,545,1,0,0,0,
        543,541,1,0,0,0,543,544,1,0,0,0,544,546,1,0,0,0,545,543,1,0,0,0,
        546,547,5,2,0,0,547,47,1,0,0,0,548,552,5,188,0,0,549,551,3,178,89,
        0,550,549,1,0,0,0,551,554,1,0,0,0,552,550,1,0,0,0,552,553,1,0,0,
        0,553,555,1,0,0,0,554,552,1,0,0,0,555,556,5,2,0,0,556,49,1,0,0,0,
        557,633,3,52,26,0,558,633,3,218,109,0,559,560,5,5,0,0,560,561,5,
        184,0,0,561,633,3,194,97,0,562,563,5,6,0,0,563,564,5,209,0,0,564,
        633,5,208,0,0,565,566,5,7,0,0,566,567,5,184,0,0,567,633,3,194,97,
        0,568,570,5,8,0,0,569,571,5,192,0,0,570,569,1,0,0,0,570,571,1,0,
        0,0,571,572,1,0,0,0,572,633,3,194,97,0,573,575,5,9,0,0,574,576,5,
        192,0,0,575,574,1,0,0,0,575,576,1,0,0,0,576,577,1,0,0,0,577,633,
        5,184,0,0,578,579,5,10,0,0,579,633,5,184,0,0,580,581,5,11,0,0,581,
        582,5,184,0,0,582,583,5,184,0,0,583,633,3,194,97,0,584,585,5,12,
        0,0,585,586,5,184,0,0,586,633,5,177,0,0,587,588,5,13,0,0,588,589,
        5,184,0,0,589,633,5,177,0,0,590,592,5,14,0,0,591,593,5,192,0,0,592,
        591,1,0,0,0,592,593,1,0,0,0,593,594,1,0,0,0,594,633,5,177,0,0,595,
        596,5,15,0,0,596,597,5,213,0,0,597,633,5,212,0,0,598,599,5,16,0,
        0,599,600,3,54,27,0,600,601,5,2,0,0,601,633,1,0,0,0,602,603,5,17,
        0,0,603,605,5,18,0,0,604,606,5,192,0,0,605,604,1,0,0,0,605,606,1,
        0,0,0,606,607,1,0,0,0,607,633,3,194,97,0,608,633,5,19,0,0,609,610,
        5,20,0,0,610,611,5,184,0,0,611,633,3,194,97,0,612,613,5,21,0,0,613,
        614,5,184,0,0,614,633,3,194,97,0,615,616,5,22,0,0,616,617,5,184,
        0,0,617,633,3,194,97,0,618,619,5,23,0,0,619,620,5,184,0,0,620,633,
        3,194,97,0,621,622,5,24,0,0,622,623,5,184,0,0,623,633,3,194,97,0,
        624,625,5,25,0,0,625,626,5,184,0,0,626,633,3,194,97,0,627,629,5,
        26,0,0,628,630,5,192,0,0,629,628,1,0,0,0,629,630,1,0,0,0,630,631,
        1,0,0,0,631,633,3,194,97,0,632,557,1,0,0,0,632,558,1,0,0,0,632,559,
        1,0,0,0,632,562,1,0,0,0,632,565,1,0,0,0,632,568,1,0,0,0,632,573,
        1,0,0,0,632,578,1,0,0,0,632,580,1,0,0,0,632,584,1,0,0,0,632,587,
        1,0,0,0,632,590,1,0,0,0,632,595,1,0,0,0,632,598,1,0,0,0,632,602,
        1,0,0,0,632,608,1,0,0,0,632,609,1,0,0,0,632,612,1,0,0,0,632,615,
        1,0,0,0,632,618,1,0,0,0,632,621,1,0,0,0,632,624,1,0,0,0,632,627,
        1,0,0,0,633,51,1,0,0,0,634,635,5,4,0,0,635,636,3,182,91,0,636,637,
        3,182,91,0,637,639,3,190,95,0,638,640,3,190,95,0,639,638,1,0,0,0,
        639,640,1,0,0,0,640,642,1,0,0,0,641,643,3,190,95,0,642,641,1,0,0,
        0,642,643,1,0,0,0,643,647,1,0,0,0,644,646,3,56,28,0,645,644,1,0,
        0,0,646,649,1,0,0,0,647,645,1,0,0,0,647,648,1,0,0,0,648,667,1,0,
        0,0,649,647,1,0,0,0,650,652,5,172,0,0,651,653,5,4,0,0,652,651,1,
        0,0,0,652,653,1,0,0,0,653,654,1,0,0,0,654,655,3,182,91,0,655,657,
        3,182,91,0,656,658,3,190,95,0,657,656,1,0,0,0,657,658,1,0,0,0,658,
        660,1,0,0,0,659,661,3,190,95,0,660,659,1,0,0,0,660,661,1,0,0,0,661,
        663,1,0,0,0,662,664,3,190,95,0,663,662,1,0,0,0,663,664,1,0,0,0,664,
        666,1,0,0,0,665,650,1,0,0,0,666,669,1,0,0,0,667,665,1,0,0,0,667,
        668,1,0,0,0,668,53,1,0,0,0,669,667,1,0,0,0,670,672,5,27,0,0,671,
        673,5,192,0,0,672,671,1,0,0,0,672,673,1,0,0,0,673,674,1,0,0,0,674,
        685,3,194,97,0,675,677,5,28,0,0,676,678,5,192,0,0,677,676,1,0,0,
        0,677,678,1,0,0,0,678,679,1,0,0,0,679,685,3,194,97,0,680,681,5,29,
        0,0,681,685,3,182,91,0,682,683,5,30,0,0,683,685,3,182,91,0,684,670,
        1,0,0,0,684,675,1,0,0,0,684,680,1,0,0,0,684,682,1,0,0,0,685,55,1,
        0,0,0,686,688,5,31,0,0,687,689,5,192,0,0,688,687,1,0,0,0,688,689,
        1,0,0,0,689,690,1,0,0,0,690,722,3,196,98,0,691,693,5,32,0,0,692,
        694,5,192,0,0,693,692,1,0,0,0,693,694,1,0,0,0,694,695,1,0,0,0,695,
        722,3,196,98,0,696,698,5,55,0,0,697,699,5,192,0,0,698,697,1,0,0,
        0,698,699,1,0,0,0,699,700,1,0,0,0,700,722,3,196,98,0,701,703,5,33,
        0,0,702,704,5,192,0,0,703,702,1,0,0,0,703,704,1,0,0,0,704,705,1,
        0,0,0,705,722,3,196,98,0,706,708,5,34,0,0,707,709,5,192,0,0,708,
        707,1,0,0,0,708,709,1,0,0,0,709,710,1,0,0,0,710,722,3,196,98,0,711,
        713,5,35,0,0,712,714,5,192,0,0,713,712,1,0,0,0,713,714,1,0,0,0,714,
        715,1,0,0,0,715,722,3,196,98,0,716,718,5,47,0,0,717,719,5,192,0,
        0,718,717,1,0,0,0,718,719,1,0,0,0,719,720,1,0,0,0,720,722,3,196,
        98,0,721,686,1,0,0,0,721,691,1,0,0,0,721,696,1,0,0,0,721,701,1,0,
        0,0,721,706,1,0,0,0,721,711,1,0,0,0,721,716,1,0,0,0,722,57,1,0,0,
        0,723,738,3,200,100,0,724,738,3,60,30,0,725,738,3,220,110,0,726,
        728,5,38,0,0,727,729,5,192,0,0,728,727,1,0,0,0,728,729,1,0,0,0,729,
        730,1,0,0,0,730,738,5,177,0,0,731,738,5,19,0,0,732,734,5,21,0,0,
        733,735,5,192,0,0,734,733,1,0,0,0,734,735,1,0,0,0,735,736,1,0,0,
        0,736,738,3,194,97,0,737,723,1,0,0,0,737,724,1,0,0,0,737,725,1,0,
        0,0,737,726,1,0,0,0,737,731,1,0,0,0,737,732,1,0,0,0,738,59,1,0,0,
        0,739,740,5,4,0,0,740,741,3,182,91,0,741,742,3,182,91,0,742,743,
        3,182,91,0,743,744,3,182,91,0,744,745,3,190,95,0,745,746,3,190,95,
        0,746,747,3,190,95,0,747,748,5,177,0,0,748,61,1,0,0,0,749,778,3,
        64,32,0,750,778,3,222,111,0,751,753,5,9,0,0,752,754,5,192,0,0,753,
        752,1,0,0,0,753,754,1,0,0,0,754,755,1,0,0,0,755,778,5,184,0,0,756,
        757,5,40,0,0,757,758,3,194,97,0,758,759,3,194,97,0,759,760,3,194,
        97,0,760,778,1,0,0,0,761,763,5,41,0,0,762,764,5,192,0,0,763,762,
        1,0,0,0,763,764,1,0,0,0,764,765,1,0,0,0,765,778,3,194,97,0,766,768,
        5,14,0,0,767,769,5,192,0,0,768,767,1,0,0,0,768,769,1,0,0,0,769,770,
        1,0,0,0,770,778,5,177,0,0,771,772,5,15,0,0,772,778,5,212,0,0,773,
        774,5,17,0,0,774,775,5,18,0,0,775,778,3,194,97,0,776,778,5,19,0,
        0,777,749,1,0,0,0,777,750,1,0,0,0,777,751,1,0,0,0,777,756,1,0,0,
        0,777,761,1,0,0,0,777,766,1,0,0,0,777,771,1,0,0,0,777,773,1,0,0,
        0,777,776,1,0,0,0,778,63,1,0,0,0,779,780,5,4,0,0,780,781,3,182,91,
        0,781,782,3,182,91,0,782,783,3,182,91,0,783,784,3,182,91,0,784,785,
        3,182,91,0,785,786,3,182,91,0,786,788,3,190,95,0,787,789,3,190,95,
        0,788,787,1,0,0,0,788,789,1,0,0,0,789,791,1,0,0,0,790,792,3,190,
        95,0,791,790,1,0,0,0,791,792,1,0,0,0,792,65,1,0,0,0,793,832,3,68,
        34,0,794,796,5,9,0,0,795,797,5,192,0,0,796,795,1,0,0,0,796,797,1,
        0,0,0,797,798,1,0,0,0,798,832,5,184,0,0,799,800,5,44,0,0,800,832,
        5,215,0,0,801,803,5,21,0,0,802,804,5,192,0,0,803,802,1,0,0,0,803,
        804,1,0,0,0,804,805,1,0,0,0,805,832,3,194,97,0,806,807,5,45,0,0,
        807,832,5,178,0,0,808,809,5,6,0,0,809,832,5,208,0,0,810,811,5,40,
        0,0,811,812,3,194,97,0,812,813,3,194,97,0,813,814,3,194,97,0,814,
        832,1,0,0,0,815,817,5,41,0,0,816,818,5,192,0,0,817,816,1,0,0,0,817,
        818,1,0,0,0,818,819,1,0,0,0,819,832,3,194,97,0,820,822,5,14,0,0,
        821,823,5,192,0,0,822,821,1,0,0,0,822,823,1,0,0,0,823,824,1,0,0,
        0,824,832,5,177,0,0,825,826,5,15,0,0,826,832,5,212,0,0,827,828,5,
        17,0,0,828,829,5,18,0,0,829,832,3,194,97,0,830,832,5,19,0,0,831,
        793,1,0,0,0,831,794,1,0,0,0,831,799,1,0,0,0,831,801,1,0,0,0,831,
        806,1,0,0,0,831,808,1,0,0,0,831,810,1,0,0,0,831,815,1,0,0,0,831,
        820,1,0,0,0,831,825,1,0,0,0,831,827,1,0,0,0,831,830,1,0,0,0,832,
        67,1,0,0,0,833,834,5,4,0,0,834,835,3,182,91,0,835,836,3,182,91,0,
        836,837,3,182,91,0,837,838,3,182,91,0,838,839,3,182,91,0,839,840,
        3,182,91,0,840,841,3,190,95,0,841,848,3,190,95,0,842,849,3,190,95,
        0,843,844,3,190,95,0,844,845,3,190,95,0,845,846,3,190,95,0,846,847,
        3,190,95,0,847,849,1,0,0,0,848,842,1,0,0,0,848,843,1,0,0,0,848,849,
        1,0,0,0,849,69,1,0,0,0,850,883,3,72,36,0,851,853,5,47,0,0,852,854,
        5,192,0,0,853,852,1,0,0,0,853,854,1,0,0,0,854,855,1,0,0,0,855,883,
        5,177,0,0,856,858,5,9,0,0,857,859,5,192,0,0,858,857,1,0,0,0,858,
        859,1,0,0,0,859,860,1,0,0,0,860,883,5,184,0,0,861,863,5,41,0,0,862,
        864,5,192,0,0,863,862,1,0,0,0,863,864,1,0,0,0,864,865,1,0,0,0,865,
        866,3,194,97,0,866,867,3,194,97,0,867,883,1,0,0,0,868,870,5,14,0,
        0,869,871,5,192,0,0,870,869,1,0,0,0,870,871,1,0,0,0,871,872,1,0,
        0,0,872,883,5,177,0,0,873,875,5,48,0,0,874,876,5,192,0,0,875,874,
        1,0,0,0,875,876,1,0,0,0,876,877,1,0,0,0,877,883,5,177,0,0,878,879,
        5,17,0,0,879,880,5,18,0,0,880,883,3,194,97,0,881,883,5,19,0,0,882,
        850,1,0,0,0,882,851,1,0,0,0,882,856,1,0,0,0,882,861,1,0,0,0,882,
        868,1,0,0,0,882,873,1,0,0,0,882,878,1,0,0,0,882,881,1,0,0,0,883,
        71,1,0,0,0,884,885,5,4,0,0,885,886,3,182,91,0,886,887,3,182,91,0,
        887,888,3,182,91,0,888,889,3,182,91,0,889,890,3,190,95,0,890,894,
        3,190,95,0,891,892,3,190,95,0,892,893,3,190,95,0,893,895,1,0,0,0,
        894,891,1,0,0,0,894,895,1,0,0,0,895,73,1,0,0,0,896,916,3,76,38,0,
        897,899,5,9,0,0,898,900,5,192,0,0,899,898,1,0,0,0,899,900,1,0,0,
        0,900,901,1,0,0,0,901,916,5,184,0,0,902,903,5,40,0,0,903,916,3,194,
        97,0,904,906,5,14,0,0,905,907,5,192,0,0,906,905,1,0,0,0,906,907,
        1,0,0,0,907,908,1,0,0,0,908,916,5,177,0,0,909,910,5,15,0,0,910,916,
        5,212,0,0,911,912,5,17,0,0,912,913,5,18,0,0,913,916,3,194,97,0,914,
        916,5,19,0,0,915,896,1,0,0,0,915,897,1,0,0,0,915,902,1,0,0,0,915,
        904,1,0,0,0,915,909,1,0,0,0,915,911,1,0,0,0,915,914,1,0,0,0,916,
        75,1,0,0,0,917,918,5,4,0,0,918,919,3,182,91,0,919,920,3,182,91,0,
        920,922,3,190,95,0,921,923,3,190,95,0,922,921,1,0,0,0,922,923,1,
        0,0,0,923,77,1,0,0,0,924,955,3,80,40,0,925,927,5,9,0,0,926,928,5,
        192,0,0,927,926,1,0,0,0,927,928,1,0,0,0,928,929,1,0,0,0,929,955,
        5,184,0,0,930,931,5,40,0,0,931,932,3,194,97,0,932,933,3,194,97,0,
        933,934,3,194,97,0,934,935,3,194,97,0,935,955,1,0,0,0,936,938,5,
        41,0,0,937,939,5,192,0,0,938,937,1,0,0,0,938,939,1,0,0,0,939,940,
        1,0,0,0,940,955,3,194,97,0,941,943,5,14,0,0,942,944,5,192,0,0,943,
        942,1,0,0,0,943,944,1,0,0,0,944,945,1,0,0,0,945,955,5,177,0,0,946,
        947,5,15,0,0,947,955,5,212,0,0,948,949,5,17,0,0,949,950,5,18,0,0,
        950,955,3,194,97,0,951,955,5,19,0,0,952,953,5,44,0,0,953,955,5,216,
        0,0,954,924,1,0,0,0,954,925,1,0,0,0,954,930,1,0,0,0,954,936,1,0,
        0,0,954,941,1,0,0,0,954,946,1,0,0,0,954,948,1,0,0,0,954,951,1,0,
        0,0,954,952,1,0,0,0,955,79,1,0,0,0,956,957,5,4,0,0,957,958,3,182,
        91,0,958,959,3,182,91,0,959,960,3,182,91,0,960,961,3,182,91,0,961,
        963,3,190,95,0,962,964,3,190,95,0,963,962,1,0,0,0,963,964,1,0,0,
        0,964,81,1,0,0,0,965,976,3,200,100,0,966,970,5,52,0,0,967,969,3,
        84,42,0,968,967,1,0,0,0,969,972,1,0,0,0,970,968,1,0,0,0,970,971,
        1,0,0,0,971,973,1,0,0,0,972,970,1,0,0,0,973,976,5,2,0,0,974,976,
        5,53,0,0,975,965,1,0,0,0,975,966,1,0,0,0,975,974,1,0,0,0,976,83,
        1,0,0,0,977,979,5,54,0,0,978,980,5,192,0,0,979,978,1,0,0,0,979,980,
        1,0,0,0,980,981,1,0,0,0,981,988,3,182,91,0,982,984,5,55,0,0,983,
        985,5,192,0,0,984,983,1,0,0,0,984,985,1,0,0,0,985,986,1,0,0,0,986,
        988,3,194,97,0,987,977,1,0,0,0,987,982,1,0,0,0,988,85,1,0,0,0,989,
        1030,3,200,100,0,990,992,5,57,0,0,991,993,5,192,0,0,992,991,1,0,
        0,0,992,993,1,0,0,0,993,994,1,0,0,0,994,1030,5,177,0,0,995,997,5,
        58,0,0,996,998,5,192,0,0,997,996,1,0,0,0,997,998,1,0,0,0,998,999,
        1,0,0,0,999,1025,5,189,0,0,1000,1002,3,194,97,0,1001,1003,5,175,
        0,0,1002,1001,1,0,0,0,1002,1003,1,0,0,0,1003,1004,1,0,0,0,1004,1006,
        3,194,97,0,1005,1007,5,175,0,0,1006,1005,1,0,0,0,1006,1007,1,0,0,
        0,1007,1008,1,0,0,0,1008,1009,3,194,97,0,1009,1026,1,0,0,0,1010,
        1012,5,170,0,0,1011,1013,5,192,0,0,1012,1011,1,0,0,0,1012,1013,1,
        0,0,0,1013,1014,1,0,0,0,1014,1016,3,182,91,0,1015,1017,5,175,0,0,
        1016,1015,1,0,0,0,1016,1017,1,0,0,0,1017,1023,1,0,0,0,1018,1020,
        5,171,0,0,1019,1021,5,192,0,0,1020,1019,1,0,0,0,1020,1021,1,0,0,
        0,1021,1022,1,0,0,0,1022,1024,3,182,91,0,1023,1018,1,0,0,0,1023,
        1024,1,0,0,0,1024,1026,1,0,0,0,1025,1000,1,0,0,0,1025,1010,1,0,0,
        0,1026,1027,1,0,0,0,1027,1028,5,190,0,0,1028,1030,1,0,0,0,1029,989,
        1,0,0,0,1029,990,1,0,0,0,1029,995,1,0,0,0,1030,87,1,0,0,0,1031,1032,
        5,4,0,0,1032,1033,3,182,91,0,1033,1034,3,190,95,0,1034,1035,3,190,
        95,0,1035,1036,3,190,95,0,1036,89,1,0,0,0,1037,1075,3,92,46,0,1038,
        1075,3,224,112,0,1039,1041,5,9,0,0,1040,1042,5,192,0,0,1041,1040,
        1,0,0,0,1041,1042,1,0,0,0,1042,1043,1,0,0,0,1043,1075,5,184,0,0,
        1044,1045,5,60,0,0,1045,1046,5,177,0,0,1046,1075,3,194,97,0,1047,
        1049,5,41,0,0,1048,1050,5,192,0,0,1049,1048,1,0,0,0,1049,1050,1,
        0,0,0,1050,1051,1,0,0,0,1051,1075,3,194,97,0,1052,1054,5,14,0,0,
        1053,1055,5,192,0,0,1054,1053,1,0,0,0,1054,1055,1,0,0,0,1055,1056,
        1,0,0,0,1056,1075,5,177,0,0,1057,1058,5,17,0,0,1058,1059,5,18,0,
        0,1059,1066,3,194,97,0,1060,1067,5,133,0,0,1061,1063,5,9,0,0,1062,
        1064,5,192,0,0,1063,1062,1,0,0,0,1063,1064,1,0,0,0,1064,1065,1,0,
        0,0,1065,1067,5,184,0,0,1066,1060,1,0,0,0,1066,1061,1,0,0,0,1067,
        1075,1,0,0,0,1068,1075,5,19,0,0,1069,1070,5,61,0,0,1070,1071,3,194,
        97,0,1071,1072,5,177,0,0,1072,1075,1,0,0,0,1073,1075,5,62,0,0,1074,
        1037,1,0,0,0,1074,1038,1,0,0,0,1074,1039,1,0,0,0,1074,1044,1,0,0,
        0,1074,1047,1,0,0,0,1074,1052,1,0,0,0,1074,1057,1,0,0,0,1074,1068,
        1,0,0,0,1074,1069,1,0,0,0,1074,1073,1,0,0,0,1075,91,1,0,0,0,1076,
        1077,5,4,0,0,1077,1078,3,182,91,0,1078,1079,3,182,91,0,1079,93,1,
        0,0,0,1080,1130,3,96,48,0,1081,1130,3,226,113,0,1082,1084,5,9,0,
        0,1083,1085,5,192,0,0,1084,1083,1,0,0,0,1084,1085,1,0,0,0,1085,1086,
        1,0,0,0,1086,1130,5,184,0,0,1087,1088,5,40,0,0,1088,1089,3,194,97,
        0,1089,1090,3,194,97,0,1090,1091,3,194,97,0,1091,1092,3,194,97,0,
        1092,1130,1,0,0,0,1093,1095,5,47,0,0,1094,1096,5,192,0,0,1095,1094,
        1,0,0,0,1095,1096,1,0,0,0,1096,1097,1,0,0,0,1097,1130,5,177,0,0,
        1098,1099,5,64,0,0,1099,1130,5,177,0,0,1100,1101,5,41,0,0,1101,1103,
        3,194,97,0,1102,1104,3,194,97,0,1103,1102,1,0,0,0,1103,1104,1,0,
        0,0,1104,1130,1,0,0,0,1105,1107,5,14,0,0,1106,1108,5,192,0,0,1107,
        1106,1,0,0,0,1107,1108,1,0,0,0,1108,1109,1,0,0,0,1109,1130,5,177,
        0,0,1110,1112,5,48,0,0,1111,1113,5,192,0,0,1112,1111,1,0,0,0,1112,
        1113,1,0,0,0,1113,1114,1,0,0,0,1114,1130,5,177,0,0,1115,1116,5,15,
        0,0,1116,1130,5,212,0,0,1117,1118,5,17,0,0,1118,1119,5,18,0,0,1119,
        1126,3,194,97,0,1120,1127,5,133,0,0,1121,1123,5,9,0,0,1122,1124,
        5,192,0,0,1123,1122,1,0,0,0,1123,1124,1,0,0,0,1124,1125,1,0,0,0,
        1125,1127,5,184,0,0,1126,1120,1,0,0,0,1126,1121,1,0,0,0,1127,1130,
        1,0,0,0,1128,1130,5,19,0,0,1129,1080,1,0,0,0,1129,1081,1,0,0,0,1129,
        1082,1,0,0,0,1129,1087,1,0,0,0,1129,1093,1,0,0,0,1129,1098,1,0,0,
        0,1129,1100,1,0,0,0,1129,1105,1,0,0,0,1129,1110,1,0,0,0,1129,1115,
        1,0,0,0,1129,1117,1,0,0,0,1129,1128,1,0,0,0,1130,95,1,0,0,0,1131,
        1132,5,4,0,0,1132,1133,3,182,91,0,1133,1134,3,182,91,0,1134,1135,
        3,182,91,0,1135,1141,3,182,91,0,1136,1137,3,182,91,0,1137,1138,3,
        182,91,0,1138,1139,3,182,91,0,1139,1140,3,182,91,0,1140,1142,1,0,
        0,0,1141,1136,1,0,0,0,1141,1142,1,0,0,0,1142,1143,1,0,0,0,1143,1144,
        3,190,95,0,1144,1148,3,190,95,0,1145,1146,3,190,95,0,1146,1147,3,
        190,95,0,1147,1149,1,0,0,0,1148,1145,1,0,0,0,1148,1149,1,0,0,0,1149,
        97,1,0,0,0,1150,1186,3,100,50,0,1151,1153,5,9,0,0,1152,1154,5,192,
        0,0,1153,1152,1,0,0,0,1153,1154,1,0,0,0,1154,1155,1,0,0,0,1155,1186,
        5,184,0,0,1156,1157,5,60,0,0,1157,1158,5,177,0,0,1158,1159,5,177,
        0,0,1159,1160,3,194,97,0,1160,1161,3,194,97,0,1161,1162,3,194,97,
        0,1162,1186,1,0,0,0,1163,1165,5,41,0,0,1164,1166,5,192,0,0,1165,
        1164,1,0,0,0,1165,1166,1,0,0,0,1166,1167,1,0,0,0,1167,1186,3,194,
        97,0,1168,1170,5,14,0,0,1169,1171,5,192,0,0,1170,1169,1,0,0,0,1170,
        1171,1,0,0,0,1171,1172,1,0,0,0,1172,1186,5,177,0,0,1173,1174,5,66,
        0,0,1174,1186,3,194,97,0,1175,1176,5,67,0,0,1176,1186,3,194,97,0,
        1177,1178,5,15,0,0,1178,1186,5,212,0,0,1179,1180,5,17,0,0,1180,1181,
        5,18,0,0,1181,1186,3,194,97,0,1182,1186,3,102,51,0,1183,1186,5,19,
        0,0,1184,1186,5,62,0,0,1185,1150,1,0,0,0,1185,1151,1,0,0,0,1185,
        1156,1,0,0,0,1185,1163,1,0,0,0,1185,1168,1,0,0,0,1185,1173,1,0,0,
        0,1185,1175,1,0,0,0,1185,1177,1,0,0,0,1185,1179,1,0,0,0,1185,1182,
        1,0,0,0,1185,1183,1,0,0,0,1185,1184,1,0,0,0,1186,99,1,0,0,0,1187,
        1188,5,4,0,0,1188,1189,3,182,91,0,1189,1190,3,182,91,0,1190,1191,
        3,182,91,0,1191,1192,3,182,91,0,1192,1193,3,182,91,0,1193,1194,3,
        190,95,0,1194,1195,3,190,95,0,1195,101,1,0,0,0,1196,1197,5,68,0,
        0,1197,1198,3,182,91,0,1198,1199,3,190,95,0,1199,1200,3,190,95,0,
        1200,103,1,0,0,0,1201,1241,3,106,53,0,1202,1241,3,108,54,0,1203,
        1241,3,110,55,0,1204,1241,3,112,56,0,1205,1241,3,114,57,0,1206,1241,
        3,116,58,0,1207,1241,3,118,59,0,1208,1241,3,120,60,0,1209,1241,3,
        122,61,0,1210,1212,5,9,0,0,1211,1213,5,192,0,0,1212,1211,1,0,0,0,
        1212,1213,1,0,0,0,1213,1214,1,0,0,0,1214,1241,5,184,0,0,1215,1216,
        5,76,0,0,1216,1241,3,194,97,0,1217,1218,5,64,0,0,1218,1241,5,177,
        0,0,1219,1220,5,41,0,0,1220,1222,3,194,97,0,1221,1223,3,194,97,0,
        1222,1221,1,0,0,0,1222,1223,1,0,0,0,1223,1241,1,0,0,0,1224,1225,
        5,15,0,0,1225,1241,5,212,0,0,1226,1227,5,17,0,0,1227,1228,5,18,0,
        0,1228,1235,3,194,97,0,1229,1236,5,133,0,0,1230,1232,5,9,0,0,1231,
        1233,5,192,0,0,1232,1231,1,0,0,0,1232,1233,1,0,0,0,1233,1234,1,0,
        0,0,1234,1236,5,184,0,0,1235,1229,1,0,0,0,1235,1230,1,0,0,0,1236,
        1237,1,0,0,0,1237,1238,5,184,0,0,1238,1241,1,0,0,0,1239,1241,5,19,
        0,0,1240,1201,1,0,0,0,1240,1202,1,0,0,0,1240,1203,1,0,0,0,1240,1204,
        1,0,0,0,1240,1205,1,0,0,0,1240,1206,1,0,0,0,1240,1207,1,0,0,0,1240,
        1208,1,0,0,0,1240,1209,1,0,0,0,1240,1210,1,0,0,0,1240,1215,1,0,0,
        0,1240,1217,1,0,0,0,1240,1219,1,0,0,0,1240,1224,1,0,0,0,1240,1226,
        1,0,0,0,1240,1239,1,0,0,0,1241,105,1,0,0,0,1242,1243,5,70,0,0,1243,
        1245,3,182,91,0,1244,1246,3,182,91,0,1245,1244,1,0,0,0,1245,1246,
        1,0,0,0,1246,1247,1,0,0,0,1247,1249,3,190,95,0,1248,1250,3,190,95,
        0,1249,1248,1,0,0,0,1249,1250,1,0,0,0,1250,107,1,0,0,0,1251,1252,
        5,68,0,0,1252,1253,3,182,91,0,1253,1254,3,190,95,0,1254,109,1,0,
        0,0,1255,1256,5,50,0,0,1256,1257,3,182,91,0,1257,1258,3,182,91,0,
        1258,1259,3,182,91,0,1259,1261,5,184,0,0,1260,1262,5,178,0,0,1261,
        1260,1,0,0,0,1261,1262,1,0,0,0,1262,1263,1,0,0,0,1263,1264,5,184,
        0,0,1264,111,1,0,0,0,1265,1266,5,71,0,0,1266,1267,3,182,91,0,1267,
        113,1,0,0,0,1268,1269,5,65,0,0,1269,1270,3,182,91,0,1270,115,1,0,
        0,0,1271,1272,5,72,0,0,1272,1273,3,182,91,0,1273,117,1,0,0,0,1274,
        1275,5,73,0,0,1275,1276,3,182,91,0,1276,119,1,0,0,0,1277,1278,5,
        74,0,0,1278,1279,5,184,0,0,1279,1280,3,182,91,0,1280,1281,3,182,
        91,0,1281,1282,3,182,91,0,1282,1283,3,182,91,0,1283,1285,3,182,91,
        0,1284,1286,3,182,91,0,1285,1284,1,0,0,0,1285,1286,1,0,0,0,1286,
        121,1,0,0,0,1287,1288,5,75,0,0,1288,1289,3,182,91,0,1289,123,1,0,
        0,0,1290,1408,3,126,63,0,1291,1293,5,9,0,0,1292,1294,5,192,0,0,1293,
        1292,1,0,0,0,1293,1294,1,0,0,0,1294,1295,1,0,0,0,1295,1408,5,184,
        0,0,1296,1297,5,27,0,0,1297,1408,3,194,97,0,1298,1300,5,41,0,0,1299,
        1301,5,192,0,0,1300,1299,1,0,0,0,1300,1301,1,0,0,0,1301,1302,1,0,
        0,0,1302,1408,3,194,97,0,1303,1304,5,78,0,0,1304,1305,3,194,97,0,
        1305,1306,3,194,97,0,1306,1311,3,194,97,0,1307,1308,3,194,97,0,1308,
        1309,3,194,97,0,1309,1310,3,194,97,0,1310,1312,1,0,0,0,1311,1307,
        1,0,0,0,1311,1312,1,0,0,0,1312,1317,1,0,0,0,1313,1314,3,194,97,0,
        1314,1315,3,194,97,0,1315,1316,3,194,97,0,1316,1318,1,0,0,0,1317,
        1313,1,0,0,0,1317,1318,1,0,0,0,1318,1323,1,0,0,0,1319,1320,3,194,
        97,0,1320,1321,3,194,97,0,1321,1322,3,194,97,0,1322,1324,1,0,0,0,
        1323,1319,1,0,0,0,1323,1324,1,0,0,0,1324,1408,1,0,0,0,1325,1327,
        5,14,0,0,1326,1328,5,192,0,0,1327,1326,1,0,0,0,1327,1328,1,0,0,0,
        1328,1329,1,0,0,0,1329,1408,5,177,0,0,1330,1331,5,79,0,0,1331,1332,
        3,194,97,0,1332,1333,3,194,97,0,1333,1338,3,194,97,0,1334,1335,3,
        194,97,0,1335,1336,3,194,97,0,1336,1337,3,194,97,0,1337,1339,1,0,
        0,0,1338,1334,1,0,0,0,1338,1339,1,0,0,0,1339,1344,1,0,0,0,1340,1341,
        3,194,97,0,1341,1342,3,194,97,0,1342,1343,3,194,97,0,1343,1345,1,
        0,0,0,1344,1340,1,0,0,0,1344,1345,1,0,0,0,1345,1350,1,0,0,0,1346,
        1347,3,194,97,0,1347,1348,3,194,97,0,1348,1349,3,194,97,0,1349,1351,
        1,0,0,0,1350,1346,1,0,0,0,1350,1351,1,0,0,0,1351,1408,1,0,0,0,1352,
        1353,5,17,0,0,1353,1354,5,18,0,0,1354,1361,3,194,97,0,1355,1362,
        5,133,0,0,1356,1358,5,9,0,0,1357,1359,5,192,0,0,1358,1357,1,0,0,
        0,1358,1359,1,0,0,0,1359,1360,1,0,0,0,1360,1362,5,184,0,0,1361,1355,
        1,0,0,0,1361,1356,1,0,0,0,1362,1408,1,0,0,0,1363,1364,5,80,0,0,1364,
        1365,3,194,97,0,1365,1366,3,194,97,0,1366,1371,3,194,97,0,1367,1368,
        3,194,97,0,1368,1369,3,194,97,0,1369,1370,3,194,97,0,1370,1372,1,
        0,0,0,1371,1367,1,0,0,0,1371,1372,1,0,0,0,1372,1377,1,0,0,0,1373,
        1374,3,194,97,0,1374,1375,3,194,97,0,1375,1376,3,194,97,0,1376,1378,
        1,0,0,0,1377,1373,1,0,0,0,1377,1378,1,0,0,0,1378,1383,1,0,0,0,1379,
        1380,3,194,97,0,1380,1381,3,194,97,0,1381,1382,3,194,97,0,1382,1384,
        1,0,0,0,1383,1379,1,0,0,0,1383,1384,1,0,0,0,1384,1408,1,0,0,0,1385,
        1408,5,19,0,0,1386,1388,5,21,0,0,1387,1389,5,192,0,0,1388,1387,1,
        0,0,0,1388,1389,1,0,0,0,1389,1390,1,0,0,0,1390,1408,3,194,97,0,1391,
        1392,5,81,0,0,1392,1408,5,219,0,0,1393,1394,5,61,0,0,1394,1395,5,
        83,0,0,1395,1397,3,194,97,0,1396,1398,3,194,97,0,1397,1396,1,0,0,
        0,1397,1398,1,0,0,0,1398,1400,1,0,0,0,1399,1401,3,194,97,0,1400,
        1399,1,0,0,0,1400,1401,1,0,0,0,1401,1403,1,0,0,0,1402,1404,3,194,
        97,0,1403,1402,1,0,0,0,1403,1404,1,0,0,0,1404,1408,1,0,0,0,1405,
        1408,5,82,0,0,1406,1408,5,62,0,0,1407,1290,1,0,0,0,1407,1291,1,0,
        0,0,1407,1296,1,0,0,0,1407,1298,1,0,0,0,1407,1303,1,0,0,0,1407,1325,
        1,0,0,0,1407,1330,1,0,0,0,1407,1352,1,0,0,0,1407,1363,1,0,0,0,1407,
        1385,1,0,0,0,1407,1386,1,0,0,0,1407,1391,1,0,0,0,1407,1393,1,0,0,
        0,1407,1405,1,0,0,0,1407,1406,1,0,0,0,1408,125,1,0,0,0,1409,1410,
        5,4,0,0,1410,1411,3,182,91,0,1411,1412,3,182,91,0,1412,1413,3,182,
        91,0,1413,1419,3,182,91,0,1414,1415,3,182,91,0,1415,1416,3,182,91,
        0,1416,1417,3,182,91,0,1417,1418,3,182,91,0,1418,1420,1,0,0,0,1419,
        1414,1,0,0,0,1419,1420,1,0,0,0,1420,1426,1,0,0,0,1421,1422,3,182,
        91,0,1422,1423,3,182,91,0,1423,1424,3,182,91,0,1424,1425,3,182,91,
        0,1425,1427,1,0,0,0,1426,1421,1,0,0,0,1426,1427,1,0,0,0,1427,1433,
        1,0,0,0,1428,1429,3,182,91,0,1429,1430,3,182,91,0,1430,1431,3,182,
        91,0,1431,1432,3,182,91,0,1432,1434,1,0,0,0,1433,1428,1,0,0,0,1433,
        1434,1,0,0,0,1434,127,1,0,0,0,1435,1445,3,130,65,0,1436,1445,3,228,
        114,0,1437,1439,5,21,0,0,1438,1440,5,192,0,0,1439,1438,1,0,0,0,1439,
        1440,1,0,0,0,1440,1441,1,0,0,0,1441,1445,3,194,97,0,1442,1445,5,
        17,0,0,1443,1445,5,19,0,0,1444,1435,1,0,0,0,1444,1436,1,0,0,0,1444,
        1437,1,0,0,0,1444,1442,1,0,0,0,1444,1443,1,0,0,0,1445,129,1,0,0,
        0,1446,1447,5,4,0,0,1447,1448,3,182,91,0,1448,1449,3,190,95,0,1449,
        1450,3,190,95,0,1450,131,1,0,0,0,1451,1483,3,134,67,0,1452,1454,
        5,9,0,0,1453,1455,5,192,0,0,1454,1453,1,0,0,0,1454,1455,1,0,0,0,
        1455,1456,1,0,0,0,1456,1483,5,184,0,0,1457,1458,5,40,0,0,1458,1459,
        3,194,97,0,1459,1460,3,194,97,0,1460,1461,3,194,97,0,1461,1462,3,
        194,97,0,1462,1463,3,194,97,0,1463,1483,1,0,0,0,1464,1466,5,41,0,
        0,1465,1467,5,192,0,0,1466,1465,1,0,0,0,1466,1467,1,0,0,0,1467,1468,
        1,0,0,0,1468,1483,3,194,97,0,1469,1471,5,14,0,0,1470,1472,5,192,
        0,0,1471,1470,1,0,0,0,1471,1472,1,0,0,0,1472,1473,1,0,0,0,1473,1483,
        5,177,0,0,1474,1475,5,15,0,0,1475,1483,5,212,0,0,1476,1477,5,17,
        0,0,1477,1478,5,18,0,0,1478,1483,3,194,97,0,1479,1483,5,19,0,0,1480,
        1481,5,44,0,0,1481,1483,5,216,0,0,1482,1451,1,0,0,0,1482,1452,1,
        0,0,0,1482,1457,1,0,0,0,1482,1464,1,0,0,0,1482,1469,1,0,0,0,1482,
        1474,1,0,0,0,1482,1476,1,0,0,0,1482,1479,1,0,0,0,1482,1480,1,0,0,
        0,1483,133,1,0,0,0,1484,1485,5,4,0,0,1485,1486,3,182,91,0,1486,1487,
        3,182,91,0,1487,1488,3,182,91,0,1488,1489,3,182,91,0,1489,1490,3,
        182,91,0,1490,1491,3,182,91,0,1491,1493,3,190,95,0,1492,1494,3,190,
        95,0,1493,1492,1,0,0,0,1493,1494,1,0,0,0,1494,135,1,0,0,0,1495,1565,
        3,138,69,0,1496,1498,5,9,0,0,1497,1499,5,192,0,0,1498,1497,1,0,0,
        0,1498,1499,1,0,0,0,1499,1500,1,0,0,0,1500,1565,5,184,0,0,1501,1502,
        5,27,0,0,1502,1565,3,194,97,0,1503,1504,5,87,0,0,1504,1565,3,194,
        97,0,1505,1507,5,41,0,0,1506,1508,5,192,0,0,1507,1506,1,0,0,0,1507,
        1508,1,0,0,0,1508,1509,1,0,0,0,1509,1565,3,194,97,0,1510,1511,5,
        78,0,0,1511,1512,3,194,97,0,1512,1513,3,194,97,0,1513,1514,3,194,
        97,0,1514,1515,3,194,97,0,1515,1516,3,194,97,0,1516,1517,3,194,97,
        0,1517,1518,3,194,97,0,1518,1565,1,0,0,0,1519,1520,5,88,0,0,1520,
        1565,5,177,0,0,1521,1522,5,89,0,0,1522,1523,3,194,97,0,1523,1524,
        3,194,97,0,1524,1525,3,194,97,0,1525,1526,3,194,97,0,1526,1527,3,
        194,97,0,1527,1528,3,194,97,0,1528,1529,3,194,97,0,1529,1530,3,194,
        97,0,1530,1565,1,0,0,0,1531,1533,5,14,0,0,1532,1534,5,192,0,0,1533,
        1532,1,0,0,0,1533,1534,1,0,0,0,1534,1535,1,0,0,0,1535,1565,5,177,
        0,0,1536,1537,5,17,0,0,1537,1538,5,18,0,0,1538,1545,3,194,97,0,1539,
        1546,5,133,0,0,1540,1542,5,9,0,0,1541,1543,5,192,0,0,1542,1541,1,
        0,0,0,1542,1543,1,0,0,0,1543,1544,1,0,0,0,1544,1546,5,184,0,0,1545,
        1539,1,0,0,0,1545,1540,1,0,0,0,1546,1565,1,0,0,0,1547,1548,5,80,
        0,0,1548,1549,3,194,97,0,1549,1550,3,194,97,0,1550,1551,3,194,97,
        0,1551,1552,3,194,97,0,1552,1553,3,194,97,0,1553,1554,3,194,97,0,
        1554,1555,3,194,97,0,1555,1565,1,0,0,0,1556,1565,5,19,0,0,1557,1558,
        5,149,0,0,1558,1565,5,177,0,0,1559,1560,5,61,0,0,1560,1561,3,194,
        97,0,1561,1562,3,194,97,0,1562,1565,1,0,0,0,1563,1565,5,62,0,0,1564,
        1495,1,0,0,0,1564,1496,1,0,0,0,1564,1501,1,0,0,0,1564,1503,1,0,0,
        0,1564,1505,1,0,0,0,1564,1510,1,0,0,0,1564,1519,1,0,0,0,1564,1521,
        1,0,0,0,1564,1531,1,0,0,0,1564,1536,1,0,0,0,1564,1547,1,0,0,0,1564,
        1556,1,0,0,0,1564,1557,1,0,0,0,1564,1559,1,0,0,0,1564,1563,1,0,0,
        0,1565,137,1,0,0,0,1566,1567,5,4,0,0,1567,1568,3,182,91,0,1568,1569,
        3,182,91,0,1569,1570,3,182,91,0,1570,1571,3,182,91,0,1571,139,1,
        0,0,0,1572,1613,3,142,71,0,1573,1613,3,230,115,0,1574,1576,5,9,0,
        0,1575,1577,5,192,0,0,1576,1575,1,0,0,0,1576,1577,1,0,0,0,1577,1578,
        1,0,0,0,1578,1613,5,184,0,0,1579,1581,5,21,0,0,1580,1582,5,192,0,
        0,1581,1580,1,0,0,0,1581,1582,1,0,0,0,1582,1583,1,0,0,0,1583,1613,
        3,194,97,0,1584,1585,5,44,0,0,1585,1613,5,217,0,0,1586,1587,5,40,
        0,0,1587,1588,3,194,97,0,1588,1589,3,194,97,0,1589,1590,3,194,97,
        0,1590,1613,1,0,0,0,1591,1592,5,91,0,0,1592,1593,3,194,97,0,1593,
        1594,3,194,97,0,1594,1595,3,194,97,0,1595,1613,1,0,0,0,1596,1598,
        5,41,0,0,1597,1599,5,192,0,0,1598,1597,1,0,0,0,1598,1599,1,0,0,0,
        1599,1600,1,0,0,0,1600,1613,3,194,97,0,1601,1603,5,14,0,0,1602,1604,
        5,192,0,0,1603,1602,1,0,0,0,1603,1604,1,0,0,0,1604,1605,1,0,0,0,
        1605,1613,5,177,0,0,1606,1607,5,15,0,0,1607,1613,5,212,0,0,1608,
        1609,5,17,0,0,1609,1610,5,18,0,0,1610,1613,3,194,97,0,1611,1613,
        5,19,0,0,1612,1572,1,0,0,0,1612,1573,1,0,0,0,1612,1574,1,0,0,0,1612,
        1579,1,0,0,0,1612,1584,1,0,0,0,1612,1586,1,0,0,0,1612,1591,1,0,0,
        0,1612,1596,1,0,0,0,1612,1601,1,0,0,0,1612,1606,1,0,0,0,1612,1608,
        1,0,0,0,1612,1611,1,0,0,0,1613,141,1,0,0,0,1614,1615,5,4,0,0,1615,
        1616,3,182,91,0,1616,1617,3,182,91,0,1617,1618,3,182,91,0,1618,1619,
        3,182,91,0,1619,1620,3,182,91,0,1620,1621,3,182,91,0,1621,1622,3,
        182,91,0,1622,1624,3,190,95,0,1623,1625,3,190,95,0,1624,1623,1,0,
        0,0,1624,1625,1,0,0,0,1625,1627,1,0,0,0,1626,1628,3,190,95,0,1627,
        1626,1,0,0,0,1627,1628,1,0,0,0,1628,143,1,0,0,0,1629,1668,3,142,
        71,0,1630,1632,5,9,0,0,1631,1633,5,192,0,0,1632,1631,1,0,0,0,1632,
        1633,1,0,0,0,1633,1634,1,0,0,0,1634,1668,5,184,0,0,1635,1637,5,21,
        0,0,1636,1638,5,192,0,0,1637,1636,1,0,0,0,1637,1638,1,0,0,0,1638,
        1639,1,0,0,0,1639,1668,3,194,97,0,1640,1641,5,40,0,0,1641,1642,3,
        194,97,0,1642,1643,3,194,97,0,1643,1644,3,194,97,0,1644,1668,1,0,
        0,0,1645,1646,5,91,0,0,1646,1647,3,194,97,0,1647,1648,3,194,97,0,
        1648,1649,3,194,97,0,1649,1650,3,194,97,0,1650,1668,1,0,0,0,1651,
        1653,5,41,0,0,1652,1654,5,192,0,0,1653,1652,1,0,0,0,1653,1654,1,
        0,0,0,1654,1655,1,0,0,0,1655,1668,3,194,97,0,1656,1658,5,14,0,0,
        1657,1659,5,192,0,0,1658,1657,1,0,0,0,1658,1659,1,0,0,0,1659,1660,
        1,0,0,0,1660,1668,5,177,0,0,1661,1662,5,15,0,0,1662,1668,5,212,0,
        0,1663,1664,5,17,0,0,1664,1665,5,18,0,0,1665,1668,3,194,97,0,1666,
        1668,5,19,0,0,1667,1629,1,0,0,0,1667,1630,1,0,0,0,1667,1635,1,0,
        0,0,1667,1640,1,0,0,0,1667,1645,1,0,0,0,1667,1651,1,0,0,0,1667,1656,
        1,0,0,0,1667,1661,1,0,0,0,1667,1663,1,0,0,0,1667,1666,1,0,0,0,1668,
        145,1,0,0,0,1669,1701,3,148,74,0,1670,1672,5,9,0,0,1671,1673,5,192,
        0,0,1672,1671,1,0,0,0,1672,1673,1,0,0,0,1673,1674,1,0,0,0,1674,1701,
        5,184,0,0,1675,1676,5,40,0,0,1676,1677,3,194,97,0,1677,1678,3,194,
        97,0,1678,1679,3,194,97,0,1679,1680,3,194,97,0,1680,1681,3,194,97,
        0,1681,1682,3,194,97,0,1682,1683,3,194,97,0,1683,1701,1,0,0,0,1684,
        1686,5,41,0,0,1685,1687,5,192,0,0,1686,1685,1,0,0,0,1686,1687,1,
        0,0,0,1687,1688,1,0,0,0,1688,1701,3,194,97,0,1689,1691,5,14,0,0,
        1690,1692,5,192,0,0,1691,1690,1,0,0,0,1691,1692,1,0,0,0,1692,1693,
        1,0,0,0,1693,1701,5,177,0,0,1694,1695,5,15,0,0,1695,1701,5,212,0,
        0,1696,1697,5,17,0,0,1697,1698,5,18,0,0,1698,1701,3,194,97,0,1699,
        1701,5,19,0,0,1700,1669,1,0,0,0,1700,1670,1,0,0,0,1700,1675,1,0,
        0,0,1700,1684,1,0,0,0,1700,1689,1,0,0,0,1700,1694,1,0,0,0,1700,1696,
        1,0,0,0,1700,1699,1,0,0,0,1701,147,1,0,0,0,1702,1703,5,4,0,0,1703,
        1704,3,182,91,0,1704,1705,3,182,91,0,1705,1706,3,182,91,0,1706,1707,
        3,182,91,0,1707,1708,3,182,91,0,1708,1709,3,182,91,0,1709,1710,3,
        182,91,0,1710,1711,3,182,91,0,1711,1712,3,190,95,0,1712,1713,3,190,
        95,0,1713,149,1,0,0,0,1714,1758,3,152,76,0,1715,1717,5,9,0,0,1716,
        1718,5,192,0,0,1717,1716,1,0,0,0,1717,1718,1,0,0,0,1718,1719,1,0,
        0,0,1719,1758,5,184,0,0,1720,1721,5,95,0,0,1721,1758,5,184,0,0,1722,
        1723,5,60,0,0,1723,1724,5,177,0,0,1724,1725,5,177,0,0,1725,1758,
        3,194,97,0,1726,1727,5,76,0,0,1727,1758,3,194,97,0,1728,1730,5,41,
        0,0,1729,1731,5,192,0,0,1730,1729,1,0,0,0,1730,1731,1,0,0,0,1731,
        1732,1,0,0,0,1732,1758,3,194,97,0,1733,1735,5,14,0,0,1734,1736,5,
        192,0,0,1735,1734,1,0,0,0,1735,1736,1,0,0,0,1736,1737,1,0,0,0,1737,
        1758,5,177,0,0,1738,1739,5,15,0,0,1739,1758,5,212,0,0,1740,1741,
        5,17,0,0,1741,1742,5,18,0,0,1742,1749,3,194,97,0,1743,1750,5,133,
        0,0,1744,1746,5,9,0,0,1745,1747,5,192,0,0,1746,1745,1,0,0,0,1746,
        1747,1,0,0,0,1747,1748,1,0,0,0,1748,1750,5,184,0,0,1749,1743,1,0,
        0,0,1749,1744,1,0,0,0,1750,1758,1,0,0,0,1751,1758,5,19,0,0,1752,
        1753,5,61,0,0,1753,1754,5,96,0,0,1754,1755,5,177,0,0,1755,1758,5,
        177,0,0,1756,1758,5,62,0,0,1757,1714,1,0,0,0,1757,1715,1,0,0,0,1757,
        1720,1,0,0,0,1757,1722,1,0,0,0,1757,1726,1,0,0,0,1757,1728,1,0,0,
        0,1757,1733,1,0,0,0,1757,1738,1,0,0,0,1757,1740,1,0,0,0,1757,1751,
        1,0,0,0,1757,1752,1,0,0,0,1757,1756,1,0,0,0,1758,151,1,0,0,0,1759,
        1760,5,4,0,0,1760,1761,3,182,91,0,1761,1762,3,182,91,0,1762,1763,
        3,182,91,0,1763,1764,3,182,91,0,1764,1765,3,182,91,0,1765,1766,3,
        182,91,0,1766,1767,3,182,91,0,1767,1768,3,182,91,0,1768,1769,3,182,
        91,0,1769,1770,3,182,91,0,1770,1772,3,182,91,0,1771,1773,3,182,91,
        0,1772,1771,1,0,0,0,1772,1773,1,0,0,0,1773,153,1,0,0,0,1774,1832,
        3,156,78,0,1775,1832,3,232,116,0,1776,1778,5,9,0,0,1777,1779,5,192,
        0,0,1778,1777,1,0,0,0,1778,1779,1,0,0,0,1779,1780,1,0,0,0,1780,1832,
        5,184,0,0,1781,1783,5,41,0,0,1782,1784,5,192,0,0,1783,1782,1,0,0,
        0,1783,1784,1,0,0,0,1784,1785,1,0,0,0,1785,1786,5,184,0,0,1786,1832,
        3,194,97,0,1787,1789,5,14,0,0,1788,1790,5,192,0,0,1789,1788,1,0,
        0,0,1789,1790,1,0,0,0,1790,1791,1,0,0,0,1791,1832,5,177,0,0,1792,
        1794,5,15,0,0,1793,1795,5,211,0,0,1794,1793,1,0,0,0,1794,1795,1,
        0,0,0,1795,1796,1,0,0,0,1796,1797,5,213,0,0,1797,1832,5,212,0,0,
        1798,1800,5,98,0,0,1799,1801,5,192,0,0,1800,1799,1,0,0,0,1800,1801,
        1,0,0,0,1801,1802,1,0,0,0,1802,1803,5,184,0,0,1803,1832,3,194,97,
        0,1804,1806,5,99,0,0,1805,1807,5,192,0,0,1806,1805,1,0,0,0,1806,
        1807,1,0,0,0,1807,1808,1,0,0,0,1808,1809,5,184,0,0,1809,1832,3,194,
        97,0,1810,1812,5,100,0,0,1811,1813,5,192,0,0,1812,1811,1,0,0,0,1812,
        1813,1,0,0,0,1813,1814,1,0,0,0,1814,1815,5,184,0,0,1815,1816,3,194,
        97,0,1816,1817,3,194,97,0,1817,1832,1,0,0,0,1818,1819,5,17,0,0,1819,
        1820,5,18,0,0,1820,1827,3,194,97,0,1821,1828,5,133,0,0,1822,1824,
        5,9,0,0,1823,1825,5,192,0,0,1824,1823,1,0,0,0,1824,1825,1,0,0,0,
        1825,1826,1,0,0,0,1826,1828,5,184,0,0,1827,1821,1,0,0,0,1827,1822,
        1,0,0,0,1828,1832,1,0,0,0,1829,1832,5,19,0,0,1830,1832,5,101,0,0,
        1831,1774,1,0,0,0,1831,1775,1,0,0,0,1831,1776,1,0,0,0,1831,1781,
        1,0,0,0,1831,1787,1,0,0,0,1831,1792,1,0,0,0,1831,1798,1,0,0,0,1831,
        1804,1,0,0,0,1831,1810,1,0,0,0,1831,1818,1,0,0,0,1831,1829,1,0,0,
        0,1831,1830,1,0,0,0,1832,155,1,0,0,0,1833,1834,5,4,0,0,1834,1835,
        3,182,91,0,1835,1836,3,182,91,0,1836,1838,3,190,95,0,1837,1839,3,
        190,95,0,1838,1837,1,0,0,0,1838,1839,1,0,0,0,1839,157,1,0,0,0,1840,
        1890,3,160,80,0,1841,1890,3,234,117,0,1842,1844,5,9,0,0,1843,1845,
        5,192,0,0,1844,1843,1,0,0,0,1844,1845,1,0,0,0,1845,1846,1,0,0,0,
        1846,1890,5,184,0,0,1847,1848,5,103,0,0,1848,1890,5,177,0,0,1849,
        1850,5,40,0,0,1850,1851,3,194,97,0,1851,1852,3,194,97,0,1852,1890,
        1,0,0,0,1853,1855,5,41,0,0,1854,1856,5,192,0,0,1855,1854,1,0,0,0,
        1855,1856,1,0,0,0,1856,1857,1,0,0,0,1857,1890,3,194,97,0,1858,1860,
        5,14,0,0,1859,1861,5,192,0,0,1860,1859,1,0,0,0,1860,1861,1,0,0,0,
        1861,1862,1,0,0,0,1862,1890,5,177,0,0,1863,1864,5,17,0,0,1864,1865,
        5,18,0,0,1865,1872,3,194,97,0,1866,1873,5,133,0,0,1867,1869,5,9,
        0,0,1868,1870,5,192,0,0,1869,1868,1,0,0,0,1869,1870,1,0,0,0,1870,
        1871,1,0,0,0,1871,1873,5,184,0,0,1872,1866,1,0,0,0,1872,1867,1,0,
        0,0,1873,1890,1,0,0,0,1874,1890,5,19,0,0,1875,1876,5,104,0,0,1876,
        1890,5,184,0,0,1877,1878,5,105,0,0,1878,1879,3,194,97,0,1879,1880,
        5,177,0,0,1880,1890,1,0,0,0,1881,1890,5,106,0,0,1882,1890,5,107,
        0,0,1883,1890,5,108,0,0,1884,1890,5,109,0,0,1885,1890,5,110,0,0,
        1886,1890,5,111,0,0,1887,1888,5,112,0,0,1888,1890,5,177,0,0,1889,
        1840,1,0,0,0,1889,1841,1,0,0,0,1889,1842,1,0,0,0,1889,1847,1,0,0,
        0,1889,1849,1,0,0,0,1889,1853,1,0,0,0,1889,1858,1,0,0,0,1889,1863,
        1,0,0,0,1889,1874,1,0,0,0,1889,1875,1,0,0,0,1889,1877,1,0,0,0,1889,
        1881,1,0,0,0,1889,1882,1,0,0,0,1889,1883,1,0,0,0,1889,1884,1,0,0,
        0,1889,1885,1,0,0,0,1889,1886,1,0,0,0,1889,1887,1,0,0,0,1890,159,
        1,0,0,0,1891,1892,5,4,0,0,1892,1893,3,182,91,0,1893,1894,3,182,91,
        0,1894,1895,3,182,91,0,1895,1896,3,182,91,0,1896,1897,3,182,91,0,
        1897,1899,3,190,95,0,1898,1900,3,190,95,0,1899,1898,1,0,0,0,1899,
        1900,1,0,0,0,1900,161,1,0,0,0,1901,1937,3,164,82,0,1902,1904,5,9,
        0,0,1903,1905,5,192,0,0,1904,1903,1,0,0,0,1904,1905,1,0,0,0,1905,
        1906,1,0,0,0,1906,1937,5,184,0,0,1907,1908,5,103,0,0,1908,1937,5,
        177,0,0,1909,1910,5,40,0,0,1910,1911,3,194,97,0,1911,1912,3,194,
        97,0,1912,1937,1,0,0,0,1913,1915,5,41,0,0,1914,1916,5,192,0,0,1915,
        1914,1,0,0,0,1915,1916,1,0,0,0,1916,1917,1,0,0,0,1917,1937,3,194,
        97,0,1918,1920,5,14,0,0,1919,1921,5,192,0,0,1920,1919,1,0,0,0,1920,
        1921,1,0,0,0,1921,1922,1,0,0,0,1922,1937,5,177,0,0,1923,1937,5,106,
        0,0,1924,1937,5,107,0,0,1925,1937,5,105,0,0,1926,1937,5,108,0,0,
        1927,1937,5,109,0,0,1928,1937,5,112,0,0,1929,1930,5,17,0,0,1930,
        1937,5,18,0,0,1931,1937,5,19,0,0,1932,1933,5,104,0,0,1933,1937,5,
        184,0,0,1934,1937,5,110,0,0,1935,1937,5,111,0,0,1936,1901,1,0,0,
        0,1936,1902,1,0,0,0,1936,1907,1,0,0,0,1936,1909,1,0,0,0,1936,1913,
        1,0,0,0,1936,1918,1,0,0,0,1936,1923,1,0,0,0,1936,1924,1,0,0,0,1936,
        1925,1,0,0,0,1936,1926,1,0,0,0,1936,1927,1,0,0,0,1936,1928,1,0,0,
        0,1936,1929,1,0,0,0,1936,1931,1,0,0,0,1936,1932,1,0,0,0,1936,1934,
        1,0,0,0,1936,1935,1,0,0,0,1937,163,1,0,0,0,1938,1939,5,4,0,0,1939,
        1940,3,182,91,0,1940,1941,3,182,91,0,1941,1942,3,182,91,0,1942,1943,
        3,182,91,0,1943,1944,3,182,91,0,1944,1945,3,182,91,0,1945,1947,3,
        190,95,0,1946,1948,3,190,95,0,1947,1946,1,0,0,0,1947,1948,1,0,0,
        0,1948,165,1,0,0,0,1949,1970,3,168,84,0,1950,1952,5,9,0,0,1951,1953,
        5,192,0,0,1952,1951,1,0,0,0,1952,1953,1,0,0,0,1953,1954,1,0,0,0,
        1954,1970,5,184,0,0,1955,1957,5,41,0,0,1956,1958,5,192,0,0,1957,
        1956,1,0,0,0,1957,1958,1,0,0,0,1958,1959,1,0,0,0,1959,1970,3,194,
        97,0,1960,1962,5,14,0,0,1961,1963,5,192,0,0,1962,1961,1,0,0,0,1962,
        1963,1,0,0,0,1963,1964,1,0,0,0,1964,1970,5,177,0,0,1965,1966,5,17,
        0,0,1966,1967,5,18,0,0,1967,1970,3,194,97,0,1968,1970,5,19,0,0,1969,
        1949,1,0,0,0,1969,1950,1,0,0,0,1969,1955,1,0,0,0,1969,1960,1,0,0,
        0,1969,1965,1,0,0,0,1969,1968,1,0,0,0,1970,167,1,0,0,0,1971,1972,
        5,4,0,0,1972,1973,3,182,91,0,1973,1974,3,182,91,0,1974,1975,3,190,
        95,0,1975,1976,3,190,95,0,1976,1977,3,190,95,0,1977,169,1,0,0,0,
        1978,2005,3,172,86,0,1979,1981,5,9,0,0,1980,1982,5,192,0,0,1981,
        1980,1,0,0,0,1981,1982,1,0,0,0,1982,1983,1,0,0,0,1983,2005,5,184,
        0,0,1984,1985,5,116,0,0,1985,2005,5,177,0,0,1986,1987,5,40,0,0,1987,
        2005,3,194,97,0,1988,1990,5,41,0,0,1989,1991,5,192,0,0,1990,1989,
        1,0,0,0,1990,1991,1,0,0,0,1991,1992,1,0,0,0,1992,2005,3,194,97,0,
        1993,1995,5,14,0,0,1994,1996,5,192,0,0,1995,1994,1,0,0,0,1995,1996,
        1,0,0,0,1996,1997,1,0,0,0,1997,2005,5,177,0,0,1998,1999,5,17,0,0,
        1999,2000,5,18,0,0,2000,2005,3,194,97,0,2001,2005,5,19,0,0,2002,
        2003,5,112,0,0,2003,2005,5,177,0,0,2004,1978,1,0,0,0,2004,1979,1,
        0,0,0,2004,1984,1,0,0,0,2004,1986,1,0,0,0,2004,1988,1,0,0,0,2004,
        1993,1,0,0,0,2004,1998,1,0,0,0,2004,2001,1,0,0,0,2004,2002,1,0,0,
        0,2005,171,1,0,0,0,2006,2007,5,4,0,0,2007,2008,3,182,91,0,2008,2009,
        3,182,91,0,2009,2010,3,182,91,0,2010,2012,3,190,95,0,2011,2013,3,
        190,95,0,2012,2011,1,0,0,0,2012,2013,1,0,0,0,2013,173,1,0,0,0,2014,
        2036,3,176,88,0,2015,2036,3,236,118,0,2016,2018,5,9,0,0,2017,2019,
        5,192,0,0,2018,2017,1,0,0,0,2018,2019,1,0,0,0,2019,2020,1,0,0,0,
        2020,2036,5,184,0,0,2021,2023,5,41,0,0,2022,2024,5,192,0,0,2023,
        2022,1,0,0,0,2023,2024,1,0,0,0,2024,2025,1,0,0,0,2025,2036,3,194,
        97,0,2026,2028,5,14,0,0,2027,2029,5,192,0,0,2028,2027,1,0,0,0,2028,
        2029,1,0,0,0,2029,2030,1,0,0,0,2030,2036,5,177,0,0,2031,2032,5,17,
        0,0,2032,2033,5,18,0,0,2033,2036,3,194,97,0,2034,2036,5,19,0,0,2035,
        2014,1,0,0,0,2035,2015,1,0,0,0,2035,2016,1,0,0,0,2035,2021,1,0,0,
        0,2035,2026,1,0,0,0,2035,2031,1,0,0,0,2035,2034,1,0,0,0,2036,175,
        1,0,0,0,2037,2038,5,4,0,0,2038,2039,3,182,91,0,2039,2040,3,182,91,
        0,2040,2041,3,182,91,0,2041,177,1,0,0,0,2042,2110,3,180,90,0,2043,
        2110,3,238,119,0,2044,2046,5,117,0,0,2045,2047,5,192,0,0,2046,2045,
        1,0,0,0,2046,2047,1,0,0,0,2047,2048,1,0,0,0,2048,2110,3,194,97,0,
        2049,2051,5,118,0,0,2050,2052,5,192,0,0,2051,2050,1,0,0,0,2051,2052,
        1,0,0,0,2052,2053,1,0,0,0,2053,2110,3,194,97,0,2054,2056,5,119,0,
        0,2055,2057,5,192,0,0,2056,2055,1,0,0,0,2056,2057,1,0,0,0,2057,2058,
        1,0,0,0,2058,2110,5,177,0,0,2059,2061,5,120,0,0,2060,2062,5,192,
        0,0,2061,2060,1,0,0,0,2061,2062,1,0,0,0,2062,2063,1,0,0,0,2063,2110,
        5,177,0,0,2064,2066,5,121,0,0,2065,2067,5,192,0,0,2066,2065,1,0,
        0,0,2066,2067,1,0,0,0,2067,2068,1,0,0,0,2068,2110,5,177,0,0,2069,
        2071,5,122,0,0,2070,2072,5,192,0,0,2071,2070,1,0,0,0,2071,2072,1,
        0,0,0,2072,2073,1,0,0,0,2073,2110,5,184,0,0,2074,2076,5,123,0,0,
        2075,2077,5,192,0,0,2076,2075,1,0,0,0,2076,2077,1,0,0,0,2077,2078,
        1,0,0,0,2078,2110,3,194,97,0,2079,2081,5,124,0,0,2080,2082,5,192,
        0,0,2081,2080,1,0,0,0,2081,2082,1,0,0,0,2082,2083,1,0,0,0,2083,2110,
        3,194,97,0,2084,2086,5,125,0,0,2085,2087,5,192,0,0,2086,2085,1,0,
        0,0,2086,2087,1,0,0,0,2087,2088,1,0,0,0,2088,2110,3,194,97,0,2089,
        2091,5,126,0,0,2090,2092,5,192,0,0,2091,2090,1,0,0,0,2091,2092,1,
        0,0,0,2092,2093,1,0,0,0,2093,2110,3,194,97,0,2094,2096,5,127,0,0,
        2095,2097,5,192,0,0,2096,2095,1,0,0,0,2096,2097,1,0,0,0,2097,2098,
        1,0,0,0,2098,2110,5,177,0,0,2099,2101,5,128,0,0,2100,2102,5,192,
        0,0,2101,2100,1,0,0,0,2101,2102,1,0,0,0,2102,2103,1,0,0,0,2103,2110,
        5,177,0,0,2104,2106,5,129,0,0,2105,2107,5,192,0,0,2106,2105,1,0,
        0,0,2106,2107,1,0,0,0,2107,2108,1,0,0,0,2108,2110,5,177,0,0,2109,
        2042,1,0,0,0,2109,2043,1,0,0,0,2109,2044,1,0,0,0,2109,2049,1,0,0,
        0,2109,2054,1,0,0,0,2109,2059,1,0,0,0,2109,2064,1,0,0,0,2109,2069,
        1,0,0,0,2109,2074,1,0,0,0,2109,2079,1,0,0,0,2109,2084,1,0,0,0,2109,
        2089,1,0,0,0,2109,2094,1,0,0,0,2109,2099,1,0,0,0,2109,2104,1,0,0,
        0,2110,179,1,0,0,0,2111,2112,5,4,0,0,2112,2113,3,182,91,0,2113,2114,
        3,182,91,0,2114,181,1,0,0,0,2115,2116,5,189,0,0,2116,2117,3,184,
        92,0,2117,2118,5,190,0,0,2118,183,1,0,0,0,2119,2124,3,186,93,0,2120,
        2121,5,172,0,0,2121,2123,3,186,93,0,2122,2120,1,0,0,0,2123,2126,
        1,0,0,0,2124,2122,1,0,0,0,2124,2125,1,0,0,0,2125,185,1,0,0,0,2126,
        2124,1,0,0,0,2127,2132,3,188,94,0,2128,2129,5,173,0,0,2129,2131,
        3,188,94,0,2130,2128,1,0,0,0,2131,2134,1,0,0,0,2132,2130,1,0,0,0,
        2132,2133,1,0,0,0,2133,187,1,0,0,0,2134,2132,1,0,0,0,2135,2136,6,
        94,-1,0,2136,2137,5,189,0,0,2137,2138,3,184,92,0,2138,2139,5,190,
        0,0,2139,2275,1,0,0,0,2140,2275,5,133,0,0,2141,2142,5,135,0,0,2142,
        2143,7,1,0,0,2143,2144,7,2,0,0,2144,2275,7,1,0,0,2145,2147,5,136,
        0,0,2146,2148,5,204,0,0,2147,2146,1,0,0,0,2147,2148,1,0,0,0,2148,
        2149,1,0,0,0,2149,2150,5,205,0,0,2150,2151,5,206,0,0,2151,2275,3,
        192,96,0,2152,2153,5,137,0,0,2153,2275,3,188,94,29,2154,2155,5,138,
        0,0,2155,2275,3,188,94,28,2156,2157,5,139,0,0,2157,2275,3,188,94,
        27,2158,2166,5,140,0,0,2159,2167,5,185,0,0,2160,2163,5,184,0,0,2161,
        2162,5,191,0,0,2162,2164,5,184,0,0,2163,2161,1,0,0,0,2163,2164,1,
        0,0,0,2164,2167,1,0,0,0,2165,2167,5,198,0,0,2166,2159,1,0,0,0,2166,
        2160,1,0,0,0,2166,2165,1,0,0,0,2167,2275,1,0,0,0,2168,2275,5,141,
        0,0,2169,2170,5,142,0,0,2170,2275,5,177,0,0,2171,2275,5,143,0,0,
        2172,2185,5,144,0,0,2173,2186,5,185,0,0,2174,2177,5,184,0,0,2175,
        2176,5,191,0,0,2176,2178,5,184,0,0,2177,2175,1,0,0,0,2177,2178,1,
        0,0,0,2178,2186,1,0,0,0,2179,2182,5,180,0,0,2180,2181,5,191,0,0,
        2181,2183,5,180,0,0,2182,2180,1,0,0,0,2182,2183,1,0,0,0,2183,2186,
        1,0,0,0,2184,2186,5,198,0,0,2185,2173,1,0,0,0,2185,2174,1,0,0,0,
        2185,2179,1,0,0,0,2185,2184,1,0,0,0,2186,2275,1,0,0,0,2187,2188,
        5,174,0,0,2188,2275,3,188,94,21,2189,2190,5,145,0,0,2190,2191,5,
        189,0,0,2191,2193,3,192,96,0,2192,2194,5,175,0,0,2193,2192,1,0,0,
        0,2193,2194,1,0,0,0,2194,2195,1,0,0,0,2195,2197,3,192,96,0,2196,
        2198,5,175,0,0,2197,2196,1,0,0,0,2197,2198,1,0,0,0,2198,2199,1,0,
        0,0,2199,2200,3,192,96,0,2200,2201,5,190,0,0,2201,2202,5,146,0,0,
        2202,2203,3,192,96,0,2203,2275,1,0,0,0,2204,2205,5,145,0,0,2205,
        2206,5,189,0,0,2206,2208,5,170,0,0,2207,2209,5,192,0,0,2208,2207,
        1,0,0,0,2208,2209,1,0,0,0,2209,2210,1,0,0,0,2210,2212,3,182,91,0,
        2211,2213,5,175,0,0,2212,2211,1,0,0,0,2212,2213,1,0,0,0,2213,2219,
        1,0,0,0,2214,2216,5,171,0,0,2215,2217,5,192,0,0,2216,2215,1,0,0,
        0,2216,2217,1,0,0,0,2217,2218,1,0,0,0,2218,2220,3,182,91,0,2219,
        2214,1,0,0,0,2219,2220,1,0,0,0,2220,2221,1,0,0,0,2221,2222,5,190,
        0,0,2222,2223,5,146,0,0,2223,2224,3,192,96,0,2224,2275,1,0,0,0,2225,
        2275,5,147,0,0,2226,2275,5,148,0,0,2227,2235,5,149,0,0,2228,2236,
        5,186,0,0,2229,2232,5,177,0,0,2230,2231,5,191,0,0,2231,2233,5,177,
        0,0,2232,2230,1,0,0,0,2232,2233,1,0,0,0,2233,2236,1,0,0,0,2234,2236,
        5,198,0,0,2235,2228,1,0,0,0,2235,2229,1,0,0,0,2235,2234,1,0,0,0,
        2236,2275,1,0,0,0,2237,2245,5,150,0,0,2238,2246,5,185,0,0,2239,2242,
        5,184,0,0,2240,2241,5,191,0,0,2241,2243,5,184,0,0,2242,2240,1,0,
        0,0,2242,2243,1,0,0,0,2243,2246,1,0,0,0,2244,2246,5,198,0,0,2245,
        2238,1,0,0,0,2245,2239,1,0,0,0,2245,2244,1,0,0,0,2246,2275,1,0,0,
        0,2247,2260,5,152,0,0,2248,2261,5,185,0,0,2249,2252,5,184,0,0,2250,
        2251,5,191,0,0,2251,2253,5,184,0,0,2252,2250,1,0,0,0,2252,2253,1,
        0,0,0,2253,2261,1,0,0,0,2254,2257,5,180,0,0,2255,2256,5,191,0,0,
        2256,2258,5,180,0,0,2257,2255,1,0,0,0,2257,2258,1,0,0,0,2258,2261,
        1,0,0,0,2259,2261,5,198,0,0,2260,2248,1,0,0,0,2260,2249,1,0,0,0,
        2260,2254,1,0,0,0,2260,2259,1,0,0,0,2261,2275,1,0,0,0,2262,2275,
        5,153,0,0,2263,2275,5,154,0,0,2264,2275,5,155,0,0,2265,2275,5,156,
        0,0,2266,2275,5,157,0,0,2267,2275,5,158,0,0,2268,2275,5,159,0,0,
        2269,2275,5,160,0,0,2270,2275,5,161,0,0,2271,2275,5,162,0,0,2272,
        2275,5,130,0,0,2273,2275,5,131,0,0,2274,2135,1,0,0,0,2274,2140,1,
        0,0,0,2274,2141,1,0,0,0,2274,2145,1,0,0,0,2274,2152,1,0,0,0,2274,
        2154,1,0,0,0,2274,2156,1,0,0,0,2274,2158,1,0,0,0,2274,2168,1,0,0,
        0,2274,2169,1,0,0,0,2274,2171,1,0,0,0,2274,2172,1,0,0,0,2274,2187,
        1,0,0,0,2274,2189,1,0,0,0,2274,2204,1,0,0,0,2274,2225,1,0,0,0,2274,
        2226,1,0,0,0,2274,2227,1,0,0,0,2274,2237,1,0,0,0,2274,2247,1,0,0,
        0,2274,2262,1,0,0,0,2274,2263,1,0,0,0,2274,2264,1,0,0,0,2274,2265,
        1,0,0,0,2274,2266,1,0,0,0,2274,2267,1,0,0,0,2274,2268,1,0,0,0,2274,
        2269,1,0,0,0,2274,2270,1,0,0,0,2274,2271,1,0,0,0,2274,2272,1,0,0,
        0,2274,2273,1,0,0,0,2275,2284,1,0,0,0,2276,2277,10,32,0,0,2277,2278,
        5,134,0,0,2278,2283,3,192,96,0,2279,2280,10,14,0,0,2280,2281,5,151,
        0,0,2281,2283,3,192,96,0,2282,2276,1,0,0,0,2282,2279,1,0,0,0,2283,
        2286,1,0,0,0,2284,2282,1,0,0,0,2284,2285,1,0,0,0,2285,189,1,0,0,
        0,2286,2284,1,0,0,0,2287,2288,7,3,0,0,2288,191,1,0,0,0,2289,2290,
        7,4,0,0,2290,193,1,0,0,0,2291,2292,7,3,0,0,2292,195,1,0,0,0,2293,
        2294,7,4,0,0,2294,197,1,0,0,0,2295,2306,5,132,0,0,2296,2304,5,221,
        0,0,2297,2299,5,224,0,0,2298,2297,1,0,0,0,2299,2302,1,0,0,0,2300,
        2298,1,0,0,0,2300,2301,1,0,0,0,2301,2305,1,0,0,0,2302,2300,1,0,0,
        0,2303,2305,5,225,0,0,2304,2300,1,0,0,0,2304,2303,1,0,0,0,2305,2307,
        1,0,0,0,2306,2296,1,0,0,0,2306,2307,1,0,0,0,2307,2308,1,0,0,0,2308,
        2312,5,222,0,0,2309,2311,5,224,0,0,2310,2309,1,0,0,0,2311,2314,1,
        0,0,0,2312,2310,1,0,0,0,2312,2313,1,0,0,0,2313,2315,1,0,0,0,2314,
        2312,1,0,0,0,2315,2316,5,223,0,0,2316,199,1,0,0,0,2317,2318,5,163,
        0,0,2318,2319,3,202,101,0,2319,2320,3,182,91,0,2320,201,1,0,0,0,
        2321,2322,7,5,0,0,2322,2323,3,204,102,0,2323,2324,5,227,0,0,2324,
        2328,1,0,0,0,2325,2326,5,166,0,0,2326,2328,3,212,106,0,2327,2321,
        1,0,0,0,2327,2325,1,0,0,0,2328,203,1,0,0,0,2329,2332,5,237,0,0,2330,
        2331,5,228,0,0,2331,2333,3,206,103,0,2332,2330,1,0,0,0,2332,2333,
        1,0,0,0,2333,205,1,0,0,0,2334,2337,3,208,104,0,2335,2336,7,6,0,0,
        2336,2338,3,206,103,0,2337,2335,1,0,0,0,2337,2338,1,0,0,0,2338,207,
        1,0,0,0,2339,2347,5,237,0,0,2340,2347,3,210,105,0,2341,2347,5,235,
        0,0,2342,2347,5,236,0,0,2343,2347,5,261,0,0,2344,2347,5,260,0,0,
        2345,2347,5,262,0,0,2346,2339,1,0,0,0,2346,2340,1,0,0,0,2346,2341,
        1,0,0,0,2346,2342,1,0,0,0,2346,2343,1,0,0,0,2346,2344,1,0,0,0,2346,
        2345,1,0,0,0,2347,209,1,0,0,0,2348,2349,5,238,0,0,2349,2350,5,264,
        0,0,2350,2351,3,208,104,0,2351,2352,5,227,0,0,2352,2468,1,0,0,0,
        2353,2354,5,239,0,0,2354,2355,5,264,0,0,2355,2356,3,208,104,0,2356,
        2357,5,227,0,0,2357,2468,1,0,0,0,2358,2359,5,241,0,0,2359,2360,5,
        264,0,0,2360,2361,3,208,104,0,2361,2362,5,227,0,0,2362,2468,1,0,
        0,0,2363,2364,5,242,0,0,2364,2365,5,264,0,0,2365,2366,3,208,104,
        0,2366,2367,5,227,0,0,2367,2468,1,0,0,0,2368,2369,5,243,0,0,2369,
        2370,5,264,0,0,2370,2371,3,208,104,0,2371,2372,5,227,0,0,2372,2468,
        1,0,0,0,2373,2374,5,244,0,0,2374,2375,5,264,0,0,2375,2376,3,208,
        104,0,2376,2377,5,227,0,0,2377,2468,1,0,0,0,2378,2379,5,245,0,0,
        2379,2380,5,264,0,0,2380,2381,3,208,104,0,2381,2382,5,227,0,0,2382,
        2468,1,0,0,0,2383,2384,5,246,0,0,2384,2385,5,264,0,0,2385,2386,3,
        208,104,0,2386,2387,5,227,0,0,2387,2468,1,0,0,0,2388,2389,5,247,
        0,0,2389,2390,5,264,0,0,2390,2391,3,208,104,0,2391,2392,5,227,0,
        0,2392,2468,1,0,0,0,2393,2394,5,248,0,0,2394,2395,5,264,0,0,2395,
        2396,3,208,104,0,2396,2397,5,227,0,0,2397,2468,1,0,0,0,2398,2399,
        5,249,0,0,2399,2400,5,264,0,0,2400,2401,3,208,104,0,2401,2402,5,
        227,0,0,2402,2468,1,0,0,0,2403,2404,5,250,0,0,2404,2405,5,264,0,
        0,2405,2410,3,208,104,0,2406,2407,5,234,0,0,2407,2409,3,208,104,
        0,2408,2406,1,0,0,0,2409,2412,1,0,0,0,2410,2408,1,0,0,0,2410,2411,
        1,0,0,0,2411,2413,1,0,0,0,2412,2410,1,0,0,0,2413,2414,5,227,0,0,
        2414,2468,1,0,0,0,2415,2416,5,251,0,0,2416,2417,5,264,0,0,2417,2418,
        3,208,104,0,2418,2419,5,227,0,0,2419,2468,1,0,0,0,2420,2421,5,252,
        0,0,2421,2422,5,264,0,0,2422,2427,3,208,104,0,2423,2424,5,234,0,
        0,2424,2426,3,208,104,0,2425,2423,1,0,0,0,2426,2429,1,0,0,0,2427,
        2425,1,0,0,0,2427,2428,1,0,0,0,2428,2430,1,0,0,0,2429,2427,1,0,0,
        0,2430,2431,5,227,0,0,2431,2468,1,0,0,0,2432,2433,5,253,0,0,2433,
        2434,5,264,0,0,2434,2435,3,208,104,0,2435,2436,5,234,0,0,2436,2437,
        3,208,104,0,2437,2438,5,227,0,0,2438,2468,1,0,0,0,2439,2440,5,254,
        0,0,2440,2441,5,264,0,0,2441,2442,3,208,104,0,2442,2443,5,227,0,
        0,2443,2468,1,0,0,0,2444,2445,5,255,0,0,2445,2446,5,264,0,0,2446,
        2468,5,227,0,0,2447,2448,5,256,0,0,2448,2449,5,264,0,0,2449,2450,
        3,208,104,0,2450,2451,5,227,0,0,2451,2468,1,0,0,0,2452,2453,5,257,
        0,0,2453,2454,5,264,0,0,2454,2455,3,208,104,0,2455,2456,5,227,0,
        0,2456,2468,1,0,0,0,2457,2458,5,258,0,0,2458,2459,5,264,0,0,2459,
        2460,3,208,104,0,2460,2461,5,227,0,0,2461,2468,1,0,0,0,2462,2463,
        5,259,0,0,2463,2464,5,264,0,0,2464,2465,3,208,104,0,2465,2466,5,
        227,0,0,2466,2468,1,0,0,0,2467,2348,1,0,0,0,2467,2353,1,0,0,0,2467,
        2358,1,0,0,0,2467,2363,1,0,0,0,2467,2368,1,0,0,0,2467,2373,1,0,0,
        0,2467,2378,1,0,0,0,2467,2383,1,0,0,0,2467,2388,1,0,0,0,2467,2393,
        1,0,0,0,2467,2398,1,0,0,0,2467,2403,1,0,0,0,2467,2415,1,0,0,0,2467,
        2420,1,0,0,0,2467,2432,1,0,0,0,2467,2439,1,0,0,0,2467,2444,1,0,0,
        0,2467,2447,1,0,0,0,2467,2452,1,0,0,0,2467,2457,1,0,0,0,2467,2462,
        1,0,0,0,2468,211,1,0,0,0,2469,2470,7,7,0,0,2470,2471,5,266,0,0,2471,
        2472,5,275,0,0,2472,2473,5,267,0,0,2473,213,1,0,0,0,2474,2475,5,
        167,0,0,2475,2476,5,260,0,0,2476,2477,5,228,0,0,2477,2478,3,216,
        108,0,2478,2479,5,227,0,0,2479,215,1,0,0,0,2480,2483,3,208,104,0,
        2481,2482,7,6,0,0,2482,2484,3,216,108,0,2483,2481,1,0,0,0,2483,2484,
        1,0,0,0,2484,217,1,0,0,0,2485,2486,5,168,0,0,2486,2487,5,282,0,0,
        2487,2488,5,279,0,0,2488,2507,5,277,0,0,2489,2491,5,280,0,0,2490,
        2489,1,0,0,0,2491,2494,1,0,0,0,2492,2490,1,0,0,0,2492,2493,1,0,0,
        0,2493,2508,1,0,0,0,2494,2492,1,0,0,0,2495,2497,5,281,0,0,2496,2495,
        1,0,0,0,2497,2500,1,0,0,0,2498,2496,1,0,0,0,2498,2499,1,0,0,0,2499,
        2508,1,0,0,0,2500,2498,1,0,0,0,2501,2503,5,283,0,0,2502,2501,1,0,
        0,0,2503,2506,1,0,0,0,2504,2502,1,0,0,0,2504,2505,1,0,0,0,2505,2508,
        1,0,0,0,2506,2504,1,0,0,0,2507,2492,1,0,0,0,2507,2498,1,0,0,0,2507,
        2504,1,0,0,0,2508,2509,1,0,0,0,2509,2510,5,278,0,0,2510,2511,5,169,
        0,0,2511,2516,5,286,0,0,2512,2515,3,214,107,0,2513,2515,3,52,26,
        0,2514,2512,1,0,0,0,2514,2513,1,0,0,0,2515,2518,1,0,0,0,2516,2514,
        1,0,0,0,2516,2517,1,0,0,0,2517,2519,1,0,0,0,2518,2516,1,0,0,0,2519,
        2520,5,2,0,0,2520,2521,5,169,0,0,2521,2522,5,286,0,0,2522,219,1,
        0,0,0,2523,2524,5,168,0,0,2524,2525,5,282,0,0,2525,2526,5,279,0,
        0,2526,2545,5,277,0,0,2527,2529,5,280,0,0,2528,2527,1,0,0,0,2529,
        2532,1,0,0,0,2530,2528,1,0,0,0,2530,2531,1,0,0,0,2531,2546,1,0,0,
        0,2532,2530,1,0,0,0,2533,2535,5,281,0,0,2534,2533,1,0,0,0,2535,2538,
        1,0,0,0,2536,2534,1,0,0,0,2536,2537,1,0,0,0,2537,2546,1,0,0,0,2538,
        2536,1,0,0,0,2539,2541,5,283,0,0,2540,2539,1,0,0,0,2541,2544,1,0,
        0,0,2542,2540,1,0,0,0,2542,2543,1,0,0,0,2543,2546,1,0,0,0,2544,2542,
        1,0,0,0,2545,2530,1,0,0,0,2545,2536,1,0,0,0,2545,2542,1,0,0,0,2546,
        2547,1,0,0,0,2547,2548,5,278,0,0,2548,2549,5,169,0,0,2549,2554,5,
        286,0,0,2550,2553,3,214,107,0,2551,2553,3,60,30,0,2552,2550,1,0,
        0,0,2552,2551,1,0,0,0,2553,2556,1,0,0,0,2554,2552,1,0,0,0,2554,2555,
        1,0,0,0,2555,2557,1,0,0,0,2556,2554,1,0,0,0,2557,2558,5,2,0,0,2558,
        2559,5,169,0,0,2559,2560,5,286,0,0,2560,221,1,0,0,0,2561,2562,5,
        168,0,0,2562,2563,5,282,0,0,2563,2564,5,279,0,0,2564,2583,5,277,
        0,0,2565,2567,5,280,0,0,2566,2565,1,0,0,0,2567,2570,1,0,0,0,2568,
        2566,1,0,0,0,2568,2569,1,0,0,0,2569,2584,1,0,0,0,2570,2568,1,0,0,
        0,2571,2573,5,281,0,0,2572,2571,1,0,0,0,2573,2576,1,0,0,0,2574,2572,
        1,0,0,0,2574,2575,1,0,0,0,2575,2584,1,0,0,0,2576,2574,1,0,0,0,2577,
        2579,5,283,0,0,2578,2577,1,0,0,0,2579,2582,1,0,0,0,2580,2578,1,0,
        0,0,2580,2581,1,0,0,0,2581,2584,1,0,0,0,2582,2580,1,0,0,0,2583,2568,
        1,0,0,0,2583,2574,1,0,0,0,2583,2580,1,0,0,0,2584,2585,1,0,0,0,2585,
        2586,5,278,0,0,2586,2587,5,169,0,0,2587,2592,5,286,0,0,2588,2591,
        3,214,107,0,2589,2591,3,64,32,0,2590,2588,1,0,0,0,2590,2589,1,0,
        0,0,2591,2594,1,0,0,0,2592,2590,1,0,0,0,2592,2593,1,0,0,0,2593,2595,
        1,0,0,0,2594,2592,1,0,0,0,2595,2596,5,2,0,0,2596,2597,5,169,0,0,
        2597,2598,5,286,0,0,2598,223,1,0,0,0,2599,2600,5,168,0,0,2600,2601,
        5,282,0,0,2601,2602,5,279,0,0,2602,2621,5,277,0,0,2603,2605,5,280,
        0,0,2604,2603,1,0,0,0,2605,2608,1,0,0,0,2606,2604,1,0,0,0,2606,2607,
        1,0,0,0,2607,2622,1,0,0,0,2608,2606,1,0,0,0,2609,2611,5,281,0,0,
        2610,2609,1,0,0,0,2611,2614,1,0,0,0,2612,2610,1,0,0,0,2612,2613,
        1,0,0,0,2613,2622,1,0,0,0,2614,2612,1,0,0,0,2615,2617,5,283,0,0,
        2616,2615,1,0,0,0,2617,2620,1,0,0,0,2618,2616,1,0,0,0,2618,2619,
        1,0,0,0,2619,2622,1,0,0,0,2620,2618,1,0,0,0,2621,2606,1,0,0,0,2621,
        2612,1,0,0,0,2621,2618,1,0,0,0,2622,2623,1,0,0,0,2623,2624,5,278,
        0,0,2624,2625,5,169,0,0,2625,2630,5,286,0,0,2626,2629,3,214,107,
        0,2627,2629,3,92,46,0,2628,2626,1,0,0,0,2628,2627,1,0,0,0,2629,2632,
        1,0,0,0,2630,2628,1,0,0,0,2630,2631,1,0,0,0,2631,2633,1,0,0,0,2632,
        2630,1,0,0,0,2633,2634,5,2,0,0,2634,2635,5,169,0,0,2635,2636,5,286,
        0,0,2636,225,1,0,0,0,2637,2638,5,168,0,0,2638,2639,5,282,0,0,2639,
        2640,5,279,0,0,2640,2659,5,277,0,0,2641,2643,5,280,0,0,2642,2641,
        1,0,0,0,2643,2646,1,0,0,0,2644,2642,1,0,0,0,2644,2645,1,0,0,0,2645,
        2660,1,0,0,0,2646,2644,1,0,0,0,2647,2649,5,281,0,0,2648,2647,1,0,
        0,0,2649,2652,1,0,0,0,2650,2648,1,0,0,0,2650,2651,1,0,0,0,2651,2660,
        1,0,0,0,2652,2650,1,0,0,0,2653,2655,5,283,0,0,2654,2653,1,0,0,0,
        2655,2658,1,0,0,0,2656,2654,1,0,0,0,2656,2657,1,0,0,0,2657,2660,
        1,0,0,0,2658,2656,1,0,0,0,2659,2644,1,0,0,0,2659,2650,1,0,0,0,2659,
        2656,1,0,0,0,2660,2661,1,0,0,0,2661,2662,5,278,0,0,2662,2663,5,169,
        0,0,2663,2668,5,286,0,0,2664,2667,3,214,107,0,2665,2667,3,96,48,
        0,2666,2664,1,0,0,0,2666,2665,1,0,0,0,2667,2670,1,0,0,0,2668,2666,
        1,0,0,0,2668,2669,1,0,0,0,2669,2671,1,0,0,0,2670,2668,1,0,0,0,2671,
        2672,5,2,0,0,2672,2673,5,169,0,0,2673,2674,5,286,0,0,2674,227,1,
        0,0,0,2675,2676,5,168,0,0,2676,2677,5,282,0,0,2677,2678,5,279,0,
        0,2678,2697,5,277,0,0,2679,2681,5,280,0,0,2680,2679,1,0,0,0,2681,
        2684,1,0,0,0,2682,2680,1,0,0,0,2682,2683,1,0,0,0,2683,2698,1,0,0,
        0,2684,2682,1,0,0,0,2685,2687,5,281,0,0,2686,2685,1,0,0,0,2687,2690,
        1,0,0,0,2688,2686,1,0,0,0,2688,2689,1,0,0,0,2689,2698,1,0,0,0,2690,
        2688,1,0,0,0,2691,2693,5,283,0,0,2692,2691,1,0,0,0,2693,2696,1,0,
        0,0,2694,2692,1,0,0,0,2694,2695,1,0,0,0,2695,2698,1,0,0,0,2696,2694,
        1,0,0,0,2697,2682,1,0,0,0,2697,2688,1,0,0,0,2697,2694,1,0,0,0,2698,
        2699,1,0,0,0,2699,2700,5,278,0,0,2700,2701,5,169,0,0,2701,2706,5,
        286,0,0,2702,2705,3,214,107,0,2703,2705,3,130,65,0,2704,2702,1,0,
        0,0,2704,2703,1,0,0,0,2705,2708,1,0,0,0,2706,2704,1,0,0,0,2706,2707,
        1,0,0,0,2707,2709,1,0,0,0,2708,2706,1,0,0,0,2709,2710,5,2,0,0,2710,
        2711,5,169,0,0,2711,2712,5,286,0,0,2712,229,1,0,0,0,2713,2714,5,
        168,0,0,2714,2715,5,282,0,0,2715,2716,5,279,0,0,2716,2735,5,277,
        0,0,2717,2719,5,280,0,0,2718,2717,1,0,0,0,2719,2722,1,0,0,0,2720,
        2718,1,0,0,0,2720,2721,1,0,0,0,2721,2736,1,0,0,0,2722,2720,1,0,0,
        0,2723,2725,5,281,0,0,2724,2723,1,0,0,0,2725,2728,1,0,0,0,2726,2724,
        1,0,0,0,2726,2727,1,0,0,0,2727,2736,1,0,0,0,2728,2726,1,0,0,0,2729,
        2731,5,283,0,0,2730,2729,1,0,0,0,2731,2734,1,0,0,0,2732,2730,1,0,
        0,0,2732,2733,1,0,0,0,2733,2736,1,0,0,0,2734,2732,1,0,0,0,2735,2720,
        1,0,0,0,2735,2726,1,0,0,0,2735,2732,1,0,0,0,2736,2737,1,0,0,0,2737,
        2738,5,278,0,0,2738,2739,5,169,0,0,2739,2744,5,286,0,0,2740,2743,
        3,214,107,0,2741,2743,3,142,71,0,2742,2740,1,0,0,0,2742,2741,1,0,
        0,0,2743,2746,1,0,0,0,2744,2742,1,0,0,0,2744,2745,1,0,0,0,2745,2747,
        1,0,0,0,2746,2744,1,0,0,0,2747,2748,5,2,0,0,2748,2749,5,169,0,0,
        2749,2750,5,286,0,0,2750,231,1,0,0,0,2751,2752,5,168,0,0,2752,2753,
        5,282,0,0,2753,2754,5,279,0,0,2754,2773,5,277,0,0,2755,2757,5,280,
        0,0,2756,2755,1,0,0,0,2757,2760,1,0,0,0,2758,2756,1,0,0,0,2758,2759,
        1,0,0,0,2759,2774,1,0,0,0,2760,2758,1,0,0,0,2761,2763,5,281,0,0,
        2762,2761,1,0,0,0,2763,2766,1,0,0,0,2764,2762,1,0,0,0,2764,2765,
        1,0,0,0,2765,2774,1,0,0,0,2766,2764,1,0,0,0,2767,2769,5,283,0,0,
        2768,2767,1,0,0,0,2769,2772,1,0,0,0,2770,2768,1,0,0,0,2770,2771,
        1,0,0,0,2771,2774,1,0,0,0,2772,2770,1,0,0,0,2773,2758,1,0,0,0,2773,
        2764,1,0,0,0,2773,2770,1,0,0,0,2774,2775,1,0,0,0,2775,2776,5,278,
        0,0,2776,2777,5,169,0,0,2777,2782,5,286,0,0,2778,2781,3,214,107,
        0,2779,2781,3,156,78,0,2780,2778,1,0,0,0,2780,2779,1,0,0,0,2781,
        2784,1,0,0,0,2782,2780,1,0,0,0,2782,2783,1,0,0,0,2783,2785,1,0,0,
        0,2784,2782,1,0,0,0,2785,2786,5,2,0,0,2786,2787,5,169,0,0,2787,2788,
        5,286,0,0,2788,233,1,0,0,0,2789,2790,5,168,0,0,2790,2791,5,282,0,
        0,2791,2792,5,279,0,0,2792,2811,5,277,0,0,2793,2795,5,280,0,0,2794,
        2793,1,0,0,0,2795,2798,1,0,0,0,2796,2794,1,0,0,0,2796,2797,1,0,0,
        0,2797,2812,1,0,0,0,2798,2796,1,0,0,0,2799,2801,5,281,0,0,2800,2799,
        1,0,0,0,2801,2804,1,0,0,0,2802,2800,1,0,0,0,2802,2803,1,0,0,0,2803,
        2812,1,0,0,0,2804,2802,1,0,0,0,2805,2807,5,283,0,0,2806,2805,1,0,
        0,0,2807,2810,1,0,0,0,2808,2806,1,0,0,0,2808,2809,1,0,0,0,2809,2812,
        1,0,0,0,2810,2808,1,0,0,0,2811,2796,1,0,0,0,2811,2802,1,0,0,0,2811,
        2808,1,0,0,0,2812,2813,1,0,0,0,2813,2814,5,278,0,0,2814,2815,5,169,
        0,0,2815,2820,5,286,0,0,2816,2819,3,214,107,0,2817,2819,3,160,80,
        0,2818,2816,1,0,0,0,2818,2817,1,0,0,0,2819,2822,1,0,0,0,2820,2818,
        1,0,0,0,2820,2821,1,0,0,0,2821,2823,1,0,0,0,2822,2820,1,0,0,0,2823,
        2824,5,2,0,0,2824,2825,5,169,0,0,2825,2826,5,286,0,0,2826,235,1,
        0,0,0,2827,2828,5,168,0,0,2828,2829,5,282,0,0,2829,2830,5,279,0,
        0,2830,2849,5,277,0,0,2831,2833,5,280,0,0,2832,2831,1,0,0,0,2833,
        2836,1,0,0,0,2834,2832,1,0,0,0,2834,2835,1,0,0,0,2835,2850,1,0,0,
        0,2836,2834,1,0,0,0,2837,2839,5,281,0,0,2838,2837,1,0,0,0,2839,2842,
        1,0,0,0,2840,2838,1,0,0,0,2840,2841,1,0,0,0,2841,2850,1,0,0,0,2842,
        2840,1,0,0,0,2843,2845,5,283,0,0,2844,2843,1,0,0,0,2845,2848,1,0,
        0,0,2846,2844,1,0,0,0,2846,2847,1,0,0,0,2847,2850,1,0,0,0,2848,2846,
        1,0,0,0,2849,2834,1,0,0,0,2849,2840,1,0,0,0,2849,2846,1,0,0,0,2850,
        2851,1,0,0,0,2851,2852,5,278,0,0,2852,2853,5,169,0,0,2853,2858,5,
        286,0,0,2854,2857,3,214,107,0,2855,2857,3,176,88,0,2856,2854,1,0,
        0,0,2856,2855,1,0,0,0,2857,2860,1,0,0,0,2858,2856,1,0,0,0,2858,2859,
        1,0,0,0,2859,2861,1,0,0,0,2860,2858,1,0,0,0,2861,2862,5,2,0,0,2862,
        2863,5,169,0,0,2863,2864,5,286,0,0,2864,237,1,0,0,0,2865,2866,5,
        168,0,0,2866,2867,5,282,0,0,2867,2868,5,279,0,0,2868,2887,5,277,
        0,0,2869,2871,5,280,0,0,2870,2869,1,0,0,0,2871,2874,1,0,0,0,2872,
        2870,1,0,0,0,2872,2873,1,0,0,0,2873,2888,1,0,0,0,2874,2872,1,0,0,
        0,2875,2877,5,281,0,0,2876,2875,1,0,0,0,2877,2880,1,0,0,0,2878,2876,
        1,0,0,0,2878,2879,1,0,0,0,2879,2888,1,0,0,0,2880,2878,1,0,0,0,2881,
        2883,5,283,0,0,2882,2881,1,0,0,0,2883,2886,1,0,0,0,2884,2882,1,0,
        0,0,2884,2885,1,0,0,0,2885,2888,1,0,0,0,2886,2884,1,0,0,0,2887,2872,
        1,0,0,0,2887,2878,1,0,0,0,2887,2884,1,0,0,0,2888,2889,1,0,0,0,2889,
        2890,5,278,0,0,2890,2891,5,169,0,0,2891,2896,5,286,0,0,2892,2895,
        3,214,107,0,2893,2895,3,180,90,0,2894,2892,1,0,0,0,2894,2893,1,0,
        0,0,2895,2898,1,0,0,0,2896,2894,1,0,0,0,2896,2897,1,0,0,0,2897,2899,
        1,0,0,0,2898,2896,1,0,0,0,2899,2900,5,2,0,0,2900,2901,5,169,0,0,
        2901,2902,5,286,0,0,2902,239,1,0,0,0,344,292,294,303,309,315,324,
        332,340,348,356,360,363,369,375,381,390,399,408,417,426,435,444,
        453,462,471,480,489,498,507,516,525,534,543,552,570,575,592,605,
        629,632,639,642,647,652,657,660,663,667,672,677,684,688,693,698,
        703,708,713,718,721,728,734,737,753,763,768,777,788,791,796,803,
        817,822,831,848,853,858,863,870,875,882,894,899,906,915,922,927,
        938,943,954,963,970,975,979,984,987,992,997,1002,1006,1012,1016,
        1020,1023,1025,1029,1041,1049,1054,1063,1066,1074,1084,1095,1103,
        1107,1112,1123,1126,1129,1141,1148,1153,1165,1170,1185,1212,1222,
        1232,1235,1240,1245,1249,1261,1285,1293,1300,1311,1317,1323,1327,
        1338,1344,1350,1358,1361,1371,1377,1383,1388,1397,1400,1403,1407,
        1419,1426,1433,1439,1444,1454,1466,1471,1482,1493,1498,1507,1533,
        1542,1545,1564,1576,1581,1598,1603,1612,1624,1627,1632,1637,1653,
        1658,1667,1672,1686,1691,1700,1717,1730,1735,1746,1749,1757,1772,
        1778,1783,1789,1794,1800,1806,1812,1824,1827,1831,1838,1844,1855,
        1860,1869,1872,1889,1899,1904,1915,1920,1936,1947,1952,1957,1962,
        1969,1981,1990,1995,2004,2012,2018,2023,2028,2035,2046,2051,2056,
        2061,2066,2071,2076,2081,2086,2091,2096,2101,2106,2109,2124,2132,
        2147,2163,2166,2177,2182,2185,2193,2197,2208,2212,2216,2219,2232,
        2235,2242,2245,2252,2257,2260,2274,2282,2284,2300,2304,2306,2312,
        2327,2332,2337,2346,2410,2427,2467,2483,2492,2498,2504,2507,2514,
        2516,2530,2536,2542,2545,2552,2554,2568,2574,2580,2583,2590,2592,
        2606,2612,2618,2621,2628,2630,2644,2650,2656,2659,2666,2668,2682,
        2688,2694,2697,2704,2706,2720,2726,2732,2735,2742,2744,2758,2764,
        2770,2773,2780,2782,2796,2802,2808,2811,2818,2820,2834,2840,2846,
        2849,2856,2858,2872,2878,2884,2887,2894,2896
    ]

class XplorMRParser ( Parser ):

    grammarFileName = "XplorMRParser.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ "<INVALID>", "'SET'", "<INVALID>", "'NOE'", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "'BHIG'", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "'CUTOFF'", "'CUTON'", "'FROM'", "'TO'", 
                     "'PEAK'", "'SPECTRUM'", "'VOLUME'", "'PPM1'", "'PPM2'", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "'TYPE'", "<INVALID>", "<INVALID>", "'CV'", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "'XADC'", "<INVALID>", "'SIZE'", 
                     "'ZERO'", "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "'RAMA'", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "'SORT'", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "'DCSA'", "<INVALID>", "'PCSA'", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "'TAUC'", "<INVALID>", "'XPCS'", 
                     "'TOLL'", "'SAVE'", "'FMED'", "'ERRON'", "'ERROFF'", 
                     "'FON'", "'FOFF'", "'SON'", "'SOFF'", "'FRUN'", "<INVALID>", 
                     "<INVALID>", "'XCCR'", "'WEIP'", "'KDIR'", "'KLIN'", 
                     "'NSEG'", "'NMIN'", "'NMAX'", "'SEGM'", "'OHCUT'", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "'UPDFRQ'", 
                     "'PRNFRQ'", "'FREEMODE'", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "'ALL'", "<INVALID>", "'ATOM'", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "'ID'", "<INVALID>", "'NAME'", "<INVALID>", 
                     "'CUT'", "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "'STORE1'", "'STORE2'", "'STORE3'", 
                     "'STORE4'", "'STORE5'", "'STORE6'", "'STORE7'", "'STORE8'", 
                     "'STORE9'", "'TAG'", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "'SHOW'", "<INVALID>", "'FOR'", "'LOOP'", "'TAIL'", 
                     "'HEAD'", "'OR'", "'AND'", "'NOT'", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "'HBDA'", "'HBDB'", "<INVALID>", 
                     "<INVALID>", "':'", "<INVALID>", "'<'", "'>'", "'<='", 
                     "'>='", "'#'", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "'+'", "'-'", "<INVALID>", "'/'", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "'ACOS'", "'ASIN'", "'COS'", "'DECODE'", "'ENCODE'", 
                     "'EXP'", "'GAUSS'", "'HEAVY'", "'INT'", "'LOG10'", 
                     "'LOG'", "<INVALID>", "'MAXW'", "<INVALID>", "'MOD'", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "'SIN'", "'SQRT'", 
                     "'TAN'", "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "'RMS'", "'SUM'", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "'IN'" ]

    symbolicNames = [ "<INVALID>", "Set", "End", "Noe", "Assign", "Asymptote", 
                      "Average", "Bhig", "Ceiling", "Classification", "CountViol", 
                      "Distribute", "Monomers", "Ncount", "Nrestraints", 
                      "Potential", "Predict", "Print", "Threshold", "Reset", 
                      "Rswitch", "Scale", "SoExponent", "SqConstant", "SqExponent", 
                      "SqOffset", "Temperature", "Cutoff", "Cuton", "From", 
                      "To", "Peak", "Spectrum", "Volume", "Ppm1", "Ppm2", 
                      "Restraints", "Dihedral", "Nassign", "Sanisotropy", 
                      "Coefficients", "ForceConstant", "Xdipolar", "Dipolar", 
                      "Type", "Sign", "VectorAngle", "Cv", "Partition", 
                      "Tensor", "Anisotropy", "Planar", "Group", "Initialize", 
                      "Selection", "Weight", "Harmonic", "Exponent", "Normal", 
                      "Xadc", "Expectation", "Size", "Zero", "Coupling", 
                      "DegEnergy", "Carbon", "PhiStep", "PsiStep", "Rcoil", 
                      "Proton", "Observed", "Amides", "Nitrogens", "Oxygens", 
                      "RingAtoms", "AlphasAndAmides", "Error", "Ramachandran", 
                      "Gaussian", "Phase", "Quartic", "Shape", "Sort", "Dimensions", 
                      "Collapse", "Danisotropy", "Orient", "Height", "MaxGaussians", 
                      "NewGaussian", "Dcsa", "Sigma", "Pcsa", "OneBond", 
                      "AngleDb", "DerivFlag", "Angle_or_Dihedral", "Paramagnetic", 
                      "Kconst", "Omega", "Tauc", "Debug", "Xpcs", "Tolerance", 
                      "Save", "Fmed", "ErrOn", "ErrOff", "Fon", "Foff", 
                      "Son", "Soff", "Frun", "Xrdcoupling", "Xangle", "Xccr", 
                      "Weip", "Kdir", "Klin", "Nseg", "Nmin", "Nmax", "Segm", 
                      "Ohcut", "Coh1cut", "Coh2cut", "Ohncut", "Updfrq", 
                      "Prnfrq", "Freemode", "Donor", "Acceptor", "Flags", 
                      "All", "Around", "Atom", "Attribute", "BondedTo", 
                      "ByGroup", "ByRes", "Chemical", "Hydrogen", "Id", 
                      "Known", "Name", "Point", "Cut", "Previous", "Pseudo", 
                      "Residue", "Resname", "Saround", "SegIdentifier", 
                      "Store_1", "Store_2", "Store_3", "Store_4", "Store_5", 
                      "Store_6", "Store_7", "Store_8", "Store_9", "Tag", 
                      "Vector", "Do_Lp", "Identify_Lp", "Show", "Evaluate_Lp", 
                      "For", "Loop", "Tail", "Head", "Or_op", "And_op", 
                      "Not_op", "Comma", "Complex", "Integer", "Logical", 
                      "Real", "Double_quote_string", "SHARP_COMMENT", "EXCLM_COMMENT", 
                      "SMCLN_COMMENT", "Simple_name", "Simple_names", "Integers", 
                      "Hbda", "Hbdb", "L_paren", "R_paren", "Colon", "Equ_op", 
                      "Lt_op", "Gt_op", "Leq_op", "Geq_op", "Neq_op", "Symbol_name", 
                      "SPACE", "COMMENT", "SECTION_COMMENT", "LINE_COMMENT", 
                      "SET_VARIABLE", "Abs", "Attr_properties", "Comparison_ops", 
                      "SPACE_ATTR", "Averaging_methods", "Simple_name_A", 
                      "SPACE_AVER", "Equ_op_P", "Potential_types", "Simple_name_P", 
                      "SPACE_POTE", "Rdc_dist_fix_types", "Rdc_or_Diff_anis_types", 
                      "Csa_types", "SPACE_TYPE", "Gauss_or_Quart", "SPACE_SHAP", 
                      "Exclude", "Include", "End_F", "Class_name", "Any_class", 
                      "SPACE_FLAG", "R_paren_VE", "Equ_op_VE", "Add_op_VE", 
                      "Sub_op_VE", "Mul_op_VE", "Div_op_VE", "Exp_op_VE", 
                      "Comma_VE", "Integer_VE", "Real_VE", "Atom_properties_VE", 
                      "Abs_VE", "Acos_VE", "Asin_VE", "Cos_VE", "Decode_VE", 
                      "Encode_VE", "Exp_VE", "Gauss_VE", "Heavy_VE", "Int_VE", 
                      "Log10_VE", "Log_VE", "Max_VE", "Maxw_VE", "Min_VE", 
                      "Mod_VE", "Norm_VE", "Random_VE", "Sign_VE", "Sin_VE", 
                      "Sqrt_VE", "Tan_VE", "Symbol_name_VE", "Simple_name_VE", 
                      "Double_quote_string_VE", "SPACE_VE", "L_paren_VF", 
                      "SPACE_VF", "L_paren_VS", "R_paren_VS", "Average_VS", 
                      "Element_VS", "Max_VS", "Min_VS", "Norm_VS", "Rms_VS", 
                      "Sum_VS", "Atom_properties_VS", "SPACE_VS", "L_paren_CF", 
                      "R_paren_CF", "In_CF", "Integer_CF", "Real_CF", "Symbol_name_CF", 
                      "Simple_name_CF", "SPACE_CF", "COMMENT_CF", "Simple_name_LL", 
                      "SPACE_LL" ]

    RULE_xplor_nih_mr = 0
    RULE_distance_restraint = 1
    RULE_dihedral_angle_restraint = 2
    RULE_rdc_restraint = 3
    RULE_planar_restraint = 4
    RULE_harmonic_restraint = 5
    RULE_antidistance_restraint = 6
    RULE_coupling_restraint = 7
    RULE_carbon_shift_restraint = 8
    RULE_proton_shift_restraint = 9
    RULE_dihedral_angle_db_restraint = 10
    RULE_radius_of_gyration_restraint = 11
    RULE_diffusion_anisotropy_restraint = 12
    RULE_orientation_db_restraint = 13
    RULE_csa_restraint = 14
    RULE_pcsa_restraint = 15
    RULE_one_bond_coupling_restraint = 16
    RULE_angle_db_restraint = 17
    RULE_pre_restraint = 18
    RULE_pcs_restraint = 19
    RULE_prdc_restraint = 20
    RULE_porientation_restraint = 21
    RULE_pccr_restraint = 22
    RULE_hbond_restraint = 23
    RULE_hbond_db_restraint = 24
    RULE_noe_statement = 25
    RULE_noe_assign = 26
    RULE_predict_statement = 27
    RULE_noe_annotation = 28
    RULE_dihedral_statement = 29
    RULE_dihedral_assign = 30
    RULE_sani_statement = 31
    RULE_sani_assign = 32
    RULE_xdip_statement = 33
    RULE_xdip_assign = 34
    RULE_vean_statement = 35
    RULE_vean_assign = 36
    RULE_tenso_statement = 37
    RULE_tenso_assign = 38
    RULE_anis_statement = 39
    RULE_anis_assign = 40
    RULE_planar_statement = 41
    RULE_group_statement = 42
    RULE_harmonic_statement = 43
    RULE_harmonic_assign = 44
    RULE_antidistance_statement = 45
    RULE_xadc_assign = 46
    RULE_coupling_statement = 47
    RULE_coup_assign = 48
    RULE_carbon_shift_statement = 49
    RULE_carbon_shift_assign = 50
    RULE_carbon_shift_rcoil = 51
    RULE_proton_shift_statement = 52
    RULE_observed = 53
    RULE_proton_shift_rcoil = 54
    RULE_proton_shift_anisotropy = 55
    RULE_proton_shift_amides = 56
    RULE_proton_shift_carbons = 57
    RULE_proton_shift_nitrogens = 58
    RULE_proton_shift_oxygens = 59
    RULE_proton_shift_ring_atoms = 60
    RULE_proton_shift_alphas_and_amides = 61
    RULE_ramachandran_statement = 62
    RULE_rama_assign = 63
    RULE_collapse_statement = 64
    RULE_coll_assign = 65
    RULE_diffusion_statement = 66
    RULE_dani_assign = 67
    RULE_orientation_statement = 68
    RULE_orie_assign = 69
    RULE_csa_statement = 70
    RULE_csa_assign = 71
    RULE_pcsa_statement = 72
    RULE_one_bond_coupling_statement = 73
    RULE_one_bond_assign = 74
    RULE_angle_db_statement = 75
    RULE_angle_db_assign = 76
    RULE_pre_statement = 77
    RULE_pre_assign = 78
    RULE_pcs_statement = 79
    RULE_pcs_assign = 80
    RULE_prdc_statement = 81
    RULE_prdc_assign = 82
    RULE_porientation_statement = 83
    RULE_porientation_assign = 84
    RULE_pccr_statement = 85
    RULE_pccr_assign = 86
    RULE_hbond_statement = 87
    RULE_hbond_assign = 88
    RULE_hbond_db_statement = 89
    RULE_hbond_db_assign = 90
    RULE_selection = 91
    RULE_selection_expression = 92
    RULE_term = 93
    RULE_factor = 94
    RULE_number = 95
    RULE_number_f = 96
    RULE_number_s = 97
    RULE_number_a = 98
    RULE_flag_statement = 99
    RULE_vector_statement = 100
    RULE_vector_mode = 101
    RULE_vector_expression = 102
    RULE_vector_operation = 103
    RULE_vflc = 104
    RULE_vector_func_call = 105
    RULE_vector_show_property = 106
    RULE_evaluate_statement = 107
    RULE_evaluate_operation = 108
    RULE_noe_assign_loop = 109
    RULE_dihedral_assign_loop = 110
    RULE_sani_assign_loop = 111
    RULE_xadc_assign_loop = 112
    RULE_coup_assign_loop = 113
    RULE_coll_assign_loop = 114
    RULE_csa_assign_loop = 115
    RULE_pre_assign_loop = 116
    RULE_pcs_assign_loop = 117
    RULE_hbond_assign_loop = 118
    RULE_hbond_db_assign_loop = 119

    ruleNames =  [ "xplor_nih_mr", "distance_restraint", "dihedral_angle_restraint", 
                   "rdc_restraint", "planar_restraint", "harmonic_restraint", 
                   "antidistance_restraint", "coupling_restraint", "carbon_shift_restraint", 
                   "proton_shift_restraint", "dihedral_angle_db_restraint", 
                   "radius_of_gyration_restraint", "diffusion_anisotropy_restraint", 
                   "orientation_db_restraint", "csa_restraint", "pcsa_restraint", 
                   "one_bond_coupling_restraint", "angle_db_restraint", 
                   "pre_restraint", "pcs_restraint", "prdc_restraint", "porientation_restraint", 
                   "pccr_restraint", "hbond_restraint", "hbond_db_restraint", 
                   "noe_statement", "noe_assign", "predict_statement", "noe_annotation", 
                   "dihedral_statement", "dihedral_assign", "sani_statement", 
                   "sani_assign", "xdip_statement", "xdip_assign", "vean_statement", 
                   "vean_assign", "tenso_statement", "tenso_assign", "anis_statement", 
                   "anis_assign", "planar_statement", "group_statement", 
                   "harmonic_statement", "harmonic_assign", "antidistance_statement", 
                   "xadc_assign", "coupling_statement", "coup_assign", "carbon_shift_statement", 
                   "carbon_shift_assign", "carbon_shift_rcoil", "proton_shift_statement", 
                   "observed", "proton_shift_rcoil", "proton_shift_anisotropy", 
                   "proton_shift_amides", "proton_shift_carbons", "proton_shift_nitrogens", 
                   "proton_shift_oxygens", "proton_shift_ring_atoms", "proton_shift_alphas_and_amides", 
                   "ramachandran_statement", "rama_assign", "collapse_statement", 
                   "coll_assign", "diffusion_statement", "dani_assign", 
                   "orientation_statement", "orie_assign", "csa_statement", 
                   "csa_assign", "pcsa_statement", "one_bond_coupling_statement", 
                   "one_bond_assign", "angle_db_statement", "angle_db_assign", 
                   "pre_statement", "pre_assign", "pcs_statement", "pcs_assign", 
                   "prdc_statement", "prdc_assign", "porientation_statement", 
                   "porientation_assign", "pccr_statement", "pccr_assign", 
                   "hbond_statement", "hbond_assign", "hbond_db_statement", 
                   "hbond_db_assign", "selection", "selection_expression", 
                   "term", "factor", "number", "number_f", "number_s", "number_a", 
                   "flag_statement", "vector_statement", "vector_mode", 
                   "vector_expression", "vector_operation", "vflc", "vector_func_call", 
                   "vector_show_property", "evaluate_statement", "evaluate_operation", 
                   "noe_assign_loop", "dihedral_assign_loop", "sani_assign_loop", 
                   "xadc_assign_loop", "coup_assign_loop", "coll_assign_loop", 
                   "csa_assign_loop", "pre_assign_loop", "pcs_assign_loop", 
                   "hbond_assign_loop", "hbond_db_assign_loop" ]

    EOF = Token.EOF
    Set=1
    End=2
    Noe=3
    Assign=4
    Asymptote=5
    Average=6
    Bhig=7
    Ceiling=8
    Classification=9
    CountViol=10
    Distribute=11
    Monomers=12
    Ncount=13
    Nrestraints=14
    Potential=15
    Predict=16
    Print=17
    Threshold=18
    Reset=19
    Rswitch=20
    Scale=21
    SoExponent=22
    SqConstant=23
    SqExponent=24
    SqOffset=25
    Temperature=26
    Cutoff=27
    Cuton=28
    From=29
    To=30
    Peak=31
    Spectrum=32
    Volume=33
    Ppm1=34
    Ppm2=35
    Restraints=36
    Dihedral=37
    Nassign=38
    Sanisotropy=39
    Coefficients=40
    ForceConstant=41
    Xdipolar=42
    Dipolar=43
    Type=44
    Sign=45
    VectorAngle=46
    Cv=47
    Partition=48
    Tensor=49
    Anisotropy=50
    Planar=51
    Group=52
    Initialize=53
    Selection=54
    Weight=55
    Harmonic=56
    Exponent=57
    Normal=58
    Xadc=59
    Expectation=60
    Size=61
    Zero=62
    Coupling=63
    DegEnergy=64
    Carbon=65
    PhiStep=66
    PsiStep=67
    Rcoil=68
    Proton=69
    Observed=70
    Amides=71
    Nitrogens=72
    Oxygens=73
    RingAtoms=74
    AlphasAndAmides=75
    Error=76
    Ramachandran=77
    Gaussian=78
    Phase=79
    Quartic=80
    Shape=81
    Sort=82
    Dimensions=83
    Collapse=84
    Danisotropy=85
    Orient=86
    Height=87
    MaxGaussians=88
    NewGaussian=89
    Dcsa=90
    Sigma=91
    Pcsa=92
    OneBond=93
    AngleDb=94
    DerivFlag=95
    Angle_or_Dihedral=96
    Paramagnetic=97
    Kconst=98
    Omega=99
    Tauc=100
    Debug=101
    Xpcs=102
    Tolerance=103
    Save=104
    Fmed=105
    ErrOn=106
    ErrOff=107
    Fon=108
    Foff=109
    Son=110
    Soff=111
    Frun=112
    Xrdcoupling=113
    Xangle=114
    Xccr=115
    Weip=116
    Kdir=117
    Klin=118
    Nseg=119
    Nmin=120
    Nmax=121
    Segm=122
    Ohcut=123
    Coh1cut=124
    Coh2cut=125
    Ohncut=126
    Updfrq=127
    Prnfrq=128
    Freemode=129
    Donor=130
    Acceptor=131
    Flags=132
    All=133
    Around=134
    Atom=135
    Attribute=136
    BondedTo=137
    ByGroup=138
    ByRes=139
    Chemical=140
    Hydrogen=141
    Id=142
    Known=143
    Name=144
    Point=145
    Cut=146
    Previous=147
    Pseudo=148
    Residue=149
    Resname=150
    Saround=151
    SegIdentifier=152
    Store_1=153
    Store_2=154
    Store_3=155
    Store_4=156
    Store_5=157
    Store_6=158
    Store_7=159
    Store_8=160
    Store_9=161
    Tag=162
    Vector=163
    Do_Lp=164
    Identify_Lp=165
    Show=166
    Evaluate_Lp=167
    For=168
    Loop=169
    Tail=170
    Head=171
    Or_op=172
    And_op=173
    Not_op=174
    Comma=175
    Complex=176
    Integer=177
    Logical=178
    Real=179
    Double_quote_string=180
    SHARP_COMMENT=181
    EXCLM_COMMENT=182
    SMCLN_COMMENT=183
    Simple_name=184
    Simple_names=185
    Integers=186
    Hbda=187
    Hbdb=188
    L_paren=189
    R_paren=190
    Colon=191
    Equ_op=192
    Lt_op=193
    Gt_op=194
    Leq_op=195
    Geq_op=196
    Neq_op=197
    Symbol_name=198
    SPACE=199
    COMMENT=200
    SECTION_COMMENT=201
    LINE_COMMENT=202
    SET_VARIABLE=203
    Abs=204
    Attr_properties=205
    Comparison_ops=206
    SPACE_ATTR=207
    Averaging_methods=208
    Simple_name_A=209
    SPACE_AVER=210
    Equ_op_P=211
    Potential_types=212
    Simple_name_P=213
    SPACE_POTE=214
    Rdc_dist_fix_types=215
    Rdc_or_Diff_anis_types=216
    Csa_types=217
    SPACE_TYPE=218
    Gauss_or_Quart=219
    SPACE_SHAP=220
    Exclude=221
    Include=222
    End_F=223
    Class_name=224
    Any_class=225
    SPACE_FLAG=226
    R_paren_VE=227
    Equ_op_VE=228
    Add_op_VE=229
    Sub_op_VE=230
    Mul_op_VE=231
    Div_op_VE=232
    Exp_op_VE=233
    Comma_VE=234
    Integer_VE=235
    Real_VE=236
    Atom_properties_VE=237
    Abs_VE=238
    Acos_VE=239
    Asin_VE=240
    Cos_VE=241
    Decode_VE=242
    Encode_VE=243
    Exp_VE=244
    Gauss_VE=245
    Heavy_VE=246
    Int_VE=247
    Log10_VE=248
    Log_VE=249
    Max_VE=250
    Maxw_VE=251
    Min_VE=252
    Mod_VE=253
    Norm_VE=254
    Random_VE=255
    Sign_VE=256
    Sin_VE=257
    Sqrt_VE=258
    Tan_VE=259
    Symbol_name_VE=260
    Simple_name_VE=261
    Double_quote_string_VE=262
    SPACE_VE=263
    L_paren_VF=264
    SPACE_VF=265
    L_paren_VS=266
    R_paren_VS=267
    Average_VS=268
    Element_VS=269
    Max_VS=270
    Min_VS=271
    Norm_VS=272
    Rms_VS=273
    Sum_VS=274
    Atom_properties_VS=275
    SPACE_VS=276
    L_paren_CF=277
    R_paren_CF=278
    In_CF=279
    Integer_CF=280
    Real_CF=281
    Symbol_name_CF=282
    Simple_name_CF=283
    SPACE_CF=284
    COMMENT_CF=285
    Simple_name_LL=286
    SPACE_LL=287

    def __init__(self, input:TokenStream, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.10.1")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None




    class Xplor_nih_mrContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EOF(self):
            return self.getToken(XplorMRParser.EOF, 0)

        def distance_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Distance_restraintContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Distance_restraintContext,i)


        def dihedral_angle_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Dihedral_angle_restraintContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Dihedral_angle_restraintContext,i)


        def rdc_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Rdc_restraintContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Rdc_restraintContext,i)


        def planar_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Planar_restraintContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Planar_restraintContext,i)


        def harmonic_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Harmonic_restraintContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Harmonic_restraintContext,i)


        def antidistance_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Antidistance_restraintContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Antidistance_restraintContext,i)


        def coupling_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Coupling_restraintContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Coupling_restraintContext,i)


        def carbon_shift_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Carbon_shift_restraintContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Carbon_shift_restraintContext,i)


        def proton_shift_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Proton_shift_restraintContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Proton_shift_restraintContext,i)


        def dihedral_angle_db_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Dihedral_angle_db_restraintContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Dihedral_angle_db_restraintContext,i)


        def radius_of_gyration_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Radius_of_gyration_restraintContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Radius_of_gyration_restraintContext,i)


        def diffusion_anisotropy_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Diffusion_anisotropy_restraintContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Diffusion_anisotropy_restraintContext,i)


        def orientation_db_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Orientation_db_restraintContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Orientation_db_restraintContext,i)


        def csa_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Csa_restraintContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Csa_restraintContext,i)


        def pcsa_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Pcsa_restraintContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Pcsa_restraintContext,i)


        def one_bond_coupling_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.One_bond_coupling_restraintContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.One_bond_coupling_restraintContext,i)


        def angle_db_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Angle_db_restraintContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Angle_db_restraintContext,i)


        def pre_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Pre_restraintContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Pre_restraintContext,i)


        def pcs_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Pcs_restraintContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Pcs_restraintContext,i)


        def prdc_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Prdc_restraintContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Prdc_restraintContext,i)


        def porientation_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Porientation_restraintContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Porientation_restraintContext,i)


        def pccr_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Pccr_restraintContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Pccr_restraintContext,i)


        def hbond_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Hbond_restraintContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Hbond_restraintContext,i)


        def hbond_db_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Hbond_db_restraintContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Hbond_db_restraintContext,i)


        def flag_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Flag_statementContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Flag_statementContext,i)


        def vector_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Vector_statementContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Vector_statementContext,i)


        def evaluate_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Evaluate_statementContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Evaluate_statementContext,i)


        def noe_assign_loop(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Noe_assign_loopContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Noe_assign_loopContext,i)


        def dihedral_assign_loop(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Dihedral_assign_loopContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Dihedral_assign_loopContext,i)


        def sani_assign_loop(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Sani_assign_loopContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Sani_assign_loopContext,i)


        def hbond_assign_loop(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Hbond_assign_loopContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Hbond_assign_loopContext,i)


        def hbond_db_assign_loop(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Hbond_db_assign_loopContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Hbond_db_assign_loopContext,i)


        def coup_assign_loop(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Coup_assign_loopContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Coup_assign_loopContext,i)


        def xadc_assign_loop(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Xadc_assign_loopContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Xadc_assign_loopContext,i)


        def coll_assign_loop(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Coll_assign_loopContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Coll_assign_loopContext,i)


        def csa_assign_loop(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Csa_assign_loopContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Csa_assign_loopContext,i)


        def pre_assign_loop(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Pre_assign_loopContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Pre_assign_loopContext,i)


        def pcs_assign_loop(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Pcs_assign_loopContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Pcs_assign_loopContext,i)


        def noe_assign(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Noe_assignContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Noe_assignContext,i)


        def dihedral_assign(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Dihedral_assignContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Dihedral_assignContext,i)


        def sani_assign(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Sani_assignContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Sani_assignContext,i)


        def planar_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Planar_statementContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Planar_statementContext,i)


        def harmonic_assign(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Harmonic_assignContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Harmonic_assignContext,i)


        def hbond_assign(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Hbond_assignContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Hbond_assignContext,i)


        def hbond_db_assign(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Hbond_db_assignContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Hbond_db_assignContext,i)


        def coup_assign(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Coup_assignContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Coup_assignContext,i)


        def xadc_assign(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Xadc_assignContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Xadc_assignContext,i)


        def coll_assign(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Coll_assignContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Coll_assignContext,i)


        def csa_assign(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Csa_assignContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Csa_assignContext,i)


        def pre_assign(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Pre_assignContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Pre_assignContext,i)


        def pcs_assign(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Pcs_assignContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Pcs_assignContext,i)


        def observed(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.ObservedContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.ObservedContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_xplor_nih_mr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterXplor_nih_mr" ):
                listener.enterXplor_nih_mr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitXplor_nih_mr" ):
                listener.exitXplor_nih_mr(self)




    def xplor_nih_mr(self):

        localctx = XplorMRParser.Xplor_nih_mrContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_xplor_nih_mr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 294
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << XplorMRParser.Noe) | (1 << XplorMRParser.Assign) | (1 << XplorMRParser.Restraints) | (1 << XplorMRParser.Dihedral) | (1 << XplorMRParser.Sanisotropy) | (1 << XplorMRParser.Xdipolar) | (1 << XplorMRParser.Dipolar) | (1 << XplorMRParser.VectorAngle) | (1 << XplorMRParser.Tensor) | (1 << XplorMRParser.Anisotropy) | (1 << XplorMRParser.Planar) | (1 << XplorMRParser.Group) | (1 << XplorMRParser.Initialize) | (1 << XplorMRParser.Harmonic) | (1 << XplorMRParser.Xadc) | (1 << XplorMRParser.Coupling))) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & ((1 << (XplorMRParser.Carbon - 65)) | (1 << (XplorMRParser.Proton - 65)) | (1 << (XplorMRParser.Observed - 65)) | (1 << (XplorMRParser.Ramachandran - 65)) | (1 << (XplorMRParser.Collapse - 65)) | (1 << (XplorMRParser.Danisotropy - 65)) | (1 << (XplorMRParser.Orient - 65)) | (1 << (XplorMRParser.Dcsa - 65)) | (1 << (XplorMRParser.Pcsa - 65)) | (1 << (XplorMRParser.OneBond - 65)) | (1 << (XplorMRParser.AngleDb - 65)) | (1 << (XplorMRParser.Paramagnetic - 65)) | (1 << (XplorMRParser.Xpcs - 65)) | (1 << (XplorMRParser.Xrdcoupling - 65)) | (1 << (XplorMRParser.Xangle - 65)) | (1 << (XplorMRParser.Xccr - 65)))) != 0) or ((((_la - 132)) & ~0x3f) == 0 and ((1 << (_la - 132)) & ((1 << (XplorMRParser.Flags - 132)) | (1 << (XplorMRParser.Vector - 132)) | (1 << (XplorMRParser.Evaluate_Lp - 132)) | (1 << (XplorMRParser.For - 132)) | (1 << (XplorMRParser.Hbda - 132)) | (1 << (XplorMRParser.Hbdb - 132)))) != 0):
                self.state = 292
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,0,self._ctx)
                if la_ == 1:
                    self.state = 240
                    self.distance_restraint()
                    pass

                elif la_ == 2:
                    self.state = 241
                    self.dihedral_angle_restraint()
                    pass

                elif la_ == 3:
                    self.state = 242
                    self.rdc_restraint()
                    pass

                elif la_ == 4:
                    self.state = 243
                    self.planar_restraint()
                    pass

                elif la_ == 5:
                    self.state = 244
                    self.harmonic_restraint()
                    pass

                elif la_ == 6:
                    self.state = 245
                    self.antidistance_restraint()
                    pass

                elif la_ == 7:
                    self.state = 246
                    self.coupling_restraint()
                    pass

                elif la_ == 8:
                    self.state = 247
                    self.carbon_shift_restraint()
                    pass

                elif la_ == 9:
                    self.state = 248
                    self.proton_shift_restraint()
                    pass

                elif la_ == 10:
                    self.state = 249
                    self.dihedral_angle_db_restraint()
                    pass

                elif la_ == 11:
                    self.state = 250
                    self.radius_of_gyration_restraint()
                    pass

                elif la_ == 12:
                    self.state = 251
                    self.diffusion_anisotropy_restraint()
                    pass

                elif la_ == 13:
                    self.state = 252
                    self.orientation_db_restraint()
                    pass

                elif la_ == 14:
                    self.state = 253
                    self.csa_restraint()
                    pass

                elif la_ == 15:
                    self.state = 254
                    self.pcsa_restraint()
                    pass

                elif la_ == 16:
                    self.state = 255
                    self.one_bond_coupling_restraint()
                    pass

                elif la_ == 17:
                    self.state = 256
                    self.angle_db_restraint()
                    pass

                elif la_ == 18:
                    self.state = 257
                    self.pre_restraint()
                    pass

                elif la_ == 19:
                    self.state = 258
                    self.pcs_restraint()
                    pass

                elif la_ == 20:
                    self.state = 259
                    self.prdc_restraint()
                    pass

                elif la_ == 21:
                    self.state = 260
                    self.porientation_restraint()
                    pass

                elif la_ == 22:
                    self.state = 261
                    self.pccr_restraint()
                    pass

                elif la_ == 23:
                    self.state = 262
                    self.hbond_restraint()
                    pass

                elif la_ == 24:
                    self.state = 263
                    self.hbond_db_restraint()
                    pass

                elif la_ == 25:
                    self.state = 264
                    self.flag_statement()
                    pass

                elif la_ == 26:
                    self.state = 265
                    self.vector_statement()
                    pass

                elif la_ == 27:
                    self.state = 266
                    self.evaluate_statement()
                    pass

                elif la_ == 28:
                    self.state = 267
                    self.noe_assign_loop()
                    pass

                elif la_ == 29:
                    self.state = 268
                    self.dihedral_assign_loop()
                    pass

                elif la_ == 30:
                    self.state = 269
                    self.sani_assign_loop()
                    pass

                elif la_ == 31:
                    self.state = 270
                    self.hbond_assign_loop()
                    pass

                elif la_ == 32:
                    self.state = 271
                    self.hbond_db_assign_loop()
                    pass

                elif la_ == 33:
                    self.state = 272
                    self.coup_assign_loop()
                    pass

                elif la_ == 34:
                    self.state = 273
                    self.xadc_assign_loop()
                    pass

                elif la_ == 35:
                    self.state = 274
                    self.coll_assign_loop()
                    pass

                elif la_ == 36:
                    self.state = 275
                    self.csa_assign_loop()
                    pass

                elif la_ == 37:
                    self.state = 276
                    self.pre_assign_loop()
                    pass

                elif la_ == 38:
                    self.state = 277
                    self.pcs_assign_loop()
                    pass

                elif la_ == 39:
                    self.state = 278
                    self.noe_assign()
                    pass

                elif la_ == 40:
                    self.state = 279
                    self.dihedral_assign()
                    pass

                elif la_ == 41:
                    self.state = 280
                    self.sani_assign()
                    pass

                elif la_ == 42:
                    self.state = 281
                    self.planar_statement()
                    pass

                elif la_ == 43:
                    self.state = 282
                    self.harmonic_assign()
                    pass

                elif la_ == 44:
                    self.state = 283
                    self.hbond_assign()
                    pass

                elif la_ == 45:
                    self.state = 284
                    self.hbond_db_assign()
                    pass

                elif la_ == 46:
                    self.state = 285
                    self.coup_assign()
                    pass

                elif la_ == 47:
                    self.state = 286
                    self.xadc_assign()
                    pass

                elif la_ == 48:
                    self.state = 287
                    self.coll_assign()
                    pass

                elif la_ == 49:
                    self.state = 288
                    self.csa_assign()
                    pass

                elif la_ == 50:
                    self.state = 289
                    self.pre_assign()
                    pass

                elif la_ == 51:
                    self.state = 290
                    self.pcs_assign()
                    pass

                elif la_ == 52:
                    self.state = 291
                    self.observed()
                    pass


                self.state = 296
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 297
            self.match(XplorMRParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Distance_restraintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Noe(self):
            return self.getToken(XplorMRParser.Noe, 0)

        def End(self):
            return self.getToken(XplorMRParser.End, 0)

        def noe_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Noe_statementContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Noe_statementContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_distance_restraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDistance_restraint" ):
                listener.enterDistance_restraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDistance_restraint" ):
                listener.exitDistance_restraint(self)




    def distance_restraint(self):

        localctx = XplorMRParser.Distance_restraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_distance_restraint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 299
            self.match(XplorMRParser.Noe)
            self.state = 303
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << XplorMRParser.Assign) | (1 << XplorMRParser.Asymptote) | (1 << XplorMRParser.Average) | (1 << XplorMRParser.Bhig) | (1 << XplorMRParser.Ceiling) | (1 << XplorMRParser.Classification) | (1 << XplorMRParser.CountViol) | (1 << XplorMRParser.Distribute) | (1 << XplorMRParser.Monomers) | (1 << XplorMRParser.Ncount) | (1 << XplorMRParser.Nrestraints) | (1 << XplorMRParser.Potential) | (1 << XplorMRParser.Predict) | (1 << XplorMRParser.Print) | (1 << XplorMRParser.Reset) | (1 << XplorMRParser.Rswitch) | (1 << XplorMRParser.Scale) | (1 << XplorMRParser.SoExponent) | (1 << XplorMRParser.SqConstant) | (1 << XplorMRParser.SqExponent) | (1 << XplorMRParser.SqOffset) | (1 << XplorMRParser.Temperature))) != 0) or _la==XplorMRParser.For:
                self.state = 300
                self.noe_statement()
                self.state = 305
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 306
            self.match(XplorMRParser.End)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Dihedral_angle_restraintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Dihedral(self):
            return self.getToken(XplorMRParser.Dihedral, 0)

        def End(self):
            return self.getToken(XplorMRParser.End, 0)

        def Restraints(self):
            return self.getToken(XplorMRParser.Restraints, 0)

        def dihedral_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Dihedral_statementContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Dihedral_statementContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_dihedral_angle_restraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDihedral_angle_restraint" ):
                listener.enterDihedral_angle_restraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDihedral_angle_restraint" ):
                listener.exitDihedral_angle_restraint(self)




    def dihedral_angle_restraint(self):

        localctx = XplorMRParser.Dihedral_angle_restraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_dihedral_angle_restraint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 309
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==XplorMRParser.Restraints:
                self.state = 308
                self.match(XplorMRParser.Restraints)


            self.state = 311
            self.match(XplorMRParser.Dihedral)
            self.state = 315
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << XplorMRParser.Assign) | (1 << XplorMRParser.Reset) | (1 << XplorMRParser.Scale) | (1 << XplorMRParser.Nassign))) != 0) or _la==XplorMRParser.Vector or _la==XplorMRParser.For:
                self.state = 312
                self.dihedral_statement()
                self.state = 317
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 318
            self.match(XplorMRParser.End)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Rdc_restraintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Sanisotropy(self):
            return self.getToken(XplorMRParser.Sanisotropy, 0)

        def End(self):
            return self.getToken(XplorMRParser.End, 0)

        def sani_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Sani_statementContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Sani_statementContext,i)


        def Xdipolar(self):
            return self.getToken(XplorMRParser.Xdipolar, 0)

        def Dipolar(self):
            return self.getToken(XplorMRParser.Dipolar, 0)

        def xdip_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Xdip_statementContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Xdip_statementContext,i)


        def VectorAngle(self):
            return self.getToken(XplorMRParser.VectorAngle, 0)

        def vean_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Vean_statementContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Vean_statementContext,i)


        def Tensor(self):
            return self.getToken(XplorMRParser.Tensor, 0)

        def tenso_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Tenso_statementContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Tenso_statementContext,i)


        def Anisotropy(self):
            return self.getToken(XplorMRParser.Anisotropy, 0)

        def anis_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Anis_statementContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Anis_statementContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_rdc_restraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRdc_restraint" ):
                listener.enterRdc_restraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRdc_restraint" ):
                listener.exitRdc_restraint(self)




    def rdc_restraint(self):

        localctx = XplorMRParser.Rdc_restraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_rdc_restraint)
        self._la = 0 # Token type
        try:
            self.state = 360
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [XplorMRParser.Sanisotropy]:
                self.enterOuterAlt(localctx, 1)
                self.state = 320
                self.match(XplorMRParser.Sanisotropy)
                self.state = 324
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << XplorMRParser.Assign) | (1 << XplorMRParser.Classification) | (1 << XplorMRParser.Nrestraints) | (1 << XplorMRParser.Potential) | (1 << XplorMRParser.Print) | (1 << XplorMRParser.Reset) | (1 << XplorMRParser.Coefficients) | (1 << XplorMRParser.ForceConstant))) != 0) or _la==XplorMRParser.For:
                    self.state = 321
                    self.sani_statement()
                    self.state = 326
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 327
                self.match(XplorMRParser.End)
                pass
            elif token in [XplorMRParser.Xdipolar, XplorMRParser.Dipolar]:
                self.enterOuterAlt(localctx, 2)
                self.state = 328
                _la = self._input.LA(1)
                if not(_la==XplorMRParser.Xdipolar or _la==XplorMRParser.Dipolar):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 332
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << XplorMRParser.Assign) | (1 << XplorMRParser.Average) | (1 << XplorMRParser.Classification) | (1 << XplorMRParser.Nrestraints) | (1 << XplorMRParser.Potential) | (1 << XplorMRParser.Print) | (1 << XplorMRParser.Reset) | (1 << XplorMRParser.Scale) | (1 << XplorMRParser.Coefficients) | (1 << XplorMRParser.ForceConstant) | (1 << XplorMRParser.Type) | (1 << XplorMRParser.Sign))) != 0):
                    self.state = 329
                    self.xdip_statement()
                    self.state = 334
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 335
                self.match(XplorMRParser.End)
                pass
            elif token in [XplorMRParser.VectorAngle]:
                self.enterOuterAlt(localctx, 3)
                self.state = 336
                self.match(XplorMRParser.VectorAngle)
                self.state = 340
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << XplorMRParser.Assign) | (1 << XplorMRParser.Classification) | (1 << XplorMRParser.Nrestraints) | (1 << XplorMRParser.Print) | (1 << XplorMRParser.Reset) | (1 << XplorMRParser.ForceConstant) | (1 << XplorMRParser.Cv) | (1 << XplorMRParser.Partition))) != 0):
                    self.state = 337
                    self.vean_statement()
                    self.state = 342
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 343
                self.match(XplorMRParser.End)
                pass
            elif token in [XplorMRParser.Tensor]:
                self.enterOuterAlt(localctx, 4)
                self.state = 344
                self.match(XplorMRParser.Tensor)
                self.state = 348
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << XplorMRParser.Assign) | (1 << XplorMRParser.Classification) | (1 << XplorMRParser.Nrestraints) | (1 << XplorMRParser.Potential) | (1 << XplorMRParser.Print) | (1 << XplorMRParser.Reset) | (1 << XplorMRParser.Coefficients))) != 0):
                    self.state = 345
                    self.tenso_statement()
                    self.state = 350
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 351
                self.match(XplorMRParser.End)
                pass
            elif token in [XplorMRParser.Anisotropy]:
                self.enterOuterAlt(localctx, 5)
                self.state = 352
                self.match(XplorMRParser.Anisotropy)
                self.state = 356
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << XplorMRParser.Assign) | (1 << XplorMRParser.Classification) | (1 << XplorMRParser.Nrestraints) | (1 << XplorMRParser.Potential) | (1 << XplorMRParser.Print) | (1 << XplorMRParser.Reset) | (1 << XplorMRParser.Coefficients) | (1 << XplorMRParser.ForceConstant) | (1 << XplorMRParser.Type))) != 0):
                    self.state = 353
                    self.anis_statement()
                    self.state = 358
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 359
                self.match(XplorMRParser.End)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Planar_restraintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Planar(self):
            return self.getToken(XplorMRParser.Planar, 0)

        def End(self):
            return self.getToken(XplorMRParser.End, 0)

        def Restraints(self):
            return self.getToken(XplorMRParser.Restraints, 0)

        def planar_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Planar_statementContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Planar_statementContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_planar_restraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPlanar_restraint" ):
                listener.enterPlanar_restraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPlanar_restraint" ):
                listener.exitPlanar_restraint(self)




    def planar_restraint(self):

        localctx = XplorMRParser.Planar_restraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_planar_restraint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 363
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==XplorMRParser.Restraints:
                self.state = 362
                self.match(XplorMRParser.Restraints)


            self.state = 365
            self.match(XplorMRParser.Planar)
            self.state = 369
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==XplorMRParser.Group or _la==XplorMRParser.Initialize or _la==XplorMRParser.Vector:
                self.state = 366
                self.planar_statement()
                self.state = 371
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 372
            self.match(XplorMRParser.End)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Harmonic_restraintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Harmonic(self):
            return self.getToken(XplorMRParser.Harmonic, 0)

        def End(self):
            return self.getToken(XplorMRParser.End, 0)

        def Restraints(self):
            return self.getToken(XplorMRParser.Restraints, 0)

        def harmonic_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Harmonic_statementContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Harmonic_statementContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_harmonic_restraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHarmonic_restraint" ):
                listener.enterHarmonic_restraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHarmonic_restraint" ):
                listener.exitHarmonic_restraint(self)




    def harmonic_restraint(self):

        localctx = XplorMRParser.Harmonic_restraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_harmonic_restraint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 375
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==XplorMRParser.Restraints:
                self.state = 374
                self.match(XplorMRParser.Restraints)


            self.state = 377
            self.match(XplorMRParser.Harmonic)
            self.state = 381
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==XplorMRParser.Exponent or _la==XplorMRParser.Normal or _la==XplorMRParser.Vector:
                self.state = 378
                self.harmonic_statement()
                self.state = 383
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 384
            self.match(XplorMRParser.End)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Antidistance_restraintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Xadc(self):
            return self.getToken(XplorMRParser.Xadc, 0)

        def End(self):
            return self.getToken(XplorMRParser.End, 0)

        def antidistance_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Antidistance_statementContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Antidistance_statementContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_antidistance_restraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAntidistance_restraint" ):
                listener.enterAntidistance_restraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAntidistance_restraint" ):
                listener.exitAntidistance_restraint(self)




    def antidistance_restraint(self):

        localctx = XplorMRParser.Antidistance_restraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_antidistance_restraint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 386
            self.match(XplorMRParser.Xadc)
            self.state = 390
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << XplorMRParser.Assign) | (1 << XplorMRParser.Classification) | (1 << XplorMRParser.Nrestraints) | (1 << XplorMRParser.Print) | (1 << XplorMRParser.Reset) | (1 << XplorMRParser.ForceConstant) | (1 << XplorMRParser.Expectation) | (1 << XplorMRParser.Size) | (1 << XplorMRParser.Zero))) != 0) or _la==XplorMRParser.For:
                self.state = 387
                self.antidistance_statement()
                self.state = 392
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 393
            self.match(XplorMRParser.End)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Coupling_restraintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Coupling(self):
            return self.getToken(XplorMRParser.Coupling, 0)

        def End(self):
            return self.getToken(XplorMRParser.End, 0)

        def coupling_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Coupling_statementContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Coupling_statementContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_coupling_restraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCoupling_restraint" ):
                listener.enterCoupling_restraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCoupling_restraint" ):
                listener.exitCoupling_restraint(self)




    def coupling_restraint(self):

        localctx = XplorMRParser.Coupling_restraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_coupling_restraint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 395
            self.match(XplorMRParser.Coupling)
            self.state = 399
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((((_la - 4)) & ~0x3f) == 0 and ((1 << (_la - 4)) & ((1 << (XplorMRParser.Assign - 4)) | (1 << (XplorMRParser.Classification - 4)) | (1 << (XplorMRParser.Nrestraints - 4)) | (1 << (XplorMRParser.Potential - 4)) | (1 << (XplorMRParser.Print - 4)) | (1 << (XplorMRParser.Reset - 4)) | (1 << (XplorMRParser.Coefficients - 4)) | (1 << (XplorMRParser.ForceConstant - 4)) | (1 << (XplorMRParser.Cv - 4)) | (1 << (XplorMRParser.Partition - 4)) | (1 << (XplorMRParser.DegEnergy - 4)))) != 0) or _la==XplorMRParser.For:
                self.state = 396
                self.coupling_statement()
                self.state = 401
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 402
            self.match(XplorMRParser.End)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Carbon_shift_restraintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Carbon(self):
            return self.getToken(XplorMRParser.Carbon, 0)

        def End(self):
            return self.getToken(XplorMRParser.End, 0)

        def carbon_shift_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Carbon_shift_statementContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Carbon_shift_statementContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_carbon_shift_restraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCarbon_shift_restraint" ):
                listener.enterCarbon_shift_restraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCarbon_shift_restraint" ):
                listener.exitCarbon_shift_restraint(self)




    def carbon_shift_restraint(self):

        localctx = XplorMRParser.Carbon_shift_restraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_carbon_shift_restraint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 404
            self.match(XplorMRParser.Carbon)
            self.state = 408
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << XplorMRParser.Assign) | (1 << XplorMRParser.Classification) | (1 << XplorMRParser.Nrestraints) | (1 << XplorMRParser.Potential) | (1 << XplorMRParser.Print) | (1 << XplorMRParser.Reset) | (1 << XplorMRParser.ForceConstant) | (1 << XplorMRParser.Expectation) | (1 << XplorMRParser.Zero))) != 0) or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & ((1 << (XplorMRParser.PhiStep - 66)) | (1 << (XplorMRParser.PsiStep - 66)) | (1 << (XplorMRParser.Rcoil - 66)))) != 0):
                self.state = 405
                self.carbon_shift_statement()
                self.state = 410
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 411
            self.match(XplorMRParser.End)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Proton_shift_restraintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Proton(self):
            return self.getToken(XplorMRParser.Proton, 0)

        def End(self):
            return self.getToken(XplorMRParser.End, 0)

        def proton_shift_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Proton_shift_statementContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Proton_shift_statementContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_proton_shift_restraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProton_shift_restraint" ):
                listener.enterProton_shift_restraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProton_shift_restraint" ):
                listener.exitProton_shift_restraint(self)




    def proton_shift_restraint(self):

        localctx = XplorMRParser.Proton_shift_restraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_proton_shift_restraint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 413
            self.match(XplorMRParser.Proton)
            self.state = 417
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << XplorMRParser.Classification) | (1 << XplorMRParser.Potential) | (1 << XplorMRParser.Print) | (1 << XplorMRParser.Reset) | (1 << XplorMRParser.ForceConstant) | (1 << XplorMRParser.Anisotropy))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (XplorMRParser.DegEnergy - 64)) | (1 << (XplorMRParser.Carbon - 64)) | (1 << (XplorMRParser.Rcoil - 64)) | (1 << (XplorMRParser.Observed - 64)) | (1 << (XplorMRParser.Amides - 64)) | (1 << (XplorMRParser.Nitrogens - 64)) | (1 << (XplorMRParser.Oxygens - 64)) | (1 << (XplorMRParser.RingAtoms - 64)) | (1 << (XplorMRParser.AlphasAndAmides - 64)) | (1 << (XplorMRParser.Error - 64)))) != 0):
                self.state = 414
                self.proton_shift_statement()
                self.state = 419
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 420
            self.match(XplorMRParser.End)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Dihedral_angle_db_restraintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Ramachandran(self):
            return self.getToken(XplorMRParser.Ramachandran, 0)

        def End(self):
            return self.getToken(XplorMRParser.End, 0)

        def ramachandran_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Ramachandran_statementContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Ramachandran_statementContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_dihedral_angle_db_restraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDihedral_angle_db_restraint" ):
                listener.enterDihedral_angle_db_restraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDihedral_angle_db_restraint" ):
                listener.exitDihedral_angle_db_restraint(self)




    def dihedral_angle_db_restraint(self):

        localctx = XplorMRParser.Dihedral_angle_db_restraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_dihedral_angle_db_restraint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 422
            self.match(XplorMRParser.Ramachandran)
            self.state = 426
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << XplorMRParser.Assign) | (1 << XplorMRParser.Classification) | (1 << XplorMRParser.Nrestraints) | (1 << XplorMRParser.Print) | (1 << XplorMRParser.Reset) | (1 << XplorMRParser.Scale) | (1 << XplorMRParser.Cutoff) | (1 << XplorMRParser.ForceConstant) | (1 << XplorMRParser.Size) | (1 << XplorMRParser.Zero))) != 0) or ((((_la - 78)) & ~0x3f) == 0 and ((1 << (_la - 78)) & ((1 << (XplorMRParser.Gaussian - 78)) | (1 << (XplorMRParser.Phase - 78)) | (1 << (XplorMRParser.Quartic - 78)) | (1 << (XplorMRParser.Shape - 78)) | (1 << (XplorMRParser.Sort - 78)))) != 0):
                self.state = 423
                self.ramachandran_statement()
                self.state = 428
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 429
            self.match(XplorMRParser.End)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Radius_of_gyration_restraintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Collapse(self):
            return self.getToken(XplorMRParser.Collapse, 0)

        def End(self):
            return self.getToken(XplorMRParser.End, 0)

        def collapse_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Collapse_statementContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Collapse_statementContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_radius_of_gyration_restraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRadius_of_gyration_restraint" ):
                listener.enterRadius_of_gyration_restraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRadius_of_gyration_restraint" ):
                listener.exitRadius_of_gyration_restraint(self)




    def radius_of_gyration_restraint(self):

        localctx = XplorMRParser.Radius_of_gyration_restraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_radius_of_gyration_restraint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 431
            self.match(XplorMRParser.Collapse)
            self.state = 435
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << XplorMRParser.Assign) | (1 << XplorMRParser.Print) | (1 << XplorMRParser.Reset) | (1 << XplorMRParser.Scale))) != 0) or _la==XplorMRParser.For:
                self.state = 432
                self.collapse_statement()
                self.state = 437
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 438
            self.match(XplorMRParser.End)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Diffusion_anisotropy_restraintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Danisotropy(self):
            return self.getToken(XplorMRParser.Danisotropy, 0)

        def End(self):
            return self.getToken(XplorMRParser.End, 0)

        def diffusion_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Diffusion_statementContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Diffusion_statementContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_diffusion_anisotropy_restraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDiffusion_anisotropy_restraint" ):
                listener.enterDiffusion_anisotropy_restraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDiffusion_anisotropy_restraint" ):
                listener.exitDiffusion_anisotropy_restraint(self)




    def diffusion_anisotropy_restraint(self):

        localctx = XplorMRParser.Diffusion_anisotropy_restraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_diffusion_anisotropy_restraint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 440
            self.match(XplorMRParser.Danisotropy)
            self.state = 444
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << XplorMRParser.Assign) | (1 << XplorMRParser.Classification) | (1 << XplorMRParser.Nrestraints) | (1 << XplorMRParser.Potential) | (1 << XplorMRParser.Print) | (1 << XplorMRParser.Reset) | (1 << XplorMRParser.Coefficients) | (1 << XplorMRParser.ForceConstant) | (1 << XplorMRParser.Type))) != 0):
                self.state = 441
                self.diffusion_statement()
                self.state = 446
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 447
            self.match(XplorMRParser.End)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Orientation_db_restraintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Orient(self):
            return self.getToken(XplorMRParser.Orient, 0)

        def End(self):
            return self.getToken(XplorMRParser.End, 0)

        def orientation_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Orientation_statementContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Orientation_statementContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_orientation_db_restraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOrientation_db_restraint" ):
                listener.enterOrientation_db_restraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOrientation_db_restraint" ):
                listener.exitOrientation_db_restraint(self)




    def orientation_db_restraint(self):

        localctx = XplorMRParser.Orientation_db_restraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_orientation_db_restraint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 449
            self.match(XplorMRParser.Orient)
            self.state = 453
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << XplorMRParser.Assign) | (1 << XplorMRParser.Classification) | (1 << XplorMRParser.Nrestraints) | (1 << XplorMRParser.Print) | (1 << XplorMRParser.Reset) | (1 << XplorMRParser.Cutoff) | (1 << XplorMRParser.ForceConstant) | (1 << XplorMRParser.Size) | (1 << XplorMRParser.Zero))) != 0) or ((((_la - 78)) & ~0x3f) == 0 and ((1 << (_la - 78)) & ((1 << (XplorMRParser.Gaussian - 78)) | (1 << (XplorMRParser.Quartic - 78)) | (1 << (XplorMRParser.Height - 78)) | (1 << (XplorMRParser.MaxGaussians - 78)) | (1 << (XplorMRParser.NewGaussian - 78)))) != 0) or _la==XplorMRParser.Residue:
                self.state = 450
                self.orientation_statement()
                self.state = 455
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 456
            self.match(XplorMRParser.End)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Csa_restraintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Dcsa(self):
            return self.getToken(XplorMRParser.Dcsa, 0)

        def End(self):
            return self.getToken(XplorMRParser.End, 0)

        def csa_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Csa_statementContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Csa_statementContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_csa_restraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCsa_restraint" ):
                listener.enterCsa_restraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCsa_restraint" ):
                listener.exitCsa_restraint(self)




    def csa_restraint(self):

        localctx = XplorMRParser.Csa_restraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_csa_restraint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 458
            self.match(XplorMRParser.Dcsa)
            self.state = 462
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << XplorMRParser.Assign) | (1 << XplorMRParser.Classification) | (1 << XplorMRParser.Nrestraints) | (1 << XplorMRParser.Potential) | (1 << XplorMRParser.Print) | (1 << XplorMRParser.Reset) | (1 << XplorMRParser.Scale) | (1 << XplorMRParser.Coefficients) | (1 << XplorMRParser.ForceConstant) | (1 << XplorMRParser.Type))) != 0) or _la==XplorMRParser.Sigma or _la==XplorMRParser.For:
                self.state = 459
                self.csa_statement()
                self.state = 464
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 465
            self.match(XplorMRParser.End)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pcsa_restraintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Pcsa(self):
            return self.getToken(XplorMRParser.Pcsa, 0)

        def End(self):
            return self.getToken(XplorMRParser.End, 0)

        def pcsa_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Pcsa_statementContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Pcsa_statementContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_pcsa_restraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPcsa_restraint" ):
                listener.enterPcsa_restraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPcsa_restraint" ):
                listener.exitPcsa_restraint(self)




    def pcsa_restraint(self):

        localctx = XplorMRParser.Pcsa_restraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_pcsa_restraint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 467
            self.match(XplorMRParser.Pcsa)
            self.state = 471
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << XplorMRParser.Assign) | (1 << XplorMRParser.Classification) | (1 << XplorMRParser.Nrestraints) | (1 << XplorMRParser.Potential) | (1 << XplorMRParser.Print) | (1 << XplorMRParser.Reset) | (1 << XplorMRParser.Scale) | (1 << XplorMRParser.Coefficients) | (1 << XplorMRParser.ForceConstant))) != 0) or _la==XplorMRParser.Sigma:
                self.state = 468
                self.pcsa_statement()
                self.state = 473
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 474
            self.match(XplorMRParser.End)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class One_bond_coupling_restraintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OneBond(self):
            return self.getToken(XplorMRParser.OneBond, 0)

        def End(self):
            return self.getToken(XplorMRParser.End, 0)

        def one_bond_coupling_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.One_bond_coupling_statementContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.One_bond_coupling_statementContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_one_bond_coupling_restraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOne_bond_coupling_restraint" ):
                listener.enterOne_bond_coupling_restraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOne_bond_coupling_restraint" ):
                listener.exitOne_bond_coupling_restraint(self)




    def one_bond_coupling_restraint(self):

        localctx = XplorMRParser.One_bond_coupling_restraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_one_bond_coupling_restraint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 476
            self.match(XplorMRParser.OneBond)
            self.state = 480
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << XplorMRParser.Assign) | (1 << XplorMRParser.Classification) | (1 << XplorMRParser.Nrestraints) | (1 << XplorMRParser.Potential) | (1 << XplorMRParser.Print) | (1 << XplorMRParser.Reset) | (1 << XplorMRParser.Coefficients) | (1 << XplorMRParser.ForceConstant))) != 0):
                self.state = 477
                self.one_bond_coupling_statement()
                self.state = 482
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 483
            self.match(XplorMRParser.End)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Angle_db_restraintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AngleDb(self):
            return self.getToken(XplorMRParser.AngleDb, 0)

        def End(self):
            return self.getToken(XplorMRParser.End, 0)

        def angle_db_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Angle_db_statementContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Angle_db_statementContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_angle_db_restraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAngle_db_restraint" ):
                listener.enterAngle_db_restraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAngle_db_restraint" ):
                listener.exitAngle_db_restraint(self)




    def angle_db_restraint(self):

        localctx = XplorMRParser.Angle_db_restraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_angle_db_restraint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 485
            self.match(XplorMRParser.AngleDb)
            self.state = 489
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << XplorMRParser.Assign) | (1 << XplorMRParser.Classification) | (1 << XplorMRParser.Nrestraints) | (1 << XplorMRParser.Potential) | (1 << XplorMRParser.Print) | (1 << XplorMRParser.Reset) | (1 << XplorMRParser.ForceConstant) | (1 << XplorMRParser.Expectation) | (1 << XplorMRParser.Size) | (1 << XplorMRParser.Zero))) != 0) or _la==XplorMRParser.Error or _la==XplorMRParser.DerivFlag:
                self.state = 486
                self.angle_db_statement()
                self.state = 491
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 492
            self.match(XplorMRParser.End)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pre_restraintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Paramagnetic(self):
            return self.getToken(XplorMRParser.Paramagnetic, 0)

        def End(self):
            return self.getToken(XplorMRParser.End, 0)

        def pre_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Pre_statementContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Pre_statementContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_pre_restraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPre_restraint" ):
                listener.enterPre_restraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPre_restraint" ):
                listener.exitPre_restraint(self)




    def pre_restraint(self):

        localctx = XplorMRParser.Pre_restraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_pre_restraint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 494
            self.match(XplorMRParser.Paramagnetic)
            self.state = 498
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << XplorMRParser.Assign) | (1 << XplorMRParser.Classification) | (1 << XplorMRParser.Nrestraints) | (1 << XplorMRParser.Potential) | (1 << XplorMRParser.Print) | (1 << XplorMRParser.Reset) | (1 << XplorMRParser.ForceConstant))) != 0) or ((((_la - 98)) & ~0x3f) == 0 and ((1 << (_la - 98)) & ((1 << (XplorMRParser.Kconst - 98)) | (1 << (XplorMRParser.Omega - 98)) | (1 << (XplorMRParser.Tauc - 98)) | (1 << (XplorMRParser.Debug - 98)))) != 0) or _la==XplorMRParser.For:
                self.state = 495
                self.pre_statement()
                self.state = 500
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 501
            self.match(XplorMRParser.End)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pcs_restraintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Xpcs(self):
            return self.getToken(XplorMRParser.Xpcs, 0)

        def End(self):
            return self.getToken(XplorMRParser.End, 0)

        def pcs_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Pcs_statementContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Pcs_statementContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_pcs_restraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPcs_restraint" ):
                listener.enterPcs_restraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPcs_restraint" ):
                listener.exitPcs_restraint(self)




    def pcs_restraint(self):

        localctx = XplorMRParser.Pcs_restraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_pcs_restraint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 503
            self.match(XplorMRParser.Xpcs)
            self.state = 507
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << XplorMRParser.Assign) | (1 << XplorMRParser.Classification) | (1 << XplorMRParser.Nrestraints) | (1 << XplorMRParser.Print) | (1 << XplorMRParser.Reset) | (1 << XplorMRParser.Coefficients) | (1 << XplorMRParser.ForceConstant))) != 0) or ((((_la - 103)) & ~0x3f) == 0 and ((1 << (_la - 103)) & ((1 << (XplorMRParser.Tolerance - 103)) | (1 << (XplorMRParser.Save - 103)) | (1 << (XplorMRParser.Fmed - 103)) | (1 << (XplorMRParser.ErrOn - 103)) | (1 << (XplorMRParser.ErrOff - 103)) | (1 << (XplorMRParser.Fon - 103)) | (1 << (XplorMRParser.Foff - 103)) | (1 << (XplorMRParser.Son - 103)) | (1 << (XplorMRParser.Soff - 103)) | (1 << (XplorMRParser.Frun - 103)))) != 0) or _la==XplorMRParser.For:
                self.state = 504
                self.pcs_statement()
                self.state = 509
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 510
            self.match(XplorMRParser.End)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Prdc_restraintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Xrdcoupling(self):
            return self.getToken(XplorMRParser.Xrdcoupling, 0)

        def End(self):
            return self.getToken(XplorMRParser.End, 0)

        def prdc_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Prdc_statementContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Prdc_statementContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_prdc_restraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrdc_restraint" ):
                listener.enterPrdc_restraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrdc_restraint" ):
                listener.exitPrdc_restraint(self)




    def prdc_restraint(self):

        localctx = XplorMRParser.Prdc_restraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_prdc_restraint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 512
            self.match(XplorMRParser.Xrdcoupling)
            self.state = 516
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << XplorMRParser.Assign) | (1 << XplorMRParser.Classification) | (1 << XplorMRParser.Nrestraints) | (1 << XplorMRParser.Print) | (1 << XplorMRParser.Reset) | (1 << XplorMRParser.Coefficients) | (1 << XplorMRParser.ForceConstant))) != 0) or ((((_la - 103)) & ~0x3f) == 0 and ((1 << (_la - 103)) & ((1 << (XplorMRParser.Tolerance - 103)) | (1 << (XplorMRParser.Save - 103)) | (1 << (XplorMRParser.Fmed - 103)) | (1 << (XplorMRParser.ErrOn - 103)) | (1 << (XplorMRParser.ErrOff - 103)) | (1 << (XplorMRParser.Fon - 103)) | (1 << (XplorMRParser.Foff - 103)) | (1 << (XplorMRParser.Son - 103)) | (1 << (XplorMRParser.Soff - 103)) | (1 << (XplorMRParser.Frun - 103)))) != 0):
                self.state = 513
                self.prdc_statement()
                self.state = 518
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 519
            self.match(XplorMRParser.End)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Porientation_restraintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Xangle(self):
            return self.getToken(XplorMRParser.Xangle, 0)

        def End(self):
            return self.getToken(XplorMRParser.End, 0)

        def porientation_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Porientation_statementContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Porientation_statementContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_porientation_restraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPorientation_restraint" ):
                listener.enterPorientation_restraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPorientation_restraint" ):
                listener.exitPorientation_restraint(self)




    def porientation_restraint(self):

        localctx = XplorMRParser.Porientation_restraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_porientation_restraint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 521
            self.match(XplorMRParser.Xangle)
            self.state = 525
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << XplorMRParser.Assign) | (1 << XplorMRParser.Classification) | (1 << XplorMRParser.Nrestraints) | (1 << XplorMRParser.Print) | (1 << XplorMRParser.Reset) | (1 << XplorMRParser.ForceConstant))) != 0):
                self.state = 522
                self.porientation_statement()
                self.state = 527
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 528
            self.match(XplorMRParser.End)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pccr_restraintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Xccr(self):
            return self.getToken(XplorMRParser.Xccr, 0)

        def End(self):
            return self.getToken(XplorMRParser.End, 0)

        def pccr_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Pccr_statementContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Pccr_statementContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_pccr_restraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPccr_restraint" ):
                listener.enterPccr_restraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPccr_restraint" ):
                listener.exitPccr_restraint(self)




    def pccr_restraint(self):

        localctx = XplorMRParser.Pccr_restraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_pccr_restraint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 530
            self.match(XplorMRParser.Xccr)
            self.state = 534
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << XplorMRParser.Assign) | (1 << XplorMRParser.Classification) | (1 << XplorMRParser.Nrestraints) | (1 << XplorMRParser.Print) | (1 << XplorMRParser.Reset) | (1 << XplorMRParser.Coefficients) | (1 << XplorMRParser.ForceConstant))) != 0) or _la==XplorMRParser.Frun or _la==XplorMRParser.Weip:
                self.state = 531
                self.pccr_statement()
                self.state = 536
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 537
            self.match(XplorMRParser.End)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Hbond_restraintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Hbda(self):
            return self.getToken(XplorMRParser.Hbda, 0)

        def End(self):
            return self.getToken(XplorMRParser.End, 0)

        def hbond_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Hbond_statementContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Hbond_statementContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_hbond_restraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHbond_restraint" ):
                listener.enterHbond_restraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHbond_restraint" ):
                listener.exitHbond_restraint(self)




    def hbond_restraint(self):

        localctx = XplorMRParser.Hbond_restraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_hbond_restraint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 539
            self.match(XplorMRParser.Hbda)
            self.state = 543
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << XplorMRParser.Assign) | (1 << XplorMRParser.Classification) | (1 << XplorMRParser.Nrestraints) | (1 << XplorMRParser.Print) | (1 << XplorMRParser.Reset) | (1 << XplorMRParser.ForceConstant))) != 0) or _la==XplorMRParser.For:
                self.state = 540
                self.hbond_statement()
                self.state = 545
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 546
            self.match(XplorMRParser.End)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Hbond_db_restraintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Hbdb(self):
            return self.getToken(XplorMRParser.Hbdb, 0)

        def End(self):
            return self.getToken(XplorMRParser.End, 0)

        def hbond_db_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Hbond_db_statementContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Hbond_db_statementContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_hbond_db_restraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHbond_db_restraint" ):
                listener.enterHbond_db_restraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHbond_db_restraint" ):
                listener.exitHbond_db_restraint(self)




    def hbond_db_restraint(self):

        localctx = XplorMRParser.Hbond_db_restraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_hbond_db_restraint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 548
            self.match(XplorMRParser.Hbdb)
            self.state = 552
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==XplorMRParser.Assign or ((((_la - 117)) & ~0x3f) == 0 and ((1 << (_la - 117)) & ((1 << (XplorMRParser.Kdir - 117)) | (1 << (XplorMRParser.Klin - 117)) | (1 << (XplorMRParser.Nseg - 117)) | (1 << (XplorMRParser.Nmin - 117)) | (1 << (XplorMRParser.Nmax - 117)) | (1 << (XplorMRParser.Segm - 117)) | (1 << (XplorMRParser.Ohcut - 117)) | (1 << (XplorMRParser.Coh1cut - 117)) | (1 << (XplorMRParser.Coh2cut - 117)) | (1 << (XplorMRParser.Ohncut - 117)) | (1 << (XplorMRParser.Updfrq - 117)) | (1 << (XplorMRParser.Prnfrq - 117)) | (1 << (XplorMRParser.Freemode - 117)) | (1 << (XplorMRParser.For - 117)))) != 0):
                self.state = 549
                self.hbond_db_statement()
                self.state = 554
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 555
            self.match(XplorMRParser.End)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Noe_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def noe_assign(self):
            return self.getTypedRuleContext(XplorMRParser.Noe_assignContext,0)


        def noe_assign_loop(self):
            return self.getTypedRuleContext(XplorMRParser.Noe_assign_loopContext,0)


        def Asymptote(self):
            return self.getToken(XplorMRParser.Asymptote, 0)

        def Simple_name(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Simple_name)
            else:
                return self.getToken(XplorMRParser.Simple_name, i)

        def number_s(self):
            return self.getTypedRuleContext(XplorMRParser.Number_sContext,0)


        def Average(self):
            return self.getToken(XplorMRParser.Average, 0)

        def Simple_name_A(self):
            return self.getToken(XplorMRParser.Simple_name_A, 0)

        def Averaging_methods(self):
            return self.getToken(XplorMRParser.Averaging_methods, 0)

        def Bhig(self):
            return self.getToken(XplorMRParser.Bhig, 0)

        def Ceiling(self):
            return self.getToken(XplorMRParser.Ceiling, 0)

        def Equ_op(self):
            return self.getToken(XplorMRParser.Equ_op, 0)

        def Classification(self):
            return self.getToken(XplorMRParser.Classification, 0)

        def CountViol(self):
            return self.getToken(XplorMRParser.CountViol, 0)

        def Distribute(self):
            return self.getToken(XplorMRParser.Distribute, 0)

        def Monomers(self):
            return self.getToken(XplorMRParser.Monomers, 0)

        def Integer(self):
            return self.getToken(XplorMRParser.Integer, 0)

        def Ncount(self):
            return self.getToken(XplorMRParser.Ncount, 0)

        def Nrestraints(self):
            return self.getToken(XplorMRParser.Nrestraints, 0)

        def Potential(self):
            return self.getToken(XplorMRParser.Potential, 0)

        def Simple_name_P(self):
            return self.getToken(XplorMRParser.Simple_name_P, 0)

        def Potential_types(self):
            return self.getToken(XplorMRParser.Potential_types, 0)

        def Predict(self):
            return self.getToken(XplorMRParser.Predict, 0)

        def predict_statement(self):
            return self.getTypedRuleContext(XplorMRParser.Predict_statementContext,0)


        def End(self):
            return self.getToken(XplorMRParser.End, 0)

        def Print(self):
            return self.getToken(XplorMRParser.Print, 0)

        def Threshold(self):
            return self.getToken(XplorMRParser.Threshold, 0)

        def Reset(self):
            return self.getToken(XplorMRParser.Reset, 0)

        def Rswitch(self):
            return self.getToken(XplorMRParser.Rswitch, 0)

        def Scale(self):
            return self.getToken(XplorMRParser.Scale, 0)

        def SoExponent(self):
            return self.getToken(XplorMRParser.SoExponent, 0)

        def SqConstant(self):
            return self.getToken(XplorMRParser.SqConstant, 0)

        def SqExponent(self):
            return self.getToken(XplorMRParser.SqExponent, 0)

        def SqOffset(self):
            return self.getToken(XplorMRParser.SqOffset, 0)

        def Temperature(self):
            return self.getToken(XplorMRParser.Temperature, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_noe_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNoe_statement" ):
                listener.enterNoe_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNoe_statement" ):
                listener.exitNoe_statement(self)




    def noe_statement(self):

        localctx = XplorMRParser.Noe_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_noe_statement)
        self._la = 0 # Token type
        try:
            self.state = 632
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [XplorMRParser.Assign]:
                self.enterOuterAlt(localctx, 1)
                self.state = 557
                self.noe_assign()
                pass
            elif token in [XplorMRParser.For]:
                self.enterOuterAlt(localctx, 2)
                self.state = 558
                self.noe_assign_loop()
                pass
            elif token in [XplorMRParser.Asymptote]:
                self.enterOuterAlt(localctx, 3)
                self.state = 559
                self.match(XplorMRParser.Asymptote)
                self.state = 560
                self.match(XplorMRParser.Simple_name)
                self.state = 561
                self.number_s()
                pass
            elif token in [XplorMRParser.Average]:
                self.enterOuterAlt(localctx, 4)
                self.state = 562
                self.match(XplorMRParser.Average)
                self.state = 563
                self.match(XplorMRParser.Simple_name_A)
                self.state = 564
                self.match(XplorMRParser.Averaging_methods)
                pass
            elif token in [XplorMRParser.Bhig]:
                self.enterOuterAlt(localctx, 5)
                self.state = 565
                self.match(XplorMRParser.Bhig)
                self.state = 566
                self.match(XplorMRParser.Simple_name)
                self.state = 567
                self.number_s()
                pass
            elif token in [XplorMRParser.Ceiling]:
                self.enterOuterAlt(localctx, 6)
                self.state = 568
                self.match(XplorMRParser.Ceiling)
                self.state = 570
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 569
                    self.match(XplorMRParser.Equ_op)


                self.state = 572
                self.number_s()
                pass
            elif token in [XplorMRParser.Classification]:
                self.enterOuterAlt(localctx, 7)
                self.state = 573
                self.match(XplorMRParser.Classification)
                self.state = 575
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 574
                    self.match(XplorMRParser.Equ_op)


                self.state = 577
                self.match(XplorMRParser.Simple_name)
                pass
            elif token in [XplorMRParser.CountViol]:
                self.enterOuterAlt(localctx, 8)
                self.state = 578
                self.match(XplorMRParser.CountViol)
                self.state = 579
                self.match(XplorMRParser.Simple_name)
                pass
            elif token in [XplorMRParser.Distribute]:
                self.enterOuterAlt(localctx, 9)
                self.state = 580
                self.match(XplorMRParser.Distribute)
                self.state = 581
                self.match(XplorMRParser.Simple_name)
                self.state = 582
                self.match(XplorMRParser.Simple_name)
                self.state = 583
                self.number_s()
                pass
            elif token in [XplorMRParser.Monomers]:
                self.enterOuterAlt(localctx, 10)
                self.state = 584
                self.match(XplorMRParser.Monomers)
                self.state = 585
                self.match(XplorMRParser.Simple_name)
                self.state = 586
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.Ncount]:
                self.enterOuterAlt(localctx, 11)
                self.state = 587
                self.match(XplorMRParser.Ncount)
                self.state = 588
                self.match(XplorMRParser.Simple_name)
                self.state = 589
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.Nrestraints]:
                self.enterOuterAlt(localctx, 12)
                self.state = 590
                self.match(XplorMRParser.Nrestraints)
                self.state = 592
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 591
                    self.match(XplorMRParser.Equ_op)


                self.state = 594
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.Potential]:
                self.enterOuterAlt(localctx, 13)
                self.state = 595
                self.match(XplorMRParser.Potential)
                self.state = 596
                self.match(XplorMRParser.Simple_name_P)
                self.state = 597
                self.match(XplorMRParser.Potential_types)
                pass
            elif token in [XplorMRParser.Predict]:
                self.enterOuterAlt(localctx, 14)
                self.state = 598
                self.match(XplorMRParser.Predict)
                self.state = 599
                self.predict_statement()
                self.state = 600
                self.match(XplorMRParser.End)
                pass
            elif token in [XplorMRParser.Print]:
                self.enterOuterAlt(localctx, 15)
                self.state = 602
                self.match(XplorMRParser.Print)
                self.state = 603
                self.match(XplorMRParser.Threshold)
                self.state = 605
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 604
                    self.match(XplorMRParser.Equ_op)


                self.state = 607
                self.number_s()
                pass
            elif token in [XplorMRParser.Reset]:
                self.enterOuterAlt(localctx, 16)
                self.state = 608
                self.match(XplorMRParser.Reset)
                pass
            elif token in [XplorMRParser.Rswitch]:
                self.enterOuterAlt(localctx, 17)
                self.state = 609
                self.match(XplorMRParser.Rswitch)
                self.state = 610
                self.match(XplorMRParser.Simple_name)
                self.state = 611
                self.number_s()
                pass
            elif token in [XplorMRParser.Scale]:
                self.enterOuterAlt(localctx, 18)
                self.state = 612
                self.match(XplorMRParser.Scale)
                self.state = 613
                self.match(XplorMRParser.Simple_name)
                self.state = 614
                self.number_s()
                pass
            elif token in [XplorMRParser.SoExponent]:
                self.enterOuterAlt(localctx, 19)
                self.state = 615
                self.match(XplorMRParser.SoExponent)
                self.state = 616
                self.match(XplorMRParser.Simple_name)
                self.state = 617
                self.number_s()
                pass
            elif token in [XplorMRParser.SqConstant]:
                self.enterOuterAlt(localctx, 20)
                self.state = 618
                self.match(XplorMRParser.SqConstant)
                self.state = 619
                self.match(XplorMRParser.Simple_name)
                self.state = 620
                self.number_s()
                pass
            elif token in [XplorMRParser.SqExponent]:
                self.enterOuterAlt(localctx, 21)
                self.state = 621
                self.match(XplorMRParser.SqExponent)
                self.state = 622
                self.match(XplorMRParser.Simple_name)
                self.state = 623
                self.number_s()
                pass
            elif token in [XplorMRParser.SqOffset]:
                self.enterOuterAlt(localctx, 22)
                self.state = 624
                self.match(XplorMRParser.SqOffset)
                self.state = 625
                self.match(XplorMRParser.Simple_name)
                self.state = 626
                self.number_s()
                pass
            elif token in [XplorMRParser.Temperature]:
                self.enterOuterAlt(localctx, 23)
                self.state = 627
                self.match(XplorMRParser.Temperature)
                self.state = 629
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 628
                    self.match(XplorMRParser.Equ_op)


                self.state = 631
                self.number_s()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Noe_assignContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Assign(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Assign)
            else:
                return self.getToken(XplorMRParser.Assign, i)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.SelectionContext,i)


        def number(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.NumberContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.NumberContext,i)


        def noe_annotation(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Noe_annotationContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Noe_annotationContext,i)


        def Or_op(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Or_op)
            else:
                return self.getToken(XplorMRParser.Or_op, i)

        def getRuleIndex(self):
            return XplorMRParser.RULE_noe_assign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNoe_assign" ):
                listener.enterNoe_assign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNoe_assign" ):
                listener.exitNoe_assign(self)




    def noe_assign(self):

        localctx = XplorMRParser.Noe_assignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_noe_assign)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 634
            self.match(XplorMRParser.Assign)
            self.state = 635
            self.selection()
            self.state = 636
            self.selection()
            self.state = 637
            self.number()
            self.state = 639
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,40,self._ctx)
            if la_ == 1:
                self.state = 638
                self.number()


            self.state = 642
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 177)) & ~0x3f) == 0 and ((1 << (_la - 177)) & ((1 << (XplorMRParser.Integer - 177)) | (1 << (XplorMRParser.Real - 177)) | (1 << (XplorMRParser.Symbol_name - 177)))) != 0):
                self.state = 641
                self.number()


            self.state = 647
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << XplorMRParser.Peak) | (1 << XplorMRParser.Spectrum) | (1 << XplorMRParser.Volume) | (1 << XplorMRParser.Ppm1) | (1 << XplorMRParser.Ppm2) | (1 << XplorMRParser.Cv) | (1 << XplorMRParser.Weight))) != 0):
                self.state = 644
                self.noe_annotation()
                self.state = 649
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 667
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==XplorMRParser.Or_op:
                self.state = 650
                self.match(XplorMRParser.Or_op)
                self.state = 652
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Assign:
                    self.state = 651
                    self.match(XplorMRParser.Assign)


                self.state = 654
                self.selection()
                self.state = 655
                self.selection()
                self.state = 657
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,44,self._ctx)
                if la_ == 1:
                    self.state = 656
                    self.number()


                self.state = 660
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,45,self._ctx)
                if la_ == 1:
                    self.state = 659
                    self.number()


                self.state = 663
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 177)) & ~0x3f) == 0 and ((1 << (_la - 177)) & ((1 << (XplorMRParser.Integer - 177)) | (1 << (XplorMRParser.Real - 177)) | (1 << (XplorMRParser.Symbol_name - 177)))) != 0):
                    self.state = 662
                    self.number()


                self.state = 669
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Predict_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Cutoff(self):
            return self.getToken(XplorMRParser.Cutoff, 0)

        def number_s(self):
            return self.getTypedRuleContext(XplorMRParser.Number_sContext,0)


        def Equ_op(self):
            return self.getToken(XplorMRParser.Equ_op, 0)

        def Cuton(self):
            return self.getToken(XplorMRParser.Cuton, 0)

        def From(self):
            return self.getToken(XplorMRParser.From, 0)

        def selection(self):
            return self.getTypedRuleContext(XplorMRParser.SelectionContext,0)


        def To(self):
            return self.getToken(XplorMRParser.To, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_predict_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPredict_statement" ):
                listener.enterPredict_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPredict_statement" ):
                listener.exitPredict_statement(self)




    def predict_statement(self):

        localctx = XplorMRParser.Predict_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_predict_statement)
        self._la = 0 # Token type
        try:
            self.state = 684
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [XplorMRParser.Cutoff]:
                self.enterOuterAlt(localctx, 1)
                self.state = 670
                self.match(XplorMRParser.Cutoff)
                self.state = 672
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 671
                    self.match(XplorMRParser.Equ_op)


                self.state = 674
                self.number_s()
                pass
            elif token in [XplorMRParser.Cuton]:
                self.enterOuterAlt(localctx, 2)
                self.state = 675
                self.match(XplorMRParser.Cuton)
                self.state = 677
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 676
                    self.match(XplorMRParser.Equ_op)


                self.state = 679
                self.number_s()
                pass
            elif token in [XplorMRParser.From]:
                self.enterOuterAlt(localctx, 3)
                self.state = 680
                self.match(XplorMRParser.From)
                self.state = 681
                self.selection()
                pass
            elif token in [XplorMRParser.To]:
                self.enterOuterAlt(localctx, 4)
                self.state = 682
                self.match(XplorMRParser.To)
                self.state = 683
                self.selection()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Noe_annotationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Peak(self):
            return self.getToken(XplorMRParser.Peak, 0)

        def number_a(self):
            return self.getTypedRuleContext(XplorMRParser.Number_aContext,0)


        def Equ_op(self):
            return self.getToken(XplorMRParser.Equ_op, 0)

        def Spectrum(self):
            return self.getToken(XplorMRParser.Spectrum, 0)

        def Weight(self):
            return self.getToken(XplorMRParser.Weight, 0)

        def Volume(self):
            return self.getToken(XplorMRParser.Volume, 0)

        def Ppm1(self):
            return self.getToken(XplorMRParser.Ppm1, 0)

        def Ppm2(self):
            return self.getToken(XplorMRParser.Ppm2, 0)

        def Cv(self):
            return self.getToken(XplorMRParser.Cv, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_noe_annotation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNoe_annotation" ):
                listener.enterNoe_annotation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNoe_annotation" ):
                listener.exitNoe_annotation(self)




    def noe_annotation(self):

        localctx = XplorMRParser.Noe_annotationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_noe_annotation)
        self._la = 0 # Token type
        try:
            self.state = 721
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [XplorMRParser.Peak]:
                self.enterOuterAlt(localctx, 1)
                self.state = 686
                self.match(XplorMRParser.Peak)
                self.state = 688
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 687
                    self.match(XplorMRParser.Equ_op)


                self.state = 690
                self.number_a()
                pass
            elif token in [XplorMRParser.Spectrum]:
                self.enterOuterAlt(localctx, 2)
                self.state = 691
                self.match(XplorMRParser.Spectrum)
                self.state = 693
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 692
                    self.match(XplorMRParser.Equ_op)


                self.state = 695
                self.number_a()
                pass
            elif token in [XplorMRParser.Weight]:
                self.enterOuterAlt(localctx, 3)
                self.state = 696
                self.match(XplorMRParser.Weight)
                self.state = 698
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 697
                    self.match(XplorMRParser.Equ_op)


                self.state = 700
                self.number_a()
                pass
            elif token in [XplorMRParser.Volume]:
                self.enterOuterAlt(localctx, 4)
                self.state = 701
                self.match(XplorMRParser.Volume)
                self.state = 703
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 702
                    self.match(XplorMRParser.Equ_op)


                self.state = 705
                self.number_a()
                pass
            elif token in [XplorMRParser.Ppm1]:
                self.enterOuterAlt(localctx, 5)
                self.state = 706
                self.match(XplorMRParser.Ppm1)
                self.state = 708
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 707
                    self.match(XplorMRParser.Equ_op)


                self.state = 710
                self.number_a()
                pass
            elif token in [XplorMRParser.Ppm2]:
                self.enterOuterAlt(localctx, 6)
                self.state = 711
                self.match(XplorMRParser.Ppm2)
                self.state = 713
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 712
                    self.match(XplorMRParser.Equ_op)


                self.state = 715
                self.number_a()
                pass
            elif token in [XplorMRParser.Cv]:
                self.enterOuterAlt(localctx, 7)
                self.state = 716
                self.match(XplorMRParser.Cv)
                self.state = 718
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 717
                    self.match(XplorMRParser.Equ_op)


                self.state = 720
                self.number_a()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Dihedral_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def vector_statement(self):
            return self.getTypedRuleContext(XplorMRParser.Vector_statementContext,0)


        def dihedral_assign(self):
            return self.getTypedRuleContext(XplorMRParser.Dihedral_assignContext,0)


        def dihedral_assign_loop(self):
            return self.getTypedRuleContext(XplorMRParser.Dihedral_assign_loopContext,0)


        def Nassign(self):
            return self.getToken(XplorMRParser.Nassign, 0)

        def Integer(self):
            return self.getToken(XplorMRParser.Integer, 0)

        def Equ_op(self):
            return self.getToken(XplorMRParser.Equ_op, 0)

        def Reset(self):
            return self.getToken(XplorMRParser.Reset, 0)

        def Scale(self):
            return self.getToken(XplorMRParser.Scale, 0)

        def number_s(self):
            return self.getTypedRuleContext(XplorMRParser.Number_sContext,0)


        def getRuleIndex(self):
            return XplorMRParser.RULE_dihedral_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDihedral_statement" ):
                listener.enterDihedral_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDihedral_statement" ):
                listener.exitDihedral_statement(self)




    def dihedral_statement(self):

        localctx = XplorMRParser.Dihedral_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_dihedral_statement)
        self._la = 0 # Token type
        try:
            self.state = 737
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [XplorMRParser.Vector]:
                self.enterOuterAlt(localctx, 1)
                self.state = 723
                self.vector_statement()
                pass
            elif token in [XplorMRParser.Assign]:
                self.enterOuterAlt(localctx, 2)
                self.state = 724
                self.dihedral_assign()
                pass
            elif token in [XplorMRParser.For]:
                self.enterOuterAlt(localctx, 3)
                self.state = 725
                self.dihedral_assign_loop()
                pass
            elif token in [XplorMRParser.Nassign]:
                self.enterOuterAlt(localctx, 4)
                self.state = 726
                self.match(XplorMRParser.Nassign)
                self.state = 728
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 727
                    self.match(XplorMRParser.Equ_op)


                self.state = 730
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.Reset]:
                self.enterOuterAlt(localctx, 5)
                self.state = 731
                self.match(XplorMRParser.Reset)
                pass
            elif token in [XplorMRParser.Scale]:
                self.enterOuterAlt(localctx, 6)
                self.state = 732
                self.match(XplorMRParser.Scale)
                self.state = 734
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 733
                    self.match(XplorMRParser.Equ_op)


                self.state = 736
                self.number_s()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Dihedral_assignContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Assign(self):
            return self.getToken(XplorMRParser.Assign, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.SelectionContext,i)


        def number(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.NumberContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.NumberContext,i)


        def Integer(self):
            return self.getToken(XplorMRParser.Integer, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_dihedral_assign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDihedral_assign" ):
                listener.enterDihedral_assign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDihedral_assign" ):
                listener.exitDihedral_assign(self)




    def dihedral_assign(self):

        localctx = XplorMRParser.Dihedral_assignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_dihedral_assign)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 739
            self.match(XplorMRParser.Assign)
            self.state = 740
            self.selection()
            self.state = 741
            self.selection()
            self.state = 742
            self.selection()
            self.state = 743
            self.selection()
            self.state = 744
            self.number()
            self.state = 745
            self.number()
            self.state = 746
            self.number()
            self.state = 747
            self.match(XplorMRParser.Integer)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Sani_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def sani_assign(self):
            return self.getTypedRuleContext(XplorMRParser.Sani_assignContext,0)


        def sani_assign_loop(self):
            return self.getTypedRuleContext(XplorMRParser.Sani_assign_loopContext,0)


        def Classification(self):
            return self.getToken(XplorMRParser.Classification, 0)

        def Simple_name(self):
            return self.getToken(XplorMRParser.Simple_name, 0)

        def Equ_op(self):
            return self.getToken(XplorMRParser.Equ_op, 0)

        def Coefficients(self):
            return self.getToken(XplorMRParser.Coefficients, 0)

        def number_s(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Number_sContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Number_sContext,i)


        def ForceConstant(self):
            return self.getToken(XplorMRParser.ForceConstant, 0)

        def Nrestraints(self):
            return self.getToken(XplorMRParser.Nrestraints, 0)

        def Integer(self):
            return self.getToken(XplorMRParser.Integer, 0)

        def Potential(self):
            return self.getToken(XplorMRParser.Potential, 0)

        def Potential_types(self):
            return self.getToken(XplorMRParser.Potential_types, 0)

        def Print(self):
            return self.getToken(XplorMRParser.Print, 0)

        def Threshold(self):
            return self.getToken(XplorMRParser.Threshold, 0)

        def Reset(self):
            return self.getToken(XplorMRParser.Reset, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_sani_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSani_statement" ):
                listener.enterSani_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSani_statement" ):
                listener.exitSani_statement(self)




    def sani_statement(self):

        localctx = XplorMRParser.Sani_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_sani_statement)
        self._la = 0 # Token type
        try:
            self.state = 777
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [XplorMRParser.Assign]:
                self.enterOuterAlt(localctx, 1)
                self.state = 749
                self.sani_assign()
                pass
            elif token in [XplorMRParser.For]:
                self.enterOuterAlt(localctx, 2)
                self.state = 750
                self.sani_assign_loop()
                pass
            elif token in [XplorMRParser.Classification]:
                self.enterOuterAlt(localctx, 3)
                self.state = 751
                self.match(XplorMRParser.Classification)
                self.state = 753
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 752
                    self.match(XplorMRParser.Equ_op)


                self.state = 755
                self.match(XplorMRParser.Simple_name)
                pass
            elif token in [XplorMRParser.Coefficients]:
                self.enterOuterAlt(localctx, 4)
                self.state = 756
                self.match(XplorMRParser.Coefficients)
                self.state = 757
                self.number_s()
                self.state = 758
                self.number_s()
                self.state = 759
                self.number_s()
                pass
            elif token in [XplorMRParser.ForceConstant]:
                self.enterOuterAlt(localctx, 5)
                self.state = 761
                self.match(XplorMRParser.ForceConstant)
                self.state = 763
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 762
                    self.match(XplorMRParser.Equ_op)


                self.state = 765
                self.number_s()
                pass
            elif token in [XplorMRParser.Nrestraints]:
                self.enterOuterAlt(localctx, 6)
                self.state = 766
                self.match(XplorMRParser.Nrestraints)
                self.state = 768
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 767
                    self.match(XplorMRParser.Equ_op)


                self.state = 770
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.Potential]:
                self.enterOuterAlt(localctx, 7)
                self.state = 771
                self.match(XplorMRParser.Potential)
                self.state = 772
                self.match(XplorMRParser.Potential_types)
                pass
            elif token in [XplorMRParser.Print]:
                self.enterOuterAlt(localctx, 8)
                self.state = 773
                self.match(XplorMRParser.Print)
                self.state = 774
                self.match(XplorMRParser.Threshold)
                self.state = 775
                self.number_s()
                pass
            elif token in [XplorMRParser.Reset]:
                self.enterOuterAlt(localctx, 9)
                self.state = 776
                self.match(XplorMRParser.Reset)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Sani_assignContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Assign(self):
            return self.getToken(XplorMRParser.Assign, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.SelectionContext,i)


        def number(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.NumberContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.NumberContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_sani_assign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSani_assign" ):
                listener.enterSani_assign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSani_assign" ):
                listener.exitSani_assign(self)




    def sani_assign(self):

        localctx = XplorMRParser.Sani_assignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_sani_assign)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 779
            self.match(XplorMRParser.Assign)
            self.state = 780
            self.selection()
            self.state = 781
            self.selection()
            self.state = 782
            self.selection()
            self.state = 783
            self.selection()
            self.state = 784
            self.selection()
            self.state = 785
            self.selection()
            self.state = 786
            self.number()
            self.state = 788
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,66,self._ctx)
            if la_ == 1:
                self.state = 787
                self.number()


            self.state = 791
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 177)) & ~0x3f) == 0 and ((1 << (_la - 177)) & ((1 << (XplorMRParser.Integer - 177)) | (1 << (XplorMRParser.Real - 177)) | (1 << (XplorMRParser.Symbol_name - 177)))) != 0):
                self.state = 790
                self.number()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Xdip_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def xdip_assign(self):
            return self.getTypedRuleContext(XplorMRParser.Xdip_assignContext,0)


        def Classification(self):
            return self.getToken(XplorMRParser.Classification, 0)

        def Simple_name(self):
            return self.getToken(XplorMRParser.Simple_name, 0)

        def Equ_op(self):
            return self.getToken(XplorMRParser.Equ_op, 0)

        def Type(self):
            return self.getToken(XplorMRParser.Type, 0)

        def Rdc_dist_fix_types(self):
            return self.getToken(XplorMRParser.Rdc_dist_fix_types, 0)

        def Scale(self):
            return self.getToken(XplorMRParser.Scale, 0)

        def number_s(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Number_sContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Number_sContext,i)


        def Sign(self):
            return self.getToken(XplorMRParser.Sign, 0)

        def Logical(self):
            return self.getToken(XplorMRParser.Logical, 0)

        def Average(self):
            return self.getToken(XplorMRParser.Average, 0)

        def Averaging_methods(self):
            return self.getToken(XplorMRParser.Averaging_methods, 0)

        def Coefficients(self):
            return self.getToken(XplorMRParser.Coefficients, 0)

        def ForceConstant(self):
            return self.getToken(XplorMRParser.ForceConstant, 0)

        def Nrestraints(self):
            return self.getToken(XplorMRParser.Nrestraints, 0)

        def Integer(self):
            return self.getToken(XplorMRParser.Integer, 0)

        def Potential(self):
            return self.getToken(XplorMRParser.Potential, 0)

        def Potential_types(self):
            return self.getToken(XplorMRParser.Potential_types, 0)

        def Print(self):
            return self.getToken(XplorMRParser.Print, 0)

        def Threshold(self):
            return self.getToken(XplorMRParser.Threshold, 0)

        def Reset(self):
            return self.getToken(XplorMRParser.Reset, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_xdip_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterXdip_statement" ):
                listener.enterXdip_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitXdip_statement" ):
                listener.exitXdip_statement(self)




    def xdip_statement(self):

        localctx = XplorMRParser.Xdip_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_xdip_statement)
        self._la = 0 # Token type
        try:
            self.state = 831
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [XplorMRParser.Assign]:
                self.enterOuterAlt(localctx, 1)
                self.state = 793
                self.xdip_assign()
                pass
            elif token in [XplorMRParser.Classification]:
                self.enterOuterAlt(localctx, 2)
                self.state = 794
                self.match(XplorMRParser.Classification)
                self.state = 796
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 795
                    self.match(XplorMRParser.Equ_op)


                self.state = 798
                self.match(XplorMRParser.Simple_name)
                pass
            elif token in [XplorMRParser.Type]:
                self.enterOuterAlt(localctx, 3)
                self.state = 799
                self.match(XplorMRParser.Type)
                self.state = 800
                self.match(XplorMRParser.Rdc_dist_fix_types)
                pass
            elif token in [XplorMRParser.Scale]:
                self.enterOuterAlt(localctx, 4)
                self.state = 801
                self.match(XplorMRParser.Scale)
                self.state = 803
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 802
                    self.match(XplorMRParser.Equ_op)


                self.state = 805
                self.number_s()
                pass
            elif token in [XplorMRParser.Sign]:
                self.enterOuterAlt(localctx, 5)
                self.state = 806
                self.match(XplorMRParser.Sign)
                self.state = 807
                self.match(XplorMRParser.Logical)
                pass
            elif token in [XplorMRParser.Average]:
                self.enterOuterAlt(localctx, 6)
                self.state = 808
                self.match(XplorMRParser.Average)
                self.state = 809
                self.match(XplorMRParser.Averaging_methods)
                pass
            elif token in [XplorMRParser.Coefficients]:
                self.enterOuterAlt(localctx, 7)
                self.state = 810
                self.match(XplorMRParser.Coefficients)
                self.state = 811
                self.number_s()
                self.state = 812
                self.number_s()
                self.state = 813
                self.number_s()
                pass
            elif token in [XplorMRParser.ForceConstant]:
                self.enterOuterAlt(localctx, 8)
                self.state = 815
                self.match(XplorMRParser.ForceConstant)
                self.state = 817
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 816
                    self.match(XplorMRParser.Equ_op)


                self.state = 819
                self.number_s()
                pass
            elif token in [XplorMRParser.Nrestraints]:
                self.enterOuterAlt(localctx, 9)
                self.state = 820
                self.match(XplorMRParser.Nrestraints)
                self.state = 822
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 821
                    self.match(XplorMRParser.Equ_op)


                self.state = 824
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.Potential]:
                self.enterOuterAlt(localctx, 10)
                self.state = 825
                self.match(XplorMRParser.Potential)
                self.state = 826
                self.match(XplorMRParser.Potential_types)
                pass
            elif token in [XplorMRParser.Print]:
                self.enterOuterAlt(localctx, 11)
                self.state = 827
                self.match(XplorMRParser.Print)
                self.state = 828
                self.match(XplorMRParser.Threshold)
                self.state = 829
                self.number_s()
                pass
            elif token in [XplorMRParser.Reset]:
                self.enterOuterAlt(localctx, 12)
                self.state = 830
                self.match(XplorMRParser.Reset)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Xdip_assignContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Assign(self):
            return self.getToken(XplorMRParser.Assign, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.SelectionContext,i)


        def number(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.NumberContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.NumberContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_xdip_assign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterXdip_assign" ):
                listener.enterXdip_assign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitXdip_assign" ):
                listener.exitXdip_assign(self)




    def xdip_assign(self):

        localctx = XplorMRParser.Xdip_assignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 68, self.RULE_xdip_assign)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 833
            self.match(XplorMRParser.Assign)
            self.state = 834
            self.selection()
            self.state = 835
            self.selection()
            self.state = 836
            self.selection()
            self.state = 837
            self.selection()
            self.state = 838
            self.selection()
            self.state = 839
            self.selection()
            self.state = 840
            self.number()
            self.state = 841
            self.number()
            self.state = 848
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,73,self._ctx)
            if la_ == 1:
                self.state = 842
                self.number()

            elif la_ == 2:
                self.state = 843
                self.number()
                self.state = 844
                self.number()
                self.state = 845
                self.number()
                self.state = 846
                self.number()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Vean_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def vean_assign(self):
            return self.getTypedRuleContext(XplorMRParser.Vean_assignContext,0)


        def Cv(self):
            return self.getToken(XplorMRParser.Cv, 0)

        def Integer(self):
            return self.getToken(XplorMRParser.Integer, 0)

        def Equ_op(self):
            return self.getToken(XplorMRParser.Equ_op, 0)

        def Classification(self):
            return self.getToken(XplorMRParser.Classification, 0)

        def Simple_name(self):
            return self.getToken(XplorMRParser.Simple_name, 0)

        def ForceConstant(self):
            return self.getToken(XplorMRParser.ForceConstant, 0)

        def number_s(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Number_sContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Number_sContext,i)


        def Nrestraints(self):
            return self.getToken(XplorMRParser.Nrestraints, 0)

        def Partition(self):
            return self.getToken(XplorMRParser.Partition, 0)

        def Print(self):
            return self.getToken(XplorMRParser.Print, 0)

        def Threshold(self):
            return self.getToken(XplorMRParser.Threshold, 0)

        def Reset(self):
            return self.getToken(XplorMRParser.Reset, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_vean_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVean_statement" ):
                listener.enterVean_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVean_statement" ):
                listener.exitVean_statement(self)




    def vean_statement(self):

        localctx = XplorMRParser.Vean_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_vean_statement)
        self._la = 0 # Token type
        try:
            self.state = 882
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [XplorMRParser.Assign]:
                self.enterOuterAlt(localctx, 1)
                self.state = 850
                self.vean_assign()
                pass
            elif token in [XplorMRParser.Cv]:
                self.enterOuterAlt(localctx, 2)
                self.state = 851
                self.match(XplorMRParser.Cv)
                self.state = 853
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 852
                    self.match(XplorMRParser.Equ_op)


                self.state = 855
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.Classification]:
                self.enterOuterAlt(localctx, 3)
                self.state = 856
                self.match(XplorMRParser.Classification)
                self.state = 858
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 857
                    self.match(XplorMRParser.Equ_op)


                self.state = 860
                self.match(XplorMRParser.Simple_name)
                pass
            elif token in [XplorMRParser.ForceConstant]:
                self.enterOuterAlt(localctx, 4)
                self.state = 861
                self.match(XplorMRParser.ForceConstant)
                self.state = 863
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 862
                    self.match(XplorMRParser.Equ_op)


                self.state = 865
                self.number_s()
                self.state = 866
                self.number_s()
                pass
            elif token in [XplorMRParser.Nrestraints]:
                self.enterOuterAlt(localctx, 5)
                self.state = 868
                self.match(XplorMRParser.Nrestraints)
                self.state = 870
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 869
                    self.match(XplorMRParser.Equ_op)


                self.state = 872
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.Partition]:
                self.enterOuterAlt(localctx, 6)
                self.state = 873
                self.match(XplorMRParser.Partition)
                self.state = 875
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 874
                    self.match(XplorMRParser.Equ_op)


                self.state = 877
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.Print]:
                self.enterOuterAlt(localctx, 7)
                self.state = 878
                self.match(XplorMRParser.Print)
                self.state = 879
                self.match(XplorMRParser.Threshold)
                self.state = 880
                self.number_s()
                pass
            elif token in [XplorMRParser.Reset]:
                self.enterOuterAlt(localctx, 8)
                self.state = 881
                self.match(XplorMRParser.Reset)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Vean_assignContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Assign(self):
            return self.getToken(XplorMRParser.Assign, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.SelectionContext,i)


        def number(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.NumberContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.NumberContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_vean_assign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVean_assign" ):
                listener.enterVean_assign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVean_assign" ):
                listener.exitVean_assign(self)




    def vean_assign(self):

        localctx = XplorMRParser.Vean_assignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_vean_assign)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 884
            self.match(XplorMRParser.Assign)
            self.state = 885
            self.selection()
            self.state = 886
            self.selection()
            self.state = 887
            self.selection()
            self.state = 888
            self.selection()
            self.state = 889
            self.number()
            self.state = 890
            self.number()
            self.state = 894
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 177)) & ~0x3f) == 0 and ((1 << (_la - 177)) & ((1 << (XplorMRParser.Integer - 177)) | (1 << (XplorMRParser.Real - 177)) | (1 << (XplorMRParser.Symbol_name - 177)))) != 0):
                self.state = 891
                self.number()
                self.state = 892
                self.number()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Tenso_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def tenso_assign(self):
            return self.getTypedRuleContext(XplorMRParser.Tenso_assignContext,0)


        def Classification(self):
            return self.getToken(XplorMRParser.Classification, 0)

        def Simple_name(self):
            return self.getToken(XplorMRParser.Simple_name, 0)

        def Equ_op(self):
            return self.getToken(XplorMRParser.Equ_op, 0)

        def Coefficients(self):
            return self.getToken(XplorMRParser.Coefficients, 0)

        def number_s(self):
            return self.getTypedRuleContext(XplorMRParser.Number_sContext,0)


        def Nrestraints(self):
            return self.getToken(XplorMRParser.Nrestraints, 0)

        def Integer(self):
            return self.getToken(XplorMRParser.Integer, 0)

        def Potential(self):
            return self.getToken(XplorMRParser.Potential, 0)

        def Potential_types(self):
            return self.getToken(XplorMRParser.Potential_types, 0)

        def Print(self):
            return self.getToken(XplorMRParser.Print, 0)

        def Threshold(self):
            return self.getToken(XplorMRParser.Threshold, 0)

        def Reset(self):
            return self.getToken(XplorMRParser.Reset, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_tenso_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTenso_statement" ):
                listener.enterTenso_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTenso_statement" ):
                listener.exitTenso_statement(self)




    def tenso_statement(self):

        localctx = XplorMRParser.Tenso_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_tenso_statement)
        self._la = 0 # Token type
        try:
            self.state = 915
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [XplorMRParser.Assign]:
                self.enterOuterAlt(localctx, 1)
                self.state = 896
                self.tenso_assign()
                pass
            elif token in [XplorMRParser.Classification]:
                self.enterOuterAlt(localctx, 2)
                self.state = 897
                self.match(XplorMRParser.Classification)
                self.state = 899
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 898
                    self.match(XplorMRParser.Equ_op)


                self.state = 901
                self.match(XplorMRParser.Simple_name)
                pass
            elif token in [XplorMRParser.Coefficients]:
                self.enterOuterAlt(localctx, 3)
                self.state = 902
                self.match(XplorMRParser.Coefficients)
                self.state = 903
                self.number_s()
                pass
            elif token in [XplorMRParser.Nrestraints]:
                self.enterOuterAlt(localctx, 4)
                self.state = 904
                self.match(XplorMRParser.Nrestraints)
                self.state = 906
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 905
                    self.match(XplorMRParser.Equ_op)


                self.state = 908
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.Potential]:
                self.enterOuterAlt(localctx, 5)
                self.state = 909
                self.match(XplorMRParser.Potential)
                self.state = 910
                self.match(XplorMRParser.Potential_types)
                pass
            elif token in [XplorMRParser.Print]:
                self.enterOuterAlt(localctx, 6)
                self.state = 911
                self.match(XplorMRParser.Print)
                self.state = 912
                self.match(XplorMRParser.Threshold)
                self.state = 913
                self.number_s()
                pass
            elif token in [XplorMRParser.Reset]:
                self.enterOuterAlt(localctx, 7)
                self.state = 914
                self.match(XplorMRParser.Reset)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Tenso_assignContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Assign(self):
            return self.getToken(XplorMRParser.Assign, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.SelectionContext,i)


        def number(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.NumberContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.NumberContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_tenso_assign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTenso_assign" ):
                listener.enterTenso_assign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTenso_assign" ):
                listener.exitTenso_assign(self)




    def tenso_assign(self):

        localctx = XplorMRParser.Tenso_assignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 76, self.RULE_tenso_assign)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 917
            self.match(XplorMRParser.Assign)
            self.state = 918
            self.selection()
            self.state = 919
            self.selection()
            self.state = 920
            self.number()
            self.state = 922
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 177)) & ~0x3f) == 0 and ((1 << (_la - 177)) & ((1 << (XplorMRParser.Integer - 177)) | (1 << (XplorMRParser.Real - 177)) | (1 << (XplorMRParser.Symbol_name - 177)))) != 0):
                self.state = 921
                self.number()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Anis_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def anis_assign(self):
            return self.getTypedRuleContext(XplorMRParser.Anis_assignContext,0)


        def Classification(self):
            return self.getToken(XplorMRParser.Classification, 0)

        def Simple_name(self):
            return self.getToken(XplorMRParser.Simple_name, 0)

        def Equ_op(self):
            return self.getToken(XplorMRParser.Equ_op, 0)

        def Coefficients(self):
            return self.getToken(XplorMRParser.Coefficients, 0)

        def number_s(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Number_sContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Number_sContext,i)


        def ForceConstant(self):
            return self.getToken(XplorMRParser.ForceConstant, 0)

        def Nrestraints(self):
            return self.getToken(XplorMRParser.Nrestraints, 0)

        def Integer(self):
            return self.getToken(XplorMRParser.Integer, 0)

        def Potential(self):
            return self.getToken(XplorMRParser.Potential, 0)

        def Potential_types(self):
            return self.getToken(XplorMRParser.Potential_types, 0)

        def Print(self):
            return self.getToken(XplorMRParser.Print, 0)

        def Threshold(self):
            return self.getToken(XplorMRParser.Threshold, 0)

        def Reset(self):
            return self.getToken(XplorMRParser.Reset, 0)

        def Type(self):
            return self.getToken(XplorMRParser.Type, 0)

        def Rdc_or_Diff_anis_types(self):
            return self.getToken(XplorMRParser.Rdc_or_Diff_anis_types, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_anis_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAnis_statement" ):
                listener.enterAnis_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAnis_statement" ):
                listener.exitAnis_statement(self)




    def anis_statement(self):

        localctx = XplorMRParser.Anis_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 78, self.RULE_anis_statement)
        self._la = 0 # Token type
        try:
            self.state = 954
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [XplorMRParser.Assign]:
                self.enterOuterAlt(localctx, 1)
                self.state = 924
                self.anis_assign()
                pass
            elif token in [XplorMRParser.Classification]:
                self.enterOuterAlt(localctx, 2)
                self.state = 925
                self.match(XplorMRParser.Classification)
                self.state = 927
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 926
                    self.match(XplorMRParser.Equ_op)


                self.state = 929
                self.match(XplorMRParser.Simple_name)
                pass
            elif token in [XplorMRParser.Coefficients]:
                self.enterOuterAlt(localctx, 3)
                self.state = 930
                self.match(XplorMRParser.Coefficients)
                self.state = 931
                self.number_s()
                self.state = 932
                self.number_s()
                self.state = 933
                self.number_s()
                self.state = 934
                self.number_s()
                pass
            elif token in [XplorMRParser.ForceConstant]:
                self.enterOuterAlt(localctx, 4)
                self.state = 936
                self.match(XplorMRParser.ForceConstant)
                self.state = 938
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 937
                    self.match(XplorMRParser.Equ_op)


                self.state = 940
                self.number_s()
                pass
            elif token in [XplorMRParser.Nrestraints]:
                self.enterOuterAlt(localctx, 5)
                self.state = 941
                self.match(XplorMRParser.Nrestraints)
                self.state = 943
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 942
                    self.match(XplorMRParser.Equ_op)


                self.state = 945
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.Potential]:
                self.enterOuterAlt(localctx, 6)
                self.state = 946
                self.match(XplorMRParser.Potential)
                self.state = 947
                self.match(XplorMRParser.Potential_types)
                pass
            elif token in [XplorMRParser.Print]:
                self.enterOuterAlt(localctx, 7)
                self.state = 948
                self.match(XplorMRParser.Print)
                self.state = 949
                self.match(XplorMRParser.Threshold)
                self.state = 950
                self.number_s()
                pass
            elif token in [XplorMRParser.Reset]:
                self.enterOuterAlt(localctx, 8)
                self.state = 951
                self.match(XplorMRParser.Reset)
                pass
            elif token in [XplorMRParser.Type]:
                self.enterOuterAlt(localctx, 9)
                self.state = 952
                self.match(XplorMRParser.Type)
                self.state = 953
                self.match(XplorMRParser.Rdc_or_Diff_anis_types)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Anis_assignContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Assign(self):
            return self.getToken(XplorMRParser.Assign, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.SelectionContext,i)


        def number(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.NumberContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.NumberContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_anis_assign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAnis_assign" ):
                listener.enterAnis_assign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAnis_assign" ):
                listener.exitAnis_assign(self)




    def anis_assign(self):

        localctx = XplorMRParser.Anis_assignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 80, self.RULE_anis_assign)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 956
            self.match(XplorMRParser.Assign)
            self.state = 957
            self.selection()
            self.state = 958
            self.selection()
            self.state = 959
            self.selection()
            self.state = 960
            self.selection()
            self.state = 961
            self.number()
            self.state = 963
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 177)) & ~0x3f) == 0 and ((1 << (_la - 177)) & ((1 << (XplorMRParser.Integer - 177)) | (1 << (XplorMRParser.Real - 177)) | (1 << (XplorMRParser.Symbol_name - 177)))) != 0):
                self.state = 962
                self.number()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Planar_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def vector_statement(self):
            return self.getTypedRuleContext(XplorMRParser.Vector_statementContext,0)


        def Group(self):
            return self.getToken(XplorMRParser.Group, 0)

        def End(self):
            return self.getToken(XplorMRParser.End, 0)

        def group_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Group_statementContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Group_statementContext,i)


        def Initialize(self):
            return self.getToken(XplorMRParser.Initialize, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_planar_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPlanar_statement" ):
                listener.enterPlanar_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPlanar_statement" ):
                listener.exitPlanar_statement(self)




    def planar_statement(self):

        localctx = XplorMRParser.Planar_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 82, self.RULE_planar_statement)
        self._la = 0 # Token type
        try:
            self.state = 975
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [XplorMRParser.Vector]:
                self.enterOuterAlt(localctx, 1)
                self.state = 965
                self.vector_statement()
                pass
            elif token in [XplorMRParser.Group]:
                self.enterOuterAlt(localctx, 2)
                self.state = 966
                self.match(XplorMRParser.Group)
                self.state = 970
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==XplorMRParser.Selection or _la==XplorMRParser.Weight:
                    self.state = 967
                    self.group_statement()
                    self.state = 972
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 973
                self.match(XplorMRParser.End)
                pass
            elif token in [XplorMRParser.Initialize]:
                self.enterOuterAlt(localctx, 3)
                self.state = 974
                self.match(XplorMRParser.Initialize)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Group_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Selection(self):
            return self.getToken(XplorMRParser.Selection, 0)

        def selection(self):
            return self.getTypedRuleContext(XplorMRParser.SelectionContext,0)


        def Equ_op(self):
            return self.getToken(XplorMRParser.Equ_op, 0)

        def Weight(self):
            return self.getToken(XplorMRParser.Weight, 0)

        def number_s(self):
            return self.getTypedRuleContext(XplorMRParser.Number_sContext,0)


        def getRuleIndex(self):
            return XplorMRParser.RULE_group_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGroup_statement" ):
                listener.enterGroup_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGroup_statement" ):
                listener.exitGroup_statement(self)




    def group_statement(self):

        localctx = XplorMRParser.Group_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 84, self.RULE_group_statement)
        self._la = 0 # Token type
        try:
            self.state = 987
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [XplorMRParser.Selection]:
                self.enterOuterAlt(localctx, 1)
                self.state = 977
                self.match(XplorMRParser.Selection)
                self.state = 979
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 978
                    self.match(XplorMRParser.Equ_op)


                self.state = 981
                self.selection()
                pass
            elif token in [XplorMRParser.Weight]:
                self.enterOuterAlt(localctx, 2)
                self.state = 982
                self.match(XplorMRParser.Weight)
                self.state = 984
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 983
                    self.match(XplorMRParser.Equ_op)


                self.state = 986
                self.number_s()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Harmonic_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def vector_statement(self):
            return self.getTypedRuleContext(XplorMRParser.Vector_statementContext,0)


        def Exponent(self):
            return self.getToken(XplorMRParser.Exponent, 0)

        def Integer(self):
            return self.getToken(XplorMRParser.Integer, 0)

        def Equ_op(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Equ_op)
            else:
                return self.getToken(XplorMRParser.Equ_op, i)

        def Normal(self):
            return self.getToken(XplorMRParser.Normal, 0)

        def L_paren(self):
            return self.getToken(XplorMRParser.L_paren, 0)

        def R_paren(self):
            return self.getToken(XplorMRParser.R_paren, 0)

        def number_s(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Number_sContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Number_sContext,i)


        def Tail(self):
            return self.getToken(XplorMRParser.Tail, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.SelectionContext,i)


        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Comma)
            else:
                return self.getToken(XplorMRParser.Comma, i)

        def Head(self):
            return self.getToken(XplorMRParser.Head, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_harmonic_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHarmonic_statement" ):
                listener.enterHarmonic_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHarmonic_statement" ):
                listener.exitHarmonic_statement(self)




    def harmonic_statement(self):

        localctx = XplorMRParser.Harmonic_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 86, self.RULE_harmonic_statement)
        self._la = 0 # Token type
        try:
            self.state = 1029
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [XplorMRParser.Vector]:
                self.enterOuterAlt(localctx, 1)
                self.state = 989
                self.vector_statement()
                pass
            elif token in [XplorMRParser.Exponent]:
                self.enterOuterAlt(localctx, 2)
                self.state = 990
                self.match(XplorMRParser.Exponent)
                self.state = 992
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 991
                    self.match(XplorMRParser.Equ_op)


                self.state = 994
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.Normal]:
                self.enterOuterAlt(localctx, 3)
                self.state = 995
                self.match(XplorMRParser.Normal)
                self.state = 997
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 996
                    self.match(XplorMRParser.Equ_op)


                self.state = 999
                self.match(XplorMRParser.L_paren)
                self.state = 1025
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [XplorMRParser.Integer, XplorMRParser.Real, XplorMRParser.Symbol_name]:
                    self.state = 1000
                    self.number_s()
                    self.state = 1002
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==XplorMRParser.Comma:
                        self.state = 1001
                        self.match(XplorMRParser.Comma)


                    self.state = 1004
                    self.number_s()
                    self.state = 1006
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==XplorMRParser.Comma:
                        self.state = 1005
                        self.match(XplorMRParser.Comma)


                    self.state = 1008
                    self.number_s()
                    pass
                elif token in [XplorMRParser.Tail]:
                    self.state = 1010
                    self.match(XplorMRParser.Tail)
                    self.state = 1012
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==XplorMRParser.Equ_op:
                        self.state = 1011
                        self.match(XplorMRParser.Equ_op)


                    self.state = 1014
                    self.selection()
                    self.state = 1016
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==XplorMRParser.Comma:
                        self.state = 1015
                        self.match(XplorMRParser.Comma)


                    self.state = 1023
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==XplorMRParser.Head:
                        self.state = 1018
                        self.match(XplorMRParser.Head)
                        self.state = 1020
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==XplorMRParser.Equ_op:
                            self.state = 1019
                            self.match(XplorMRParser.Equ_op)


                        self.state = 1022
                        self.selection()


                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 1027
                self.match(XplorMRParser.R_paren)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Harmonic_assignContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Assign(self):
            return self.getToken(XplorMRParser.Assign, 0)

        def selection(self):
            return self.getTypedRuleContext(XplorMRParser.SelectionContext,0)


        def number(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.NumberContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.NumberContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_harmonic_assign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHarmonic_assign" ):
                listener.enterHarmonic_assign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHarmonic_assign" ):
                listener.exitHarmonic_assign(self)




    def harmonic_assign(self):

        localctx = XplorMRParser.Harmonic_assignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 88, self.RULE_harmonic_assign)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1031
            self.match(XplorMRParser.Assign)
            self.state = 1032
            self.selection()
            self.state = 1033
            self.number()
            self.state = 1034
            self.number()
            self.state = 1035
            self.number()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Antidistance_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def xadc_assign(self):
            return self.getTypedRuleContext(XplorMRParser.Xadc_assignContext,0)


        def xadc_assign_loop(self):
            return self.getTypedRuleContext(XplorMRParser.Xadc_assign_loopContext,0)


        def Classification(self):
            return self.getToken(XplorMRParser.Classification, 0)

        def Simple_name(self):
            return self.getToken(XplorMRParser.Simple_name, 0)

        def Equ_op(self):
            return self.getToken(XplorMRParser.Equ_op, 0)

        def Expectation(self):
            return self.getToken(XplorMRParser.Expectation, 0)

        def Integer(self):
            return self.getToken(XplorMRParser.Integer, 0)

        def number_s(self):
            return self.getTypedRuleContext(XplorMRParser.Number_sContext,0)


        def ForceConstant(self):
            return self.getToken(XplorMRParser.ForceConstant, 0)

        def Nrestraints(self):
            return self.getToken(XplorMRParser.Nrestraints, 0)

        def Print(self):
            return self.getToken(XplorMRParser.Print, 0)

        def Threshold(self):
            return self.getToken(XplorMRParser.Threshold, 0)

        def All(self):
            return self.getToken(XplorMRParser.All, 0)

        def Reset(self):
            return self.getToken(XplorMRParser.Reset, 0)

        def Size(self):
            return self.getToken(XplorMRParser.Size, 0)

        def Zero(self):
            return self.getToken(XplorMRParser.Zero, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_antidistance_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAntidistance_statement" ):
                listener.enterAntidistance_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAntidistance_statement" ):
                listener.exitAntidistance_statement(self)




    def antidistance_statement(self):

        localctx = XplorMRParser.Antidistance_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 90, self.RULE_antidistance_statement)
        self._la = 0 # Token type
        try:
            self.state = 1074
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [XplorMRParser.Assign]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1037
                self.xadc_assign()
                pass
            elif token in [XplorMRParser.For]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1038
                self.xadc_assign_loop()
                pass
            elif token in [XplorMRParser.Classification]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1039
                self.match(XplorMRParser.Classification)
                self.state = 1041
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 1040
                    self.match(XplorMRParser.Equ_op)


                self.state = 1043
                self.match(XplorMRParser.Simple_name)
                pass
            elif token in [XplorMRParser.Expectation]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1044
                self.match(XplorMRParser.Expectation)
                self.state = 1045
                self.match(XplorMRParser.Integer)
                self.state = 1046
                self.number_s()
                pass
            elif token in [XplorMRParser.ForceConstant]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1047
                self.match(XplorMRParser.ForceConstant)
                self.state = 1049
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 1048
                    self.match(XplorMRParser.Equ_op)


                self.state = 1051
                self.number_s()
                pass
            elif token in [XplorMRParser.Nrestraints]:
                self.enterOuterAlt(localctx, 6)
                self.state = 1052
                self.match(XplorMRParser.Nrestraints)
                self.state = 1054
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 1053
                    self.match(XplorMRParser.Equ_op)


                self.state = 1056
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.Print]:
                self.enterOuterAlt(localctx, 7)
                self.state = 1057
                self.match(XplorMRParser.Print)
                self.state = 1058
                self.match(XplorMRParser.Threshold)
                self.state = 1059
                self.number_s()
                self.state = 1066
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [XplorMRParser.All]:
                    self.state = 1060
                    self.match(XplorMRParser.All)
                    pass
                elif token in [XplorMRParser.Classification]:
                    self.state = 1061
                    self.match(XplorMRParser.Classification)
                    self.state = 1063
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==XplorMRParser.Equ_op:
                        self.state = 1062
                        self.match(XplorMRParser.Equ_op)


                    self.state = 1065
                    self.match(XplorMRParser.Simple_name)
                    pass
                else:
                    raise NoViableAltException(self)

                pass
            elif token in [XplorMRParser.Reset]:
                self.enterOuterAlt(localctx, 8)
                self.state = 1068
                self.match(XplorMRParser.Reset)
                pass
            elif token in [XplorMRParser.Size]:
                self.enterOuterAlt(localctx, 9)
                self.state = 1069
                self.match(XplorMRParser.Size)
                self.state = 1070
                self.number_s()
                self.state = 1071
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.Zero]:
                self.enterOuterAlt(localctx, 10)
                self.state = 1073
                self.match(XplorMRParser.Zero)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Xadc_assignContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Assign(self):
            return self.getToken(XplorMRParser.Assign, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.SelectionContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_xadc_assign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterXadc_assign" ):
                listener.enterXadc_assign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitXadc_assign" ):
                listener.exitXadc_assign(self)




    def xadc_assign(self):

        localctx = XplorMRParser.Xadc_assignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 92, self.RULE_xadc_assign)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1076
            self.match(XplorMRParser.Assign)
            self.state = 1077
            self.selection()
            self.state = 1078
            self.selection()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Coupling_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def coup_assign(self):
            return self.getTypedRuleContext(XplorMRParser.Coup_assignContext,0)


        def coup_assign_loop(self):
            return self.getTypedRuleContext(XplorMRParser.Coup_assign_loopContext,0)


        def Classification(self):
            return self.getToken(XplorMRParser.Classification, 0)

        def Simple_name(self):
            return self.getToken(XplorMRParser.Simple_name, 0)

        def Equ_op(self):
            return self.getToken(XplorMRParser.Equ_op, 0)

        def Coefficients(self):
            return self.getToken(XplorMRParser.Coefficients, 0)

        def number_s(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Number_sContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Number_sContext,i)


        def Cv(self):
            return self.getToken(XplorMRParser.Cv, 0)

        def Integer(self):
            return self.getToken(XplorMRParser.Integer, 0)

        def DegEnergy(self):
            return self.getToken(XplorMRParser.DegEnergy, 0)

        def ForceConstant(self):
            return self.getToken(XplorMRParser.ForceConstant, 0)

        def Nrestraints(self):
            return self.getToken(XplorMRParser.Nrestraints, 0)

        def Partition(self):
            return self.getToken(XplorMRParser.Partition, 0)

        def Potential(self):
            return self.getToken(XplorMRParser.Potential, 0)

        def Potential_types(self):
            return self.getToken(XplorMRParser.Potential_types, 0)

        def Print(self):
            return self.getToken(XplorMRParser.Print, 0)

        def Threshold(self):
            return self.getToken(XplorMRParser.Threshold, 0)

        def All(self):
            return self.getToken(XplorMRParser.All, 0)

        def Reset(self):
            return self.getToken(XplorMRParser.Reset, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_coupling_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCoupling_statement" ):
                listener.enterCoupling_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCoupling_statement" ):
                listener.exitCoupling_statement(self)




    def coupling_statement(self):

        localctx = XplorMRParser.Coupling_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 94, self.RULE_coupling_statement)
        self._la = 0 # Token type
        try:
            self.state = 1129
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [XplorMRParser.Assign]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1080
                self.coup_assign()
                pass
            elif token in [XplorMRParser.For]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1081
                self.coup_assign_loop()
                pass
            elif token in [XplorMRParser.Classification]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1082
                self.match(XplorMRParser.Classification)
                self.state = 1084
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 1083
                    self.match(XplorMRParser.Equ_op)


                self.state = 1086
                self.match(XplorMRParser.Simple_name)
                pass
            elif token in [XplorMRParser.Coefficients]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1087
                self.match(XplorMRParser.Coefficients)
                self.state = 1088
                self.number_s()
                self.state = 1089
                self.number_s()
                self.state = 1090
                self.number_s()
                self.state = 1091
                self.number_s()
                pass
            elif token in [XplorMRParser.Cv]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1093
                self.match(XplorMRParser.Cv)
                self.state = 1095
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 1094
                    self.match(XplorMRParser.Equ_op)


                self.state = 1097
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.DegEnergy]:
                self.enterOuterAlt(localctx, 6)
                self.state = 1098
                self.match(XplorMRParser.DegEnergy)
                self.state = 1099
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.ForceConstant]:
                self.enterOuterAlt(localctx, 7)
                self.state = 1100
                self.match(XplorMRParser.ForceConstant)
                self.state = 1101
                self.number_s()
                self.state = 1103
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 177)) & ~0x3f) == 0 and ((1 << (_la - 177)) & ((1 << (XplorMRParser.Integer - 177)) | (1 << (XplorMRParser.Real - 177)) | (1 << (XplorMRParser.Symbol_name - 177)))) != 0):
                    self.state = 1102
                    self.number_s()


                pass
            elif token in [XplorMRParser.Nrestraints]:
                self.enterOuterAlt(localctx, 8)
                self.state = 1105
                self.match(XplorMRParser.Nrestraints)
                self.state = 1107
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 1106
                    self.match(XplorMRParser.Equ_op)


                self.state = 1109
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.Partition]:
                self.enterOuterAlt(localctx, 9)
                self.state = 1110
                self.match(XplorMRParser.Partition)
                self.state = 1112
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 1111
                    self.match(XplorMRParser.Equ_op)


                self.state = 1114
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.Potential]:
                self.enterOuterAlt(localctx, 10)
                self.state = 1115
                self.match(XplorMRParser.Potential)
                self.state = 1116
                self.match(XplorMRParser.Potential_types)
                pass
            elif token in [XplorMRParser.Print]:
                self.enterOuterAlt(localctx, 11)
                self.state = 1117
                self.match(XplorMRParser.Print)
                self.state = 1118
                self.match(XplorMRParser.Threshold)
                self.state = 1119
                self.number_s()
                self.state = 1126
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [XplorMRParser.All]:
                    self.state = 1120
                    self.match(XplorMRParser.All)
                    pass
                elif token in [XplorMRParser.Classification]:
                    self.state = 1121
                    self.match(XplorMRParser.Classification)
                    self.state = 1123
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==XplorMRParser.Equ_op:
                        self.state = 1122
                        self.match(XplorMRParser.Equ_op)


                    self.state = 1125
                    self.match(XplorMRParser.Simple_name)
                    pass
                else:
                    raise NoViableAltException(self)

                pass
            elif token in [XplorMRParser.Reset]:
                self.enterOuterAlt(localctx, 12)
                self.state = 1128
                self.match(XplorMRParser.Reset)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Coup_assignContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Assign(self):
            return self.getToken(XplorMRParser.Assign, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.SelectionContext,i)


        def number(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.NumberContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.NumberContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_coup_assign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCoup_assign" ):
                listener.enterCoup_assign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCoup_assign" ):
                listener.exitCoup_assign(self)




    def coup_assign(self):

        localctx = XplorMRParser.Coup_assignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 96, self.RULE_coup_assign)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1131
            self.match(XplorMRParser.Assign)
            self.state = 1132
            self.selection()
            self.state = 1133
            self.selection()
            self.state = 1134
            self.selection()
            self.state = 1135
            self.selection()
            self.state = 1141
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==XplorMRParser.L_paren:
                self.state = 1136
                self.selection()
                self.state = 1137
                self.selection()
                self.state = 1138
                self.selection()
                self.state = 1139
                self.selection()


            self.state = 1143
            self.number()
            self.state = 1144
            self.number()
            self.state = 1148
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 177)) & ~0x3f) == 0 and ((1 << (_la - 177)) & ((1 << (XplorMRParser.Integer - 177)) | (1 << (XplorMRParser.Real - 177)) | (1 << (XplorMRParser.Symbol_name - 177)))) != 0):
                self.state = 1145
                self.number()
                self.state = 1146
                self.number()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Carbon_shift_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def carbon_shift_assign(self):
            return self.getTypedRuleContext(XplorMRParser.Carbon_shift_assignContext,0)


        def Classification(self):
            return self.getToken(XplorMRParser.Classification, 0)

        def Simple_name(self):
            return self.getToken(XplorMRParser.Simple_name, 0)

        def Equ_op(self):
            return self.getToken(XplorMRParser.Equ_op, 0)

        def Expectation(self):
            return self.getToken(XplorMRParser.Expectation, 0)

        def Integer(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Integer)
            else:
                return self.getToken(XplorMRParser.Integer, i)

        def number_s(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Number_sContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Number_sContext,i)


        def ForceConstant(self):
            return self.getToken(XplorMRParser.ForceConstant, 0)

        def Nrestraints(self):
            return self.getToken(XplorMRParser.Nrestraints, 0)

        def PhiStep(self):
            return self.getToken(XplorMRParser.PhiStep, 0)

        def PsiStep(self):
            return self.getToken(XplorMRParser.PsiStep, 0)

        def Potential(self):
            return self.getToken(XplorMRParser.Potential, 0)

        def Potential_types(self):
            return self.getToken(XplorMRParser.Potential_types, 0)

        def Print(self):
            return self.getToken(XplorMRParser.Print, 0)

        def Threshold(self):
            return self.getToken(XplorMRParser.Threshold, 0)

        def carbon_shift_rcoil(self):
            return self.getTypedRuleContext(XplorMRParser.Carbon_shift_rcoilContext,0)


        def Reset(self):
            return self.getToken(XplorMRParser.Reset, 0)

        def Zero(self):
            return self.getToken(XplorMRParser.Zero, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_carbon_shift_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCarbon_shift_statement" ):
                listener.enterCarbon_shift_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCarbon_shift_statement" ):
                listener.exitCarbon_shift_statement(self)




    def carbon_shift_statement(self):

        localctx = XplorMRParser.Carbon_shift_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 98, self.RULE_carbon_shift_statement)
        self._la = 0 # Token type
        try:
            self.state = 1185
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [XplorMRParser.Assign]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1150
                self.carbon_shift_assign()
                pass
            elif token in [XplorMRParser.Classification]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1151
                self.match(XplorMRParser.Classification)
                self.state = 1153
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 1152
                    self.match(XplorMRParser.Equ_op)


                self.state = 1155
                self.match(XplorMRParser.Simple_name)
                pass
            elif token in [XplorMRParser.Expectation]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1156
                self.match(XplorMRParser.Expectation)
                self.state = 1157
                self.match(XplorMRParser.Integer)
                self.state = 1158
                self.match(XplorMRParser.Integer)
                self.state = 1159
                self.number_s()
                self.state = 1160
                self.number_s()
                self.state = 1161
                self.number_s()
                pass
            elif token in [XplorMRParser.ForceConstant]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1163
                self.match(XplorMRParser.ForceConstant)
                self.state = 1165
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 1164
                    self.match(XplorMRParser.Equ_op)


                self.state = 1167
                self.number_s()
                pass
            elif token in [XplorMRParser.Nrestraints]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1168
                self.match(XplorMRParser.Nrestraints)
                self.state = 1170
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 1169
                    self.match(XplorMRParser.Equ_op)


                self.state = 1172
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.PhiStep]:
                self.enterOuterAlt(localctx, 6)
                self.state = 1173
                self.match(XplorMRParser.PhiStep)
                self.state = 1174
                self.number_s()
                pass
            elif token in [XplorMRParser.PsiStep]:
                self.enterOuterAlt(localctx, 7)
                self.state = 1175
                self.match(XplorMRParser.PsiStep)
                self.state = 1176
                self.number_s()
                pass
            elif token in [XplorMRParser.Potential]:
                self.enterOuterAlt(localctx, 8)
                self.state = 1177
                self.match(XplorMRParser.Potential)
                self.state = 1178
                self.match(XplorMRParser.Potential_types)
                pass
            elif token in [XplorMRParser.Print]:
                self.enterOuterAlt(localctx, 9)
                self.state = 1179
                self.match(XplorMRParser.Print)
                self.state = 1180
                self.match(XplorMRParser.Threshold)
                self.state = 1181
                self.number_s()
                pass
            elif token in [XplorMRParser.Rcoil]:
                self.enterOuterAlt(localctx, 10)
                self.state = 1182
                self.carbon_shift_rcoil()
                pass
            elif token in [XplorMRParser.Reset]:
                self.enterOuterAlt(localctx, 11)
                self.state = 1183
                self.match(XplorMRParser.Reset)
                pass
            elif token in [XplorMRParser.Zero]:
                self.enterOuterAlt(localctx, 12)
                self.state = 1184
                self.match(XplorMRParser.Zero)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Carbon_shift_assignContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Assign(self):
            return self.getToken(XplorMRParser.Assign, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.SelectionContext,i)


        def number(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.NumberContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.NumberContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_carbon_shift_assign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCarbon_shift_assign" ):
                listener.enterCarbon_shift_assign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCarbon_shift_assign" ):
                listener.exitCarbon_shift_assign(self)




    def carbon_shift_assign(self):

        localctx = XplorMRParser.Carbon_shift_assignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 100, self.RULE_carbon_shift_assign)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1187
            self.match(XplorMRParser.Assign)
            self.state = 1188
            self.selection()
            self.state = 1189
            self.selection()
            self.state = 1190
            self.selection()
            self.state = 1191
            self.selection()
            self.state = 1192
            self.selection()
            self.state = 1193
            self.number()
            self.state = 1194
            self.number()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Carbon_shift_rcoilContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Rcoil(self):
            return self.getToken(XplorMRParser.Rcoil, 0)

        def selection(self):
            return self.getTypedRuleContext(XplorMRParser.SelectionContext,0)


        def number(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.NumberContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.NumberContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_carbon_shift_rcoil

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCarbon_shift_rcoil" ):
                listener.enterCarbon_shift_rcoil(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCarbon_shift_rcoil" ):
                listener.exitCarbon_shift_rcoil(self)




    def carbon_shift_rcoil(self):

        localctx = XplorMRParser.Carbon_shift_rcoilContext(self, self._ctx, self.state)
        self.enterRule(localctx, 102, self.RULE_carbon_shift_rcoil)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1196
            self.match(XplorMRParser.Rcoil)
            self.state = 1197
            self.selection()
            self.state = 1198
            self.number()
            self.state = 1199
            self.number()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Proton_shift_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def observed(self):
            return self.getTypedRuleContext(XplorMRParser.ObservedContext,0)


        def proton_shift_rcoil(self):
            return self.getTypedRuleContext(XplorMRParser.Proton_shift_rcoilContext,0)


        def proton_shift_anisotropy(self):
            return self.getTypedRuleContext(XplorMRParser.Proton_shift_anisotropyContext,0)


        def proton_shift_amides(self):
            return self.getTypedRuleContext(XplorMRParser.Proton_shift_amidesContext,0)


        def proton_shift_carbons(self):
            return self.getTypedRuleContext(XplorMRParser.Proton_shift_carbonsContext,0)


        def proton_shift_nitrogens(self):
            return self.getTypedRuleContext(XplorMRParser.Proton_shift_nitrogensContext,0)


        def proton_shift_oxygens(self):
            return self.getTypedRuleContext(XplorMRParser.Proton_shift_oxygensContext,0)


        def proton_shift_ring_atoms(self):
            return self.getTypedRuleContext(XplorMRParser.Proton_shift_ring_atomsContext,0)


        def proton_shift_alphas_and_amides(self):
            return self.getTypedRuleContext(XplorMRParser.Proton_shift_alphas_and_amidesContext,0)


        def Classification(self):
            return self.getToken(XplorMRParser.Classification, 0)

        def Simple_name(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Simple_name)
            else:
                return self.getToken(XplorMRParser.Simple_name, i)

        def Equ_op(self):
            return self.getToken(XplorMRParser.Equ_op, 0)

        def Error(self):
            return self.getToken(XplorMRParser.Error, 0)

        def number_s(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Number_sContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Number_sContext,i)


        def DegEnergy(self):
            return self.getToken(XplorMRParser.DegEnergy, 0)

        def Integer(self):
            return self.getToken(XplorMRParser.Integer, 0)

        def ForceConstant(self):
            return self.getToken(XplorMRParser.ForceConstant, 0)

        def Potential(self):
            return self.getToken(XplorMRParser.Potential, 0)

        def Potential_types(self):
            return self.getToken(XplorMRParser.Potential_types, 0)

        def Print(self):
            return self.getToken(XplorMRParser.Print, 0)

        def Threshold(self):
            return self.getToken(XplorMRParser.Threshold, 0)

        def All(self):
            return self.getToken(XplorMRParser.All, 0)

        def Reset(self):
            return self.getToken(XplorMRParser.Reset, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_proton_shift_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProton_shift_statement" ):
                listener.enterProton_shift_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProton_shift_statement" ):
                listener.exitProton_shift_statement(self)




    def proton_shift_statement(self):

        localctx = XplorMRParser.Proton_shift_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 104, self.RULE_proton_shift_statement)
        self._la = 0 # Token type
        try:
            self.state = 1240
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [XplorMRParser.Observed]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1201
                self.observed()
                pass
            elif token in [XplorMRParser.Rcoil]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1202
                self.proton_shift_rcoil()
                pass
            elif token in [XplorMRParser.Anisotropy]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1203
                self.proton_shift_anisotropy()
                pass
            elif token in [XplorMRParser.Amides]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1204
                self.proton_shift_amides()
                pass
            elif token in [XplorMRParser.Carbon]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1205
                self.proton_shift_carbons()
                pass
            elif token in [XplorMRParser.Nitrogens]:
                self.enterOuterAlt(localctx, 6)
                self.state = 1206
                self.proton_shift_nitrogens()
                pass
            elif token in [XplorMRParser.Oxygens]:
                self.enterOuterAlt(localctx, 7)
                self.state = 1207
                self.proton_shift_oxygens()
                pass
            elif token in [XplorMRParser.RingAtoms]:
                self.enterOuterAlt(localctx, 8)
                self.state = 1208
                self.proton_shift_ring_atoms()
                pass
            elif token in [XplorMRParser.AlphasAndAmides]:
                self.enterOuterAlt(localctx, 9)
                self.state = 1209
                self.proton_shift_alphas_and_amides()
                pass
            elif token in [XplorMRParser.Classification]:
                self.enterOuterAlt(localctx, 10)
                self.state = 1210
                self.match(XplorMRParser.Classification)
                self.state = 1212
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 1211
                    self.match(XplorMRParser.Equ_op)


                self.state = 1214
                self.match(XplorMRParser.Simple_name)
                pass
            elif token in [XplorMRParser.Error]:
                self.enterOuterAlt(localctx, 11)
                self.state = 1215
                self.match(XplorMRParser.Error)
                self.state = 1216
                self.number_s()
                pass
            elif token in [XplorMRParser.DegEnergy]:
                self.enterOuterAlt(localctx, 12)
                self.state = 1217
                self.match(XplorMRParser.DegEnergy)
                self.state = 1218
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.ForceConstant]:
                self.enterOuterAlt(localctx, 13)
                self.state = 1219
                self.match(XplorMRParser.ForceConstant)
                self.state = 1220
                self.number_s()
                self.state = 1222
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 177)) & ~0x3f) == 0 and ((1 << (_la - 177)) & ((1 << (XplorMRParser.Integer - 177)) | (1 << (XplorMRParser.Real - 177)) | (1 << (XplorMRParser.Symbol_name - 177)))) != 0):
                    self.state = 1221
                    self.number_s()


                pass
            elif token in [XplorMRParser.Potential]:
                self.enterOuterAlt(localctx, 14)
                self.state = 1224
                self.match(XplorMRParser.Potential)
                self.state = 1225
                self.match(XplorMRParser.Potential_types)
                pass
            elif token in [XplorMRParser.Print]:
                self.enterOuterAlt(localctx, 15)
                self.state = 1226
                self.match(XplorMRParser.Print)
                self.state = 1227
                self.match(XplorMRParser.Threshold)
                self.state = 1228
                self.number_s()
                self.state = 1235
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [XplorMRParser.All]:
                    self.state = 1229
                    self.match(XplorMRParser.All)
                    pass
                elif token in [XplorMRParser.Classification]:
                    self.state = 1230
                    self.match(XplorMRParser.Classification)
                    self.state = 1232
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==XplorMRParser.Equ_op:
                        self.state = 1231
                        self.match(XplorMRParser.Equ_op)


                    self.state = 1234
                    self.match(XplorMRParser.Simple_name)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 1237
                self.match(XplorMRParser.Simple_name)
                pass
            elif token in [XplorMRParser.Reset]:
                self.enterOuterAlt(localctx, 16)
                self.state = 1239
                self.match(XplorMRParser.Reset)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ObservedContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Observed(self):
            return self.getToken(XplorMRParser.Observed, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.SelectionContext,i)


        def number(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.NumberContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.NumberContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_observed

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterObserved" ):
                listener.enterObserved(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitObserved" ):
                listener.exitObserved(self)




    def observed(self):

        localctx = XplorMRParser.ObservedContext(self, self._ctx, self.state)
        self.enterRule(localctx, 106, self.RULE_observed)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1242
            self.match(XplorMRParser.Observed)
            self.state = 1243
            self.selection()
            self.state = 1245
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==XplorMRParser.L_paren:
                self.state = 1244
                self.selection()


            self.state = 1247
            self.number()
            self.state = 1249
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 177)) & ~0x3f) == 0 and ((1 << (_la - 177)) & ((1 << (XplorMRParser.Integer - 177)) | (1 << (XplorMRParser.Real - 177)) | (1 << (XplorMRParser.Symbol_name - 177)))) != 0):
                self.state = 1248
                self.number()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Proton_shift_rcoilContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Rcoil(self):
            return self.getToken(XplorMRParser.Rcoil, 0)

        def selection(self):
            return self.getTypedRuleContext(XplorMRParser.SelectionContext,0)


        def number(self):
            return self.getTypedRuleContext(XplorMRParser.NumberContext,0)


        def getRuleIndex(self):
            return XplorMRParser.RULE_proton_shift_rcoil

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProton_shift_rcoil" ):
                listener.enterProton_shift_rcoil(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProton_shift_rcoil" ):
                listener.exitProton_shift_rcoil(self)




    def proton_shift_rcoil(self):

        localctx = XplorMRParser.Proton_shift_rcoilContext(self, self._ctx, self.state)
        self.enterRule(localctx, 108, self.RULE_proton_shift_rcoil)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1251
            self.match(XplorMRParser.Rcoil)
            self.state = 1252
            self.selection()
            self.state = 1253
            self.number()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Proton_shift_anisotropyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Anisotropy(self):
            return self.getToken(XplorMRParser.Anisotropy, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.SelectionContext,i)


        def Simple_name(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Simple_name)
            else:
                return self.getToken(XplorMRParser.Simple_name, i)

        def Logical(self):
            return self.getToken(XplorMRParser.Logical, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_proton_shift_anisotropy

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProton_shift_anisotropy" ):
                listener.enterProton_shift_anisotropy(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProton_shift_anisotropy" ):
                listener.exitProton_shift_anisotropy(self)




    def proton_shift_anisotropy(self):

        localctx = XplorMRParser.Proton_shift_anisotropyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 110, self.RULE_proton_shift_anisotropy)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1255
            self.match(XplorMRParser.Anisotropy)
            self.state = 1256
            self.selection()
            self.state = 1257
            self.selection()
            self.state = 1258
            self.selection()
            self.state = 1259
            self.match(XplorMRParser.Simple_name)
            self.state = 1261
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==XplorMRParser.Logical:
                self.state = 1260
                self.match(XplorMRParser.Logical)


            self.state = 1263
            self.match(XplorMRParser.Simple_name)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Proton_shift_amidesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Amides(self):
            return self.getToken(XplorMRParser.Amides, 0)

        def selection(self):
            return self.getTypedRuleContext(XplorMRParser.SelectionContext,0)


        def getRuleIndex(self):
            return XplorMRParser.RULE_proton_shift_amides

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProton_shift_amides" ):
                listener.enterProton_shift_amides(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProton_shift_amides" ):
                listener.exitProton_shift_amides(self)




    def proton_shift_amides(self):

        localctx = XplorMRParser.Proton_shift_amidesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 112, self.RULE_proton_shift_amides)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1265
            self.match(XplorMRParser.Amides)
            self.state = 1266
            self.selection()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Proton_shift_carbonsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Carbon(self):
            return self.getToken(XplorMRParser.Carbon, 0)

        def selection(self):
            return self.getTypedRuleContext(XplorMRParser.SelectionContext,0)


        def getRuleIndex(self):
            return XplorMRParser.RULE_proton_shift_carbons

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProton_shift_carbons" ):
                listener.enterProton_shift_carbons(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProton_shift_carbons" ):
                listener.exitProton_shift_carbons(self)




    def proton_shift_carbons(self):

        localctx = XplorMRParser.Proton_shift_carbonsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 114, self.RULE_proton_shift_carbons)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1268
            self.match(XplorMRParser.Carbon)
            self.state = 1269
            self.selection()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Proton_shift_nitrogensContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Nitrogens(self):
            return self.getToken(XplorMRParser.Nitrogens, 0)

        def selection(self):
            return self.getTypedRuleContext(XplorMRParser.SelectionContext,0)


        def getRuleIndex(self):
            return XplorMRParser.RULE_proton_shift_nitrogens

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProton_shift_nitrogens" ):
                listener.enterProton_shift_nitrogens(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProton_shift_nitrogens" ):
                listener.exitProton_shift_nitrogens(self)




    def proton_shift_nitrogens(self):

        localctx = XplorMRParser.Proton_shift_nitrogensContext(self, self._ctx, self.state)
        self.enterRule(localctx, 116, self.RULE_proton_shift_nitrogens)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1271
            self.match(XplorMRParser.Nitrogens)
            self.state = 1272
            self.selection()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Proton_shift_oxygensContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Oxygens(self):
            return self.getToken(XplorMRParser.Oxygens, 0)

        def selection(self):
            return self.getTypedRuleContext(XplorMRParser.SelectionContext,0)


        def getRuleIndex(self):
            return XplorMRParser.RULE_proton_shift_oxygens

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProton_shift_oxygens" ):
                listener.enterProton_shift_oxygens(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProton_shift_oxygens" ):
                listener.exitProton_shift_oxygens(self)




    def proton_shift_oxygens(self):

        localctx = XplorMRParser.Proton_shift_oxygensContext(self, self._ctx, self.state)
        self.enterRule(localctx, 118, self.RULE_proton_shift_oxygens)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1274
            self.match(XplorMRParser.Oxygens)
            self.state = 1275
            self.selection()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Proton_shift_ring_atomsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RingAtoms(self):
            return self.getToken(XplorMRParser.RingAtoms, 0)

        def Simple_name(self):
            return self.getToken(XplorMRParser.Simple_name, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.SelectionContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_proton_shift_ring_atoms

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProton_shift_ring_atoms" ):
                listener.enterProton_shift_ring_atoms(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProton_shift_ring_atoms" ):
                listener.exitProton_shift_ring_atoms(self)




    def proton_shift_ring_atoms(self):

        localctx = XplorMRParser.Proton_shift_ring_atomsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 120, self.RULE_proton_shift_ring_atoms)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1277
            self.match(XplorMRParser.RingAtoms)
            self.state = 1278
            self.match(XplorMRParser.Simple_name)
            self.state = 1279
            self.selection()
            self.state = 1280
            self.selection()
            self.state = 1281
            self.selection()
            self.state = 1282
            self.selection()
            self.state = 1283
            self.selection()
            self.state = 1285
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==XplorMRParser.L_paren:
                self.state = 1284
                self.selection()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Proton_shift_alphas_and_amidesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AlphasAndAmides(self):
            return self.getToken(XplorMRParser.AlphasAndAmides, 0)

        def selection(self):
            return self.getTypedRuleContext(XplorMRParser.SelectionContext,0)


        def getRuleIndex(self):
            return XplorMRParser.RULE_proton_shift_alphas_and_amides

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProton_shift_alphas_and_amides" ):
                listener.enterProton_shift_alphas_and_amides(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProton_shift_alphas_and_amides" ):
                listener.exitProton_shift_alphas_and_amides(self)




    def proton_shift_alphas_and_amides(self):

        localctx = XplorMRParser.Proton_shift_alphas_and_amidesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 122, self.RULE_proton_shift_alphas_and_amides)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1287
            self.match(XplorMRParser.AlphasAndAmides)
            self.state = 1288
            self.selection()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Ramachandran_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def rama_assign(self):
            return self.getTypedRuleContext(XplorMRParser.Rama_assignContext,0)


        def Classification(self):
            return self.getToken(XplorMRParser.Classification, 0)

        def Simple_name(self):
            return self.getToken(XplorMRParser.Simple_name, 0)

        def Equ_op(self):
            return self.getToken(XplorMRParser.Equ_op, 0)

        def Cutoff(self):
            return self.getToken(XplorMRParser.Cutoff, 0)

        def number_s(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Number_sContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Number_sContext,i)


        def ForceConstant(self):
            return self.getToken(XplorMRParser.ForceConstant, 0)

        def Gaussian(self):
            return self.getToken(XplorMRParser.Gaussian, 0)

        def Nrestraints(self):
            return self.getToken(XplorMRParser.Nrestraints, 0)

        def Integer(self):
            return self.getToken(XplorMRParser.Integer, 0)

        def Phase(self):
            return self.getToken(XplorMRParser.Phase, 0)

        def Print(self):
            return self.getToken(XplorMRParser.Print, 0)

        def Threshold(self):
            return self.getToken(XplorMRParser.Threshold, 0)

        def All(self):
            return self.getToken(XplorMRParser.All, 0)

        def Quartic(self):
            return self.getToken(XplorMRParser.Quartic, 0)

        def Reset(self):
            return self.getToken(XplorMRParser.Reset, 0)

        def Scale(self):
            return self.getToken(XplorMRParser.Scale, 0)

        def Shape(self):
            return self.getToken(XplorMRParser.Shape, 0)

        def Gauss_or_Quart(self):
            return self.getToken(XplorMRParser.Gauss_or_Quart, 0)

        def Size(self):
            return self.getToken(XplorMRParser.Size, 0)

        def Dimensions(self):
            return self.getToken(XplorMRParser.Dimensions, 0)

        def Sort(self):
            return self.getToken(XplorMRParser.Sort, 0)

        def Zero(self):
            return self.getToken(XplorMRParser.Zero, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_ramachandran_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRamachandran_statement" ):
                listener.enterRamachandran_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRamachandran_statement" ):
                listener.exitRamachandran_statement(self)




    def ramachandran_statement(self):

        localctx = XplorMRParser.Ramachandran_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 124, self.RULE_ramachandran_statement)
        self._la = 0 # Token type
        try:
            self.state = 1407
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [XplorMRParser.Assign]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1290
                self.rama_assign()
                pass
            elif token in [XplorMRParser.Classification]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1291
                self.match(XplorMRParser.Classification)
                self.state = 1293
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 1292
                    self.match(XplorMRParser.Equ_op)


                self.state = 1295
                self.match(XplorMRParser.Simple_name)
                pass
            elif token in [XplorMRParser.Cutoff]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1296
                self.match(XplorMRParser.Cutoff)
                self.state = 1297
                self.number_s()
                pass
            elif token in [XplorMRParser.ForceConstant]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1298
                self.match(XplorMRParser.ForceConstant)
                self.state = 1300
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 1299
                    self.match(XplorMRParser.Equ_op)


                self.state = 1302
                self.number_s()
                pass
            elif token in [XplorMRParser.Gaussian]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1303
                self.match(XplorMRParser.Gaussian)
                self.state = 1304
                self.number_s()
                self.state = 1305
                self.number_s()
                self.state = 1306
                self.number_s()
                self.state = 1311
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,136,self._ctx)
                if la_ == 1:
                    self.state = 1307
                    self.number_s()
                    self.state = 1308
                    self.number_s()
                    self.state = 1309
                    self.number_s()


                self.state = 1317
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,137,self._ctx)
                if la_ == 1:
                    self.state = 1313
                    self.number_s()
                    self.state = 1314
                    self.number_s()
                    self.state = 1315
                    self.number_s()


                self.state = 1323
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 177)) & ~0x3f) == 0 and ((1 << (_la - 177)) & ((1 << (XplorMRParser.Integer - 177)) | (1 << (XplorMRParser.Real - 177)) | (1 << (XplorMRParser.Symbol_name - 177)))) != 0):
                    self.state = 1319
                    self.number_s()
                    self.state = 1320
                    self.number_s()
                    self.state = 1321
                    self.number_s()


                pass
            elif token in [XplorMRParser.Nrestraints]:
                self.enterOuterAlt(localctx, 6)
                self.state = 1325
                self.match(XplorMRParser.Nrestraints)
                self.state = 1327
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 1326
                    self.match(XplorMRParser.Equ_op)


                self.state = 1329
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.Phase]:
                self.enterOuterAlt(localctx, 7)
                self.state = 1330
                self.match(XplorMRParser.Phase)
                self.state = 1331
                self.number_s()
                self.state = 1332
                self.number_s()
                self.state = 1333
                self.number_s()
                self.state = 1338
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,140,self._ctx)
                if la_ == 1:
                    self.state = 1334
                    self.number_s()
                    self.state = 1335
                    self.number_s()
                    self.state = 1336
                    self.number_s()


                self.state = 1344
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,141,self._ctx)
                if la_ == 1:
                    self.state = 1340
                    self.number_s()
                    self.state = 1341
                    self.number_s()
                    self.state = 1342
                    self.number_s()


                self.state = 1350
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 177)) & ~0x3f) == 0 and ((1 << (_la - 177)) & ((1 << (XplorMRParser.Integer - 177)) | (1 << (XplorMRParser.Real - 177)) | (1 << (XplorMRParser.Symbol_name - 177)))) != 0):
                    self.state = 1346
                    self.number_s()
                    self.state = 1347
                    self.number_s()
                    self.state = 1348
                    self.number_s()


                pass
            elif token in [XplorMRParser.Print]:
                self.enterOuterAlt(localctx, 8)
                self.state = 1352
                self.match(XplorMRParser.Print)
                self.state = 1353
                self.match(XplorMRParser.Threshold)
                self.state = 1354
                self.number_s()
                self.state = 1361
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [XplorMRParser.All]:
                    self.state = 1355
                    self.match(XplorMRParser.All)
                    pass
                elif token in [XplorMRParser.Classification]:
                    self.state = 1356
                    self.match(XplorMRParser.Classification)
                    self.state = 1358
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==XplorMRParser.Equ_op:
                        self.state = 1357
                        self.match(XplorMRParser.Equ_op)


                    self.state = 1360
                    self.match(XplorMRParser.Simple_name)
                    pass
                else:
                    raise NoViableAltException(self)

                pass
            elif token in [XplorMRParser.Quartic]:
                self.enterOuterAlt(localctx, 9)
                self.state = 1363
                self.match(XplorMRParser.Quartic)
                self.state = 1364
                self.number_s()
                self.state = 1365
                self.number_s()
                self.state = 1366
                self.number_s()
                self.state = 1371
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,145,self._ctx)
                if la_ == 1:
                    self.state = 1367
                    self.number_s()
                    self.state = 1368
                    self.number_s()
                    self.state = 1369
                    self.number_s()


                self.state = 1377
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,146,self._ctx)
                if la_ == 1:
                    self.state = 1373
                    self.number_s()
                    self.state = 1374
                    self.number_s()
                    self.state = 1375
                    self.number_s()


                self.state = 1383
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 177)) & ~0x3f) == 0 and ((1 << (_la - 177)) & ((1 << (XplorMRParser.Integer - 177)) | (1 << (XplorMRParser.Real - 177)) | (1 << (XplorMRParser.Symbol_name - 177)))) != 0):
                    self.state = 1379
                    self.number_s()
                    self.state = 1380
                    self.number_s()
                    self.state = 1381
                    self.number_s()


                pass
            elif token in [XplorMRParser.Reset]:
                self.enterOuterAlt(localctx, 10)
                self.state = 1385
                self.match(XplorMRParser.Reset)
                pass
            elif token in [XplorMRParser.Scale]:
                self.enterOuterAlt(localctx, 11)
                self.state = 1386
                self.match(XplorMRParser.Scale)
                self.state = 1388
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 1387
                    self.match(XplorMRParser.Equ_op)


                self.state = 1390
                self.number_s()
                pass
            elif token in [XplorMRParser.Shape]:
                self.enterOuterAlt(localctx, 12)
                self.state = 1391
                self.match(XplorMRParser.Shape)
                self.state = 1392
                self.match(XplorMRParser.Gauss_or_Quart)
                pass
            elif token in [XplorMRParser.Size]:
                self.enterOuterAlt(localctx, 13)
                self.state = 1393
                self.match(XplorMRParser.Size)
                self.state = 1394
                self.match(XplorMRParser.Dimensions)
                self.state = 1395
                self.number_s()
                self.state = 1397
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,149,self._ctx)
                if la_ == 1:
                    self.state = 1396
                    self.number_s()


                self.state = 1400
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,150,self._ctx)
                if la_ == 1:
                    self.state = 1399
                    self.number_s()


                self.state = 1403
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 177)) & ~0x3f) == 0 and ((1 << (_la - 177)) & ((1 << (XplorMRParser.Integer - 177)) | (1 << (XplorMRParser.Real - 177)) | (1 << (XplorMRParser.Symbol_name - 177)))) != 0):
                    self.state = 1402
                    self.number_s()


                pass
            elif token in [XplorMRParser.Sort]:
                self.enterOuterAlt(localctx, 14)
                self.state = 1405
                self.match(XplorMRParser.Sort)
                pass
            elif token in [XplorMRParser.Zero]:
                self.enterOuterAlt(localctx, 15)
                self.state = 1406
                self.match(XplorMRParser.Zero)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Rama_assignContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Assign(self):
            return self.getToken(XplorMRParser.Assign, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.SelectionContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_rama_assign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRama_assign" ):
                listener.enterRama_assign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRama_assign" ):
                listener.exitRama_assign(self)




    def rama_assign(self):

        localctx = XplorMRParser.Rama_assignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 126, self.RULE_rama_assign)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1409
            self.match(XplorMRParser.Assign)
            self.state = 1410
            self.selection()
            self.state = 1411
            self.selection()
            self.state = 1412
            self.selection()
            self.state = 1413
            self.selection()
            self.state = 1419
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,153,self._ctx)
            if la_ == 1:
                self.state = 1414
                self.selection()
                self.state = 1415
                self.selection()
                self.state = 1416
                self.selection()
                self.state = 1417
                self.selection()


            self.state = 1426
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,154,self._ctx)
            if la_ == 1:
                self.state = 1421
                self.selection()
                self.state = 1422
                self.selection()
                self.state = 1423
                self.selection()
                self.state = 1424
                self.selection()


            self.state = 1433
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==XplorMRParser.L_paren:
                self.state = 1428
                self.selection()
                self.state = 1429
                self.selection()
                self.state = 1430
                self.selection()
                self.state = 1431
                self.selection()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Collapse_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def coll_assign(self):
            return self.getTypedRuleContext(XplorMRParser.Coll_assignContext,0)


        def coll_assign_loop(self):
            return self.getTypedRuleContext(XplorMRParser.Coll_assign_loopContext,0)


        def Scale(self):
            return self.getToken(XplorMRParser.Scale, 0)

        def number_s(self):
            return self.getTypedRuleContext(XplorMRParser.Number_sContext,0)


        def Equ_op(self):
            return self.getToken(XplorMRParser.Equ_op, 0)

        def Print(self):
            return self.getToken(XplorMRParser.Print, 0)

        def Reset(self):
            return self.getToken(XplorMRParser.Reset, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_collapse_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCollapse_statement" ):
                listener.enterCollapse_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCollapse_statement" ):
                listener.exitCollapse_statement(self)




    def collapse_statement(self):

        localctx = XplorMRParser.Collapse_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 128, self.RULE_collapse_statement)
        self._la = 0 # Token type
        try:
            self.state = 1444
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [XplorMRParser.Assign]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1435
                self.coll_assign()
                pass
            elif token in [XplorMRParser.For]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1436
                self.coll_assign_loop()
                pass
            elif token in [XplorMRParser.Scale]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1437
                self.match(XplorMRParser.Scale)
                self.state = 1439
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 1438
                    self.match(XplorMRParser.Equ_op)


                self.state = 1441
                self.number_s()
                pass
            elif token in [XplorMRParser.Print]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1442
                self.match(XplorMRParser.Print)
                pass
            elif token in [XplorMRParser.Reset]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1443
                self.match(XplorMRParser.Reset)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Coll_assignContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Assign(self):
            return self.getToken(XplorMRParser.Assign, 0)

        def selection(self):
            return self.getTypedRuleContext(XplorMRParser.SelectionContext,0)


        def number(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.NumberContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.NumberContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_coll_assign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColl_assign" ):
                listener.enterColl_assign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColl_assign" ):
                listener.exitColl_assign(self)




    def coll_assign(self):

        localctx = XplorMRParser.Coll_assignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 130, self.RULE_coll_assign)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1446
            self.match(XplorMRParser.Assign)
            self.state = 1447
            self.selection()
            self.state = 1448
            self.number()
            self.state = 1449
            self.number()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Diffusion_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def dani_assign(self):
            return self.getTypedRuleContext(XplorMRParser.Dani_assignContext,0)


        def Classification(self):
            return self.getToken(XplorMRParser.Classification, 0)

        def Simple_name(self):
            return self.getToken(XplorMRParser.Simple_name, 0)

        def Equ_op(self):
            return self.getToken(XplorMRParser.Equ_op, 0)

        def Coefficients(self):
            return self.getToken(XplorMRParser.Coefficients, 0)

        def number_s(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Number_sContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Number_sContext,i)


        def ForceConstant(self):
            return self.getToken(XplorMRParser.ForceConstant, 0)

        def Nrestraints(self):
            return self.getToken(XplorMRParser.Nrestraints, 0)

        def Integer(self):
            return self.getToken(XplorMRParser.Integer, 0)

        def Potential(self):
            return self.getToken(XplorMRParser.Potential, 0)

        def Potential_types(self):
            return self.getToken(XplorMRParser.Potential_types, 0)

        def Print(self):
            return self.getToken(XplorMRParser.Print, 0)

        def Threshold(self):
            return self.getToken(XplorMRParser.Threshold, 0)

        def Reset(self):
            return self.getToken(XplorMRParser.Reset, 0)

        def Type(self):
            return self.getToken(XplorMRParser.Type, 0)

        def Rdc_or_Diff_anis_types(self):
            return self.getToken(XplorMRParser.Rdc_or_Diff_anis_types, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_diffusion_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDiffusion_statement" ):
                listener.enterDiffusion_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDiffusion_statement" ):
                listener.exitDiffusion_statement(self)




    def diffusion_statement(self):

        localctx = XplorMRParser.Diffusion_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 132, self.RULE_diffusion_statement)
        self._la = 0 # Token type
        try:
            self.state = 1482
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [XplorMRParser.Assign]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1451
                self.dani_assign()
                pass
            elif token in [XplorMRParser.Classification]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1452
                self.match(XplorMRParser.Classification)
                self.state = 1454
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 1453
                    self.match(XplorMRParser.Equ_op)


                self.state = 1456
                self.match(XplorMRParser.Simple_name)
                pass
            elif token in [XplorMRParser.Coefficients]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1457
                self.match(XplorMRParser.Coefficients)
                self.state = 1458
                self.number_s()
                self.state = 1459
                self.number_s()
                self.state = 1460
                self.number_s()
                self.state = 1461
                self.number_s()
                self.state = 1462
                self.number_s()
                pass
            elif token in [XplorMRParser.ForceConstant]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1464
                self.match(XplorMRParser.ForceConstant)
                self.state = 1466
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 1465
                    self.match(XplorMRParser.Equ_op)


                self.state = 1468
                self.number_s()
                pass
            elif token in [XplorMRParser.Nrestraints]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1469
                self.match(XplorMRParser.Nrestraints)
                self.state = 1471
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 1470
                    self.match(XplorMRParser.Equ_op)


                self.state = 1473
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.Potential]:
                self.enterOuterAlt(localctx, 6)
                self.state = 1474
                self.match(XplorMRParser.Potential)
                self.state = 1475
                self.match(XplorMRParser.Potential_types)
                pass
            elif token in [XplorMRParser.Print]:
                self.enterOuterAlt(localctx, 7)
                self.state = 1476
                self.match(XplorMRParser.Print)
                self.state = 1477
                self.match(XplorMRParser.Threshold)
                self.state = 1478
                self.number_s()
                pass
            elif token in [XplorMRParser.Reset]:
                self.enterOuterAlt(localctx, 8)
                self.state = 1479
                self.match(XplorMRParser.Reset)
                pass
            elif token in [XplorMRParser.Type]:
                self.enterOuterAlt(localctx, 9)
                self.state = 1480
                self.match(XplorMRParser.Type)
                self.state = 1481
                self.match(XplorMRParser.Rdc_or_Diff_anis_types)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Dani_assignContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Assign(self):
            return self.getToken(XplorMRParser.Assign, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.SelectionContext,i)


        def number(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.NumberContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.NumberContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_dani_assign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDani_assign" ):
                listener.enterDani_assign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDani_assign" ):
                listener.exitDani_assign(self)




    def dani_assign(self):

        localctx = XplorMRParser.Dani_assignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 134, self.RULE_dani_assign)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1484
            self.match(XplorMRParser.Assign)
            self.state = 1485
            self.selection()
            self.state = 1486
            self.selection()
            self.state = 1487
            self.selection()
            self.state = 1488
            self.selection()
            self.state = 1489
            self.selection()
            self.state = 1490
            self.selection()
            self.state = 1491
            self.number()
            self.state = 1493
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 177)) & ~0x3f) == 0 and ((1 << (_la - 177)) & ((1 << (XplorMRParser.Integer - 177)) | (1 << (XplorMRParser.Real - 177)) | (1 << (XplorMRParser.Symbol_name - 177)))) != 0):
                self.state = 1492
                self.number()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Orientation_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def orie_assign(self):
            return self.getTypedRuleContext(XplorMRParser.Orie_assignContext,0)


        def Classification(self):
            return self.getToken(XplorMRParser.Classification, 0)

        def Simple_name(self):
            return self.getToken(XplorMRParser.Simple_name, 0)

        def Equ_op(self):
            return self.getToken(XplorMRParser.Equ_op, 0)

        def Cutoff(self):
            return self.getToken(XplorMRParser.Cutoff, 0)

        def number_s(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Number_sContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Number_sContext,i)


        def Height(self):
            return self.getToken(XplorMRParser.Height, 0)

        def ForceConstant(self):
            return self.getToken(XplorMRParser.ForceConstant, 0)

        def Gaussian(self):
            return self.getToken(XplorMRParser.Gaussian, 0)

        def MaxGaussians(self):
            return self.getToken(XplorMRParser.MaxGaussians, 0)

        def Integer(self):
            return self.getToken(XplorMRParser.Integer, 0)

        def NewGaussian(self):
            return self.getToken(XplorMRParser.NewGaussian, 0)

        def Nrestraints(self):
            return self.getToken(XplorMRParser.Nrestraints, 0)

        def Print(self):
            return self.getToken(XplorMRParser.Print, 0)

        def Threshold(self):
            return self.getToken(XplorMRParser.Threshold, 0)

        def All(self):
            return self.getToken(XplorMRParser.All, 0)

        def Quartic(self):
            return self.getToken(XplorMRParser.Quartic, 0)

        def Reset(self):
            return self.getToken(XplorMRParser.Reset, 0)

        def Residue(self):
            return self.getToken(XplorMRParser.Residue, 0)

        def Size(self):
            return self.getToken(XplorMRParser.Size, 0)

        def Zero(self):
            return self.getToken(XplorMRParser.Zero, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_orientation_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOrientation_statement" ):
                listener.enterOrientation_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOrientation_statement" ):
                listener.exitOrientation_statement(self)




    def orientation_statement(self):

        localctx = XplorMRParser.Orientation_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 136, self.RULE_orientation_statement)
        self._la = 0 # Token type
        try:
            self.state = 1564
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [XplorMRParser.Assign]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1495
                self.orie_assign()
                pass
            elif token in [XplorMRParser.Classification]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1496
                self.match(XplorMRParser.Classification)
                self.state = 1498
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 1497
                    self.match(XplorMRParser.Equ_op)


                self.state = 1500
                self.match(XplorMRParser.Simple_name)
                pass
            elif token in [XplorMRParser.Cutoff]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1501
                self.match(XplorMRParser.Cutoff)
                self.state = 1502
                self.number_s()
                pass
            elif token in [XplorMRParser.Height]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1503
                self.match(XplorMRParser.Height)
                self.state = 1504
                self.number_s()
                pass
            elif token in [XplorMRParser.ForceConstant]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1505
                self.match(XplorMRParser.ForceConstant)
                self.state = 1507
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 1506
                    self.match(XplorMRParser.Equ_op)


                self.state = 1509
                self.number_s()
                pass
            elif token in [XplorMRParser.Gaussian]:
                self.enterOuterAlt(localctx, 6)
                self.state = 1510
                self.match(XplorMRParser.Gaussian)
                self.state = 1511
                self.number_s()
                self.state = 1512
                self.number_s()
                self.state = 1513
                self.number_s()
                self.state = 1514
                self.number_s()
                self.state = 1515
                self.number_s()
                self.state = 1516
                self.number_s()
                self.state = 1517
                self.number_s()
                pass
            elif token in [XplorMRParser.MaxGaussians]:
                self.enterOuterAlt(localctx, 7)
                self.state = 1519
                self.match(XplorMRParser.MaxGaussians)
                self.state = 1520
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.NewGaussian]:
                self.enterOuterAlt(localctx, 8)
                self.state = 1521
                self.match(XplorMRParser.NewGaussian)
                self.state = 1522
                self.number_s()
                self.state = 1523
                self.number_s()
                self.state = 1524
                self.number_s()
                self.state = 1525
                self.number_s()
                self.state = 1526
                self.number_s()
                self.state = 1527
                self.number_s()
                self.state = 1528
                self.number_s()
                self.state = 1529
                self.number_s()
                pass
            elif token in [XplorMRParser.Nrestraints]:
                self.enterOuterAlt(localctx, 9)
                self.state = 1531
                self.match(XplorMRParser.Nrestraints)
                self.state = 1533
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 1532
                    self.match(XplorMRParser.Equ_op)


                self.state = 1535
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.Print]:
                self.enterOuterAlt(localctx, 10)
                self.state = 1536
                self.match(XplorMRParser.Print)
                self.state = 1537
                self.match(XplorMRParser.Threshold)
                self.state = 1538
                self.number_s()
                self.state = 1545
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [XplorMRParser.All]:
                    self.state = 1539
                    self.match(XplorMRParser.All)
                    pass
                elif token in [XplorMRParser.Classification]:
                    self.state = 1540
                    self.match(XplorMRParser.Classification)
                    self.state = 1542
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==XplorMRParser.Equ_op:
                        self.state = 1541
                        self.match(XplorMRParser.Equ_op)


                    self.state = 1544
                    self.match(XplorMRParser.Simple_name)
                    pass
                else:
                    raise NoViableAltException(self)

                pass
            elif token in [XplorMRParser.Quartic]:
                self.enterOuterAlt(localctx, 11)
                self.state = 1547
                self.match(XplorMRParser.Quartic)
                self.state = 1548
                self.number_s()
                self.state = 1549
                self.number_s()
                self.state = 1550
                self.number_s()
                self.state = 1551
                self.number_s()
                self.state = 1552
                self.number_s()
                self.state = 1553
                self.number_s()
                self.state = 1554
                self.number_s()
                pass
            elif token in [XplorMRParser.Reset]:
                self.enterOuterAlt(localctx, 12)
                self.state = 1556
                self.match(XplorMRParser.Reset)
                pass
            elif token in [XplorMRParser.Residue]:
                self.enterOuterAlt(localctx, 13)
                self.state = 1557
                self.match(XplorMRParser.Residue)
                self.state = 1558
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.Size]:
                self.enterOuterAlt(localctx, 14)
                self.state = 1559
                self.match(XplorMRParser.Size)
                self.state = 1560
                self.number_s()
                self.state = 1561
                self.number_s()
                pass
            elif token in [XplorMRParser.Zero]:
                self.enterOuterAlt(localctx, 15)
                self.state = 1563
                self.match(XplorMRParser.Zero)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Orie_assignContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Assign(self):
            return self.getToken(XplorMRParser.Assign, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.SelectionContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_orie_assign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOrie_assign" ):
                listener.enterOrie_assign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOrie_assign" ):
                listener.exitOrie_assign(self)




    def orie_assign(self):

        localctx = XplorMRParser.Orie_assignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 138, self.RULE_orie_assign)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1566
            self.match(XplorMRParser.Assign)
            self.state = 1567
            self.selection()
            self.state = 1568
            self.selection()
            self.state = 1569
            self.selection()
            self.state = 1570
            self.selection()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Csa_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def csa_assign(self):
            return self.getTypedRuleContext(XplorMRParser.Csa_assignContext,0)


        def csa_assign_loop(self):
            return self.getTypedRuleContext(XplorMRParser.Csa_assign_loopContext,0)


        def Classification(self):
            return self.getToken(XplorMRParser.Classification, 0)

        def Simple_name(self):
            return self.getToken(XplorMRParser.Simple_name, 0)

        def Equ_op(self):
            return self.getToken(XplorMRParser.Equ_op, 0)

        def Scale(self):
            return self.getToken(XplorMRParser.Scale, 0)

        def number_s(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Number_sContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Number_sContext,i)


        def Type(self):
            return self.getToken(XplorMRParser.Type, 0)

        def Csa_types(self):
            return self.getToken(XplorMRParser.Csa_types, 0)

        def Coefficients(self):
            return self.getToken(XplorMRParser.Coefficients, 0)

        def Sigma(self):
            return self.getToken(XplorMRParser.Sigma, 0)

        def ForceConstant(self):
            return self.getToken(XplorMRParser.ForceConstant, 0)

        def Nrestraints(self):
            return self.getToken(XplorMRParser.Nrestraints, 0)

        def Integer(self):
            return self.getToken(XplorMRParser.Integer, 0)

        def Potential(self):
            return self.getToken(XplorMRParser.Potential, 0)

        def Potential_types(self):
            return self.getToken(XplorMRParser.Potential_types, 0)

        def Print(self):
            return self.getToken(XplorMRParser.Print, 0)

        def Threshold(self):
            return self.getToken(XplorMRParser.Threshold, 0)

        def Reset(self):
            return self.getToken(XplorMRParser.Reset, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_csa_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCsa_statement" ):
                listener.enterCsa_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCsa_statement" ):
                listener.exitCsa_statement(self)




    def csa_statement(self):

        localctx = XplorMRParser.Csa_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 140, self.RULE_csa_statement)
        self._la = 0 # Token type
        try:
            self.state = 1612
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [XplorMRParser.Assign]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1572
                self.csa_assign()
                pass
            elif token in [XplorMRParser.For]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1573
                self.csa_assign_loop()
                pass
            elif token in [XplorMRParser.Classification]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1574
                self.match(XplorMRParser.Classification)
                self.state = 1576
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 1575
                    self.match(XplorMRParser.Equ_op)


                self.state = 1578
                self.match(XplorMRParser.Simple_name)
                pass
            elif token in [XplorMRParser.Scale]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1579
                self.match(XplorMRParser.Scale)
                self.state = 1581
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 1580
                    self.match(XplorMRParser.Equ_op)


                self.state = 1583
                self.number_s()
                pass
            elif token in [XplorMRParser.Type]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1584
                self.match(XplorMRParser.Type)
                self.state = 1585
                self.match(XplorMRParser.Csa_types)
                pass
            elif token in [XplorMRParser.Coefficients]:
                self.enterOuterAlt(localctx, 6)
                self.state = 1586
                self.match(XplorMRParser.Coefficients)
                self.state = 1587
                self.number_s()
                self.state = 1588
                self.number_s()
                self.state = 1589
                self.number_s()
                pass
            elif token in [XplorMRParser.Sigma]:
                self.enterOuterAlt(localctx, 7)
                self.state = 1591
                self.match(XplorMRParser.Sigma)
                self.state = 1592
                self.number_s()
                self.state = 1593
                self.number_s()
                self.state = 1594
                self.number_s()
                pass
            elif token in [XplorMRParser.ForceConstant]:
                self.enterOuterAlt(localctx, 8)
                self.state = 1596
                self.match(XplorMRParser.ForceConstant)
                self.state = 1598
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 1597
                    self.match(XplorMRParser.Equ_op)


                self.state = 1600
                self.number_s()
                pass
            elif token in [XplorMRParser.Nrestraints]:
                self.enterOuterAlt(localctx, 9)
                self.state = 1601
                self.match(XplorMRParser.Nrestraints)
                self.state = 1603
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 1602
                    self.match(XplorMRParser.Equ_op)


                self.state = 1605
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.Potential]:
                self.enterOuterAlt(localctx, 10)
                self.state = 1606
                self.match(XplorMRParser.Potential)
                self.state = 1607
                self.match(XplorMRParser.Potential_types)
                pass
            elif token in [XplorMRParser.Print]:
                self.enterOuterAlt(localctx, 11)
                self.state = 1608
                self.match(XplorMRParser.Print)
                self.state = 1609
                self.match(XplorMRParser.Threshold)
                self.state = 1610
                self.number_s()
                pass
            elif token in [XplorMRParser.Reset]:
                self.enterOuterAlt(localctx, 12)
                self.state = 1611
                self.match(XplorMRParser.Reset)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Csa_assignContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Assign(self):
            return self.getToken(XplorMRParser.Assign, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.SelectionContext,i)


        def number(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.NumberContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.NumberContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_csa_assign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCsa_assign" ):
                listener.enterCsa_assign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCsa_assign" ):
                listener.exitCsa_assign(self)




    def csa_assign(self):

        localctx = XplorMRParser.Csa_assignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 142, self.RULE_csa_assign)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1614
            self.match(XplorMRParser.Assign)
            self.state = 1615
            self.selection()
            self.state = 1616
            self.selection()
            self.state = 1617
            self.selection()
            self.state = 1618
            self.selection()
            self.state = 1619
            self.selection()
            self.state = 1620
            self.selection()
            self.state = 1621
            self.selection()
            self.state = 1622
            self.number()
            self.state = 1624
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,174,self._ctx)
            if la_ == 1:
                self.state = 1623
                self.number()


            self.state = 1627
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 177)) & ~0x3f) == 0 and ((1 << (_la - 177)) & ((1 << (XplorMRParser.Integer - 177)) | (1 << (XplorMRParser.Real - 177)) | (1 << (XplorMRParser.Symbol_name - 177)))) != 0):
                self.state = 1626
                self.number()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pcsa_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def csa_assign(self):
            return self.getTypedRuleContext(XplorMRParser.Csa_assignContext,0)


        def Classification(self):
            return self.getToken(XplorMRParser.Classification, 0)

        def Simple_name(self):
            return self.getToken(XplorMRParser.Simple_name, 0)

        def Equ_op(self):
            return self.getToken(XplorMRParser.Equ_op, 0)

        def Scale(self):
            return self.getToken(XplorMRParser.Scale, 0)

        def number_s(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Number_sContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Number_sContext,i)


        def Coefficients(self):
            return self.getToken(XplorMRParser.Coefficients, 0)

        def Sigma(self):
            return self.getToken(XplorMRParser.Sigma, 0)

        def ForceConstant(self):
            return self.getToken(XplorMRParser.ForceConstant, 0)

        def Nrestraints(self):
            return self.getToken(XplorMRParser.Nrestraints, 0)

        def Integer(self):
            return self.getToken(XplorMRParser.Integer, 0)

        def Potential(self):
            return self.getToken(XplorMRParser.Potential, 0)

        def Potential_types(self):
            return self.getToken(XplorMRParser.Potential_types, 0)

        def Print(self):
            return self.getToken(XplorMRParser.Print, 0)

        def Threshold(self):
            return self.getToken(XplorMRParser.Threshold, 0)

        def Reset(self):
            return self.getToken(XplorMRParser.Reset, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_pcsa_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPcsa_statement" ):
                listener.enterPcsa_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPcsa_statement" ):
                listener.exitPcsa_statement(self)




    def pcsa_statement(self):

        localctx = XplorMRParser.Pcsa_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 144, self.RULE_pcsa_statement)
        self._la = 0 # Token type
        try:
            self.state = 1667
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [XplorMRParser.Assign]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1629
                self.csa_assign()
                pass
            elif token in [XplorMRParser.Classification]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1630
                self.match(XplorMRParser.Classification)
                self.state = 1632
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 1631
                    self.match(XplorMRParser.Equ_op)


                self.state = 1634
                self.match(XplorMRParser.Simple_name)
                pass
            elif token in [XplorMRParser.Scale]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1635
                self.match(XplorMRParser.Scale)
                self.state = 1637
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 1636
                    self.match(XplorMRParser.Equ_op)


                self.state = 1639
                self.number_s()
                pass
            elif token in [XplorMRParser.Coefficients]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1640
                self.match(XplorMRParser.Coefficients)
                self.state = 1641
                self.number_s()
                self.state = 1642
                self.number_s()
                self.state = 1643
                self.number_s()
                pass
            elif token in [XplorMRParser.Sigma]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1645
                self.match(XplorMRParser.Sigma)
                self.state = 1646
                self.number_s()
                self.state = 1647
                self.number_s()
                self.state = 1648
                self.number_s()
                self.state = 1649
                self.number_s()
                pass
            elif token in [XplorMRParser.ForceConstant]:
                self.enterOuterAlt(localctx, 6)
                self.state = 1651
                self.match(XplorMRParser.ForceConstant)
                self.state = 1653
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 1652
                    self.match(XplorMRParser.Equ_op)


                self.state = 1655
                self.number_s()
                pass
            elif token in [XplorMRParser.Nrestraints]:
                self.enterOuterAlt(localctx, 7)
                self.state = 1656
                self.match(XplorMRParser.Nrestraints)
                self.state = 1658
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 1657
                    self.match(XplorMRParser.Equ_op)


                self.state = 1660
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.Potential]:
                self.enterOuterAlt(localctx, 8)
                self.state = 1661
                self.match(XplorMRParser.Potential)
                self.state = 1662
                self.match(XplorMRParser.Potential_types)
                pass
            elif token in [XplorMRParser.Print]:
                self.enterOuterAlt(localctx, 9)
                self.state = 1663
                self.match(XplorMRParser.Print)
                self.state = 1664
                self.match(XplorMRParser.Threshold)
                self.state = 1665
                self.number_s()
                pass
            elif token in [XplorMRParser.Reset]:
                self.enterOuterAlt(localctx, 10)
                self.state = 1666
                self.match(XplorMRParser.Reset)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class One_bond_coupling_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def one_bond_assign(self):
            return self.getTypedRuleContext(XplorMRParser.One_bond_assignContext,0)


        def Classification(self):
            return self.getToken(XplorMRParser.Classification, 0)

        def Simple_name(self):
            return self.getToken(XplorMRParser.Simple_name, 0)

        def Equ_op(self):
            return self.getToken(XplorMRParser.Equ_op, 0)

        def Coefficients(self):
            return self.getToken(XplorMRParser.Coefficients, 0)

        def number_s(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Number_sContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Number_sContext,i)


        def ForceConstant(self):
            return self.getToken(XplorMRParser.ForceConstant, 0)

        def Nrestraints(self):
            return self.getToken(XplorMRParser.Nrestraints, 0)

        def Integer(self):
            return self.getToken(XplorMRParser.Integer, 0)

        def Potential(self):
            return self.getToken(XplorMRParser.Potential, 0)

        def Potential_types(self):
            return self.getToken(XplorMRParser.Potential_types, 0)

        def Print(self):
            return self.getToken(XplorMRParser.Print, 0)

        def Threshold(self):
            return self.getToken(XplorMRParser.Threshold, 0)

        def Reset(self):
            return self.getToken(XplorMRParser.Reset, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_one_bond_coupling_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOne_bond_coupling_statement" ):
                listener.enterOne_bond_coupling_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOne_bond_coupling_statement" ):
                listener.exitOne_bond_coupling_statement(self)




    def one_bond_coupling_statement(self):

        localctx = XplorMRParser.One_bond_coupling_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 146, self.RULE_one_bond_coupling_statement)
        self._la = 0 # Token type
        try:
            self.state = 1700
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [XplorMRParser.Assign]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1669
                self.one_bond_assign()
                pass
            elif token in [XplorMRParser.Classification]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1670
                self.match(XplorMRParser.Classification)
                self.state = 1672
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 1671
                    self.match(XplorMRParser.Equ_op)


                self.state = 1674
                self.match(XplorMRParser.Simple_name)
                pass
            elif token in [XplorMRParser.Coefficients]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1675
                self.match(XplorMRParser.Coefficients)
                self.state = 1676
                self.number_s()
                self.state = 1677
                self.number_s()
                self.state = 1678
                self.number_s()
                self.state = 1679
                self.number_s()
                self.state = 1680
                self.number_s()
                self.state = 1681
                self.number_s()
                self.state = 1682
                self.number_s()
                pass
            elif token in [XplorMRParser.ForceConstant]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1684
                self.match(XplorMRParser.ForceConstant)
                self.state = 1686
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 1685
                    self.match(XplorMRParser.Equ_op)


                self.state = 1688
                self.number_s()
                pass
            elif token in [XplorMRParser.Nrestraints]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1689
                self.match(XplorMRParser.Nrestraints)
                self.state = 1691
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 1690
                    self.match(XplorMRParser.Equ_op)


                self.state = 1693
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.Potential]:
                self.enterOuterAlt(localctx, 6)
                self.state = 1694
                self.match(XplorMRParser.Potential)
                self.state = 1695
                self.match(XplorMRParser.Potential_types)
                pass
            elif token in [XplorMRParser.Print]:
                self.enterOuterAlt(localctx, 7)
                self.state = 1696
                self.match(XplorMRParser.Print)
                self.state = 1697
                self.match(XplorMRParser.Threshold)
                self.state = 1698
                self.number_s()
                pass
            elif token in [XplorMRParser.Reset]:
                self.enterOuterAlt(localctx, 8)
                self.state = 1699
                self.match(XplorMRParser.Reset)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class One_bond_assignContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Assign(self):
            return self.getToken(XplorMRParser.Assign, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.SelectionContext,i)


        def number(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.NumberContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.NumberContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_one_bond_assign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOne_bond_assign" ):
                listener.enterOne_bond_assign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOne_bond_assign" ):
                listener.exitOne_bond_assign(self)




    def one_bond_assign(self):

        localctx = XplorMRParser.One_bond_assignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 148, self.RULE_one_bond_assign)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1702
            self.match(XplorMRParser.Assign)
            self.state = 1703
            self.selection()
            self.state = 1704
            self.selection()
            self.state = 1705
            self.selection()
            self.state = 1706
            self.selection()
            self.state = 1707
            self.selection()
            self.state = 1708
            self.selection()
            self.state = 1709
            self.selection()
            self.state = 1710
            self.selection()
            self.state = 1711
            self.number()
            self.state = 1712
            self.number()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Angle_db_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def angle_db_assign(self):
            return self.getTypedRuleContext(XplorMRParser.Angle_db_assignContext,0)


        def Classification(self):
            return self.getToken(XplorMRParser.Classification, 0)

        def Simple_name(self):
            return self.getToken(XplorMRParser.Simple_name, 0)

        def Equ_op(self):
            return self.getToken(XplorMRParser.Equ_op, 0)

        def DerivFlag(self):
            return self.getToken(XplorMRParser.DerivFlag, 0)

        def Expectation(self):
            return self.getToken(XplorMRParser.Expectation, 0)

        def Integer(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Integer)
            else:
                return self.getToken(XplorMRParser.Integer, i)

        def number_s(self):
            return self.getTypedRuleContext(XplorMRParser.Number_sContext,0)


        def Error(self):
            return self.getToken(XplorMRParser.Error, 0)

        def ForceConstant(self):
            return self.getToken(XplorMRParser.ForceConstant, 0)

        def Nrestraints(self):
            return self.getToken(XplorMRParser.Nrestraints, 0)

        def Potential(self):
            return self.getToken(XplorMRParser.Potential, 0)

        def Potential_types(self):
            return self.getToken(XplorMRParser.Potential_types, 0)

        def Print(self):
            return self.getToken(XplorMRParser.Print, 0)

        def Threshold(self):
            return self.getToken(XplorMRParser.Threshold, 0)

        def All(self):
            return self.getToken(XplorMRParser.All, 0)

        def Reset(self):
            return self.getToken(XplorMRParser.Reset, 0)

        def Size(self):
            return self.getToken(XplorMRParser.Size, 0)

        def Angle_or_Dihedral(self):
            return self.getToken(XplorMRParser.Angle_or_Dihedral, 0)

        def Zero(self):
            return self.getToken(XplorMRParser.Zero, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_angle_db_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAngle_db_statement" ):
                listener.enterAngle_db_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAngle_db_statement" ):
                listener.exitAngle_db_statement(self)




    def angle_db_statement(self):

        localctx = XplorMRParser.Angle_db_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 150, self.RULE_angle_db_statement)
        self._la = 0 # Token type
        try:
            self.state = 1757
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [XplorMRParser.Assign]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1714
                self.angle_db_assign()
                pass
            elif token in [XplorMRParser.Classification]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1715
                self.match(XplorMRParser.Classification)
                self.state = 1717
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 1716
                    self.match(XplorMRParser.Equ_op)


                self.state = 1719
                self.match(XplorMRParser.Simple_name)
                pass
            elif token in [XplorMRParser.DerivFlag]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1720
                self.match(XplorMRParser.DerivFlag)
                self.state = 1721
                self.match(XplorMRParser.Simple_name)
                pass
            elif token in [XplorMRParser.Expectation]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1722
                self.match(XplorMRParser.Expectation)
                self.state = 1723
                self.match(XplorMRParser.Integer)
                self.state = 1724
                self.match(XplorMRParser.Integer)
                self.state = 1725
                self.number_s()
                pass
            elif token in [XplorMRParser.Error]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1726
                self.match(XplorMRParser.Error)
                self.state = 1727
                self.number_s()
                pass
            elif token in [XplorMRParser.ForceConstant]:
                self.enterOuterAlt(localctx, 6)
                self.state = 1728
                self.match(XplorMRParser.ForceConstant)
                self.state = 1730
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 1729
                    self.match(XplorMRParser.Equ_op)


                self.state = 1732
                self.number_s()
                pass
            elif token in [XplorMRParser.Nrestraints]:
                self.enterOuterAlt(localctx, 7)
                self.state = 1733
                self.match(XplorMRParser.Nrestraints)
                self.state = 1735
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 1734
                    self.match(XplorMRParser.Equ_op)


                self.state = 1737
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.Potential]:
                self.enterOuterAlt(localctx, 8)
                self.state = 1738
                self.match(XplorMRParser.Potential)
                self.state = 1739
                self.match(XplorMRParser.Potential_types)
                pass
            elif token in [XplorMRParser.Print]:
                self.enterOuterAlt(localctx, 9)
                self.state = 1740
                self.match(XplorMRParser.Print)
                self.state = 1741
                self.match(XplorMRParser.Threshold)
                self.state = 1742
                self.number_s()
                self.state = 1749
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [XplorMRParser.All]:
                    self.state = 1743
                    self.match(XplorMRParser.All)
                    pass
                elif token in [XplorMRParser.Classification]:
                    self.state = 1744
                    self.match(XplorMRParser.Classification)
                    self.state = 1746
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==XplorMRParser.Equ_op:
                        self.state = 1745
                        self.match(XplorMRParser.Equ_op)


                    self.state = 1748
                    self.match(XplorMRParser.Simple_name)
                    pass
                else:
                    raise NoViableAltException(self)

                pass
            elif token in [XplorMRParser.Reset]:
                self.enterOuterAlt(localctx, 10)
                self.state = 1751
                self.match(XplorMRParser.Reset)
                pass
            elif token in [XplorMRParser.Size]:
                self.enterOuterAlt(localctx, 11)
                self.state = 1752
                self.match(XplorMRParser.Size)
                self.state = 1753
                self.match(XplorMRParser.Angle_or_Dihedral)
                self.state = 1754
                self.match(XplorMRParser.Integer)
                self.state = 1755
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.Zero]:
                self.enterOuterAlt(localctx, 12)
                self.state = 1756
                self.match(XplorMRParser.Zero)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Angle_db_assignContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Assign(self):
            return self.getToken(XplorMRParser.Assign, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.SelectionContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_angle_db_assign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAngle_db_assign" ):
                listener.enterAngle_db_assign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAngle_db_assign" ):
                listener.exitAngle_db_assign(self)




    def angle_db_assign(self):

        localctx = XplorMRParser.Angle_db_assignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 152, self.RULE_angle_db_assign)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1759
            self.match(XplorMRParser.Assign)
            self.state = 1760
            self.selection()
            self.state = 1761
            self.selection()
            self.state = 1762
            self.selection()
            self.state = 1763
            self.selection()
            self.state = 1764
            self.selection()
            self.state = 1765
            self.selection()
            self.state = 1766
            self.selection()
            self.state = 1767
            self.selection()
            self.state = 1768
            self.selection()
            self.state = 1769
            self.selection()
            self.state = 1770
            self.selection()
            self.state = 1772
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==XplorMRParser.L_paren:
                self.state = 1771
                self.selection()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pre_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def pre_assign(self):
            return self.getTypedRuleContext(XplorMRParser.Pre_assignContext,0)


        def pre_assign_loop(self):
            return self.getTypedRuleContext(XplorMRParser.Pre_assign_loopContext,0)


        def Classification(self):
            return self.getToken(XplorMRParser.Classification, 0)

        def Simple_name(self):
            return self.getToken(XplorMRParser.Simple_name, 0)

        def Equ_op(self):
            return self.getToken(XplorMRParser.Equ_op, 0)

        def ForceConstant(self):
            return self.getToken(XplorMRParser.ForceConstant, 0)

        def number_s(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Number_sContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Number_sContext,i)


        def Nrestraints(self):
            return self.getToken(XplorMRParser.Nrestraints, 0)

        def Integer(self):
            return self.getToken(XplorMRParser.Integer, 0)

        def Potential(self):
            return self.getToken(XplorMRParser.Potential, 0)

        def Simple_name_P(self):
            return self.getToken(XplorMRParser.Simple_name_P, 0)

        def Potential_types(self):
            return self.getToken(XplorMRParser.Potential_types, 0)

        def Equ_op_P(self):
            return self.getToken(XplorMRParser.Equ_op_P, 0)

        def Kconst(self):
            return self.getToken(XplorMRParser.Kconst, 0)

        def Omega(self):
            return self.getToken(XplorMRParser.Omega, 0)

        def Tauc(self):
            return self.getToken(XplorMRParser.Tauc, 0)

        def Print(self):
            return self.getToken(XplorMRParser.Print, 0)

        def Threshold(self):
            return self.getToken(XplorMRParser.Threshold, 0)

        def All(self):
            return self.getToken(XplorMRParser.All, 0)

        def Reset(self):
            return self.getToken(XplorMRParser.Reset, 0)

        def Debug(self):
            return self.getToken(XplorMRParser.Debug, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_pre_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPre_statement" ):
                listener.enterPre_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPre_statement" ):
                listener.exitPre_statement(self)




    def pre_statement(self):

        localctx = XplorMRParser.Pre_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 154, self.RULE_pre_statement)
        self._la = 0 # Token type
        try:
            self.state = 1831
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [XplorMRParser.Assign]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1774
                self.pre_assign()
                pass
            elif token in [XplorMRParser.For]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1775
                self.pre_assign_loop()
                pass
            elif token in [XplorMRParser.Classification]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1776
                self.match(XplorMRParser.Classification)
                self.state = 1778
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 1777
                    self.match(XplorMRParser.Equ_op)


                self.state = 1780
                self.match(XplorMRParser.Simple_name)
                pass
            elif token in [XplorMRParser.ForceConstant]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1781
                self.match(XplorMRParser.ForceConstant)
                self.state = 1783
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 1782
                    self.match(XplorMRParser.Equ_op)


                self.state = 1785
                self.match(XplorMRParser.Simple_name)
                self.state = 1786
                self.number_s()
                pass
            elif token in [XplorMRParser.Nrestraints]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1787
                self.match(XplorMRParser.Nrestraints)
                self.state = 1789
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 1788
                    self.match(XplorMRParser.Equ_op)


                self.state = 1791
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.Potential]:
                self.enterOuterAlt(localctx, 6)
                self.state = 1792
                self.match(XplorMRParser.Potential)
                self.state = 1794
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op_P:
                    self.state = 1793
                    self.match(XplorMRParser.Equ_op_P)


                self.state = 1796
                self.match(XplorMRParser.Simple_name_P)
                self.state = 1797
                self.match(XplorMRParser.Potential_types)
                pass
            elif token in [XplorMRParser.Kconst]:
                self.enterOuterAlt(localctx, 7)
                self.state = 1798
                self.match(XplorMRParser.Kconst)
                self.state = 1800
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 1799
                    self.match(XplorMRParser.Equ_op)


                self.state = 1802
                self.match(XplorMRParser.Simple_name)
                self.state = 1803
                self.number_s()
                pass
            elif token in [XplorMRParser.Omega]:
                self.enterOuterAlt(localctx, 8)
                self.state = 1804
                self.match(XplorMRParser.Omega)
                self.state = 1806
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 1805
                    self.match(XplorMRParser.Equ_op)


                self.state = 1808
                self.match(XplorMRParser.Simple_name)
                self.state = 1809
                self.number_s()
                pass
            elif token in [XplorMRParser.Tauc]:
                self.enterOuterAlt(localctx, 9)
                self.state = 1810
                self.match(XplorMRParser.Tauc)
                self.state = 1812
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 1811
                    self.match(XplorMRParser.Equ_op)


                self.state = 1814
                self.match(XplorMRParser.Simple_name)
                self.state = 1815
                self.number_s()
                self.state = 1816
                self.number_s()
                pass
            elif token in [XplorMRParser.Print]:
                self.enterOuterAlt(localctx, 10)
                self.state = 1818
                self.match(XplorMRParser.Print)
                self.state = 1819
                self.match(XplorMRParser.Threshold)
                self.state = 1820
                self.number_s()
                self.state = 1827
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [XplorMRParser.All]:
                    self.state = 1821
                    self.match(XplorMRParser.All)
                    pass
                elif token in [XplorMRParser.Classification]:
                    self.state = 1822
                    self.match(XplorMRParser.Classification)
                    self.state = 1824
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==XplorMRParser.Equ_op:
                        self.state = 1823
                        self.match(XplorMRParser.Equ_op)


                    self.state = 1826
                    self.match(XplorMRParser.Simple_name)
                    pass
                else:
                    raise NoViableAltException(self)

                pass
            elif token in [XplorMRParser.Reset]:
                self.enterOuterAlt(localctx, 11)
                self.state = 1829
                self.match(XplorMRParser.Reset)
                pass
            elif token in [XplorMRParser.Debug]:
                self.enterOuterAlt(localctx, 12)
                self.state = 1830
                self.match(XplorMRParser.Debug)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pre_assignContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Assign(self):
            return self.getToken(XplorMRParser.Assign, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.SelectionContext,i)


        def number(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.NumberContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.NumberContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_pre_assign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPre_assign" ):
                listener.enterPre_assign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPre_assign" ):
                listener.exitPre_assign(self)




    def pre_assign(self):

        localctx = XplorMRParser.Pre_assignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 156, self.RULE_pre_assign)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1833
            self.match(XplorMRParser.Assign)
            self.state = 1834
            self.selection()
            self.state = 1835
            self.selection()
            self.state = 1836
            self.number()
            self.state = 1838
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 177)) & ~0x3f) == 0 and ((1 << (_la - 177)) & ((1 << (XplorMRParser.Integer - 177)) | (1 << (XplorMRParser.Real - 177)) | (1 << (XplorMRParser.Symbol_name - 177)))) != 0):
                self.state = 1837
                self.number()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pcs_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def pcs_assign(self):
            return self.getTypedRuleContext(XplorMRParser.Pcs_assignContext,0)


        def pcs_assign_loop(self):
            return self.getTypedRuleContext(XplorMRParser.Pcs_assign_loopContext,0)


        def Classification(self):
            return self.getToken(XplorMRParser.Classification, 0)

        def Simple_name(self):
            return self.getToken(XplorMRParser.Simple_name, 0)

        def Equ_op(self):
            return self.getToken(XplorMRParser.Equ_op, 0)

        def Tolerance(self):
            return self.getToken(XplorMRParser.Tolerance, 0)

        def Integer(self):
            return self.getToken(XplorMRParser.Integer, 0)

        def Coefficients(self):
            return self.getToken(XplorMRParser.Coefficients, 0)

        def number_s(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Number_sContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Number_sContext,i)


        def ForceConstant(self):
            return self.getToken(XplorMRParser.ForceConstant, 0)

        def Nrestraints(self):
            return self.getToken(XplorMRParser.Nrestraints, 0)

        def Print(self):
            return self.getToken(XplorMRParser.Print, 0)

        def Threshold(self):
            return self.getToken(XplorMRParser.Threshold, 0)

        def All(self):
            return self.getToken(XplorMRParser.All, 0)

        def Reset(self):
            return self.getToken(XplorMRParser.Reset, 0)

        def Save(self):
            return self.getToken(XplorMRParser.Save, 0)

        def Fmed(self):
            return self.getToken(XplorMRParser.Fmed, 0)

        def ErrOn(self):
            return self.getToken(XplorMRParser.ErrOn, 0)

        def ErrOff(self):
            return self.getToken(XplorMRParser.ErrOff, 0)

        def Fon(self):
            return self.getToken(XplorMRParser.Fon, 0)

        def Foff(self):
            return self.getToken(XplorMRParser.Foff, 0)

        def Son(self):
            return self.getToken(XplorMRParser.Son, 0)

        def Soff(self):
            return self.getToken(XplorMRParser.Soff, 0)

        def Frun(self):
            return self.getToken(XplorMRParser.Frun, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_pcs_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPcs_statement" ):
                listener.enterPcs_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPcs_statement" ):
                listener.exitPcs_statement(self)




    def pcs_statement(self):

        localctx = XplorMRParser.Pcs_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 158, self.RULE_pcs_statement)
        self._la = 0 # Token type
        try:
            self.state = 1889
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [XplorMRParser.Assign]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1840
                self.pcs_assign()
                pass
            elif token in [XplorMRParser.For]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1841
                self.pcs_assign_loop()
                pass
            elif token in [XplorMRParser.Classification]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1842
                self.match(XplorMRParser.Classification)
                self.state = 1844
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 1843
                    self.match(XplorMRParser.Equ_op)


                self.state = 1846
                self.match(XplorMRParser.Simple_name)
                pass
            elif token in [XplorMRParser.Tolerance]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1847
                self.match(XplorMRParser.Tolerance)
                self.state = 1848
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.Coefficients]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1849
                self.match(XplorMRParser.Coefficients)
                self.state = 1850
                self.number_s()
                self.state = 1851
                self.number_s()
                pass
            elif token in [XplorMRParser.ForceConstant]:
                self.enterOuterAlt(localctx, 6)
                self.state = 1853
                self.match(XplorMRParser.ForceConstant)
                self.state = 1855
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 1854
                    self.match(XplorMRParser.Equ_op)


                self.state = 1857
                self.number_s()
                pass
            elif token in [XplorMRParser.Nrestraints]:
                self.enterOuterAlt(localctx, 7)
                self.state = 1858
                self.match(XplorMRParser.Nrestraints)
                self.state = 1860
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 1859
                    self.match(XplorMRParser.Equ_op)


                self.state = 1862
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.Print]:
                self.enterOuterAlt(localctx, 8)
                self.state = 1863
                self.match(XplorMRParser.Print)
                self.state = 1864
                self.match(XplorMRParser.Threshold)
                self.state = 1865
                self.number_s()
                self.state = 1872
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [XplorMRParser.All]:
                    self.state = 1866
                    self.match(XplorMRParser.All)
                    pass
                elif token in [XplorMRParser.Classification]:
                    self.state = 1867
                    self.match(XplorMRParser.Classification)
                    self.state = 1869
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==XplorMRParser.Equ_op:
                        self.state = 1868
                        self.match(XplorMRParser.Equ_op)


                    self.state = 1871
                    self.match(XplorMRParser.Simple_name)
                    pass
                else:
                    raise NoViableAltException(self)

                pass
            elif token in [XplorMRParser.Reset]:
                self.enterOuterAlt(localctx, 9)
                self.state = 1874
                self.match(XplorMRParser.Reset)
                pass
            elif token in [XplorMRParser.Save]:
                self.enterOuterAlt(localctx, 10)
                self.state = 1875
                self.match(XplorMRParser.Save)
                self.state = 1876
                self.match(XplorMRParser.Simple_name)
                pass
            elif token in [XplorMRParser.Fmed]:
                self.enterOuterAlt(localctx, 11)
                self.state = 1877
                self.match(XplorMRParser.Fmed)
                self.state = 1878
                self.number_s()
                self.state = 1879
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.ErrOn]:
                self.enterOuterAlt(localctx, 12)
                self.state = 1881
                self.match(XplorMRParser.ErrOn)
                pass
            elif token in [XplorMRParser.ErrOff]:
                self.enterOuterAlt(localctx, 13)
                self.state = 1882
                self.match(XplorMRParser.ErrOff)
                pass
            elif token in [XplorMRParser.Fon]:
                self.enterOuterAlt(localctx, 14)
                self.state = 1883
                self.match(XplorMRParser.Fon)
                pass
            elif token in [XplorMRParser.Foff]:
                self.enterOuterAlt(localctx, 15)
                self.state = 1884
                self.match(XplorMRParser.Foff)
                pass
            elif token in [XplorMRParser.Son]:
                self.enterOuterAlt(localctx, 16)
                self.state = 1885
                self.match(XplorMRParser.Son)
                pass
            elif token in [XplorMRParser.Soff]:
                self.enterOuterAlt(localctx, 17)
                self.state = 1886
                self.match(XplorMRParser.Soff)
                pass
            elif token in [XplorMRParser.Frun]:
                self.enterOuterAlt(localctx, 18)
                self.state = 1887
                self.match(XplorMRParser.Frun)
                self.state = 1888
                self.match(XplorMRParser.Integer)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pcs_assignContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Assign(self):
            return self.getToken(XplorMRParser.Assign, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.SelectionContext,i)


        def number(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.NumberContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.NumberContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_pcs_assign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPcs_assign" ):
                listener.enterPcs_assign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPcs_assign" ):
                listener.exitPcs_assign(self)




    def pcs_assign(self):

        localctx = XplorMRParser.Pcs_assignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 160, self.RULE_pcs_assign)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1891
            self.match(XplorMRParser.Assign)
            self.state = 1892
            self.selection()
            self.state = 1893
            self.selection()
            self.state = 1894
            self.selection()
            self.state = 1895
            self.selection()
            self.state = 1896
            self.selection()
            self.state = 1897
            self.number()
            self.state = 1899
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 177)) & ~0x3f) == 0 and ((1 << (_la - 177)) & ((1 << (XplorMRParser.Integer - 177)) | (1 << (XplorMRParser.Real - 177)) | (1 << (XplorMRParser.Symbol_name - 177)))) != 0):
                self.state = 1898
                self.number()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Prdc_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def prdc_assign(self):
            return self.getTypedRuleContext(XplorMRParser.Prdc_assignContext,0)


        def Classification(self):
            return self.getToken(XplorMRParser.Classification, 0)

        def Simple_name(self):
            return self.getToken(XplorMRParser.Simple_name, 0)

        def Equ_op(self):
            return self.getToken(XplorMRParser.Equ_op, 0)

        def Tolerance(self):
            return self.getToken(XplorMRParser.Tolerance, 0)

        def Integer(self):
            return self.getToken(XplorMRParser.Integer, 0)

        def Coefficients(self):
            return self.getToken(XplorMRParser.Coefficients, 0)

        def number_s(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Number_sContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Number_sContext,i)


        def ForceConstant(self):
            return self.getToken(XplorMRParser.ForceConstant, 0)

        def Nrestraints(self):
            return self.getToken(XplorMRParser.Nrestraints, 0)

        def ErrOn(self):
            return self.getToken(XplorMRParser.ErrOn, 0)

        def ErrOff(self):
            return self.getToken(XplorMRParser.ErrOff, 0)

        def Fmed(self):
            return self.getToken(XplorMRParser.Fmed, 0)

        def Fon(self):
            return self.getToken(XplorMRParser.Fon, 0)

        def Foff(self):
            return self.getToken(XplorMRParser.Foff, 0)

        def Frun(self):
            return self.getToken(XplorMRParser.Frun, 0)

        def Print(self):
            return self.getToken(XplorMRParser.Print, 0)

        def Threshold(self):
            return self.getToken(XplorMRParser.Threshold, 0)

        def Reset(self):
            return self.getToken(XplorMRParser.Reset, 0)

        def Save(self):
            return self.getToken(XplorMRParser.Save, 0)

        def Son(self):
            return self.getToken(XplorMRParser.Son, 0)

        def Soff(self):
            return self.getToken(XplorMRParser.Soff, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_prdc_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrdc_statement" ):
                listener.enterPrdc_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrdc_statement" ):
                listener.exitPrdc_statement(self)




    def prdc_statement(self):

        localctx = XplorMRParser.Prdc_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 162, self.RULE_prdc_statement)
        self._la = 0 # Token type
        try:
            self.state = 1936
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [XplorMRParser.Assign]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1901
                self.prdc_assign()
                pass
            elif token in [XplorMRParser.Classification]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1902
                self.match(XplorMRParser.Classification)
                self.state = 1904
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 1903
                    self.match(XplorMRParser.Equ_op)


                self.state = 1906
                self.match(XplorMRParser.Simple_name)
                pass
            elif token in [XplorMRParser.Tolerance]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1907
                self.match(XplorMRParser.Tolerance)
                self.state = 1908
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.Coefficients]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1909
                self.match(XplorMRParser.Coefficients)
                self.state = 1910
                self.number_s()
                self.state = 1911
                self.number_s()
                pass
            elif token in [XplorMRParser.ForceConstant]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1913
                self.match(XplorMRParser.ForceConstant)
                self.state = 1915
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 1914
                    self.match(XplorMRParser.Equ_op)


                self.state = 1917
                self.number_s()
                pass
            elif token in [XplorMRParser.Nrestraints]:
                self.enterOuterAlt(localctx, 6)
                self.state = 1918
                self.match(XplorMRParser.Nrestraints)
                self.state = 1920
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 1919
                    self.match(XplorMRParser.Equ_op)


                self.state = 1922
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.ErrOn]:
                self.enterOuterAlt(localctx, 7)
                self.state = 1923
                self.match(XplorMRParser.ErrOn)
                pass
            elif token in [XplorMRParser.ErrOff]:
                self.enterOuterAlt(localctx, 8)
                self.state = 1924
                self.match(XplorMRParser.ErrOff)
                pass
            elif token in [XplorMRParser.Fmed]:
                self.enterOuterAlt(localctx, 9)
                self.state = 1925
                self.match(XplorMRParser.Fmed)
                pass
            elif token in [XplorMRParser.Fon]:
                self.enterOuterAlt(localctx, 10)
                self.state = 1926
                self.match(XplorMRParser.Fon)
                pass
            elif token in [XplorMRParser.Foff]:
                self.enterOuterAlt(localctx, 11)
                self.state = 1927
                self.match(XplorMRParser.Foff)
                pass
            elif token in [XplorMRParser.Frun]:
                self.enterOuterAlt(localctx, 12)
                self.state = 1928
                self.match(XplorMRParser.Frun)
                pass
            elif token in [XplorMRParser.Print]:
                self.enterOuterAlt(localctx, 13)
                self.state = 1929
                self.match(XplorMRParser.Print)
                self.state = 1930
                self.match(XplorMRParser.Threshold)
                pass
            elif token in [XplorMRParser.Reset]:
                self.enterOuterAlt(localctx, 14)
                self.state = 1931
                self.match(XplorMRParser.Reset)
                pass
            elif token in [XplorMRParser.Save]:
                self.enterOuterAlt(localctx, 15)
                self.state = 1932
                self.match(XplorMRParser.Save)
                self.state = 1933
                self.match(XplorMRParser.Simple_name)
                pass
            elif token in [XplorMRParser.Son]:
                self.enterOuterAlt(localctx, 16)
                self.state = 1934
                self.match(XplorMRParser.Son)
                pass
            elif token in [XplorMRParser.Soff]:
                self.enterOuterAlt(localctx, 17)
                self.state = 1935
                self.match(XplorMRParser.Soff)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Prdc_assignContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Assign(self):
            return self.getToken(XplorMRParser.Assign, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.SelectionContext,i)


        def number(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.NumberContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.NumberContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_prdc_assign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrdc_assign" ):
                listener.enterPrdc_assign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrdc_assign" ):
                listener.exitPrdc_assign(self)




    def prdc_assign(self):

        localctx = XplorMRParser.Prdc_assignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 164, self.RULE_prdc_assign)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1938
            self.match(XplorMRParser.Assign)
            self.state = 1939
            self.selection()
            self.state = 1940
            self.selection()
            self.state = 1941
            self.selection()
            self.state = 1942
            self.selection()
            self.state = 1943
            self.selection()
            self.state = 1944
            self.selection()
            self.state = 1945
            self.number()
            self.state = 1947
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 177)) & ~0x3f) == 0 and ((1 << (_la - 177)) & ((1 << (XplorMRParser.Integer - 177)) | (1 << (XplorMRParser.Real - 177)) | (1 << (XplorMRParser.Symbol_name - 177)))) != 0):
                self.state = 1946
                self.number()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Porientation_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def porientation_assign(self):
            return self.getTypedRuleContext(XplorMRParser.Porientation_assignContext,0)


        def Classification(self):
            return self.getToken(XplorMRParser.Classification, 0)

        def Simple_name(self):
            return self.getToken(XplorMRParser.Simple_name, 0)

        def Equ_op(self):
            return self.getToken(XplorMRParser.Equ_op, 0)

        def ForceConstant(self):
            return self.getToken(XplorMRParser.ForceConstant, 0)

        def number_s(self):
            return self.getTypedRuleContext(XplorMRParser.Number_sContext,0)


        def Nrestraints(self):
            return self.getToken(XplorMRParser.Nrestraints, 0)

        def Integer(self):
            return self.getToken(XplorMRParser.Integer, 0)

        def Print(self):
            return self.getToken(XplorMRParser.Print, 0)

        def Threshold(self):
            return self.getToken(XplorMRParser.Threshold, 0)

        def Reset(self):
            return self.getToken(XplorMRParser.Reset, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_porientation_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPorientation_statement" ):
                listener.enterPorientation_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPorientation_statement" ):
                listener.exitPorientation_statement(self)




    def porientation_statement(self):

        localctx = XplorMRParser.Porientation_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 166, self.RULE_porientation_statement)
        self._la = 0 # Token type
        try:
            self.state = 1969
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [XplorMRParser.Assign]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1949
                self.porientation_assign()
                pass
            elif token in [XplorMRParser.Classification]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1950
                self.match(XplorMRParser.Classification)
                self.state = 1952
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 1951
                    self.match(XplorMRParser.Equ_op)


                self.state = 1954
                self.match(XplorMRParser.Simple_name)
                pass
            elif token in [XplorMRParser.ForceConstant]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1955
                self.match(XplorMRParser.ForceConstant)
                self.state = 1957
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 1956
                    self.match(XplorMRParser.Equ_op)


                self.state = 1959
                self.number_s()
                pass
            elif token in [XplorMRParser.Nrestraints]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1960
                self.match(XplorMRParser.Nrestraints)
                self.state = 1962
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 1961
                    self.match(XplorMRParser.Equ_op)


                self.state = 1964
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.Print]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1965
                self.match(XplorMRParser.Print)
                self.state = 1966
                self.match(XplorMRParser.Threshold)
                self.state = 1967
                self.number_s()
                pass
            elif token in [XplorMRParser.Reset]:
                self.enterOuterAlt(localctx, 6)
                self.state = 1968
                self.match(XplorMRParser.Reset)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Porientation_assignContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Assign(self):
            return self.getToken(XplorMRParser.Assign, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.SelectionContext,i)


        def number(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.NumberContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.NumberContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_porientation_assign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPorientation_assign" ):
                listener.enterPorientation_assign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPorientation_assign" ):
                listener.exitPorientation_assign(self)




    def porientation_assign(self):

        localctx = XplorMRParser.Porientation_assignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 168, self.RULE_porientation_assign)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1971
            self.match(XplorMRParser.Assign)
            self.state = 1972
            self.selection()
            self.state = 1973
            self.selection()
            self.state = 1974
            self.number()
            self.state = 1975
            self.number()
            self.state = 1976
            self.number()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pccr_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def pccr_assign(self):
            return self.getTypedRuleContext(XplorMRParser.Pccr_assignContext,0)


        def Classification(self):
            return self.getToken(XplorMRParser.Classification, 0)

        def Simple_name(self):
            return self.getToken(XplorMRParser.Simple_name, 0)

        def Equ_op(self):
            return self.getToken(XplorMRParser.Equ_op, 0)

        def Weip(self):
            return self.getToken(XplorMRParser.Weip, 0)

        def Integer(self):
            return self.getToken(XplorMRParser.Integer, 0)

        def Coefficients(self):
            return self.getToken(XplorMRParser.Coefficients, 0)

        def number_s(self):
            return self.getTypedRuleContext(XplorMRParser.Number_sContext,0)


        def ForceConstant(self):
            return self.getToken(XplorMRParser.ForceConstant, 0)

        def Nrestraints(self):
            return self.getToken(XplorMRParser.Nrestraints, 0)

        def Print(self):
            return self.getToken(XplorMRParser.Print, 0)

        def Threshold(self):
            return self.getToken(XplorMRParser.Threshold, 0)

        def Reset(self):
            return self.getToken(XplorMRParser.Reset, 0)

        def Frun(self):
            return self.getToken(XplorMRParser.Frun, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_pccr_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPccr_statement" ):
                listener.enterPccr_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPccr_statement" ):
                listener.exitPccr_statement(self)




    def pccr_statement(self):

        localctx = XplorMRParser.Pccr_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 170, self.RULE_pccr_statement)
        self._la = 0 # Token type
        try:
            self.state = 2004
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [XplorMRParser.Assign]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1978
                self.pccr_assign()
                pass
            elif token in [XplorMRParser.Classification]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1979
                self.match(XplorMRParser.Classification)
                self.state = 1981
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 1980
                    self.match(XplorMRParser.Equ_op)


                self.state = 1983
                self.match(XplorMRParser.Simple_name)
                pass
            elif token in [XplorMRParser.Weip]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1984
                self.match(XplorMRParser.Weip)
                self.state = 1985
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.Coefficients]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1986
                self.match(XplorMRParser.Coefficients)
                self.state = 1987
                self.number_s()
                pass
            elif token in [XplorMRParser.ForceConstant]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1988
                self.match(XplorMRParser.ForceConstant)
                self.state = 1990
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 1989
                    self.match(XplorMRParser.Equ_op)


                self.state = 1992
                self.number_s()
                pass
            elif token in [XplorMRParser.Nrestraints]:
                self.enterOuterAlt(localctx, 6)
                self.state = 1993
                self.match(XplorMRParser.Nrestraints)
                self.state = 1995
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 1994
                    self.match(XplorMRParser.Equ_op)


                self.state = 1997
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.Print]:
                self.enterOuterAlt(localctx, 7)
                self.state = 1998
                self.match(XplorMRParser.Print)
                self.state = 1999
                self.match(XplorMRParser.Threshold)
                self.state = 2000
                self.number_s()
                pass
            elif token in [XplorMRParser.Reset]:
                self.enterOuterAlt(localctx, 8)
                self.state = 2001
                self.match(XplorMRParser.Reset)
                pass
            elif token in [XplorMRParser.Frun]:
                self.enterOuterAlt(localctx, 9)
                self.state = 2002
                self.match(XplorMRParser.Frun)
                self.state = 2003
                self.match(XplorMRParser.Integer)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pccr_assignContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Assign(self):
            return self.getToken(XplorMRParser.Assign, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.SelectionContext,i)


        def number(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.NumberContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.NumberContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_pccr_assign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPccr_assign" ):
                listener.enterPccr_assign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPccr_assign" ):
                listener.exitPccr_assign(self)




    def pccr_assign(self):

        localctx = XplorMRParser.Pccr_assignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 172, self.RULE_pccr_assign)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2006
            self.match(XplorMRParser.Assign)
            self.state = 2007
            self.selection()
            self.state = 2008
            self.selection()
            self.state = 2009
            self.selection()
            self.state = 2010
            self.number()
            self.state = 2012
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 177)) & ~0x3f) == 0 and ((1 << (_la - 177)) & ((1 << (XplorMRParser.Integer - 177)) | (1 << (XplorMRParser.Real - 177)) | (1 << (XplorMRParser.Symbol_name - 177)))) != 0):
                self.state = 2011
                self.number()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Hbond_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def hbond_assign(self):
            return self.getTypedRuleContext(XplorMRParser.Hbond_assignContext,0)


        def hbond_assign_loop(self):
            return self.getTypedRuleContext(XplorMRParser.Hbond_assign_loopContext,0)


        def Classification(self):
            return self.getToken(XplorMRParser.Classification, 0)

        def Simple_name(self):
            return self.getToken(XplorMRParser.Simple_name, 0)

        def Equ_op(self):
            return self.getToken(XplorMRParser.Equ_op, 0)

        def ForceConstant(self):
            return self.getToken(XplorMRParser.ForceConstant, 0)

        def number_s(self):
            return self.getTypedRuleContext(XplorMRParser.Number_sContext,0)


        def Nrestraints(self):
            return self.getToken(XplorMRParser.Nrestraints, 0)

        def Integer(self):
            return self.getToken(XplorMRParser.Integer, 0)

        def Print(self):
            return self.getToken(XplorMRParser.Print, 0)

        def Threshold(self):
            return self.getToken(XplorMRParser.Threshold, 0)

        def Reset(self):
            return self.getToken(XplorMRParser.Reset, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_hbond_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHbond_statement" ):
                listener.enterHbond_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHbond_statement" ):
                listener.exitHbond_statement(self)




    def hbond_statement(self):

        localctx = XplorMRParser.Hbond_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 174, self.RULE_hbond_statement)
        self._la = 0 # Token type
        try:
            self.state = 2035
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [XplorMRParser.Assign]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2014
                self.hbond_assign()
                pass
            elif token in [XplorMRParser.For]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2015
                self.hbond_assign_loop()
                pass
            elif token in [XplorMRParser.Classification]:
                self.enterOuterAlt(localctx, 3)
                self.state = 2016
                self.match(XplorMRParser.Classification)
                self.state = 2018
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 2017
                    self.match(XplorMRParser.Equ_op)


                self.state = 2020
                self.match(XplorMRParser.Simple_name)
                pass
            elif token in [XplorMRParser.ForceConstant]:
                self.enterOuterAlt(localctx, 4)
                self.state = 2021
                self.match(XplorMRParser.ForceConstant)
                self.state = 2023
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 2022
                    self.match(XplorMRParser.Equ_op)


                self.state = 2025
                self.number_s()
                pass
            elif token in [XplorMRParser.Nrestraints]:
                self.enterOuterAlt(localctx, 5)
                self.state = 2026
                self.match(XplorMRParser.Nrestraints)
                self.state = 2028
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 2027
                    self.match(XplorMRParser.Equ_op)


                self.state = 2030
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.Print]:
                self.enterOuterAlt(localctx, 6)
                self.state = 2031
                self.match(XplorMRParser.Print)
                self.state = 2032
                self.match(XplorMRParser.Threshold)
                self.state = 2033
                self.number_s()
                pass
            elif token in [XplorMRParser.Reset]:
                self.enterOuterAlt(localctx, 7)
                self.state = 2034
                self.match(XplorMRParser.Reset)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Hbond_assignContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Assign(self):
            return self.getToken(XplorMRParser.Assign, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.SelectionContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_hbond_assign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHbond_assign" ):
                listener.enterHbond_assign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHbond_assign" ):
                listener.exitHbond_assign(self)




    def hbond_assign(self):

        localctx = XplorMRParser.Hbond_assignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 176, self.RULE_hbond_assign)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2037
            self.match(XplorMRParser.Assign)
            self.state = 2038
            self.selection()
            self.state = 2039
            self.selection()
            self.state = 2040
            self.selection()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Hbond_db_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def hbond_db_assign(self):
            return self.getTypedRuleContext(XplorMRParser.Hbond_db_assignContext,0)


        def hbond_db_assign_loop(self):
            return self.getTypedRuleContext(XplorMRParser.Hbond_db_assign_loopContext,0)


        def Kdir(self):
            return self.getToken(XplorMRParser.Kdir, 0)

        def number_s(self):
            return self.getTypedRuleContext(XplorMRParser.Number_sContext,0)


        def Equ_op(self):
            return self.getToken(XplorMRParser.Equ_op, 0)

        def Klin(self):
            return self.getToken(XplorMRParser.Klin, 0)

        def Nseg(self):
            return self.getToken(XplorMRParser.Nseg, 0)

        def Integer(self):
            return self.getToken(XplorMRParser.Integer, 0)

        def Nmin(self):
            return self.getToken(XplorMRParser.Nmin, 0)

        def Nmax(self):
            return self.getToken(XplorMRParser.Nmax, 0)

        def Segm(self):
            return self.getToken(XplorMRParser.Segm, 0)

        def Simple_name(self):
            return self.getToken(XplorMRParser.Simple_name, 0)

        def Ohcut(self):
            return self.getToken(XplorMRParser.Ohcut, 0)

        def Coh1cut(self):
            return self.getToken(XplorMRParser.Coh1cut, 0)

        def Coh2cut(self):
            return self.getToken(XplorMRParser.Coh2cut, 0)

        def Ohncut(self):
            return self.getToken(XplorMRParser.Ohncut, 0)

        def Updfrq(self):
            return self.getToken(XplorMRParser.Updfrq, 0)

        def Prnfrq(self):
            return self.getToken(XplorMRParser.Prnfrq, 0)

        def Freemode(self):
            return self.getToken(XplorMRParser.Freemode, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_hbond_db_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHbond_db_statement" ):
                listener.enterHbond_db_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHbond_db_statement" ):
                listener.exitHbond_db_statement(self)




    def hbond_db_statement(self):

        localctx = XplorMRParser.Hbond_db_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 178, self.RULE_hbond_db_statement)
        self._la = 0 # Token type
        try:
            self.state = 2109
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [XplorMRParser.Assign]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2042
                self.hbond_db_assign()
                pass
            elif token in [XplorMRParser.For]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2043
                self.hbond_db_assign_loop()
                pass
            elif token in [XplorMRParser.Kdir]:
                self.enterOuterAlt(localctx, 3)
                self.state = 2044
                self.match(XplorMRParser.Kdir)
                self.state = 2046
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 2045
                    self.match(XplorMRParser.Equ_op)


                self.state = 2048
                self.number_s()
                pass
            elif token in [XplorMRParser.Klin]:
                self.enterOuterAlt(localctx, 4)
                self.state = 2049
                self.match(XplorMRParser.Klin)
                self.state = 2051
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 2050
                    self.match(XplorMRParser.Equ_op)


                self.state = 2053
                self.number_s()
                pass
            elif token in [XplorMRParser.Nseg]:
                self.enterOuterAlt(localctx, 5)
                self.state = 2054
                self.match(XplorMRParser.Nseg)
                self.state = 2056
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 2055
                    self.match(XplorMRParser.Equ_op)


                self.state = 2058
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.Nmin]:
                self.enterOuterAlt(localctx, 6)
                self.state = 2059
                self.match(XplorMRParser.Nmin)
                self.state = 2061
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 2060
                    self.match(XplorMRParser.Equ_op)


                self.state = 2063
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.Nmax]:
                self.enterOuterAlt(localctx, 7)
                self.state = 2064
                self.match(XplorMRParser.Nmax)
                self.state = 2066
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 2065
                    self.match(XplorMRParser.Equ_op)


                self.state = 2068
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.Segm]:
                self.enterOuterAlt(localctx, 8)
                self.state = 2069
                self.match(XplorMRParser.Segm)
                self.state = 2071
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 2070
                    self.match(XplorMRParser.Equ_op)


                self.state = 2073
                self.match(XplorMRParser.Simple_name)
                pass
            elif token in [XplorMRParser.Ohcut]:
                self.enterOuterAlt(localctx, 9)
                self.state = 2074
                self.match(XplorMRParser.Ohcut)
                self.state = 2076
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 2075
                    self.match(XplorMRParser.Equ_op)


                self.state = 2078
                self.number_s()
                pass
            elif token in [XplorMRParser.Coh1cut]:
                self.enterOuterAlt(localctx, 10)
                self.state = 2079
                self.match(XplorMRParser.Coh1cut)
                self.state = 2081
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 2080
                    self.match(XplorMRParser.Equ_op)


                self.state = 2083
                self.number_s()
                pass
            elif token in [XplorMRParser.Coh2cut]:
                self.enterOuterAlt(localctx, 11)
                self.state = 2084
                self.match(XplorMRParser.Coh2cut)
                self.state = 2086
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 2085
                    self.match(XplorMRParser.Equ_op)


                self.state = 2088
                self.number_s()
                pass
            elif token in [XplorMRParser.Ohncut]:
                self.enterOuterAlt(localctx, 12)
                self.state = 2089
                self.match(XplorMRParser.Ohncut)
                self.state = 2091
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 2090
                    self.match(XplorMRParser.Equ_op)


                self.state = 2093
                self.number_s()
                pass
            elif token in [XplorMRParser.Updfrq]:
                self.enterOuterAlt(localctx, 13)
                self.state = 2094
                self.match(XplorMRParser.Updfrq)
                self.state = 2096
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 2095
                    self.match(XplorMRParser.Equ_op)


                self.state = 2098
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.Prnfrq]:
                self.enterOuterAlt(localctx, 14)
                self.state = 2099
                self.match(XplorMRParser.Prnfrq)
                self.state = 2101
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 2100
                    self.match(XplorMRParser.Equ_op)


                self.state = 2103
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.Freemode]:
                self.enterOuterAlt(localctx, 15)
                self.state = 2104
                self.match(XplorMRParser.Freemode)
                self.state = 2106
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 2105
                    self.match(XplorMRParser.Equ_op)


                self.state = 2108
                self.match(XplorMRParser.Integer)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Hbond_db_assignContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Assign(self):
            return self.getToken(XplorMRParser.Assign, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.SelectionContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_hbond_db_assign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHbond_db_assign" ):
                listener.enterHbond_db_assign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHbond_db_assign" ):
                listener.exitHbond_db_assign(self)




    def hbond_db_assign(self):

        localctx = XplorMRParser.Hbond_db_assignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 180, self.RULE_hbond_db_assign)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2111
            self.match(XplorMRParser.Assign)
            self.state = 2112
            self.selection()
            self.state = 2113
            self.selection()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SelectionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def L_paren(self):
            return self.getToken(XplorMRParser.L_paren, 0)

        def selection_expression(self):
            return self.getTypedRuleContext(XplorMRParser.Selection_expressionContext,0)


        def R_paren(self):
            return self.getToken(XplorMRParser.R_paren, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_selection

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSelection" ):
                listener.enterSelection(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSelection" ):
                listener.exitSelection(self)




    def selection(self):

        localctx = XplorMRParser.SelectionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 182, self.RULE_selection)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2115
            self.match(XplorMRParser.L_paren)
            self.state = 2116
            self.selection_expression()
            self.state = 2117
            self.match(XplorMRParser.R_paren)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Selection_expressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def term(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.TermContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.TermContext,i)


        def Or_op(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Or_op)
            else:
                return self.getToken(XplorMRParser.Or_op, i)

        def getRuleIndex(self):
            return XplorMRParser.RULE_selection_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSelection_expression" ):
                listener.enterSelection_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSelection_expression" ):
                listener.exitSelection_expression(self)




    def selection_expression(self):

        localctx = XplorMRParser.Selection_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 184, self.RULE_selection_expression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2119
            self.term()
            self.state = 2124
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==XplorMRParser.Or_op:
                self.state = 2120
                self.match(XplorMRParser.Or_op)
                self.state = 2121
                self.term()
                self.state = 2126
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TermContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def factor(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.FactorContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.FactorContext,i)


        def And_op(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.And_op)
            else:
                return self.getToken(XplorMRParser.And_op, i)

        def getRuleIndex(self):
            return XplorMRParser.RULE_term

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTerm" ):
                listener.enterTerm(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTerm" ):
                listener.exitTerm(self)




    def term(self):

        localctx = XplorMRParser.TermContext(self, self._ctx, self.state)
        self.enterRule(localctx, 186, self.RULE_term)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2127
            self.factor(0)
            self.state = 2132
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==XplorMRParser.And_op:
                self.state = 2128
                self.match(XplorMRParser.And_op)
                self.state = 2129
                self.factor(0)
                self.state = 2134
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FactorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def L_paren(self):
            return self.getToken(XplorMRParser.L_paren, 0)

        def selection_expression(self):
            return self.getTypedRuleContext(XplorMRParser.Selection_expressionContext,0)


        def R_paren(self):
            return self.getToken(XplorMRParser.R_paren, 0)

        def All(self):
            return self.getToken(XplorMRParser.All, 0)

        def Atom(self):
            return self.getToken(XplorMRParser.Atom, 0)

        def Simple_names(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Simple_names)
            else:
                return self.getToken(XplorMRParser.Simple_names, i)

        def Simple_name(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Simple_name)
            else:
                return self.getToken(XplorMRParser.Simple_name, i)

        def Integers(self):
            return self.getToken(XplorMRParser.Integers, 0)

        def Integer(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Integer)
            else:
                return self.getToken(XplorMRParser.Integer, i)

        def Attribute(self):
            return self.getToken(XplorMRParser.Attribute, 0)

        def Attr_properties(self):
            return self.getToken(XplorMRParser.Attr_properties, 0)

        def Comparison_ops(self):
            return self.getToken(XplorMRParser.Comparison_ops, 0)

        def number_f(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Number_fContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Number_fContext,i)


        def Abs(self):
            return self.getToken(XplorMRParser.Abs, 0)

        def BondedTo(self):
            return self.getToken(XplorMRParser.BondedTo, 0)

        def factor(self):
            return self.getTypedRuleContext(XplorMRParser.FactorContext,0)


        def ByGroup(self):
            return self.getToken(XplorMRParser.ByGroup, 0)

        def ByRes(self):
            return self.getToken(XplorMRParser.ByRes, 0)

        def Chemical(self):
            return self.getToken(XplorMRParser.Chemical, 0)

        def Symbol_name(self):
            return self.getToken(XplorMRParser.Symbol_name, 0)

        def Colon(self):
            return self.getToken(XplorMRParser.Colon, 0)

        def Hydrogen(self):
            return self.getToken(XplorMRParser.Hydrogen, 0)

        def Id(self):
            return self.getToken(XplorMRParser.Id, 0)

        def Known(self):
            return self.getToken(XplorMRParser.Known, 0)

        def Name(self):
            return self.getToken(XplorMRParser.Name, 0)

        def Double_quote_string(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Double_quote_string)
            else:
                return self.getToken(XplorMRParser.Double_quote_string, i)

        def Not_op(self):
            return self.getToken(XplorMRParser.Not_op, 0)

        def Point(self):
            return self.getToken(XplorMRParser.Point, 0)

        def Cut(self):
            return self.getToken(XplorMRParser.Cut, 0)

        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Comma)
            else:
                return self.getToken(XplorMRParser.Comma, i)

        def Tail(self):
            return self.getToken(XplorMRParser.Tail, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.SelectionContext,i)


        def Equ_op(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Equ_op)
            else:
                return self.getToken(XplorMRParser.Equ_op, i)

        def Head(self):
            return self.getToken(XplorMRParser.Head, 0)

        def Previous(self):
            return self.getToken(XplorMRParser.Previous, 0)

        def Pseudo(self):
            return self.getToken(XplorMRParser.Pseudo, 0)

        def Residue(self):
            return self.getToken(XplorMRParser.Residue, 0)

        def Resname(self):
            return self.getToken(XplorMRParser.Resname, 0)

        def SegIdentifier(self):
            return self.getToken(XplorMRParser.SegIdentifier, 0)

        def Store_1(self):
            return self.getToken(XplorMRParser.Store_1, 0)

        def Store_2(self):
            return self.getToken(XplorMRParser.Store_2, 0)

        def Store_3(self):
            return self.getToken(XplorMRParser.Store_3, 0)

        def Store_4(self):
            return self.getToken(XplorMRParser.Store_4, 0)

        def Store_5(self):
            return self.getToken(XplorMRParser.Store_5, 0)

        def Store_6(self):
            return self.getToken(XplorMRParser.Store_6, 0)

        def Store_7(self):
            return self.getToken(XplorMRParser.Store_7, 0)

        def Store_8(self):
            return self.getToken(XplorMRParser.Store_8, 0)

        def Store_9(self):
            return self.getToken(XplorMRParser.Store_9, 0)

        def Tag(self):
            return self.getToken(XplorMRParser.Tag, 0)

        def Donor(self):
            return self.getToken(XplorMRParser.Donor, 0)

        def Acceptor(self):
            return self.getToken(XplorMRParser.Acceptor, 0)

        def Around(self):
            return self.getToken(XplorMRParser.Around, 0)

        def Saround(self):
            return self.getToken(XplorMRParser.Saround, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_factor

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFactor" ):
                listener.enterFactor(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFactor" ):
                listener.exitFactor(self)



    def factor(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = XplorMRParser.FactorContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 188
        self.enterRecursionRule(localctx, 188, self.RULE_factor, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2274
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,263,self._ctx)
            if la_ == 1:
                self.state = 2136
                self.match(XplorMRParser.L_paren)
                self.state = 2137
                self.selection_expression()
                self.state = 2138
                self.match(XplorMRParser.R_paren)
                pass

            elif la_ == 2:
                self.state = 2140
                self.match(XplorMRParser.All)
                pass

            elif la_ == 3:
                self.state = 2141
                self.match(XplorMRParser.Atom)
                self.state = 2142
                _la = self._input.LA(1)
                if not(_la==XplorMRParser.Simple_name or _la==XplorMRParser.Simple_names):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 2143
                _la = self._input.LA(1)
                if not(_la==XplorMRParser.Integer or _la==XplorMRParser.Integers):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 2144
                _la = self._input.LA(1)
                if not(_la==XplorMRParser.Simple_name or _la==XplorMRParser.Simple_names):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass

            elif la_ == 4:
                self.state = 2145
                self.match(XplorMRParser.Attribute)
                self.state = 2147
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Abs:
                    self.state = 2146
                    self.match(XplorMRParser.Abs)


                self.state = 2149
                self.match(XplorMRParser.Attr_properties)
                self.state = 2150
                self.match(XplorMRParser.Comparison_ops)
                self.state = 2151
                self.number_f()
                pass

            elif la_ == 5:
                self.state = 2152
                self.match(XplorMRParser.BondedTo)
                self.state = 2153
                self.factor(29)
                pass

            elif la_ == 6:
                self.state = 2154
                self.match(XplorMRParser.ByGroup)
                self.state = 2155
                self.factor(28)
                pass

            elif la_ == 7:
                self.state = 2156
                self.match(XplorMRParser.ByRes)
                self.state = 2157
                self.factor(27)
                pass

            elif la_ == 8:
                self.state = 2158
                self.match(XplorMRParser.Chemical)
                self.state = 2166
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [XplorMRParser.Simple_names]:
                    self.state = 2159
                    self.match(XplorMRParser.Simple_names)
                    pass
                elif token in [XplorMRParser.Simple_name]:
                    self.state = 2160
                    self.match(XplorMRParser.Simple_name)
                    self.state = 2163
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,245,self._ctx)
                    if la_ == 1:
                        self.state = 2161
                        self.match(XplorMRParser.Colon)
                        self.state = 2162
                        self.match(XplorMRParser.Simple_name)


                    pass
                elif token in [XplorMRParser.Symbol_name]:
                    self.state = 2165
                    self.match(XplorMRParser.Symbol_name)
                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 9:
                self.state = 2168
                self.match(XplorMRParser.Hydrogen)
                pass

            elif la_ == 10:
                self.state = 2169
                self.match(XplorMRParser.Id)
                self.state = 2170
                self.match(XplorMRParser.Integer)
                pass

            elif la_ == 11:
                self.state = 2171
                self.match(XplorMRParser.Known)
                pass

            elif la_ == 12:
                self.state = 2172
                self.match(XplorMRParser.Name)
                self.state = 2185
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [XplorMRParser.Simple_names]:
                    self.state = 2173
                    self.match(XplorMRParser.Simple_names)
                    pass
                elif token in [XplorMRParser.Simple_name]:
                    self.state = 2174
                    self.match(XplorMRParser.Simple_name)
                    self.state = 2177
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,247,self._ctx)
                    if la_ == 1:
                        self.state = 2175
                        self.match(XplorMRParser.Colon)
                        self.state = 2176
                        self.match(XplorMRParser.Simple_name)


                    pass
                elif token in [XplorMRParser.Double_quote_string]:
                    self.state = 2179
                    self.match(XplorMRParser.Double_quote_string)
                    self.state = 2182
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,248,self._ctx)
                    if la_ == 1:
                        self.state = 2180
                        self.match(XplorMRParser.Colon)
                        self.state = 2181
                        self.match(XplorMRParser.Double_quote_string)


                    pass
                elif token in [XplorMRParser.Symbol_name]:
                    self.state = 2184
                    self.match(XplorMRParser.Symbol_name)
                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 13:
                self.state = 2187
                self.match(XplorMRParser.Not_op)
                self.state = 2188
                self.factor(21)
                pass

            elif la_ == 14:
                self.state = 2189
                self.match(XplorMRParser.Point)
                self.state = 2190
                self.match(XplorMRParser.L_paren)
                self.state = 2191
                self.number_f()
                self.state = 2193
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Comma:
                    self.state = 2192
                    self.match(XplorMRParser.Comma)


                self.state = 2195
                self.number_f()
                self.state = 2197
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Comma:
                    self.state = 2196
                    self.match(XplorMRParser.Comma)


                self.state = 2199
                self.number_f()
                self.state = 2200
                self.match(XplorMRParser.R_paren)
                self.state = 2201
                self.match(XplorMRParser.Cut)
                self.state = 2202
                self.number_f()
                pass

            elif la_ == 15:
                self.state = 2204
                self.match(XplorMRParser.Point)
                self.state = 2205
                self.match(XplorMRParser.L_paren)
                self.state = 2206
                self.match(XplorMRParser.Tail)
                self.state = 2208
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 2207
                    self.match(XplorMRParser.Equ_op)


                self.state = 2210
                self.selection()
                self.state = 2212
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Comma:
                    self.state = 2211
                    self.match(XplorMRParser.Comma)


                self.state = 2219
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Head:
                    self.state = 2214
                    self.match(XplorMRParser.Head)
                    self.state = 2216
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==XplorMRParser.Equ_op:
                        self.state = 2215
                        self.match(XplorMRParser.Equ_op)


                    self.state = 2218
                    self.selection()


                self.state = 2221
                self.match(XplorMRParser.R_paren)
                self.state = 2222
                self.match(XplorMRParser.Cut)
                self.state = 2223
                self.number_f()
                pass

            elif la_ == 16:
                self.state = 2225
                self.match(XplorMRParser.Previous)
                pass

            elif la_ == 17:
                self.state = 2226
                self.match(XplorMRParser.Pseudo)
                pass

            elif la_ == 18:
                self.state = 2227
                self.match(XplorMRParser.Residue)
                self.state = 2235
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [XplorMRParser.Integers]:
                    self.state = 2228
                    self.match(XplorMRParser.Integers)
                    pass
                elif token in [XplorMRParser.Integer]:
                    self.state = 2229
                    self.match(XplorMRParser.Integer)
                    self.state = 2232
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,256,self._ctx)
                    if la_ == 1:
                        self.state = 2230
                        self.match(XplorMRParser.Colon)
                        self.state = 2231
                        self.match(XplorMRParser.Integer)


                    pass
                elif token in [XplorMRParser.Symbol_name]:
                    self.state = 2234
                    self.match(XplorMRParser.Symbol_name)
                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 19:
                self.state = 2237
                self.match(XplorMRParser.Resname)
                self.state = 2245
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [XplorMRParser.Simple_names]:
                    self.state = 2238
                    self.match(XplorMRParser.Simple_names)
                    pass
                elif token in [XplorMRParser.Simple_name]:
                    self.state = 2239
                    self.match(XplorMRParser.Simple_name)
                    self.state = 2242
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,258,self._ctx)
                    if la_ == 1:
                        self.state = 2240
                        self.match(XplorMRParser.Colon)
                        self.state = 2241
                        self.match(XplorMRParser.Simple_name)


                    pass
                elif token in [XplorMRParser.Symbol_name]:
                    self.state = 2244
                    self.match(XplorMRParser.Symbol_name)
                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 20:
                self.state = 2247
                self.match(XplorMRParser.SegIdentifier)
                self.state = 2260
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [XplorMRParser.Simple_names]:
                    self.state = 2248
                    self.match(XplorMRParser.Simple_names)
                    pass
                elif token in [XplorMRParser.Simple_name]:
                    self.state = 2249
                    self.match(XplorMRParser.Simple_name)
                    self.state = 2252
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,260,self._ctx)
                    if la_ == 1:
                        self.state = 2250
                        self.match(XplorMRParser.Colon)
                        self.state = 2251
                        self.match(XplorMRParser.Simple_name)


                    pass
                elif token in [XplorMRParser.Double_quote_string]:
                    self.state = 2254
                    self.match(XplorMRParser.Double_quote_string)
                    self.state = 2257
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,261,self._ctx)
                    if la_ == 1:
                        self.state = 2255
                        self.match(XplorMRParser.Colon)
                        self.state = 2256
                        self.match(XplorMRParser.Double_quote_string)


                    pass
                elif token in [XplorMRParser.Symbol_name]:
                    self.state = 2259
                    self.match(XplorMRParser.Symbol_name)
                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 21:
                self.state = 2262
                self.match(XplorMRParser.Store_1)
                pass

            elif la_ == 22:
                self.state = 2263
                self.match(XplorMRParser.Store_2)
                pass

            elif la_ == 23:
                self.state = 2264
                self.match(XplorMRParser.Store_3)
                pass

            elif la_ == 24:
                self.state = 2265
                self.match(XplorMRParser.Store_4)
                pass

            elif la_ == 25:
                self.state = 2266
                self.match(XplorMRParser.Store_5)
                pass

            elif la_ == 26:
                self.state = 2267
                self.match(XplorMRParser.Store_6)
                pass

            elif la_ == 27:
                self.state = 2268
                self.match(XplorMRParser.Store_7)
                pass

            elif la_ == 28:
                self.state = 2269
                self.match(XplorMRParser.Store_8)
                pass

            elif la_ == 29:
                self.state = 2270
                self.match(XplorMRParser.Store_9)
                pass

            elif la_ == 30:
                self.state = 2271
                self.match(XplorMRParser.Tag)
                pass

            elif la_ == 31:
                self.state = 2272
                self.match(XplorMRParser.Donor)
                pass

            elif la_ == 32:
                self.state = 2273
                self.match(XplorMRParser.Acceptor)
                pass


            self._ctx.stop = self._input.LT(-1)
            self.state = 2284
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,265,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 2282
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,264,self._ctx)
                    if la_ == 1:
                        localctx = XplorMRParser.FactorContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_factor)
                        self.state = 2276
                        if not self.precpred(self._ctx, 32):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 32)")
                        self.state = 2277
                        self.match(XplorMRParser.Around)
                        self.state = 2278
                        self.number_f()
                        pass

                    elif la_ == 2:
                        localctx = XplorMRParser.FactorContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_factor)
                        self.state = 2279
                        if not self.precpred(self._ctx, 14):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 14)")
                        self.state = 2280
                        self.match(XplorMRParser.Saround)
                        self.state = 2281
                        self.number_f()
                        pass

             
                self.state = 2286
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,265,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class NumberContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Real(self):
            return self.getToken(XplorMRParser.Real, 0)

        def Integer(self):
            return self.getToken(XplorMRParser.Integer, 0)

        def Symbol_name(self):
            return self.getToken(XplorMRParser.Symbol_name, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_number

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNumber" ):
                listener.enterNumber(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNumber" ):
                listener.exitNumber(self)




    def number(self):

        localctx = XplorMRParser.NumberContext(self, self._ctx, self.state)
        self.enterRule(localctx, 190, self.RULE_number)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2287
            _la = self._input.LA(1)
            if not(((((_la - 177)) & ~0x3f) == 0 and ((1 << (_la - 177)) & ((1 << (XplorMRParser.Integer - 177)) | (1 << (XplorMRParser.Real - 177)) | (1 << (XplorMRParser.Symbol_name - 177)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Number_fContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Real(self):
            return self.getToken(XplorMRParser.Real, 0)

        def Integer(self):
            return self.getToken(XplorMRParser.Integer, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_number_f

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNumber_f" ):
                listener.enterNumber_f(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNumber_f" ):
                listener.exitNumber_f(self)




    def number_f(self):

        localctx = XplorMRParser.Number_fContext(self, self._ctx, self.state)
        self.enterRule(localctx, 192, self.RULE_number_f)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2289
            _la = self._input.LA(1)
            if not(_la==XplorMRParser.Integer or _la==XplorMRParser.Real):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Number_sContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Real(self):
            return self.getToken(XplorMRParser.Real, 0)

        def Integer(self):
            return self.getToken(XplorMRParser.Integer, 0)

        def Symbol_name(self):
            return self.getToken(XplorMRParser.Symbol_name, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_number_s

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNumber_s" ):
                listener.enterNumber_s(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNumber_s" ):
                listener.exitNumber_s(self)




    def number_s(self):

        localctx = XplorMRParser.Number_sContext(self, self._ctx, self.state)
        self.enterRule(localctx, 194, self.RULE_number_s)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2291
            _la = self._input.LA(1)
            if not(((((_la - 177)) & ~0x3f) == 0 and ((1 << (_la - 177)) & ((1 << (XplorMRParser.Integer - 177)) | (1 << (XplorMRParser.Real - 177)) | (1 << (XplorMRParser.Symbol_name - 177)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Number_aContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Real(self):
            return self.getToken(XplorMRParser.Real, 0)

        def Integer(self):
            return self.getToken(XplorMRParser.Integer, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_number_a

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNumber_a" ):
                listener.enterNumber_a(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNumber_a" ):
                listener.exitNumber_a(self)




    def number_a(self):

        localctx = XplorMRParser.Number_aContext(self, self._ctx, self.state)
        self.enterRule(localctx, 196, self.RULE_number_a)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2293
            _la = self._input.LA(1)
            if not(_la==XplorMRParser.Integer or _la==XplorMRParser.Real):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Flag_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Flags(self):
            return self.getToken(XplorMRParser.Flags, 0)

        def Include(self):
            return self.getToken(XplorMRParser.Include, 0)

        def End_F(self):
            return self.getToken(XplorMRParser.End_F, 0)

        def Exclude(self):
            return self.getToken(XplorMRParser.Exclude, 0)

        def Class_name(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Class_name)
            else:
                return self.getToken(XplorMRParser.Class_name, i)

        def Any_class(self):
            return self.getToken(XplorMRParser.Any_class, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_flag_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFlag_statement" ):
                listener.enterFlag_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFlag_statement" ):
                listener.exitFlag_statement(self)




    def flag_statement(self):

        localctx = XplorMRParser.Flag_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 198, self.RULE_flag_statement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2295
            self.match(XplorMRParser.Flags)
            self.state = 2306
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==XplorMRParser.Exclude:
                self.state = 2296
                self.match(XplorMRParser.Exclude)
                self.state = 2304
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [XplorMRParser.Include, XplorMRParser.Class_name]:
                    self.state = 2300
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==XplorMRParser.Class_name:
                        self.state = 2297
                        self.match(XplorMRParser.Class_name)
                        self.state = 2302
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    pass
                elif token in [XplorMRParser.Any_class]:
                    self.state = 2303
                    self.match(XplorMRParser.Any_class)
                    pass
                else:
                    raise NoViableAltException(self)



            self.state = 2308
            self.match(XplorMRParser.Include)
            self.state = 2312
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==XplorMRParser.Class_name:
                self.state = 2309
                self.match(XplorMRParser.Class_name)
                self.state = 2314
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2315
            self.match(XplorMRParser.End_F)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Vector_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Vector(self):
            return self.getToken(XplorMRParser.Vector, 0)

        def vector_mode(self):
            return self.getTypedRuleContext(XplorMRParser.Vector_modeContext,0)


        def selection(self):
            return self.getTypedRuleContext(XplorMRParser.SelectionContext,0)


        def getRuleIndex(self):
            return XplorMRParser.RULE_vector_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVector_statement" ):
                listener.enterVector_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVector_statement" ):
                listener.exitVector_statement(self)




    def vector_statement(self):

        localctx = XplorMRParser.Vector_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 200, self.RULE_vector_statement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2317
            self.match(XplorMRParser.Vector)
            self.state = 2318
            self.vector_mode()
            self.state = 2319
            self.selection()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Vector_modeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def vector_expression(self):
            return self.getTypedRuleContext(XplorMRParser.Vector_expressionContext,0)


        def R_paren_VE(self):
            return self.getToken(XplorMRParser.R_paren_VE, 0)

        def Do_Lp(self):
            return self.getToken(XplorMRParser.Do_Lp, 0)

        def Identify_Lp(self):
            return self.getToken(XplorMRParser.Identify_Lp, 0)

        def Show(self):
            return self.getToken(XplorMRParser.Show, 0)

        def vector_show_property(self):
            return self.getTypedRuleContext(XplorMRParser.Vector_show_propertyContext,0)


        def getRuleIndex(self):
            return XplorMRParser.RULE_vector_mode

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVector_mode" ):
                listener.enterVector_mode(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVector_mode" ):
                listener.exitVector_mode(self)




    def vector_mode(self):

        localctx = XplorMRParser.Vector_modeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 202, self.RULE_vector_mode)
        self._la = 0 # Token type
        try:
            self.state = 2327
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [XplorMRParser.Do_Lp, XplorMRParser.Identify_Lp]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2321
                _la = self._input.LA(1)
                if not(_la==XplorMRParser.Do_Lp or _la==XplorMRParser.Identify_Lp):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 2322
                self.vector_expression()
                self.state = 2323
                self.match(XplorMRParser.R_paren_VE)
                pass
            elif token in [XplorMRParser.Show]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2325
                self.match(XplorMRParser.Show)
                self.state = 2326
                self.vector_show_property()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Vector_expressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Atom_properties_VE(self):
            return self.getToken(XplorMRParser.Atom_properties_VE, 0)

        def Equ_op_VE(self):
            return self.getToken(XplorMRParser.Equ_op_VE, 0)

        def vector_operation(self):
            return self.getTypedRuleContext(XplorMRParser.Vector_operationContext,0)


        def getRuleIndex(self):
            return XplorMRParser.RULE_vector_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVector_expression" ):
                listener.enterVector_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVector_expression" ):
                listener.exitVector_expression(self)




    def vector_expression(self):

        localctx = XplorMRParser.Vector_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 204, self.RULE_vector_expression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2329
            self.match(XplorMRParser.Atom_properties_VE)
            self.state = 2332
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==XplorMRParser.Equ_op_VE:
                self.state = 2330
                self.match(XplorMRParser.Equ_op_VE)
                self.state = 2331
                self.vector_operation()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Vector_operationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def vflc(self):
            return self.getTypedRuleContext(XplorMRParser.VflcContext,0)


        def vector_operation(self):
            return self.getTypedRuleContext(XplorMRParser.Vector_operationContext,0)


        def Add_op_VE(self):
            return self.getToken(XplorMRParser.Add_op_VE, 0)

        def Sub_op_VE(self):
            return self.getToken(XplorMRParser.Sub_op_VE, 0)

        def Mul_op_VE(self):
            return self.getToken(XplorMRParser.Mul_op_VE, 0)

        def Div_op_VE(self):
            return self.getToken(XplorMRParser.Div_op_VE, 0)

        def Exp_op_VE(self):
            return self.getToken(XplorMRParser.Exp_op_VE, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_vector_operation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVector_operation" ):
                listener.enterVector_operation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVector_operation" ):
                listener.exitVector_operation(self)




    def vector_operation(self):

        localctx = XplorMRParser.Vector_operationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 206, self.RULE_vector_operation)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2334
            self.vflc()
            self.state = 2337
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 229)) & ~0x3f) == 0 and ((1 << (_la - 229)) & ((1 << (XplorMRParser.Add_op_VE - 229)) | (1 << (XplorMRParser.Sub_op_VE - 229)) | (1 << (XplorMRParser.Mul_op_VE - 229)) | (1 << (XplorMRParser.Div_op_VE - 229)) | (1 << (XplorMRParser.Exp_op_VE - 229)))) != 0):
                self.state = 2335
                _la = self._input.LA(1)
                if not(((((_la - 229)) & ~0x3f) == 0 and ((1 << (_la - 229)) & ((1 << (XplorMRParser.Add_op_VE - 229)) | (1 << (XplorMRParser.Sub_op_VE - 229)) | (1 << (XplorMRParser.Mul_op_VE - 229)) | (1 << (XplorMRParser.Div_op_VE - 229)) | (1 << (XplorMRParser.Exp_op_VE - 229)))) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 2336
                self.vector_operation()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VflcContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Atom_properties_VE(self):
            return self.getToken(XplorMRParser.Atom_properties_VE, 0)

        def vector_func_call(self):
            return self.getTypedRuleContext(XplorMRParser.Vector_func_callContext,0)


        def Integer_VE(self):
            return self.getToken(XplorMRParser.Integer_VE, 0)

        def Real_VE(self):
            return self.getToken(XplorMRParser.Real_VE, 0)

        def Simple_name_VE(self):
            return self.getToken(XplorMRParser.Simple_name_VE, 0)

        def Symbol_name_VE(self):
            return self.getToken(XplorMRParser.Symbol_name_VE, 0)

        def Double_quote_string_VE(self):
            return self.getToken(XplorMRParser.Double_quote_string_VE, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_vflc

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVflc" ):
                listener.enterVflc(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVflc" ):
                listener.exitVflc(self)




    def vflc(self):

        localctx = XplorMRParser.VflcContext(self, self._ctx, self.state)
        self.enterRule(localctx, 208, self.RULE_vflc)
        try:
            self.state = 2346
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [XplorMRParser.Atom_properties_VE]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2339
                self.match(XplorMRParser.Atom_properties_VE)
                pass
            elif token in [XplorMRParser.Abs_VE, XplorMRParser.Acos_VE, XplorMRParser.Cos_VE, XplorMRParser.Decode_VE, XplorMRParser.Encode_VE, XplorMRParser.Exp_VE, XplorMRParser.Gauss_VE, XplorMRParser.Heavy_VE, XplorMRParser.Int_VE, XplorMRParser.Log10_VE, XplorMRParser.Log_VE, XplorMRParser.Max_VE, XplorMRParser.Maxw_VE, XplorMRParser.Min_VE, XplorMRParser.Mod_VE, XplorMRParser.Norm_VE, XplorMRParser.Random_VE, XplorMRParser.Sign_VE, XplorMRParser.Sin_VE, XplorMRParser.Sqrt_VE, XplorMRParser.Tan_VE]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2340
                self.vector_func_call()
                pass
            elif token in [XplorMRParser.Integer_VE]:
                self.enterOuterAlt(localctx, 3)
                self.state = 2341
                self.match(XplorMRParser.Integer_VE)
                pass
            elif token in [XplorMRParser.Real_VE]:
                self.enterOuterAlt(localctx, 4)
                self.state = 2342
                self.match(XplorMRParser.Real_VE)
                pass
            elif token in [XplorMRParser.Simple_name_VE]:
                self.enterOuterAlt(localctx, 5)
                self.state = 2343
                self.match(XplorMRParser.Simple_name_VE)
                pass
            elif token in [XplorMRParser.Symbol_name_VE]:
                self.enterOuterAlt(localctx, 6)
                self.state = 2344
                self.match(XplorMRParser.Symbol_name_VE)
                pass
            elif token in [XplorMRParser.Double_quote_string_VE]:
                self.enterOuterAlt(localctx, 7)
                self.state = 2345
                self.match(XplorMRParser.Double_quote_string_VE)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Vector_func_callContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Abs_VE(self):
            return self.getToken(XplorMRParser.Abs_VE, 0)

        def L_paren_VF(self):
            return self.getToken(XplorMRParser.L_paren_VF, 0)

        def vflc(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.VflcContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.VflcContext,i)


        def R_paren_VE(self):
            return self.getToken(XplorMRParser.R_paren_VE, 0)

        def Acos_VE(self):
            return self.getToken(XplorMRParser.Acos_VE, 0)

        def Cos_VE(self):
            return self.getToken(XplorMRParser.Cos_VE, 0)

        def Decode_VE(self):
            return self.getToken(XplorMRParser.Decode_VE, 0)

        def Encode_VE(self):
            return self.getToken(XplorMRParser.Encode_VE, 0)

        def Exp_VE(self):
            return self.getToken(XplorMRParser.Exp_VE, 0)

        def Gauss_VE(self):
            return self.getToken(XplorMRParser.Gauss_VE, 0)

        def Heavy_VE(self):
            return self.getToken(XplorMRParser.Heavy_VE, 0)

        def Int_VE(self):
            return self.getToken(XplorMRParser.Int_VE, 0)

        def Log10_VE(self):
            return self.getToken(XplorMRParser.Log10_VE, 0)

        def Log_VE(self):
            return self.getToken(XplorMRParser.Log_VE, 0)

        def Max_VE(self):
            return self.getToken(XplorMRParser.Max_VE, 0)

        def Comma_VE(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Comma_VE)
            else:
                return self.getToken(XplorMRParser.Comma_VE, i)

        def Maxw_VE(self):
            return self.getToken(XplorMRParser.Maxw_VE, 0)

        def Min_VE(self):
            return self.getToken(XplorMRParser.Min_VE, 0)

        def Mod_VE(self):
            return self.getToken(XplorMRParser.Mod_VE, 0)

        def Norm_VE(self):
            return self.getToken(XplorMRParser.Norm_VE, 0)

        def Random_VE(self):
            return self.getToken(XplorMRParser.Random_VE, 0)

        def Sign_VE(self):
            return self.getToken(XplorMRParser.Sign_VE, 0)

        def Sin_VE(self):
            return self.getToken(XplorMRParser.Sin_VE, 0)

        def Sqrt_VE(self):
            return self.getToken(XplorMRParser.Sqrt_VE, 0)

        def Tan_VE(self):
            return self.getToken(XplorMRParser.Tan_VE, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_vector_func_call

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVector_func_call" ):
                listener.enterVector_func_call(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVector_func_call" ):
                listener.exitVector_func_call(self)




    def vector_func_call(self):

        localctx = XplorMRParser.Vector_func_callContext(self, self._ctx, self.state)
        self.enterRule(localctx, 210, self.RULE_vector_func_call)
        self._la = 0 # Token type
        try:
            self.state = 2467
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [XplorMRParser.Abs_VE]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2348
                self.match(XplorMRParser.Abs_VE)
                self.state = 2349
                self.match(XplorMRParser.L_paren_VF)
                self.state = 2350
                self.vflc()
                self.state = 2351
                self.match(XplorMRParser.R_paren_VE)
                pass
            elif token in [XplorMRParser.Acos_VE]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2353
                self.match(XplorMRParser.Acos_VE)
                self.state = 2354
                self.match(XplorMRParser.L_paren_VF)
                self.state = 2355
                self.vflc()
                self.state = 2356
                self.match(XplorMRParser.R_paren_VE)
                pass
            elif token in [XplorMRParser.Cos_VE]:
                self.enterOuterAlt(localctx, 3)
                self.state = 2358
                self.match(XplorMRParser.Cos_VE)
                self.state = 2359
                self.match(XplorMRParser.L_paren_VF)
                self.state = 2360
                self.vflc()
                self.state = 2361
                self.match(XplorMRParser.R_paren_VE)
                pass
            elif token in [XplorMRParser.Decode_VE]:
                self.enterOuterAlt(localctx, 4)
                self.state = 2363
                self.match(XplorMRParser.Decode_VE)
                self.state = 2364
                self.match(XplorMRParser.L_paren_VF)
                self.state = 2365
                self.vflc()
                self.state = 2366
                self.match(XplorMRParser.R_paren_VE)
                pass
            elif token in [XplorMRParser.Encode_VE]:
                self.enterOuterAlt(localctx, 5)
                self.state = 2368
                self.match(XplorMRParser.Encode_VE)
                self.state = 2369
                self.match(XplorMRParser.L_paren_VF)
                self.state = 2370
                self.vflc()
                self.state = 2371
                self.match(XplorMRParser.R_paren_VE)
                pass
            elif token in [XplorMRParser.Exp_VE]:
                self.enterOuterAlt(localctx, 6)
                self.state = 2373
                self.match(XplorMRParser.Exp_VE)
                self.state = 2374
                self.match(XplorMRParser.L_paren_VF)
                self.state = 2375
                self.vflc()
                self.state = 2376
                self.match(XplorMRParser.R_paren_VE)
                pass
            elif token in [XplorMRParser.Gauss_VE]:
                self.enterOuterAlt(localctx, 7)
                self.state = 2378
                self.match(XplorMRParser.Gauss_VE)
                self.state = 2379
                self.match(XplorMRParser.L_paren_VF)
                self.state = 2380
                self.vflc()
                self.state = 2381
                self.match(XplorMRParser.R_paren_VE)
                pass
            elif token in [XplorMRParser.Heavy_VE]:
                self.enterOuterAlt(localctx, 8)
                self.state = 2383
                self.match(XplorMRParser.Heavy_VE)
                self.state = 2384
                self.match(XplorMRParser.L_paren_VF)
                self.state = 2385
                self.vflc()
                self.state = 2386
                self.match(XplorMRParser.R_paren_VE)
                pass
            elif token in [XplorMRParser.Int_VE]:
                self.enterOuterAlt(localctx, 9)
                self.state = 2388
                self.match(XplorMRParser.Int_VE)
                self.state = 2389
                self.match(XplorMRParser.L_paren_VF)
                self.state = 2390
                self.vflc()
                self.state = 2391
                self.match(XplorMRParser.R_paren_VE)
                pass
            elif token in [XplorMRParser.Log10_VE]:
                self.enterOuterAlt(localctx, 10)
                self.state = 2393
                self.match(XplorMRParser.Log10_VE)
                self.state = 2394
                self.match(XplorMRParser.L_paren_VF)
                self.state = 2395
                self.vflc()
                self.state = 2396
                self.match(XplorMRParser.R_paren_VE)
                pass
            elif token in [XplorMRParser.Log_VE]:
                self.enterOuterAlt(localctx, 11)
                self.state = 2398
                self.match(XplorMRParser.Log_VE)
                self.state = 2399
                self.match(XplorMRParser.L_paren_VF)
                self.state = 2400
                self.vflc()
                self.state = 2401
                self.match(XplorMRParser.R_paren_VE)
                pass
            elif token in [XplorMRParser.Max_VE]:
                self.enterOuterAlt(localctx, 12)
                self.state = 2403
                self.match(XplorMRParser.Max_VE)
                self.state = 2404
                self.match(XplorMRParser.L_paren_VF)
                self.state = 2405
                self.vflc()
                self.state = 2410
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==XplorMRParser.Comma_VE:
                    self.state = 2406
                    self.match(XplorMRParser.Comma_VE)
                    self.state = 2407
                    self.vflc()
                    self.state = 2412
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 2413
                self.match(XplorMRParser.R_paren_VE)
                pass
            elif token in [XplorMRParser.Maxw_VE]:
                self.enterOuterAlt(localctx, 13)
                self.state = 2415
                self.match(XplorMRParser.Maxw_VE)
                self.state = 2416
                self.match(XplorMRParser.L_paren_VF)
                self.state = 2417
                self.vflc()
                self.state = 2418
                self.match(XplorMRParser.R_paren_VE)
                pass
            elif token in [XplorMRParser.Min_VE]:
                self.enterOuterAlt(localctx, 14)
                self.state = 2420
                self.match(XplorMRParser.Min_VE)
                self.state = 2421
                self.match(XplorMRParser.L_paren_VF)
                self.state = 2422
                self.vflc()
                self.state = 2427
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==XplorMRParser.Comma_VE:
                    self.state = 2423
                    self.match(XplorMRParser.Comma_VE)
                    self.state = 2424
                    self.vflc()
                    self.state = 2429
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 2430
                self.match(XplorMRParser.R_paren_VE)
                pass
            elif token in [XplorMRParser.Mod_VE]:
                self.enterOuterAlt(localctx, 15)
                self.state = 2432
                self.match(XplorMRParser.Mod_VE)
                self.state = 2433
                self.match(XplorMRParser.L_paren_VF)
                self.state = 2434
                self.vflc()
                self.state = 2435
                self.match(XplorMRParser.Comma_VE)
                self.state = 2436
                self.vflc()
                self.state = 2437
                self.match(XplorMRParser.R_paren_VE)
                pass
            elif token in [XplorMRParser.Norm_VE]:
                self.enterOuterAlt(localctx, 16)
                self.state = 2439
                self.match(XplorMRParser.Norm_VE)
                self.state = 2440
                self.match(XplorMRParser.L_paren_VF)
                self.state = 2441
                self.vflc()
                self.state = 2442
                self.match(XplorMRParser.R_paren_VE)
                pass
            elif token in [XplorMRParser.Random_VE]:
                self.enterOuterAlt(localctx, 17)
                self.state = 2444
                self.match(XplorMRParser.Random_VE)
                self.state = 2445
                self.match(XplorMRParser.L_paren_VF)
                self.state = 2446
                self.match(XplorMRParser.R_paren_VE)
                pass
            elif token in [XplorMRParser.Sign_VE]:
                self.enterOuterAlt(localctx, 18)
                self.state = 2447
                self.match(XplorMRParser.Sign_VE)
                self.state = 2448
                self.match(XplorMRParser.L_paren_VF)
                self.state = 2449
                self.vflc()
                self.state = 2450
                self.match(XplorMRParser.R_paren_VE)
                pass
            elif token in [XplorMRParser.Sin_VE]:
                self.enterOuterAlt(localctx, 19)
                self.state = 2452
                self.match(XplorMRParser.Sin_VE)
                self.state = 2453
                self.match(XplorMRParser.L_paren_VF)
                self.state = 2454
                self.vflc()
                self.state = 2455
                self.match(XplorMRParser.R_paren_VE)
                pass
            elif token in [XplorMRParser.Sqrt_VE]:
                self.enterOuterAlt(localctx, 20)
                self.state = 2457
                self.match(XplorMRParser.Sqrt_VE)
                self.state = 2458
                self.match(XplorMRParser.L_paren_VF)
                self.state = 2459
                self.vflc()
                self.state = 2460
                self.match(XplorMRParser.R_paren_VE)
                pass
            elif token in [XplorMRParser.Tan_VE]:
                self.enterOuterAlt(localctx, 21)
                self.state = 2462
                self.match(XplorMRParser.Tan_VE)
                self.state = 2463
                self.match(XplorMRParser.L_paren_VF)
                self.state = 2464
                self.vflc()
                self.state = 2465
                self.match(XplorMRParser.R_paren_VE)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Vector_show_propertyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def L_paren_VS(self):
            return self.getToken(XplorMRParser.L_paren_VS, 0)

        def Atom_properties_VS(self):
            return self.getToken(XplorMRParser.Atom_properties_VS, 0)

        def R_paren_VS(self):
            return self.getToken(XplorMRParser.R_paren_VS, 0)

        def Average_VS(self):
            return self.getToken(XplorMRParser.Average_VS, 0)

        def Element_VS(self):
            return self.getToken(XplorMRParser.Element_VS, 0)

        def Max_VS(self):
            return self.getToken(XplorMRParser.Max_VS, 0)

        def Min_VS(self):
            return self.getToken(XplorMRParser.Min_VS, 0)

        def Norm_VS(self):
            return self.getToken(XplorMRParser.Norm_VS, 0)

        def Rms_VS(self):
            return self.getToken(XplorMRParser.Rms_VS, 0)

        def Sum_VS(self):
            return self.getToken(XplorMRParser.Sum_VS, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_vector_show_property

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVector_show_property" ):
                listener.enterVector_show_property(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVector_show_property" ):
                listener.exitVector_show_property(self)




    def vector_show_property(self):

        localctx = XplorMRParser.Vector_show_propertyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 212, self.RULE_vector_show_property)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2469
            _la = self._input.LA(1)
            if not(((((_la - 268)) & ~0x3f) == 0 and ((1 << (_la - 268)) & ((1 << (XplorMRParser.Average_VS - 268)) | (1 << (XplorMRParser.Element_VS - 268)) | (1 << (XplorMRParser.Max_VS - 268)) | (1 << (XplorMRParser.Min_VS - 268)) | (1 << (XplorMRParser.Norm_VS - 268)) | (1 << (XplorMRParser.Rms_VS - 268)) | (1 << (XplorMRParser.Sum_VS - 268)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 2470
            self.match(XplorMRParser.L_paren_VS)
            self.state = 2471
            self.match(XplorMRParser.Atom_properties_VS)
            self.state = 2472
            self.match(XplorMRParser.R_paren_VS)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Evaluate_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Evaluate_Lp(self):
            return self.getToken(XplorMRParser.Evaluate_Lp, 0)

        def Symbol_name_VE(self):
            return self.getToken(XplorMRParser.Symbol_name_VE, 0)

        def Equ_op_VE(self):
            return self.getToken(XplorMRParser.Equ_op_VE, 0)

        def evaluate_operation(self):
            return self.getTypedRuleContext(XplorMRParser.Evaluate_operationContext,0)


        def R_paren_VE(self):
            return self.getToken(XplorMRParser.R_paren_VE, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_evaluate_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEvaluate_statement" ):
                listener.enterEvaluate_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEvaluate_statement" ):
                listener.exitEvaluate_statement(self)




    def evaluate_statement(self):

        localctx = XplorMRParser.Evaluate_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 214, self.RULE_evaluate_statement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2474
            self.match(XplorMRParser.Evaluate_Lp)
            self.state = 2475
            self.match(XplorMRParser.Symbol_name_VE)
            self.state = 2476
            self.match(XplorMRParser.Equ_op_VE)
            self.state = 2477
            self.evaluate_operation()
            self.state = 2478
            self.match(XplorMRParser.R_paren_VE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Evaluate_operationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def vflc(self):
            return self.getTypedRuleContext(XplorMRParser.VflcContext,0)


        def evaluate_operation(self):
            return self.getTypedRuleContext(XplorMRParser.Evaluate_operationContext,0)


        def Add_op_VE(self):
            return self.getToken(XplorMRParser.Add_op_VE, 0)

        def Sub_op_VE(self):
            return self.getToken(XplorMRParser.Sub_op_VE, 0)

        def Mul_op_VE(self):
            return self.getToken(XplorMRParser.Mul_op_VE, 0)

        def Div_op_VE(self):
            return self.getToken(XplorMRParser.Div_op_VE, 0)

        def Exp_op_VE(self):
            return self.getToken(XplorMRParser.Exp_op_VE, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_evaluate_operation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEvaluate_operation" ):
                listener.enterEvaluate_operation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEvaluate_operation" ):
                listener.exitEvaluate_operation(self)




    def evaluate_operation(self):

        localctx = XplorMRParser.Evaluate_operationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 216, self.RULE_evaluate_operation)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2480
            self.vflc()
            self.state = 2483
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 229)) & ~0x3f) == 0 and ((1 << (_la - 229)) & ((1 << (XplorMRParser.Add_op_VE - 229)) | (1 << (XplorMRParser.Sub_op_VE - 229)) | (1 << (XplorMRParser.Mul_op_VE - 229)) | (1 << (XplorMRParser.Div_op_VE - 229)) | (1 << (XplorMRParser.Exp_op_VE - 229)))) != 0):
                self.state = 2481
                _la = self._input.LA(1)
                if not(((((_la - 229)) & ~0x3f) == 0 and ((1 << (_la - 229)) & ((1 << (XplorMRParser.Add_op_VE - 229)) | (1 << (XplorMRParser.Sub_op_VE - 229)) | (1 << (XplorMRParser.Mul_op_VE - 229)) | (1 << (XplorMRParser.Div_op_VE - 229)) | (1 << (XplorMRParser.Exp_op_VE - 229)))) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 2482
                self.evaluate_operation()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Noe_assign_loopContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def For(self):
            return self.getToken(XplorMRParser.For, 0)

        def Symbol_name_CF(self):
            return self.getToken(XplorMRParser.Symbol_name_CF, 0)

        def In_CF(self):
            return self.getToken(XplorMRParser.In_CF, 0)

        def L_paren_CF(self):
            return self.getToken(XplorMRParser.L_paren_CF, 0)

        def R_paren_CF(self):
            return self.getToken(XplorMRParser.R_paren_CF, 0)

        def Loop(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Loop)
            else:
                return self.getToken(XplorMRParser.Loop, i)

        def Simple_name_LL(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Simple_name_LL)
            else:
                return self.getToken(XplorMRParser.Simple_name_LL, i)

        def End(self):
            return self.getToken(XplorMRParser.End, 0)

        def evaluate_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Evaluate_statementContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Evaluate_statementContext,i)


        def noe_assign(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Noe_assignContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Noe_assignContext,i)


        def Integer_CF(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Integer_CF)
            else:
                return self.getToken(XplorMRParser.Integer_CF, i)

        def Real_CF(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Real_CF)
            else:
                return self.getToken(XplorMRParser.Real_CF, i)

        def Simple_name_CF(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Simple_name_CF)
            else:
                return self.getToken(XplorMRParser.Simple_name_CF, i)

        def getRuleIndex(self):
            return XplorMRParser.RULE_noe_assign_loop

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNoe_assign_loop" ):
                listener.enterNoe_assign_loop(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNoe_assign_loop" ):
                listener.exitNoe_assign_loop(self)




    def noe_assign_loop(self):

        localctx = XplorMRParser.Noe_assign_loopContext(self, self._ctx, self.state)
        self.enterRule(localctx, 218, self.RULE_noe_assign_loop)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2485
            self.match(XplorMRParser.For)
            self.state = 2486
            self.match(XplorMRParser.Symbol_name_CF)
            self.state = 2487
            self.match(XplorMRParser.In_CF)
            self.state = 2488
            self.match(XplorMRParser.L_paren_CF)
            self.state = 2507
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,281,self._ctx)
            if la_ == 1:
                self.state = 2492
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==XplorMRParser.Integer_CF:
                    self.state = 2489
                    self.match(XplorMRParser.Integer_CF)
                    self.state = 2494
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 2:
                self.state = 2498
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==XplorMRParser.Real_CF:
                    self.state = 2495
                    self.match(XplorMRParser.Real_CF)
                    self.state = 2500
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 3:
                self.state = 2504
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==XplorMRParser.Simple_name_CF:
                    self.state = 2501
                    self.match(XplorMRParser.Simple_name_CF)
                    self.state = 2506
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass


            self.state = 2509
            self.match(XplorMRParser.R_paren_CF)
            self.state = 2510
            self.match(XplorMRParser.Loop)
            self.state = 2511
            self.match(XplorMRParser.Simple_name_LL)
            self.state = 2516
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==XplorMRParser.Assign or _la==XplorMRParser.Evaluate_Lp:
                self.state = 2514
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [XplorMRParser.Evaluate_Lp]:
                    self.state = 2512
                    self.evaluate_statement()
                    pass
                elif token in [XplorMRParser.Assign]:
                    self.state = 2513
                    self.noe_assign()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 2518
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2519
            self.match(XplorMRParser.End)
            self.state = 2520
            self.match(XplorMRParser.Loop)
            self.state = 2521
            self.match(XplorMRParser.Simple_name_LL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Dihedral_assign_loopContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def For(self):
            return self.getToken(XplorMRParser.For, 0)

        def Symbol_name_CF(self):
            return self.getToken(XplorMRParser.Symbol_name_CF, 0)

        def In_CF(self):
            return self.getToken(XplorMRParser.In_CF, 0)

        def L_paren_CF(self):
            return self.getToken(XplorMRParser.L_paren_CF, 0)

        def R_paren_CF(self):
            return self.getToken(XplorMRParser.R_paren_CF, 0)

        def Loop(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Loop)
            else:
                return self.getToken(XplorMRParser.Loop, i)

        def Simple_name_LL(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Simple_name_LL)
            else:
                return self.getToken(XplorMRParser.Simple_name_LL, i)

        def End(self):
            return self.getToken(XplorMRParser.End, 0)

        def evaluate_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Evaluate_statementContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Evaluate_statementContext,i)


        def dihedral_assign(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Dihedral_assignContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Dihedral_assignContext,i)


        def Integer_CF(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Integer_CF)
            else:
                return self.getToken(XplorMRParser.Integer_CF, i)

        def Real_CF(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Real_CF)
            else:
                return self.getToken(XplorMRParser.Real_CF, i)

        def Simple_name_CF(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Simple_name_CF)
            else:
                return self.getToken(XplorMRParser.Simple_name_CF, i)

        def getRuleIndex(self):
            return XplorMRParser.RULE_dihedral_assign_loop

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDihedral_assign_loop" ):
                listener.enterDihedral_assign_loop(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDihedral_assign_loop" ):
                listener.exitDihedral_assign_loop(self)




    def dihedral_assign_loop(self):

        localctx = XplorMRParser.Dihedral_assign_loopContext(self, self._ctx, self.state)
        self.enterRule(localctx, 220, self.RULE_dihedral_assign_loop)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2523
            self.match(XplorMRParser.For)
            self.state = 2524
            self.match(XplorMRParser.Symbol_name_CF)
            self.state = 2525
            self.match(XplorMRParser.In_CF)
            self.state = 2526
            self.match(XplorMRParser.L_paren_CF)
            self.state = 2545
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,287,self._ctx)
            if la_ == 1:
                self.state = 2530
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==XplorMRParser.Integer_CF:
                    self.state = 2527
                    self.match(XplorMRParser.Integer_CF)
                    self.state = 2532
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 2:
                self.state = 2536
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==XplorMRParser.Real_CF:
                    self.state = 2533
                    self.match(XplorMRParser.Real_CF)
                    self.state = 2538
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 3:
                self.state = 2542
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==XplorMRParser.Simple_name_CF:
                    self.state = 2539
                    self.match(XplorMRParser.Simple_name_CF)
                    self.state = 2544
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass


            self.state = 2547
            self.match(XplorMRParser.R_paren_CF)
            self.state = 2548
            self.match(XplorMRParser.Loop)
            self.state = 2549
            self.match(XplorMRParser.Simple_name_LL)
            self.state = 2554
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==XplorMRParser.Assign or _la==XplorMRParser.Evaluate_Lp:
                self.state = 2552
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [XplorMRParser.Evaluate_Lp]:
                    self.state = 2550
                    self.evaluate_statement()
                    pass
                elif token in [XplorMRParser.Assign]:
                    self.state = 2551
                    self.dihedral_assign()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 2556
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2557
            self.match(XplorMRParser.End)
            self.state = 2558
            self.match(XplorMRParser.Loop)
            self.state = 2559
            self.match(XplorMRParser.Simple_name_LL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Sani_assign_loopContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def For(self):
            return self.getToken(XplorMRParser.For, 0)

        def Symbol_name_CF(self):
            return self.getToken(XplorMRParser.Symbol_name_CF, 0)

        def In_CF(self):
            return self.getToken(XplorMRParser.In_CF, 0)

        def L_paren_CF(self):
            return self.getToken(XplorMRParser.L_paren_CF, 0)

        def R_paren_CF(self):
            return self.getToken(XplorMRParser.R_paren_CF, 0)

        def Loop(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Loop)
            else:
                return self.getToken(XplorMRParser.Loop, i)

        def Simple_name_LL(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Simple_name_LL)
            else:
                return self.getToken(XplorMRParser.Simple_name_LL, i)

        def End(self):
            return self.getToken(XplorMRParser.End, 0)

        def evaluate_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Evaluate_statementContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Evaluate_statementContext,i)


        def sani_assign(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Sani_assignContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Sani_assignContext,i)


        def Integer_CF(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Integer_CF)
            else:
                return self.getToken(XplorMRParser.Integer_CF, i)

        def Real_CF(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Real_CF)
            else:
                return self.getToken(XplorMRParser.Real_CF, i)

        def Simple_name_CF(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Simple_name_CF)
            else:
                return self.getToken(XplorMRParser.Simple_name_CF, i)

        def getRuleIndex(self):
            return XplorMRParser.RULE_sani_assign_loop

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSani_assign_loop" ):
                listener.enterSani_assign_loop(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSani_assign_loop" ):
                listener.exitSani_assign_loop(self)




    def sani_assign_loop(self):

        localctx = XplorMRParser.Sani_assign_loopContext(self, self._ctx, self.state)
        self.enterRule(localctx, 222, self.RULE_sani_assign_loop)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2561
            self.match(XplorMRParser.For)
            self.state = 2562
            self.match(XplorMRParser.Symbol_name_CF)
            self.state = 2563
            self.match(XplorMRParser.In_CF)
            self.state = 2564
            self.match(XplorMRParser.L_paren_CF)
            self.state = 2583
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,293,self._ctx)
            if la_ == 1:
                self.state = 2568
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==XplorMRParser.Integer_CF:
                    self.state = 2565
                    self.match(XplorMRParser.Integer_CF)
                    self.state = 2570
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 2:
                self.state = 2574
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==XplorMRParser.Real_CF:
                    self.state = 2571
                    self.match(XplorMRParser.Real_CF)
                    self.state = 2576
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 3:
                self.state = 2580
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==XplorMRParser.Simple_name_CF:
                    self.state = 2577
                    self.match(XplorMRParser.Simple_name_CF)
                    self.state = 2582
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass


            self.state = 2585
            self.match(XplorMRParser.R_paren_CF)
            self.state = 2586
            self.match(XplorMRParser.Loop)
            self.state = 2587
            self.match(XplorMRParser.Simple_name_LL)
            self.state = 2592
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==XplorMRParser.Assign or _la==XplorMRParser.Evaluate_Lp:
                self.state = 2590
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [XplorMRParser.Evaluate_Lp]:
                    self.state = 2588
                    self.evaluate_statement()
                    pass
                elif token in [XplorMRParser.Assign]:
                    self.state = 2589
                    self.sani_assign()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 2594
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2595
            self.match(XplorMRParser.End)
            self.state = 2596
            self.match(XplorMRParser.Loop)
            self.state = 2597
            self.match(XplorMRParser.Simple_name_LL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Xadc_assign_loopContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def For(self):
            return self.getToken(XplorMRParser.For, 0)

        def Symbol_name_CF(self):
            return self.getToken(XplorMRParser.Symbol_name_CF, 0)

        def In_CF(self):
            return self.getToken(XplorMRParser.In_CF, 0)

        def L_paren_CF(self):
            return self.getToken(XplorMRParser.L_paren_CF, 0)

        def R_paren_CF(self):
            return self.getToken(XplorMRParser.R_paren_CF, 0)

        def Loop(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Loop)
            else:
                return self.getToken(XplorMRParser.Loop, i)

        def Simple_name_LL(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Simple_name_LL)
            else:
                return self.getToken(XplorMRParser.Simple_name_LL, i)

        def End(self):
            return self.getToken(XplorMRParser.End, 0)

        def evaluate_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Evaluate_statementContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Evaluate_statementContext,i)


        def xadc_assign(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Xadc_assignContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Xadc_assignContext,i)


        def Integer_CF(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Integer_CF)
            else:
                return self.getToken(XplorMRParser.Integer_CF, i)

        def Real_CF(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Real_CF)
            else:
                return self.getToken(XplorMRParser.Real_CF, i)

        def Simple_name_CF(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Simple_name_CF)
            else:
                return self.getToken(XplorMRParser.Simple_name_CF, i)

        def getRuleIndex(self):
            return XplorMRParser.RULE_xadc_assign_loop

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterXadc_assign_loop" ):
                listener.enterXadc_assign_loop(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitXadc_assign_loop" ):
                listener.exitXadc_assign_loop(self)




    def xadc_assign_loop(self):

        localctx = XplorMRParser.Xadc_assign_loopContext(self, self._ctx, self.state)
        self.enterRule(localctx, 224, self.RULE_xadc_assign_loop)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2599
            self.match(XplorMRParser.For)
            self.state = 2600
            self.match(XplorMRParser.Symbol_name_CF)
            self.state = 2601
            self.match(XplorMRParser.In_CF)
            self.state = 2602
            self.match(XplorMRParser.L_paren_CF)
            self.state = 2621
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,299,self._ctx)
            if la_ == 1:
                self.state = 2606
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==XplorMRParser.Integer_CF:
                    self.state = 2603
                    self.match(XplorMRParser.Integer_CF)
                    self.state = 2608
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 2:
                self.state = 2612
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==XplorMRParser.Real_CF:
                    self.state = 2609
                    self.match(XplorMRParser.Real_CF)
                    self.state = 2614
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 3:
                self.state = 2618
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==XplorMRParser.Simple_name_CF:
                    self.state = 2615
                    self.match(XplorMRParser.Simple_name_CF)
                    self.state = 2620
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass


            self.state = 2623
            self.match(XplorMRParser.R_paren_CF)
            self.state = 2624
            self.match(XplorMRParser.Loop)
            self.state = 2625
            self.match(XplorMRParser.Simple_name_LL)
            self.state = 2630
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==XplorMRParser.Assign or _la==XplorMRParser.Evaluate_Lp:
                self.state = 2628
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [XplorMRParser.Evaluate_Lp]:
                    self.state = 2626
                    self.evaluate_statement()
                    pass
                elif token in [XplorMRParser.Assign]:
                    self.state = 2627
                    self.xadc_assign()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 2632
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2633
            self.match(XplorMRParser.End)
            self.state = 2634
            self.match(XplorMRParser.Loop)
            self.state = 2635
            self.match(XplorMRParser.Simple_name_LL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Coup_assign_loopContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def For(self):
            return self.getToken(XplorMRParser.For, 0)

        def Symbol_name_CF(self):
            return self.getToken(XplorMRParser.Symbol_name_CF, 0)

        def In_CF(self):
            return self.getToken(XplorMRParser.In_CF, 0)

        def L_paren_CF(self):
            return self.getToken(XplorMRParser.L_paren_CF, 0)

        def R_paren_CF(self):
            return self.getToken(XplorMRParser.R_paren_CF, 0)

        def Loop(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Loop)
            else:
                return self.getToken(XplorMRParser.Loop, i)

        def Simple_name_LL(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Simple_name_LL)
            else:
                return self.getToken(XplorMRParser.Simple_name_LL, i)

        def End(self):
            return self.getToken(XplorMRParser.End, 0)

        def evaluate_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Evaluate_statementContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Evaluate_statementContext,i)


        def coup_assign(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Coup_assignContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Coup_assignContext,i)


        def Integer_CF(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Integer_CF)
            else:
                return self.getToken(XplorMRParser.Integer_CF, i)

        def Real_CF(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Real_CF)
            else:
                return self.getToken(XplorMRParser.Real_CF, i)

        def Simple_name_CF(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Simple_name_CF)
            else:
                return self.getToken(XplorMRParser.Simple_name_CF, i)

        def getRuleIndex(self):
            return XplorMRParser.RULE_coup_assign_loop

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCoup_assign_loop" ):
                listener.enterCoup_assign_loop(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCoup_assign_loop" ):
                listener.exitCoup_assign_loop(self)




    def coup_assign_loop(self):

        localctx = XplorMRParser.Coup_assign_loopContext(self, self._ctx, self.state)
        self.enterRule(localctx, 226, self.RULE_coup_assign_loop)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2637
            self.match(XplorMRParser.For)
            self.state = 2638
            self.match(XplorMRParser.Symbol_name_CF)
            self.state = 2639
            self.match(XplorMRParser.In_CF)
            self.state = 2640
            self.match(XplorMRParser.L_paren_CF)
            self.state = 2659
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,305,self._ctx)
            if la_ == 1:
                self.state = 2644
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==XplorMRParser.Integer_CF:
                    self.state = 2641
                    self.match(XplorMRParser.Integer_CF)
                    self.state = 2646
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 2:
                self.state = 2650
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==XplorMRParser.Real_CF:
                    self.state = 2647
                    self.match(XplorMRParser.Real_CF)
                    self.state = 2652
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 3:
                self.state = 2656
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==XplorMRParser.Simple_name_CF:
                    self.state = 2653
                    self.match(XplorMRParser.Simple_name_CF)
                    self.state = 2658
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass


            self.state = 2661
            self.match(XplorMRParser.R_paren_CF)
            self.state = 2662
            self.match(XplorMRParser.Loop)
            self.state = 2663
            self.match(XplorMRParser.Simple_name_LL)
            self.state = 2668
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==XplorMRParser.Assign or _la==XplorMRParser.Evaluate_Lp:
                self.state = 2666
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [XplorMRParser.Evaluate_Lp]:
                    self.state = 2664
                    self.evaluate_statement()
                    pass
                elif token in [XplorMRParser.Assign]:
                    self.state = 2665
                    self.coup_assign()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 2670
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2671
            self.match(XplorMRParser.End)
            self.state = 2672
            self.match(XplorMRParser.Loop)
            self.state = 2673
            self.match(XplorMRParser.Simple_name_LL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Coll_assign_loopContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def For(self):
            return self.getToken(XplorMRParser.For, 0)

        def Symbol_name_CF(self):
            return self.getToken(XplorMRParser.Symbol_name_CF, 0)

        def In_CF(self):
            return self.getToken(XplorMRParser.In_CF, 0)

        def L_paren_CF(self):
            return self.getToken(XplorMRParser.L_paren_CF, 0)

        def R_paren_CF(self):
            return self.getToken(XplorMRParser.R_paren_CF, 0)

        def Loop(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Loop)
            else:
                return self.getToken(XplorMRParser.Loop, i)

        def Simple_name_LL(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Simple_name_LL)
            else:
                return self.getToken(XplorMRParser.Simple_name_LL, i)

        def End(self):
            return self.getToken(XplorMRParser.End, 0)

        def evaluate_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Evaluate_statementContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Evaluate_statementContext,i)


        def coll_assign(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Coll_assignContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Coll_assignContext,i)


        def Integer_CF(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Integer_CF)
            else:
                return self.getToken(XplorMRParser.Integer_CF, i)

        def Real_CF(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Real_CF)
            else:
                return self.getToken(XplorMRParser.Real_CF, i)

        def Simple_name_CF(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Simple_name_CF)
            else:
                return self.getToken(XplorMRParser.Simple_name_CF, i)

        def getRuleIndex(self):
            return XplorMRParser.RULE_coll_assign_loop

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColl_assign_loop" ):
                listener.enterColl_assign_loop(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColl_assign_loop" ):
                listener.exitColl_assign_loop(self)




    def coll_assign_loop(self):

        localctx = XplorMRParser.Coll_assign_loopContext(self, self._ctx, self.state)
        self.enterRule(localctx, 228, self.RULE_coll_assign_loop)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2675
            self.match(XplorMRParser.For)
            self.state = 2676
            self.match(XplorMRParser.Symbol_name_CF)
            self.state = 2677
            self.match(XplorMRParser.In_CF)
            self.state = 2678
            self.match(XplorMRParser.L_paren_CF)
            self.state = 2697
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,311,self._ctx)
            if la_ == 1:
                self.state = 2682
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==XplorMRParser.Integer_CF:
                    self.state = 2679
                    self.match(XplorMRParser.Integer_CF)
                    self.state = 2684
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 2:
                self.state = 2688
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==XplorMRParser.Real_CF:
                    self.state = 2685
                    self.match(XplorMRParser.Real_CF)
                    self.state = 2690
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 3:
                self.state = 2694
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==XplorMRParser.Simple_name_CF:
                    self.state = 2691
                    self.match(XplorMRParser.Simple_name_CF)
                    self.state = 2696
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass


            self.state = 2699
            self.match(XplorMRParser.R_paren_CF)
            self.state = 2700
            self.match(XplorMRParser.Loop)
            self.state = 2701
            self.match(XplorMRParser.Simple_name_LL)
            self.state = 2706
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==XplorMRParser.Assign or _la==XplorMRParser.Evaluate_Lp:
                self.state = 2704
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [XplorMRParser.Evaluate_Lp]:
                    self.state = 2702
                    self.evaluate_statement()
                    pass
                elif token in [XplorMRParser.Assign]:
                    self.state = 2703
                    self.coll_assign()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 2708
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2709
            self.match(XplorMRParser.End)
            self.state = 2710
            self.match(XplorMRParser.Loop)
            self.state = 2711
            self.match(XplorMRParser.Simple_name_LL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Csa_assign_loopContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def For(self):
            return self.getToken(XplorMRParser.For, 0)

        def Symbol_name_CF(self):
            return self.getToken(XplorMRParser.Symbol_name_CF, 0)

        def In_CF(self):
            return self.getToken(XplorMRParser.In_CF, 0)

        def L_paren_CF(self):
            return self.getToken(XplorMRParser.L_paren_CF, 0)

        def R_paren_CF(self):
            return self.getToken(XplorMRParser.R_paren_CF, 0)

        def Loop(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Loop)
            else:
                return self.getToken(XplorMRParser.Loop, i)

        def Simple_name_LL(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Simple_name_LL)
            else:
                return self.getToken(XplorMRParser.Simple_name_LL, i)

        def End(self):
            return self.getToken(XplorMRParser.End, 0)

        def evaluate_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Evaluate_statementContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Evaluate_statementContext,i)


        def csa_assign(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Csa_assignContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Csa_assignContext,i)


        def Integer_CF(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Integer_CF)
            else:
                return self.getToken(XplorMRParser.Integer_CF, i)

        def Real_CF(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Real_CF)
            else:
                return self.getToken(XplorMRParser.Real_CF, i)

        def Simple_name_CF(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Simple_name_CF)
            else:
                return self.getToken(XplorMRParser.Simple_name_CF, i)

        def getRuleIndex(self):
            return XplorMRParser.RULE_csa_assign_loop

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCsa_assign_loop" ):
                listener.enterCsa_assign_loop(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCsa_assign_loop" ):
                listener.exitCsa_assign_loop(self)




    def csa_assign_loop(self):

        localctx = XplorMRParser.Csa_assign_loopContext(self, self._ctx, self.state)
        self.enterRule(localctx, 230, self.RULE_csa_assign_loop)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2713
            self.match(XplorMRParser.For)
            self.state = 2714
            self.match(XplorMRParser.Symbol_name_CF)
            self.state = 2715
            self.match(XplorMRParser.In_CF)
            self.state = 2716
            self.match(XplorMRParser.L_paren_CF)
            self.state = 2735
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,317,self._ctx)
            if la_ == 1:
                self.state = 2720
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==XplorMRParser.Integer_CF:
                    self.state = 2717
                    self.match(XplorMRParser.Integer_CF)
                    self.state = 2722
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 2:
                self.state = 2726
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==XplorMRParser.Real_CF:
                    self.state = 2723
                    self.match(XplorMRParser.Real_CF)
                    self.state = 2728
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 3:
                self.state = 2732
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==XplorMRParser.Simple_name_CF:
                    self.state = 2729
                    self.match(XplorMRParser.Simple_name_CF)
                    self.state = 2734
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass


            self.state = 2737
            self.match(XplorMRParser.R_paren_CF)
            self.state = 2738
            self.match(XplorMRParser.Loop)
            self.state = 2739
            self.match(XplorMRParser.Simple_name_LL)
            self.state = 2744
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==XplorMRParser.Assign or _la==XplorMRParser.Evaluate_Lp:
                self.state = 2742
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [XplorMRParser.Evaluate_Lp]:
                    self.state = 2740
                    self.evaluate_statement()
                    pass
                elif token in [XplorMRParser.Assign]:
                    self.state = 2741
                    self.csa_assign()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 2746
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2747
            self.match(XplorMRParser.End)
            self.state = 2748
            self.match(XplorMRParser.Loop)
            self.state = 2749
            self.match(XplorMRParser.Simple_name_LL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pre_assign_loopContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def For(self):
            return self.getToken(XplorMRParser.For, 0)

        def Symbol_name_CF(self):
            return self.getToken(XplorMRParser.Symbol_name_CF, 0)

        def In_CF(self):
            return self.getToken(XplorMRParser.In_CF, 0)

        def L_paren_CF(self):
            return self.getToken(XplorMRParser.L_paren_CF, 0)

        def R_paren_CF(self):
            return self.getToken(XplorMRParser.R_paren_CF, 0)

        def Loop(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Loop)
            else:
                return self.getToken(XplorMRParser.Loop, i)

        def Simple_name_LL(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Simple_name_LL)
            else:
                return self.getToken(XplorMRParser.Simple_name_LL, i)

        def End(self):
            return self.getToken(XplorMRParser.End, 0)

        def evaluate_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Evaluate_statementContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Evaluate_statementContext,i)


        def pre_assign(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Pre_assignContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Pre_assignContext,i)


        def Integer_CF(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Integer_CF)
            else:
                return self.getToken(XplorMRParser.Integer_CF, i)

        def Real_CF(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Real_CF)
            else:
                return self.getToken(XplorMRParser.Real_CF, i)

        def Simple_name_CF(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Simple_name_CF)
            else:
                return self.getToken(XplorMRParser.Simple_name_CF, i)

        def getRuleIndex(self):
            return XplorMRParser.RULE_pre_assign_loop

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPre_assign_loop" ):
                listener.enterPre_assign_loop(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPre_assign_loop" ):
                listener.exitPre_assign_loop(self)




    def pre_assign_loop(self):

        localctx = XplorMRParser.Pre_assign_loopContext(self, self._ctx, self.state)
        self.enterRule(localctx, 232, self.RULE_pre_assign_loop)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2751
            self.match(XplorMRParser.For)
            self.state = 2752
            self.match(XplorMRParser.Symbol_name_CF)
            self.state = 2753
            self.match(XplorMRParser.In_CF)
            self.state = 2754
            self.match(XplorMRParser.L_paren_CF)
            self.state = 2773
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,323,self._ctx)
            if la_ == 1:
                self.state = 2758
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==XplorMRParser.Integer_CF:
                    self.state = 2755
                    self.match(XplorMRParser.Integer_CF)
                    self.state = 2760
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 2:
                self.state = 2764
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==XplorMRParser.Real_CF:
                    self.state = 2761
                    self.match(XplorMRParser.Real_CF)
                    self.state = 2766
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 3:
                self.state = 2770
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==XplorMRParser.Simple_name_CF:
                    self.state = 2767
                    self.match(XplorMRParser.Simple_name_CF)
                    self.state = 2772
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass


            self.state = 2775
            self.match(XplorMRParser.R_paren_CF)
            self.state = 2776
            self.match(XplorMRParser.Loop)
            self.state = 2777
            self.match(XplorMRParser.Simple_name_LL)
            self.state = 2782
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==XplorMRParser.Assign or _la==XplorMRParser.Evaluate_Lp:
                self.state = 2780
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [XplorMRParser.Evaluate_Lp]:
                    self.state = 2778
                    self.evaluate_statement()
                    pass
                elif token in [XplorMRParser.Assign]:
                    self.state = 2779
                    self.pre_assign()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 2784
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2785
            self.match(XplorMRParser.End)
            self.state = 2786
            self.match(XplorMRParser.Loop)
            self.state = 2787
            self.match(XplorMRParser.Simple_name_LL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pcs_assign_loopContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def For(self):
            return self.getToken(XplorMRParser.For, 0)

        def Symbol_name_CF(self):
            return self.getToken(XplorMRParser.Symbol_name_CF, 0)

        def In_CF(self):
            return self.getToken(XplorMRParser.In_CF, 0)

        def L_paren_CF(self):
            return self.getToken(XplorMRParser.L_paren_CF, 0)

        def R_paren_CF(self):
            return self.getToken(XplorMRParser.R_paren_CF, 0)

        def Loop(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Loop)
            else:
                return self.getToken(XplorMRParser.Loop, i)

        def Simple_name_LL(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Simple_name_LL)
            else:
                return self.getToken(XplorMRParser.Simple_name_LL, i)

        def End(self):
            return self.getToken(XplorMRParser.End, 0)

        def evaluate_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Evaluate_statementContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Evaluate_statementContext,i)


        def pcs_assign(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Pcs_assignContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Pcs_assignContext,i)


        def Integer_CF(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Integer_CF)
            else:
                return self.getToken(XplorMRParser.Integer_CF, i)

        def Real_CF(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Real_CF)
            else:
                return self.getToken(XplorMRParser.Real_CF, i)

        def Simple_name_CF(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Simple_name_CF)
            else:
                return self.getToken(XplorMRParser.Simple_name_CF, i)

        def getRuleIndex(self):
            return XplorMRParser.RULE_pcs_assign_loop

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPcs_assign_loop" ):
                listener.enterPcs_assign_loop(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPcs_assign_loop" ):
                listener.exitPcs_assign_loop(self)




    def pcs_assign_loop(self):

        localctx = XplorMRParser.Pcs_assign_loopContext(self, self._ctx, self.state)
        self.enterRule(localctx, 234, self.RULE_pcs_assign_loop)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2789
            self.match(XplorMRParser.For)
            self.state = 2790
            self.match(XplorMRParser.Symbol_name_CF)
            self.state = 2791
            self.match(XplorMRParser.In_CF)
            self.state = 2792
            self.match(XplorMRParser.L_paren_CF)
            self.state = 2811
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,329,self._ctx)
            if la_ == 1:
                self.state = 2796
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==XplorMRParser.Integer_CF:
                    self.state = 2793
                    self.match(XplorMRParser.Integer_CF)
                    self.state = 2798
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 2:
                self.state = 2802
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==XplorMRParser.Real_CF:
                    self.state = 2799
                    self.match(XplorMRParser.Real_CF)
                    self.state = 2804
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 3:
                self.state = 2808
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==XplorMRParser.Simple_name_CF:
                    self.state = 2805
                    self.match(XplorMRParser.Simple_name_CF)
                    self.state = 2810
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass


            self.state = 2813
            self.match(XplorMRParser.R_paren_CF)
            self.state = 2814
            self.match(XplorMRParser.Loop)
            self.state = 2815
            self.match(XplorMRParser.Simple_name_LL)
            self.state = 2820
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==XplorMRParser.Assign or _la==XplorMRParser.Evaluate_Lp:
                self.state = 2818
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [XplorMRParser.Evaluate_Lp]:
                    self.state = 2816
                    self.evaluate_statement()
                    pass
                elif token in [XplorMRParser.Assign]:
                    self.state = 2817
                    self.pcs_assign()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 2822
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2823
            self.match(XplorMRParser.End)
            self.state = 2824
            self.match(XplorMRParser.Loop)
            self.state = 2825
            self.match(XplorMRParser.Simple_name_LL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Hbond_assign_loopContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def For(self):
            return self.getToken(XplorMRParser.For, 0)

        def Symbol_name_CF(self):
            return self.getToken(XplorMRParser.Symbol_name_CF, 0)

        def In_CF(self):
            return self.getToken(XplorMRParser.In_CF, 0)

        def L_paren_CF(self):
            return self.getToken(XplorMRParser.L_paren_CF, 0)

        def R_paren_CF(self):
            return self.getToken(XplorMRParser.R_paren_CF, 0)

        def Loop(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Loop)
            else:
                return self.getToken(XplorMRParser.Loop, i)

        def Simple_name_LL(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Simple_name_LL)
            else:
                return self.getToken(XplorMRParser.Simple_name_LL, i)

        def End(self):
            return self.getToken(XplorMRParser.End, 0)

        def evaluate_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Evaluate_statementContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Evaluate_statementContext,i)


        def hbond_assign(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Hbond_assignContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Hbond_assignContext,i)


        def Integer_CF(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Integer_CF)
            else:
                return self.getToken(XplorMRParser.Integer_CF, i)

        def Real_CF(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Real_CF)
            else:
                return self.getToken(XplorMRParser.Real_CF, i)

        def Simple_name_CF(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Simple_name_CF)
            else:
                return self.getToken(XplorMRParser.Simple_name_CF, i)

        def getRuleIndex(self):
            return XplorMRParser.RULE_hbond_assign_loop

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHbond_assign_loop" ):
                listener.enterHbond_assign_loop(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHbond_assign_loop" ):
                listener.exitHbond_assign_loop(self)




    def hbond_assign_loop(self):

        localctx = XplorMRParser.Hbond_assign_loopContext(self, self._ctx, self.state)
        self.enterRule(localctx, 236, self.RULE_hbond_assign_loop)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2827
            self.match(XplorMRParser.For)
            self.state = 2828
            self.match(XplorMRParser.Symbol_name_CF)
            self.state = 2829
            self.match(XplorMRParser.In_CF)
            self.state = 2830
            self.match(XplorMRParser.L_paren_CF)
            self.state = 2849
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,335,self._ctx)
            if la_ == 1:
                self.state = 2834
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==XplorMRParser.Integer_CF:
                    self.state = 2831
                    self.match(XplorMRParser.Integer_CF)
                    self.state = 2836
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 2:
                self.state = 2840
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==XplorMRParser.Real_CF:
                    self.state = 2837
                    self.match(XplorMRParser.Real_CF)
                    self.state = 2842
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 3:
                self.state = 2846
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==XplorMRParser.Simple_name_CF:
                    self.state = 2843
                    self.match(XplorMRParser.Simple_name_CF)
                    self.state = 2848
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass


            self.state = 2851
            self.match(XplorMRParser.R_paren_CF)
            self.state = 2852
            self.match(XplorMRParser.Loop)
            self.state = 2853
            self.match(XplorMRParser.Simple_name_LL)
            self.state = 2858
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==XplorMRParser.Assign or _la==XplorMRParser.Evaluate_Lp:
                self.state = 2856
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [XplorMRParser.Evaluate_Lp]:
                    self.state = 2854
                    self.evaluate_statement()
                    pass
                elif token in [XplorMRParser.Assign]:
                    self.state = 2855
                    self.hbond_assign()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 2860
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2861
            self.match(XplorMRParser.End)
            self.state = 2862
            self.match(XplorMRParser.Loop)
            self.state = 2863
            self.match(XplorMRParser.Simple_name_LL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Hbond_db_assign_loopContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def For(self):
            return self.getToken(XplorMRParser.For, 0)

        def Symbol_name_CF(self):
            return self.getToken(XplorMRParser.Symbol_name_CF, 0)

        def In_CF(self):
            return self.getToken(XplorMRParser.In_CF, 0)

        def L_paren_CF(self):
            return self.getToken(XplorMRParser.L_paren_CF, 0)

        def R_paren_CF(self):
            return self.getToken(XplorMRParser.R_paren_CF, 0)

        def Loop(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Loop)
            else:
                return self.getToken(XplorMRParser.Loop, i)

        def Simple_name_LL(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Simple_name_LL)
            else:
                return self.getToken(XplorMRParser.Simple_name_LL, i)

        def End(self):
            return self.getToken(XplorMRParser.End, 0)

        def evaluate_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Evaluate_statementContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Evaluate_statementContext,i)


        def hbond_db_assign(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Hbond_db_assignContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Hbond_db_assignContext,i)


        def Integer_CF(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Integer_CF)
            else:
                return self.getToken(XplorMRParser.Integer_CF, i)

        def Real_CF(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Real_CF)
            else:
                return self.getToken(XplorMRParser.Real_CF, i)

        def Simple_name_CF(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Simple_name_CF)
            else:
                return self.getToken(XplorMRParser.Simple_name_CF, i)

        def getRuleIndex(self):
            return XplorMRParser.RULE_hbond_db_assign_loop

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHbond_db_assign_loop" ):
                listener.enterHbond_db_assign_loop(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHbond_db_assign_loop" ):
                listener.exitHbond_db_assign_loop(self)




    def hbond_db_assign_loop(self):

        localctx = XplorMRParser.Hbond_db_assign_loopContext(self, self._ctx, self.state)
        self.enterRule(localctx, 238, self.RULE_hbond_db_assign_loop)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2865
            self.match(XplorMRParser.For)
            self.state = 2866
            self.match(XplorMRParser.Symbol_name_CF)
            self.state = 2867
            self.match(XplorMRParser.In_CF)
            self.state = 2868
            self.match(XplorMRParser.L_paren_CF)
            self.state = 2887
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,341,self._ctx)
            if la_ == 1:
                self.state = 2872
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==XplorMRParser.Integer_CF:
                    self.state = 2869
                    self.match(XplorMRParser.Integer_CF)
                    self.state = 2874
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 2:
                self.state = 2878
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==XplorMRParser.Real_CF:
                    self.state = 2875
                    self.match(XplorMRParser.Real_CF)
                    self.state = 2880
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 3:
                self.state = 2884
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==XplorMRParser.Simple_name_CF:
                    self.state = 2881
                    self.match(XplorMRParser.Simple_name_CF)
                    self.state = 2886
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass


            self.state = 2889
            self.match(XplorMRParser.R_paren_CF)
            self.state = 2890
            self.match(XplorMRParser.Loop)
            self.state = 2891
            self.match(XplorMRParser.Simple_name_LL)
            self.state = 2896
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==XplorMRParser.Assign or _la==XplorMRParser.Evaluate_Lp:
                self.state = 2894
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [XplorMRParser.Evaluate_Lp]:
                    self.state = 2892
                    self.evaluate_statement()
                    pass
                elif token in [XplorMRParser.Assign]:
                    self.state = 2893
                    self.hbond_db_assign()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 2898
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2899
            self.match(XplorMRParser.End)
            self.state = 2900
            self.match(XplorMRParser.Loop)
            self.state = 2901
            self.match(XplorMRParser.Simple_name_LL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx



    def sempred(self, localctx:RuleContext, ruleIndex:int, predIndex:int):
        if self._predicates == None:
            self._predicates = dict()
        self._predicates[94] = self.factor_sempred
        pred = self._predicates.get(ruleIndex, None)
        if pred is None:
            raise Exception("No predicate with index:" + str(ruleIndex))
        else:
            return pred(localctx, predIndex)

    def factor_sempred(self, localctx:FactorContext, predIndex:int):
            if predIndex == 0:
                return self.precpred(self._ctx, 32)
         

            if predIndex == 1:
                return self.precpred(self._ctx, 14)
         




