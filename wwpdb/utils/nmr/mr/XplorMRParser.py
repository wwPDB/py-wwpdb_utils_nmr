# Generated from XplorMRParser.g4 by ANTLR 4.10.1
# encoding: utf-8
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
	from typing import TextIO
else:
	from typing.io import TextIO

def serializedATN():
    return [
        4,1,272,2190,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,
        7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,
        13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,
        20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,
        26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,
        33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,
        39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,
        46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,52,7,
        52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,2,57,7,57,2,58,7,58,2,
        59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,2,64,7,64,2,65,7,
        65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,2,71,7,71,2,
        72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,7,77,2,78,7,
        78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,2,84,7,84,2,
        85,7,85,2,86,7,86,2,87,7,87,2,88,7,88,2,89,7,89,2,90,7,90,2,91,7,
        91,2,92,7,92,2,93,7,93,2,94,7,94,2,95,7,95,2,96,7,96,2,97,7,97,2,
        98,7,98,2,99,7,99,2,100,7,100,2,101,7,101,2,102,7,102,2,103,7,103,
        2,104,7,104,2,105,7,105,2,106,7,106,2,107,7,107,2,108,7,108,1,0,
        1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,
        1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,
        1,0,1,0,1,0,1,0,1,0,1,0,1,0,5,0,259,8,0,10,0,12,0,262,9,0,1,0,1,
        0,1,1,1,1,5,1,268,8,1,10,1,12,1,271,9,1,1,1,1,1,1,2,3,2,276,8,2,
        1,2,1,2,5,2,280,8,2,10,2,12,2,283,9,2,1,2,1,2,1,3,1,3,5,3,289,8,
        3,10,3,12,3,292,9,3,1,3,1,3,1,3,5,3,297,8,3,10,3,12,3,300,9,3,1,
        3,1,3,1,3,5,3,305,8,3,10,3,12,3,308,9,3,1,3,1,3,1,3,5,3,313,8,3,
        10,3,12,3,316,9,3,1,3,1,3,1,3,5,3,321,8,3,10,3,12,3,324,9,3,1,3,
        3,3,327,8,3,1,4,3,4,330,8,4,1,4,1,4,5,4,334,8,4,10,4,12,4,337,9,
        4,1,4,1,4,1,5,3,5,342,8,5,1,5,1,5,5,5,346,8,5,10,5,12,5,349,9,5,
        1,5,1,5,1,6,1,6,5,6,355,8,6,10,6,12,6,358,9,6,1,6,1,6,1,7,1,7,5,
        7,364,8,7,10,7,12,7,367,9,7,1,7,1,7,1,8,1,8,5,8,373,8,8,10,8,12,
        8,376,9,8,1,8,1,8,1,9,1,9,5,9,382,8,9,10,9,12,9,385,9,9,1,9,1,9,
        1,10,1,10,5,10,391,8,10,10,10,12,10,394,9,10,1,10,1,10,1,11,1,11,
        5,11,400,8,11,10,11,12,11,403,9,11,1,11,1,11,1,12,1,12,5,12,409,
        8,12,10,12,12,12,412,9,12,1,12,1,12,1,13,1,13,5,13,418,8,13,10,13,
        12,13,421,9,13,1,13,1,13,1,14,1,14,5,14,427,8,14,10,14,12,14,430,
        9,14,1,14,1,14,1,15,1,15,5,15,436,8,15,10,15,12,15,439,9,15,1,15,
        1,15,1,16,1,16,5,16,445,8,16,10,16,12,16,448,9,16,1,16,1,16,1,17,
        1,17,5,17,454,8,17,10,17,12,17,457,9,17,1,17,1,17,1,18,1,18,5,18,
        463,8,18,10,18,12,18,466,9,18,1,18,1,18,1,19,1,19,5,19,472,8,19,
        10,19,12,19,475,9,19,1,19,1,19,1,20,1,20,5,20,481,8,20,10,20,12,
        20,484,9,20,1,20,1,20,1,21,1,21,5,21,490,8,21,10,21,12,21,493,9,
        21,1,21,1,21,1,22,1,22,5,22,499,8,22,10,22,12,22,502,9,22,1,22,1,
        22,1,23,1,23,5,23,508,8,23,10,23,12,23,511,9,23,1,23,1,23,1,24,1,
        24,5,24,517,8,24,10,24,12,24,520,9,24,1,24,1,24,1,25,1,25,1,25,1,
        25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,3,25,536,8,25,1,25,1,
        25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,
        25,1,25,1,25,3,25,555,8,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,
        25,1,25,1,25,1,25,3,25,568,8,25,1,25,1,25,1,25,1,25,1,25,1,25,1,
        25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,
        25,1,25,1,25,3,25,592,8,25,1,25,3,25,595,8,25,1,26,1,26,1,26,1,26,
        1,26,3,26,602,8,26,1,26,3,26,605,8,26,1,26,5,26,608,8,26,10,26,12,
        26,611,9,26,1,26,1,26,1,26,1,26,5,26,617,8,26,10,26,12,26,620,9,
        26,1,27,1,27,3,27,624,8,27,1,27,1,27,1,27,3,27,629,8,27,1,27,1,27,
        1,27,1,27,1,27,3,27,636,8,27,1,28,1,28,3,28,640,8,28,1,28,1,28,1,
        28,3,28,645,8,28,1,28,1,28,1,28,3,28,650,8,28,1,28,1,28,1,28,3,28,
        655,8,28,1,28,1,28,1,28,3,28,660,8,28,1,28,1,28,1,28,3,28,665,8,
        28,1,28,1,28,1,28,3,28,670,8,28,1,28,3,28,673,8,28,1,29,1,29,1,29,
        3,29,678,8,29,1,29,1,29,1,29,1,29,3,29,684,8,29,1,29,3,29,687,8,
        29,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,31,1,31,1,
        31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,
        31,1,31,1,31,3,31,717,8,31,1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,
        32,1,32,1,32,3,32,729,8,32,1,33,1,33,1,33,1,33,1,33,1,33,1,33,1,
        33,1,33,1,33,1,33,1,33,1,33,1,33,1,33,1,33,1,33,1,33,1,33,1,33,1,
        33,1,33,1,33,1,33,1,33,1,33,3,33,757,8,33,1,34,1,34,1,34,1,34,1,
        34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,3,34,774,8,
        34,1,35,1,35,1,35,3,35,779,8,35,1,35,1,35,1,35,1,35,1,35,1,35,1,
        35,1,35,1,35,1,35,1,35,3,35,792,8,35,1,35,1,35,1,35,1,35,1,35,3,
        35,799,8,35,1,36,1,36,1,36,1,36,1,36,1,36,1,36,1,36,1,36,1,36,1,
        37,1,37,1,37,1,37,1,37,1,37,1,37,1,37,1,37,1,37,1,37,1,37,1,37,3,
        37,824,8,37,1,38,1,38,1,38,1,38,1,38,1,38,1,39,1,39,1,39,1,39,1,
        39,1,39,1,39,1,39,1,39,1,39,1,39,1,39,1,39,1,39,1,39,1,39,1,39,1,
        39,1,39,1,39,1,39,3,39,853,8,39,1,40,1,40,1,40,1,40,1,40,1,40,1,
        40,1,40,1,41,1,41,5,41,865,8,41,10,41,12,41,868,9,41,1,41,1,41,3,
        41,872,8,41,1,42,1,42,3,42,876,8,42,1,42,1,42,1,42,3,42,881,8,42,
        1,42,3,42,884,8,42,1,43,1,43,3,43,888,8,43,1,43,1,43,1,43,3,43,893,
        8,43,1,43,1,43,1,43,3,43,898,8,43,1,43,1,43,3,43,902,8,43,1,43,1,
        43,1,43,1,43,3,43,908,8,43,1,43,1,43,3,43,912,8,43,1,43,1,43,3,43,
        916,8,43,1,43,3,43,919,8,43,3,43,921,8,43,1,43,1,43,3,43,925,8,43,
        1,44,1,44,1,44,1,44,1,44,1,44,1,45,1,45,1,45,1,45,1,45,1,45,1,45,
        1,45,1,45,1,45,1,45,1,45,1,45,1,45,1,45,1,45,3,45,949,8,45,1,45,
        1,45,1,45,1,45,1,45,1,45,3,45,957,8,45,1,46,1,46,1,46,1,46,1,47,
        1,47,1,47,1,47,1,47,1,47,1,47,1,47,1,47,1,47,1,47,3,47,974,8,47,
        1,47,1,47,1,47,1,47,1,47,1,47,3,47,982,8,47,1,47,1,47,1,47,1,47,
        3,47,988,8,47,1,47,1,47,1,47,1,47,1,47,1,47,1,47,1,47,1,47,3,47,
        999,8,47,1,47,3,47,1002,8,47,1,48,1,48,1,48,1,48,1,48,1,48,1,48,
        1,48,1,48,1,48,3,48,1014,8,48,1,48,1,48,1,48,1,48,1,48,3,48,1021,
        8,48,1,49,1,49,1,49,1,49,1,49,1,49,1,49,1,49,1,49,1,49,1,49,1,49,
        1,49,1,49,1,49,1,49,1,49,1,49,1,49,1,49,1,49,1,49,1,49,1,49,1,49,
        1,49,3,49,1049,8,49,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,
        1,51,1,51,1,51,1,51,1,51,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,
        1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,3,52,1083,8,52,
        1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,3,52,1093,8,52,1,52,1,52,
        1,52,3,52,1098,8,52,1,53,1,53,1,53,3,53,1103,8,53,1,53,1,53,3,53,
        1107,8,53,1,54,1,54,1,54,1,54,1,55,1,55,1,55,1,55,1,55,1,55,3,55,
        1119,8,55,1,55,1,55,1,56,1,56,1,56,1,57,1,57,1,57,1,58,1,58,1,58,
        1,59,1,59,1,59,1,60,1,60,1,60,1,60,1,60,1,60,1,60,1,60,3,60,1143,
        8,60,1,61,1,61,1,61,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,
        1,62,1,62,1,62,1,62,1,62,1,62,3,62,1163,8,62,1,62,1,62,1,62,1,62,
        3,62,1169,8,62,1,62,1,62,1,62,1,62,3,62,1175,8,62,1,62,1,62,1,62,
        1,62,1,62,1,62,1,62,1,62,1,62,1,62,3,62,1187,8,62,1,62,1,62,1,62,
        1,62,3,62,1193,8,62,1,62,1,62,1,62,1,62,3,62,1199,8,62,1,62,1,62,
        1,62,1,62,1,62,1,62,3,62,1207,8,62,1,62,1,62,1,62,1,62,1,62,1,62,
        1,62,1,62,3,62,1217,8,62,1,62,1,62,1,62,1,62,3,62,1223,8,62,1,62,
        1,62,1,62,1,62,3,62,1229,8,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,
        1,62,1,62,3,62,1240,8,62,1,62,3,62,1243,8,62,1,62,3,62,1246,8,62,
        1,62,1,62,3,62,1250,8,62,1,63,1,63,1,63,1,63,1,63,1,63,1,63,1,63,
        1,63,1,63,3,63,1262,8,63,1,63,1,63,1,63,1,63,1,63,3,63,1269,8,63,
        1,63,1,63,1,63,1,63,1,63,3,63,1276,8,63,1,64,1,64,1,64,1,64,1,64,
        3,64,1283,8,64,1,65,1,65,1,65,1,65,1,65,1,66,1,66,1,66,1,66,1,66,
        1,66,1,66,1,66,1,66,1,66,1,66,1,66,1,66,1,66,1,66,1,66,1,66,1,66,
        1,66,1,66,1,66,1,66,3,66,1312,8,66,1,67,1,67,1,67,1,67,1,67,1,67,
        1,67,1,67,1,67,1,67,1,68,1,68,1,68,1,68,1,68,1,68,1,68,1,68,1,68,
        1,68,1,68,1,68,1,68,1,68,1,68,1,68,1,68,1,68,1,68,1,68,1,68,1,68,
        1,68,1,68,1,68,1,68,1,68,1,68,1,68,1,68,1,68,1,68,1,68,1,68,1,68,
        1,68,1,68,1,68,3,68,1362,8,68,1,68,1,68,1,68,1,68,1,68,1,68,1,68,
        1,68,1,68,1,68,1,68,1,68,1,68,1,68,1,68,1,68,1,68,3,68,1381,8,68,
        1,69,1,69,1,69,1,69,1,69,1,69,1,70,1,70,1,70,1,70,1,70,1,70,1,70,
        1,70,1,70,1,70,1,70,1,70,1,70,1,70,1,70,1,70,1,70,1,70,1,70,1,70,
        1,70,1,70,1,70,1,70,1,70,1,70,1,70,3,70,1416,8,70,1,71,1,71,1,71,
        1,71,1,71,1,71,1,71,1,71,1,71,1,71,1,71,3,71,1429,8,71,1,72,1,72,
        1,72,1,72,1,72,1,72,1,72,1,72,1,72,1,72,1,72,1,72,1,72,1,72,1,72,
        1,72,1,72,1,72,1,72,1,72,1,72,1,72,1,72,1,72,1,72,1,72,3,72,1457,
        8,72,1,73,1,73,1,73,1,73,1,73,1,73,1,73,1,73,1,73,1,73,1,73,1,73,
        1,73,1,73,1,73,1,73,1,73,1,73,1,73,1,73,1,73,1,73,3,73,1481,8,73,
        1,74,1,74,1,74,1,74,1,74,1,74,1,74,1,74,1,74,1,74,1,74,1,74,1,75,
        1,75,1,75,1,75,1,75,1,75,1,75,1,75,1,75,1,75,1,75,1,75,1,75,1,75,
        1,75,1,75,1,75,1,75,1,75,1,75,1,75,1,75,1,75,3,75,1518,8,75,1,75,
        1,75,1,75,1,75,1,75,1,75,3,75,1526,8,75,1,76,1,76,1,76,1,76,1,76,
        1,76,1,76,1,76,1,76,1,76,1,76,1,76,1,76,3,76,1541,8,76,1,77,1,77,
        1,77,3,77,1546,8,77,1,77,1,77,1,77,3,77,1551,8,77,1,77,1,77,1,77,
        1,77,3,77,1557,8,77,1,77,1,77,1,77,3,77,1562,8,77,1,77,1,77,1,77,
        1,77,3,77,1568,8,77,1,77,1,77,1,77,1,77,3,77,1574,8,77,1,77,1,77,
        1,77,1,77,3,77,1580,8,77,1,77,1,77,1,77,1,77,1,77,1,77,1,77,1,77,
        1,77,1,77,3,77,1592,8,77,1,77,1,77,3,77,1596,8,77,1,78,1,78,1,78,
        1,78,1,78,1,78,1,79,1,79,1,79,1,79,1,79,1,79,1,79,1,79,1,79,1,79,
        1,79,1,79,1,79,1,79,1,79,1,79,1,79,1,79,1,79,3,79,1623,8,79,1,79,
        1,79,1,79,1,79,1,79,1,79,1,79,1,79,1,79,1,79,1,79,1,79,1,79,1,79,
        1,79,3,79,1640,8,79,1,80,1,80,1,80,1,80,1,80,1,80,1,80,1,80,1,80,
        1,81,1,81,1,81,1,81,1,81,1,81,1,81,1,81,1,81,1,81,1,81,1,81,1,81,
        1,81,1,81,1,81,1,81,1,81,1,81,1,81,1,81,1,81,1,81,1,81,1,81,1,81,
        3,81,1677,8,81,1,82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,
        1,83,1,83,1,83,1,83,1,83,1,83,1,83,1,83,1,83,1,83,1,83,3,83,1700,
        8,83,1,84,1,84,1,84,1,84,1,84,1,84,1,84,1,85,1,85,1,85,1,85,1,85,
        1,85,1,85,1,85,1,85,1,85,1,85,1,85,1,85,1,85,1,85,1,85,1,85,3,85,
        1726,8,85,1,86,1,86,1,86,1,86,1,86,1,86,1,86,1,87,1,87,1,87,1,87,
        1,87,1,87,1,87,1,87,1,87,1,87,1,87,3,87,1746,8,87,1,88,1,88,1,88,
        1,88,1,88,1,89,1,89,1,89,3,89,1756,8,89,1,89,1,89,1,89,3,89,1761,
        8,89,1,89,1,89,1,89,3,89,1766,8,89,1,89,1,89,1,89,3,89,1771,8,89,
        1,89,1,89,1,89,3,89,1776,8,89,1,89,1,89,1,89,3,89,1781,8,89,1,89,
        1,89,1,89,3,89,1786,8,89,1,89,1,89,1,89,3,89,1791,8,89,1,89,1,89,
        1,89,3,89,1796,8,89,1,89,1,89,1,89,3,89,1801,8,89,1,89,1,89,1,89,
        3,89,1806,8,89,1,89,1,89,1,89,3,89,1811,8,89,1,89,1,89,1,89,3,89,
        1816,8,89,1,89,3,89,1819,8,89,1,90,1,90,1,90,1,90,1,91,1,91,1,91,
        1,91,1,92,1,92,1,92,5,92,1832,8,92,10,92,12,92,1835,9,92,1,93,1,
        93,1,93,5,93,1840,8,93,10,93,12,93,1843,9,93,1,94,1,94,1,94,1,94,
        1,94,1,94,1,94,1,94,1,94,1,94,1,94,1,94,3,94,1857,8,94,1,94,1,94,
        1,94,1,94,1,94,1,94,1,94,1,94,1,94,1,94,1,94,1,94,1,94,1,94,3,94,
        1873,8,94,3,94,1875,8,94,1,94,1,94,1,94,1,94,1,94,1,94,1,94,1,94,
        1,94,3,94,1886,8,94,3,94,1888,8,94,1,94,1,94,1,94,1,94,1,94,1,94,
        3,94,1896,8,94,1,94,1,94,3,94,1900,8,94,1,94,1,94,1,94,1,94,1,94,
        1,94,1,94,1,94,1,94,3,94,1911,8,94,1,94,1,94,3,94,1915,8,94,1,94,
        1,94,3,94,1919,8,94,1,94,3,94,1922,8,94,1,94,1,94,1,94,1,94,1,94,
        1,94,1,94,1,94,1,94,1,94,1,94,3,94,1935,8,94,3,94,1937,8,94,1,94,
        1,94,1,94,1,94,1,94,3,94,1944,8,94,3,94,1946,8,94,1,94,1,94,1,94,
        1,94,1,94,3,94,1953,8,94,1,94,1,94,1,94,3,94,1958,8,94,3,94,1960,
        8,94,1,94,1,94,1,94,1,94,1,94,1,94,1,94,1,94,1,94,1,94,1,94,1,94,
        3,94,1974,8,94,1,94,1,94,1,94,1,94,1,94,1,94,5,94,1982,8,94,10,94,
        12,94,1985,9,94,1,95,1,95,1,96,1,96,1,97,1,97,1,98,1,98,1,99,1,99,
        1,99,5,99,1998,8,99,10,99,12,99,2001,9,99,1,99,3,99,2004,8,99,3,
        99,2006,8,99,1,99,1,99,5,99,2010,8,99,10,99,12,99,2013,9,99,1,99,
        1,99,1,100,1,100,1,100,1,100,1,101,1,101,1,101,1,101,1,101,1,101,
        3,101,2027,8,101,1,102,1,102,1,102,3,102,2032,8,102,1,103,1,103,
        1,103,5,103,2037,8,103,10,103,12,103,2040,9,103,1,104,1,104,1,104,
        1,104,1,104,1,104,3,104,2048,8,104,1,105,1,105,1,105,1,105,1,105,
        1,105,1,105,1,105,1,105,1,105,1,105,1,105,1,105,1,105,1,105,1,105,
        1,105,1,105,1,105,1,105,1,105,1,105,1,105,1,105,1,105,1,105,1,105,
        1,105,1,105,1,105,1,105,1,105,1,105,1,105,1,105,1,105,1,105,1,105,
        1,105,1,105,1,105,1,105,1,105,1,105,1,105,1,105,1,105,1,105,1,105,
        1,105,1,105,1,105,1,105,1,105,1,105,1,105,1,105,1,105,1,105,1,105,
        5,105,2110,8,105,10,105,12,105,2113,9,105,1,105,1,105,1,105,1,105,
        1,105,1,105,1,105,1,105,1,105,1,105,1,105,1,105,5,105,2127,8,105,
        10,105,12,105,2130,9,105,1,105,1,105,1,105,1,105,1,105,1,105,1,105,
        1,105,1,105,1,105,1,105,1,105,1,105,1,105,1,105,1,105,1,105,1,105,
        1,105,1,105,1,105,1,105,1,105,1,105,1,105,1,105,1,105,1,105,1,105,
        1,105,1,105,1,105,1,105,1,105,1,105,1,105,1,105,3,105,2169,8,105,
        1,106,1,106,1,106,1,106,1,106,1,107,1,107,1,107,1,107,1,107,1,107,
        1,108,1,108,1,108,5,108,2185,8,108,10,108,12,108,2188,9,108,1,108,
        0,1,188,109,0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,
        38,40,42,44,46,48,50,52,54,56,58,60,62,64,66,68,70,72,74,76,78,80,
        82,84,86,88,90,92,94,96,98,100,102,104,106,108,110,112,114,116,118,
        120,122,124,126,128,130,132,134,136,138,140,142,144,146,148,150,
        152,154,156,158,160,162,164,166,168,170,172,174,176,178,180,182,
        184,186,188,190,192,194,196,198,200,202,204,206,208,210,212,214,
        216,0,8,1,0,42,43,1,0,182,183,2,0,178,178,184,184,3,0,178,178,180,
        180,194,194,2,0,178,178,180,180,1,0,167,168,1,0,225,229,1,0,264,
        270,2603,0,260,1,0,0,0,2,265,1,0,0,0,4,275,1,0,0,0,6,326,1,0,0,0,
        8,329,1,0,0,0,10,341,1,0,0,0,12,352,1,0,0,0,14,361,1,0,0,0,16,370,
        1,0,0,0,18,379,1,0,0,0,20,388,1,0,0,0,22,397,1,0,0,0,24,406,1,0,
        0,0,26,415,1,0,0,0,28,424,1,0,0,0,30,433,1,0,0,0,32,442,1,0,0,0,
        34,451,1,0,0,0,36,460,1,0,0,0,38,469,1,0,0,0,40,478,1,0,0,0,42,487,
        1,0,0,0,44,496,1,0,0,0,46,505,1,0,0,0,48,514,1,0,0,0,50,594,1,0,
        0,0,52,596,1,0,0,0,54,635,1,0,0,0,56,672,1,0,0,0,58,686,1,0,0,0,
        60,688,1,0,0,0,62,716,1,0,0,0,64,718,1,0,0,0,66,756,1,0,0,0,68,758,
        1,0,0,0,70,798,1,0,0,0,72,800,1,0,0,0,74,823,1,0,0,0,76,825,1,0,
        0,0,78,852,1,0,0,0,80,854,1,0,0,0,82,871,1,0,0,0,84,883,1,0,0,0,
        86,924,1,0,0,0,88,926,1,0,0,0,90,956,1,0,0,0,92,958,1,0,0,0,94,1001,
        1,0,0,0,96,1003,1,0,0,0,98,1048,1,0,0,0,100,1050,1,0,0,0,102,1059,
        1,0,0,0,104,1097,1,0,0,0,106,1099,1,0,0,0,108,1108,1,0,0,0,110,1112,
        1,0,0,0,112,1122,1,0,0,0,114,1125,1,0,0,0,116,1128,1,0,0,0,118,1131,
        1,0,0,0,120,1134,1,0,0,0,122,1144,1,0,0,0,124,1249,1,0,0,0,126,1251,
        1,0,0,0,128,1282,1,0,0,0,130,1284,1,0,0,0,132,1311,1,0,0,0,134,1313,
        1,0,0,0,136,1380,1,0,0,0,138,1382,1,0,0,0,140,1415,1,0,0,0,142,1417,
        1,0,0,0,144,1456,1,0,0,0,146,1480,1,0,0,0,148,1482,1,0,0,0,150,1525,
        1,0,0,0,152,1527,1,0,0,0,154,1595,1,0,0,0,156,1597,1,0,0,0,158,1639,
        1,0,0,0,160,1641,1,0,0,0,162,1676,1,0,0,0,164,1678,1,0,0,0,166,1699,
        1,0,0,0,168,1701,1,0,0,0,170,1725,1,0,0,0,172,1727,1,0,0,0,174,1745,
        1,0,0,0,176,1747,1,0,0,0,178,1818,1,0,0,0,180,1820,1,0,0,0,182,1824,
        1,0,0,0,184,1828,1,0,0,0,186,1836,1,0,0,0,188,1973,1,0,0,0,190,1986,
        1,0,0,0,192,1988,1,0,0,0,194,1990,1,0,0,0,196,1992,1,0,0,0,198,1994,
        1,0,0,0,200,2016,1,0,0,0,202,2026,1,0,0,0,204,2028,1,0,0,0,206,2033,
        1,0,0,0,208,2047,1,0,0,0,210,2168,1,0,0,0,212,2170,1,0,0,0,214,2175,
        1,0,0,0,216,2181,1,0,0,0,218,259,3,2,1,0,219,259,3,4,2,0,220,259,
        3,6,3,0,221,259,3,8,4,0,222,259,3,10,5,0,223,259,3,12,6,0,224,259,
        3,14,7,0,225,259,3,16,8,0,226,259,3,18,9,0,227,259,3,20,10,0,228,
        259,3,22,11,0,229,259,3,24,12,0,230,259,3,26,13,0,231,259,3,28,14,
        0,232,259,3,30,15,0,233,259,3,32,16,0,234,259,3,34,17,0,235,259,
        3,36,18,0,236,259,3,38,19,0,237,259,3,40,20,0,238,259,3,42,21,0,
        239,259,3,44,22,0,240,259,3,46,23,0,241,259,3,48,24,0,242,259,3,
        198,99,0,243,259,3,200,100,0,244,259,3,214,107,0,245,259,3,52,26,
        0,246,259,3,60,30,0,247,259,3,64,32,0,248,259,3,82,41,0,249,259,
        3,88,44,0,250,259,3,176,88,0,251,259,3,180,90,0,252,259,3,96,48,
        0,253,259,3,92,46,0,254,259,3,130,65,0,255,259,3,142,71,0,256,259,
        3,156,78,0,257,259,3,160,80,0,258,218,1,0,0,0,258,219,1,0,0,0,258,
        220,1,0,0,0,258,221,1,0,0,0,258,222,1,0,0,0,258,223,1,0,0,0,258,
        224,1,0,0,0,258,225,1,0,0,0,258,226,1,0,0,0,258,227,1,0,0,0,258,
        228,1,0,0,0,258,229,1,0,0,0,258,230,1,0,0,0,258,231,1,0,0,0,258,
        232,1,0,0,0,258,233,1,0,0,0,258,234,1,0,0,0,258,235,1,0,0,0,258,
        236,1,0,0,0,258,237,1,0,0,0,258,238,1,0,0,0,258,239,1,0,0,0,258,
        240,1,0,0,0,258,241,1,0,0,0,258,242,1,0,0,0,258,243,1,0,0,0,258,
        244,1,0,0,0,258,245,1,0,0,0,258,246,1,0,0,0,258,247,1,0,0,0,258,
        248,1,0,0,0,258,249,1,0,0,0,258,250,1,0,0,0,258,251,1,0,0,0,258,
        252,1,0,0,0,258,253,1,0,0,0,258,254,1,0,0,0,258,255,1,0,0,0,258,
        256,1,0,0,0,258,257,1,0,0,0,259,262,1,0,0,0,260,258,1,0,0,0,260,
        261,1,0,0,0,261,263,1,0,0,0,262,260,1,0,0,0,263,264,5,0,0,1,264,
        1,1,0,0,0,265,269,5,3,0,0,266,268,3,50,25,0,267,266,1,0,0,0,268,
        271,1,0,0,0,269,267,1,0,0,0,269,270,1,0,0,0,270,272,1,0,0,0,271,
        269,1,0,0,0,272,273,5,2,0,0,273,3,1,0,0,0,274,276,5,36,0,0,275,274,
        1,0,0,0,275,276,1,0,0,0,276,277,1,0,0,0,277,281,5,37,0,0,278,280,
        3,58,29,0,279,278,1,0,0,0,280,283,1,0,0,0,281,279,1,0,0,0,281,282,
        1,0,0,0,282,284,1,0,0,0,283,281,1,0,0,0,284,285,5,2,0,0,285,5,1,
        0,0,0,286,290,5,39,0,0,287,289,3,62,31,0,288,287,1,0,0,0,289,292,
        1,0,0,0,290,288,1,0,0,0,290,291,1,0,0,0,291,293,1,0,0,0,292,290,
        1,0,0,0,293,327,5,2,0,0,294,298,7,0,0,0,295,297,3,66,33,0,296,295,
        1,0,0,0,297,300,1,0,0,0,298,296,1,0,0,0,298,299,1,0,0,0,299,301,
        1,0,0,0,300,298,1,0,0,0,301,327,5,2,0,0,302,306,5,47,0,0,303,305,
        3,70,35,0,304,303,1,0,0,0,305,308,1,0,0,0,306,304,1,0,0,0,306,307,
        1,0,0,0,307,309,1,0,0,0,308,306,1,0,0,0,309,327,5,2,0,0,310,314,
        5,50,0,0,311,313,3,74,37,0,312,311,1,0,0,0,313,316,1,0,0,0,314,312,
        1,0,0,0,314,315,1,0,0,0,315,317,1,0,0,0,316,314,1,0,0,0,317,327,
        5,2,0,0,318,322,5,51,0,0,319,321,3,78,39,0,320,319,1,0,0,0,321,324,
        1,0,0,0,322,320,1,0,0,0,322,323,1,0,0,0,323,325,1,0,0,0,324,322,
        1,0,0,0,325,327,5,2,0,0,326,286,1,0,0,0,326,294,1,0,0,0,326,302,
        1,0,0,0,326,310,1,0,0,0,326,318,1,0,0,0,327,7,1,0,0,0,328,330,5,
        36,0,0,329,328,1,0,0,0,329,330,1,0,0,0,330,331,1,0,0,0,331,335,5,
        52,0,0,332,334,3,82,41,0,333,332,1,0,0,0,334,337,1,0,0,0,335,333,
        1,0,0,0,335,336,1,0,0,0,336,338,1,0,0,0,337,335,1,0,0,0,338,339,
        5,2,0,0,339,9,1,0,0,0,340,342,5,36,0,0,341,340,1,0,0,0,341,342,1,
        0,0,0,342,343,1,0,0,0,343,347,5,57,0,0,344,346,3,86,43,0,345,344,
        1,0,0,0,346,349,1,0,0,0,347,345,1,0,0,0,347,348,1,0,0,0,348,350,
        1,0,0,0,349,347,1,0,0,0,350,351,5,2,0,0,351,11,1,0,0,0,352,356,5,
        60,0,0,353,355,3,90,45,0,354,353,1,0,0,0,355,358,1,0,0,0,356,354,
        1,0,0,0,356,357,1,0,0,0,357,359,1,0,0,0,358,356,1,0,0,0,359,360,
        5,2,0,0,360,13,1,0,0,0,361,365,5,64,0,0,362,364,3,94,47,0,363,362,
        1,0,0,0,364,367,1,0,0,0,365,363,1,0,0,0,365,366,1,0,0,0,366,368,
        1,0,0,0,367,365,1,0,0,0,368,369,5,2,0,0,369,15,1,0,0,0,370,374,5,
        66,0,0,371,373,3,98,49,0,372,371,1,0,0,0,373,376,1,0,0,0,374,372,
        1,0,0,0,374,375,1,0,0,0,375,377,1,0,0,0,376,374,1,0,0,0,377,378,
        5,2,0,0,378,17,1,0,0,0,379,383,5,70,0,0,380,382,3,104,52,0,381,380,
        1,0,0,0,382,385,1,0,0,0,383,381,1,0,0,0,383,384,1,0,0,0,384,386,
        1,0,0,0,385,383,1,0,0,0,386,387,5,2,0,0,387,19,1,0,0,0,388,392,5,
        78,0,0,389,391,3,124,62,0,390,389,1,0,0,0,391,394,1,0,0,0,392,390,
        1,0,0,0,392,393,1,0,0,0,393,395,1,0,0,0,394,392,1,0,0,0,395,396,
        5,2,0,0,396,21,1,0,0,0,397,401,5,85,0,0,398,400,3,128,64,0,399,398,
        1,0,0,0,400,403,1,0,0,0,401,399,1,0,0,0,401,402,1,0,0,0,402,404,
        1,0,0,0,403,401,1,0,0,0,404,405,5,2,0,0,405,23,1,0,0,0,406,410,5,
        86,0,0,407,409,3,132,66,0,408,407,1,0,0,0,409,412,1,0,0,0,410,408,
        1,0,0,0,410,411,1,0,0,0,411,413,1,0,0,0,412,410,1,0,0,0,413,414,
        5,2,0,0,414,25,1,0,0,0,415,419,5,87,0,0,416,418,3,136,68,0,417,416,
        1,0,0,0,418,421,1,0,0,0,419,417,1,0,0,0,419,420,1,0,0,0,420,422,
        1,0,0,0,421,419,1,0,0,0,422,423,5,2,0,0,423,27,1,0,0,0,424,428,5,
        91,0,0,425,427,3,140,70,0,426,425,1,0,0,0,427,430,1,0,0,0,428,426,
        1,0,0,0,428,429,1,0,0,0,429,431,1,0,0,0,430,428,1,0,0,0,431,432,
        5,2,0,0,432,29,1,0,0,0,433,437,5,93,0,0,434,436,3,144,72,0,435,434,
        1,0,0,0,436,439,1,0,0,0,437,435,1,0,0,0,437,438,1,0,0,0,438,440,
        1,0,0,0,439,437,1,0,0,0,440,441,5,2,0,0,441,31,1,0,0,0,442,446,5,
        94,0,0,443,445,3,146,73,0,444,443,1,0,0,0,445,448,1,0,0,0,446,444,
        1,0,0,0,446,447,1,0,0,0,447,449,1,0,0,0,448,446,1,0,0,0,449,450,
        5,2,0,0,450,33,1,0,0,0,451,455,5,95,0,0,452,454,3,150,75,0,453,452,
        1,0,0,0,454,457,1,0,0,0,455,453,1,0,0,0,455,456,1,0,0,0,456,458,
        1,0,0,0,457,455,1,0,0,0,458,459,5,2,0,0,459,35,1,0,0,0,460,464,5,
        98,0,0,461,463,3,154,77,0,462,461,1,0,0,0,463,466,1,0,0,0,464,462,
        1,0,0,0,464,465,1,0,0,0,465,467,1,0,0,0,466,464,1,0,0,0,467,468,
        5,2,0,0,468,37,1,0,0,0,469,473,5,103,0,0,470,472,3,158,79,0,471,
        470,1,0,0,0,472,475,1,0,0,0,473,471,1,0,0,0,473,474,1,0,0,0,474,
        476,1,0,0,0,475,473,1,0,0,0,476,477,5,2,0,0,477,39,1,0,0,0,478,482,
        5,114,0,0,479,481,3,162,81,0,480,479,1,0,0,0,481,484,1,0,0,0,482,
        480,1,0,0,0,482,483,1,0,0,0,483,485,1,0,0,0,484,482,1,0,0,0,485,
        486,5,2,0,0,486,41,1,0,0,0,487,491,5,115,0,0,488,490,3,166,83,0,
        489,488,1,0,0,0,490,493,1,0,0,0,491,489,1,0,0,0,491,492,1,0,0,0,
        492,494,1,0,0,0,493,491,1,0,0,0,494,495,5,2,0,0,495,43,1,0,0,0,496,
        500,5,116,0,0,497,499,3,170,85,0,498,497,1,0,0,0,499,502,1,0,0,0,
        500,498,1,0,0,0,500,501,1,0,0,0,501,503,1,0,0,0,502,500,1,0,0,0,
        503,504,5,2,0,0,504,45,1,0,0,0,505,509,5,118,0,0,506,508,3,174,87,
        0,507,506,1,0,0,0,508,511,1,0,0,0,509,507,1,0,0,0,509,510,1,0,0,
        0,510,512,1,0,0,0,511,509,1,0,0,0,512,513,5,2,0,0,513,47,1,0,0,0,
        514,518,5,119,0,0,515,517,3,178,89,0,516,515,1,0,0,0,517,520,1,0,
        0,0,518,516,1,0,0,0,518,519,1,0,0,0,519,521,1,0,0,0,520,518,1,0,
        0,0,521,522,5,2,0,0,522,49,1,0,0,0,523,595,3,52,26,0,524,525,5,5,
        0,0,525,526,5,182,0,0,526,595,3,194,97,0,527,528,5,6,0,0,528,529,
        5,205,0,0,529,595,5,204,0,0,530,531,5,7,0,0,531,532,5,182,0,0,532,
        595,3,194,97,0,533,535,5,8,0,0,534,536,5,188,0,0,535,534,1,0,0,0,
        535,536,1,0,0,0,536,537,1,0,0,0,537,595,3,194,97,0,538,539,5,9,0,
        0,539,595,5,182,0,0,540,541,5,10,0,0,541,595,5,182,0,0,542,543,5,
        11,0,0,543,544,5,182,0,0,544,545,5,182,0,0,545,595,3,194,97,0,546,
        547,5,12,0,0,547,548,5,182,0,0,548,595,5,178,0,0,549,550,5,13,0,
        0,550,551,5,182,0,0,551,595,5,178,0,0,552,554,5,14,0,0,553,555,5,
        188,0,0,554,553,1,0,0,0,554,555,1,0,0,0,555,556,1,0,0,0,556,595,
        5,178,0,0,557,558,5,15,0,0,558,559,5,209,0,0,559,595,5,208,0,0,560,
        561,5,16,0,0,561,562,3,54,27,0,562,563,5,2,0,0,563,595,1,0,0,0,564,
        565,5,17,0,0,565,567,5,18,0,0,566,568,5,188,0,0,567,566,1,0,0,0,
        567,568,1,0,0,0,568,569,1,0,0,0,569,595,3,194,97,0,570,595,5,19,
        0,0,571,572,5,20,0,0,572,573,5,182,0,0,573,595,3,194,97,0,574,575,
        5,21,0,0,575,576,5,182,0,0,576,595,3,194,97,0,577,578,5,22,0,0,578,
        579,5,182,0,0,579,595,3,194,97,0,580,581,5,23,0,0,581,582,5,182,
        0,0,582,595,3,194,97,0,583,584,5,24,0,0,584,585,5,182,0,0,585,595,
        3,194,97,0,586,587,5,25,0,0,587,588,5,182,0,0,588,595,3,194,97,0,
        589,591,5,26,0,0,590,592,5,188,0,0,591,590,1,0,0,0,591,592,1,0,0,
        0,592,593,1,0,0,0,593,595,3,194,97,0,594,523,1,0,0,0,594,524,1,0,
        0,0,594,527,1,0,0,0,594,530,1,0,0,0,594,533,1,0,0,0,594,538,1,0,
        0,0,594,540,1,0,0,0,594,542,1,0,0,0,594,546,1,0,0,0,594,549,1,0,
        0,0,594,552,1,0,0,0,594,557,1,0,0,0,594,560,1,0,0,0,594,564,1,0,
        0,0,594,570,1,0,0,0,594,571,1,0,0,0,594,574,1,0,0,0,594,577,1,0,
        0,0,594,580,1,0,0,0,594,583,1,0,0,0,594,586,1,0,0,0,594,589,1,0,
        0,0,595,51,1,0,0,0,596,597,5,4,0,0,597,598,3,182,91,0,598,599,3,
        182,91,0,599,601,3,190,95,0,600,602,3,190,95,0,601,600,1,0,0,0,601,
        602,1,0,0,0,602,604,1,0,0,0,603,605,3,190,95,0,604,603,1,0,0,0,604,
        605,1,0,0,0,605,609,1,0,0,0,606,608,3,56,28,0,607,606,1,0,0,0,608,
        611,1,0,0,0,609,607,1,0,0,0,609,610,1,0,0,0,610,618,1,0,0,0,611,
        609,1,0,0,0,612,613,5,173,0,0,613,614,3,182,91,0,614,615,3,182,91,
        0,615,617,1,0,0,0,616,612,1,0,0,0,617,620,1,0,0,0,618,616,1,0,0,
        0,618,619,1,0,0,0,619,53,1,0,0,0,620,618,1,0,0,0,621,623,5,27,0,
        0,622,624,5,188,0,0,623,622,1,0,0,0,623,624,1,0,0,0,624,625,1,0,
        0,0,625,636,3,194,97,0,626,628,5,28,0,0,627,629,5,188,0,0,628,627,
        1,0,0,0,628,629,1,0,0,0,629,630,1,0,0,0,630,636,3,194,97,0,631,632,
        5,29,0,0,632,636,3,182,91,0,633,634,5,30,0,0,634,636,3,182,91,0,
        635,621,1,0,0,0,635,626,1,0,0,0,635,631,1,0,0,0,635,633,1,0,0,0,
        636,55,1,0,0,0,637,639,5,31,0,0,638,640,5,188,0,0,639,638,1,0,0,
        0,639,640,1,0,0,0,640,641,1,0,0,0,641,673,3,196,98,0,642,644,5,32,
        0,0,643,645,5,188,0,0,644,643,1,0,0,0,644,645,1,0,0,0,645,646,1,
        0,0,0,646,673,3,196,98,0,647,649,5,56,0,0,648,650,5,188,0,0,649,
        648,1,0,0,0,649,650,1,0,0,0,650,651,1,0,0,0,651,673,3,196,98,0,652,
        654,5,33,0,0,653,655,5,188,0,0,654,653,1,0,0,0,654,655,1,0,0,0,655,
        656,1,0,0,0,656,673,3,196,98,0,657,659,5,34,0,0,658,660,5,188,0,
        0,659,658,1,0,0,0,659,660,1,0,0,0,660,661,1,0,0,0,661,673,3,196,
        98,0,662,664,5,35,0,0,663,665,5,188,0,0,664,663,1,0,0,0,664,665,
        1,0,0,0,665,666,1,0,0,0,666,673,3,196,98,0,667,669,5,48,0,0,668,
        670,5,188,0,0,669,668,1,0,0,0,669,670,1,0,0,0,670,671,1,0,0,0,671,
        673,3,196,98,0,672,637,1,0,0,0,672,642,1,0,0,0,672,647,1,0,0,0,672,
        652,1,0,0,0,672,657,1,0,0,0,672,662,1,0,0,0,672,667,1,0,0,0,673,
        57,1,0,0,0,674,687,3,60,30,0,675,677,5,38,0,0,676,678,5,188,0,0,
        677,676,1,0,0,0,677,678,1,0,0,0,678,679,1,0,0,0,679,687,5,178,0,
        0,680,687,5,19,0,0,681,683,5,21,0,0,682,684,5,188,0,0,683,682,1,
        0,0,0,683,684,1,0,0,0,684,685,1,0,0,0,685,687,3,194,97,0,686,674,
        1,0,0,0,686,675,1,0,0,0,686,680,1,0,0,0,686,681,1,0,0,0,687,59,1,
        0,0,0,688,689,5,4,0,0,689,690,3,182,91,0,690,691,3,182,91,0,691,
        692,3,182,91,0,692,693,3,182,91,0,693,694,3,190,95,0,694,695,3,190,
        95,0,695,696,3,190,95,0,696,697,5,178,0,0,697,61,1,0,0,0,698,717,
        3,64,32,0,699,700,5,9,0,0,700,717,5,182,0,0,701,702,5,40,0,0,702,
        703,3,194,97,0,703,704,3,194,97,0,704,705,3,194,97,0,705,717,1,0,
        0,0,706,707,5,41,0,0,707,717,3,194,97,0,708,709,5,14,0,0,709,717,
        5,178,0,0,710,711,5,15,0,0,711,717,5,208,0,0,712,713,5,17,0,0,713,
        714,5,18,0,0,714,717,3,194,97,0,715,717,5,19,0,0,716,698,1,0,0,0,
        716,699,1,0,0,0,716,701,1,0,0,0,716,706,1,0,0,0,716,708,1,0,0,0,
        716,710,1,0,0,0,716,712,1,0,0,0,716,715,1,0,0,0,717,63,1,0,0,0,718,
        719,5,4,0,0,719,720,3,182,91,0,720,721,3,182,91,0,721,722,3,182,
        91,0,722,723,3,182,91,0,723,724,3,182,91,0,724,725,3,182,91,0,725,
        726,3,190,95,0,726,728,3,190,95,0,727,729,3,190,95,0,728,727,1,0,
        0,0,728,729,1,0,0,0,729,65,1,0,0,0,730,757,3,68,34,0,731,732,5,9,
        0,0,732,757,5,182,0,0,733,734,5,44,0,0,734,757,5,211,0,0,735,736,
        5,21,0,0,736,757,3,194,97,0,737,738,5,45,0,0,738,757,5,179,0,0,739,
        740,5,46,0,0,740,757,5,204,0,0,741,742,5,40,0,0,742,743,3,194,97,
        0,743,744,3,194,97,0,744,745,3,194,97,0,745,757,1,0,0,0,746,747,
        5,41,0,0,747,757,3,194,97,0,748,749,5,14,0,0,749,757,5,178,0,0,750,
        751,5,15,0,0,751,757,5,208,0,0,752,753,5,17,0,0,753,754,5,18,0,0,
        754,757,3,194,97,0,755,757,5,19,0,0,756,730,1,0,0,0,756,731,1,0,
        0,0,756,733,1,0,0,0,756,735,1,0,0,0,756,737,1,0,0,0,756,739,1,0,
        0,0,756,741,1,0,0,0,756,746,1,0,0,0,756,748,1,0,0,0,756,750,1,0,
        0,0,756,752,1,0,0,0,756,755,1,0,0,0,757,67,1,0,0,0,758,759,5,4,0,
        0,759,760,3,182,91,0,760,761,3,182,91,0,761,762,3,182,91,0,762,763,
        3,182,91,0,763,764,3,182,91,0,764,765,3,182,91,0,765,766,3,190,95,
        0,766,773,3,190,95,0,767,774,3,190,95,0,768,769,3,190,95,0,769,770,
        3,190,95,0,770,771,3,190,95,0,771,772,3,190,95,0,772,774,1,0,0,0,
        773,767,1,0,0,0,773,768,1,0,0,0,773,774,1,0,0,0,774,69,1,0,0,0,775,
        799,3,72,36,0,776,778,5,48,0,0,777,779,5,188,0,0,778,777,1,0,0,0,
        778,779,1,0,0,0,779,780,1,0,0,0,780,799,5,178,0,0,781,782,5,9,0,
        0,782,799,5,182,0,0,783,784,5,41,0,0,784,785,3,194,97,0,785,786,
        3,194,97,0,786,799,1,0,0,0,787,788,5,14,0,0,788,799,5,178,0,0,789,
        791,5,49,0,0,790,792,5,188,0,0,791,790,1,0,0,0,791,792,1,0,0,0,792,
        793,1,0,0,0,793,799,5,178,0,0,794,795,5,17,0,0,795,796,5,18,0,0,
        796,799,3,194,97,0,797,799,5,19,0,0,798,775,1,0,0,0,798,776,1,0,
        0,0,798,781,1,0,0,0,798,783,1,0,0,0,798,787,1,0,0,0,798,789,1,0,
        0,0,798,794,1,0,0,0,798,797,1,0,0,0,799,71,1,0,0,0,800,801,5,4,0,
        0,801,802,3,182,91,0,802,803,3,182,91,0,803,804,3,182,91,0,804,805,
        3,182,91,0,805,806,3,190,95,0,806,807,3,190,95,0,807,808,3,190,95,
        0,808,809,3,190,95,0,809,73,1,0,0,0,810,824,3,76,38,0,811,812,5,
        9,0,0,812,824,5,182,0,0,813,814,5,40,0,0,814,824,3,194,97,0,815,
        816,5,14,0,0,816,824,5,178,0,0,817,818,5,15,0,0,818,824,5,208,0,
        0,819,820,5,17,0,0,820,821,5,18,0,0,821,824,3,194,97,0,822,824,5,
        19,0,0,823,810,1,0,0,0,823,811,1,0,0,0,823,813,1,0,0,0,823,815,1,
        0,0,0,823,817,1,0,0,0,823,819,1,0,0,0,823,822,1,0,0,0,824,75,1,0,
        0,0,825,826,5,4,0,0,826,827,3,182,91,0,827,828,3,182,91,0,828,829,
        3,190,95,0,829,830,3,190,95,0,830,77,1,0,0,0,831,853,3,80,40,0,832,
        833,5,9,0,0,833,853,5,182,0,0,834,835,5,40,0,0,835,836,3,194,97,
        0,836,837,3,194,97,0,837,838,3,194,97,0,838,839,3,194,97,0,839,853,
        1,0,0,0,840,841,5,41,0,0,841,853,3,194,97,0,842,843,5,14,0,0,843,
        853,5,178,0,0,844,845,5,15,0,0,845,853,5,208,0,0,846,847,5,17,0,
        0,847,848,5,18,0,0,848,853,3,194,97,0,849,853,5,19,0,0,850,851,5,
        44,0,0,851,853,5,212,0,0,852,831,1,0,0,0,852,832,1,0,0,0,852,834,
        1,0,0,0,852,840,1,0,0,0,852,842,1,0,0,0,852,844,1,0,0,0,852,846,
        1,0,0,0,852,849,1,0,0,0,852,850,1,0,0,0,853,79,1,0,0,0,854,855,5,
        4,0,0,855,856,3,182,91,0,856,857,3,182,91,0,857,858,3,182,91,0,858,
        859,3,182,91,0,859,860,3,190,95,0,860,861,3,190,95,0,861,81,1,0,
        0,0,862,866,5,53,0,0,863,865,3,84,42,0,864,863,1,0,0,0,865,868,1,
        0,0,0,866,864,1,0,0,0,866,867,1,0,0,0,867,869,1,0,0,0,868,866,1,
        0,0,0,869,872,5,2,0,0,870,872,5,54,0,0,871,862,1,0,0,0,871,870,1,
        0,0,0,872,83,1,0,0,0,873,875,5,55,0,0,874,876,5,188,0,0,875,874,
        1,0,0,0,875,876,1,0,0,0,876,877,1,0,0,0,877,884,3,182,91,0,878,880,
        5,56,0,0,879,881,5,188,0,0,880,879,1,0,0,0,880,881,1,0,0,0,881,882,
        1,0,0,0,882,884,3,194,97,0,883,873,1,0,0,0,883,878,1,0,0,0,884,85,
        1,0,0,0,885,887,5,58,0,0,886,888,5,188,0,0,887,886,1,0,0,0,887,888,
        1,0,0,0,888,889,1,0,0,0,889,925,5,178,0,0,890,892,5,59,0,0,891,893,
        5,188,0,0,892,891,1,0,0,0,892,893,1,0,0,0,893,894,1,0,0,0,894,920,
        5,185,0,0,895,897,3,194,97,0,896,898,5,176,0,0,897,896,1,0,0,0,897,
        898,1,0,0,0,898,899,1,0,0,0,899,901,3,194,97,0,900,902,5,176,0,0,
        901,900,1,0,0,0,901,902,1,0,0,0,902,903,1,0,0,0,903,904,3,194,97,
        0,904,921,1,0,0,0,905,907,5,171,0,0,906,908,5,188,0,0,907,906,1,
        0,0,0,907,908,1,0,0,0,908,909,1,0,0,0,909,911,3,182,91,0,910,912,
        5,176,0,0,911,910,1,0,0,0,911,912,1,0,0,0,912,918,1,0,0,0,913,915,
        5,172,0,0,914,916,5,188,0,0,915,914,1,0,0,0,915,916,1,0,0,0,916,
        917,1,0,0,0,917,919,3,182,91,0,918,913,1,0,0,0,918,919,1,0,0,0,919,
        921,1,0,0,0,920,895,1,0,0,0,920,905,1,0,0,0,921,922,1,0,0,0,922,
        923,5,186,0,0,923,925,1,0,0,0,924,885,1,0,0,0,924,890,1,0,0,0,925,
        87,1,0,0,0,926,927,5,4,0,0,927,928,3,182,91,0,928,929,3,190,95,0,
        929,930,3,190,95,0,930,931,3,190,95,0,931,89,1,0,0,0,932,957,3,92,
        46,0,933,934,5,9,0,0,934,957,5,182,0,0,935,936,5,61,0,0,936,937,
        5,178,0,0,937,957,3,194,97,0,938,939,5,41,0,0,939,957,3,194,97,0,
        940,941,5,14,0,0,941,957,5,178,0,0,942,943,5,17,0,0,943,944,5,18,
        0,0,944,948,3,194,97,0,945,949,5,136,0,0,946,947,5,9,0,0,947,949,
        5,182,0,0,948,945,1,0,0,0,948,946,1,0,0,0,949,957,1,0,0,0,950,957,
        5,19,0,0,951,952,5,62,0,0,952,953,3,194,97,0,953,954,5,178,0,0,954,
        957,1,0,0,0,955,957,5,63,0,0,956,932,1,0,0,0,956,933,1,0,0,0,956,
        935,1,0,0,0,956,938,1,0,0,0,956,940,1,0,0,0,956,942,1,0,0,0,956,
        950,1,0,0,0,956,951,1,0,0,0,956,955,1,0,0,0,957,91,1,0,0,0,958,959,
        5,4,0,0,959,960,3,182,91,0,960,961,3,182,91,0,961,93,1,0,0,0,962,
        1002,3,96,48,0,963,964,5,9,0,0,964,1002,5,182,0,0,965,966,5,40,0,
        0,966,967,3,194,97,0,967,968,3,194,97,0,968,969,3,194,97,0,969,970,
        3,194,97,0,970,1002,1,0,0,0,971,973,5,48,0,0,972,974,5,188,0,0,973,
        972,1,0,0,0,973,974,1,0,0,0,974,975,1,0,0,0,975,1002,5,178,0,0,976,
        977,5,65,0,0,977,1002,5,178,0,0,978,979,5,41,0,0,979,981,3,194,97,
        0,980,982,3,194,97,0,981,980,1,0,0,0,981,982,1,0,0,0,982,1002,1,
        0,0,0,983,984,5,14,0,0,984,1002,5,178,0,0,985,987,5,49,0,0,986,988,
        5,188,0,0,987,986,1,0,0,0,987,988,1,0,0,0,988,989,1,0,0,0,989,1002,
        5,178,0,0,990,991,5,15,0,0,991,1002,5,208,0,0,992,993,5,17,0,0,993,
        994,5,18,0,0,994,998,3,194,97,0,995,999,5,136,0,0,996,997,5,9,0,
        0,997,999,5,182,0,0,998,995,1,0,0,0,998,996,1,0,0,0,999,1002,1,0,
        0,0,1000,1002,5,19,0,0,1001,962,1,0,0,0,1001,963,1,0,0,0,1001,965,
        1,0,0,0,1001,971,1,0,0,0,1001,976,1,0,0,0,1001,978,1,0,0,0,1001,
        983,1,0,0,0,1001,985,1,0,0,0,1001,990,1,0,0,0,1001,992,1,0,0,0,1001,
        1000,1,0,0,0,1002,95,1,0,0,0,1003,1004,5,4,0,0,1004,1005,3,182,91,
        0,1005,1006,3,182,91,0,1006,1007,3,182,91,0,1007,1013,3,182,91,0,
        1008,1009,3,182,91,0,1009,1010,3,182,91,0,1010,1011,3,182,91,0,1011,
        1012,3,182,91,0,1012,1014,1,0,0,0,1013,1008,1,0,0,0,1013,1014,1,
        0,0,0,1014,1015,1,0,0,0,1015,1016,3,190,95,0,1016,1020,3,190,95,
        0,1017,1018,3,190,95,0,1018,1019,3,190,95,0,1019,1021,1,0,0,0,1020,
        1017,1,0,0,0,1020,1021,1,0,0,0,1021,97,1,0,0,0,1022,1049,3,100,50,
        0,1023,1024,5,9,0,0,1024,1049,5,182,0,0,1025,1026,5,61,0,0,1026,
        1027,5,178,0,0,1027,1028,5,178,0,0,1028,1029,3,194,97,0,1029,1030,
        3,194,97,0,1030,1031,3,194,97,0,1031,1049,1,0,0,0,1032,1033,5,41,
        0,0,1033,1049,3,194,97,0,1034,1035,5,14,0,0,1035,1049,5,178,0,0,
        1036,1037,5,67,0,0,1037,1049,3,194,97,0,1038,1039,5,68,0,0,1039,
        1049,3,194,97,0,1040,1041,5,15,0,0,1041,1049,5,208,0,0,1042,1043,
        5,17,0,0,1043,1044,5,18,0,0,1044,1049,3,194,97,0,1045,1049,3,102,
        51,0,1046,1049,5,19,0,0,1047,1049,5,63,0,0,1048,1022,1,0,0,0,1048,
        1023,1,0,0,0,1048,1025,1,0,0,0,1048,1032,1,0,0,0,1048,1034,1,0,0,
        0,1048,1036,1,0,0,0,1048,1038,1,0,0,0,1048,1040,1,0,0,0,1048,1042,
        1,0,0,0,1048,1045,1,0,0,0,1048,1046,1,0,0,0,1048,1047,1,0,0,0,1049,
        99,1,0,0,0,1050,1051,5,4,0,0,1051,1052,3,182,91,0,1052,1053,3,182,
        91,0,1053,1054,3,182,91,0,1054,1055,3,182,91,0,1055,1056,3,182,91,
        0,1056,1057,3,190,95,0,1057,1058,3,190,95,0,1058,101,1,0,0,0,1059,
        1060,5,69,0,0,1060,1061,3,182,91,0,1061,1062,3,194,97,0,1062,1063,
        3,194,97,0,1063,103,1,0,0,0,1064,1098,3,106,53,0,1065,1098,3,108,
        54,0,1066,1098,3,110,55,0,1067,1098,3,112,56,0,1068,1098,3,114,57,
        0,1069,1098,3,116,58,0,1070,1098,3,118,59,0,1071,1098,3,120,60,0,
        1072,1098,3,122,61,0,1073,1074,5,9,0,0,1074,1098,5,182,0,0,1075,
        1076,5,77,0,0,1076,1098,3,194,97,0,1077,1078,5,65,0,0,1078,1098,
        5,178,0,0,1079,1080,5,41,0,0,1080,1082,3,194,97,0,1081,1083,3,194,
        97,0,1082,1081,1,0,0,0,1082,1083,1,0,0,0,1083,1098,1,0,0,0,1084,
        1085,5,15,0,0,1085,1098,5,208,0,0,1086,1087,5,17,0,0,1087,1088,5,
        18,0,0,1088,1092,3,194,97,0,1089,1093,5,136,0,0,1090,1091,5,9,0,
        0,1091,1093,5,182,0,0,1092,1089,1,0,0,0,1092,1090,1,0,0,0,1093,1094,
        1,0,0,0,1094,1095,5,182,0,0,1095,1098,1,0,0,0,1096,1098,5,19,0,0,
        1097,1064,1,0,0,0,1097,1065,1,0,0,0,1097,1066,1,0,0,0,1097,1067,
        1,0,0,0,1097,1068,1,0,0,0,1097,1069,1,0,0,0,1097,1070,1,0,0,0,1097,
        1071,1,0,0,0,1097,1072,1,0,0,0,1097,1073,1,0,0,0,1097,1075,1,0,0,
        0,1097,1077,1,0,0,0,1097,1079,1,0,0,0,1097,1084,1,0,0,0,1097,1086,
        1,0,0,0,1097,1096,1,0,0,0,1098,105,1,0,0,0,1099,1100,5,71,0,0,1100,
        1102,3,182,91,0,1101,1103,3,182,91,0,1102,1101,1,0,0,0,1102,1103,
        1,0,0,0,1103,1104,1,0,0,0,1104,1106,3,194,97,0,1105,1107,3,194,97,
        0,1106,1105,1,0,0,0,1106,1107,1,0,0,0,1107,107,1,0,0,0,1108,1109,
        5,69,0,0,1109,1110,3,182,91,0,1110,1111,3,194,97,0,1111,109,1,0,
        0,0,1112,1113,5,51,0,0,1113,1114,3,182,91,0,1114,1115,3,182,91,0,
        1115,1116,3,182,91,0,1116,1118,5,182,0,0,1117,1119,5,179,0,0,1118,
        1117,1,0,0,0,1118,1119,1,0,0,0,1119,1120,1,0,0,0,1120,1121,5,182,
        0,0,1121,111,1,0,0,0,1122,1123,5,72,0,0,1123,1124,3,182,91,0,1124,
        113,1,0,0,0,1125,1126,5,66,0,0,1126,1127,3,182,91,0,1127,115,1,0,
        0,0,1128,1129,5,73,0,0,1129,1130,3,182,91,0,1130,117,1,0,0,0,1131,
        1132,5,74,0,0,1132,1133,3,182,91,0,1133,119,1,0,0,0,1134,1135,5,
        75,0,0,1135,1136,5,182,0,0,1136,1137,3,182,91,0,1137,1138,3,182,
        91,0,1138,1139,3,182,91,0,1139,1140,3,182,91,0,1140,1142,3,182,91,
        0,1141,1143,3,182,91,0,1142,1141,1,0,0,0,1142,1143,1,0,0,0,1143,
        121,1,0,0,0,1144,1145,5,76,0,0,1145,1146,3,182,91,0,1146,123,1,0,
        0,0,1147,1250,3,126,63,0,1148,1149,5,9,0,0,1149,1250,5,182,0,0,1150,
        1151,5,27,0,0,1151,1250,3,194,97,0,1152,1153,5,41,0,0,1153,1250,
        3,194,97,0,1154,1155,5,79,0,0,1155,1156,3,194,97,0,1156,1157,3,194,
        97,0,1157,1162,3,194,97,0,1158,1159,3,194,97,0,1159,1160,3,194,97,
        0,1160,1161,3,194,97,0,1161,1163,1,0,0,0,1162,1158,1,0,0,0,1162,
        1163,1,0,0,0,1163,1168,1,0,0,0,1164,1165,3,194,97,0,1165,1166,3,
        194,97,0,1166,1167,3,194,97,0,1167,1169,1,0,0,0,1168,1164,1,0,0,
        0,1168,1169,1,0,0,0,1169,1174,1,0,0,0,1170,1171,3,194,97,0,1171,
        1172,3,194,97,0,1172,1173,3,194,97,0,1173,1175,1,0,0,0,1174,1170,
        1,0,0,0,1174,1175,1,0,0,0,1175,1250,1,0,0,0,1176,1177,5,14,0,0,1177,
        1250,5,178,0,0,1178,1179,5,80,0,0,1179,1180,3,194,97,0,1180,1181,
        3,194,97,0,1181,1186,3,194,97,0,1182,1183,3,194,97,0,1183,1184,3,
        194,97,0,1184,1185,3,194,97,0,1185,1187,1,0,0,0,1186,1182,1,0,0,
        0,1186,1187,1,0,0,0,1187,1192,1,0,0,0,1188,1189,3,194,97,0,1189,
        1190,3,194,97,0,1190,1191,3,194,97,0,1191,1193,1,0,0,0,1192,1188,
        1,0,0,0,1192,1193,1,0,0,0,1193,1198,1,0,0,0,1194,1195,3,194,97,0,
        1195,1196,3,194,97,0,1196,1197,3,194,97,0,1197,1199,1,0,0,0,1198,
        1194,1,0,0,0,1198,1199,1,0,0,0,1199,1250,1,0,0,0,1200,1201,5,17,
        0,0,1201,1202,5,18,0,0,1202,1206,3,194,97,0,1203,1207,5,136,0,0,
        1204,1205,5,9,0,0,1205,1207,5,182,0,0,1206,1203,1,0,0,0,1206,1204,
        1,0,0,0,1207,1250,1,0,0,0,1208,1209,5,81,0,0,1209,1210,3,194,97,
        0,1210,1211,3,194,97,0,1211,1216,3,194,97,0,1212,1213,3,194,97,0,
        1213,1214,3,194,97,0,1214,1215,3,194,97,0,1215,1217,1,0,0,0,1216,
        1212,1,0,0,0,1216,1217,1,0,0,0,1217,1222,1,0,0,0,1218,1219,3,194,
        97,0,1219,1220,3,194,97,0,1220,1221,3,194,97,0,1221,1223,1,0,0,0,
        1222,1218,1,0,0,0,1222,1223,1,0,0,0,1223,1228,1,0,0,0,1224,1225,
        3,194,97,0,1225,1226,3,194,97,0,1226,1227,3,194,97,0,1227,1229,1,
        0,0,0,1228,1224,1,0,0,0,1228,1229,1,0,0,0,1229,1250,1,0,0,0,1230,
        1250,5,19,0,0,1231,1232,5,21,0,0,1232,1250,3,194,97,0,1233,1234,
        5,82,0,0,1234,1250,5,215,0,0,1235,1236,5,62,0,0,1236,1237,5,84,0,
        0,1237,1239,3,194,97,0,1238,1240,3,194,97,0,1239,1238,1,0,0,0,1239,
        1240,1,0,0,0,1240,1242,1,0,0,0,1241,1243,3,194,97,0,1242,1241,1,
        0,0,0,1242,1243,1,0,0,0,1243,1245,1,0,0,0,1244,1246,3,194,97,0,1245,
        1244,1,0,0,0,1245,1246,1,0,0,0,1246,1250,1,0,0,0,1247,1250,5,83,
        0,0,1248,1250,5,63,0,0,1249,1147,1,0,0,0,1249,1148,1,0,0,0,1249,
        1150,1,0,0,0,1249,1152,1,0,0,0,1249,1154,1,0,0,0,1249,1176,1,0,0,
        0,1249,1178,1,0,0,0,1249,1200,1,0,0,0,1249,1208,1,0,0,0,1249,1230,
        1,0,0,0,1249,1231,1,0,0,0,1249,1233,1,0,0,0,1249,1235,1,0,0,0,1249,
        1247,1,0,0,0,1249,1248,1,0,0,0,1250,125,1,0,0,0,1251,1252,5,4,0,
        0,1252,1253,3,182,91,0,1253,1254,3,182,91,0,1254,1255,3,182,91,0,
        1255,1261,3,182,91,0,1256,1257,3,182,91,0,1257,1258,3,182,91,0,1258,
        1259,3,182,91,0,1259,1260,3,182,91,0,1260,1262,1,0,0,0,1261,1256,
        1,0,0,0,1261,1262,1,0,0,0,1262,1268,1,0,0,0,1263,1264,3,182,91,0,
        1264,1265,3,182,91,0,1265,1266,3,182,91,0,1266,1267,3,182,91,0,1267,
        1269,1,0,0,0,1268,1263,1,0,0,0,1268,1269,1,0,0,0,1269,1275,1,0,0,
        0,1270,1271,3,182,91,0,1271,1272,3,182,91,0,1272,1273,3,182,91,0,
        1273,1274,3,182,91,0,1274,1276,1,0,0,0,1275,1270,1,0,0,0,1275,1276,
        1,0,0,0,1276,127,1,0,0,0,1277,1283,3,130,65,0,1278,1279,5,21,0,0,
        1279,1283,3,194,97,0,1280,1283,5,17,0,0,1281,1283,5,19,0,0,1282,
        1277,1,0,0,0,1282,1278,1,0,0,0,1282,1280,1,0,0,0,1282,1281,1,0,0,
        0,1283,129,1,0,0,0,1284,1285,5,4,0,0,1285,1286,3,182,91,0,1286,1287,
        3,190,95,0,1287,1288,3,190,95,0,1288,131,1,0,0,0,1289,1312,3,134,
        67,0,1290,1291,5,9,0,0,1291,1312,5,182,0,0,1292,1293,5,40,0,0,1293,
        1294,3,194,97,0,1294,1295,3,194,97,0,1295,1296,3,194,97,0,1296,1297,
        3,194,97,0,1297,1298,3,194,97,0,1298,1312,1,0,0,0,1299,1300,5,41,
        0,0,1300,1312,3,194,97,0,1301,1302,5,14,0,0,1302,1312,5,178,0,0,
        1303,1304,5,15,0,0,1304,1312,5,208,0,0,1305,1306,5,17,0,0,1306,1307,
        5,18,0,0,1307,1312,3,194,97,0,1308,1312,5,19,0,0,1309,1310,5,44,
        0,0,1310,1312,5,212,0,0,1311,1289,1,0,0,0,1311,1290,1,0,0,0,1311,
        1292,1,0,0,0,1311,1299,1,0,0,0,1311,1301,1,0,0,0,1311,1303,1,0,0,
        0,1311,1305,1,0,0,0,1311,1308,1,0,0,0,1311,1309,1,0,0,0,1312,133,
        1,0,0,0,1313,1314,5,4,0,0,1314,1315,3,182,91,0,1315,1316,3,182,91,
        0,1316,1317,3,182,91,0,1317,1318,3,182,91,0,1318,1319,3,182,91,0,
        1319,1320,3,182,91,0,1320,1321,3,190,95,0,1321,1322,3,190,95,0,1322,
        135,1,0,0,0,1323,1381,3,138,69,0,1324,1325,5,9,0,0,1325,1381,5,182,
        0,0,1326,1327,5,27,0,0,1327,1381,3,194,97,0,1328,1329,5,88,0,0,1329,
        1381,3,194,97,0,1330,1331,5,41,0,0,1331,1381,3,194,97,0,1332,1333,
        5,79,0,0,1333,1334,3,194,97,0,1334,1335,3,194,97,0,1335,1336,3,194,
        97,0,1336,1337,3,194,97,0,1337,1338,3,194,97,0,1338,1339,3,194,97,
        0,1339,1340,3,194,97,0,1340,1381,1,0,0,0,1341,1342,5,89,0,0,1342,
        1381,5,178,0,0,1343,1344,5,90,0,0,1344,1345,3,194,97,0,1345,1346,
        3,194,97,0,1346,1347,3,194,97,0,1347,1348,3,194,97,0,1348,1349,3,
        194,97,0,1349,1350,3,194,97,0,1350,1351,3,194,97,0,1351,1352,3,194,
        97,0,1352,1381,1,0,0,0,1353,1354,5,14,0,0,1354,1381,5,178,0,0,1355,
        1356,5,17,0,0,1356,1357,5,18,0,0,1357,1361,3,194,97,0,1358,1362,
        5,136,0,0,1359,1360,5,9,0,0,1360,1362,5,182,0,0,1361,1358,1,0,0,
        0,1361,1359,1,0,0,0,1362,1381,1,0,0,0,1363,1364,5,81,0,0,1364,1365,
        3,194,97,0,1365,1366,3,194,97,0,1366,1367,3,194,97,0,1367,1368,3,
        194,97,0,1368,1369,3,194,97,0,1369,1370,3,194,97,0,1370,1371,3,194,
        97,0,1371,1381,1,0,0,0,1372,1381,5,19,0,0,1373,1374,5,152,0,0,1374,
        1381,5,178,0,0,1375,1376,5,62,0,0,1376,1377,3,194,97,0,1377,1378,
        3,194,97,0,1378,1381,1,0,0,0,1379,1381,5,63,0,0,1380,1323,1,0,0,
        0,1380,1324,1,0,0,0,1380,1326,1,0,0,0,1380,1328,1,0,0,0,1380,1330,
        1,0,0,0,1380,1332,1,0,0,0,1380,1341,1,0,0,0,1380,1343,1,0,0,0,1380,
        1353,1,0,0,0,1380,1355,1,0,0,0,1380,1363,1,0,0,0,1380,1372,1,0,0,
        0,1380,1373,1,0,0,0,1380,1375,1,0,0,0,1380,1379,1,0,0,0,1381,137,
        1,0,0,0,1382,1383,5,4,0,0,1383,1384,3,182,91,0,1384,1385,3,182,91,
        0,1385,1386,3,182,91,0,1386,1387,3,182,91,0,1387,139,1,0,0,0,1388,
        1416,3,142,71,0,1389,1390,5,9,0,0,1390,1416,5,182,0,0,1391,1392,
        5,21,0,0,1392,1416,3,194,97,0,1393,1394,5,44,0,0,1394,1416,5,213,
        0,0,1395,1396,5,40,0,0,1396,1397,3,194,97,0,1397,1398,3,194,97,0,
        1398,1399,3,194,97,0,1399,1416,1,0,0,0,1400,1401,5,92,0,0,1401,1402,
        3,194,97,0,1402,1403,3,194,97,0,1403,1404,3,194,97,0,1404,1416,1,
        0,0,0,1405,1406,5,41,0,0,1406,1416,3,194,97,0,1407,1408,5,14,0,0,
        1408,1416,5,178,0,0,1409,1410,5,15,0,0,1410,1416,5,208,0,0,1411,
        1412,5,17,0,0,1412,1413,5,18,0,0,1413,1416,3,194,97,0,1414,1416,
        5,19,0,0,1415,1388,1,0,0,0,1415,1389,1,0,0,0,1415,1391,1,0,0,0,1415,
        1393,1,0,0,0,1415,1395,1,0,0,0,1415,1400,1,0,0,0,1415,1405,1,0,0,
        0,1415,1407,1,0,0,0,1415,1409,1,0,0,0,1415,1411,1,0,0,0,1415,1414,
        1,0,0,0,1416,141,1,0,0,0,1417,1418,5,4,0,0,1418,1419,3,182,91,0,
        1419,1420,3,182,91,0,1420,1421,3,182,91,0,1421,1422,3,182,91,0,1422,
        1423,3,182,91,0,1423,1424,3,182,91,0,1424,1425,3,182,91,0,1425,1426,
        3,190,95,0,1426,1428,3,190,95,0,1427,1429,3,190,95,0,1428,1427,1,
        0,0,0,1428,1429,1,0,0,0,1429,143,1,0,0,0,1430,1457,3,142,71,0,1431,
        1432,5,9,0,0,1432,1457,5,182,0,0,1433,1434,5,21,0,0,1434,1457,3,
        194,97,0,1435,1436,5,40,0,0,1436,1437,3,194,97,0,1437,1438,3,194,
        97,0,1438,1439,3,194,97,0,1439,1457,1,0,0,0,1440,1441,5,92,0,0,1441,
        1442,3,194,97,0,1442,1443,3,194,97,0,1443,1444,3,194,97,0,1444,1445,
        3,194,97,0,1445,1457,1,0,0,0,1446,1447,5,41,0,0,1447,1457,3,194,
        97,0,1448,1449,5,14,0,0,1449,1457,5,178,0,0,1450,1451,5,15,0,0,1451,
        1457,5,208,0,0,1452,1453,5,17,0,0,1453,1454,5,18,0,0,1454,1457,3,
        194,97,0,1455,1457,5,19,0,0,1456,1430,1,0,0,0,1456,1431,1,0,0,0,
        1456,1433,1,0,0,0,1456,1435,1,0,0,0,1456,1440,1,0,0,0,1456,1446,
        1,0,0,0,1456,1448,1,0,0,0,1456,1450,1,0,0,0,1456,1452,1,0,0,0,1456,
        1455,1,0,0,0,1457,145,1,0,0,0,1458,1481,3,148,74,0,1459,1460,5,9,
        0,0,1460,1481,5,182,0,0,1461,1462,5,40,0,0,1462,1463,3,194,97,0,
        1463,1464,3,194,97,0,1464,1465,3,194,97,0,1465,1466,3,194,97,0,1466,
        1467,3,194,97,0,1467,1468,3,194,97,0,1468,1469,3,194,97,0,1469,1481,
        1,0,0,0,1470,1471,5,41,0,0,1471,1481,3,194,97,0,1472,1473,5,14,0,
        0,1473,1481,5,178,0,0,1474,1475,5,15,0,0,1475,1481,5,208,0,0,1476,
        1477,5,17,0,0,1477,1478,5,18,0,0,1478,1481,3,194,97,0,1479,1481,
        5,19,0,0,1480,1458,1,0,0,0,1480,1459,1,0,0,0,1480,1461,1,0,0,0,1480,
        1470,1,0,0,0,1480,1472,1,0,0,0,1480,1474,1,0,0,0,1480,1476,1,0,0,
        0,1480,1479,1,0,0,0,1481,147,1,0,0,0,1482,1483,5,4,0,0,1483,1484,
        3,182,91,0,1484,1485,3,182,91,0,1485,1486,3,182,91,0,1486,1487,3,
        182,91,0,1487,1488,3,182,91,0,1488,1489,3,182,91,0,1489,1490,3,182,
        91,0,1490,1491,3,182,91,0,1491,1492,3,190,95,0,1492,1493,3,190,95,
        0,1493,149,1,0,0,0,1494,1526,3,152,76,0,1495,1496,5,9,0,0,1496,1526,
        5,182,0,0,1497,1498,5,96,0,0,1498,1526,5,182,0,0,1499,1500,5,61,
        0,0,1500,1501,5,178,0,0,1501,1502,5,178,0,0,1502,1526,3,194,97,0,
        1503,1504,5,77,0,0,1504,1526,3,194,97,0,1505,1506,5,41,0,0,1506,
        1526,3,194,97,0,1507,1508,5,14,0,0,1508,1526,5,178,0,0,1509,1510,
        5,15,0,0,1510,1526,5,208,0,0,1511,1512,5,17,0,0,1512,1513,5,18,0,
        0,1513,1517,3,194,97,0,1514,1518,5,136,0,0,1515,1516,5,9,0,0,1516,
        1518,5,182,0,0,1517,1514,1,0,0,0,1517,1515,1,0,0,0,1518,1526,1,0,
        0,0,1519,1526,5,19,0,0,1520,1521,5,62,0,0,1521,1522,5,97,0,0,1522,
        1523,5,178,0,0,1523,1526,5,178,0,0,1524,1526,5,63,0,0,1525,1494,
        1,0,0,0,1525,1495,1,0,0,0,1525,1497,1,0,0,0,1525,1499,1,0,0,0,1525,
        1503,1,0,0,0,1525,1505,1,0,0,0,1525,1507,1,0,0,0,1525,1509,1,0,0,
        0,1525,1511,1,0,0,0,1525,1519,1,0,0,0,1525,1520,1,0,0,0,1525,1524,
        1,0,0,0,1526,151,1,0,0,0,1527,1528,5,4,0,0,1528,1529,3,182,91,0,
        1529,1530,3,182,91,0,1530,1531,3,182,91,0,1531,1532,3,182,91,0,1532,
        1533,3,182,91,0,1533,1534,3,182,91,0,1534,1535,3,182,91,0,1535,1536,
        3,182,91,0,1536,1537,3,182,91,0,1537,1538,3,182,91,0,1538,1540,3,
        182,91,0,1539,1541,3,182,91,0,1540,1539,1,0,0,0,1540,1541,1,0,0,
        0,1541,153,1,0,0,0,1542,1596,3,156,78,0,1543,1545,5,9,0,0,1544,1546,
        5,188,0,0,1545,1544,1,0,0,0,1545,1546,1,0,0,0,1546,1547,1,0,0,0,
        1547,1596,5,182,0,0,1548,1550,5,41,0,0,1549,1551,5,188,0,0,1550,
        1549,1,0,0,0,1550,1551,1,0,0,0,1551,1552,1,0,0,0,1552,1553,5,182,
        0,0,1553,1596,3,194,97,0,1554,1556,5,14,0,0,1555,1557,5,188,0,0,
        1556,1555,1,0,0,0,1556,1557,1,0,0,0,1557,1558,1,0,0,0,1558,1596,
        5,178,0,0,1559,1561,5,15,0,0,1560,1562,5,207,0,0,1561,1560,1,0,0,
        0,1561,1562,1,0,0,0,1562,1563,1,0,0,0,1563,1564,5,209,0,0,1564,1596,
        5,208,0,0,1565,1567,5,99,0,0,1566,1568,5,188,0,0,1567,1566,1,0,0,
        0,1567,1568,1,0,0,0,1568,1569,1,0,0,0,1569,1570,5,182,0,0,1570,1596,
        3,194,97,0,1571,1573,5,100,0,0,1572,1574,5,188,0,0,1573,1572,1,0,
        0,0,1573,1574,1,0,0,0,1574,1575,1,0,0,0,1575,1576,5,182,0,0,1576,
        1596,3,194,97,0,1577,1579,5,101,0,0,1578,1580,5,188,0,0,1579,1578,
        1,0,0,0,1579,1580,1,0,0,0,1580,1581,1,0,0,0,1581,1582,5,182,0,0,
        1582,1583,3,194,97,0,1583,1584,3,194,97,0,1584,1596,1,0,0,0,1585,
        1586,5,17,0,0,1586,1587,5,18,0,0,1587,1591,3,194,97,0,1588,1592,
        5,136,0,0,1589,1590,5,9,0,0,1590,1592,5,182,0,0,1591,1588,1,0,0,
        0,1591,1589,1,0,0,0,1592,1596,1,0,0,0,1593,1596,5,19,0,0,1594,1596,
        5,102,0,0,1595,1542,1,0,0,0,1595,1543,1,0,0,0,1595,1548,1,0,0,0,
        1595,1554,1,0,0,0,1595,1559,1,0,0,0,1595,1565,1,0,0,0,1595,1571,
        1,0,0,0,1595,1577,1,0,0,0,1595,1585,1,0,0,0,1595,1593,1,0,0,0,1595,
        1594,1,0,0,0,1596,155,1,0,0,0,1597,1598,5,4,0,0,1598,1599,3,182,
        91,0,1599,1600,3,182,91,0,1600,1601,3,190,95,0,1601,1602,3,190,95,
        0,1602,157,1,0,0,0,1603,1640,3,160,80,0,1604,1605,5,9,0,0,1605,1640,
        5,182,0,0,1606,1607,5,104,0,0,1607,1640,5,178,0,0,1608,1609,5,40,
        0,0,1609,1610,3,194,97,0,1610,1611,3,194,97,0,1611,1640,1,0,0,0,
        1612,1613,5,41,0,0,1613,1640,3,194,97,0,1614,1615,5,14,0,0,1615,
        1640,5,178,0,0,1616,1617,5,17,0,0,1617,1618,5,18,0,0,1618,1622,3,
        194,97,0,1619,1623,5,136,0,0,1620,1621,5,9,0,0,1621,1623,5,182,0,
        0,1622,1619,1,0,0,0,1622,1620,1,0,0,0,1623,1640,1,0,0,0,1624,1640,
        5,19,0,0,1625,1626,5,105,0,0,1626,1640,5,182,0,0,1627,1628,5,106,
        0,0,1628,1629,3,194,97,0,1629,1630,5,178,0,0,1630,1640,1,0,0,0,1631,
        1640,5,107,0,0,1632,1640,5,108,0,0,1633,1640,5,109,0,0,1634,1640,
        5,110,0,0,1635,1640,5,111,0,0,1636,1640,5,112,0,0,1637,1638,5,113,
        0,0,1638,1640,5,178,0,0,1639,1603,1,0,0,0,1639,1604,1,0,0,0,1639,
        1606,1,0,0,0,1639,1608,1,0,0,0,1639,1612,1,0,0,0,1639,1614,1,0,0,
        0,1639,1616,1,0,0,0,1639,1624,1,0,0,0,1639,1625,1,0,0,0,1639,1627,
        1,0,0,0,1639,1631,1,0,0,0,1639,1632,1,0,0,0,1639,1633,1,0,0,0,1639,
        1634,1,0,0,0,1639,1635,1,0,0,0,1639,1636,1,0,0,0,1639,1637,1,0,0,
        0,1640,159,1,0,0,0,1641,1642,5,4,0,0,1642,1643,3,182,91,0,1643,1644,
        3,182,91,0,1644,1645,3,182,91,0,1645,1646,3,182,91,0,1646,1647,3,
        182,91,0,1647,1648,3,190,95,0,1648,1649,3,190,95,0,1649,161,1,0,
        0,0,1650,1677,3,164,82,0,1651,1652,5,9,0,0,1652,1677,5,182,0,0,1653,
        1654,5,104,0,0,1654,1677,5,178,0,0,1655,1656,5,40,0,0,1656,1657,
        3,194,97,0,1657,1658,3,194,97,0,1658,1677,1,0,0,0,1659,1660,5,41,
        0,0,1660,1677,3,194,97,0,1661,1662,5,14,0,0,1662,1677,5,178,0,0,
        1663,1677,5,107,0,0,1664,1677,5,108,0,0,1665,1677,5,106,0,0,1666,
        1677,5,109,0,0,1667,1677,5,110,0,0,1668,1677,5,113,0,0,1669,1670,
        5,17,0,0,1670,1677,5,18,0,0,1671,1677,5,19,0,0,1672,1673,5,105,0,
        0,1673,1677,5,182,0,0,1674,1677,5,111,0,0,1675,1677,5,112,0,0,1676,
        1650,1,0,0,0,1676,1651,1,0,0,0,1676,1653,1,0,0,0,1676,1655,1,0,0,
        0,1676,1659,1,0,0,0,1676,1661,1,0,0,0,1676,1663,1,0,0,0,1676,1664,
        1,0,0,0,1676,1665,1,0,0,0,1676,1666,1,0,0,0,1676,1667,1,0,0,0,1676,
        1668,1,0,0,0,1676,1669,1,0,0,0,1676,1671,1,0,0,0,1676,1672,1,0,0,
        0,1676,1674,1,0,0,0,1676,1675,1,0,0,0,1677,163,1,0,0,0,1678,1679,
        5,4,0,0,1679,1680,3,182,91,0,1680,1681,3,182,91,0,1681,1682,3,182,
        91,0,1682,1683,3,182,91,0,1683,1684,3,182,91,0,1684,1685,3,182,91,
        0,1685,1686,3,190,95,0,1686,1687,3,190,95,0,1687,165,1,0,0,0,1688,
        1700,3,168,84,0,1689,1690,5,9,0,0,1690,1700,5,182,0,0,1691,1692,
        5,41,0,0,1692,1700,3,194,97,0,1693,1694,5,14,0,0,1694,1700,5,178,
        0,0,1695,1696,5,17,0,0,1696,1697,5,18,0,0,1697,1700,3,194,97,0,1698,
        1700,5,19,0,0,1699,1688,1,0,0,0,1699,1689,1,0,0,0,1699,1691,1,0,
        0,0,1699,1693,1,0,0,0,1699,1695,1,0,0,0,1699,1698,1,0,0,0,1700,167,
        1,0,0,0,1701,1702,5,4,0,0,1702,1703,3,182,91,0,1703,1704,3,182,91,
        0,1704,1705,3,190,95,0,1705,1706,3,190,95,0,1706,1707,3,190,95,0,
        1707,169,1,0,0,0,1708,1726,3,172,86,0,1709,1710,5,9,0,0,1710,1726,
        5,182,0,0,1711,1712,5,117,0,0,1712,1726,5,178,0,0,1713,1714,5,40,
        0,0,1714,1726,3,194,97,0,1715,1716,5,41,0,0,1716,1726,3,194,97,0,
        1717,1718,5,14,0,0,1718,1726,5,178,0,0,1719,1720,5,17,0,0,1720,1721,
        5,18,0,0,1721,1726,3,194,97,0,1722,1726,5,19,0,0,1723,1724,5,113,
        0,0,1724,1726,5,178,0,0,1725,1708,1,0,0,0,1725,1709,1,0,0,0,1725,
        1711,1,0,0,0,1725,1713,1,0,0,0,1725,1715,1,0,0,0,1725,1717,1,0,0,
        0,1725,1719,1,0,0,0,1725,1722,1,0,0,0,1725,1723,1,0,0,0,1726,171,
        1,0,0,0,1727,1728,5,4,0,0,1728,1729,3,182,91,0,1729,1730,3,182,91,
        0,1730,1731,3,182,91,0,1731,1732,3,190,95,0,1732,1733,3,190,95,0,
        1733,173,1,0,0,0,1734,1746,3,176,88,0,1735,1736,5,9,0,0,1736,1746,
        5,182,0,0,1737,1738,5,41,0,0,1738,1746,3,194,97,0,1739,1740,5,14,
        0,0,1740,1746,5,178,0,0,1741,1742,5,17,0,0,1742,1743,5,18,0,0,1743,
        1746,3,194,97,0,1744,1746,5,19,0,0,1745,1734,1,0,0,0,1745,1735,1,
        0,0,0,1745,1737,1,0,0,0,1745,1739,1,0,0,0,1745,1741,1,0,0,0,1745,
        1744,1,0,0,0,1746,175,1,0,0,0,1747,1748,5,4,0,0,1748,1749,3,182,
        91,0,1749,1750,3,182,91,0,1750,1751,3,182,91,0,1751,177,1,0,0,0,
        1752,1819,3,180,90,0,1753,1755,5,120,0,0,1754,1756,5,188,0,0,1755,
        1754,1,0,0,0,1755,1756,1,0,0,0,1756,1757,1,0,0,0,1757,1819,3,194,
        97,0,1758,1760,5,121,0,0,1759,1761,5,188,0,0,1760,1759,1,0,0,0,1760,
        1761,1,0,0,0,1761,1762,1,0,0,0,1762,1819,3,194,97,0,1763,1765,5,
        122,0,0,1764,1766,5,188,0,0,1765,1764,1,0,0,0,1765,1766,1,0,0,0,
        1766,1767,1,0,0,0,1767,1819,5,178,0,0,1768,1770,5,123,0,0,1769,1771,
        5,188,0,0,1770,1769,1,0,0,0,1770,1771,1,0,0,0,1771,1772,1,0,0,0,
        1772,1819,5,178,0,0,1773,1775,5,124,0,0,1774,1776,5,188,0,0,1775,
        1774,1,0,0,0,1775,1776,1,0,0,0,1776,1777,1,0,0,0,1777,1819,5,178,
        0,0,1778,1780,5,125,0,0,1779,1781,5,188,0,0,1780,1779,1,0,0,0,1780,
        1781,1,0,0,0,1781,1782,1,0,0,0,1782,1819,5,182,0,0,1783,1785,5,126,
        0,0,1784,1786,5,188,0,0,1785,1784,1,0,0,0,1785,1786,1,0,0,0,1786,
        1787,1,0,0,0,1787,1819,3,194,97,0,1788,1790,5,127,0,0,1789,1791,
        5,188,0,0,1790,1789,1,0,0,0,1790,1791,1,0,0,0,1791,1792,1,0,0,0,
        1792,1819,3,194,97,0,1793,1795,5,128,0,0,1794,1796,5,188,0,0,1795,
        1794,1,0,0,0,1795,1796,1,0,0,0,1796,1797,1,0,0,0,1797,1819,3,194,
        97,0,1798,1800,5,129,0,0,1799,1801,5,188,0,0,1800,1799,1,0,0,0,1800,
        1801,1,0,0,0,1801,1802,1,0,0,0,1802,1819,3,194,97,0,1803,1805,5,
        130,0,0,1804,1806,5,188,0,0,1805,1804,1,0,0,0,1805,1806,1,0,0,0,
        1806,1807,1,0,0,0,1807,1819,5,178,0,0,1808,1810,5,131,0,0,1809,1811,
        5,188,0,0,1810,1809,1,0,0,0,1810,1811,1,0,0,0,1811,1812,1,0,0,0,
        1812,1819,5,178,0,0,1813,1815,5,132,0,0,1814,1816,5,188,0,0,1815,
        1814,1,0,0,0,1815,1816,1,0,0,0,1816,1817,1,0,0,0,1817,1819,5,178,
        0,0,1818,1752,1,0,0,0,1818,1753,1,0,0,0,1818,1758,1,0,0,0,1818,1763,
        1,0,0,0,1818,1768,1,0,0,0,1818,1773,1,0,0,0,1818,1778,1,0,0,0,1818,
        1783,1,0,0,0,1818,1788,1,0,0,0,1818,1793,1,0,0,0,1818,1798,1,0,0,
        0,1818,1803,1,0,0,0,1818,1808,1,0,0,0,1818,1813,1,0,0,0,1819,179,
        1,0,0,0,1820,1821,5,4,0,0,1821,1822,3,182,91,0,1822,1823,3,182,91,
        0,1823,181,1,0,0,0,1824,1825,5,185,0,0,1825,1826,3,184,92,0,1826,
        1827,5,186,0,0,1827,183,1,0,0,0,1828,1833,3,186,93,0,1829,1830,5,
        173,0,0,1830,1832,3,186,93,0,1831,1829,1,0,0,0,1832,1835,1,0,0,0,
        1833,1831,1,0,0,0,1833,1834,1,0,0,0,1834,185,1,0,0,0,1835,1833,1,
        0,0,0,1836,1841,3,188,94,0,1837,1838,5,174,0,0,1838,1840,3,188,94,
        0,1839,1837,1,0,0,0,1840,1843,1,0,0,0,1841,1839,1,0,0,0,1841,1842,
        1,0,0,0,1842,187,1,0,0,0,1843,1841,1,0,0,0,1844,1845,6,94,-1,0,1845,
        1846,5,185,0,0,1846,1847,3,184,92,0,1847,1848,5,186,0,0,1848,1974,
        1,0,0,0,1849,1974,5,136,0,0,1850,1851,5,138,0,0,1851,1852,7,1,0,
        0,1852,1853,7,2,0,0,1853,1974,7,1,0,0,1854,1856,5,139,0,0,1855,1857,
        5,200,0,0,1856,1855,1,0,0,0,1856,1857,1,0,0,0,1857,1858,1,0,0,0,
        1858,1859,5,201,0,0,1859,1860,5,202,0,0,1860,1974,3,192,96,0,1861,
        1862,5,140,0,0,1862,1974,3,188,94,29,1863,1864,5,141,0,0,1864,1974,
        3,188,94,28,1865,1866,5,142,0,0,1866,1974,3,188,94,27,1867,1874,
        5,143,0,0,1868,1875,5,183,0,0,1869,1872,5,182,0,0,1870,1871,5,187,
        0,0,1871,1873,5,182,0,0,1872,1870,1,0,0,0,1872,1873,1,0,0,0,1873,
        1875,1,0,0,0,1874,1868,1,0,0,0,1874,1869,1,0,0,0,1875,1974,1,0,0,
        0,1876,1974,5,144,0,0,1877,1878,5,145,0,0,1878,1974,5,178,0,0,1879,
        1974,5,146,0,0,1880,1887,5,147,0,0,1881,1888,5,183,0,0,1882,1885,
        5,182,0,0,1883,1884,5,187,0,0,1884,1886,5,182,0,0,1885,1883,1,0,
        0,0,1885,1886,1,0,0,0,1886,1888,1,0,0,0,1887,1881,1,0,0,0,1887,1882,
        1,0,0,0,1888,1974,1,0,0,0,1889,1890,5,175,0,0,1890,1974,3,188,94,
        21,1891,1892,5,148,0,0,1892,1893,5,185,0,0,1893,1895,3,192,96,0,
        1894,1896,5,176,0,0,1895,1894,1,0,0,0,1895,1896,1,0,0,0,1896,1897,
        1,0,0,0,1897,1899,3,192,96,0,1898,1900,5,176,0,0,1899,1898,1,0,0,
        0,1899,1900,1,0,0,0,1900,1901,1,0,0,0,1901,1902,3,192,96,0,1902,
        1903,5,186,0,0,1903,1904,5,149,0,0,1904,1905,3,192,96,0,1905,1974,
        1,0,0,0,1906,1907,5,148,0,0,1907,1908,5,185,0,0,1908,1910,5,171,
        0,0,1909,1911,5,188,0,0,1910,1909,1,0,0,0,1910,1911,1,0,0,0,1911,
        1912,1,0,0,0,1912,1914,3,182,91,0,1913,1915,5,176,0,0,1914,1913,
        1,0,0,0,1914,1915,1,0,0,0,1915,1921,1,0,0,0,1916,1918,5,172,0,0,
        1917,1919,5,188,0,0,1918,1917,1,0,0,0,1918,1919,1,0,0,0,1919,1920,
        1,0,0,0,1920,1922,3,182,91,0,1921,1916,1,0,0,0,1921,1922,1,0,0,0,
        1922,1923,1,0,0,0,1923,1924,5,186,0,0,1924,1925,5,149,0,0,1925,1926,
        3,192,96,0,1926,1974,1,0,0,0,1927,1974,5,150,0,0,1928,1974,5,151,
        0,0,1929,1936,5,152,0,0,1930,1937,5,184,0,0,1931,1934,5,178,0,0,
        1932,1933,5,187,0,0,1933,1935,5,178,0,0,1934,1932,1,0,0,0,1934,1935,
        1,0,0,0,1935,1937,1,0,0,0,1936,1930,1,0,0,0,1936,1931,1,0,0,0,1937,
        1974,1,0,0,0,1938,1945,5,153,0,0,1939,1946,5,183,0,0,1940,1943,5,
        182,0,0,1941,1942,5,187,0,0,1942,1944,5,182,0,0,1943,1941,1,0,0,
        0,1943,1944,1,0,0,0,1944,1946,1,0,0,0,1945,1939,1,0,0,0,1945,1940,
        1,0,0,0,1946,1974,1,0,0,0,1947,1959,5,155,0,0,1948,1960,5,183,0,
        0,1949,1952,5,182,0,0,1950,1951,5,187,0,0,1951,1953,5,182,0,0,1952,
        1950,1,0,0,0,1952,1953,1,0,0,0,1953,1960,1,0,0,0,1954,1957,5,181,
        0,0,1955,1956,5,187,0,0,1956,1958,5,181,0,0,1957,1955,1,0,0,0,1957,
        1958,1,0,0,0,1958,1960,1,0,0,0,1959,1948,1,0,0,0,1959,1949,1,0,0,
        0,1959,1954,1,0,0,0,1960,1974,1,0,0,0,1961,1974,5,156,0,0,1962,1974,
        5,157,0,0,1963,1974,5,158,0,0,1964,1974,5,159,0,0,1965,1974,5,160,
        0,0,1966,1974,5,161,0,0,1967,1974,5,162,0,0,1968,1974,5,163,0,0,
        1969,1974,5,164,0,0,1970,1974,5,165,0,0,1971,1974,5,133,0,0,1972,
        1974,5,134,0,0,1973,1844,1,0,0,0,1973,1849,1,0,0,0,1973,1850,1,0,
        0,0,1973,1854,1,0,0,0,1973,1861,1,0,0,0,1973,1863,1,0,0,0,1973,1865,
        1,0,0,0,1973,1867,1,0,0,0,1973,1876,1,0,0,0,1973,1877,1,0,0,0,1973,
        1879,1,0,0,0,1973,1880,1,0,0,0,1973,1889,1,0,0,0,1973,1891,1,0,0,
        0,1973,1906,1,0,0,0,1973,1927,1,0,0,0,1973,1928,1,0,0,0,1973,1929,
        1,0,0,0,1973,1938,1,0,0,0,1973,1947,1,0,0,0,1973,1961,1,0,0,0,1973,
        1962,1,0,0,0,1973,1963,1,0,0,0,1973,1964,1,0,0,0,1973,1965,1,0,0,
        0,1973,1966,1,0,0,0,1973,1967,1,0,0,0,1973,1968,1,0,0,0,1973,1969,
        1,0,0,0,1973,1970,1,0,0,0,1973,1971,1,0,0,0,1973,1972,1,0,0,0,1974,
        1983,1,0,0,0,1975,1976,10,32,0,0,1976,1977,5,137,0,0,1977,1982,3,
        192,96,0,1978,1979,10,14,0,0,1979,1980,5,154,0,0,1980,1982,3,192,
        96,0,1981,1975,1,0,0,0,1981,1978,1,0,0,0,1982,1985,1,0,0,0,1983,
        1981,1,0,0,0,1983,1984,1,0,0,0,1984,189,1,0,0,0,1985,1983,1,0,0,
        0,1986,1987,7,3,0,0,1987,191,1,0,0,0,1988,1989,7,4,0,0,1989,193,
        1,0,0,0,1990,1991,7,3,0,0,1991,195,1,0,0,0,1992,1993,7,4,0,0,1993,
        197,1,0,0,0,1994,2005,5,135,0,0,1995,2003,5,217,0,0,1996,1998,5,
        220,0,0,1997,1996,1,0,0,0,1998,2001,1,0,0,0,1999,1997,1,0,0,0,1999,
        2000,1,0,0,0,2000,2004,1,0,0,0,2001,1999,1,0,0,0,2002,2004,5,221,
        0,0,2003,1999,1,0,0,0,2003,2002,1,0,0,0,2004,2006,1,0,0,0,2005,1995,
        1,0,0,0,2005,2006,1,0,0,0,2006,2007,1,0,0,0,2007,2011,5,218,0,0,
        2008,2010,5,220,0,0,2009,2008,1,0,0,0,2010,2013,1,0,0,0,2011,2009,
        1,0,0,0,2011,2012,1,0,0,0,2012,2014,1,0,0,0,2013,2011,1,0,0,0,2014,
        2015,5,219,0,0,2015,199,1,0,0,0,2016,2017,5,166,0,0,2017,2018,3,
        202,101,0,2018,2019,3,182,91,0,2019,201,1,0,0,0,2020,2021,7,5,0,
        0,2021,2022,3,204,102,0,2022,2023,5,223,0,0,2023,2027,1,0,0,0,2024,
        2025,5,169,0,0,2025,2027,3,212,106,0,2026,2020,1,0,0,0,2026,2024,
        1,0,0,0,2027,203,1,0,0,0,2028,2031,5,233,0,0,2029,2030,5,224,0,0,
        2030,2032,3,206,103,0,2031,2029,1,0,0,0,2031,2032,1,0,0,0,2032,205,
        1,0,0,0,2033,2038,3,208,104,0,2034,2035,7,6,0,0,2035,2037,3,206,
        103,0,2036,2034,1,0,0,0,2037,2040,1,0,0,0,2038,2036,1,0,0,0,2038,
        2039,1,0,0,0,2039,207,1,0,0,0,2040,2038,1,0,0,0,2041,2048,5,233,
        0,0,2042,2048,3,210,105,0,2043,2048,5,231,0,0,2044,2048,5,232,0,
        0,2045,2048,5,256,0,0,2046,2048,5,258,0,0,2047,2041,1,0,0,0,2047,
        2042,1,0,0,0,2047,2043,1,0,0,0,2047,2044,1,0,0,0,2047,2045,1,0,0,
        0,2047,2046,1,0,0,0,2048,209,1,0,0,0,2049,2050,5,234,0,0,2050,2051,
        5,260,0,0,2051,2052,3,208,104,0,2052,2053,5,223,0,0,2053,2169,1,
        0,0,0,2054,2055,5,235,0,0,2055,2056,5,260,0,0,2056,2057,3,208,104,
        0,2057,2058,5,223,0,0,2058,2169,1,0,0,0,2059,2060,5,237,0,0,2060,
        2061,5,260,0,0,2061,2062,3,208,104,0,2062,2063,5,223,0,0,2063,2169,
        1,0,0,0,2064,2065,5,238,0,0,2065,2066,5,260,0,0,2066,2067,3,208,
        104,0,2067,2068,5,223,0,0,2068,2169,1,0,0,0,2069,2070,5,239,0,0,
        2070,2071,5,260,0,0,2071,2072,3,208,104,0,2072,2073,5,223,0,0,2073,
        2169,1,0,0,0,2074,2075,5,240,0,0,2075,2076,5,260,0,0,2076,2077,3,
        208,104,0,2077,2078,5,223,0,0,2078,2169,1,0,0,0,2079,2080,5,241,
        0,0,2080,2081,5,260,0,0,2081,2082,3,208,104,0,2082,2083,5,223,0,
        0,2083,2169,1,0,0,0,2084,2085,5,242,0,0,2085,2086,5,260,0,0,2086,
        2087,3,208,104,0,2087,2088,5,223,0,0,2088,2169,1,0,0,0,2089,2090,
        5,243,0,0,2090,2091,5,260,0,0,2091,2092,3,208,104,0,2092,2093,5,
        223,0,0,2093,2169,1,0,0,0,2094,2095,5,244,0,0,2095,2096,5,260,0,
        0,2096,2097,3,208,104,0,2097,2098,5,223,0,0,2098,2169,1,0,0,0,2099,
        2100,5,245,0,0,2100,2101,5,260,0,0,2101,2102,3,208,104,0,2102,2103,
        5,223,0,0,2103,2169,1,0,0,0,2104,2105,5,246,0,0,2105,2106,5,260,
        0,0,2106,2111,3,208,104,0,2107,2108,5,230,0,0,2108,2110,3,208,104,
        0,2109,2107,1,0,0,0,2110,2113,1,0,0,0,2111,2109,1,0,0,0,2111,2112,
        1,0,0,0,2112,2114,1,0,0,0,2113,2111,1,0,0,0,2114,2115,5,223,0,0,
        2115,2169,1,0,0,0,2116,2117,5,247,0,0,2117,2118,5,260,0,0,2118,2119,
        3,208,104,0,2119,2120,5,223,0,0,2120,2169,1,0,0,0,2121,2122,5,248,
        0,0,2122,2123,5,260,0,0,2123,2128,3,208,104,0,2124,2125,5,230,0,
        0,2125,2127,3,208,104,0,2126,2124,1,0,0,0,2127,2130,1,0,0,0,2128,
        2126,1,0,0,0,2128,2129,1,0,0,0,2129,2131,1,0,0,0,2130,2128,1,0,0,
        0,2131,2132,5,223,0,0,2132,2169,1,0,0,0,2133,2134,5,249,0,0,2134,
        2135,5,260,0,0,2135,2136,3,208,104,0,2136,2137,5,230,0,0,2137,2138,
        3,208,104,0,2138,2139,5,223,0,0,2139,2169,1,0,0,0,2140,2141,5,250,
        0,0,2141,2142,5,260,0,0,2142,2143,3,208,104,0,2143,2144,5,223,0,
        0,2144,2169,1,0,0,0,2145,2146,5,251,0,0,2146,2147,5,260,0,0,2147,
        2169,5,223,0,0,2148,2149,5,252,0,0,2149,2150,5,260,0,0,2150,2151,
        3,208,104,0,2151,2152,5,223,0,0,2152,2169,1,0,0,0,2153,2154,5,253,
        0,0,2154,2155,5,260,0,0,2155,2156,3,208,104,0,2156,2157,5,223,0,
        0,2157,2169,1,0,0,0,2158,2159,5,254,0,0,2159,2160,5,260,0,0,2160,
        2161,3,208,104,0,2161,2162,5,223,0,0,2162,2169,1,0,0,0,2163,2164,
        5,255,0,0,2164,2165,5,260,0,0,2165,2166,3,208,104,0,2166,2167,5,
        223,0,0,2167,2169,1,0,0,0,2168,2049,1,0,0,0,2168,2054,1,0,0,0,2168,
        2059,1,0,0,0,2168,2064,1,0,0,0,2168,2069,1,0,0,0,2168,2074,1,0,0,
        0,2168,2079,1,0,0,0,2168,2084,1,0,0,0,2168,2089,1,0,0,0,2168,2094,
        1,0,0,0,2168,2099,1,0,0,0,2168,2104,1,0,0,0,2168,2116,1,0,0,0,2168,
        2121,1,0,0,0,2168,2133,1,0,0,0,2168,2140,1,0,0,0,2168,2145,1,0,0,
        0,2168,2148,1,0,0,0,2168,2153,1,0,0,0,2168,2158,1,0,0,0,2168,2163,
        1,0,0,0,2169,211,1,0,0,0,2170,2171,7,7,0,0,2171,2172,5,262,0,0,2172,
        2173,5,271,0,0,2173,2174,5,263,0,0,2174,213,1,0,0,0,2175,2176,5,
        170,0,0,2176,2177,5,257,0,0,2177,2178,5,224,0,0,2178,2179,3,216,
        108,0,2179,2180,5,223,0,0,2180,215,1,0,0,0,2181,2186,3,208,104,0,
        2182,2183,7,6,0,0,2183,2185,3,216,108,0,2184,2182,1,0,0,0,2185,2188,
        1,0,0,0,2186,2184,1,0,0,0,2186,2187,1,0,0,0,2187,217,1,0,0,0,2188,
        2186,1,0,0,0,190,258,260,269,275,281,290,298,306,314,322,326,329,
        335,341,347,356,365,374,383,392,401,410,419,428,437,446,455,464,
        473,482,491,500,509,518,535,554,567,591,594,601,604,609,618,623,
        628,635,639,644,649,654,659,664,669,672,677,683,686,716,728,756,
        773,778,791,798,823,852,866,871,875,880,883,887,892,897,901,907,
        911,915,918,920,924,948,956,973,981,987,998,1001,1013,1020,1048,
        1082,1092,1097,1102,1106,1118,1142,1162,1168,1174,1186,1192,1198,
        1206,1216,1222,1228,1239,1242,1245,1249,1261,1268,1275,1282,1311,
        1361,1380,1415,1428,1456,1480,1517,1525,1540,1545,1550,1556,1561,
        1567,1573,1579,1591,1595,1622,1639,1676,1699,1725,1745,1755,1760,
        1765,1770,1775,1780,1785,1790,1795,1800,1805,1810,1815,1818,1833,
        1841,1856,1872,1874,1885,1887,1895,1899,1910,1914,1918,1921,1934,
        1936,1943,1945,1952,1957,1959,1973,1981,1983,1999,2003,2005,2011,
        2026,2031,2038,2047,2111,2128,2168,2186
    ]

class XplorMRParser ( Parser ):

    grammarFileName = "XplorMRParser.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ "<INVALID>", "'SET'", "<INVALID>", "'NOE'", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "'BHIG'", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "'CUTOFF'", "'CUTON'", "'FROM'", "'TO'", 
                     "'PEAK'", "'SPECTRUM'", "'VOLUME'", "'PPM1'", "'PPM2'", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "'TYPE'", "<INVALID>", "<INVALID>", "<INVALID>", "'CV'", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "'XADC'", "<INVALID>", 
                     "'SIZE'", "'ZERO'", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "'RAMA'", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "'SORT'", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "'DCSA'", "<INVALID>", "'PCSA'", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "'TAUC'", "<INVALID>", 
                     "'XPCS'", "'TOLL'", "'SAVE'", "'FMED'", "'ERRON'", 
                     "'ERROFF'", "'FON'", "'FOFF'", "'SON'", "'SOFF'", "'FRUN'", 
                     "<INVALID>", "<INVALID>", "'XCCR'", "'WEIP'", "'HBDA'", 
                     "'HBDB'", "'KDIR'", "'KLIN'", "'NSEG'", "'NMIN'", "'NMAX'", 
                     "'SEGM'", "'OHCUT'", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "'UPDFRQ'", "'PRNFRQ'", "'FREEMODE'", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "'ALL'", "<INVALID>", "'ATOM'", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "'ID'", "<INVALID>", "'NAME'", 
                     "<INVALID>", "'CUT'", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "'STORE1'", 
                     "'STORE2'", "'STORE3'", "'STORE4'", "'STORE5'", "'STORE6'", 
                     "'STORE7'", "'STORE8'", "'STORE9'", "'TAG'", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "'SHOW'", "<INVALID>", "'TAIL'", 
                     "'HEAD'", "'OR'", "'AND'", "'NOT'", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "':'", "<INVALID>", "'<'", "'>'", "'<='", 
                     "'>='", "'#'", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "'+'", "'-'", "<INVALID>", "'/'", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "'ACOS'", "'ASIN'", "'COS'", "'DECODE'", "'ENCODE'", 
                     "'EXP'", "'GAUSS'", "'HEAVY'", "'INT'", "'LOG10'", 
                     "'LOG'", "<INVALID>", "'MAXW'", "<INVALID>", "'MOD'", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "'SIN'", "'SQRT'", 
                     "'TAN'", "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "'RMS'", "'SUM'" ]

    symbolicNames = [ "<INVALID>", "Set", "End", "Noe", "Assign", "Asymptote", 
                      "Averaging", "Bhig", "Ceiling", "Classification", 
                      "CountViol", "Distribute", "Monomers", "Ncount", "Nrestraints", 
                      "Potential", "Predict", "Print", "Threshold", "Reset", 
                      "Rswitch", "Scale", "SoExponent", "SqConstant", "SqExponent", 
                      "SqOffset", "Temperature", "Cutoff", "Cuton", "From", 
                      "To", "Peak", "Spectrum", "Volume", "Ppm1", "Ppm2", 
                      "Restraints", "Dihedral", "Nassign", "Sanisotropy", 
                      "Coefficients", "ForceConstant", "Xdipolar", "Dipolar", 
                      "Type", "Sign", "Average", "VectorAngle", "Cv", "Partition", 
                      "Tensor", "Anisotropy", "Planar", "Group", "Initialize", 
                      "Selection", "Weight", "Harmonic", "Exponent", "Normal", 
                      "Xadc", "Expectation", "Size", "Zero", "Coupling", 
                      "DegEnergy", "Carbon", "PhiStep", "PsiStep", "Rcoil", 
                      "Proton", "Observed", "Amides", "Nitrogens", "Oxygens", 
                      "RingAtoms", "AlphasAndAmides", "Error", "Ramachandran", 
                      "Gaussian", "Phase", "Quartic", "Shape", "Sort", "Dimensions", 
                      "Collapse", "Danisotropy", "Orient", "Height", "MaxGaussians", 
                      "NewGaussian", "Dcsa", "Sigma", "Pcsa", "OneBond", 
                      "AngleDb", "DerivFlag", "Angle_or_Dihedral", "Paramagnetic", 
                      "Kconst", "Omega", "Tauc", "Debug", "Xpcs", "Tolerance", 
                      "Save", "Fmed", "ErrOn", "ErrOff", "Fon", "Foff", 
                      "Son", "Soff", "Frun", "Xrdcoupling", "Xangle", "Xccr", 
                      "Weip", "Hbda", "Hbdb", "Kdir", "Klin", "Nseg", "Nmin", 
                      "Nmax", "Segm", "Ohcut", "Coh1cut", "Coh2cut", "Ohncut", 
                      "Updfrq", "Prnfrq", "Freemode", "Donor", "Acceptor", 
                      "Flags", "All", "Around", "Atom", "Attribute", "BondedTo", 
                      "ByGroup", "ByRes", "Chemical", "Hydrogen", "Id", 
                      "Known", "Name", "Point", "Cut", "Previous", "Pseudo", 
                      "Residue", "Resname", "Saround", "SegIdentifier", 
                      "Store_1", "Store_2", "Store_3", "Store_4", "Store_5", 
                      "Store_6", "Store_7", "Store_8", "Store_9", "Tag", 
                      "Vector", "Do_Lp", "Identify_Lp", "Show", "Evaluate_Lp", 
                      "Tail", "Head", "Or_op", "And_op", "Not_op", "Comma", 
                      "Complex", "Integer", "Logical", "Real", "Double_quote_string", 
                      "Simple_name", "Simple_names", "Integers", "L_paren", 
                      "R_paren", "Colon", "Equ_op", "Lt_op", "Gt_op", "Leq_op", 
                      "Geq_op", "Neq_op", "Symbol_name", "SPACE", "COMMENT", 
                      "SECTION_COMMENT", "LINE_COMMENT", "SET_VARIABLE", 
                      "Abs", "Attr_properties", "Comparison_ops", "SPACE_ATTR", 
                      "Averaging_methods", "Simple_name_A", "SPACE_AVER", 
                      "Equ_op_P", "Potential_types", "Simple_name_P", "SPACE_POTE", 
                      "Rdc_dist_fix_types", "Rdc_or_Diff_anis_types", "Csa_types", 
                      "SPACE_TYPE", "Gauss_or_Quart", "SPACE_SHAP", "Exclude", 
                      "Include", "End_F", "Class_name", "Any_class", "SPACE_FLAG", 
                      "R_paren_VE", "Equ_op_VE", "Add_op_VE", "Sub_op_VE", 
                      "Mul_op_VE", "Div_op_VE", "Exp_op_VE", "Comma_VE", 
                      "Integer_VE", "Real_VE", "Atom_properties_VE", "Abs_VE", 
                      "Acos_VE", "Asin_VE", "Cos_VE", "Decode_VE", "Encode_VE", 
                      "Exp_VE", "Gauss_VE", "Heavy_VE", "Int_VE", "Log10_VE", 
                      "Log_VE", "Max_VE", "Maxw_VE", "Min_VE", "Mod_VE", 
                      "Norm_VE", "Random_VE", "Sign_VE", "Sin_VE", "Sqrt_VE", 
                      "Tan_VE", "Simple_name_VE", "Symbol_name_VE", "Double_quote_string_VE", 
                      "SPACE_VE", "L_paren_VF", "SPACE_VF", "L_paren_VS", 
                      "R_paren_VS", "Average_VS", "Element_VS", "Max_VS", 
                      "Min_VS", "Norm_VS", "Rms_VS", "Sum_VS", "Atom_properties_VS", 
                      "SPACE_VS" ]

    RULE_xplor_nih_mr = 0
    RULE_distance_restraint = 1
    RULE_dihedral_angle_restraint = 2
    RULE_rdc_restraint = 3
    RULE_planar_restraint = 4
    RULE_harmonic_restraint = 5
    RULE_antidistance_restraint = 6
    RULE_coupling_restraint = 7
    RULE_carbon_shift_restraint = 8
    RULE_proton_shift_restraint = 9
    RULE_dihedral_angle_db_restraint = 10
    RULE_radius_of_gyration_restraint = 11
    RULE_diffusion_anisotropy_restraint = 12
    RULE_orientation_db_restraint = 13
    RULE_csa_restraint = 14
    RULE_pcsa_restraint = 15
    RULE_one_bond_coupling_restraint = 16
    RULE_angle_db_restraint = 17
    RULE_pre_restraint = 18
    RULE_pcs_restraint = 19
    RULE_prdc_restraint = 20
    RULE_porientation_restraint = 21
    RULE_pccr_restraint = 22
    RULE_hbond_restraint = 23
    RULE_hbond_db_restraint = 24
    RULE_noe_statement = 25
    RULE_noe_assign = 26
    RULE_predict_statement = 27
    RULE_noe_annotation = 28
    RULE_dihedral_statement = 29
    RULE_dihedral_assign = 30
    RULE_sani_statement = 31
    RULE_sani_assign = 32
    RULE_xdip_statement = 33
    RULE_xdip_assign = 34
    RULE_vean_statement = 35
    RULE_vean_assign = 36
    RULE_tenso_statement = 37
    RULE_tenso_assign = 38
    RULE_anis_statement = 39
    RULE_anis_assign = 40
    RULE_planar_statement = 41
    RULE_group_statement = 42
    RULE_harmonic_statement = 43
    RULE_harmonic_assign = 44
    RULE_antidistance_statement = 45
    RULE_xadc_assign = 46
    RULE_coupling_statement = 47
    RULE_coup_assign = 48
    RULE_carbon_shift_statement = 49
    RULE_carbon_shift_assign = 50
    RULE_carbon_shift_rcoil = 51
    RULE_proton_shift_statement = 52
    RULE_observed = 53
    RULE_proton_shift_rcoil = 54
    RULE_proton_shift_anisotropy = 55
    RULE_proton_shift_amides = 56
    RULE_proton_shift_carbons = 57
    RULE_proton_shift_nitrogens = 58
    RULE_proton_shift_oxygens = 59
    RULE_proton_shift_ring_atoms = 60
    RULE_proton_shift_alphas_and_amides = 61
    RULE_ramachandran_statement = 62
    RULE_rama_assign = 63
    RULE_collapse_statement = 64
    RULE_coll_assign = 65
    RULE_diffusion_statement = 66
    RULE_dani_assign = 67
    RULE_orientation_statement = 68
    RULE_orie_assign = 69
    RULE_csa_statement = 70
    RULE_csa_assign = 71
    RULE_pcsa_statement = 72
    RULE_one_bond_coupling_statement = 73
    RULE_one_bond_assign = 74
    RULE_angle_db_statement = 75
    RULE_angle_db_assign = 76
    RULE_pre_statement = 77
    RULE_pre_assign = 78
    RULE_pcs_statement = 79
    RULE_pcs_assign = 80
    RULE_prdc_statement = 81
    RULE_prdc_assign = 82
    RULE_porientation_statement = 83
    RULE_porientation_assign = 84
    RULE_pccr_statement = 85
    RULE_pccr_assign = 86
    RULE_hbond_statement = 87
    RULE_hbond_assign = 88
    RULE_hbond_db_statement = 89
    RULE_hbond_db_assign = 90
    RULE_selection = 91
    RULE_selection_expression = 92
    RULE_term = 93
    RULE_factor = 94
    RULE_number = 95
    RULE_number_f = 96
    RULE_number_s = 97
    RULE_number_a = 98
    RULE_flag_statement = 99
    RULE_vector_statement = 100
    RULE_vector_mode = 101
    RULE_vector_expression = 102
    RULE_vector_operation = 103
    RULE_vflc = 104
    RULE_vector_func_call = 105
    RULE_vector_show_property = 106
    RULE_evaluate_statement = 107
    RULE_evaluate_operation = 108

    ruleNames =  [ "xplor_nih_mr", "distance_restraint", "dihedral_angle_restraint", 
                   "rdc_restraint", "planar_restraint", "harmonic_restraint", 
                   "antidistance_restraint", "coupling_restraint", "carbon_shift_restraint", 
                   "proton_shift_restraint", "dihedral_angle_db_restraint", 
                   "radius_of_gyration_restraint", "diffusion_anisotropy_restraint", 
                   "orientation_db_restraint", "csa_restraint", "pcsa_restraint", 
                   "one_bond_coupling_restraint", "angle_db_restraint", 
                   "pre_restraint", "pcs_restraint", "prdc_restraint", "porientation_restraint", 
                   "pccr_restraint", "hbond_restraint", "hbond_db_restraint", 
                   "noe_statement", "noe_assign", "predict_statement", "noe_annotation", 
                   "dihedral_statement", "dihedral_assign", "sani_statement", 
                   "sani_assign", "xdip_statement", "xdip_assign", "vean_statement", 
                   "vean_assign", "tenso_statement", "tenso_assign", "anis_statement", 
                   "anis_assign", "planar_statement", "group_statement", 
                   "harmonic_statement", "harmonic_assign", "antidistance_statement", 
                   "xadc_assign", "coupling_statement", "coup_assign", "carbon_shift_statement", 
                   "carbon_shift_assign", "carbon_shift_rcoil", "proton_shift_statement", 
                   "observed", "proton_shift_rcoil", "proton_shift_anisotropy", 
                   "proton_shift_amides", "proton_shift_carbons", "proton_shift_nitrogens", 
                   "proton_shift_oxygens", "proton_shift_ring_atoms", "proton_shift_alphas_and_amides", 
                   "ramachandran_statement", "rama_assign", "collapse_statement", 
                   "coll_assign", "diffusion_statement", "dani_assign", 
                   "orientation_statement", "orie_assign", "csa_statement", 
                   "csa_assign", "pcsa_statement", "one_bond_coupling_statement", 
                   "one_bond_assign", "angle_db_statement", "angle_db_assign", 
                   "pre_statement", "pre_assign", "pcs_statement", "pcs_assign", 
                   "prdc_statement", "prdc_assign", "porientation_statement", 
                   "porientation_assign", "pccr_statement", "pccr_assign", 
                   "hbond_statement", "hbond_assign", "hbond_db_statement", 
                   "hbond_db_assign", "selection", "selection_expression", 
                   "term", "factor", "number", "number_f", "number_s", "number_a", 
                   "flag_statement", "vector_statement", "vector_mode", 
                   "vector_expression", "vector_operation", "vflc", "vector_func_call", 
                   "vector_show_property", "evaluate_statement", "evaluate_operation" ]

    EOF = Token.EOF
    Set=1
    End=2
    Noe=3
    Assign=4
    Asymptote=5
    Averaging=6
    Bhig=7
    Ceiling=8
    Classification=9
    CountViol=10
    Distribute=11
    Monomers=12
    Ncount=13
    Nrestraints=14
    Potential=15
    Predict=16
    Print=17
    Threshold=18
    Reset=19
    Rswitch=20
    Scale=21
    SoExponent=22
    SqConstant=23
    SqExponent=24
    SqOffset=25
    Temperature=26
    Cutoff=27
    Cuton=28
    From=29
    To=30
    Peak=31
    Spectrum=32
    Volume=33
    Ppm1=34
    Ppm2=35
    Restraints=36
    Dihedral=37
    Nassign=38
    Sanisotropy=39
    Coefficients=40
    ForceConstant=41
    Xdipolar=42
    Dipolar=43
    Type=44
    Sign=45
    Average=46
    VectorAngle=47
    Cv=48
    Partition=49
    Tensor=50
    Anisotropy=51
    Planar=52
    Group=53
    Initialize=54
    Selection=55
    Weight=56
    Harmonic=57
    Exponent=58
    Normal=59
    Xadc=60
    Expectation=61
    Size=62
    Zero=63
    Coupling=64
    DegEnergy=65
    Carbon=66
    PhiStep=67
    PsiStep=68
    Rcoil=69
    Proton=70
    Observed=71
    Amides=72
    Nitrogens=73
    Oxygens=74
    RingAtoms=75
    AlphasAndAmides=76
    Error=77
    Ramachandran=78
    Gaussian=79
    Phase=80
    Quartic=81
    Shape=82
    Sort=83
    Dimensions=84
    Collapse=85
    Danisotropy=86
    Orient=87
    Height=88
    MaxGaussians=89
    NewGaussian=90
    Dcsa=91
    Sigma=92
    Pcsa=93
    OneBond=94
    AngleDb=95
    DerivFlag=96
    Angle_or_Dihedral=97
    Paramagnetic=98
    Kconst=99
    Omega=100
    Tauc=101
    Debug=102
    Xpcs=103
    Tolerance=104
    Save=105
    Fmed=106
    ErrOn=107
    ErrOff=108
    Fon=109
    Foff=110
    Son=111
    Soff=112
    Frun=113
    Xrdcoupling=114
    Xangle=115
    Xccr=116
    Weip=117
    Hbda=118
    Hbdb=119
    Kdir=120
    Klin=121
    Nseg=122
    Nmin=123
    Nmax=124
    Segm=125
    Ohcut=126
    Coh1cut=127
    Coh2cut=128
    Ohncut=129
    Updfrq=130
    Prnfrq=131
    Freemode=132
    Donor=133
    Acceptor=134
    Flags=135
    All=136
    Around=137
    Atom=138
    Attribute=139
    BondedTo=140
    ByGroup=141
    ByRes=142
    Chemical=143
    Hydrogen=144
    Id=145
    Known=146
    Name=147
    Point=148
    Cut=149
    Previous=150
    Pseudo=151
    Residue=152
    Resname=153
    Saround=154
    SegIdentifier=155
    Store_1=156
    Store_2=157
    Store_3=158
    Store_4=159
    Store_5=160
    Store_6=161
    Store_7=162
    Store_8=163
    Store_9=164
    Tag=165
    Vector=166
    Do_Lp=167
    Identify_Lp=168
    Show=169
    Evaluate_Lp=170
    Tail=171
    Head=172
    Or_op=173
    And_op=174
    Not_op=175
    Comma=176
    Complex=177
    Integer=178
    Logical=179
    Real=180
    Double_quote_string=181
    Simple_name=182
    Simple_names=183
    Integers=184
    L_paren=185
    R_paren=186
    Colon=187
    Equ_op=188
    Lt_op=189
    Gt_op=190
    Leq_op=191
    Geq_op=192
    Neq_op=193
    Symbol_name=194
    SPACE=195
    COMMENT=196
    SECTION_COMMENT=197
    LINE_COMMENT=198
    SET_VARIABLE=199
    Abs=200
    Attr_properties=201
    Comparison_ops=202
    SPACE_ATTR=203
    Averaging_methods=204
    Simple_name_A=205
    SPACE_AVER=206
    Equ_op_P=207
    Potential_types=208
    Simple_name_P=209
    SPACE_POTE=210
    Rdc_dist_fix_types=211
    Rdc_or_Diff_anis_types=212
    Csa_types=213
    SPACE_TYPE=214
    Gauss_or_Quart=215
    SPACE_SHAP=216
    Exclude=217
    Include=218
    End_F=219
    Class_name=220
    Any_class=221
    SPACE_FLAG=222
    R_paren_VE=223
    Equ_op_VE=224
    Add_op_VE=225
    Sub_op_VE=226
    Mul_op_VE=227
    Div_op_VE=228
    Exp_op_VE=229
    Comma_VE=230
    Integer_VE=231
    Real_VE=232
    Atom_properties_VE=233
    Abs_VE=234
    Acos_VE=235
    Asin_VE=236
    Cos_VE=237
    Decode_VE=238
    Encode_VE=239
    Exp_VE=240
    Gauss_VE=241
    Heavy_VE=242
    Int_VE=243
    Log10_VE=244
    Log_VE=245
    Max_VE=246
    Maxw_VE=247
    Min_VE=248
    Mod_VE=249
    Norm_VE=250
    Random_VE=251
    Sign_VE=252
    Sin_VE=253
    Sqrt_VE=254
    Tan_VE=255
    Simple_name_VE=256
    Symbol_name_VE=257
    Double_quote_string_VE=258
    SPACE_VE=259
    L_paren_VF=260
    SPACE_VF=261
    L_paren_VS=262
    R_paren_VS=263
    Average_VS=264
    Element_VS=265
    Max_VS=266
    Min_VS=267
    Norm_VS=268
    Rms_VS=269
    Sum_VS=270
    Atom_properties_VS=271
    SPACE_VS=272

    def __init__(self, input:TokenStream, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.10.1")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None




    class Xplor_nih_mrContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EOF(self):
            return self.getToken(XplorMRParser.EOF, 0)

        def distance_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Distance_restraintContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Distance_restraintContext,i)


        def dihedral_angle_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Dihedral_angle_restraintContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Dihedral_angle_restraintContext,i)


        def rdc_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Rdc_restraintContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Rdc_restraintContext,i)


        def planar_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Planar_restraintContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Planar_restraintContext,i)


        def harmonic_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Harmonic_restraintContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Harmonic_restraintContext,i)


        def antidistance_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Antidistance_restraintContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Antidistance_restraintContext,i)


        def coupling_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Coupling_restraintContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Coupling_restraintContext,i)


        def carbon_shift_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Carbon_shift_restraintContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Carbon_shift_restraintContext,i)


        def proton_shift_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Proton_shift_restraintContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Proton_shift_restraintContext,i)


        def dihedral_angle_db_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Dihedral_angle_db_restraintContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Dihedral_angle_db_restraintContext,i)


        def radius_of_gyration_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Radius_of_gyration_restraintContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Radius_of_gyration_restraintContext,i)


        def diffusion_anisotropy_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Diffusion_anisotropy_restraintContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Diffusion_anisotropy_restraintContext,i)


        def orientation_db_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Orientation_db_restraintContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Orientation_db_restraintContext,i)


        def csa_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Csa_restraintContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Csa_restraintContext,i)


        def pcsa_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Pcsa_restraintContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Pcsa_restraintContext,i)


        def one_bond_coupling_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.One_bond_coupling_restraintContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.One_bond_coupling_restraintContext,i)


        def angle_db_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Angle_db_restraintContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Angle_db_restraintContext,i)


        def pre_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Pre_restraintContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Pre_restraintContext,i)


        def pcs_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Pcs_restraintContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Pcs_restraintContext,i)


        def prdc_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Prdc_restraintContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Prdc_restraintContext,i)


        def porientation_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Porientation_restraintContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Porientation_restraintContext,i)


        def pccr_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Pccr_restraintContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Pccr_restraintContext,i)


        def hbond_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Hbond_restraintContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Hbond_restraintContext,i)


        def hbond_db_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Hbond_db_restraintContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Hbond_db_restraintContext,i)


        def flag_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Flag_statementContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Flag_statementContext,i)


        def vector_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Vector_statementContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Vector_statementContext,i)


        def evaluate_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Evaluate_statementContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Evaluate_statementContext,i)


        def noe_assign(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Noe_assignContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Noe_assignContext,i)


        def dihedral_assign(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Dihedral_assignContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Dihedral_assignContext,i)


        def sani_assign(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Sani_assignContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Sani_assignContext,i)


        def planar_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Planar_statementContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Planar_statementContext,i)


        def harmonic_assign(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Harmonic_assignContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Harmonic_assignContext,i)


        def hbond_assign(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Hbond_assignContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Hbond_assignContext,i)


        def hbond_db_assign(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Hbond_db_assignContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Hbond_db_assignContext,i)


        def coup_assign(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Coup_assignContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Coup_assignContext,i)


        def xadc_assign(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Xadc_assignContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Xadc_assignContext,i)


        def coll_assign(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Coll_assignContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Coll_assignContext,i)


        def csa_assign(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Csa_assignContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Csa_assignContext,i)


        def pre_assign(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Pre_assignContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Pre_assignContext,i)


        def pcs_assign(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Pcs_assignContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Pcs_assignContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_xplor_nih_mr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterXplor_nih_mr" ):
                listener.enterXplor_nih_mr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitXplor_nih_mr" ):
                listener.exitXplor_nih_mr(self)




    def xplor_nih_mr(self):

        localctx = XplorMRParser.Xplor_nih_mrContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_xplor_nih_mr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 260
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << XplorMRParser.Noe) | (1 << XplorMRParser.Assign) | (1 << XplorMRParser.Restraints) | (1 << XplorMRParser.Dihedral) | (1 << XplorMRParser.Sanisotropy) | (1 << XplorMRParser.Xdipolar) | (1 << XplorMRParser.Dipolar) | (1 << XplorMRParser.VectorAngle) | (1 << XplorMRParser.Tensor) | (1 << XplorMRParser.Anisotropy) | (1 << XplorMRParser.Planar) | (1 << XplorMRParser.Group) | (1 << XplorMRParser.Initialize) | (1 << XplorMRParser.Harmonic) | (1 << XplorMRParser.Xadc))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (XplorMRParser.Coupling - 64)) | (1 << (XplorMRParser.Carbon - 64)) | (1 << (XplorMRParser.Proton - 64)) | (1 << (XplorMRParser.Ramachandran - 64)) | (1 << (XplorMRParser.Collapse - 64)) | (1 << (XplorMRParser.Danisotropy - 64)) | (1 << (XplorMRParser.Orient - 64)) | (1 << (XplorMRParser.Dcsa - 64)) | (1 << (XplorMRParser.Pcsa - 64)) | (1 << (XplorMRParser.OneBond - 64)) | (1 << (XplorMRParser.AngleDb - 64)) | (1 << (XplorMRParser.Paramagnetic - 64)) | (1 << (XplorMRParser.Xpcs - 64)) | (1 << (XplorMRParser.Xrdcoupling - 64)) | (1 << (XplorMRParser.Xangle - 64)) | (1 << (XplorMRParser.Xccr - 64)) | (1 << (XplorMRParser.Hbda - 64)) | (1 << (XplorMRParser.Hbdb - 64)))) != 0) or ((((_la - 135)) & ~0x3f) == 0 and ((1 << (_la - 135)) & ((1 << (XplorMRParser.Flags - 135)) | (1 << (XplorMRParser.Vector - 135)) | (1 << (XplorMRParser.Evaluate_Lp - 135)))) != 0):
                self.state = 258
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,0,self._ctx)
                if la_ == 1:
                    self.state = 218
                    self.distance_restraint()
                    pass

                elif la_ == 2:
                    self.state = 219
                    self.dihedral_angle_restraint()
                    pass

                elif la_ == 3:
                    self.state = 220
                    self.rdc_restraint()
                    pass

                elif la_ == 4:
                    self.state = 221
                    self.planar_restraint()
                    pass

                elif la_ == 5:
                    self.state = 222
                    self.harmonic_restraint()
                    pass

                elif la_ == 6:
                    self.state = 223
                    self.antidistance_restraint()
                    pass

                elif la_ == 7:
                    self.state = 224
                    self.coupling_restraint()
                    pass

                elif la_ == 8:
                    self.state = 225
                    self.carbon_shift_restraint()
                    pass

                elif la_ == 9:
                    self.state = 226
                    self.proton_shift_restraint()
                    pass

                elif la_ == 10:
                    self.state = 227
                    self.dihedral_angle_db_restraint()
                    pass

                elif la_ == 11:
                    self.state = 228
                    self.radius_of_gyration_restraint()
                    pass

                elif la_ == 12:
                    self.state = 229
                    self.diffusion_anisotropy_restraint()
                    pass

                elif la_ == 13:
                    self.state = 230
                    self.orientation_db_restraint()
                    pass

                elif la_ == 14:
                    self.state = 231
                    self.csa_restraint()
                    pass

                elif la_ == 15:
                    self.state = 232
                    self.pcsa_restraint()
                    pass

                elif la_ == 16:
                    self.state = 233
                    self.one_bond_coupling_restraint()
                    pass

                elif la_ == 17:
                    self.state = 234
                    self.angle_db_restraint()
                    pass

                elif la_ == 18:
                    self.state = 235
                    self.pre_restraint()
                    pass

                elif la_ == 19:
                    self.state = 236
                    self.pcs_restraint()
                    pass

                elif la_ == 20:
                    self.state = 237
                    self.prdc_restraint()
                    pass

                elif la_ == 21:
                    self.state = 238
                    self.porientation_restraint()
                    pass

                elif la_ == 22:
                    self.state = 239
                    self.pccr_restraint()
                    pass

                elif la_ == 23:
                    self.state = 240
                    self.hbond_restraint()
                    pass

                elif la_ == 24:
                    self.state = 241
                    self.hbond_db_restraint()
                    pass

                elif la_ == 25:
                    self.state = 242
                    self.flag_statement()
                    pass

                elif la_ == 26:
                    self.state = 243
                    self.vector_statement()
                    pass

                elif la_ == 27:
                    self.state = 244
                    self.evaluate_statement()
                    pass

                elif la_ == 28:
                    self.state = 245
                    self.noe_assign()
                    pass

                elif la_ == 29:
                    self.state = 246
                    self.dihedral_assign()
                    pass

                elif la_ == 30:
                    self.state = 247
                    self.sani_assign()
                    pass

                elif la_ == 31:
                    self.state = 248
                    self.planar_statement()
                    pass

                elif la_ == 32:
                    self.state = 249
                    self.harmonic_assign()
                    pass

                elif la_ == 33:
                    self.state = 250
                    self.hbond_assign()
                    pass

                elif la_ == 34:
                    self.state = 251
                    self.hbond_db_assign()
                    pass

                elif la_ == 35:
                    self.state = 252
                    self.coup_assign()
                    pass

                elif la_ == 36:
                    self.state = 253
                    self.xadc_assign()
                    pass

                elif la_ == 37:
                    self.state = 254
                    self.coll_assign()
                    pass

                elif la_ == 38:
                    self.state = 255
                    self.csa_assign()
                    pass

                elif la_ == 39:
                    self.state = 256
                    self.pre_assign()
                    pass

                elif la_ == 40:
                    self.state = 257
                    self.pcs_assign()
                    pass


                self.state = 262
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 263
            self.match(XplorMRParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Distance_restraintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Noe(self):
            return self.getToken(XplorMRParser.Noe, 0)

        def End(self):
            return self.getToken(XplorMRParser.End, 0)

        def noe_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Noe_statementContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Noe_statementContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_distance_restraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDistance_restraint" ):
                listener.enterDistance_restraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDistance_restraint" ):
                listener.exitDistance_restraint(self)




    def distance_restraint(self):

        localctx = XplorMRParser.Distance_restraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_distance_restraint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 265
            self.match(XplorMRParser.Noe)
            self.state = 269
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << XplorMRParser.Assign) | (1 << XplorMRParser.Asymptote) | (1 << XplorMRParser.Averaging) | (1 << XplorMRParser.Bhig) | (1 << XplorMRParser.Ceiling) | (1 << XplorMRParser.Classification) | (1 << XplorMRParser.CountViol) | (1 << XplorMRParser.Distribute) | (1 << XplorMRParser.Monomers) | (1 << XplorMRParser.Ncount) | (1 << XplorMRParser.Nrestraints) | (1 << XplorMRParser.Potential) | (1 << XplorMRParser.Predict) | (1 << XplorMRParser.Print) | (1 << XplorMRParser.Reset) | (1 << XplorMRParser.Rswitch) | (1 << XplorMRParser.Scale) | (1 << XplorMRParser.SoExponent) | (1 << XplorMRParser.SqConstant) | (1 << XplorMRParser.SqExponent) | (1 << XplorMRParser.SqOffset) | (1 << XplorMRParser.Temperature))) != 0):
                self.state = 266
                self.noe_statement()
                self.state = 271
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 272
            self.match(XplorMRParser.End)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Dihedral_angle_restraintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Dihedral(self):
            return self.getToken(XplorMRParser.Dihedral, 0)

        def End(self):
            return self.getToken(XplorMRParser.End, 0)

        def Restraints(self):
            return self.getToken(XplorMRParser.Restraints, 0)

        def dihedral_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Dihedral_statementContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Dihedral_statementContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_dihedral_angle_restraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDihedral_angle_restraint" ):
                listener.enterDihedral_angle_restraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDihedral_angle_restraint" ):
                listener.exitDihedral_angle_restraint(self)




    def dihedral_angle_restraint(self):

        localctx = XplorMRParser.Dihedral_angle_restraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_dihedral_angle_restraint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 275
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==XplorMRParser.Restraints:
                self.state = 274
                self.match(XplorMRParser.Restraints)


            self.state = 277
            self.match(XplorMRParser.Dihedral)
            self.state = 281
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << XplorMRParser.Assign) | (1 << XplorMRParser.Reset) | (1 << XplorMRParser.Scale) | (1 << XplorMRParser.Nassign))) != 0):
                self.state = 278
                self.dihedral_statement()
                self.state = 283
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 284
            self.match(XplorMRParser.End)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Rdc_restraintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Sanisotropy(self):
            return self.getToken(XplorMRParser.Sanisotropy, 0)

        def End(self):
            return self.getToken(XplorMRParser.End, 0)

        def sani_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Sani_statementContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Sani_statementContext,i)


        def Xdipolar(self):
            return self.getToken(XplorMRParser.Xdipolar, 0)

        def Dipolar(self):
            return self.getToken(XplorMRParser.Dipolar, 0)

        def xdip_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Xdip_statementContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Xdip_statementContext,i)


        def VectorAngle(self):
            return self.getToken(XplorMRParser.VectorAngle, 0)

        def vean_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Vean_statementContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Vean_statementContext,i)


        def Tensor(self):
            return self.getToken(XplorMRParser.Tensor, 0)

        def tenso_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Tenso_statementContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Tenso_statementContext,i)


        def Anisotropy(self):
            return self.getToken(XplorMRParser.Anisotropy, 0)

        def anis_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Anis_statementContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Anis_statementContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_rdc_restraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRdc_restraint" ):
                listener.enterRdc_restraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRdc_restraint" ):
                listener.exitRdc_restraint(self)




    def rdc_restraint(self):

        localctx = XplorMRParser.Rdc_restraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_rdc_restraint)
        self._la = 0 # Token type
        try:
            self.state = 326
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [XplorMRParser.Sanisotropy]:
                self.enterOuterAlt(localctx, 1)
                self.state = 286
                self.match(XplorMRParser.Sanisotropy)
                self.state = 290
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << XplorMRParser.Assign) | (1 << XplorMRParser.Classification) | (1 << XplorMRParser.Nrestraints) | (1 << XplorMRParser.Potential) | (1 << XplorMRParser.Print) | (1 << XplorMRParser.Reset) | (1 << XplorMRParser.Coefficients) | (1 << XplorMRParser.ForceConstant))) != 0):
                    self.state = 287
                    self.sani_statement()
                    self.state = 292
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 293
                self.match(XplorMRParser.End)
                pass
            elif token in [XplorMRParser.Xdipolar, XplorMRParser.Dipolar]:
                self.enterOuterAlt(localctx, 2)
                self.state = 294
                _la = self._input.LA(1)
                if not(_la==XplorMRParser.Xdipolar or _la==XplorMRParser.Dipolar):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 298
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << XplorMRParser.Assign) | (1 << XplorMRParser.Classification) | (1 << XplorMRParser.Nrestraints) | (1 << XplorMRParser.Potential) | (1 << XplorMRParser.Print) | (1 << XplorMRParser.Reset) | (1 << XplorMRParser.Scale) | (1 << XplorMRParser.Coefficients) | (1 << XplorMRParser.ForceConstant) | (1 << XplorMRParser.Type) | (1 << XplorMRParser.Sign) | (1 << XplorMRParser.Average))) != 0):
                    self.state = 295
                    self.xdip_statement()
                    self.state = 300
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 301
                self.match(XplorMRParser.End)
                pass
            elif token in [XplorMRParser.VectorAngle]:
                self.enterOuterAlt(localctx, 3)
                self.state = 302
                self.match(XplorMRParser.VectorAngle)
                self.state = 306
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << XplorMRParser.Assign) | (1 << XplorMRParser.Classification) | (1 << XplorMRParser.Nrestraints) | (1 << XplorMRParser.Print) | (1 << XplorMRParser.Reset) | (1 << XplorMRParser.ForceConstant) | (1 << XplorMRParser.Cv) | (1 << XplorMRParser.Partition))) != 0):
                    self.state = 303
                    self.vean_statement()
                    self.state = 308
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 309
                self.match(XplorMRParser.End)
                pass
            elif token in [XplorMRParser.Tensor]:
                self.enterOuterAlt(localctx, 4)
                self.state = 310
                self.match(XplorMRParser.Tensor)
                self.state = 314
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << XplorMRParser.Assign) | (1 << XplorMRParser.Classification) | (1 << XplorMRParser.Nrestraints) | (1 << XplorMRParser.Potential) | (1 << XplorMRParser.Print) | (1 << XplorMRParser.Reset) | (1 << XplorMRParser.Coefficients))) != 0):
                    self.state = 311
                    self.tenso_statement()
                    self.state = 316
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 317
                self.match(XplorMRParser.End)
                pass
            elif token in [XplorMRParser.Anisotropy]:
                self.enterOuterAlt(localctx, 5)
                self.state = 318
                self.match(XplorMRParser.Anisotropy)
                self.state = 322
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << XplorMRParser.Assign) | (1 << XplorMRParser.Classification) | (1 << XplorMRParser.Nrestraints) | (1 << XplorMRParser.Potential) | (1 << XplorMRParser.Print) | (1 << XplorMRParser.Reset) | (1 << XplorMRParser.Coefficients) | (1 << XplorMRParser.ForceConstant) | (1 << XplorMRParser.Type))) != 0):
                    self.state = 319
                    self.anis_statement()
                    self.state = 324
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 325
                self.match(XplorMRParser.End)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Planar_restraintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Planar(self):
            return self.getToken(XplorMRParser.Planar, 0)

        def End(self):
            return self.getToken(XplorMRParser.End, 0)

        def Restraints(self):
            return self.getToken(XplorMRParser.Restraints, 0)

        def planar_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Planar_statementContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Planar_statementContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_planar_restraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPlanar_restraint" ):
                listener.enterPlanar_restraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPlanar_restraint" ):
                listener.exitPlanar_restraint(self)




    def planar_restraint(self):

        localctx = XplorMRParser.Planar_restraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_planar_restraint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 329
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==XplorMRParser.Restraints:
                self.state = 328
                self.match(XplorMRParser.Restraints)


            self.state = 331
            self.match(XplorMRParser.Planar)
            self.state = 335
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==XplorMRParser.Group or _la==XplorMRParser.Initialize:
                self.state = 332
                self.planar_statement()
                self.state = 337
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 338
            self.match(XplorMRParser.End)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Harmonic_restraintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Harmonic(self):
            return self.getToken(XplorMRParser.Harmonic, 0)

        def End(self):
            return self.getToken(XplorMRParser.End, 0)

        def Restraints(self):
            return self.getToken(XplorMRParser.Restraints, 0)

        def harmonic_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Harmonic_statementContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Harmonic_statementContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_harmonic_restraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHarmonic_restraint" ):
                listener.enterHarmonic_restraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHarmonic_restraint" ):
                listener.exitHarmonic_restraint(self)




    def harmonic_restraint(self):

        localctx = XplorMRParser.Harmonic_restraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_harmonic_restraint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 341
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==XplorMRParser.Restraints:
                self.state = 340
                self.match(XplorMRParser.Restraints)


            self.state = 343
            self.match(XplorMRParser.Harmonic)
            self.state = 347
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==XplorMRParser.Exponent or _la==XplorMRParser.Normal:
                self.state = 344
                self.harmonic_statement()
                self.state = 349
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 350
            self.match(XplorMRParser.End)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Antidistance_restraintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Xadc(self):
            return self.getToken(XplorMRParser.Xadc, 0)

        def End(self):
            return self.getToken(XplorMRParser.End, 0)

        def antidistance_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Antidistance_statementContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Antidistance_statementContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_antidistance_restraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAntidistance_restraint" ):
                listener.enterAntidistance_restraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAntidistance_restraint" ):
                listener.exitAntidistance_restraint(self)




    def antidistance_restraint(self):

        localctx = XplorMRParser.Antidistance_restraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_antidistance_restraint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 352
            self.match(XplorMRParser.Xadc)
            self.state = 356
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << XplorMRParser.Assign) | (1 << XplorMRParser.Classification) | (1 << XplorMRParser.Nrestraints) | (1 << XplorMRParser.Print) | (1 << XplorMRParser.Reset) | (1 << XplorMRParser.ForceConstant) | (1 << XplorMRParser.Expectation) | (1 << XplorMRParser.Size) | (1 << XplorMRParser.Zero))) != 0):
                self.state = 353
                self.antidistance_statement()
                self.state = 358
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 359
            self.match(XplorMRParser.End)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Coupling_restraintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Coupling(self):
            return self.getToken(XplorMRParser.Coupling, 0)

        def End(self):
            return self.getToken(XplorMRParser.End, 0)

        def coupling_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Coupling_statementContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Coupling_statementContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_coupling_restraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCoupling_restraint" ):
                listener.enterCoupling_restraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCoupling_restraint" ):
                listener.exitCoupling_restraint(self)




    def coupling_restraint(self):

        localctx = XplorMRParser.Coupling_restraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_coupling_restraint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 361
            self.match(XplorMRParser.Coupling)
            self.state = 365
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((((_la - 4)) & ~0x3f) == 0 and ((1 << (_la - 4)) & ((1 << (XplorMRParser.Assign - 4)) | (1 << (XplorMRParser.Classification - 4)) | (1 << (XplorMRParser.Nrestraints - 4)) | (1 << (XplorMRParser.Potential - 4)) | (1 << (XplorMRParser.Print - 4)) | (1 << (XplorMRParser.Reset - 4)) | (1 << (XplorMRParser.Coefficients - 4)) | (1 << (XplorMRParser.ForceConstant - 4)) | (1 << (XplorMRParser.Cv - 4)) | (1 << (XplorMRParser.Partition - 4)) | (1 << (XplorMRParser.DegEnergy - 4)))) != 0):
                self.state = 362
                self.coupling_statement()
                self.state = 367
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 368
            self.match(XplorMRParser.End)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Carbon_shift_restraintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Carbon(self):
            return self.getToken(XplorMRParser.Carbon, 0)

        def End(self):
            return self.getToken(XplorMRParser.End, 0)

        def carbon_shift_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Carbon_shift_statementContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Carbon_shift_statementContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_carbon_shift_restraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCarbon_shift_restraint" ):
                listener.enterCarbon_shift_restraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCarbon_shift_restraint" ):
                listener.exitCarbon_shift_restraint(self)




    def carbon_shift_restraint(self):

        localctx = XplorMRParser.Carbon_shift_restraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_carbon_shift_restraint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 370
            self.match(XplorMRParser.Carbon)
            self.state = 374
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << XplorMRParser.Assign) | (1 << XplorMRParser.Classification) | (1 << XplorMRParser.Nrestraints) | (1 << XplorMRParser.Potential) | (1 << XplorMRParser.Print) | (1 << XplorMRParser.Reset) | (1 << XplorMRParser.ForceConstant) | (1 << XplorMRParser.Expectation) | (1 << XplorMRParser.Zero))) != 0) or ((((_la - 67)) & ~0x3f) == 0 and ((1 << (_la - 67)) & ((1 << (XplorMRParser.PhiStep - 67)) | (1 << (XplorMRParser.PsiStep - 67)) | (1 << (XplorMRParser.Rcoil - 67)))) != 0):
                self.state = 371
                self.carbon_shift_statement()
                self.state = 376
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 377
            self.match(XplorMRParser.End)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Proton_shift_restraintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Proton(self):
            return self.getToken(XplorMRParser.Proton, 0)

        def End(self):
            return self.getToken(XplorMRParser.End, 0)

        def proton_shift_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Proton_shift_statementContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Proton_shift_statementContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_proton_shift_restraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProton_shift_restraint" ):
                listener.enterProton_shift_restraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProton_shift_restraint" ):
                listener.exitProton_shift_restraint(self)




    def proton_shift_restraint(self):

        localctx = XplorMRParser.Proton_shift_restraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_proton_shift_restraint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 379
            self.match(XplorMRParser.Proton)
            self.state = 383
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << XplorMRParser.Classification) | (1 << XplorMRParser.Potential) | (1 << XplorMRParser.Print) | (1 << XplorMRParser.Reset) | (1 << XplorMRParser.ForceConstant) | (1 << XplorMRParser.Anisotropy))) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & ((1 << (XplorMRParser.DegEnergy - 65)) | (1 << (XplorMRParser.Carbon - 65)) | (1 << (XplorMRParser.Rcoil - 65)) | (1 << (XplorMRParser.Observed - 65)) | (1 << (XplorMRParser.Amides - 65)) | (1 << (XplorMRParser.Nitrogens - 65)) | (1 << (XplorMRParser.Oxygens - 65)) | (1 << (XplorMRParser.RingAtoms - 65)) | (1 << (XplorMRParser.AlphasAndAmides - 65)) | (1 << (XplorMRParser.Error - 65)))) != 0):
                self.state = 380
                self.proton_shift_statement()
                self.state = 385
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 386
            self.match(XplorMRParser.End)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Dihedral_angle_db_restraintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Ramachandran(self):
            return self.getToken(XplorMRParser.Ramachandran, 0)

        def End(self):
            return self.getToken(XplorMRParser.End, 0)

        def ramachandran_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Ramachandran_statementContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Ramachandran_statementContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_dihedral_angle_db_restraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDihedral_angle_db_restraint" ):
                listener.enterDihedral_angle_db_restraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDihedral_angle_db_restraint" ):
                listener.exitDihedral_angle_db_restraint(self)




    def dihedral_angle_db_restraint(self):

        localctx = XplorMRParser.Dihedral_angle_db_restraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_dihedral_angle_db_restraint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 388
            self.match(XplorMRParser.Ramachandran)
            self.state = 392
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << XplorMRParser.Assign) | (1 << XplorMRParser.Classification) | (1 << XplorMRParser.Nrestraints) | (1 << XplorMRParser.Print) | (1 << XplorMRParser.Reset) | (1 << XplorMRParser.Scale) | (1 << XplorMRParser.Cutoff) | (1 << XplorMRParser.ForceConstant) | (1 << XplorMRParser.Size) | (1 << XplorMRParser.Zero))) != 0) or ((((_la - 79)) & ~0x3f) == 0 and ((1 << (_la - 79)) & ((1 << (XplorMRParser.Gaussian - 79)) | (1 << (XplorMRParser.Phase - 79)) | (1 << (XplorMRParser.Quartic - 79)) | (1 << (XplorMRParser.Shape - 79)) | (1 << (XplorMRParser.Sort - 79)))) != 0):
                self.state = 389
                self.ramachandran_statement()
                self.state = 394
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 395
            self.match(XplorMRParser.End)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Radius_of_gyration_restraintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Collapse(self):
            return self.getToken(XplorMRParser.Collapse, 0)

        def End(self):
            return self.getToken(XplorMRParser.End, 0)

        def collapse_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Collapse_statementContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Collapse_statementContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_radius_of_gyration_restraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRadius_of_gyration_restraint" ):
                listener.enterRadius_of_gyration_restraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRadius_of_gyration_restraint" ):
                listener.exitRadius_of_gyration_restraint(self)




    def radius_of_gyration_restraint(self):

        localctx = XplorMRParser.Radius_of_gyration_restraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_radius_of_gyration_restraint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 397
            self.match(XplorMRParser.Collapse)
            self.state = 401
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << XplorMRParser.Assign) | (1 << XplorMRParser.Print) | (1 << XplorMRParser.Reset) | (1 << XplorMRParser.Scale))) != 0):
                self.state = 398
                self.collapse_statement()
                self.state = 403
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 404
            self.match(XplorMRParser.End)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Diffusion_anisotropy_restraintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Danisotropy(self):
            return self.getToken(XplorMRParser.Danisotropy, 0)

        def End(self):
            return self.getToken(XplorMRParser.End, 0)

        def diffusion_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Diffusion_statementContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Diffusion_statementContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_diffusion_anisotropy_restraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDiffusion_anisotropy_restraint" ):
                listener.enterDiffusion_anisotropy_restraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDiffusion_anisotropy_restraint" ):
                listener.exitDiffusion_anisotropy_restraint(self)




    def diffusion_anisotropy_restraint(self):

        localctx = XplorMRParser.Diffusion_anisotropy_restraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_diffusion_anisotropy_restraint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 406
            self.match(XplorMRParser.Danisotropy)
            self.state = 410
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << XplorMRParser.Assign) | (1 << XplorMRParser.Classification) | (1 << XplorMRParser.Nrestraints) | (1 << XplorMRParser.Potential) | (1 << XplorMRParser.Print) | (1 << XplorMRParser.Reset) | (1 << XplorMRParser.Coefficients) | (1 << XplorMRParser.ForceConstant) | (1 << XplorMRParser.Type))) != 0):
                self.state = 407
                self.diffusion_statement()
                self.state = 412
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 413
            self.match(XplorMRParser.End)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Orientation_db_restraintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Orient(self):
            return self.getToken(XplorMRParser.Orient, 0)

        def End(self):
            return self.getToken(XplorMRParser.End, 0)

        def orientation_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Orientation_statementContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Orientation_statementContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_orientation_db_restraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOrientation_db_restraint" ):
                listener.enterOrientation_db_restraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOrientation_db_restraint" ):
                listener.exitOrientation_db_restraint(self)




    def orientation_db_restraint(self):

        localctx = XplorMRParser.Orientation_db_restraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_orientation_db_restraint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 415
            self.match(XplorMRParser.Orient)
            self.state = 419
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << XplorMRParser.Assign) | (1 << XplorMRParser.Classification) | (1 << XplorMRParser.Nrestraints) | (1 << XplorMRParser.Print) | (1 << XplorMRParser.Reset) | (1 << XplorMRParser.Cutoff) | (1 << XplorMRParser.ForceConstant) | (1 << XplorMRParser.Size) | (1 << XplorMRParser.Zero))) != 0) or ((((_la - 79)) & ~0x3f) == 0 and ((1 << (_la - 79)) & ((1 << (XplorMRParser.Gaussian - 79)) | (1 << (XplorMRParser.Quartic - 79)) | (1 << (XplorMRParser.Height - 79)) | (1 << (XplorMRParser.MaxGaussians - 79)) | (1 << (XplorMRParser.NewGaussian - 79)))) != 0) or _la==XplorMRParser.Residue:
                self.state = 416
                self.orientation_statement()
                self.state = 421
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 422
            self.match(XplorMRParser.End)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Csa_restraintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Dcsa(self):
            return self.getToken(XplorMRParser.Dcsa, 0)

        def End(self):
            return self.getToken(XplorMRParser.End, 0)

        def csa_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Csa_statementContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Csa_statementContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_csa_restraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCsa_restraint" ):
                listener.enterCsa_restraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCsa_restraint" ):
                listener.exitCsa_restraint(self)




    def csa_restraint(self):

        localctx = XplorMRParser.Csa_restraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_csa_restraint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 424
            self.match(XplorMRParser.Dcsa)
            self.state = 428
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << XplorMRParser.Assign) | (1 << XplorMRParser.Classification) | (1 << XplorMRParser.Nrestraints) | (1 << XplorMRParser.Potential) | (1 << XplorMRParser.Print) | (1 << XplorMRParser.Reset) | (1 << XplorMRParser.Scale) | (1 << XplorMRParser.Coefficients) | (1 << XplorMRParser.ForceConstant) | (1 << XplorMRParser.Type))) != 0) or _la==XplorMRParser.Sigma:
                self.state = 425
                self.csa_statement()
                self.state = 430
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 431
            self.match(XplorMRParser.End)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pcsa_restraintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Pcsa(self):
            return self.getToken(XplorMRParser.Pcsa, 0)

        def End(self):
            return self.getToken(XplorMRParser.End, 0)

        def pcsa_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Pcsa_statementContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Pcsa_statementContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_pcsa_restraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPcsa_restraint" ):
                listener.enterPcsa_restraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPcsa_restraint" ):
                listener.exitPcsa_restraint(self)




    def pcsa_restraint(self):

        localctx = XplorMRParser.Pcsa_restraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_pcsa_restraint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 433
            self.match(XplorMRParser.Pcsa)
            self.state = 437
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << XplorMRParser.Assign) | (1 << XplorMRParser.Classification) | (1 << XplorMRParser.Nrestraints) | (1 << XplorMRParser.Potential) | (1 << XplorMRParser.Print) | (1 << XplorMRParser.Reset) | (1 << XplorMRParser.Scale) | (1 << XplorMRParser.Coefficients) | (1 << XplorMRParser.ForceConstant))) != 0) or _la==XplorMRParser.Sigma:
                self.state = 434
                self.pcsa_statement()
                self.state = 439
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 440
            self.match(XplorMRParser.End)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class One_bond_coupling_restraintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OneBond(self):
            return self.getToken(XplorMRParser.OneBond, 0)

        def End(self):
            return self.getToken(XplorMRParser.End, 0)

        def one_bond_coupling_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.One_bond_coupling_statementContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.One_bond_coupling_statementContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_one_bond_coupling_restraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOne_bond_coupling_restraint" ):
                listener.enterOne_bond_coupling_restraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOne_bond_coupling_restraint" ):
                listener.exitOne_bond_coupling_restraint(self)




    def one_bond_coupling_restraint(self):

        localctx = XplorMRParser.One_bond_coupling_restraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_one_bond_coupling_restraint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 442
            self.match(XplorMRParser.OneBond)
            self.state = 446
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << XplorMRParser.Assign) | (1 << XplorMRParser.Classification) | (1 << XplorMRParser.Nrestraints) | (1 << XplorMRParser.Potential) | (1 << XplorMRParser.Print) | (1 << XplorMRParser.Reset) | (1 << XplorMRParser.Coefficients) | (1 << XplorMRParser.ForceConstant))) != 0):
                self.state = 443
                self.one_bond_coupling_statement()
                self.state = 448
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 449
            self.match(XplorMRParser.End)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Angle_db_restraintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AngleDb(self):
            return self.getToken(XplorMRParser.AngleDb, 0)

        def End(self):
            return self.getToken(XplorMRParser.End, 0)

        def angle_db_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Angle_db_statementContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Angle_db_statementContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_angle_db_restraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAngle_db_restraint" ):
                listener.enterAngle_db_restraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAngle_db_restraint" ):
                listener.exitAngle_db_restraint(self)




    def angle_db_restraint(self):

        localctx = XplorMRParser.Angle_db_restraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_angle_db_restraint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 451
            self.match(XplorMRParser.AngleDb)
            self.state = 455
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << XplorMRParser.Assign) | (1 << XplorMRParser.Classification) | (1 << XplorMRParser.Nrestraints) | (1 << XplorMRParser.Potential) | (1 << XplorMRParser.Print) | (1 << XplorMRParser.Reset) | (1 << XplorMRParser.ForceConstant) | (1 << XplorMRParser.Expectation) | (1 << XplorMRParser.Size) | (1 << XplorMRParser.Zero))) != 0) or _la==XplorMRParser.Error or _la==XplorMRParser.DerivFlag:
                self.state = 452
                self.angle_db_statement()
                self.state = 457
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 458
            self.match(XplorMRParser.End)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pre_restraintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Paramagnetic(self):
            return self.getToken(XplorMRParser.Paramagnetic, 0)

        def End(self):
            return self.getToken(XplorMRParser.End, 0)

        def pre_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Pre_statementContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Pre_statementContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_pre_restraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPre_restraint" ):
                listener.enterPre_restraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPre_restraint" ):
                listener.exitPre_restraint(self)




    def pre_restraint(self):

        localctx = XplorMRParser.Pre_restraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_pre_restraint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 460
            self.match(XplorMRParser.Paramagnetic)
            self.state = 464
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << XplorMRParser.Assign) | (1 << XplorMRParser.Classification) | (1 << XplorMRParser.Nrestraints) | (1 << XplorMRParser.Potential) | (1 << XplorMRParser.Print) | (1 << XplorMRParser.Reset) | (1 << XplorMRParser.ForceConstant))) != 0) or ((((_la - 99)) & ~0x3f) == 0 and ((1 << (_la - 99)) & ((1 << (XplorMRParser.Kconst - 99)) | (1 << (XplorMRParser.Omega - 99)) | (1 << (XplorMRParser.Tauc - 99)) | (1 << (XplorMRParser.Debug - 99)))) != 0):
                self.state = 461
                self.pre_statement()
                self.state = 466
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 467
            self.match(XplorMRParser.End)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pcs_restraintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Xpcs(self):
            return self.getToken(XplorMRParser.Xpcs, 0)

        def End(self):
            return self.getToken(XplorMRParser.End, 0)

        def pcs_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Pcs_statementContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Pcs_statementContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_pcs_restraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPcs_restraint" ):
                listener.enterPcs_restraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPcs_restraint" ):
                listener.exitPcs_restraint(self)




    def pcs_restraint(self):

        localctx = XplorMRParser.Pcs_restraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_pcs_restraint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 469
            self.match(XplorMRParser.Xpcs)
            self.state = 473
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << XplorMRParser.Assign) | (1 << XplorMRParser.Classification) | (1 << XplorMRParser.Nrestraints) | (1 << XplorMRParser.Print) | (1 << XplorMRParser.Reset) | (1 << XplorMRParser.Coefficients) | (1 << XplorMRParser.ForceConstant))) != 0) or ((((_la - 104)) & ~0x3f) == 0 and ((1 << (_la - 104)) & ((1 << (XplorMRParser.Tolerance - 104)) | (1 << (XplorMRParser.Save - 104)) | (1 << (XplorMRParser.Fmed - 104)) | (1 << (XplorMRParser.ErrOn - 104)) | (1 << (XplorMRParser.ErrOff - 104)) | (1 << (XplorMRParser.Fon - 104)) | (1 << (XplorMRParser.Foff - 104)) | (1 << (XplorMRParser.Son - 104)) | (1 << (XplorMRParser.Soff - 104)) | (1 << (XplorMRParser.Frun - 104)))) != 0):
                self.state = 470
                self.pcs_statement()
                self.state = 475
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 476
            self.match(XplorMRParser.End)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Prdc_restraintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Xrdcoupling(self):
            return self.getToken(XplorMRParser.Xrdcoupling, 0)

        def End(self):
            return self.getToken(XplorMRParser.End, 0)

        def prdc_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Prdc_statementContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Prdc_statementContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_prdc_restraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrdc_restraint" ):
                listener.enterPrdc_restraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrdc_restraint" ):
                listener.exitPrdc_restraint(self)




    def prdc_restraint(self):

        localctx = XplorMRParser.Prdc_restraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_prdc_restraint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 478
            self.match(XplorMRParser.Xrdcoupling)
            self.state = 482
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << XplorMRParser.Assign) | (1 << XplorMRParser.Classification) | (1 << XplorMRParser.Nrestraints) | (1 << XplorMRParser.Print) | (1 << XplorMRParser.Reset) | (1 << XplorMRParser.Coefficients) | (1 << XplorMRParser.ForceConstant))) != 0) or ((((_la - 104)) & ~0x3f) == 0 and ((1 << (_la - 104)) & ((1 << (XplorMRParser.Tolerance - 104)) | (1 << (XplorMRParser.Save - 104)) | (1 << (XplorMRParser.Fmed - 104)) | (1 << (XplorMRParser.ErrOn - 104)) | (1 << (XplorMRParser.ErrOff - 104)) | (1 << (XplorMRParser.Fon - 104)) | (1 << (XplorMRParser.Foff - 104)) | (1 << (XplorMRParser.Son - 104)) | (1 << (XplorMRParser.Soff - 104)) | (1 << (XplorMRParser.Frun - 104)))) != 0):
                self.state = 479
                self.prdc_statement()
                self.state = 484
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 485
            self.match(XplorMRParser.End)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Porientation_restraintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Xangle(self):
            return self.getToken(XplorMRParser.Xangle, 0)

        def End(self):
            return self.getToken(XplorMRParser.End, 0)

        def porientation_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Porientation_statementContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Porientation_statementContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_porientation_restraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPorientation_restraint" ):
                listener.enterPorientation_restraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPorientation_restraint" ):
                listener.exitPorientation_restraint(self)




    def porientation_restraint(self):

        localctx = XplorMRParser.Porientation_restraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_porientation_restraint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 487
            self.match(XplorMRParser.Xangle)
            self.state = 491
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << XplorMRParser.Assign) | (1 << XplorMRParser.Classification) | (1 << XplorMRParser.Nrestraints) | (1 << XplorMRParser.Print) | (1 << XplorMRParser.Reset) | (1 << XplorMRParser.ForceConstant))) != 0):
                self.state = 488
                self.porientation_statement()
                self.state = 493
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 494
            self.match(XplorMRParser.End)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pccr_restraintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Xccr(self):
            return self.getToken(XplorMRParser.Xccr, 0)

        def End(self):
            return self.getToken(XplorMRParser.End, 0)

        def pccr_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Pccr_statementContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Pccr_statementContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_pccr_restraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPccr_restraint" ):
                listener.enterPccr_restraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPccr_restraint" ):
                listener.exitPccr_restraint(self)




    def pccr_restraint(self):

        localctx = XplorMRParser.Pccr_restraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_pccr_restraint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 496
            self.match(XplorMRParser.Xccr)
            self.state = 500
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << XplorMRParser.Assign) | (1 << XplorMRParser.Classification) | (1 << XplorMRParser.Nrestraints) | (1 << XplorMRParser.Print) | (1 << XplorMRParser.Reset) | (1 << XplorMRParser.Coefficients) | (1 << XplorMRParser.ForceConstant))) != 0) or _la==XplorMRParser.Frun or _la==XplorMRParser.Weip:
                self.state = 497
                self.pccr_statement()
                self.state = 502
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 503
            self.match(XplorMRParser.End)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Hbond_restraintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Hbda(self):
            return self.getToken(XplorMRParser.Hbda, 0)

        def End(self):
            return self.getToken(XplorMRParser.End, 0)

        def hbond_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Hbond_statementContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Hbond_statementContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_hbond_restraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHbond_restraint" ):
                listener.enterHbond_restraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHbond_restraint" ):
                listener.exitHbond_restraint(self)




    def hbond_restraint(self):

        localctx = XplorMRParser.Hbond_restraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_hbond_restraint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 505
            self.match(XplorMRParser.Hbda)
            self.state = 509
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << XplorMRParser.Assign) | (1 << XplorMRParser.Classification) | (1 << XplorMRParser.Nrestraints) | (1 << XplorMRParser.Print) | (1 << XplorMRParser.Reset) | (1 << XplorMRParser.ForceConstant))) != 0):
                self.state = 506
                self.hbond_statement()
                self.state = 511
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 512
            self.match(XplorMRParser.End)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Hbond_db_restraintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Hbdb(self):
            return self.getToken(XplorMRParser.Hbdb, 0)

        def End(self):
            return self.getToken(XplorMRParser.End, 0)

        def hbond_db_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Hbond_db_statementContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Hbond_db_statementContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_hbond_db_restraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHbond_db_restraint" ):
                listener.enterHbond_db_restraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHbond_db_restraint" ):
                listener.exitHbond_db_restraint(self)




    def hbond_db_restraint(self):

        localctx = XplorMRParser.Hbond_db_restraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_hbond_db_restraint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 514
            self.match(XplorMRParser.Hbdb)
            self.state = 518
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==XplorMRParser.Assign or ((((_la - 120)) & ~0x3f) == 0 and ((1 << (_la - 120)) & ((1 << (XplorMRParser.Kdir - 120)) | (1 << (XplorMRParser.Klin - 120)) | (1 << (XplorMRParser.Nseg - 120)) | (1 << (XplorMRParser.Nmin - 120)) | (1 << (XplorMRParser.Nmax - 120)) | (1 << (XplorMRParser.Segm - 120)) | (1 << (XplorMRParser.Ohcut - 120)) | (1 << (XplorMRParser.Coh1cut - 120)) | (1 << (XplorMRParser.Coh2cut - 120)) | (1 << (XplorMRParser.Ohncut - 120)) | (1 << (XplorMRParser.Updfrq - 120)) | (1 << (XplorMRParser.Prnfrq - 120)) | (1 << (XplorMRParser.Freemode - 120)))) != 0):
                self.state = 515
                self.hbond_db_statement()
                self.state = 520
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 521
            self.match(XplorMRParser.End)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Noe_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def noe_assign(self):
            return self.getTypedRuleContext(XplorMRParser.Noe_assignContext,0)


        def Asymptote(self):
            return self.getToken(XplorMRParser.Asymptote, 0)

        def Simple_name(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Simple_name)
            else:
                return self.getToken(XplorMRParser.Simple_name, i)

        def number_s(self):
            return self.getTypedRuleContext(XplorMRParser.Number_sContext,0)


        def Averaging(self):
            return self.getToken(XplorMRParser.Averaging, 0)

        def Simple_name_A(self):
            return self.getToken(XplorMRParser.Simple_name_A, 0)

        def Averaging_methods(self):
            return self.getToken(XplorMRParser.Averaging_methods, 0)

        def Bhig(self):
            return self.getToken(XplorMRParser.Bhig, 0)

        def Ceiling(self):
            return self.getToken(XplorMRParser.Ceiling, 0)

        def Equ_op(self):
            return self.getToken(XplorMRParser.Equ_op, 0)

        def Classification(self):
            return self.getToken(XplorMRParser.Classification, 0)

        def CountViol(self):
            return self.getToken(XplorMRParser.CountViol, 0)

        def Distribute(self):
            return self.getToken(XplorMRParser.Distribute, 0)

        def Monomers(self):
            return self.getToken(XplorMRParser.Monomers, 0)

        def Integer(self):
            return self.getToken(XplorMRParser.Integer, 0)

        def Ncount(self):
            return self.getToken(XplorMRParser.Ncount, 0)

        def Nrestraints(self):
            return self.getToken(XplorMRParser.Nrestraints, 0)

        def Potential(self):
            return self.getToken(XplorMRParser.Potential, 0)

        def Simple_name_P(self):
            return self.getToken(XplorMRParser.Simple_name_P, 0)

        def Potential_types(self):
            return self.getToken(XplorMRParser.Potential_types, 0)

        def Predict(self):
            return self.getToken(XplorMRParser.Predict, 0)

        def predict_statement(self):
            return self.getTypedRuleContext(XplorMRParser.Predict_statementContext,0)


        def End(self):
            return self.getToken(XplorMRParser.End, 0)

        def Print(self):
            return self.getToken(XplorMRParser.Print, 0)

        def Threshold(self):
            return self.getToken(XplorMRParser.Threshold, 0)

        def Reset(self):
            return self.getToken(XplorMRParser.Reset, 0)

        def Rswitch(self):
            return self.getToken(XplorMRParser.Rswitch, 0)

        def Scale(self):
            return self.getToken(XplorMRParser.Scale, 0)

        def SoExponent(self):
            return self.getToken(XplorMRParser.SoExponent, 0)

        def SqConstant(self):
            return self.getToken(XplorMRParser.SqConstant, 0)

        def SqExponent(self):
            return self.getToken(XplorMRParser.SqExponent, 0)

        def SqOffset(self):
            return self.getToken(XplorMRParser.SqOffset, 0)

        def Temperature(self):
            return self.getToken(XplorMRParser.Temperature, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_noe_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNoe_statement" ):
                listener.enterNoe_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNoe_statement" ):
                listener.exitNoe_statement(self)




    def noe_statement(self):

        localctx = XplorMRParser.Noe_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_noe_statement)
        self._la = 0 # Token type
        try:
            self.state = 594
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [XplorMRParser.Assign]:
                self.enterOuterAlt(localctx, 1)
                self.state = 523
                self.noe_assign()
                pass
            elif token in [XplorMRParser.Asymptote]:
                self.enterOuterAlt(localctx, 2)
                self.state = 524
                self.match(XplorMRParser.Asymptote)
                self.state = 525
                self.match(XplorMRParser.Simple_name)
                self.state = 526
                self.number_s()
                pass
            elif token in [XplorMRParser.Averaging]:
                self.enterOuterAlt(localctx, 3)
                self.state = 527
                self.match(XplorMRParser.Averaging)
                self.state = 528
                self.match(XplorMRParser.Simple_name_A)
                self.state = 529
                self.match(XplorMRParser.Averaging_methods)
                pass
            elif token in [XplorMRParser.Bhig]:
                self.enterOuterAlt(localctx, 4)
                self.state = 530
                self.match(XplorMRParser.Bhig)
                self.state = 531
                self.match(XplorMRParser.Simple_name)
                self.state = 532
                self.number_s()
                pass
            elif token in [XplorMRParser.Ceiling]:
                self.enterOuterAlt(localctx, 5)
                self.state = 533
                self.match(XplorMRParser.Ceiling)
                self.state = 535
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 534
                    self.match(XplorMRParser.Equ_op)


                self.state = 537
                self.number_s()
                pass
            elif token in [XplorMRParser.Classification]:
                self.enterOuterAlt(localctx, 6)
                self.state = 538
                self.match(XplorMRParser.Classification)
                self.state = 539
                self.match(XplorMRParser.Simple_name)
                pass
            elif token in [XplorMRParser.CountViol]:
                self.enterOuterAlt(localctx, 7)
                self.state = 540
                self.match(XplorMRParser.CountViol)
                self.state = 541
                self.match(XplorMRParser.Simple_name)
                pass
            elif token in [XplorMRParser.Distribute]:
                self.enterOuterAlt(localctx, 8)
                self.state = 542
                self.match(XplorMRParser.Distribute)
                self.state = 543
                self.match(XplorMRParser.Simple_name)
                self.state = 544
                self.match(XplorMRParser.Simple_name)
                self.state = 545
                self.number_s()
                pass
            elif token in [XplorMRParser.Monomers]:
                self.enterOuterAlt(localctx, 9)
                self.state = 546
                self.match(XplorMRParser.Monomers)
                self.state = 547
                self.match(XplorMRParser.Simple_name)
                self.state = 548
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.Ncount]:
                self.enterOuterAlt(localctx, 10)
                self.state = 549
                self.match(XplorMRParser.Ncount)
                self.state = 550
                self.match(XplorMRParser.Simple_name)
                self.state = 551
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.Nrestraints]:
                self.enterOuterAlt(localctx, 11)
                self.state = 552
                self.match(XplorMRParser.Nrestraints)
                self.state = 554
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 553
                    self.match(XplorMRParser.Equ_op)


                self.state = 556
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.Potential]:
                self.enterOuterAlt(localctx, 12)
                self.state = 557
                self.match(XplorMRParser.Potential)
                self.state = 558
                self.match(XplorMRParser.Simple_name_P)
                self.state = 559
                self.match(XplorMRParser.Potential_types)
                pass
            elif token in [XplorMRParser.Predict]:
                self.enterOuterAlt(localctx, 13)
                self.state = 560
                self.match(XplorMRParser.Predict)
                self.state = 561
                self.predict_statement()
                self.state = 562
                self.match(XplorMRParser.End)
                pass
            elif token in [XplorMRParser.Print]:
                self.enterOuterAlt(localctx, 14)
                self.state = 564
                self.match(XplorMRParser.Print)
                self.state = 565
                self.match(XplorMRParser.Threshold)
                self.state = 567
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 566
                    self.match(XplorMRParser.Equ_op)


                self.state = 569
                self.number_s()
                pass
            elif token in [XplorMRParser.Reset]:
                self.enterOuterAlt(localctx, 15)
                self.state = 570
                self.match(XplorMRParser.Reset)
                pass
            elif token in [XplorMRParser.Rswitch]:
                self.enterOuterAlt(localctx, 16)
                self.state = 571
                self.match(XplorMRParser.Rswitch)
                self.state = 572
                self.match(XplorMRParser.Simple_name)
                self.state = 573
                self.number_s()
                pass
            elif token in [XplorMRParser.Scale]:
                self.enterOuterAlt(localctx, 17)
                self.state = 574
                self.match(XplorMRParser.Scale)
                self.state = 575
                self.match(XplorMRParser.Simple_name)
                self.state = 576
                self.number_s()
                pass
            elif token in [XplorMRParser.SoExponent]:
                self.enterOuterAlt(localctx, 18)
                self.state = 577
                self.match(XplorMRParser.SoExponent)
                self.state = 578
                self.match(XplorMRParser.Simple_name)
                self.state = 579
                self.number_s()
                pass
            elif token in [XplorMRParser.SqConstant]:
                self.enterOuterAlt(localctx, 19)
                self.state = 580
                self.match(XplorMRParser.SqConstant)
                self.state = 581
                self.match(XplorMRParser.Simple_name)
                self.state = 582
                self.number_s()
                pass
            elif token in [XplorMRParser.SqExponent]:
                self.enterOuterAlt(localctx, 20)
                self.state = 583
                self.match(XplorMRParser.SqExponent)
                self.state = 584
                self.match(XplorMRParser.Simple_name)
                self.state = 585
                self.number_s()
                pass
            elif token in [XplorMRParser.SqOffset]:
                self.enterOuterAlt(localctx, 21)
                self.state = 586
                self.match(XplorMRParser.SqOffset)
                self.state = 587
                self.match(XplorMRParser.Simple_name)
                self.state = 588
                self.number_s()
                pass
            elif token in [XplorMRParser.Temperature]:
                self.enterOuterAlt(localctx, 22)
                self.state = 589
                self.match(XplorMRParser.Temperature)
                self.state = 591
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 590
                    self.match(XplorMRParser.Equ_op)


                self.state = 593
                self.number_s()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Noe_assignContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Assign(self):
            return self.getToken(XplorMRParser.Assign, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.SelectionContext,i)


        def number(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.NumberContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.NumberContext,i)


        def noe_annotation(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Noe_annotationContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Noe_annotationContext,i)


        def Or_op(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Or_op)
            else:
                return self.getToken(XplorMRParser.Or_op, i)

        def getRuleIndex(self):
            return XplorMRParser.RULE_noe_assign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNoe_assign" ):
                listener.enterNoe_assign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNoe_assign" ):
                listener.exitNoe_assign(self)




    def noe_assign(self):

        localctx = XplorMRParser.Noe_assignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_noe_assign)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 596
            self.match(XplorMRParser.Assign)
            self.state = 597
            self.selection()
            self.state = 598
            self.selection()
            self.state = 599
            self.number()
            self.state = 601
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,39,self._ctx)
            if la_ == 1:
                self.state = 600
                self.number()


            self.state = 604
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 178)) & ~0x3f) == 0 and ((1 << (_la - 178)) & ((1 << (XplorMRParser.Integer - 178)) | (1 << (XplorMRParser.Real - 178)) | (1 << (XplorMRParser.Symbol_name - 178)))) != 0):
                self.state = 603
                self.number()


            self.state = 609
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << XplorMRParser.Peak) | (1 << XplorMRParser.Spectrum) | (1 << XplorMRParser.Volume) | (1 << XplorMRParser.Ppm1) | (1 << XplorMRParser.Ppm2) | (1 << XplorMRParser.Cv) | (1 << XplorMRParser.Weight))) != 0):
                self.state = 606
                self.noe_annotation()
                self.state = 611
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 618
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==XplorMRParser.Or_op:
                self.state = 612
                self.match(XplorMRParser.Or_op)
                self.state = 613
                self.selection()
                self.state = 614
                self.selection()
                self.state = 620
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Predict_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Cutoff(self):
            return self.getToken(XplorMRParser.Cutoff, 0)

        def number_s(self):
            return self.getTypedRuleContext(XplorMRParser.Number_sContext,0)


        def Equ_op(self):
            return self.getToken(XplorMRParser.Equ_op, 0)

        def Cuton(self):
            return self.getToken(XplorMRParser.Cuton, 0)

        def From(self):
            return self.getToken(XplorMRParser.From, 0)

        def selection(self):
            return self.getTypedRuleContext(XplorMRParser.SelectionContext,0)


        def To(self):
            return self.getToken(XplorMRParser.To, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_predict_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPredict_statement" ):
                listener.enterPredict_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPredict_statement" ):
                listener.exitPredict_statement(self)




    def predict_statement(self):

        localctx = XplorMRParser.Predict_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_predict_statement)
        self._la = 0 # Token type
        try:
            self.state = 635
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [XplorMRParser.Cutoff]:
                self.enterOuterAlt(localctx, 1)
                self.state = 621
                self.match(XplorMRParser.Cutoff)
                self.state = 623
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 622
                    self.match(XplorMRParser.Equ_op)


                self.state = 625
                self.number_s()
                pass
            elif token in [XplorMRParser.Cuton]:
                self.enterOuterAlt(localctx, 2)
                self.state = 626
                self.match(XplorMRParser.Cuton)
                self.state = 628
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 627
                    self.match(XplorMRParser.Equ_op)


                self.state = 630
                self.number_s()
                pass
            elif token in [XplorMRParser.From]:
                self.enterOuterAlt(localctx, 3)
                self.state = 631
                self.match(XplorMRParser.From)
                self.state = 632
                self.selection()
                pass
            elif token in [XplorMRParser.To]:
                self.enterOuterAlt(localctx, 4)
                self.state = 633
                self.match(XplorMRParser.To)
                self.state = 634
                self.selection()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Noe_annotationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Peak(self):
            return self.getToken(XplorMRParser.Peak, 0)

        def number_a(self):
            return self.getTypedRuleContext(XplorMRParser.Number_aContext,0)


        def Equ_op(self):
            return self.getToken(XplorMRParser.Equ_op, 0)

        def Spectrum(self):
            return self.getToken(XplorMRParser.Spectrum, 0)

        def Weight(self):
            return self.getToken(XplorMRParser.Weight, 0)

        def Volume(self):
            return self.getToken(XplorMRParser.Volume, 0)

        def Ppm1(self):
            return self.getToken(XplorMRParser.Ppm1, 0)

        def Ppm2(self):
            return self.getToken(XplorMRParser.Ppm2, 0)

        def Cv(self):
            return self.getToken(XplorMRParser.Cv, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_noe_annotation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNoe_annotation" ):
                listener.enterNoe_annotation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNoe_annotation" ):
                listener.exitNoe_annotation(self)




    def noe_annotation(self):

        localctx = XplorMRParser.Noe_annotationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_noe_annotation)
        self._la = 0 # Token type
        try:
            self.state = 672
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [XplorMRParser.Peak]:
                self.enterOuterAlt(localctx, 1)
                self.state = 637
                self.match(XplorMRParser.Peak)
                self.state = 639
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 638
                    self.match(XplorMRParser.Equ_op)


                self.state = 641
                self.number_a()
                pass
            elif token in [XplorMRParser.Spectrum]:
                self.enterOuterAlt(localctx, 2)
                self.state = 642
                self.match(XplorMRParser.Spectrum)
                self.state = 644
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 643
                    self.match(XplorMRParser.Equ_op)


                self.state = 646
                self.number_a()
                pass
            elif token in [XplorMRParser.Weight]:
                self.enterOuterAlt(localctx, 3)
                self.state = 647
                self.match(XplorMRParser.Weight)
                self.state = 649
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 648
                    self.match(XplorMRParser.Equ_op)


                self.state = 651
                self.number_a()
                pass
            elif token in [XplorMRParser.Volume]:
                self.enterOuterAlt(localctx, 4)
                self.state = 652
                self.match(XplorMRParser.Volume)
                self.state = 654
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 653
                    self.match(XplorMRParser.Equ_op)


                self.state = 656
                self.number_a()
                pass
            elif token in [XplorMRParser.Ppm1]:
                self.enterOuterAlt(localctx, 5)
                self.state = 657
                self.match(XplorMRParser.Ppm1)
                self.state = 659
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 658
                    self.match(XplorMRParser.Equ_op)


                self.state = 661
                self.number_a()
                pass
            elif token in [XplorMRParser.Ppm2]:
                self.enterOuterAlt(localctx, 6)
                self.state = 662
                self.match(XplorMRParser.Ppm2)
                self.state = 664
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 663
                    self.match(XplorMRParser.Equ_op)


                self.state = 666
                self.number_a()
                pass
            elif token in [XplorMRParser.Cv]:
                self.enterOuterAlt(localctx, 7)
                self.state = 667
                self.match(XplorMRParser.Cv)
                self.state = 669
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 668
                    self.match(XplorMRParser.Equ_op)


                self.state = 671
                self.number_a()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Dihedral_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def dihedral_assign(self):
            return self.getTypedRuleContext(XplorMRParser.Dihedral_assignContext,0)


        def Nassign(self):
            return self.getToken(XplorMRParser.Nassign, 0)

        def Integer(self):
            return self.getToken(XplorMRParser.Integer, 0)

        def Equ_op(self):
            return self.getToken(XplorMRParser.Equ_op, 0)

        def Reset(self):
            return self.getToken(XplorMRParser.Reset, 0)

        def Scale(self):
            return self.getToken(XplorMRParser.Scale, 0)

        def number_s(self):
            return self.getTypedRuleContext(XplorMRParser.Number_sContext,0)


        def getRuleIndex(self):
            return XplorMRParser.RULE_dihedral_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDihedral_statement" ):
                listener.enterDihedral_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDihedral_statement" ):
                listener.exitDihedral_statement(self)




    def dihedral_statement(self):

        localctx = XplorMRParser.Dihedral_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_dihedral_statement)
        self._la = 0 # Token type
        try:
            self.state = 686
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [XplorMRParser.Assign]:
                self.enterOuterAlt(localctx, 1)
                self.state = 674
                self.dihedral_assign()
                pass
            elif token in [XplorMRParser.Nassign]:
                self.enterOuterAlt(localctx, 2)
                self.state = 675
                self.match(XplorMRParser.Nassign)
                self.state = 677
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 676
                    self.match(XplorMRParser.Equ_op)


                self.state = 679
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.Reset]:
                self.enterOuterAlt(localctx, 3)
                self.state = 680
                self.match(XplorMRParser.Reset)
                pass
            elif token in [XplorMRParser.Scale]:
                self.enterOuterAlt(localctx, 4)
                self.state = 681
                self.match(XplorMRParser.Scale)
                self.state = 683
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 682
                    self.match(XplorMRParser.Equ_op)


                self.state = 685
                self.number_s()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Dihedral_assignContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Assign(self):
            return self.getToken(XplorMRParser.Assign, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.SelectionContext,i)


        def number(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.NumberContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.NumberContext,i)


        def Integer(self):
            return self.getToken(XplorMRParser.Integer, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_dihedral_assign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDihedral_assign" ):
                listener.enterDihedral_assign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDihedral_assign" ):
                listener.exitDihedral_assign(self)




    def dihedral_assign(self):

        localctx = XplorMRParser.Dihedral_assignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_dihedral_assign)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 688
            self.match(XplorMRParser.Assign)
            self.state = 689
            self.selection()
            self.state = 690
            self.selection()
            self.state = 691
            self.selection()
            self.state = 692
            self.selection()
            self.state = 693
            self.number()
            self.state = 694
            self.number()
            self.state = 695
            self.number()
            self.state = 696
            self.match(XplorMRParser.Integer)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Sani_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def sani_assign(self):
            return self.getTypedRuleContext(XplorMRParser.Sani_assignContext,0)


        def Classification(self):
            return self.getToken(XplorMRParser.Classification, 0)

        def Simple_name(self):
            return self.getToken(XplorMRParser.Simple_name, 0)

        def Coefficients(self):
            return self.getToken(XplorMRParser.Coefficients, 0)

        def number_s(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Number_sContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Number_sContext,i)


        def ForceConstant(self):
            return self.getToken(XplorMRParser.ForceConstant, 0)

        def Nrestraints(self):
            return self.getToken(XplorMRParser.Nrestraints, 0)

        def Integer(self):
            return self.getToken(XplorMRParser.Integer, 0)

        def Potential(self):
            return self.getToken(XplorMRParser.Potential, 0)

        def Potential_types(self):
            return self.getToken(XplorMRParser.Potential_types, 0)

        def Print(self):
            return self.getToken(XplorMRParser.Print, 0)

        def Threshold(self):
            return self.getToken(XplorMRParser.Threshold, 0)

        def Reset(self):
            return self.getToken(XplorMRParser.Reset, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_sani_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSani_statement" ):
                listener.enterSani_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSani_statement" ):
                listener.exitSani_statement(self)




    def sani_statement(self):

        localctx = XplorMRParser.Sani_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_sani_statement)
        try:
            self.state = 716
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [XplorMRParser.Assign]:
                self.enterOuterAlt(localctx, 1)
                self.state = 698
                self.sani_assign()
                pass
            elif token in [XplorMRParser.Classification]:
                self.enterOuterAlt(localctx, 2)
                self.state = 699
                self.match(XplorMRParser.Classification)
                self.state = 700
                self.match(XplorMRParser.Simple_name)
                pass
            elif token in [XplorMRParser.Coefficients]:
                self.enterOuterAlt(localctx, 3)
                self.state = 701
                self.match(XplorMRParser.Coefficients)
                self.state = 702
                self.number_s()
                self.state = 703
                self.number_s()
                self.state = 704
                self.number_s()
                pass
            elif token in [XplorMRParser.ForceConstant]:
                self.enterOuterAlt(localctx, 4)
                self.state = 706
                self.match(XplorMRParser.ForceConstant)
                self.state = 707
                self.number_s()
                pass
            elif token in [XplorMRParser.Nrestraints]:
                self.enterOuterAlt(localctx, 5)
                self.state = 708
                self.match(XplorMRParser.Nrestraints)
                self.state = 709
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.Potential]:
                self.enterOuterAlt(localctx, 6)
                self.state = 710
                self.match(XplorMRParser.Potential)
                self.state = 711
                self.match(XplorMRParser.Potential_types)
                pass
            elif token in [XplorMRParser.Print]:
                self.enterOuterAlt(localctx, 7)
                self.state = 712
                self.match(XplorMRParser.Print)
                self.state = 713
                self.match(XplorMRParser.Threshold)
                self.state = 714
                self.number_s()
                pass
            elif token in [XplorMRParser.Reset]:
                self.enterOuterAlt(localctx, 8)
                self.state = 715
                self.match(XplorMRParser.Reset)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Sani_assignContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Assign(self):
            return self.getToken(XplorMRParser.Assign, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.SelectionContext,i)


        def number(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.NumberContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.NumberContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_sani_assign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSani_assign" ):
                listener.enterSani_assign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSani_assign" ):
                listener.exitSani_assign(self)




    def sani_assign(self):

        localctx = XplorMRParser.Sani_assignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_sani_assign)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 718
            self.match(XplorMRParser.Assign)
            self.state = 719
            self.selection()
            self.state = 720
            self.selection()
            self.state = 721
            self.selection()
            self.state = 722
            self.selection()
            self.state = 723
            self.selection()
            self.state = 724
            self.selection()
            self.state = 725
            self.number()
            self.state = 726
            self.number()
            self.state = 728
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 178)) & ~0x3f) == 0 and ((1 << (_la - 178)) & ((1 << (XplorMRParser.Integer - 178)) | (1 << (XplorMRParser.Real - 178)) | (1 << (XplorMRParser.Symbol_name - 178)))) != 0):
                self.state = 727
                self.number()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Xdip_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def xdip_assign(self):
            return self.getTypedRuleContext(XplorMRParser.Xdip_assignContext,0)


        def Classification(self):
            return self.getToken(XplorMRParser.Classification, 0)

        def Simple_name(self):
            return self.getToken(XplorMRParser.Simple_name, 0)

        def Type(self):
            return self.getToken(XplorMRParser.Type, 0)

        def Rdc_dist_fix_types(self):
            return self.getToken(XplorMRParser.Rdc_dist_fix_types, 0)

        def Scale(self):
            return self.getToken(XplorMRParser.Scale, 0)

        def number_s(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Number_sContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Number_sContext,i)


        def Sign(self):
            return self.getToken(XplorMRParser.Sign, 0)

        def Logical(self):
            return self.getToken(XplorMRParser.Logical, 0)

        def Average(self):
            return self.getToken(XplorMRParser.Average, 0)

        def Averaging_methods(self):
            return self.getToken(XplorMRParser.Averaging_methods, 0)

        def Coefficients(self):
            return self.getToken(XplorMRParser.Coefficients, 0)

        def ForceConstant(self):
            return self.getToken(XplorMRParser.ForceConstant, 0)

        def Nrestraints(self):
            return self.getToken(XplorMRParser.Nrestraints, 0)

        def Integer(self):
            return self.getToken(XplorMRParser.Integer, 0)

        def Potential(self):
            return self.getToken(XplorMRParser.Potential, 0)

        def Potential_types(self):
            return self.getToken(XplorMRParser.Potential_types, 0)

        def Print(self):
            return self.getToken(XplorMRParser.Print, 0)

        def Threshold(self):
            return self.getToken(XplorMRParser.Threshold, 0)

        def Reset(self):
            return self.getToken(XplorMRParser.Reset, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_xdip_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterXdip_statement" ):
                listener.enterXdip_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitXdip_statement" ):
                listener.exitXdip_statement(self)




    def xdip_statement(self):

        localctx = XplorMRParser.Xdip_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_xdip_statement)
        try:
            self.state = 756
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [XplorMRParser.Assign]:
                self.enterOuterAlt(localctx, 1)
                self.state = 730
                self.xdip_assign()
                pass
            elif token in [XplorMRParser.Classification]:
                self.enterOuterAlt(localctx, 2)
                self.state = 731
                self.match(XplorMRParser.Classification)
                self.state = 732
                self.match(XplorMRParser.Simple_name)
                pass
            elif token in [XplorMRParser.Type]:
                self.enterOuterAlt(localctx, 3)
                self.state = 733
                self.match(XplorMRParser.Type)
                self.state = 734
                self.match(XplorMRParser.Rdc_dist_fix_types)
                pass
            elif token in [XplorMRParser.Scale]:
                self.enterOuterAlt(localctx, 4)
                self.state = 735
                self.match(XplorMRParser.Scale)
                self.state = 736
                self.number_s()
                pass
            elif token in [XplorMRParser.Sign]:
                self.enterOuterAlt(localctx, 5)
                self.state = 737
                self.match(XplorMRParser.Sign)
                self.state = 738
                self.match(XplorMRParser.Logical)
                pass
            elif token in [XplorMRParser.Average]:
                self.enterOuterAlt(localctx, 6)
                self.state = 739
                self.match(XplorMRParser.Average)
                self.state = 740
                self.match(XplorMRParser.Averaging_methods)
                pass
            elif token in [XplorMRParser.Coefficients]:
                self.enterOuterAlt(localctx, 7)
                self.state = 741
                self.match(XplorMRParser.Coefficients)
                self.state = 742
                self.number_s()
                self.state = 743
                self.number_s()
                self.state = 744
                self.number_s()
                pass
            elif token in [XplorMRParser.ForceConstant]:
                self.enterOuterAlt(localctx, 8)
                self.state = 746
                self.match(XplorMRParser.ForceConstant)
                self.state = 747
                self.number_s()
                pass
            elif token in [XplorMRParser.Nrestraints]:
                self.enterOuterAlt(localctx, 9)
                self.state = 748
                self.match(XplorMRParser.Nrestraints)
                self.state = 749
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.Potential]:
                self.enterOuterAlt(localctx, 10)
                self.state = 750
                self.match(XplorMRParser.Potential)
                self.state = 751
                self.match(XplorMRParser.Potential_types)
                pass
            elif token in [XplorMRParser.Print]:
                self.enterOuterAlt(localctx, 11)
                self.state = 752
                self.match(XplorMRParser.Print)
                self.state = 753
                self.match(XplorMRParser.Threshold)
                self.state = 754
                self.number_s()
                pass
            elif token in [XplorMRParser.Reset]:
                self.enterOuterAlt(localctx, 12)
                self.state = 755
                self.match(XplorMRParser.Reset)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Xdip_assignContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Assign(self):
            return self.getToken(XplorMRParser.Assign, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.SelectionContext,i)


        def number(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.NumberContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.NumberContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_xdip_assign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterXdip_assign" ):
                listener.enterXdip_assign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitXdip_assign" ):
                listener.exitXdip_assign(self)




    def xdip_assign(self):

        localctx = XplorMRParser.Xdip_assignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 68, self.RULE_xdip_assign)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 758
            self.match(XplorMRParser.Assign)
            self.state = 759
            self.selection()
            self.state = 760
            self.selection()
            self.state = 761
            self.selection()
            self.state = 762
            self.selection()
            self.state = 763
            self.selection()
            self.state = 764
            self.selection()
            self.state = 765
            self.number()
            self.state = 766
            self.number()
            self.state = 773
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,60,self._ctx)
            if la_ == 1:
                self.state = 767
                self.number()

            elif la_ == 2:
                self.state = 768
                self.number()
                self.state = 769
                self.number()
                self.state = 770
                self.number()
                self.state = 771
                self.number()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Vean_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def vean_assign(self):
            return self.getTypedRuleContext(XplorMRParser.Vean_assignContext,0)


        def Cv(self):
            return self.getToken(XplorMRParser.Cv, 0)

        def Integer(self):
            return self.getToken(XplorMRParser.Integer, 0)

        def Equ_op(self):
            return self.getToken(XplorMRParser.Equ_op, 0)

        def Classification(self):
            return self.getToken(XplorMRParser.Classification, 0)

        def Simple_name(self):
            return self.getToken(XplorMRParser.Simple_name, 0)

        def ForceConstant(self):
            return self.getToken(XplorMRParser.ForceConstant, 0)

        def number_s(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Number_sContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Number_sContext,i)


        def Nrestraints(self):
            return self.getToken(XplorMRParser.Nrestraints, 0)

        def Partition(self):
            return self.getToken(XplorMRParser.Partition, 0)

        def Print(self):
            return self.getToken(XplorMRParser.Print, 0)

        def Threshold(self):
            return self.getToken(XplorMRParser.Threshold, 0)

        def Reset(self):
            return self.getToken(XplorMRParser.Reset, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_vean_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVean_statement" ):
                listener.enterVean_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVean_statement" ):
                listener.exitVean_statement(self)




    def vean_statement(self):

        localctx = XplorMRParser.Vean_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_vean_statement)
        self._la = 0 # Token type
        try:
            self.state = 798
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [XplorMRParser.Assign]:
                self.enterOuterAlt(localctx, 1)
                self.state = 775
                self.vean_assign()
                pass
            elif token in [XplorMRParser.Cv]:
                self.enterOuterAlt(localctx, 2)
                self.state = 776
                self.match(XplorMRParser.Cv)
                self.state = 778
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 777
                    self.match(XplorMRParser.Equ_op)


                self.state = 780
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.Classification]:
                self.enterOuterAlt(localctx, 3)
                self.state = 781
                self.match(XplorMRParser.Classification)
                self.state = 782
                self.match(XplorMRParser.Simple_name)
                pass
            elif token in [XplorMRParser.ForceConstant]:
                self.enterOuterAlt(localctx, 4)
                self.state = 783
                self.match(XplorMRParser.ForceConstant)
                self.state = 784
                self.number_s()
                self.state = 785
                self.number_s()
                pass
            elif token in [XplorMRParser.Nrestraints]:
                self.enterOuterAlt(localctx, 5)
                self.state = 787
                self.match(XplorMRParser.Nrestraints)
                self.state = 788
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.Partition]:
                self.enterOuterAlt(localctx, 6)
                self.state = 789
                self.match(XplorMRParser.Partition)
                self.state = 791
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 790
                    self.match(XplorMRParser.Equ_op)


                self.state = 793
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.Print]:
                self.enterOuterAlt(localctx, 7)
                self.state = 794
                self.match(XplorMRParser.Print)
                self.state = 795
                self.match(XplorMRParser.Threshold)
                self.state = 796
                self.number_s()
                pass
            elif token in [XplorMRParser.Reset]:
                self.enterOuterAlt(localctx, 8)
                self.state = 797
                self.match(XplorMRParser.Reset)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Vean_assignContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Assign(self):
            return self.getToken(XplorMRParser.Assign, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.SelectionContext,i)


        def number(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.NumberContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.NumberContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_vean_assign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVean_assign" ):
                listener.enterVean_assign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVean_assign" ):
                listener.exitVean_assign(self)




    def vean_assign(self):

        localctx = XplorMRParser.Vean_assignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_vean_assign)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 800
            self.match(XplorMRParser.Assign)
            self.state = 801
            self.selection()
            self.state = 802
            self.selection()
            self.state = 803
            self.selection()
            self.state = 804
            self.selection()
            self.state = 805
            self.number()
            self.state = 806
            self.number()
            self.state = 807
            self.number()
            self.state = 808
            self.number()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Tenso_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def tenso_assign(self):
            return self.getTypedRuleContext(XplorMRParser.Tenso_assignContext,0)


        def Classification(self):
            return self.getToken(XplorMRParser.Classification, 0)

        def Simple_name(self):
            return self.getToken(XplorMRParser.Simple_name, 0)

        def Coefficients(self):
            return self.getToken(XplorMRParser.Coefficients, 0)

        def number_s(self):
            return self.getTypedRuleContext(XplorMRParser.Number_sContext,0)


        def Nrestraints(self):
            return self.getToken(XplorMRParser.Nrestraints, 0)

        def Integer(self):
            return self.getToken(XplorMRParser.Integer, 0)

        def Potential(self):
            return self.getToken(XplorMRParser.Potential, 0)

        def Potential_types(self):
            return self.getToken(XplorMRParser.Potential_types, 0)

        def Print(self):
            return self.getToken(XplorMRParser.Print, 0)

        def Threshold(self):
            return self.getToken(XplorMRParser.Threshold, 0)

        def Reset(self):
            return self.getToken(XplorMRParser.Reset, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_tenso_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTenso_statement" ):
                listener.enterTenso_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTenso_statement" ):
                listener.exitTenso_statement(self)




    def tenso_statement(self):

        localctx = XplorMRParser.Tenso_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_tenso_statement)
        try:
            self.state = 823
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [XplorMRParser.Assign]:
                self.enterOuterAlt(localctx, 1)
                self.state = 810
                self.tenso_assign()
                pass
            elif token in [XplorMRParser.Classification]:
                self.enterOuterAlt(localctx, 2)
                self.state = 811
                self.match(XplorMRParser.Classification)
                self.state = 812
                self.match(XplorMRParser.Simple_name)
                pass
            elif token in [XplorMRParser.Coefficients]:
                self.enterOuterAlt(localctx, 3)
                self.state = 813
                self.match(XplorMRParser.Coefficients)
                self.state = 814
                self.number_s()
                pass
            elif token in [XplorMRParser.Nrestraints]:
                self.enterOuterAlt(localctx, 4)
                self.state = 815
                self.match(XplorMRParser.Nrestraints)
                self.state = 816
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.Potential]:
                self.enterOuterAlt(localctx, 5)
                self.state = 817
                self.match(XplorMRParser.Potential)
                self.state = 818
                self.match(XplorMRParser.Potential_types)
                pass
            elif token in [XplorMRParser.Print]:
                self.enterOuterAlt(localctx, 6)
                self.state = 819
                self.match(XplorMRParser.Print)
                self.state = 820
                self.match(XplorMRParser.Threshold)
                self.state = 821
                self.number_s()
                pass
            elif token in [XplorMRParser.Reset]:
                self.enterOuterAlt(localctx, 7)
                self.state = 822
                self.match(XplorMRParser.Reset)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Tenso_assignContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Assign(self):
            return self.getToken(XplorMRParser.Assign, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.SelectionContext,i)


        def number(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.NumberContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.NumberContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_tenso_assign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTenso_assign" ):
                listener.enterTenso_assign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTenso_assign" ):
                listener.exitTenso_assign(self)




    def tenso_assign(self):

        localctx = XplorMRParser.Tenso_assignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 76, self.RULE_tenso_assign)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 825
            self.match(XplorMRParser.Assign)
            self.state = 826
            self.selection()
            self.state = 827
            self.selection()
            self.state = 828
            self.number()
            self.state = 829
            self.number()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Anis_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def anis_assign(self):
            return self.getTypedRuleContext(XplorMRParser.Anis_assignContext,0)


        def Classification(self):
            return self.getToken(XplorMRParser.Classification, 0)

        def Simple_name(self):
            return self.getToken(XplorMRParser.Simple_name, 0)

        def Coefficients(self):
            return self.getToken(XplorMRParser.Coefficients, 0)

        def number_s(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Number_sContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Number_sContext,i)


        def ForceConstant(self):
            return self.getToken(XplorMRParser.ForceConstant, 0)

        def Nrestraints(self):
            return self.getToken(XplorMRParser.Nrestraints, 0)

        def Integer(self):
            return self.getToken(XplorMRParser.Integer, 0)

        def Potential(self):
            return self.getToken(XplorMRParser.Potential, 0)

        def Potential_types(self):
            return self.getToken(XplorMRParser.Potential_types, 0)

        def Print(self):
            return self.getToken(XplorMRParser.Print, 0)

        def Threshold(self):
            return self.getToken(XplorMRParser.Threshold, 0)

        def Reset(self):
            return self.getToken(XplorMRParser.Reset, 0)

        def Type(self):
            return self.getToken(XplorMRParser.Type, 0)

        def Rdc_or_Diff_anis_types(self):
            return self.getToken(XplorMRParser.Rdc_or_Diff_anis_types, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_anis_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAnis_statement" ):
                listener.enterAnis_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAnis_statement" ):
                listener.exitAnis_statement(self)




    def anis_statement(self):

        localctx = XplorMRParser.Anis_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 78, self.RULE_anis_statement)
        try:
            self.state = 852
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [XplorMRParser.Assign]:
                self.enterOuterAlt(localctx, 1)
                self.state = 831
                self.anis_assign()
                pass
            elif token in [XplorMRParser.Classification]:
                self.enterOuterAlt(localctx, 2)
                self.state = 832
                self.match(XplorMRParser.Classification)
                self.state = 833
                self.match(XplorMRParser.Simple_name)
                pass
            elif token in [XplorMRParser.Coefficients]:
                self.enterOuterAlt(localctx, 3)
                self.state = 834
                self.match(XplorMRParser.Coefficients)
                self.state = 835
                self.number_s()
                self.state = 836
                self.number_s()
                self.state = 837
                self.number_s()
                self.state = 838
                self.number_s()
                pass
            elif token in [XplorMRParser.ForceConstant]:
                self.enterOuterAlt(localctx, 4)
                self.state = 840
                self.match(XplorMRParser.ForceConstant)
                self.state = 841
                self.number_s()
                pass
            elif token in [XplorMRParser.Nrestraints]:
                self.enterOuterAlt(localctx, 5)
                self.state = 842
                self.match(XplorMRParser.Nrestraints)
                self.state = 843
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.Potential]:
                self.enterOuterAlt(localctx, 6)
                self.state = 844
                self.match(XplorMRParser.Potential)
                self.state = 845
                self.match(XplorMRParser.Potential_types)
                pass
            elif token in [XplorMRParser.Print]:
                self.enterOuterAlt(localctx, 7)
                self.state = 846
                self.match(XplorMRParser.Print)
                self.state = 847
                self.match(XplorMRParser.Threshold)
                self.state = 848
                self.number_s()
                pass
            elif token in [XplorMRParser.Reset]:
                self.enterOuterAlt(localctx, 8)
                self.state = 849
                self.match(XplorMRParser.Reset)
                pass
            elif token in [XplorMRParser.Type]:
                self.enterOuterAlt(localctx, 9)
                self.state = 850
                self.match(XplorMRParser.Type)
                self.state = 851
                self.match(XplorMRParser.Rdc_or_Diff_anis_types)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Anis_assignContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Assign(self):
            return self.getToken(XplorMRParser.Assign, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.SelectionContext,i)


        def number(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.NumberContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.NumberContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_anis_assign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAnis_assign" ):
                listener.enterAnis_assign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAnis_assign" ):
                listener.exitAnis_assign(self)




    def anis_assign(self):

        localctx = XplorMRParser.Anis_assignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 80, self.RULE_anis_assign)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 854
            self.match(XplorMRParser.Assign)
            self.state = 855
            self.selection()
            self.state = 856
            self.selection()
            self.state = 857
            self.selection()
            self.state = 858
            self.selection()
            self.state = 859
            self.number()
            self.state = 860
            self.number()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Planar_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Group(self):
            return self.getToken(XplorMRParser.Group, 0)

        def End(self):
            return self.getToken(XplorMRParser.End, 0)

        def group_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Group_statementContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Group_statementContext,i)


        def Initialize(self):
            return self.getToken(XplorMRParser.Initialize, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_planar_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPlanar_statement" ):
                listener.enterPlanar_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPlanar_statement" ):
                listener.exitPlanar_statement(self)




    def planar_statement(self):

        localctx = XplorMRParser.Planar_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 82, self.RULE_planar_statement)
        self._la = 0 # Token type
        try:
            self.state = 871
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [XplorMRParser.Group]:
                self.enterOuterAlt(localctx, 1)
                self.state = 862
                self.match(XplorMRParser.Group)
                self.state = 866
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==XplorMRParser.Selection or _la==XplorMRParser.Weight:
                    self.state = 863
                    self.group_statement()
                    self.state = 868
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 869
                self.match(XplorMRParser.End)
                pass
            elif token in [XplorMRParser.Initialize]:
                self.enterOuterAlt(localctx, 2)
                self.state = 870
                self.match(XplorMRParser.Initialize)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Group_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Selection(self):
            return self.getToken(XplorMRParser.Selection, 0)

        def selection(self):
            return self.getTypedRuleContext(XplorMRParser.SelectionContext,0)


        def Equ_op(self):
            return self.getToken(XplorMRParser.Equ_op, 0)

        def Weight(self):
            return self.getToken(XplorMRParser.Weight, 0)

        def number_s(self):
            return self.getTypedRuleContext(XplorMRParser.Number_sContext,0)


        def getRuleIndex(self):
            return XplorMRParser.RULE_group_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGroup_statement" ):
                listener.enterGroup_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGroup_statement" ):
                listener.exitGroup_statement(self)




    def group_statement(self):

        localctx = XplorMRParser.Group_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 84, self.RULE_group_statement)
        self._la = 0 # Token type
        try:
            self.state = 883
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [XplorMRParser.Selection]:
                self.enterOuterAlt(localctx, 1)
                self.state = 873
                self.match(XplorMRParser.Selection)
                self.state = 875
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 874
                    self.match(XplorMRParser.Equ_op)


                self.state = 877
                self.selection()
                pass
            elif token in [XplorMRParser.Weight]:
                self.enterOuterAlt(localctx, 2)
                self.state = 878
                self.match(XplorMRParser.Weight)
                self.state = 880
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 879
                    self.match(XplorMRParser.Equ_op)


                self.state = 882
                self.number_s()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Harmonic_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Exponent(self):
            return self.getToken(XplorMRParser.Exponent, 0)

        def Integer(self):
            return self.getToken(XplorMRParser.Integer, 0)

        def Equ_op(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Equ_op)
            else:
                return self.getToken(XplorMRParser.Equ_op, i)

        def Normal(self):
            return self.getToken(XplorMRParser.Normal, 0)

        def L_paren(self):
            return self.getToken(XplorMRParser.L_paren, 0)

        def R_paren(self):
            return self.getToken(XplorMRParser.R_paren, 0)

        def number_s(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Number_sContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Number_sContext,i)


        def Tail(self):
            return self.getToken(XplorMRParser.Tail, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.SelectionContext,i)


        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Comma)
            else:
                return self.getToken(XplorMRParser.Comma, i)

        def Head(self):
            return self.getToken(XplorMRParser.Head, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_harmonic_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHarmonic_statement" ):
                listener.enterHarmonic_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHarmonic_statement" ):
                listener.exitHarmonic_statement(self)




    def harmonic_statement(self):

        localctx = XplorMRParser.Harmonic_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 86, self.RULE_harmonic_statement)
        self._la = 0 # Token type
        try:
            self.state = 924
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [XplorMRParser.Exponent]:
                self.enterOuterAlt(localctx, 1)
                self.state = 885
                self.match(XplorMRParser.Exponent)
                self.state = 887
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 886
                    self.match(XplorMRParser.Equ_op)


                self.state = 889
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.Normal]:
                self.enterOuterAlt(localctx, 2)
                self.state = 890
                self.match(XplorMRParser.Normal)
                self.state = 892
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 891
                    self.match(XplorMRParser.Equ_op)


                self.state = 894
                self.match(XplorMRParser.L_paren)
                self.state = 920
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [XplorMRParser.Integer, XplorMRParser.Real, XplorMRParser.Symbol_name]:
                    self.state = 895
                    self.number_s()
                    self.state = 897
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==XplorMRParser.Comma:
                        self.state = 896
                        self.match(XplorMRParser.Comma)


                    self.state = 899
                    self.number_s()
                    self.state = 901
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==XplorMRParser.Comma:
                        self.state = 900
                        self.match(XplorMRParser.Comma)


                    self.state = 903
                    self.number_s()
                    pass
                elif token in [XplorMRParser.Tail]:
                    self.state = 905
                    self.match(XplorMRParser.Tail)
                    self.state = 907
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==XplorMRParser.Equ_op:
                        self.state = 906
                        self.match(XplorMRParser.Equ_op)


                    self.state = 909
                    self.selection()
                    self.state = 911
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==XplorMRParser.Comma:
                        self.state = 910
                        self.match(XplorMRParser.Comma)


                    self.state = 918
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==XplorMRParser.Head:
                        self.state = 913
                        self.match(XplorMRParser.Head)
                        self.state = 915
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==XplorMRParser.Equ_op:
                            self.state = 914
                            self.match(XplorMRParser.Equ_op)


                        self.state = 917
                        self.selection()


                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 922
                self.match(XplorMRParser.R_paren)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Harmonic_assignContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Assign(self):
            return self.getToken(XplorMRParser.Assign, 0)

        def selection(self):
            return self.getTypedRuleContext(XplorMRParser.SelectionContext,0)


        def number(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.NumberContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.NumberContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_harmonic_assign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHarmonic_assign" ):
                listener.enterHarmonic_assign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHarmonic_assign" ):
                listener.exitHarmonic_assign(self)




    def harmonic_assign(self):

        localctx = XplorMRParser.Harmonic_assignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 88, self.RULE_harmonic_assign)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 926
            self.match(XplorMRParser.Assign)
            self.state = 927
            self.selection()
            self.state = 928
            self.number()
            self.state = 929
            self.number()
            self.state = 930
            self.number()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Antidistance_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def xadc_assign(self):
            return self.getTypedRuleContext(XplorMRParser.Xadc_assignContext,0)


        def Classification(self):
            return self.getToken(XplorMRParser.Classification, 0)

        def Simple_name(self):
            return self.getToken(XplorMRParser.Simple_name, 0)

        def Expectation(self):
            return self.getToken(XplorMRParser.Expectation, 0)

        def Integer(self):
            return self.getToken(XplorMRParser.Integer, 0)

        def number_s(self):
            return self.getTypedRuleContext(XplorMRParser.Number_sContext,0)


        def ForceConstant(self):
            return self.getToken(XplorMRParser.ForceConstant, 0)

        def Nrestraints(self):
            return self.getToken(XplorMRParser.Nrestraints, 0)

        def Print(self):
            return self.getToken(XplorMRParser.Print, 0)

        def Threshold(self):
            return self.getToken(XplorMRParser.Threshold, 0)

        def All(self):
            return self.getToken(XplorMRParser.All, 0)

        def Reset(self):
            return self.getToken(XplorMRParser.Reset, 0)

        def Size(self):
            return self.getToken(XplorMRParser.Size, 0)

        def Zero(self):
            return self.getToken(XplorMRParser.Zero, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_antidistance_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAntidistance_statement" ):
                listener.enterAntidistance_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAntidistance_statement" ):
                listener.exitAntidistance_statement(self)




    def antidistance_statement(self):

        localctx = XplorMRParser.Antidistance_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 90, self.RULE_antidistance_statement)
        try:
            self.state = 956
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [XplorMRParser.Assign]:
                self.enterOuterAlt(localctx, 1)
                self.state = 932
                self.xadc_assign()
                pass
            elif token in [XplorMRParser.Classification]:
                self.enterOuterAlt(localctx, 2)
                self.state = 933
                self.match(XplorMRParser.Classification)
                self.state = 934
                self.match(XplorMRParser.Simple_name)
                pass
            elif token in [XplorMRParser.Expectation]:
                self.enterOuterAlt(localctx, 3)
                self.state = 935
                self.match(XplorMRParser.Expectation)
                self.state = 936
                self.match(XplorMRParser.Integer)
                self.state = 937
                self.number_s()
                pass
            elif token in [XplorMRParser.ForceConstant]:
                self.enterOuterAlt(localctx, 4)
                self.state = 938
                self.match(XplorMRParser.ForceConstant)
                self.state = 939
                self.number_s()
                pass
            elif token in [XplorMRParser.Nrestraints]:
                self.enterOuterAlt(localctx, 5)
                self.state = 940
                self.match(XplorMRParser.Nrestraints)
                self.state = 941
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.Print]:
                self.enterOuterAlt(localctx, 6)
                self.state = 942
                self.match(XplorMRParser.Print)
                self.state = 943
                self.match(XplorMRParser.Threshold)
                self.state = 944
                self.number_s()
                self.state = 948
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [XplorMRParser.All]:
                    self.state = 945
                    self.match(XplorMRParser.All)
                    pass
                elif token in [XplorMRParser.Classification]:
                    self.state = 946
                    self.match(XplorMRParser.Classification)
                    self.state = 947
                    self.match(XplorMRParser.Simple_name)
                    pass
                else:
                    raise NoViableAltException(self)

                pass
            elif token in [XplorMRParser.Reset]:
                self.enterOuterAlt(localctx, 7)
                self.state = 950
                self.match(XplorMRParser.Reset)
                pass
            elif token in [XplorMRParser.Size]:
                self.enterOuterAlt(localctx, 8)
                self.state = 951
                self.match(XplorMRParser.Size)
                self.state = 952
                self.number_s()
                self.state = 953
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.Zero]:
                self.enterOuterAlt(localctx, 9)
                self.state = 955
                self.match(XplorMRParser.Zero)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Xadc_assignContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Assign(self):
            return self.getToken(XplorMRParser.Assign, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.SelectionContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_xadc_assign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterXadc_assign" ):
                listener.enterXadc_assign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitXadc_assign" ):
                listener.exitXadc_assign(self)




    def xadc_assign(self):

        localctx = XplorMRParser.Xadc_assignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 92, self.RULE_xadc_assign)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 958
            self.match(XplorMRParser.Assign)
            self.state = 959
            self.selection()
            self.state = 960
            self.selection()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Coupling_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def coup_assign(self):
            return self.getTypedRuleContext(XplorMRParser.Coup_assignContext,0)


        def Classification(self):
            return self.getToken(XplorMRParser.Classification, 0)

        def Simple_name(self):
            return self.getToken(XplorMRParser.Simple_name, 0)

        def Coefficients(self):
            return self.getToken(XplorMRParser.Coefficients, 0)

        def number_s(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Number_sContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Number_sContext,i)


        def Cv(self):
            return self.getToken(XplorMRParser.Cv, 0)

        def Integer(self):
            return self.getToken(XplorMRParser.Integer, 0)

        def Equ_op(self):
            return self.getToken(XplorMRParser.Equ_op, 0)

        def DegEnergy(self):
            return self.getToken(XplorMRParser.DegEnergy, 0)

        def ForceConstant(self):
            return self.getToken(XplorMRParser.ForceConstant, 0)

        def Nrestraints(self):
            return self.getToken(XplorMRParser.Nrestraints, 0)

        def Partition(self):
            return self.getToken(XplorMRParser.Partition, 0)

        def Potential(self):
            return self.getToken(XplorMRParser.Potential, 0)

        def Potential_types(self):
            return self.getToken(XplorMRParser.Potential_types, 0)

        def Print(self):
            return self.getToken(XplorMRParser.Print, 0)

        def Threshold(self):
            return self.getToken(XplorMRParser.Threshold, 0)

        def All(self):
            return self.getToken(XplorMRParser.All, 0)

        def Reset(self):
            return self.getToken(XplorMRParser.Reset, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_coupling_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCoupling_statement" ):
                listener.enterCoupling_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCoupling_statement" ):
                listener.exitCoupling_statement(self)




    def coupling_statement(self):

        localctx = XplorMRParser.Coupling_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 94, self.RULE_coupling_statement)
        self._la = 0 # Token type
        try:
            self.state = 1001
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [XplorMRParser.Assign]:
                self.enterOuterAlt(localctx, 1)
                self.state = 962
                self.coup_assign()
                pass
            elif token in [XplorMRParser.Classification]:
                self.enterOuterAlt(localctx, 2)
                self.state = 963
                self.match(XplorMRParser.Classification)
                self.state = 964
                self.match(XplorMRParser.Simple_name)
                pass
            elif token in [XplorMRParser.Coefficients]:
                self.enterOuterAlt(localctx, 3)
                self.state = 965
                self.match(XplorMRParser.Coefficients)
                self.state = 966
                self.number_s()
                self.state = 967
                self.number_s()
                self.state = 968
                self.number_s()
                self.state = 969
                self.number_s()
                pass
            elif token in [XplorMRParser.Cv]:
                self.enterOuterAlt(localctx, 4)
                self.state = 971
                self.match(XplorMRParser.Cv)
                self.state = 973
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 972
                    self.match(XplorMRParser.Equ_op)


                self.state = 975
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.DegEnergy]:
                self.enterOuterAlt(localctx, 5)
                self.state = 976
                self.match(XplorMRParser.DegEnergy)
                self.state = 977
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.ForceConstant]:
                self.enterOuterAlt(localctx, 6)
                self.state = 978
                self.match(XplorMRParser.ForceConstant)
                self.state = 979
                self.number_s()
                self.state = 981
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 178)) & ~0x3f) == 0 and ((1 << (_la - 178)) & ((1 << (XplorMRParser.Integer - 178)) | (1 << (XplorMRParser.Real - 178)) | (1 << (XplorMRParser.Symbol_name - 178)))) != 0):
                    self.state = 980
                    self.number_s()


                pass
            elif token in [XplorMRParser.Nrestraints]:
                self.enterOuterAlt(localctx, 7)
                self.state = 983
                self.match(XplorMRParser.Nrestraints)
                self.state = 984
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.Partition]:
                self.enterOuterAlt(localctx, 8)
                self.state = 985
                self.match(XplorMRParser.Partition)
                self.state = 987
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 986
                    self.match(XplorMRParser.Equ_op)


                self.state = 989
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.Potential]:
                self.enterOuterAlt(localctx, 9)
                self.state = 990
                self.match(XplorMRParser.Potential)
                self.state = 991
                self.match(XplorMRParser.Potential_types)
                pass
            elif token in [XplorMRParser.Print]:
                self.enterOuterAlt(localctx, 10)
                self.state = 992
                self.match(XplorMRParser.Print)
                self.state = 993
                self.match(XplorMRParser.Threshold)
                self.state = 994
                self.number_s()
                self.state = 998
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [XplorMRParser.All]:
                    self.state = 995
                    self.match(XplorMRParser.All)
                    pass
                elif token in [XplorMRParser.Classification]:
                    self.state = 996
                    self.match(XplorMRParser.Classification)
                    self.state = 997
                    self.match(XplorMRParser.Simple_name)
                    pass
                else:
                    raise NoViableAltException(self)

                pass
            elif token in [XplorMRParser.Reset]:
                self.enterOuterAlt(localctx, 11)
                self.state = 1000
                self.match(XplorMRParser.Reset)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Coup_assignContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Assign(self):
            return self.getToken(XplorMRParser.Assign, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.SelectionContext,i)


        def number(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.NumberContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.NumberContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_coup_assign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCoup_assign" ):
                listener.enterCoup_assign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCoup_assign" ):
                listener.exitCoup_assign(self)




    def coup_assign(self):

        localctx = XplorMRParser.Coup_assignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 96, self.RULE_coup_assign)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1003
            self.match(XplorMRParser.Assign)
            self.state = 1004
            self.selection()
            self.state = 1005
            self.selection()
            self.state = 1006
            self.selection()
            self.state = 1007
            self.selection()
            self.state = 1013
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==XplorMRParser.L_paren:
                self.state = 1008
                self.selection()
                self.state = 1009
                self.selection()
                self.state = 1010
                self.selection()
                self.state = 1011
                self.selection()


            self.state = 1015
            self.number()
            self.state = 1016
            self.number()
            self.state = 1020
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 178)) & ~0x3f) == 0 and ((1 << (_la - 178)) & ((1 << (XplorMRParser.Integer - 178)) | (1 << (XplorMRParser.Real - 178)) | (1 << (XplorMRParser.Symbol_name - 178)))) != 0):
                self.state = 1017
                self.number()
                self.state = 1018
                self.number()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Carbon_shift_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def carbon_shift_assign(self):
            return self.getTypedRuleContext(XplorMRParser.Carbon_shift_assignContext,0)


        def Classification(self):
            return self.getToken(XplorMRParser.Classification, 0)

        def Simple_name(self):
            return self.getToken(XplorMRParser.Simple_name, 0)

        def Expectation(self):
            return self.getToken(XplorMRParser.Expectation, 0)

        def Integer(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Integer)
            else:
                return self.getToken(XplorMRParser.Integer, i)

        def number_s(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Number_sContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Number_sContext,i)


        def ForceConstant(self):
            return self.getToken(XplorMRParser.ForceConstant, 0)

        def Nrestraints(self):
            return self.getToken(XplorMRParser.Nrestraints, 0)

        def PhiStep(self):
            return self.getToken(XplorMRParser.PhiStep, 0)

        def PsiStep(self):
            return self.getToken(XplorMRParser.PsiStep, 0)

        def Potential(self):
            return self.getToken(XplorMRParser.Potential, 0)

        def Potential_types(self):
            return self.getToken(XplorMRParser.Potential_types, 0)

        def Print(self):
            return self.getToken(XplorMRParser.Print, 0)

        def Threshold(self):
            return self.getToken(XplorMRParser.Threshold, 0)

        def carbon_shift_rcoil(self):
            return self.getTypedRuleContext(XplorMRParser.Carbon_shift_rcoilContext,0)


        def Reset(self):
            return self.getToken(XplorMRParser.Reset, 0)

        def Zero(self):
            return self.getToken(XplorMRParser.Zero, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_carbon_shift_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCarbon_shift_statement" ):
                listener.enterCarbon_shift_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCarbon_shift_statement" ):
                listener.exitCarbon_shift_statement(self)




    def carbon_shift_statement(self):

        localctx = XplorMRParser.Carbon_shift_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 98, self.RULE_carbon_shift_statement)
        try:
            self.state = 1048
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [XplorMRParser.Assign]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1022
                self.carbon_shift_assign()
                pass
            elif token in [XplorMRParser.Classification]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1023
                self.match(XplorMRParser.Classification)
                self.state = 1024
                self.match(XplorMRParser.Simple_name)
                pass
            elif token in [XplorMRParser.Expectation]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1025
                self.match(XplorMRParser.Expectation)
                self.state = 1026
                self.match(XplorMRParser.Integer)
                self.state = 1027
                self.match(XplorMRParser.Integer)
                self.state = 1028
                self.number_s()
                self.state = 1029
                self.number_s()
                self.state = 1030
                self.number_s()
                pass
            elif token in [XplorMRParser.ForceConstant]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1032
                self.match(XplorMRParser.ForceConstant)
                self.state = 1033
                self.number_s()
                pass
            elif token in [XplorMRParser.Nrestraints]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1034
                self.match(XplorMRParser.Nrestraints)
                self.state = 1035
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.PhiStep]:
                self.enterOuterAlt(localctx, 6)
                self.state = 1036
                self.match(XplorMRParser.PhiStep)
                self.state = 1037
                self.number_s()
                pass
            elif token in [XplorMRParser.PsiStep]:
                self.enterOuterAlt(localctx, 7)
                self.state = 1038
                self.match(XplorMRParser.PsiStep)
                self.state = 1039
                self.number_s()
                pass
            elif token in [XplorMRParser.Potential]:
                self.enterOuterAlt(localctx, 8)
                self.state = 1040
                self.match(XplorMRParser.Potential)
                self.state = 1041
                self.match(XplorMRParser.Potential_types)
                pass
            elif token in [XplorMRParser.Print]:
                self.enterOuterAlt(localctx, 9)
                self.state = 1042
                self.match(XplorMRParser.Print)
                self.state = 1043
                self.match(XplorMRParser.Threshold)
                self.state = 1044
                self.number_s()
                pass
            elif token in [XplorMRParser.Rcoil]:
                self.enterOuterAlt(localctx, 10)
                self.state = 1045
                self.carbon_shift_rcoil()
                pass
            elif token in [XplorMRParser.Reset]:
                self.enterOuterAlt(localctx, 11)
                self.state = 1046
                self.match(XplorMRParser.Reset)
                pass
            elif token in [XplorMRParser.Zero]:
                self.enterOuterAlt(localctx, 12)
                self.state = 1047
                self.match(XplorMRParser.Zero)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Carbon_shift_assignContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Assign(self):
            return self.getToken(XplorMRParser.Assign, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.SelectionContext,i)


        def number(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.NumberContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.NumberContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_carbon_shift_assign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCarbon_shift_assign" ):
                listener.enterCarbon_shift_assign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCarbon_shift_assign" ):
                listener.exitCarbon_shift_assign(self)




    def carbon_shift_assign(self):

        localctx = XplorMRParser.Carbon_shift_assignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 100, self.RULE_carbon_shift_assign)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1050
            self.match(XplorMRParser.Assign)
            self.state = 1051
            self.selection()
            self.state = 1052
            self.selection()
            self.state = 1053
            self.selection()
            self.state = 1054
            self.selection()
            self.state = 1055
            self.selection()
            self.state = 1056
            self.number()
            self.state = 1057
            self.number()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Carbon_shift_rcoilContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Rcoil(self):
            return self.getToken(XplorMRParser.Rcoil, 0)

        def selection(self):
            return self.getTypedRuleContext(XplorMRParser.SelectionContext,0)


        def number_s(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Number_sContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Number_sContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_carbon_shift_rcoil

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCarbon_shift_rcoil" ):
                listener.enterCarbon_shift_rcoil(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCarbon_shift_rcoil" ):
                listener.exitCarbon_shift_rcoil(self)




    def carbon_shift_rcoil(self):

        localctx = XplorMRParser.Carbon_shift_rcoilContext(self, self._ctx, self.state)
        self.enterRule(localctx, 102, self.RULE_carbon_shift_rcoil)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1059
            self.match(XplorMRParser.Rcoil)
            self.state = 1060
            self.selection()
            self.state = 1061
            self.number_s()
            self.state = 1062
            self.number_s()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Proton_shift_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def observed(self):
            return self.getTypedRuleContext(XplorMRParser.ObservedContext,0)


        def proton_shift_rcoil(self):
            return self.getTypedRuleContext(XplorMRParser.Proton_shift_rcoilContext,0)


        def proton_shift_anisotropy(self):
            return self.getTypedRuleContext(XplorMRParser.Proton_shift_anisotropyContext,0)


        def proton_shift_amides(self):
            return self.getTypedRuleContext(XplorMRParser.Proton_shift_amidesContext,0)


        def proton_shift_carbons(self):
            return self.getTypedRuleContext(XplorMRParser.Proton_shift_carbonsContext,0)


        def proton_shift_nitrogens(self):
            return self.getTypedRuleContext(XplorMRParser.Proton_shift_nitrogensContext,0)


        def proton_shift_oxygens(self):
            return self.getTypedRuleContext(XplorMRParser.Proton_shift_oxygensContext,0)


        def proton_shift_ring_atoms(self):
            return self.getTypedRuleContext(XplorMRParser.Proton_shift_ring_atomsContext,0)


        def proton_shift_alphas_and_amides(self):
            return self.getTypedRuleContext(XplorMRParser.Proton_shift_alphas_and_amidesContext,0)


        def Classification(self):
            return self.getToken(XplorMRParser.Classification, 0)

        def Simple_name(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Simple_name)
            else:
                return self.getToken(XplorMRParser.Simple_name, i)

        def Error(self):
            return self.getToken(XplorMRParser.Error, 0)

        def number_s(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Number_sContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Number_sContext,i)


        def DegEnergy(self):
            return self.getToken(XplorMRParser.DegEnergy, 0)

        def Integer(self):
            return self.getToken(XplorMRParser.Integer, 0)

        def ForceConstant(self):
            return self.getToken(XplorMRParser.ForceConstant, 0)

        def Potential(self):
            return self.getToken(XplorMRParser.Potential, 0)

        def Potential_types(self):
            return self.getToken(XplorMRParser.Potential_types, 0)

        def Print(self):
            return self.getToken(XplorMRParser.Print, 0)

        def Threshold(self):
            return self.getToken(XplorMRParser.Threshold, 0)

        def All(self):
            return self.getToken(XplorMRParser.All, 0)

        def Reset(self):
            return self.getToken(XplorMRParser.Reset, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_proton_shift_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProton_shift_statement" ):
                listener.enterProton_shift_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProton_shift_statement" ):
                listener.exitProton_shift_statement(self)




    def proton_shift_statement(self):

        localctx = XplorMRParser.Proton_shift_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 104, self.RULE_proton_shift_statement)
        self._la = 0 # Token type
        try:
            self.state = 1097
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [XplorMRParser.Observed]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1064
                self.observed()
                pass
            elif token in [XplorMRParser.Rcoil]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1065
                self.proton_shift_rcoil()
                pass
            elif token in [XplorMRParser.Anisotropy]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1066
                self.proton_shift_anisotropy()
                pass
            elif token in [XplorMRParser.Amides]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1067
                self.proton_shift_amides()
                pass
            elif token in [XplorMRParser.Carbon]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1068
                self.proton_shift_carbons()
                pass
            elif token in [XplorMRParser.Nitrogens]:
                self.enterOuterAlt(localctx, 6)
                self.state = 1069
                self.proton_shift_nitrogens()
                pass
            elif token in [XplorMRParser.Oxygens]:
                self.enterOuterAlt(localctx, 7)
                self.state = 1070
                self.proton_shift_oxygens()
                pass
            elif token in [XplorMRParser.RingAtoms]:
                self.enterOuterAlt(localctx, 8)
                self.state = 1071
                self.proton_shift_ring_atoms()
                pass
            elif token in [XplorMRParser.AlphasAndAmides]:
                self.enterOuterAlt(localctx, 9)
                self.state = 1072
                self.proton_shift_alphas_and_amides()
                pass
            elif token in [XplorMRParser.Classification]:
                self.enterOuterAlt(localctx, 10)
                self.state = 1073
                self.match(XplorMRParser.Classification)
                self.state = 1074
                self.match(XplorMRParser.Simple_name)
                pass
            elif token in [XplorMRParser.Error]:
                self.enterOuterAlt(localctx, 11)
                self.state = 1075
                self.match(XplorMRParser.Error)
                self.state = 1076
                self.number_s()
                pass
            elif token in [XplorMRParser.DegEnergy]:
                self.enterOuterAlt(localctx, 12)
                self.state = 1077
                self.match(XplorMRParser.DegEnergy)
                self.state = 1078
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.ForceConstant]:
                self.enterOuterAlt(localctx, 13)
                self.state = 1079
                self.match(XplorMRParser.ForceConstant)
                self.state = 1080
                self.number_s()
                self.state = 1082
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 178)) & ~0x3f) == 0 and ((1 << (_la - 178)) & ((1 << (XplorMRParser.Integer - 178)) | (1 << (XplorMRParser.Real - 178)) | (1 << (XplorMRParser.Symbol_name - 178)))) != 0):
                    self.state = 1081
                    self.number_s()


                pass
            elif token in [XplorMRParser.Potential]:
                self.enterOuterAlt(localctx, 14)
                self.state = 1084
                self.match(XplorMRParser.Potential)
                self.state = 1085
                self.match(XplorMRParser.Potential_types)
                pass
            elif token in [XplorMRParser.Print]:
                self.enterOuterAlt(localctx, 15)
                self.state = 1086
                self.match(XplorMRParser.Print)
                self.state = 1087
                self.match(XplorMRParser.Threshold)
                self.state = 1088
                self.number_s()
                self.state = 1092
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [XplorMRParser.All]:
                    self.state = 1089
                    self.match(XplorMRParser.All)
                    pass
                elif token in [XplorMRParser.Classification]:
                    self.state = 1090
                    self.match(XplorMRParser.Classification)
                    self.state = 1091
                    self.match(XplorMRParser.Simple_name)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 1094
                self.match(XplorMRParser.Simple_name)
                pass
            elif token in [XplorMRParser.Reset]:
                self.enterOuterAlt(localctx, 16)
                self.state = 1096
                self.match(XplorMRParser.Reset)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ObservedContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Observed(self):
            return self.getToken(XplorMRParser.Observed, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.SelectionContext,i)


        def number_s(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Number_sContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Number_sContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_observed

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterObserved" ):
                listener.enterObserved(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitObserved" ):
                listener.exitObserved(self)




    def observed(self):

        localctx = XplorMRParser.ObservedContext(self, self._ctx, self.state)
        self.enterRule(localctx, 106, self.RULE_observed)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1099
            self.match(XplorMRParser.Observed)
            self.state = 1100
            self.selection()
            self.state = 1102
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==XplorMRParser.L_paren:
                self.state = 1101
                self.selection()


            self.state = 1104
            self.number_s()
            self.state = 1106
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 178)) & ~0x3f) == 0 and ((1 << (_la - 178)) & ((1 << (XplorMRParser.Integer - 178)) | (1 << (XplorMRParser.Real - 178)) | (1 << (XplorMRParser.Symbol_name - 178)))) != 0):
                self.state = 1105
                self.number_s()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Proton_shift_rcoilContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Rcoil(self):
            return self.getToken(XplorMRParser.Rcoil, 0)

        def selection(self):
            return self.getTypedRuleContext(XplorMRParser.SelectionContext,0)


        def number_s(self):
            return self.getTypedRuleContext(XplorMRParser.Number_sContext,0)


        def getRuleIndex(self):
            return XplorMRParser.RULE_proton_shift_rcoil

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProton_shift_rcoil" ):
                listener.enterProton_shift_rcoil(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProton_shift_rcoil" ):
                listener.exitProton_shift_rcoil(self)




    def proton_shift_rcoil(self):

        localctx = XplorMRParser.Proton_shift_rcoilContext(self, self._ctx, self.state)
        self.enterRule(localctx, 108, self.RULE_proton_shift_rcoil)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1108
            self.match(XplorMRParser.Rcoil)
            self.state = 1109
            self.selection()
            self.state = 1110
            self.number_s()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Proton_shift_anisotropyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Anisotropy(self):
            return self.getToken(XplorMRParser.Anisotropy, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.SelectionContext,i)


        def Simple_name(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Simple_name)
            else:
                return self.getToken(XplorMRParser.Simple_name, i)

        def Logical(self):
            return self.getToken(XplorMRParser.Logical, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_proton_shift_anisotropy

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProton_shift_anisotropy" ):
                listener.enterProton_shift_anisotropy(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProton_shift_anisotropy" ):
                listener.exitProton_shift_anisotropy(self)




    def proton_shift_anisotropy(self):

        localctx = XplorMRParser.Proton_shift_anisotropyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 110, self.RULE_proton_shift_anisotropy)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1112
            self.match(XplorMRParser.Anisotropy)
            self.state = 1113
            self.selection()
            self.state = 1114
            self.selection()
            self.state = 1115
            self.selection()
            self.state = 1116
            self.match(XplorMRParser.Simple_name)
            self.state = 1118
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==XplorMRParser.Logical:
                self.state = 1117
                self.match(XplorMRParser.Logical)


            self.state = 1120
            self.match(XplorMRParser.Simple_name)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Proton_shift_amidesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Amides(self):
            return self.getToken(XplorMRParser.Amides, 0)

        def selection(self):
            return self.getTypedRuleContext(XplorMRParser.SelectionContext,0)


        def getRuleIndex(self):
            return XplorMRParser.RULE_proton_shift_amides

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProton_shift_amides" ):
                listener.enterProton_shift_amides(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProton_shift_amides" ):
                listener.exitProton_shift_amides(self)




    def proton_shift_amides(self):

        localctx = XplorMRParser.Proton_shift_amidesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 112, self.RULE_proton_shift_amides)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1122
            self.match(XplorMRParser.Amides)
            self.state = 1123
            self.selection()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Proton_shift_carbonsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Carbon(self):
            return self.getToken(XplorMRParser.Carbon, 0)

        def selection(self):
            return self.getTypedRuleContext(XplorMRParser.SelectionContext,0)


        def getRuleIndex(self):
            return XplorMRParser.RULE_proton_shift_carbons

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProton_shift_carbons" ):
                listener.enterProton_shift_carbons(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProton_shift_carbons" ):
                listener.exitProton_shift_carbons(self)




    def proton_shift_carbons(self):

        localctx = XplorMRParser.Proton_shift_carbonsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 114, self.RULE_proton_shift_carbons)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1125
            self.match(XplorMRParser.Carbon)
            self.state = 1126
            self.selection()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Proton_shift_nitrogensContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Nitrogens(self):
            return self.getToken(XplorMRParser.Nitrogens, 0)

        def selection(self):
            return self.getTypedRuleContext(XplorMRParser.SelectionContext,0)


        def getRuleIndex(self):
            return XplorMRParser.RULE_proton_shift_nitrogens

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProton_shift_nitrogens" ):
                listener.enterProton_shift_nitrogens(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProton_shift_nitrogens" ):
                listener.exitProton_shift_nitrogens(self)




    def proton_shift_nitrogens(self):

        localctx = XplorMRParser.Proton_shift_nitrogensContext(self, self._ctx, self.state)
        self.enterRule(localctx, 116, self.RULE_proton_shift_nitrogens)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1128
            self.match(XplorMRParser.Nitrogens)
            self.state = 1129
            self.selection()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Proton_shift_oxygensContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Oxygens(self):
            return self.getToken(XplorMRParser.Oxygens, 0)

        def selection(self):
            return self.getTypedRuleContext(XplorMRParser.SelectionContext,0)


        def getRuleIndex(self):
            return XplorMRParser.RULE_proton_shift_oxygens

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProton_shift_oxygens" ):
                listener.enterProton_shift_oxygens(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProton_shift_oxygens" ):
                listener.exitProton_shift_oxygens(self)




    def proton_shift_oxygens(self):

        localctx = XplorMRParser.Proton_shift_oxygensContext(self, self._ctx, self.state)
        self.enterRule(localctx, 118, self.RULE_proton_shift_oxygens)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1131
            self.match(XplorMRParser.Oxygens)
            self.state = 1132
            self.selection()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Proton_shift_ring_atomsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RingAtoms(self):
            return self.getToken(XplorMRParser.RingAtoms, 0)

        def Simple_name(self):
            return self.getToken(XplorMRParser.Simple_name, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.SelectionContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_proton_shift_ring_atoms

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProton_shift_ring_atoms" ):
                listener.enterProton_shift_ring_atoms(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProton_shift_ring_atoms" ):
                listener.exitProton_shift_ring_atoms(self)




    def proton_shift_ring_atoms(self):

        localctx = XplorMRParser.Proton_shift_ring_atomsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 120, self.RULE_proton_shift_ring_atoms)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1134
            self.match(XplorMRParser.RingAtoms)
            self.state = 1135
            self.match(XplorMRParser.Simple_name)
            self.state = 1136
            self.selection()
            self.state = 1137
            self.selection()
            self.state = 1138
            self.selection()
            self.state = 1139
            self.selection()
            self.state = 1140
            self.selection()
            self.state = 1142
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==XplorMRParser.L_paren:
                self.state = 1141
                self.selection()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Proton_shift_alphas_and_amidesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AlphasAndAmides(self):
            return self.getToken(XplorMRParser.AlphasAndAmides, 0)

        def selection(self):
            return self.getTypedRuleContext(XplorMRParser.SelectionContext,0)


        def getRuleIndex(self):
            return XplorMRParser.RULE_proton_shift_alphas_and_amides

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProton_shift_alphas_and_amides" ):
                listener.enterProton_shift_alphas_and_amides(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProton_shift_alphas_and_amides" ):
                listener.exitProton_shift_alphas_and_amides(self)




    def proton_shift_alphas_and_amides(self):

        localctx = XplorMRParser.Proton_shift_alphas_and_amidesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 122, self.RULE_proton_shift_alphas_and_amides)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1144
            self.match(XplorMRParser.AlphasAndAmides)
            self.state = 1145
            self.selection()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Ramachandran_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def rama_assign(self):
            return self.getTypedRuleContext(XplorMRParser.Rama_assignContext,0)


        def Classification(self):
            return self.getToken(XplorMRParser.Classification, 0)

        def Simple_name(self):
            return self.getToken(XplorMRParser.Simple_name, 0)

        def Cutoff(self):
            return self.getToken(XplorMRParser.Cutoff, 0)

        def number_s(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Number_sContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Number_sContext,i)


        def ForceConstant(self):
            return self.getToken(XplorMRParser.ForceConstant, 0)

        def Gaussian(self):
            return self.getToken(XplorMRParser.Gaussian, 0)

        def Nrestraints(self):
            return self.getToken(XplorMRParser.Nrestraints, 0)

        def Integer(self):
            return self.getToken(XplorMRParser.Integer, 0)

        def Phase(self):
            return self.getToken(XplorMRParser.Phase, 0)

        def Print(self):
            return self.getToken(XplorMRParser.Print, 0)

        def Threshold(self):
            return self.getToken(XplorMRParser.Threshold, 0)

        def All(self):
            return self.getToken(XplorMRParser.All, 0)

        def Quartic(self):
            return self.getToken(XplorMRParser.Quartic, 0)

        def Reset(self):
            return self.getToken(XplorMRParser.Reset, 0)

        def Scale(self):
            return self.getToken(XplorMRParser.Scale, 0)

        def Shape(self):
            return self.getToken(XplorMRParser.Shape, 0)

        def Gauss_or_Quart(self):
            return self.getToken(XplorMRParser.Gauss_or_Quart, 0)

        def Size(self):
            return self.getToken(XplorMRParser.Size, 0)

        def Dimensions(self):
            return self.getToken(XplorMRParser.Dimensions, 0)

        def Sort(self):
            return self.getToken(XplorMRParser.Sort, 0)

        def Zero(self):
            return self.getToken(XplorMRParser.Zero, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_ramachandran_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRamachandran_statement" ):
                listener.enterRamachandran_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRamachandran_statement" ):
                listener.exitRamachandran_statement(self)




    def ramachandran_statement(self):

        localctx = XplorMRParser.Ramachandran_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 124, self.RULE_ramachandran_statement)
        self._la = 0 # Token type
        try:
            self.state = 1249
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [XplorMRParser.Assign]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1147
                self.rama_assign()
                pass
            elif token in [XplorMRParser.Classification]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1148
                self.match(XplorMRParser.Classification)
                self.state = 1149
                self.match(XplorMRParser.Simple_name)
                pass
            elif token in [XplorMRParser.Cutoff]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1150
                self.match(XplorMRParser.Cutoff)
                self.state = 1151
                self.number_s()
                pass
            elif token in [XplorMRParser.ForceConstant]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1152
                self.match(XplorMRParser.ForceConstant)
                self.state = 1153
                self.number_s()
                pass
            elif token in [XplorMRParser.Gaussian]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1154
                self.match(XplorMRParser.Gaussian)
                self.state = 1155
                self.number_s()
                self.state = 1156
                self.number_s()
                self.state = 1157
                self.number_s()
                self.state = 1162
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,98,self._ctx)
                if la_ == 1:
                    self.state = 1158
                    self.number_s()
                    self.state = 1159
                    self.number_s()
                    self.state = 1160
                    self.number_s()


                self.state = 1168
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,99,self._ctx)
                if la_ == 1:
                    self.state = 1164
                    self.number_s()
                    self.state = 1165
                    self.number_s()
                    self.state = 1166
                    self.number_s()


                self.state = 1174
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 178)) & ~0x3f) == 0 and ((1 << (_la - 178)) & ((1 << (XplorMRParser.Integer - 178)) | (1 << (XplorMRParser.Real - 178)) | (1 << (XplorMRParser.Symbol_name - 178)))) != 0):
                    self.state = 1170
                    self.number_s()
                    self.state = 1171
                    self.number_s()
                    self.state = 1172
                    self.number_s()


                pass
            elif token in [XplorMRParser.Nrestraints]:
                self.enterOuterAlt(localctx, 6)
                self.state = 1176
                self.match(XplorMRParser.Nrestraints)
                self.state = 1177
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.Phase]:
                self.enterOuterAlt(localctx, 7)
                self.state = 1178
                self.match(XplorMRParser.Phase)
                self.state = 1179
                self.number_s()
                self.state = 1180
                self.number_s()
                self.state = 1181
                self.number_s()
                self.state = 1186
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,101,self._ctx)
                if la_ == 1:
                    self.state = 1182
                    self.number_s()
                    self.state = 1183
                    self.number_s()
                    self.state = 1184
                    self.number_s()


                self.state = 1192
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,102,self._ctx)
                if la_ == 1:
                    self.state = 1188
                    self.number_s()
                    self.state = 1189
                    self.number_s()
                    self.state = 1190
                    self.number_s()


                self.state = 1198
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 178)) & ~0x3f) == 0 and ((1 << (_la - 178)) & ((1 << (XplorMRParser.Integer - 178)) | (1 << (XplorMRParser.Real - 178)) | (1 << (XplorMRParser.Symbol_name - 178)))) != 0):
                    self.state = 1194
                    self.number_s()
                    self.state = 1195
                    self.number_s()
                    self.state = 1196
                    self.number_s()


                pass
            elif token in [XplorMRParser.Print]:
                self.enterOuterAlt(localctx, 8)
                self.state = 1200
                self.match(XplorMRParser.Print)
                self.state = 1201
                self.match(XplorMRParser.Threshold)
                self.state = 1202
                self.number_s()
                self.state = 1206
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [XplorMRParser.All]:
                    self.state = 1203
                    self.match(XplorMRParser.All)
                    pass
                elif token in [XplorMRParser.Classification]:
                    self.state = 1204
                    self.match(XplorMRParser.Classification)
                    self.state = 1205
                    self.match(XplorMRParser.Simple_name)
                    pass
                else:
                    raise NoViableAltException(self)

                pass
            elif token in [XplorMRParser.Quartic]:
                self.enterOuterAlt(localctx, 9)
                self.state = 1208
                self.match(XplorMRParser.Quartic)
                self.state = 1209
                self.number_s()
                self.state = 1210
                self.number_s()
                self.state = 1211
                self.number_s()
                self.state = 1216
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,105,self._ctx)
                if la_ == 1:
                    self.state = 1212
                    self.number_s()
                    self.state = 1213
                    self.number_s()
                    self.state = 1214
                    self.number_s()


                self.state = 1222
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,106,self._ctx)
                if la_ == 1:
                    self.state = 1218
                    self.number_s()
                    self.state = 1219
                    self.number_s()
                    self.state = 1220
                    self.number_s()


                self.state = 1228
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 178)) & ~0x3f) == 0 and ((1 << (_la - 178)) & ((1 << (XplorMRParser.Integer - 178)) | (1 << (XplorMRParser.Real - 178)) | (1 << (XplorMRParser.Symbol_name - 178)))) != 0):
                    self.state = 1224
                    self.number_s()
                    self.state = 1225
                    self.number_s()
                    self.state = 1226
                    self.number_s()


                pass
            elif token in [XplorMRParser.Reset]:
                self.enterOuterAlt(localctx, 10)
                self.state = 1230
                self.match(XplorMRParser.Reset)
                pass
            elif token in [XplorMRParser.Scale]:
                self.enterOuterAlt(localctx, 11)
                self.state = 1231
                self.match(XplorMRParser.Scale)
                self.state = 1232
                self.number_s()
                pass
            elif token in [XplorMRParser.Shape]:
                self.enterOuterAlt(localctx, 12)
                self.state = 1233
                self.match(XplorMRParser.Shape)
                self.state = 1234
                self.match(XplorMRParser.Gauss_or_Quart)
                pass
            elif token in [XplorMRParser.Size]:
                self.enterOuterAlt(localctx, 13)
                self.state = 1235
                self.match(XplorMRParser.Size)
                self.state = 1236
                self.match(XplorMRParser.Dimensions)
                self.state = 1237
                self.number_s()
                self.state = 1239
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,108,self._ctx)
                if la_ == 1:
                    self.state = 1238
                    self.number_s()


                self.state = 1242
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,109,self._ctx)
                if la_ == 1:
                    self.state = 1241
                    self.number_s()


                self.state = 1245
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 178)) & ~0x3f) == 0 and ((1 << (_la - 178)) & ((1 << (XplorMRParser.Integer - 178)) | (1 << (XplorMRParser.Real - 178)) | (1 << (XplorMRParser.Symbol_name - 178)))) != 0):
                    self.state = 1244
                    self.number_s()


                pass
            elif token in [XplorMRParser.Sort]:
                self.enterOuterAlt(localctx, 14)
                self.state = 1247
                self.match(XplorMRParser.Sort)
                pass
            elif token in [XplorMRParser.Zero]:
                self.enterOuterAlt(localctx, 15)
                self.state = 1248
                self.match(XplorMRParser.Zero)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Rama_assignContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Assign(self):
            return self.getToken(XplorMRParser.Assign, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.SelectionContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_rama_assign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRama_assign" ):
                listener.enterRama_assign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRama_assign" ):
                listener.exitRama_assign(self)




    def rama_assign(self):

        localctx = XplorMRParser.Rama_assignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 126, self.RULE_rama_assign)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1251
            self.match(XplorMRParser.Assign)
            self.state = 1252
            self.selection()
            self.state = 1253
            self.selection()
            self.state = 1254
            self.selection()
            self.state = 1255
            self.selection()
            self.state = 1261
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,112,self._ctx)
            if la_ == 1:
                self.state = 1256
                self.selection()
                self.state = 1257
                self.selection()
                self.state = 1258
                self.selection()
                self.state = 1259
                self.selection()


            self.state = 1268
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,113,self._ctx)
            if la_ == 1:
                self.state = 1263
                self.selection()
                self.state = 1264
                self.selection()
                self.state = 1265
                self.selection()
                self.state = 1266
                self.selection()


            self.state = 1275
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==XplorMRParser.L_paren:
                self.state = 1270
                self.selection()
                self.state = 1271
                self.selection()
                self.state = 1272
                self.selection()
                self.state = 1273
                self.selection()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Collapse_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def coll_assign(self):
            return self.getTypedRuleContext(XplorMRParser.Coll_assignContext,0)


        def Scale(self):
            return self.getToken(XplorMRParser.Scale, 0)

        def number_s(self):
            return self.getTypedRuleContext(XplorMRParser.Number_sContext,0)


        def Print(self):
            return self.getToken(XplorMRParser.Print, 0)

        def Reset(self):
            return self.getToken(XplorMRParser.Reset, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_collapse_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCollapse_statement" ):
                listener.enterCollapse_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCollapse_statement" ):
                listener.exitCollapse_statement(self)




    def collapse_statement(self):

        localctx = XplorMRParser.Collapse_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 128, self.RULE_collapse_statement)
        try:
            self.state = 1282
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [XplorMRParser.Assign]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1277
                self.coll_assign()
                pass
            elif token in [XplorMRParser.Scale]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1278
                self.match(XplorMRParser.Scale)
                self.state = 1279
                self.number_s()
                pass
            elif token in [XplorMRParser.Print]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1280
                self.match(XplorMRParser.Print)
                pass
            elif token in [XplorMRParser.Reset]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1281
                self.match(XplorMRParser.Reset)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Coll_assignContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Assign(self):
            return self.getToken(XplorMRParser.Assign, 0)

        def selection(self):
            return self.getTypedRuleContext(XplorMRParser.SelectionContext,0)


        def number(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.NumberContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.NumberContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_coll_assign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColl_assign" ):
                listener.enterColl_assign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColl_assign" ):
                listener.exitColl_assign(self)




    def coll_assign(self):

        localctx = XplorMRParser.Coll_assignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 130, self.RULE_coll_assign)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1284
            self.match(XplorMRParser.Assign)
            self.state = 1285
            self.selection()
            self.state = 1286
            self.number()
            self.state = 1287
            self.number()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Diffusion_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def dani_assign(self):
            return self.getTypedRuleContext(XplorMRParser.Dani_assignContext,0)


        def Classification(self):
            return self.getToken(XplorMRParser.Classification, 0)

        def Simple_name(self):
            return self.getToken(XplorMRParser.Simple_name, 0)

        def Coefficients(self):
            return self.getToken(XplorMRParser.Coefficients, 0)

        def number_s(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Number_sContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Number_sContext,i)


        def ForceConstant(self):
            return self.getToken(XplorMRParser.ForceConstant, 0)

        def Nrestraints(self):
            return self.getToken(XplorMRParser.Nrestraints, 0)

        def Integer(self):
            return self.getToken(XplorMRParser.Integer, 0)

        def Potential(self):
            return self.getToken(XplorMRParser.Potential, 0)

        def Potential_types(self):
            return self.getToken(XplorMRParser.Potential_types, 0)

        def Print(self):
            return self.getToken(XplorMRParser.Print, 0)

        def Threshold(self):
            return self.getToken(XplorMRParser.Threshold, 0)

        def Reset(self):
            return self.getToken(XplorMRParser.Reset, 0)

        def Type(self):
            return self.getToken(XplorMRParser.Type, 0)

        def Rdc_or_Diff_anis_types(self):
            return self.getToken(XplorMRParser.Rdc_or_Diff_anis_types, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_diffusion_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDiffusion_statement" ):
                listener.enterDiffusion_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDiffusion_statement" ):
                listener.exitDiffusion_statement(self)




    def diffusion_statement(self):

        localctx = XplorMRParser.Diffusion_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 132, self.RULE_diffusion_statement)
        try:
            self.state = 1311
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [XplorMRParser.Assign]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1289
                self.dani_assign()
                pass
            elif token in [XplorMRParser.Classification]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1290
                self.match(XplorMRParser.Classification)
                self.state = 1291
                self.match(XplorMRParser.Simple_name)
                pass
            elif token in [XplorMRParser.Coefficients]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1292
                self.match(XplorMRParser.Coefficients)
                self.state = 1293
                self.number_s()
                self.state = 1294
                self.number_s()
                self.state = 1295
                self.number_s()
                self.state = 1296
                self.number_s()
                self.state = 1297
                self.number_s()
                pass
            elif token in [XplorMRParser.ForceConstant]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1299
                self.match(XplorMRParser.ForceConstant)
                self.state = 1300
                self.number_s()
                pass
            elif token in [XplorMRParser.Nrestraints]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1301
                self.match(XplorMRParser.Nrestraints)
                self.state = 1302
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.Potential]:
                self.enterOuterAlt(localctx, 6)
                self.state = 1303
                self.match(XplorMRParser.Potential)
                self.state = 1304
                self.match(XplorMRParser.Potential_types)
                pass
            elif token in [XplorMRParser.Print]:
                self.enterOuterAlt(localctx, 7)
                self.state = 1305
                self.match(XplorMRParser.Print)
                self.state = 1306
                self.match(XplorMRParser.Threshold)
                self.state = 1307
                self.number_s()
                pass
            elif token in [XplorMRParser.Reset]:
                self.enterOuterAlt(localctx, 8)
                self.state = 1308
                self.match(XplorMRParser.Reset)
                pass
            elif token in [XplorMRParser.Type]:
                self.enterOuterAlt(localctx, 9)
                self.state = 1309
                self.match(XplorMRParser.Type)
                self.state = 1310
                self.match(XplorMRParser.Rdc_or_Diff_anis_types)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Dani_assignContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Assign(self):
            return self.getToken(XplorMRParser.Assign, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.SelectionContext,i)


        def number(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.NumberContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.NumberContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_dani_assign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDani_assign" ):
                listener.enterDani_assign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDani_assign" ):
                listener.exitDani_assign(self)




    def dani_assign(self):

        localctx = XplorMRParser.Dani_assignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 134, self.RULE_dani_assign)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1313
            self.match(XplorMRParser.Assign)
            self.state = 1314
            self.selection()
            self.state = 1315
            self.selection()
            self.state = 1316
            self.selection()
            self.state = 1317
            self.selection()
            self.state = 1318
            self.selection()
            self.state = 1319
            self.selection()
            self.state = 1320
            self.number()
            self.state = 1321
            self.number()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Orientation_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def orie_assign(self):
            return self.getTypedRuleContext(XplorMRParser.Orie_assignContext,0)


        def Classification(self):
            return self.getToken(XplorMRParser.Classification, 0)

        def Simple_name(self):
            return self.getToken(XplorMRParser.Simple_name, 0)

        def Cutoff(self):
            return self.getToken(XplorMRParser.Cutoff, 0)

        def number_s(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Number_sContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Number_sContext,i)


        def Height(self):
            return self.getToken(XplorMRParser.Height, 0)

        def ForceConstant(self):
            return self.getToken(XplorMRParser.ForceConstant, 0)

        def Gaussian(self):
            return self.getToken(XplorMRParser.Gaussian, 0)

        def MaxGaussians(self):
            return self.getToken(XplorMRParser.MaxGaussians, 0)

        def Integer(self):
            return self.getToken(XplorMRParser.Integer, 0)

        def NewGaussian(self):
            return self.getToken(XplorMRParser.NewGaussian, 0)

        def Nrestraints(self):
            return self.getToken(XplorMRParser.Nrestraints, 0)

        def Print(self):
            return self.getToken(XplorMRParser.Print, 0)

        def Threshold(self):
            return self.getToken(XplorMRParser.Threshold, 0)

        def All(self):
            return self.getToken(XplorMRParser.All, 0)

        def Quartic(self):
            return self.getToken(XplorMRParser.Quartic, 0)

        def Reset(self):
            return self.getToken(XplorMRParser.Reset, 0)

        def Residue(self):
            return self.getToken(XplorMRParser.Residue, 0)

        def Size(self):
            return self.getToken(XplorMRParser.Size, 0)

        def Zero(self):
            return self.getToken(XplorMRParser.Zero, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_orientation_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOrientation_statement" ):
                listener.enterOrientation_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOrientation_statement" ):
                listener.exitOrientation_statement(self)




    def orientation_statement(self):

        localctx = XplorMRParser.Orientation_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 136, self.RULE_orientation_statement)
        try:
            self.state = 1380
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [XplorMRParser.Assign]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1323
                self.orie_assign()
                pass
            elif token in [XplorMRParser.Classification]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1324
                self.match(XplorMRParser.Classification)
                self.state = 1325
                self.match(XplorMRParser.Simple_name)
                pass
            elif token in [XplorMRParser.Cutoff]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1326
                self.match(XplorMRParser.Cutoff)
                self.state = 1327
                self.number_s()
                pass
            elif token in [XplorMRParser.Height]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1328
                self.match(XplorMRParser.Height)
                self.state = 1329
                self.number_s()
                pass
            elif token in [XplorMRParser.ForceConstant]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1330
                self.match(XplorMRParser.ForceConstant)
                self.state = 1331
                self.number_s()
                pass
            elif token in [XplorMRParser.Gaussian]:
                self.enterOuterAlt(localctx, 6)
                self.state = 1332
                self.match(XplorMRParser.Gaussian)
                self.state = 1333
                self.number_s()
                self.state = 1334
                self.number_s()
                self.state = 1335
                self.number_s()
                self.state = 1336
                self.number_s()
                self.state = 1337
                self.number_s()
                self.state = 1338
                self.number_s()
                self.state = 1339
                self.number_s()
                pass
            elif token in [XplorMRParser.MaxGaussians]:
                self.enterOuterAlt(localctx, 7)
                self.state = 1341
                self.match(XplorMRParser.MaxGaussians)
                self.state = 1342
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.NewGaussian]:
                self.enterOuterAlt(localctx, 8)
                self.state = 1343
                self.match(XplorMRParser.NewGaussian)
                self.state = 1344
                self.number_s()
                self.state = 1345
                self.number_s()
                self.state = 1346
                self.number_s()
                self.state = 1347
                self.number_s()
                self.state = 1348
                self.number_s()
                self.state = 1349
                self.number_s()
                self.state = 1350
                self.number_s()
                self.state = 1351
                self.number_s()
                pass
            elif token in [XplorMRParser.Nrestraints]:
                self.enterOuterAlt(localctx, 9)
                self.state = 1353
                self.match(XplorMRParser.Nrestraints)
                self.state = 1354
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.Print]:
                self.enterOuterAlt(localctx, 10)
                self.state = 1355
                self.match(XplorMRParser.Print)
                self.state = 1356
                self.match(XplorMRParser.Threshold)
                self.state = 1357
                self.number_s()
                self.state = 1361
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [XplorMRParser.All]:
                    self.state = 1358
                    self.match(XplorMRParser.All)
                    pass
                elif token in [XplorMRParser.Classification]:
                    self.state = 1359
                    self.match(XplorMRParser.Classification)
                    self.state = 1360
                    self.match(XplorMRParser.Simple_name)
                    pass
                else:
                    raise NoViableAltException(self)

                pass
            elif token in [XplorMRParser.Quartic]:
                self.enterOuterAlt(localctx, 11)
                self.state = 1363
                self.match(XplorMRParser.Quartic)
                self.state = 1364
                self.number_s()
                self.state = 1365
                self.number_s()
                self.state = 1366
                self.number_s()
                self.state = 1367
                self.number_s()
                self.state = 1368
                self.number_s()
                self.state = 1369
                self.number_s()
                self.state = 1370
                self.number_s()
                pass
            elif token in [XplorMRParser.Reset]:
                self.enterOuterAlt(localctx, 12)
                self.state = 1372
                self.match(XplorMRParser.Reset)
                pass
            elif token in [XplorMRParser.Residue]:
                self.enterOuterAlt(localctx, 13)
                self.state = 1373
                self.match(XplorMRParser.Residue)
                self.state = 1374
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.Size]:
                self.enterOuterAlt(localctx, 14)
                self.state = 1375
                self.match(XplorMRParser.Size)
                self.state = 1376
                self.number_s()
                self.state = 1377
                self.number_s()
                pass
            elif token in [XplorMRParser.Zero]:
                self.enterOuterAlt(localctx, 15)
                self.state = 1379
                self.match(XplorMRParser.Zero)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Orie_assignContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Assign(self):
            return self.getToken(XplorMRParser.Assign, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.SelectionContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_orie_assign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOrie_assign" ):
                listener.enterOrie_assign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOrie_assign" ):
                listener.exitOrie_assign(self)




    def orie_assign(self):

        localctx = XplorMRParser.Orie_assignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 138, self.RULE_orie_assign)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1382
            self.match(XplorMRParser.Assign)
            self.state = 1383
            self.selection()
            self.state = 1384
            self.selection()
            self.state = 1385
            self.selection()
            self.state = 1386
            self.selection()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Csa_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def csa_assign(self):
            return self.getTypedRuleContext(XplorMRParser.Csa_assignContext,0)


        def Classification(self):
            return self.getToken(XplorMRParser.Classification, 0)

        def Simple_name(self):
            return self.getToken(XplorMRParser.Simple_name, 0)

        def Scale(self):
            return self.getToken(XplorMRParser.Scale, 0)

        def number_s(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Number_sContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Number_sContext,i)


        def Type(self):
            return self.getToken(XplorMRParser.Type, 0)

        def Csa_types(self):
            return self.getToken(XplorMRParser.Csa_types, 0)

        def Coefficients(self):
            return self.getToken(XplorMRParser.Coefficients, 0)

        def Sigma(self):
            return self.getToken(XplorMRParser.Sigma, 0)

        def ForceConstant(self):
            return self.getToken(XplorMRParser.ForceConstant, 0)

        def Nrestraints(self):
            return self.getToken(XplorMRParser.Nrestraints, 0)

        def Integer(self):
            return self.getToken(XplorMRParser.Integer, 0)

        def Potential(self):
            return self.getToken(XplorMRParser.Potential, 0)

        def Potential_types(self):
            return self.getToken(XplorMRParser.Potential_types, 0)

        def Print(self):
            return self.getToken(XplorMRParser.Print, 0)

        def Threshold(self):
            return self.getToken(XplorMRParser.Threshold, 0)

        def Reset(self):
            return self.getToken(XplorMRParser.Reset, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_csa_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCsa_statement" ):
                listener.enterCsa_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCsa_statement" ):
                listener.exitCsa_statement(self)




    def csa_statement(self):

        localctx = XplorMRParser.Csa_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 140, self.RULE_csa_statement)
        try:
            self.state = 1415
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [XplorMRParser.Assign]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1388
                self.csa_assign()
                pass
            elif token in [XplorMRParser.Classification]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1389
                self.match(XplorMRParser.Classification)
                self.state = 1390
                self.match(XplorMRParser.Simple_name)
                pass
            elif token in [XplorMRParser.Scale]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1391
                self.match(XplorMRParser.Scale)
                self.state = 1392
                self.number_s()
                pass
            elif token in [XplorMRParser.Type]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1393
                self.match(XplorMRParser.Type)
                self.state = 1394
                self.match(XplorMRParser.Csa_types)
                pass
            elif token in [XplorMRParser.Coefficients]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1395
                self.match(XplorMRParser.Coefficients)
                self.state = 1396
                self.number_s()
                self.state = 1397
                self.number_s()
                self.state = 1398
                self.number_s()
                pass
            elif token in [XplorMRParser.Sigma]:
                self.enterOuterAlt(localctx, 6)
                self.state = 1400
                self.match(XplorMRParser.Sigma)
                self.state = 1401
                self.number_s()
                self.state = 1402
                self.number_s()
                self.state = 1403
                self.number_s()
                pass
            elif token in [XplorMRParser.ForceConstant]:
                self.enterOuterAlt(localctx, 7)
                self.state = 1405
                self.match(XplorMRParser.ForceConstant)
                self.state = 1406
                self.number_s()
                pass
            elif token in [XplorMRParser.Nrestraints]:
                self.enterOuterAlt(localctx, 8)
                self.state = 1407
                self.match(XplorMRParser.Nrestraints)
                self.state = 1408
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.Potential]:
                self.enterOuterAlt(localctx, 9)
                self.state = 1409
                self.match(XplorMRParser.Potential)
                self.state = 1410
                self.match(XplorMRParser.Potential_types)
                pass
            elif token in [XplorMRParser.Print]:
                self.enterOuterAlt(localctx, 10)
                self.state = 1411
                self.match(XplorMRParser.Print)
                self.state = 1412
                self.match(XplorMRParser.Threshold)
                self.state = 1413
                self.number_s()
                pass
            elif token in [XplorMRParser.Reset]:
                self.enterOuterAlt(localctx, 11)
                self.state = 1414
                self.match(XplorMRParser.Reset)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Csa_assignContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Assign(self):
            return self.getToken(XplorMRParser.Assign, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.SelectionContext,i)


        def number(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.NumberContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.NumberContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_csa_assign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCsa_assign" ):
                listener.enterCsa_assign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCsa_assign" ):
                listener.exitCsa_assign(self)




    def csa_assign(self):

        localctx = XplorMRParser.Csa_assignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 142, self.RULE_csa_assign)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1417
            self.match(XplorMRParser.Assign)
            self.state = 1418
            self.selection()
            self.state = 1419
            self.selection()
            self.state = 1420
            self.selection()
            self.state = 1421
            self.selection()
            self.state = 1422
            self.selection()
            self.state = 1423
            self.selection()
            self.state = 1424
            self.selection()
            self.state = 1425
            self.number()
            self.state = 1426
            self.number()
            self.state = 1428
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 178)) & ~0x3f) == 0 and ((1 << (_la - 178)) & ((1 << (XplorMRParser.Integer - 178)) | (1 << (XplorMRParser.Real - 178)) | (1 << (XplorMRParser.Symbol_name - 178)))) != 0):
                self.state = 1427
                self.number()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pcsa_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def csa_assign(self):
            return self.getTypedRuleContext(XplorMRParser.Csa_assignContext,0)


        def Classification(self):
            return self.getToken(XplorMRParser.Classification, 0)

        def Simple_name(self):
            return self.getToken(XplorMRParser.Simple_name, 0)

        def Scale(self):
            return self.getToken(XplorMRParser.Scale, 0)

        def number_s(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Number_sContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Number_sContext,i)


        def Coefficients(self):
            return self.getToken(XplorMRParser.Coefficients, 0)

        def Sigma(self):
            return self.getToken(XplorMRParser.Sigma, 0)

        def ForceConstant(self):
            return self.getToken(XplorMRParser.ForceConstant, 0)

        def Nrestraints(self):
            return self.getToken(XplorMRParser.Nrestraints, 0)

        def Integer(self):
            return self.getToken(XplorMRParser.Integer, 0)

        def Potential(self):
            return self.getToken(XplorMRParser.Potential, 0)

        def Potential_types(self):
            return self.getToken(XplorMRParser.Potential_types, 0)

        def Print(self):
            return self.getToken(XplorMRParser.Print, 0)

        def Threshold(self):
            return self.getToken(XplorMRParser.Threshold, 0)

        def Reset(self):
            return self.getToken(XplorMRParser.Reset, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_pcsa_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPcsa_statement" ):
                listener.enterPcsa_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPcsa_statement" ):
                listener.exitPcsa_statement(self)




    def pcsa_statement(self):

        localctx = XplorMRParser.Pcsa_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 144, self.RULE_pcsa_statement)
        try:
            self.state = 1456
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [XplorMRParser.Assign]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1430
                self.csa_assign()
                pass
            elif token in [XplorMRParser.Classification]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1431
                self.match(XplorMRParser.Classification)
                self.state = 1432
                self.match(XplorMRParser.Simple_name)
                pass
            elif token in [XplorMRParser.Scale]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1433
                self.match(XplorMRParser.Scale)
                self.state = 1434
                self.number_s()
                pass
            elif token in [XplorMRParser.Coefficients]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1435
                self.match(XplorMRParser.Coefficients)
                self.state = 1436
                self.number_s()
                self.state = 1437
                self.number_s()
                self.state = 1438
                self.number_s()
                pass
            elif token in [XplorMRParser.Sigma]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1440
                self.match(XplorMRParser.Sigma)
                self.state = 1441
                self.number_s()
                self.state = 1442
                self.number_s()
                self.state = 1443
                self.number_s()
                self.state = 1444
                self.number_s()
                pass
            elif token in [XplorMRParser.ForceConstant]:
                self.enterOuterAlt(localctx, 6)
                self.state = 1446
                self.match(XplorMRParser.ForceConstant)
                self.state = 1447
                self.number_s()
                pass
            elif token in [XplorMRParser.Nrestraints]:
                self.enterOuterAlt(localctx, 7)
                self.state = 1448
                self.match(XplorMRParser.Nrestraints)
                self.state = 1449
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.Potential]:
                self.enterOuterAlt(localctx, 8)
                self.state = 1450
                self.match(XplorMRParser.Potential)
                self.state = 1451
                self.match(XplorMRParser.Potential_types)
                pass
            elif token in [XplorMRParser.Print]:
                self.enterOuterAlt(localctx, 9)
                self.state = 1452
                self.match(XplorMRParser.Print)
                self.state = 1453
                self.match(XplorMRParser.Threshold)
                self.state = 1454
                self.number_s()
                pass
            elif token in [XplorMRParser.Reset]:
                self.enterOuterAlt(localctx, 10)
                self.state = 1455
                self.match(XplorMRParser.Reset)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class One_bond_coupling_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def one_bond_assign(self):
            return self.getTypedRuleContext(XplorMRParser.One_bond_assignContext,0)


        def Classification(self):
            return self.getToken(XplorMRParser.Classification, 0)

        def Simple_name(self):
            return self.getToken(XplorMRParser.Simple_name, 0)

        def Coefficients(self):
            return self.getToken(XplorMRParser.Coefficients, 0)

        def number_s(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Number_sContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Number_sContext,i)


        def ForceConstant(self):
            return self.getToken(XplorMRParser.ForceConstant, 0)

        def Nrestraints(self):
            return self.getToken(XplorMRParser.Nrestraints, 0)

        def Integer(self):
            return self.getToken(XplorMRParser.Integer, 0)

        def Potential(self):
            return self.getToken(XplorMRParser.Potential, 0)

        def Potential_types(self):
            return self.getToken(XplorMRParser.Potential_types, 0)

        def Print(self):
            return self.getToken(XplorMRParser.Print, 0)

        def Threshold(self):
            return self.getToken(XplorMRParser.Threshold, 0)

        def Reset(self):
            return self.getToken(XplorMRParser.Reset, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_one_bond_coupling_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOne_bond_coupling_statement" ):
                listener.enterOne_bond_coupling_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOne_bond_coupling_statement" ):
                listener.exitOne_bond_coupling_statement(self)




    def one_bond_coupling_statement(self):

        localctx = XplorMRParser.One_bond_coupling_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 146, self.RULE_one_bond_coupling_statement)
        try:
            self.state = 1480
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [XplorMRParser.Assign]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1458
                self.one_bond_assign()
                pass
            elif token in [XplorMRParser.Classification]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1459
                self.match(XplorMRParser.Classification)
                self.state = 1460
                self.match(XplorMRParser.Simple_name)
                pass
            elif token in [XplorMRParser.Coefficients]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1461
                self.match(XplorMRParser.Coefficients)
                self.state = 1462
                self.number_s()
                self.state = 1463
                self.number_s()
                self.state = 1464
                self.number_s()
                self.state = 1465
                self.number_s()
                self.state = 1466
                self.number_s()
                self.state = 1467
                self.number_s()
                self.state = 1468
                self.number_s()
                pass
            elif token in [XplorMRParser.ForceConstant]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1470
                self.match(XplorMRParser.ForceConstant)
                self.state = 1471
                self.number_s()
                pass
            elif token in [XplorMRParser.Nrestraints]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1472
                self.match(XplorMRParser.Nrestraints)
                self.state = 1473
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.Potential]:
                self.enterOuterAlt(localctx, 6)
                self.state = 1474
                self.match(XplorMRParser.Potential)
                self.state = 1475
                self.match(XplorMRParser.Potential_types)
                pass
            elif token in [XplorMRParser.Print]:
                self.enterOuterAlt(localctx, 7)
                self.state = 1476
                self.match(XplorMRParser.Print)
                self.state = 1477
                self.match(XplorMRParser.Threshold)
                self.state = 1478
                self.number_s()
                pass
            elif token in [XplorMRParser.Reset]:
                self.enterOuterAlt(localctx, 8)
                self.state = 1479
                self.match(XplorMRParser.Reset)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class One_bond_assignContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Assign(self):
            return self.getToken(XplorMRParser.Assign, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.SelectionContext,i)


        def number(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.NumberContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.NumberContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_one_bond_assign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOne_bond_assign" ):
                listener.enterOne_bond_assign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOne_bond_assign" ):
                listener.exitOne_bond_assign(self)




    def one_bond_assign(self):

        localctx = XplorMRParser.One_bond_assignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 148, self.RULE_one_bond_assign)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1482
            self.match(XplorMRParser.Assign)
            self.state = 1483
            self.selection()
            self.state = 1484
            self.selection()
            self.state = 1485
            self.selection()
            self.state = 1486
            self.selection()
            self.state = 1487
            self.selection()
            self.state = 1488
            self.selection()
            self.state = 1489
            self.selection()
            self.state = 1490
            self.selection()
            self.state = 1491
            self.number()
            self.state = 1492
            self.number()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Angle_db_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def angle_db_assign(self):
            return self.getTypedRuleContext(XplorMRParser.Angle_db_assignContext,0)


        def Classification(self):
            return self.getToken(XplorMRParser.Classification, 0)

        def Simple_name(self):
            return self.getToken(XplorMRParser.Simple_name, 0)

        def DerivFlag(self):
            return self.getToken(XplorMRParser.DerivFlag, 0)

        def Expectation(self):
            return self.getToken(XplorMRParser.Expectation, 0)

        def Integer(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Integer)
            else:
                return self.getToken(XplorMRParser.Integer, i)

        def number_s(self):
            return self.getTypedRuleContext(XplorMRParser.Number_sContext,0)


        def Error(self):
            return self.getToken(XplorMRParser.Error, 0)

        def ForceConstant(self):
            return self.getToken(XplorMRParser.ForceConstant, 0)

        def Nrestraints(self):
            return self.getToken(XplorMRParser.Nrestraints, 0)

        def Potential(self):
            return self.getToken(XplorMRParser.Potential, 0)

        def Potential_types(self):
            return self.getToken(XplorMRParser.Potential_types, 0)

        def Print(self):
            return self.getToken(XplorMRParser.Print, 0)

        def Threshold(self):
            return self.getToken(XplorMRParser.Threshold, 0)

        def All(self):
            return self.getToken(XplorMRParser.All, 0)

        def Reset(self):
            return self.getToken(XplorMRParser.Reset, 0)

        def Size(self):
            return self.getToken(XplorMRParser.Size, 0)

        def Angle_or_Dihedral(self):
            return self.getToken(XplorMRParser.Angle_or_Dihedral, 0)

        def Zero(self):
            return self.getToken(XplorMRParser.Zero, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_angle_db_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAngle_db_statement" ):
                listener.enterAngle_db_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAngle_db_statement" ):
                listener.exitAngle_db_statement(self)




    def angle_db_statement(self):

        localctx = XplorMRParser.Angle_db_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 150, self.RULE_angle_db_statement)
        try:
            self.state = 1525
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [XplorMRParser.Assign]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1494
                self.angle_db_assign()
                pass
            elif token in [XplorMRParser.Classification]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1495
                self.match(XplorMRParser.Classification)
                self.state = 1496
                self.match(XplorMRParser.Simple_name)
                pass
            elif token in [XplorMRParser.DerivFlag]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1497
                self.match(XplorMRParser.DerivFlag)
                self.state = 1498
                self.match(XplorMRParser.Simple_name)
                pass
            elif token in [XplorMRParser.Expectation]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1499
                self.match(XplorMRParser.Expectation)
                self.state = 1500
                self.match(XplorMRParser.Integer)
                self.state = 1501
                self.match(XplorMRParser.Integer)
                self.state = 1502
                self.number_s()
                pass
            elif token in [XplorMRParser.Error]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1503
                self.match(XplorMRParser.Error)
                self.state = 1504
                self.number_s()
                pass
            elif token in [XplorMRParser.ForceConstant]:
                self.enterOuterAlt(localctx, 6)
                self.state = 1505
                self.match(XplorMRParser.ForceConstant)
                self.state = 1506
                self.number_s()
                pass
            elif token in [XplorMRParser.Nrestraints]:
                self.enterOuterAlt(localctx, 7)
                self.state = 1507
                self.match(XplorMRParser.Nrestraints)
                self.state = 1508
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.Potential]:
                self.enterOuterAlt(localctx, 8)
                self.state = 1509
                self.match(XplorMRParser.Potential)
                self.state = 1510
                self.match(XplorMRParser.Potential_types)
                pass
            elif token in [XplorMRParser.Print]:
                self.enterOuterAlt(localctx, 9)
                self.state = 1511
                self.match(XplorMRParser.Print)
                self.state = 1512
                self.match(XplorMRParser.Threshold)
                self.state = 1513
                self.number_s()
                self.state = 1517
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [XplorMRParser.All]:
                    self.state = 1514
                    self.match(XplorMRParser.All)
                    pass
                elif token in [XplorMRParser.Classification]:
                    self.state = 1515
                    self.match(XplorMRParser.Classification)
                    self.state = 1516
                    self.match(XplorMRParser.Simple_name)
                    pass
                else:
                    raise NoViableAltException(self)

                pass
            elif token in [XplorMRParser.Reset]:
                self.enterOuterAlt(localctx, 10)
                self.state = 1519
                self.match(XplorMRParser.Reset)
                pass
            elif token in [XplorMRParser.Size]:
                self.enterOuterAlt(localctx, 11)
                self.state = 1520
                self.match(XplorMRParser.Size)
                self.state = 1521
                self.match(XplorMRParser.Angle_or_Dihedral)
                self.state = 1522
                self.match(XplorMRParser.Integer)
                self.state = 1523
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.Zero]:
                self.enterOuterAlt(localctx, 12)
                self.state = 1524
                self.match(XplorMRParser.Zero)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Angle_db_assignContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Assign(self):
            return self.getToken(XplorMRParser.Assign, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.SelectionContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_angle_db_assign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAngle_db_assign" ):
                listener.enterAngle_db_assign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAngle_db_assign" ):
                listener.exitAngle_db_assign(self)




    def angle_db_assign(self):

        localctx = XplorMRParser.Angle_db_assignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 152, self.RULE_angle_db_assign)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1527
            self.match(XplorMRParser.Assign)
            self.state = 1528
            self.selection()
            self.state = 1529
            self.selection()
            self.state = 1530
            self.selection()
            self.state = 1531
            self.selection()
            self.state = 1532
            self.selection()
            self.state = 1533
            self.selection()
            self.state = 1534
            self.selection()
            self.state = 1535
            self.selection()
            self.state = 1536
            self.selection()
            self.state = 1537
            self.selection()
            self.state = 1538
            self.selection()
            self.state = 1540
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==XplorMRParser.L_paren:
                self.state = 1539
                self.selection()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pre_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def pre_assign(self):
            return self.getTypedRuleContext(XplorMRParser.Pre_assignContext,0)


        def Classification(self):
            return self.getToken(XplorMRParser.Classification, 0)

        def Simple_name(self):
            return self.getToken(XplorMRParser.Simple_name, 0)

        def Equ_op(self):
            return self.getToken(XplorMRParser.Equ_op, 0)

        def ForceConstant(self):
            return self.getToken(XplorMRParser.ForceConstant, 0)

        def number_s(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Number_sContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Number_sContext,i)


        def Nrestraints(self):
            return self.getToken(XplorMRParser.Nrestraints, 0)

        def Integer(self):
            return self.getToken(XplorMRParser.Integer, 0)

        def Potential(self):
            return self.getToken(XplorMRParser.Potential, 0)

        def Simple_name_P(self):
            return self.getToken(XplorMRParser.Simple_name_P, 0)

        def Potential_types(self):
            return self.getToken(XplorMRParser.Potential_types, 0)

        def Equ_op_P(self):
            return self.getToken(XplorMRParser.Equ_op_P, 0)

        def Kconst(self):
            return self.getToken(XplorMRParser.Kconst, 0)

        def Omega(self):
            return self.getToken(XplorMRParser.Omega, 0)

        def Tauc(self):
            return self.getToken(XplorMRParser.Tauc, 0)

        def Print(self):
            return self.getToken(XplorMRParser.Print, 0)

        def Threshold(self):
            return self.getToken(XplorMRParser.Threshold, 0)

        def All(self):
            return self.getToken(XplorMRParser.All, 0)

        def Reset(self):
            return self.getToken(XplorMRParser.Reset, 0)

        def Debug(self):
            return self.getToken(XplorMRParser.Debug, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_pre_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPre_statement" ):
                listener.enterPre_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPre_statement" ):
                listener.exitPre_statement(self)




    def pre_statement(self):

        localctx = XplorMRParser.Pre_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 154, self.RULE_pre_statement)
        self._la = 0 # Token type
        try:
            self.state = 1595
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [XplorMRParser.Assign]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1542
                self.pre_assign()
                pass
            elif token in [XplorMRParser.Classification]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1543
                self.match(XplorMRParser.Classification)
                self.state = 1545
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 1544
                    self.match(XplorMRParser.Equ_op)


                self.state = 1547
                self.match(XplorMRParser.Simple_name)
                pass
            elif token in [XplorMRParser.ForceConstant]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1548
                self.match(XplorMRParser.ForceConstant)
                self.state = 1550
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 1549
                    self.match(XplorMRParser.Equ_op)


                self.state = 1552
                self.match(XplorMRParser.Simple_name)
                self.state = 1553
                self.number_s()
                pass
            elif token in [XplorMRParser.Nrestraints]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1554
                self.match(XplorMRParser.Nrestraints)
                self.state = 1556
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 1555
                    self.match(XplorMRParser.Equ_op)


                self.state = 1558
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.Potential]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1559
                self.match(XplorMRParser.Potential)
                self.state = 1561
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op_P:
                    self.state = 1560
                    self.match(XplorMRParser.Equ_op_P)


                self.state = 1563
                self.match(XplorMRParser.Simple_name_P)
                self.state = 1564
                self.match(XplorMRParser.Potential_types)
                pass
            elif token in [XplorMRParser.Kconst]:
                self.enterOuterAlt(localctx, 6)
                self.state = 1565
                self.match(XplorMRParser.Kconst)
                self.state = 1567
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 1566
                    self.match(XplorMRParser.Equ_op)


                self.state = 1569
                self.match(XplorMRParser.Simple_name)
                self.state = 1570
                self.number_s()
                pass
            elif token in [XplorMRParser.Omega]:
                self.enterOuterAlt(localctx, 7)
                self.state = 1571
                self.match(XplorMRParser.Omega)
                self.state = 1573
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 1572
                    self.match(XplorMRParser.Equ_op)


                self.state = 1575
                self.match(XplorMRParser.Simple_name)
                self.state = 1576
                self.number_s()
                pass
            elif token in [XplorMRParser.Tauc]:
                self.enterOuterAlt(localctx, 8)
                self.state = 1577
                self.match(XplorMRParser.Tauc)
                self.state = 1579
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 1578
                    self.match(XplorMRParser.Equ_op)


                self.state = 1581
                self.match(XplorMRParser.Simple_name)
                self.state = 1582
                self.number_s()
                self.state = 1583
                self.number_s()
                pass
            elif token in [XplorMRParser.Print]:
                self.enterOuterAlt(localctx, 9)
                self.state = 1585
                self.match(XplorMRParser.Print)
                self.state = 1586
                self.match(XplorMRParser.Threshold)
                self.state = 1587
                self.number_s()
                self.state = 1591
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [XplorMRParser.All]:
                    self.state = 1588
                    self.match(XplorMRParser.All)
                    pass
                elif token in [XplorMRParser.Classification]:
                    self.state = 1589
                    self.match(XplorMRParser.Classification)
                    self.state = 1590
                    self.match(XplorMRParser.Simple_name)
                    pass
                else:
                    raise NoViableAltException(self)

                pass
            elif token in [XplorMRParser.Reset]:
                self.enterOuterAlt(localctx, 10)
                self.state = 1593
                self.match(XplorMRParser.Reset)
                pass
            elif token in [XplorMRParser.Debug]:
                self.enterOuterAlt(localctx, 11)
                self.state = 1594
                self.match(XplorMRParser.Debug)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pre_assignContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Assign(self):
            return self.getToken(XplorMRParser.Assign, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.SelectionContext,i)


        def number(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.NumberContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.NumberContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_pre_assign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPre_assign" ):
                listener.enterPre_assign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPre_assign" ):
                listener.exitPre_assign(self)




    def pre_assign(self):

        localctx = XplorMRParser.Pre_assignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 156, self.RULE_pre_assign)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1597
            self.match(XplorMRParser.Assign)
            self.state = 1598
            self.selection()
            self.state = 1599
            self.selection()
            self.state = 1600
            self.number()
            self.state = 1601
            self.number()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pcs_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def pcs_assign(self):
            return self.getTypedRuleContext(XplorMRParser.Pcs_assignContext,0)


        def Classification(self):
            return self.getToken(XplorMRParser.Classification, 0)

        def Simple_name(self):
            return self.getToken(XplorMRParser.Simple_name, 0)

        def Tolerance(self):
            return self.getToken(XplorMRParser.Tolerance, 0)

        def Integer(self):
            return self.getToken(XplorMRParser.Integer, 0)

        def Coefficients(self):
            return self.getToken(XplorMRParser.Coefficients, 0)

        def number_s(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Number_sContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Number_sContext,i)


        def ForceConstant(self):
            return self.getToken(XplorMRParser.ForceConstant, 0)

        def Nrestraints(self):
            return self.getToken(XplorMRParser.Nrestraints, 0)

        def Print(self):
            return self.getToken(XplorMRParser.Print, 0)

        def Threshold(self):
            return self.getToken(XplorMRParser.Threshold, 0)

        def All(self):
            return self.getToken(XplorMRParser.All, 0)

        def Reset(self):
            return self.getToken(XplorMRParser.Reset, 0)

        def Save(self):
            return self.getToken(XplorMRParser.Save, 0)

        def Fmed(self):
            return self.getToken(XplorMRParser.Fmed, 0)

        def ErrOn(self):
            return self.getToken(XplorMRParser.ErrOn, 0)

        def ErrOff(self):
            return self.getToken(XplorMRParser.ErrOff, 0)

        def Fon(self):
            return self.getToken(XplorMRParser.Fon, 0)

        def Foff(self):
            return self.getToken(XplorMRParser.Foff, 0)

        def Son(self):
            return self.getToken(XplorMRParser.Son, 0)

        def Soff(self):
            return self.getToken(XplorMRParser.Soff, 0)

        def Frun(self):
            return self.getToken(XplorMRParser.Frun, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_pcs_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPcs_statement" ):
                listener.enterPcs_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPcs_statement" ):
                listener.exitPcs_statement(self)




    def pcs_statement(self):

        localctx = XplorMRParser.Pcs_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 158, self.RULE_pcs_statement)
        try:
            self.state = 1639
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [XplorMRParser.Assign]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1603
                self.pcs_assign()
                pass
            elif token in [XplorMRParser.Classification]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1604
                self.match(XplorMRParser.Classification)
                self.state = 1605
                self.match(XplorMRParser.Simple_name)
                pass
            elif token in [XplorMRParser.Tolerance]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1606
                self.match(XplorMRParser.Tolerance)
                self.state = 1607
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.Coefficients]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1608
                self.match(XplorMRParser.Coefficients)
                self.state = 1609
                self.number_s()
                self.state = 1610
                self.number_s()
                pass
            elif token in [XplorMRParser.ForceConstant]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1612
                self.match(XplorMRParser.ForceConstant)
                self.state = 1613
                self.number_s()
                pass
            elif token in [XplorMRParser.Nrestraints]:
                self.enterOuterAlt(localctx, 6)
                self.state = 1614
                self.match(XplorMRParser.Nrestraints)
                self.state = 1615
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.Print]:
                self.enterOuterAlt(localctx, 7)
                self.state = 1616
                self.match(XplorMRParser.Print)
                self.state = 1617
                self.match(XplorMRParser.Threshold)
                self.state = 1618
                self.number_s()
                self.state = 1622
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [XplorMRParser.All]:
                    self.state = 1619
                    self.match(XplorMRParser.All)
                    pass
                elif token in [XplorMRParser.Classification]:
                    self.state = 1620
                    self.match(XplorMRParser.Classification)
                    self.state = 1621
                    self.match(XplorMRParser.Simple_name)
                    pass
                else:
                    raise NoViableAltException(self)

                pass
            elif token in [XplorMRParser.Reset]:
                self.enterOuterAlt(localctx, 8)
                self.state = 1624
                self.match(XplorMRParser.Reset)
                pass
            elif token in [XplorMRParser.Save]:
                self.enterOuterAlt(localctx, 9)
                self.state = 1625
                self.match(XplorMRParser.Save)
                self.state = 1626
                self.match(XplorMRParser.Simple_name)
                pass
            elif token in [XplorMRParser.Fmed]:
                self.enterOuterAlt(localctx, 10)
                self.state = 1627
                self.match(XplorMRParser.Fmed)
                self.state = 1628
                self.number_s()
                self.state = 1629
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.ErrOn]:
                self.enterOuterAlt(localctx, 11)
                self.state = 1631
                self.match(XplorMRParser.ErrOn)
                pass
            elif token in [XplorMRParser.ErrOff]:
                self.enterOuterAlt(localctx, 12)
                self.state = 1632
                self.match(XplorMRParser.ErrOff)
                pass
            elif token in [XplorMRParser.Fon]:
                self.enterOuterAlt(localctx, 13)
                self.state = 1633
                self.match(XplorMRParser.Fon)
                pass
            elif token in [XplorMRParser.Foff]:
                self.enterOuterAlt(localctx, 14)
                self.state = 1634
                self.match(XplorMRParser.Foff)
                pass
            elif token in [XplorMRParser.Son]:
                self.enterOuterAlt(localctx, 15)
                self.state = 1635
                self.match(XplorMRParser.Son)
                pass
            elif token in [XplorMRParser.Soff]:
                self.enterOuterAlt(localctx, 16)
                self.state = 1636
                self.match(XplorMRParser.Soff)
                pass
            elif token in [XplorMRParser.Frun]:
                self.enterOuterAlt(localctx, 17)
                self.state = 1637
                self.match(XplorMRParser.Frun)
                self.state = 1638
                self.match(XplorMRParser.Integer)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pcs_assignContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Assign(self):
            return self.getToken(XplorMRParser.Assign, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.SelectionContext,i)


        def number(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.NumberContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.NumberContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_pcs_assign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPcs_assign" ):
                listener.enterPcs_assign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPcs_assign" ):
                listener.exitPcs_assign(self)




    def pcs_assign(self):

        localctx = XplorMRParser.Pcs_assignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 160, self.RULE_pcs_assign)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1641
            self.match(XplorMRParser.Assign)
            self.state = 1642
            self.selection()
            self.state = 1643
            self.selection()
            self.state = 1644
            self.selection()
            self.state = 1645
            self.selection()
            self.state = 1646
            self.selection()
            self.state = 1647
            self.number()
            self.state = 1648
            self.number()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Prdc_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def prdc_assign(self):
            return self.getTypedRuleContext(XplorMRParser.Prdc_assignContext,0)


        def Classification(self):
            return self.getToken(XplorMRParser.Classification, 0)

        def Simple_name(self):
            return self.getToken(XplorMRParser.Simple_name, 0)

        def Tolerance(self):
            return self.getToken(XplorMRParser.Tolerance, 0)

        def Integer(self):
            return self.getToken(XplorMRParser.Integer, 0)

        def Coefficients(self):
            return self.getToken(XplorMRParser.Coefficients, 0)

        def number_s(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Number_sContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Number_sContext,i)


        def ForceConstant(self):
            return self.getToken(XplorMRParser.ForceConstant, 0)

        def Nrestraints(self):
            return self.getToken(XplorMRParser.Nrestraints, 0)

        def ErrOn(self):
            return self.getToken(XplorMRParser.ErrOn, 0)

        def ErrOff(self):
            return self.getToken(XplorMRParser.ErrOff, 0)

        def Fmed(self):
            return self.getToken(XplorMRParser.Fmed, 0)

        def Fon(self):
            return self.getToken(XplorMRParser.Fon, 0)

        def Foff(self):
            return self.getToken(XplorMRParser.Foff, 0)

        def Frun(self):
            return self.getToken(XplorMRParser.Frun, 0)

        def Print(self):
            return self.getToken(XplorMRParser.Print, 0)

        def Threshold(self):
            return self.getToken(XplorMRParser.Threshold, 0)

        def Reset(self):
            return self.getToken(XplorMRParser.Reset, 0)

        def Save(self):
            return self.getToken(XplorMRParser.Save, 0)

        def Son(self):
            return self.getToken(XplorMRParser.Son, 0)

        def Soff(self):
            return self.getToken(XplorMRParser.Soff, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_prdc_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrdc_statement" ):
                listener.enterPrdc_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrdc_statement" ):
                listener.exitPrdc_statement(self)




    def prdc_statement(self):

        localctx = XplorMRParser.Prdc_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 162, self.RULE_prdc_statement)
        try:
            self.state = 1676
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [XplorMRParser.Assign]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1650
                self.prdc_assign()
                pass
            elif token in [XplorMRParser.Classification]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1651
                self.match(XplorMRParser.Classification)
                self.state = 1652
                self.match(XplorMRParser.Simple_name)
                pass
            elif token in [XplorMRParser.Tolerance]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1653
                self.match(XplorMRParser.Tolerance)
                self.state = 1654
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.Coefficients]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1655
                self.match(XplorMRParser.Coefficients)
                self.state = 1656
                self.number_s()
                self.state = 1657
                self.number_s()
                pass
            elif token in [XplorMRParser.ForceConstant]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1659
                self.match(XplorMRParser.ForceConstant)
                self.state = 1660
                self.number_s()
                pass
            elif token in [XplorMRParser.Nrestraints]:
                self.enterOuterAlt(localctx, 6)
                self.state = 1661
                self.match(XplorMRParser.Nrestraints)
                self.state = 1662
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.ErrOn]:
                self.enterOuterAlt(localctx, 7)
                self.state = 1663
                self.match(XplorMRParser.ErrOn)
                pass
            elif token in [XplorMRParser.ErrOff]:
                self.enterOuterAlt(localctx, 8)
                self.state = 1664
                self.match(XplorMRParser.ErrOff)
                pass
            elif token in [XplorMRParser.Fmed]:
                self.enterOuterAlt(localctx, 9)
                self.state = 1665
                self.match(XplorMRParser.Fmed)
                pass
            elif token in [XplorMRParser.Fon]:
                self.enterOuterAlt(localctx, 10)
                self.state = 1666
                self.match(XplorMRParser.Fon)
                pass
            elif token in [XplorMRParser.Foff]:
                self.enterOuterAlt(localctx, 11)
                self.state = 1667
                self.match(XplorMRParser.Foff)
                pass
            elif token in [XplorMRParser.Frun]:
                self.enterOuterAlt(localctx, 12)
                self.state = 1668
                self.match(XplorMRParser.Frun)
                pass
            elif token in [XplorMRParser.Print]:
                self.enterOuterAlt(localctx, 13)
                self.state = 1669
                self.match(XplorMRParser.Print)
                self.state = 1670
                self.match(XplorMRParser.Threshold)
                pass
            elif token in [XplorMRParser.Reset]:
                self.enterOuterAlt(localctx, 14)
                self.state = 1671
                self.match(XplorMRParser.Reset)
                pass
            elif token in [XplorMRParser.Save]:
                self.enterOuterAlt(localctx, 15)
                self.state = 1672
                self.match(XplorMRParser.Save)
                self.state = 1673
                self.match(XplorMRParser.Simple_name)
                pass
            elif token in [XplorMRParser.Son]:
                self.enterOuterAlt(localctx, 16)
                self.state = 1674
                self.match(XplorMRParser.Son)
                pass
            elif token in [XplorMRParser.Soff]:
                self.enterOuterAlt(localctx, 17)
                self.state = 1675
                self.match(XplorMRParser.Soff)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Prdc_assignContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Assign(self):
            return self.getToken(XplorMRParser.Assign, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.SelectionContext,i)


        def number(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.NumberContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.NumberContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_prdc_assign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrdc_assign" ):
                listener.enterPrdc_assign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrdc_assign" ):
                listener.exitPrdc_assign(self)




    def prdc_assign(self):

        localctx = XplorMRParser.Prdc_assignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 164, self.RULE_prdc_assign)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1678
            self.match(XplorMRParser.Assign)
            self.state = 1679
            self.selection()
            self.state = 1680
            self.selection()
            self.state = 1681
            self.selection()
            self.state = 1682
            self.selection()
            self.state = 1683
            self.selection()
            self.state = 1684
            self.selection()
            self.state = 1685
            self.number()
            self.state = 1686
            self.number()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Porientation_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def porientation_assign(self):
            return self.getTypedRuleContext(XplorMRParser.Porientation_assignContext,0)


        def Classification(self):
            return self.getToken(XplorMRParser.Classification, 0)

        def Simple_name(self):
            return self.getToken(XplorMRParser.Simple_name, 0)

        def ForceConstant(self):
            return self.getToken(XplorMRParser.ForceConstant, 0)

        def number_s(self):
            return self.getTypedRuleContext(XplorMRParser.Number_sContext,0)


        def Nrestraints(self):
            return self.getToken(XplorMRParser.Nrestraints, 0)

        def Integer(self):
            return self.getToken(XplorMRParser.Integer, 0)

        def Print(self):
            return self.getToken(XplorMRParser.Print, 0)

        def Threshold(self):
            return self.getToken(XplorMRParser.Threshold, 0)

        def Reset(self):
            return self.getToken(XplorMRParser.Reset, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_porientation_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPorientation_statement" ):
                listener.enterPorientation_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPorientation_statement" ):
                listener.exitPorientation_statement(self)




    def porientation_statement(self):

        localctx = XplorMRParser.Porientation_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 166, self.RULE_porientation_statement)
        try:
            self.state = 1699
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [XplorMRParser.Assign]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1688
                self.porientation_assign()
                pass
            elif token in [XplorMRParser.Classification]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1689
                self.match(XplorMRParser.Classification)
                self.state = 1690
                self.match(XplorMRParser.Simple_name)
                pass
            elif token in [XplorMRParser.ForceConstant]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1691
                self.match(XplorMRParser.ForceConstant)
                self.state = 1692
                self.number_s()
                pass
            elif token in [XplorMRParser.Nrestraints]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1693
                self.match(XplorMRParser.Nrestraints)
                self.state = 1694
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.Print]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1695
                self.match(XplorMRParser.Print)
                self.state = 1696
                self.match(XplorMRParser.Threshold)
                self.state = 1697
                self.number_s()
                pass
            elif token in [XplorMRParser.Reset]:
                self.enterOuterAlt(localctx, 6)
                self.state = 1698
                self.match(XplorMRParser.Reset)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Porientation_assignContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Assign(self):
            return self.getToken(XplorMRParser.Assign, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.SelectionContext,i)


        def number(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.NumberContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.NumberContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_porientation_assign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPorientation_assign" ):
                listener.enterPorientation_assign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPorientation_assign" ):
                listener.exitPorientation_assign(self)




    def porientation_assign(self):

        localctx = XplorMRParser.Porientation_assignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 168, self.RULE_porientation_assign)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1701
            self.match(XplorMRParser.Assign)
            self.state = 1702
            self.selection()
            self.state = 1703
            self.selection()
            self.state = 1704
            self.number()
            self.state = 1705
            self.number()
            self.state = 1706
            self.number()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pccr_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def pccr_assign(self):
            return self.getTypedRuleContext(XplorMRParser.Pccr_assignContext,0)


        def Classification(self):
            return self.getToken(XplorMRParser.Classification, 0)

        def Simple_name(self):
            return self.getToken(XplorMRParser.Simple_name, 0)

        def Weip(self):
            return self.getToken(XplorMRParser.Weip, 0)

        def Integer(self):
            return self.getToken(XplorMRParser.Integer, 0)

        def Coefficients(self):
            return self.getToken(XplorMRParser.Coefficients, 0)

        def number_s(self):
            return self.getTypedRuleContext(XplorMRParser.Number_sContext,0)


        def ForceConstant(self):
            return self.getToken(XplorMRParser.ForceConstant, 0)

        def Nrestraints(self):
            return self.getToken(XplorMRParser.Nrestraints, 0)

        def Print(self):
            return self.getToken(XplorMRParser.Print, 0)

        def Threshold(self):
            return self.getToken(XplorMRParser.Threshold, 0)

        def Reset(self):
            return self.getToken(XplorMRParser.Reset, 0)

        def Frun(self):
            return self.getToken(XplorMRParser.Frun, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_pccr_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPccr_statement" ):
                listener.enterPccr_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPccr_statement" ):
                listener.exitPccr_statement(self)




    def pccr_statement(self):

        localctx = XplorMRParser.Pccr_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 170, self.RULE_pccr_statement)
        try:
            self.state = 1725
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [XplorMRParser.Assign]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1708
                self.pccr_assign()
                pass
            elif token in [XplorMRParser.Classification]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1709
                self.match(XplorMRParser.Classification)
                self.state = 1710
                self.match(XplorMRParser.Simple_name)
                pass
            elif token in [XplorMRParser.Weip]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1711
                self.match(XplorMRParser.Weip)
                self.state = 1712
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.Coefficients]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1713
                self.match(XplorMRParser.Coefficients)
                self.state = 1714
                self.number_s()
                pass
            elif token in [XplorMRParser.ForceConstant]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1715
                self.match(XplorMRParser.ForceConstant)
                self.state = 1716
                self.number_s()
                pass
            elif token in [XplorMRParser.Nrestraints]:
                self.enterOuterAlt(localctx, 6)
                self.state = 1717
                self.match(XplorMRParser.Nrestraints)
                self.state = 1718
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.Print]:
                self.enterOuterAlt(localctx, 7)
                self.state = 1719
                self.match(XplorMRParser.Print)
                self.state = 1720
                self.match(XplorMRParser.Threshold)
                self.state = 1721
                self.number_s()
                pass
            elif token in [XplorMRParser.Reset]:
                self.enterOuterAlt(localctx, 8)
                self.state = 1722
                self.match(XplorMRParser.Reset)
                pass
            elif token in [XplorMRParser.Frun]:
                self.enterOuterAlt(localctx, 9)
                self.state = 1723
                self.match(XplorMRParser.Frun)
                self.state = 1724
                self.match(XplorMRParser.Integer)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pccr_assignContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Assign(self):
            return self.getToken(XplorMRParser.Assign, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.SelectionContext,i)


        def number(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.NumberContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.NumberContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_pccr_assign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPccr_assign" ):
                listener.enterPccr_assign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPccr_assign" ):
                listener.exitPccr_assign(self)




    def pccr_assign(self):

        localctx = XplorMRParser.Pccr_assignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 172, self.RULE_pccr_assign)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1727
            self.match(XplorMRParser.Assign)
            self.state = 1728
            self.selection()
            self.state = 1729
            self.selection()
            self.state = 1730
            self.selection()
            self.state = 1731
            self.number()
            self.state = 1732
            self.number()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Hbond_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def hbond_assign(self):
            return self.getTypedRuleContext(XplorMRParser.Hbond_assignContext,0)


        def Classification(self):
            return self.getToken(XplorMRParser.Classification, 0)

        def Simple_name(self):
            return self.getToken(XplorMRParser.Simple_name, 0)

        def ForceConstant(self):
            return self.getToken(XplorMRParser.ForceConstant, 0)

        def number_s(self):
            return self.getTypedRuleContext(XplorMRParser.Number_sContext,0)


        def Nrestraints(self):
            return self.getToken(XplorMRParser.Nrestraints, 0)

        def Integer(self):
            return self.getToken(XplorMRParser.Integer, 0)

        def Print(self):
            return self.getToken(XplorMRParser.Print, 0)

        def Threshold(self):
            return self.getToken(XplorMRParser.Threshold, 0)

        def Reset(self):
            return self.getToken(XplorMRParser.Reset, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_hbond_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHbond_statement" ):
                listener.enterHbond_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHbond_statement" ):
                listener.exitHbond_statement(self)




    def hbond_statement(self):

        localctx = XplorMRParser.Hbond_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 174, self.RULE_hbond_statement)
        try:
            self.state = 1745
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [XplorMRParser.Assign]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1734
                self.hbond_assign()
                pass
            elif token in [XplorMRParser.Classification]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1735
                self.match(XplorMRParser.Classification)
                self.state = 1736
                self.match(XplorMRParser.Simple_name)
                pass
            elif token in [XplorMRParser.ForceConstant]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1737
                self.match(XplorMRParser.ForceConstant)
                self.state = 1738
                self.number_s()
                pass
            elif token in [XplorMRParser.Nrestraints]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1739
                self.match(XplorMRParser.Nrestraints)
                self.state = 1740
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.Print]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1741
                self.match(XplorMRParser.Print)
                self.state = 1742
                self.match(XplorMRParser.Threshold)
                self.state = 1743
                self.number_s()
                pass
            elif token in [XplorMRParser.Reset]:
                self.enterOuterAlt(localctx, 6)
                self.state = 1744
                self.match(XplorMRParser.Reset)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Hbond_assignContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Assign(self):
            return self.getToken(XplorMRParser.Assign, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.SelectionContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_hbond_assign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHbond_assign" ):
                listener.enterHbond_assign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHbond_assign" ):
                listener.exitHbond_assign(self)




    def hbond_assign(self):

        localctx = XplorMRParser.Hbond_assignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 176, self.RULE_hbond_assign)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1747
            self.match(XplorMRParser.Assign)
            self.state = 1748
            self.selection()
            self.state = 1749
            self.selection()
            self.state = 1750
            self.selection()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Hbond_db_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def hbond_db_assign(self):
            return self.getTypedRuleContext(XplorMRParser.Hbond_db_assignContext,0)


        def Kdir(self):
            return self.getToken(XplorMRParser.Kdir, 0)

        def number_s(self):
            return self.getTypedRuleContext(XplorMRParser.Number_sContext,0)


        def Equ_op(self):
            return self.getToken(XplorMRParser.Equ_op, 0)

        def Klin(self):
            return self.getToken(XplorMRParser.Klin, 0)

        def Nseg(self):
            return self.getToken(XplorMRParser.Nseg, 0)

        def Integer(self):
            return self.getToken(XplorMRParser.Integer, 0)

        def Nmin(self):
            return self.getToken(XplorMRParser.Nmin, 0)

        def Nmax(self):
            return self.getToken(XplorMRParser.Nmax, 0)

        def Segm(self):
            return self.getToken(XplorMRParser.Segm, 0)

        def Simple_name(self):
            return self.getToken(XplorMRParser.Simple_name, 0)

        def Ohcut(self):
            return self.getToken(XplorMRParser.Ohcut, 0)

        def Coh1cut(self):
            return self.getToken(XplorMRParser.Coh1cut, 0)

        def Coh2cut(self):
            return self.getToken(XplorMRParser.Coh2cut, 0)

        def Ohncut(self):
            return self.getToken(XplorMRParser.Ohncut, 0)

        def Updfrq(self):
            return self.getToken(XplorMRParser.Updfrq, 0)

        def Prnfrq(self):
            return self.getToken(XplorMRParser.Prnfrq, 0)

        def Freemode(self):
            return self.getToken(XplorMRParser.Freemode, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_hbond_db_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHbond_db_statement" ):
                listener.enterHbond_db_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHbond_db_statement" ):
                listener.exitHbond_db_statement(self)




    def hbond_db_statement(self):

        localctx = XplorMRParser.Hbond_db_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 178, self.RULE_hbond_db_statement)
        self._la = 0 # Token type
        try:
            self.state = 1818
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [XplorMRParser.Assign]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1752
                self.hbond_db_assign()
                pass
            elif token in [XplorMRParser.Kdir]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1753
                self.match(XplorMRParser.Kdir)
                self.state = 1755
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 1754
                    self.match(XplorMRParser.Equ_op)


                self.state = 1757
                self.number_s()
                pass
            elif token in [XplorMRParser.Klin]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1758
                self.match(XplorMRParser.Klin)
                self.state = 1760
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 1759
                    self.match(XplorMRParser.Equ_op)


                self.state = 1762
                self.number_s()
                pass
            elif token in [XplorMRParser.Nseg]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1763
                self.match(XplorMRParser.Nseg)
                self.state = 1765
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 1764
                    self.match(XplorMRParser.Equ_op)


                self.state = 1767
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.Nmin]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1768
                self.match(XplorMRParser.Nmin)
                self.state = 1770
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 1769
                    self.match(XplorMRParser.Equ_op)


                self.state = 1772
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.Nmax]:
                self.enterOuterAlt(localctx, 6)
                self.state = 1773
                self.match(XplorMRParser.Nmax)
                self.state = 1775
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 1774
                    self.match(XplorMRParser.Equ_op)


                self.state = 1777
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.Segm]:
                self.enterOuterAlt(localctx, 7)
                self.state = 1778
                self.match(XplorMRParser.Segm)
                self.state = 1780
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 1779
                    self.match(XplorMRParser.Equ_op)


                self.state = 1782
                self.match(XplorMRParser.Simple_name)
                pass
            elif token in [XplorMRParser.Ohcut]:
                self.enterOuterAlt(localctx, 8)
                self.state = 1783
                self.match(XplorMRParser.Ohcut)
                self.state = 1785
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 1784
                    self.match(XplorMRParser.Equ_op)


                self.state = 1787
                self.number_s()
                pass
            elif token in [XplorMRParser.Coh1cut]:
                self.enterOuterAlt(localctx, 9)
                self.state = 1788
                self.match(XplorMRParser.Coh1cut)
                self.state = 1790
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 1789
                    self.match(XplorMRParser.Equ_op)


                self.state = 1792
                self.number_s()
                pass
            elif token in [XplorMRParser.Coh2cut]:
                self.enterOuterAlt(localctx, 10)
                self.state = 1793
                self.match(XplorMRParser.Coh2cut)
                self.state = 1795
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 1794
                    self.match(XplorMRParser.Equ_op)


                self.state = 1797
                self.number_s()
                pass
            elif token in [XplorMRParser.Ohncut]:
                self.enterOuterAlt(localctx, 11)
                self.state = 1798
                self.match(XplorMRParser.Ohncut)
                self.state = 1800
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 1799
                    self.match(XplorMRParser.Equ_op)


                self.state = 1802
                self.number_s()
                pass
            elif token in [XplorMRParser.Updfrq]:
                self.enterOuterAlt(localctx, 12)
                self.state = 1803
                self.match(XplorMRParser.Updfrq)
                self.state = 1805
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 1804
                    self.match(XplorMRParser.Equ_op)


                self.state = 1807
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.Prnfrq]:
                self.enterOuterAlt(localctx, 13)
                self.state = 1808
                self.match(XplorMRParser.Prnfrq)
                self.state = 1810
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 1809
                    self.match(XplorMRParser.Equ_op)


                self.state = 1812
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.Freemode]:
                self.enterOuterAlt(localctx, 14)
                self.state = 1813
                self.match(XplorMRParser.Freemode)
                self.state = 1815
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 1814
                    self.match(XplorMRParser.Equ_op)


                self.state = 1817
                self.match(XplorMRParser.Integer)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Hbond_db_assignContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Assign(self):
            return self.getToken(XplorMRParser.Assign, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.SelectionContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_hbond_db_assign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHbond_db_assign" ):
                listener.enterHbond_db_assign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHbond_db_assign" ):
                listener.exitHbond_db_assign(self)




    def hbond_db_assign(self):

        localctx = XplorMRParser.Hbond_db_assignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 180, self.RULE_hbond_db_assign)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1820
            self.match(XplorMRParser.Assign)
            self.state = 1821
            self.selection()
            self.state = 1822
            self.selection()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SelectionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def L_paren(self):
            return self.getToken(XplorMRParser.L_paren, 0)

        def selection_expression(self):
            return self.getTypedRuleContext(XplorMRParser.Selection_expressionContext,0)


        def R_paren(self):
            return self.getToken(XplorMRParser.R_paren, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_selection

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSelection" ):
                listener.enterSelection(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSelection" ):
                listener.exitSelection(self)




    def selection(self):

        localctx = XplorMRParser.SelectionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 182, self.RULE_selection)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1824
            self.match(XplorMRParser.L_paren)
            self.state = 1825
            self.selection_expression()
            self.state = 1826
            self.match(XplorMRParser.R_paren)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Selection_expressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def term(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.TermContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.TermContext,i)


        def Or_op(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Or_op)
            else:
                return self.getToken(XplorMRParser.Or_op, i)

        def getRuleIndex(self):
            return XplorMRParser.RULE_selection_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSelection_expression" ):
                listener.enterSelection_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSelection_expression" ):
                listener.exitSelection_expression(self)




    def selection_expression(self):

        localctx = XplorMRParser.Selection_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 184, self.RULE_selection_expression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1828
            self.term()
            self.state = 1833
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==XplorMRParser.Or_op:
                self.state = 1829
                self.match(XplorMRParser.Or_op)
                self.state = 1830
                self.term()
                self.state = 1835
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TermContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def factor(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.FactorContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.FactorContext,i)


        def And_op(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.And_op)
            else:
                return self.getToken(XplorMRParser.And_op, i)

        def getRuleIndex(self):
            return XplorMRParser.RULE_term

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTerm" ):
                listener.enterTerm(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTerm" ):
                listener.exitTerm(self)




    def term(self):

        localctx = XplorMRParser.TermContext(self, self._ctx, self.state)
        self.enterRule(localctx, 186, self.RULE_term)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1836
            self.factor(0)
            self.state = 1841
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==XplorMRParser.And_op:
                self.state = 1837
                self.match(XplorMRParser.And_op)
                self.state = 1838
                self.factor(0)
                self.state = 1843
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FactorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def L_paren(self):
            return self.getToken(XplorMRParser.L_paren, 0)

        def selection_expression(self):
            return self.getTypedRuleContext(XplorMRParser.Selection_expressionContext,0)


        def R_paren(self):
            return self.getToken(XplorMRParser.R_paren, 0)

        def All(self):
            return self.getToken(XplorMRParser.All, 0)

        def Atom(self):
            return self.getToken(XplorMRParser.Atom, 0)

        def Simple_names(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Simple_names)
            else:
                return self.getToken(XplorMRParser.Simple_names, i)

        def Simple_name(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Simple_name)
            else:
                return self.getToken(XplorMRParser.Simple_name, i)

        def Integers(self):
            return self.getToken(XplorMRParser.Integers, 0)

        def Integer(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Integer)
            else:
                return self.getToken(XplorMRParser.Integer, i)

        def Attribute(self):
            return self.getToken(XplorMRParser.Attribute, 0)

        def Attr_properties(self):
            return self.getToken(XplorMRParser.Attr_properties, 0)

        def Comparison_ops(self):
            return self.getToken(XplorMRParser.Comparison_ops, 0)

        def number_f(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Number_fContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Number_fContext,i)


        def Abs(self):
            return self.getToken(XplorMRParser.Abs, 0)

        def BondedTo(self):
            return self.getToken(XplorMRParser.BondedTo, 0)

        def factor(self):
            return self.getTypedRuleContext(XplorMRParser.FactorContext,0)


        def ByGroup(self):
            return self.getToken(XplorMRParser.ByGroup, 0)

        def ByRes(self):
            return self.getToken(XplorMRParser.ByRes, 0)

        def Chemical(self):
            return self.getToken(XplorMRParser.Chemical, 0)

        def Colon(self):
            return self.getToken(XplorMRParser.Colon, 0)

        def Hydrogen(self):
            return self.getToken(XplorMRParser.Hydrogen, 0)

        def Id(self):
            return self.getToken(XplorMRParser.Id, 0)

        def Known(self):
            return self.getToken(XplorMRParser.Known, 0)

        def Name(self):
            return self.getToken(XplorMRParser.Name, 0)

        def Not_op(self):
            return self.getToken(XplorMRParser.Not_op, 0)

        def Point(self):
            return self.getToken(XplorMRParser.Point, 0)

        def Cut(self):
            return self.getToken(XplorMRParser.Cut, 0)

        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Comma)
            else:
                return self.getToken(XplorMRParser.Comma, i)

        def Tail(self):
            return self.getToken(XplorMRParser.Tail, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.SelectionContext,i)


        def Equ_op(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Equ_op)
            else:
                return self.getToken(XplorMRParser.Equ_op, i)

        def Head(self):
            return self.getToken(XplorMRParser.Head, 0)

        def Previous(self):
            return self.getToken(XplorMRParser.Previous, 0)

        def Pseudo(self):
            return self.getToken(XplorMRParser.Pseudo, 0)

        def Residue(self):
            return self.getToken(XplorMRParser.Residue, 0)

        def Resname(self):
            return self.getToken(XplorMRParser.Resname, 0)

        def SegIdentifier(self):
            return self.getToken(XplorMRParser.SegIdentifier, 0)

        def Double_quote_string(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Double_quote_string)
            else:
                return self.getToken(XplorMRParser.Double_quote_string, i)

        def Store_1(self):
            return self.getToken(XplorMRParser.Store_1, 0)

        def Store_2(self):
            return self.getToken(XplorMRParser.Store_2, 0)

        def Store_3(self):
            return self.getToken(XplorMRParser.Store_3, 0)

        def Store_4(self):
            return self.getToken(XplorMRParser.Store_4, 0)

        def Store_5(self):
            return self.getToken(XplorMRParser.Store_5, 0)

        def Store_6(self):
            return self.getToken(XplorMRParser.Store_6, 0)

        def Store_7(self):
            return self.getToken(XplorMRParser.Store_7, 0)

        def Store_8(self):
            return self.getToken(XplorMRParser.Store_8, 0)

        def Store_9(self):
            return self.getToken(XplorMRParser.Store_9, 0)

        def Tag(self):
            return self.getToken(XplorMRParser.Tag, 0)

        def Donor(self):
            return self.getToken(XplorMRParser.Donor, 0)

        def Acceptor(self):
            return self.getToken(XplorMRParser.Acceptor, 0)

        def Around(self):
            return self.getToken(XplorMRParser.Around, 0)

        def Saround(self):
            return self.getToken(XplorMRParser.Saround, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_factor

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFactor" ):
                listener.enterFactor(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFactor" ):
                listener.exitFactor(self)



    def factor(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = XplorMRParser.FactorContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 188
        self.enterRecursionRule(localctx, 188, self.RULE_factor, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1973
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,175,self._ctx)
            if la_ == 1:
                self.state = 1845
                self.match(XplorMRParser.L_paren)
                self.state = 1846
                self.selection_expression()
                self.state = 1847
                self.match(XplorMRParser.R_paren)
                pass

            elif la_ == 2:
                self.state = 1849
                self.match(XplorMRParser.All)
                pass

            elif la_ == 3:
                self.state = 1850
                self.match(XplorMRParser.Atom)
                self.state = 1851
                _la = self._input.LA(1)
                if not(_la==XplorMRParser.Simple_name or _la==XplorMRParser.Simple_names):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1852
                _la = self._input.LA(1)
                if not(_la==XplorMRParser.Integer or _la==XplorMRParser.Integers):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1853
                _la = self._input.LA(1)
                if not(_la==XplorMRParser.Simple_name or _la==XplorMRParser.Simple_names):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass

            elif la_ == 4:
                self.state = 1854
                self.match(XplorMRParser.Attribute)
                self.state = 1856
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Abs:
                    self.state = 1855
                    self.match(XplorMRParser.Abs)


                self.state = 1858
                self.match(XplorMRParser.Attr_properties)
                self.state = 1859
                self.match(XplorMRParser.Comparison_ops)
                self.state = 1860
                self.number_f()
                pass

            elif la_ == 5:
                self.state = 1861
                self.match(XplorMRParser.BondedTo)
                self.state = 1862
                self.factor(29)
                pass

            elif la_ == 6:
                self.state = 1863
                self.match(XplorMRParser.ByGroup)
                self.state = 1864
                self.factor(28)
                pass

            elif la_ == 7:
                self.state = 1865
                self.match(XplorMRParser.ByRes)
                self.state = 1866
                self.factor(27)
                pass

            elif la_ == 8:
                self.state = 1867
                self.match(XplorMRParser.Chemical)
                self.state = 1874
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [XplorMRParser.Simple_names]:
                    self.state = 1868
                    self.match(XplorMRParser.Simple_names)
                    pass
                elif token in [XplorMRParser.Simple_name]:
                    self.state = 1869
                    self.match(XplorMRParser.Simple_name)
                    self.state = 1872
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,158,self._ctx)
                    if la_ == 1:
                        self.state = 1870
                        self.match(XplorMRParser.Colon)
                        self.state = 1871
                        self.match(XplorMRParser.Simple_name)


                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 9:
                self.state = 1876
                self.match(XplorMRParser.Hydrogen)
                pass

            elif la_ == 10:
                self.state = 1877
                self.match(XplorMRParser.Id)
                self.state = 1878
                self.match(XplorMRParser.Integer)
                pass

            elif la_ == 11:
                self.state = 1879
                self.match(XplorMRParser.Known)
                pass

            elif la_ == 12:
                self.state = 1880
                self.match(XplorMRParser.Name)
                self.state = 1887
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [XplorMRParser.Simple_names]:
                    self.state = 1881
                    self.match(XplorMRParser.Simple_names)
                    pass
                elif token in [XplorMRParser.Simple_name]:
                    self.state = 1882
                    self.match(XplorMRParser.Simple_name)
                    self.state = 1885
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,160,self._ctx)
                    if la_ == 1:
                        self.state = 1883
                        self.match(XplorMRParser.Colon)
                        self.state = 1884
                        self.match(XplorMRParser.Simple_name)


                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 13:
                self.state = 1889
                self.match(XplorMRParser.Not_op)
                self.state = 1890
                self.factor(21)
                pass

            elif la_ == 14:
                self.state = 1891
                self.match(XplorMRParser.Point)
                self.state = 1892
                self.match(XplorMRParser.L_paren)
                self.state = 1893
                self.number_f()
                self.state = 1895
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Comma:
                    self.state = 1894
                    self.match(XplorMRParser.Comma)


                self.state = 1897
                self.number_f()
                self.state = 1899
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Comma:
                    self.state = 1898
                    self.match(XplorMRParser.Comma)


                self.state = 1901
                self.number_f()
                self.state = 1902
                self.match(XplorMRParser.R_paren)
                self.state = 1903
                self.match(XplorMRParser.Cut)
                self.state = 1904
                self.number_f()
                pass

            elif la_ == 15:
                self.state = 1906
                self.match(XplorMRParser.Point)
                self.state = 1907
                self.match(XplorMRParser.L_paren)
                self.state = 1908
                self.match(XplorMRParser.Tail)
                self.state = 1910
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 1909
                    self.match(XplorMRParser.Equ_op)


                self.state = 1912
                self.selection()
                self.state = 1914
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Comma:
                    self.state = 1913
                    self.match(XplorMRParser.Comma)


                self.state = 1921
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Head:
                    self.state = 1916
                    self.match(XplorMRParser.Head)
                    self.state = 1918
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==XplorMRParser.Equ_op:
                        self.state = 1917
                        self.match(XplorMRParser.Equ_op)


                    self.state = 1920
                    self.selection()


                self.state = 1923
                self.match(XplorMRParser.R_paren)
                self.state = 1924
                self.match(XplorMRParser.Cut)
                self.state = 1925
                self.number_f()
                pass

            elif la_ == 16:
                self.state = 1927
                self.match(XplorMRParser.Previous)
                pass

            elif la_ == 17:
                self.state = 1928
                self.match(XplorMRParser.Pseudo)
                pass

            elif la_ == 18:
                self.state = 1929
                self.match(XplorMRParser.Residue)
                self.state = 1936
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [XplorMRParser.Integers]:
                    self.state = 1930
                    self.match(XplorMRParser.Integers)
                    pass
                elif token in [XplorMRParser.Integer]:
                    self.state = 1931
                    self.match(XplorMRParser.Integer)
                    self.state = 1934
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,168,self._ctx)
                    if la_ == 1:
                        self.state = 1932
                        self.match(XplorMRParser.Colon)
                        self.state = 1933
                        self.match(XplorMRParser.Integer)


                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 19:
                self.state = 1938
                self.match(XplorMRParser.Resname)
                self.state = 1945
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [XplorMRParser.Simple_names]:
                    self.state = 1939
                    self.match(XplorMRParser.Simple_names)
                    pass
                elif token in [XplorMRParser.Simple_name]:
                    self.state = 1940
                    self.match(XplorMRParser.Simple_name)
                    self.state = 1943
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,170,self._ctx)
                    if la_ == 1:
                        self.state = 1941
                        self.match(XplorMRParser.Colon)
                        self.state = 1942
                        self.match(XplorMRParser.Simple_name)


                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 20:
                self.state = 1947
                self.match(XplorMRParser.SegIdentifier)
                self.state = 1959
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [XplorMRParser.Simple_names]:
                    self.state = 1948
                    self.match(XplorMRParser.Simple_names)
                    pass
                elif token in [XplorMRParser.Simple_name]:
                    self.state = 1949
                    self.match(XplorMRParser.Simple_name)
                    self.state = 1952
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,172,self._ctx)
                    if la_ == 1:
                        self.state = 1950
                        self.match(XplorMRParser.Colon)
                        self.state = 1951
                        self.match(XplorMRParser.Simple_name)


                    pass
                elif token in [XplorMRParser.Double_quote_string]:
                    self.state = 1954
                    self.match(XplorMRParser.Double_quote_string)
                    self.state = 1957
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,173,self._ctx)
                    if la_ == 1:
                        self.state = 1955
                        self.match(XplorMRParser.Colon)
                        self.state = 1956
                        self.match(XplorMRParser.Double_quote_string)


                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 21:
                self.state = 1961
                self.match(XplorMRParser.Store_1)
                pass

            elif la_ == 22:
                self.state = 1962
                self.match(XplorMRParser.Store_2)
                pass

            elif la_ == 23:
                self.state = 1963
                self.match(XplorMRParser.Store_3)
                pass

            elif la_ == 24:
                self.state = 1964
                self.match(XplorMRParser.Store_4)
                pass

            elif la_ == 25:
                self.state = 1965
                self.match(XplorMRParser.Store_5)
                pass

            elif la_ == 26:
                self.state = 1966
                self.match(XplorMRParser.Store_6)
                pass

            elif la_ == 27:
                self.state = 1967
                self.match(XplorMRParser.Store_7)
                pass

            elif la_ == 28:
                self.state = 1968
                self.match(XplorMRParser.Store_8)
                pass

            elif la_ == 29:
                self.state = 1969
                self.match(XplorMRParser.Store_9)
                pass

            elif la_ == 30:
                self.state = 1970
                self.match(XplorMRParser.Tag)
                pass

            elif la_ == 31:
                self.state = 1971
                self.match(XplorMRParser.Donor)
                pass

            elif la_ == 32:
                self.state = 1972
                self.match(XplorMRParser.Acceptor)
                pass


            self._ctx.stop = self._input.LT(-1)
            self.state = 1983
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,177,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 1981
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,176,self._ctx)
                    if la_ == 1:
                        localctx = XplorMRParser.FactorContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_factor)
                        self.state = 1975
                        if not self.precpred(self._ctx, 32):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 32)")
                        self.state = 1976
                        self.match(XplorMRParser.Around)
                        self.state = 1977
                        self.number_f()
                        pass

                    elif la_ == 2:
                        localctx = XplorMRParser.FactorContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_factor)
                        self.state = 1978
                        if not self.precpred(self._ctx, 14):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 14)")
                        self.state = 1979
                        self.match(XplorMRParser.Saround)
                        self.state = 1980
                        self.number_f()
                        pass

             
                self.state = 1985
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,177,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class NumberContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Real(self):
            return self.getToken(XplorMRParser.Real, 0)

        def Integer(self):
            return self.getToken(XplorMRParser.Integer, 0)

        def Symbol_name(self):
            return self.getToken(XplorMRParser.Symbol_name, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_number

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNumber" ):
                listener.enterNumber(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNumber" ):
                listener.exitNumber(self)




    def number(self):

        localctx = XplorMRParser.NumberContext(self, self._ctx, self.state)
        self.enterRule(localctx, 190, self.RULE_number)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1986
            _la = self._input.LA(1)
            if not(((((_la - 178)) & ~0x3f) == 0 and ((1 << (_la - 178)) & ((1 << (XplorMRParser.Integer - 178)) | (1 << (XplorMRParser.Real - 178)) | (1 << (XplorMRParser.Symbol_name - 178)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Number_fContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Real(self):
            return self.getToken(XplorMRParser.Real, 0)

        def Integer(self):
            return self.getToken(XplorMRParser.Integer, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_number_f

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNumber_f" ):
                listener.enterNumber_f(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNumber_f" ):
                listener.exitNumber_f(self)




    def number_f(self):

        localctx = XplorMRParser.Number_fContext(self, self._ctx, self.state)
        self.enterRule(localctx, 192, self.RULE_number_f)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1988
            _la = self._input.LA(1)
            if not(_la==XplorMRParser.Integer or _la==XplorMRParser.Real):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Number_sContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Real(self):
            return self.getToken(XplorMRParser.Real, 0)

        def Integer(self):
            return self.getToken(XplorMRParser.Integer, 0)

        def Symbol_name(self):
            return self.getToken(XplorMRParser.Symbol_name, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_number_s

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNumber_s" ):
                listener.enterNumber_s(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNumber_s" ):
                listener.exitNumber_s(self)




    def number_s(self):

        localctx = XplorMRParser.Number_sContext(self, self._ctx, self.state)
        self.enterRule(localctx, 194, self.RULE_number_s)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1990
            _la = self._input.LA(1)
            if not(((((_la - 178)) & ~0x3f) == 0 and ((1 << (_la - 178)) & ((1 << (XplorMRParser.Integer - 178)) | (1 << (XplorMRParser.Real - 178)) | (1 << (XplorMRParser.Symbol_name - 178)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Number_aContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Real(self):
            return self.getToken(XplorMRParser.Real, 0)

        def Integer(self):
            return self.getToken(XplorMRParser.Integer, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_number_a

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNumber_a" ):
                listener.enterNumber_a(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNumber_a" ):
                listener.exitNumber_a(self)




    def number_a(self):

        localctx = XplorMRParser.Number_aContext(self, self._ctx, self.state)
        self.enterRule(localctx, 196, self.RULE_number_a)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1992
            _la = self._input.LA(1)
            if not(_la==XplorMRParser.Integer or _la==XplorMRParser.Real):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Flag_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Flags(self):
            return self.getToken(XplorMRParser.Flags, 0)

        def Include(self):
            return self.getToken(XplorMRParser.Include, 0)

        def End_F(self):
            return self.getToken(XplorMRParser.End_F, 0)

        def Exclude(self):
            return self.getToken(XplorMRParser.Exclude, 0)

        def Class_name(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Class_name)
            else:
                return self.getToken(XplorMRParser.Class_name, i)

        def Any_class(self):
            return self.getToken(XplorMRParser.Any_class, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_flag_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFlag_statement" ):
                listener.enterFlag_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFlag_statement" ):
                listener.exitFlag_statement(self)




    def flag_statement(self):

        localctx = XplorMRParser.Flag_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 198, self.RULE_flag_statement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1994
            self.match(XplorMRParser.Flags)
            self.state = 2005
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==XplorMRParser.Exclude:
                self.state = 1995
                self.match(XplorMRParser.Exclude)
                self.state = 2003
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [XplorMRParser.Include, XplorMRParser.Class_name]:
                    self.state = 1999
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==XplorMRParser.Class_name:
                        self.state = 1996
                        self.match(XplorMRParser.Class_name)
                        self.state = 2001
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    pass
                elif token in [XplorMRParser.Any_class]:
                    self.state = 2002
                    self.match(XplorMRParser.Any_class)
                    pass
                else:
                    raise NoViableAltException(self)



            self.state = 2007
            self.match(XplorMRParser.Include)
            self.state = 2011
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==XplorMRParser.Class_name:
                self.state = 2008
                self.match(XplorMRParser.Class_name)
                self.state = 2013
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2014
            self.match(XplorMRParser.End_F)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Vector_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Vector(self):
            return self.getToken(XplorMRParser.Vector, 0)

        def vector_mode(self):
            return self.getTypedRuleContext(XplorMRParser.Vector_modeContext,0)


        def selection(self):
            return self.getTypedRuleContext(XplorMRParser.SelectionContext,0)


        def getRuleIndex(self):
            return XplorMRParser.RULE_vector_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVector_statement" ):
                listener.enterVector_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVector_statement" ):
                listener.exitVector_statement(self)




    def vector_statement(self):

        localctx = XplorMRParser.Vector_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 200, self.RULE_vector_statement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2016
            self.match(XplorMRParser.Vector)
            self.state = 2017
            self.vector_mode()
            self.state = 2018
            self.selection()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Vector_modeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def vector_expression(self):
            return self.getTypedRuleContext(XplorMRParser.Vector_expressionContext,0)


        def R_paren_VE(self):
            return self.getToken(XplorMRParser.R_paren_VE, 0)

        def Do_Lp(self):
            return self.getToken(XplorMRParser.Do_Lp, 0)

        def Identify_Lp(self):
            return self.getToken(XplorMRParser.Identify_Lp, 0)

        def Show(self):
            return self.getToken(XplorMRParser.Show, 0)

        def vector_show_property(self):
            return self.getTypedRuleContext(XplorMRParser.Vector_show_propertyContext,0)


        def getRuleIndex(self):
            return XplorMRParser.RULE_vector_mode

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVector_mode" ):
                listener.enterVector_mode(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVector_mode" ):
                listener.exitVector_mode(self)




    def vector_mode(self):

        localctx = XplorMRParser.Vector_modeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 202, self.RULE_vector_mode)
        self._la = 0 # Token type
        try:
            self.state = 2026
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [XplorMRParser.Do_Lp, XplorMRParser.Identify_Lp]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2020
                _la = self._input.LA(1)
                if not(_la==XplorMRParser.Do_Lp or _la==XplorMRParser.Identify_Lp):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 2021
                self.vector_expression()
                self.state = 2022
                self.match(XplorMRParser.R_paren_VE)
                pass
            elif token in [XplorMRParser.Show]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2024
                self.match(XplorMRParser.Show)
                self.state = 2025
                self.vector_show_property()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Vector_expressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Atom_properties_VE(self):
            return self.getToken(XplorMRParser.Atom_properties_VE, 0)

        def Equ_op_VE(self):
            return self.getToken(XplorMRParser.Equ_op_VE, 0)

        def vector_operation(self):
            return self.getTypedRuleContext(XplorMRParser.Vector_operationContext,0)


        def getRuleIndex(self):
            return XplorMRParser.RULE_vector_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVector_expression" ):
                listener.enterVector_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVector_expression" ):
                listener.exitVector_expression(self)




    def vector_expression(self):

        localctx = XplorMRParser.Vector_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 204, self.RULE_vector_expression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2028
            self.match(XplorMRParser.Atom_properties_VE)
            self.state = 2031
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==XplorMRParser.Equ_op_VE:
                self.state = 2029
                self.match(XplorMRParser.Equ_op_VE)
                self.state = 2030
                self.vector_operation()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Vector_operationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def vflc(self):
            return self.getTypedRuleContext(XplorMRParser.VflcContext,0)


        def vector_operation(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Vector_operationContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Vector_operationContext,i)


        def Add_op_VE(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Add_op_VE)
            else:
                return self.getToken(XplorMRParser.Add_op_VE, i)

        def Sub_op_VE(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Sub_op_VE)
            else:
                return self.getToken(XplorMRParser.Sub_op_VE, i)

        def Mul_op_VE(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Mul_op_VE)
            else:
                return self.getToken(XplorMRParser.Mul_op_VE, i)

        def Div_op_VE(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Div_op_VE)
            else:
                return self.getToken(XplorMRParser.Div_op_VE, i)

        def Exp_op_VE(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Exp_op_VE)
            else:
                return self.getToken(XplorMRParser.Exp_op_VE, i)

        def getRuleIndex(self):
            return XplorMRParser.RULE_vector_operation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVector_operation" ):
                listener.enterVector_operation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVector_operation" ):
                listener.exitVector_operation(self)




    def vector_operation(self):

        localctx = XplorMRParser.Vector_operationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 206, self.RULE_vector_operation)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2033
            self.vflc()
            self.state = 2038
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,184,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2034
                    _la = self._input.LA(1)
                    if not(((((_la - 225)) & ~0x3f) == 0 and ((1 << (_la - 225)) & ((1 << (XplorMRParser.Add_op_VE - 225)) | (1 << (XplorMRParser.Sub_op_VE - 225)) | (1 << (XplorMRParser.Mul_op_VE - 225)) | (1 << (XplorMRParser.Div_op_VE - 225)) | (1 << (XplorMRParser.Exp_op_VE - 225)))) != 0)):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 2035
                    self.vector_operation() 
                self.state = 2040
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,184,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VflcContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Atom_properties_VE(self):
            return self.getToken(XplorMRParser.Atom_properties_VE, 0)

        def vector_func_call(self):
            return self.getTypedRuleContext(XplorMRParser.Vector_func_callContext,0)


        def Integer_VE(self):
            return self.getToken(XplorMRParser.Integer_VE, 0)

        def Real_VE(self):
            return self.getToken(XplorMRParser.Real_VE, 0)

        def Simple_name_VE(self):
            return self.getToken(XplorMRParser.Simple_name_VE, 0)

        def Double_quote_string_VE(self):
            return self.getToken(XplorMRParser.Double_quote_string_VE, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_vflc

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVflc" ):
                listener.enterVflc(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVflc" ):
                listener.exitVflc(self)




    def vflc(self):

        localctx = XplorMRParser.VflcContext(self, self._ctx, self.state)
        self.enterRule(localctx, 208, self.RULE_vflc)
        try:
            self.state = 2047
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [XplorMRParser.Atom_properties_VE]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2041
                self.match(XplorMRParser.Atom_properties_VE)
                pass
            elif token in [XplorMRParser.Abs_VE, XplorMRParser.Acos_VE, XplorMRParser.Cos_VE, XplorMRParser.Decode_VE, XplorMRParser.Encode_VE, XplorMRParser.Exp_VE, XplorMRParser.Gauss_VE, XplorMRParser.Heavy_VE, XplorMRParser.Int_VE, XplorMRParser.Log10_VE, XplorMRParser.Log_VE, XplorMRParser.Max_VE, XplorMRParser.Maxw_VE, XplorMRParser.Min_VE, XplorMRParser.Mod_VE, XplorMRParser.Norm_VE, XplorMRParser.Random_VE, XplorMRParser.Sign_VE, XplorMRParser.Sin_VE, XplorMRParser.Sqrt_VE, XplorMRParser.Tan_VE]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2042
                self.vector_func_call()
                pass
            elif token in [XplorMRParser.Integer_VE]:
                self.enterOuterAlt(localctx, 3)
                self.state = 2043
                self.match(XplorMRParser.Integer_VE)
                pass
            elif token in [XplorMRParser.Real_VE]:
                self.enterOuterAlt(localctx, 4)
                self.state = 2044
                self.match(XplorMRParser.Real_VE)
                pass
            elif token in [XplorMRParser.Simple_name_VE]:
                self.enterOuterAlt(localctx, 5)
                self.state = 2045
                self.match(XplorMRParser.Simple_name_VE)
                pass
            elif token in [XplorMRParser.Double_quote_string_VE]:
                self.enterOuterAlt(localctx, 6)
                self.state = 2046
                self.match(XplorMRParser.Double_quote_string_VE)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Vector_func_callContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Abs_VE(self):
            return self.getToken(XplorMRParser.Abs_VE, 0)

        def L_paren_VF(self):
            return self.getToken(XplorMRParser.L_paren_VF, 0)

        def vflc(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.VflcContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.VflcContext,i)


        def R_paren_VE(self):
            return self.getToken(XplorMRParser.R_paren_VE, 0)

        def Acos_VE(self):
            return self.getToken(XplorMRParser.Acos_VE, 0)

        def Cos_VE(self):
            return self.getToken(XplorMRParser.Cos_VE, 0)

        def Decode_VE(self):
            return self.getToken(XplorMRParser.Decode_VE, 0)

        def Encode_VE(self):
            return self.getToken(XplorMRParser.Encode_VE, 0)

        def Exp_VE(self):
            return self.getToken(XplorMRParser.Exp_VE, 0)

        def Gauss_VE(self):
            return self.getToken(XplorMRParser.Gauss_VE, 0)

        def Heavy_VE(self):
            return self.getToken(XplorMRParser.Heavy_VE, 0)

        def Int_VE(self):
            return self.getToken(XplorMRParser.Int_VE, 0)

        def Log10_VE(self):
            return self.getToken(XplorMRParser.Log10_VE, 0)

        def Log_VE(self):
            return self.getToken(XplorMRParser.Log_VE, 0)

        def Max_VE(self):
            return self.getToken(XplorMRParser.Max_VE, 0)

        def Comma_VE(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Comma_VE)
            else:
                return self.getToken(XplorMRParser.Comma_VE, i)

        def Maxw_VE(self):
            return self.getToken(XplorMRParser.Maxw_VE, 0)

        def Min_VE(self):
            return self.getToken(XplorMRParser.Min_VE, 0)

        def Mod_VE(self):
            return self.getToken(XplorMRParser.Mod_VE, 0)

        def Norm_VE(self):
            return self.getToken(XplorMRParser.Norm_VE, 0)

        def Random_VE(self):
            return self.getToken(XplorMRParser.Random_VE, 0)

        def Sign_VE(self):
            return self.getToken(XplorMRParser.Sign_VE, 0)

        def Sin_VE(self):
            return self.getToken(XplorMRParser.Sin_VE, 0)

        def Sqrt_VE(self):
            return self.getToken(XplorMRParser.Sqrt_VE, 0)

        def Tan_VE(self):
            return self.getToken(XplorMRParser.Tan_VE, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_vector_func_call

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVector_func_call" ):
                listener.enterVector_func_call(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVector_func_call" ):
                listener.exitVector_func_call(self)




    def vector_func_call(self):

        localctx = XplorMRParser.Vector_func_callContext(self, self._ctx, self.state)
        self.enterRule(localctx, 210, self.RULE_vector_func_call)
        self._la = 0 # Token type
        try:
            self.state = 2168
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [XplorMRParser.Abs_VE]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2049
                self.match(XplorMRParser.Abs_VE)
                self.state = 2050
                self.match(XplorMRParser.L_paren_VF)
                self.state = 2051
                self.vflc()
                self.state = 2052
                self.match(XplorMRParser.R_paren_VE)
                pass
            elif token in [XplorMRParser.Acos_VE]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2054
                self.match(XplorMRParser.Acos_VE)
                self.state = 2055
                self.match(XplorMRParser.L_paren_VF)
                self.state = 2056
                self.vflc()
                self.state = 2057
                self.match(XplorMRParser.R_paren_VE)
                pass
            elif token in [XplorMRParser.Cos_VE]:
                self.enterOuterAlt(localctx, 3)
                self.state = 2059
                self.match(XplorMRParser.Cos_VE)
                self.state = 2060
                self.match(XplorMRParser.L_paren_VF)
                self.state = 2061
                self.vflc()
                self.state = 2062
                self.match(XplorMRParser.R_paren_VE)
                pass
            elif token in [XplorMRParser.Decode_VE]:
                self.enterOuterAlt(localctx, 4)
                self.state = 2064
                self.match(XplorMRParser.Decode_VE)
                self.state = 2065
                self.match(XplorMRParser.L_paren_VF)
                self.state = 2066
                self.vflc()
                self.state = 2067
                self.match(XplorMRParser.R_paren_VE)
                pass
            elif token in [XplorMRParser.Encode_VE]:
                self.enterOuterAlt(localctx, 5)
                self.state = 2069
                self.match(XplorMRParser.Encode_VE)
                self.state = 2070
                self.match(XplorMRParser.L_paren_VF)
                self.state = 2071
                self.vflc()
                self.state = 2072
                self.match(XplorMRParser.R_paren_VE)
                pass
            elif token in [XplorMRParser.Exp_VE]:
                self.enterOuterAlt(localctx, 6)
                self.state = 2074
                self.match(XplorMRParser.Exp_VE)
                self.state = 2075
                self.match(XplorMRParser.L_paren_VF)
                self.state = 2076
                self.vflc()
                self.state = 2077
                self.match(XplorMRParser.R_paren_VE)
                pass
            elif token in [XplorMRParser.Gauss_VE]:
                self.enterOuterAlt(localctx, 7)
                self.state = 2079
                self.match(XplorMRParser.Gauss_VE)
                self.state = 2080
                self.match(XplorMRParser.L_paren_VF)
                self.state = 2081
                self.vflc()
                self.state = 2082
                self.match(XplorMRParser.R_paren_VE)
                pass
            elif token in [XplorMRParser.Heavy_VE]:
                self.enterOuterAlt(localctx, 8)
                self.state = 2084
                self.match(XplorMRParser.Heavy_VE)
                self.state = 2085
                self.match(XplorMRParser.L_paren_VF)
                self.state = 2086
                self.vflc()
                self.state = 2087
                self.match(XplorMRParser.R_paren_VE)
                pass
            elif token in [XplorMRParser.Int_VE]:
                self.enterOuterAlt(localctx, 9)
                self.state = 2089
                self.match(XplorMRParser.Int_VE)
                self.state = 2090
                self.match(XplorMRParser.L_paren_VF)
                self.state = 2091
                self.vflc()
                self.state = 2092
                self.match(XplorMRParser.R_paren_VE)
                pass
            elif token in [XplorMRParser.Log10_VE]:
                self.enterOuterAlt(localctx, 10)
                self.state = 2094
                self.match(XplorMRParser.Log10_VE)
                self.state = 2095
                self.match(XplorMRParser.L_paren_VF)
                self.state = 2096
                self.vflc()
                self.state = 2097
                self.match(XplorMRParser.R_paren_VE)
                pass
            elif token in [XplorMRParser.Log_VE]:
                self.enterOuterAlt(localctx, 11)
                self.state = 2099
                self.match(XplorMRParser.Log_VE)
                self.state = 2100
                self.match(XplorMRParser.L_paren_VF)
                self.state = 2101
                self.vflc()
                self.state = 2102
                self.match(XplorMRParser.R_paren_VE)
                pass
            elif token in [XplorMRParser.Max_VE]:
                self.enterOuterAlt(localctx, 12)
                self.state = 2104
                self.match(XplorMRParser.Max_VE)
                self.state = 2105
                self.match(XplorMRParser.L_paren_VF)
                self.state = 2106
                self.vflc()
                self.state = 2111
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==XplorMRParser.Comma_VE:
                    self.state = 2107
                    self.match(XplorMRParser.Comma_VE)
                    self.state = 2108
                    self.vflc()
                    self.state = 2113
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 2114
                self.match(XplorMRParser.R_paren_VE)
                pass
            elif token in [XplorMRParser.Maxw_VE]:
                self.enterOuterAlt(localctx, 13)
                self.state = 2116
                self.match(XplorMRParser.Maxw_VE)
                self.state = 2117
                self.match(XplorMRParser.L_paren_VF)
                self.state = 2118
                self.vflc()
                self.state = 2119
                self.match(XplorMRParser.R_paren_VE)
                pass
            elif token in [XplorMRParser.Min_VE]:
                self.enterOuterAlt(localctx, 14)
                self.state = 2121
                self.match(XplorMRParser.Min_VE)
                self.state = 2122
                self.match(XplorMRParser.L_paren_VF)
                self.state = 2123
                self.vflc()
                self.state = 2128
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==XplorMRParser.Comma_VE:
                    self.state = 2124
                    self.match(XplorMRParser.Comma_VE)
                    self.state = 2125
                    self.vflc()
                    self.state = 2130
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 2131
                self.match(XplorMRParser.R_paren_VE)
                pass
            elif token in [XplorMRParser.Mod_VE]:
                self.enterOuterAlt(localctx, 15)
                self.state = 2133
                self.match(XplorMRParser.Mod_VE)
                self.state = 2134
                self.match(XplorMRParser.L_paren_VF)
                self.state = 2135
                self.vflc()
                self.state = 2136
                self.match(XplorMRParser.Comma_VE)
                self.state = 2137
                self.vflc()
                self.state = 2138
                self.match(XplorMRParser.R_paren_VE)
                pass
            elif token in [XplorMRParser.Norm_VE]:
                self.enterOuterAlt(localctx, 16)
                self.state = 2140
                self.match(XplorMRParser.Norm_VE)
                self.state = 2141
                self.match(XplorMRParser.L_paren_VF)
                self.state = 2142
                self.vflc()
                self.state = 2143
                self.match(XplorMRParser.R_paren_VE)
                pass
            elif token in [XplorMRParser.Random_VE]:
                self.enterOuterAlt(localctx, 17)
                self.state = 2145
                self.match(XplorMRParser.Random_VE)
                self.state = 2146
                self.match(XplorMRParser.L_paren_VF)
                self.state = 2147
                self.match(XplorMRParser.R_paren_VE)
                pass
            elif token in [XplorMRParser.Sign_VE]:
                self.enterOuterAlt(localctx, 18)
                self.state = 2148
                self.match(XplorMRParser.Sign_VE)
                self.state = 2149
                self.match(XplorMRParser.L_paren_VF)
                self.state = 2150
                self.vflc()
                self.state = 2151
                self.match(XplorMRParser.R_paren_VE)
                pass
            elif token in [XplorMRParser.Sin_VE]:
                self.enterOuterAlt(localctx, 19)
                self.state = 2153
                self.match(XplorMRParser.Sin_VE)
                self.state = 2154
                self.match(XplorMRParser.L_paren_VF)
                self.state = 2155
                self.vflc()
                self.state = 2156
                self.match(XplorMRParser.R_paren_VE)
                pass
            elif token in [XplorMRParser.Sqrt_VE]:
                self.enterOuterAlt(localctx, 20)
                self.state = 2158
                self.match(XplorMRParser.Sqrt_VE)
                self.state = 2159
                self.match(XplorMRParser.L_paren_VF)
                self.state = 2160
                self.vflc()
                self.state = 2161
                self.match(XplorMRParser.R_paren_VE)
                pass
            elif token in [XplorMRParser.Tan_VE]:
                self.enterOuterAlt(localctx, 21)
                self.state = 2163
                self.match(XplorMRParser.Tan_VE)
                self.state = 2164
                self.match(XplorMRParser.L_paren_VF)
                self.state = 2165
                self.vflc()
                self.state = 2166
                self.match(XplorMRParser.R_paren_VE)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Vector_show_propertyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def L_paren_VS(self):
            return self.getToken(XplorMRParser.L_paren_VS, 0)

        def Atom_properties_VS(self):
            return self.getToken(XplorMRParser.Atom_properties_VS, 0)

        def R_paren_VS(self):
            return self.getToken(XplorMRParser.R_paren_VS, 0)

        def Average_VS(self):
            return self.getToken(XplorMRParser.Average_VS, 0)

        def Element_VS(self):
            return self.getToken(XplorMRParser.Element_VS, 0)

        def Max_VS(self):
            return self.getToken(XplorMRParser.Max_VS, 0)

        def Min_VS(self):
            return self.getToken(XplorMRParser.Min_VS, 0)

        def Norm_VS(self):
            return self.getToken(XplorMRParser.Norm_VS, 0)

        def Rms_VS(self):
            return self.getToken(XplorMRParser.Rms_VS, 0)

        def Sum_VS(self):
            return self.getToken(XplorMRParser.Sum_VS, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_vector_show_property

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVector_show_property" ):
                listener.enterVector_show_property(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVector_show_property" ):
                listener.exitVector_show_property(self)




    def vector_show_property(self):

        localctx = XplorMRParser.Vector_show_propertyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 212, self.RULE_vector_show_property)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2170
            _la = self._input.LA(1)
            if not(((((_la - 264)) & ~0x3f) == 0 and ((1 << (_la - 264)) & ((1 << (XplorMRParser.Average_VS - 264)) | (1 << (XplorMRParser.Element_VS - 264)) | (1 << (XplorMRParser.Max_VS - 264)) | (1 << (XplorMRParser.Min_VS - 264)) | (1 << (XplorMRParser.Norm_VS - 264)) | (1 << (XplorMRParser.Rms_VS - 264)) | (1 << (XplorMRParser.Sum_VS - 264)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 2171
            self.match(XplorMRParser.L_paren_VS)
            self.state = 2172
            self.match(XplorMRParser.Atom_properties_VS)
            self.state = 2173
            self.match(XplorMRParser.R_paren_VS)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Evaluate_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Evaluate_Lp(self):
            return self.getToken(XplorMRParser.Evaluate_Lp, 0)

        def Symbol_name_VE(self):
            return self.getToken(XplorMRParser.Symbol_name_VE, 0)

        def Equ_op_VE(self):
            return self.getToken(XplorMRParser.Equ_op_VE, 0)

        def evaluate_operation(self):
            return self.getTypedRuleContext(XplorMRParser.Evaluate_operationContext,0)


        def R_paren_VE(self):
            return self.getToken(XplorMRParser.R_paren_VE, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_evaluate_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEvaluate_statement" ):
                listener.enterEvaluate_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEvaluate_statement" ):
                listener.exitEvaluate_statement(self)




    def evaluate_statement(self):

        localctx = XplorMRParser.Evaluate_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 214, self.RULE_evaluate_statement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2175
            self.match(XplorMRParser.Evaluate_Lp)
            self.state = 2176
            self.match(XplorMRParser.Symbol_name_VE)
            self.state = 2177
            self.match(XplorMRParser.Equ_op_VE)
            self.state = 2178
            self.evaluate_operation()
            self.state = 2179
            self.match(XplorMRParser.R_paren_VE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Evaluate_operationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def vflc(self):
            return self.getTypedRuleContext(XplorMRParser.VflcContext,0)


        def evaluate_operation(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Evaluate_operationContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Evaluate_operationContext,i)


        def Add_op_VE(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Add_op_VE)
            else:
                return self.getToken(XplorMRParser.Add_op_VE, i)

        def Sub_op_VE(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Sub_op_VE)
            else:
                return self.getToken(XplorMRParser.Sub_op_VE, i)

        def Mul_op_VE(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Mul_op_VE)
            else:
                return self.getToken(XplorMRParser.Mul_op_VE, i)

        def Div_op_VE(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Div_op_VE)
            else:
                return self.getToken(XplorMRParser.Div_op_VE, i)

        def Exp_op_VE(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Exp_op_VE)
            else:
                return self.getToken(XplorMRParser.Exp_op_VE, i)

        def getRuleIndex(self):
            return XplorMRParser.RULE_evaluate_operation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEvaluate_operation" ):
                listener.enterEvaluate_operation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEvaluate_operation" ):
                listener.exitEvaluate_operation(self)




    def evaluate_operation(self):

        localctx = XplorMRParser.Evaluate_operationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 216, self.RULE_evaluate_operation)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2181
            self.vflc()
            self.state = 2186
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,189,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2182
                    _la = self._input.LA(1)
                    if not(((((_la - 225)) & ~0x3f) == 0 and ((1 << (_la - 225)) & ((1 << (XplorMRParser.Add_op_VE - 225)) | (1 << (XplorMRParser.Sub_op_VE - 225)) | (1 << (XplorMRParser.Mul_op_VE - 225)) | (1 << (XplorMRParser.Div_op_VE - 225)) | (1 << (XplorMRParser.Exp_op_VE - 225)))) != 0)):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 2183
                    self.evaluate_operation() 
                self.state = 2188
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,189,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx



    def sempred(self, localctx:RuleContext, ruleIndex:int, predIndex:int):
        if self._predicates == None:
            self._predicates = dict()
        self._predicates[94] = self.factor_sempred
        pred = self._predicates.get(ruleIndex, None)
        if pred is None:
            raise Exception("No predicate with index:" + str(ruleIndex))
        else:
            return pred(localctx, predIndex)

    def factor_sempred(self, localctx:FactorContext, predIndex:int):
            if predIndex == 0:
                return self.precpred(self._ctx, 32)
         

            if predIndex == 1:
                return self.precpred(self._ctx, 14)
         




