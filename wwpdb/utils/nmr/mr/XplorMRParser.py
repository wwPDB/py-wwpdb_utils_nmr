# Generated from XplorMRParser.g4 by ANTLR 4.13.0
# encoding: utf-8
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
	from typing import TextIO
else:
	from typing.io import TextIO

def serializedATN():
    return [
        4,1,305,3058,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,
        7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,
        13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,
        20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,
        26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,
        33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,
        39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,
        46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,52,7,
        52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,2,57,7,57,2,58,7,58,2,
        59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,2,64,7,64,2,65,7,
        65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,2,71,7,71,2,
        72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,7,77,2,78,7,
        78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,2,84,7,84,2,
        85,7,85,2,86,7,86,2,87,7,87,2,88,7,88,2,89,7,89,2,90,7,90,2,91,7,
        91,2,92,7,92,2,93,7,93,2,94,7,94,2,95,7,95,2,96,7,96,2,97,7,97,2,
        98,7,98,2,99,7,99,2,100,7,100,2,101,7,101,2,102,7,102,2,103,7,103,
        2,104,7,104,2,105,7,105,2,106,7,106,2,107,7,107,2,108,7,108,2,109,
        7,109,2,110,7,110,2,111,7,111,2,112,7,112,2,113,7,113,2,114,7,114,
        2,115,7,115,2,116,7,116,2,117,7,117,2,118,7,118,2,119,7,119,2,120,
        7,120,2,121,7,121,2,122,7,122,2,123,7,123,2,124,7,124,2,125,7,125,
        2,126,7,126,2,127,7,127,2,128,7,128,2,129,7,129,2,130,7,130,1,0,
        1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,
        1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,
        1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,
        1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,5,0,321,8,0,10,0,12,0,324,9,
        0,1,0,1,0,1,1,1,1,5,1,330,8,1,10,1,12,1,333,9,1,1,1,1,1,1,2,1,2,
        5,2,339,8,2,10,2,12,2,342,9,2,1,2,1,2,1,3,3,3,347,8,3,1,3,1,3,5,
        3,351,8,3,10,3,12,3,354,9,3,1,3,1,3,1,4,1,4,5,4,360,8,4,10,4,12,
        4,363,9,4,1,4,1,4,1,4,5,4,368,8,4,10,4,12,4,371,9,4,1,4,1,4,1,4,
        5,4,376,8,4,10,4,12,4,379,9,4,1,4,1,4,1,4,5,4,384,8,4,10,4,12,4,
        387,9,4,1,4,1,4,1,4,5,4,392,8,4,10,4,12,4,395,9,4,1,4,3,4,398,8,
        4,1,5,3,5,401,8,5,1,5,1,5,5,5,405,8,5,10,5,12,5,408,9,5,1,5,1,5,
        1,6,3,6,413,8,6,1,6,1,6,5,6,417,8,6,10,6,12,6,420,9,6,1,6,1,6,1,
        7,1,7,5,7,426,8,7,10,7,12,7,429,9,7,1,7,1,7,1,8,1,8,5,8,435,8,8,
        10,8,12,8,438,9,8,1,8,1,8,1,9,1,9,5,9,444,8,9,10,9,12,9,447,9,9,
        1,9,1,9,1,10,1,10,5,10,453,8,10,10,10,12,10,456,9,10,1,10,1,10,1,
        11,1,11,5,11,462,8,11,10,11,12,11,465,9,11,1,11,1,11,1,12,1,12,5,
        12,471,8,12,10,12,12,12,474,9,12,1,12,1,12,1,13,1,13,5,13,480,8,
        13,10,13,12,13,483,9,13,1,13,1,13,1,14,1,14,5,14,489,8,14,10,14,
        12,14,492,9,14,1,14,1,14,1,15,1,15,5,15,498,8,15,10,15,12,15,501,
        9,15,1,15,1,15,1,16,1,16,5,16,507,8,16,10,16,12,16,510,9,16,1,16,
        1,16,1,17,1,17,5,17,516,8,17,10,17,12,17,519,9,17,1,17,1,17,1,18,
        1,18,5,18,525,8,18,10,18,12,18,528,9,18,1,18,1,18,1,19,1,19,5,19,
        534,8,19,10,19,12,19,537,9,19,1,19,1,19,1,20,1,20,5,20,543,8,20,
        10,20,12,20,546,9,20,1,20,1,20,1,21,1,21,5,21,552,8,21,10,21,12,
        21,555,9,21,1,21,1,21,1,22,1,22,5,22,561,8,22,10,22,12,22,564,9,
        22,1,22,1,22,1,23,1,23,5,23,570,8,23,10,23,12,23,573,9,23,1,23,1,
        23,1,24,1,24,5,24,579,8,24,10,24,12,24,582,9,24,1,24,1,24,1,25,1,
        25,5,25,588,8,25,10,25,12,25,591,9,25,1,25,1,25,1,26,1,26,1,26,1,
        26,1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,26,3,26,610,
        8,26,1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,26,
        1,26,1,26,1,26,1,26,1,26,1,26,1,26,3,26,631,8,26,1,26,1,26,1,26,
        1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,26,3,26,644,8,26,1,26,1,26,
        1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,26,
        1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,26,
        3,26,674,8,26,1,26,3,26,677,8,26,1,27,1,27,1,27,1,27,1,27,3,27,684,
        8,27,1,27,3,27,687,8,27,1,27,5,27,690,8,27,10,27,12,27,693,9,27,
        1,27,1,27,3,27,697,8,27,1,27,1,27,1,27,3,27,702,8,27,1,27,3,27,705,
        8,27,1,27,3,27,708,8,27,5,27,710,8,27,10,27,12,27,713,9,27,1,28,
        1,28,3,28,717,8,28,1,28,1,28,1,28,3,28,722,8,28,1,28,1,28,1,28,1,
        28,1,28,3,28,729,8,28,1,29,1,29,3,29,733,8,29,1,29,1,29,1,29,3,29,
        738,8,29,1,29,1,29,1,29,3,29,743,8,29,1,29,1,29,1,29,3,29,748,8,
        29,1,29,1,29,1,29,3,29,753,8,29,1,29,1,29,1,29,3,29,758,8,29,1,29,
        1,29,1,29,3,29,763,8,29,1,29,1,29,3,29,767,8,29,1,30,1,30,1,30,1,
        30,1,30,3,30,774,8,30,1,30,1,30,1,30,1,30,3,30,780,8,30,1,30,1,30,
        3,30,784,8,30,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,
        1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,3,32,806,8,32,
        1,32,1,32,1,32,3,32,811,8,32,1,32,1,32,1,32,3,32,816,8,32,1,32,1,
        32,1,32,1,32,1,32,3,32,823,8,32,1,33,1,33,1,33,1,33,1,33,1,33,1,
        33,1,33,1,33,3,33,834,8,33,1,33,3,33,837,8,33,1,34,1,34,1,34,1,34,
        1,34,1,34,3,34,845,8,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,
        1,34,1,34,1,34,1,34,3,34,859,8,34,1,34,1,34,1,34,3,34,864,8,34,1,
        34,1,34,1,34,3,34,869,8,34,1,34,1,34,1,34,1,34,1,34,3,34,876,8,34,
        1,35,1,35,1,35,1,35,1,35,1,35,1,35,1,35,1,35,1,35,1,35,1,35,1,35,
        1,35,1,35,3,35,893,8,35,1,36,1,36,1,36,3,36,898,8,36,1,36,1,36,1,
        36,1,36,3,36,904,8,36,1,36,1,36,1,36,1,36,1,36,3,36,911,8,36,1,36,
        1,36,1,36,3,36,916,8,36,1,36,1,36,1,36,1,36,1,36,3,36,923,8,36,1,
        37,1,37,1,37,1,37,1,37,1,37,1,37,1,37,1,37,1,37,3,37,935,8,37,1,
        38,1,38,1,38,1,38,1,38,1,38,3,38,943,8,38,1,38,1,38,1,38,3,38,948,
        8,38,1,38,1,38,1,38,1,38,1,38,3,38,955,8,38,1,39,1,39,1,39,1,39,
        1,39,3,39,962,8,39,1,40,1,40,1,40,1,40,1,40,1,40,1,40,1,40,1,40,
        1,40,3,40,974,8,40,1,40,1,40,1,40,3,40,979,8,40,1,40,1,40,1,40,3,
        40,984,8,40,1,40,1,40,1,40,1,40,1,40,1,40,1,40,3,40,993,8,40,1,41,
        1,41,1,41,1,41,1,41,1,41,1,41,3,41,1002,8,41,1,42,1,42,1,42,1,42,
        1,42,3,42,1009,8,42,1,43,1,43,5,43,1013,8,43,10,43,12,43,1016,9,
        43,1,43,1,43,1,44,1,44,3,44,1022,8,44,1,44,1,44,1,44,3,44,1027,8,
        44,1,44,3,44,1030,8,44,1,45,1,45,1,45,3,45,1035,8,45,1,45,1,45,1,
        45,3,45,1040,8,45,1,45,1,45,1,45,3,45,1045,8,45,1,45,1,45,3,45,1049,
        8,45,1,45,1,45,1,45,1,45,3,45,1055,8,45,1,45,1,45,3,45,1059,8,45,
        1,45,1,45,3,45,1063,8,45,1,45,3,45,1066,8,45,3,45,1068,8,45,1,45,
        1,45,3,45,1072,8,45,1,46,1,46,1,46,1,46,1,46,1,46,1,47,1,47,1,47,
        1,47,1,47,1,47,1,47,1,47,3,47,1088,8,47,1,47,1,47,1,47,3,47,1093,
        8,47,1,47,1,47,1,47,1,47,1,47,1,47,3,47,1101,8,47,1,47,1,47,1,47,
        1,47,1,47,1,47,3,47,1109,8,47,1,48,1,48,1,48,1,48,1,49,1,49,1,49,
        1,49,1,49,1,49,1,49,1,49,1,49,1,49,1,49,3,49,1126,8,49,1,49,1,49,
        1,49,1,49,1,49,1,49,3,49,1134,8,49,1,49,1,49,3,49,1138,8,49,1,49,
        1,49,1,49,3,49,1143,8,49,1,49,1,49,1,49,3,49,1148,8,49,1,49,1,49,
        1,49,1,49,1,49,1,49,3,49,1156,8,49,1,49,3,49,1159,8,49,1,50,1,50,
        1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,3,50,1171,8,50,1,50,1,50,
        1,50,1,50,1,50,3,50,1178,8,50,1,51,1,51,1,51,1,51,1,51,1,51,1,51,
        1,51,1,51,1,51,1,51,3,51,1191,8,51,1,51,1,51,1,51,3,51,1196,8,51,
        1,51,1,51,1,51,1,51,1,51,1,51,1,51,3,51,1205,8,51,1,51,1,51,1,51,
        1,51,1,51,1,51,1,51,3,51,1214,8,51,1,52,1,52,1,52,1,52,1,52,1,52,
        1,52,1,52,1,52,1,53,1,53,1,53,1,53,1,53,1,54,1,54,1,54,1,54,1,54,
        1,54,1,54,1,54,1,54,1,54,1,54,1,54,1,54,1,54,1,54,1,54,1,54,3,54,
        1247,8,54,1,54,1,54,3,54,1251,8,54,1,54,1,54,1,54,1,54,1,54,1,54,
        3,54,1259,8,54,1,54,1,54,1,54,3,54,1264,8,54,1,55,1,55,1,55,3,55,
        1269,8,55,1,55,1,55,3,55,1273,8,55,1,56,1,56,1,56,1,56,1,57,1,57,
        1,57,1,57,1,57,1,57,3,57,1285,8,57,1,57,1,57,1,58,1,58,1,58,1,59,
        1,59,1,59,1,60,1,60,1,60,1,61,1,61,1,61,1,62,1,62,1,62,1,62,1,62,
        1,62,1,62,1,62,3,62,1309,8,62,1,63,1,63,1,63,1,64,1,64,1,64,1,64,
        1,64,1,64,3,64,1320,8,64,1,64,1,64,1,64,1,64,1,64,1,64,1,64,1,64,
        1,64,3,64,1331,8,64,1,64,1,64,1,64,1,64,3,64,1337,8,64,1,64,1,64,
        1,64,1,64,3,64,1343,8,64,1,64,1,64,3,64,1347,8,64,1,64,1,64,1,64,
        1,64,1,64,1,64,1,64,1,64,1,64,3,64,1358,8,64,1,64,1,64,1,64,1,64,
        3,64,1364,8,64,1,64,1,64,1,64,1,64,3,64,1370,8,64,1,64,1,64,1,64,
        1,64,1,64,3,64,1377,8,64,1,64,1,64,1,64,1,64,1,64,1,64,1,64,1,64,
        3,64,1387,8,64,1,64,1,64,1,64,1,64,3,64,1393,8,64,1,64,1,64,1,64,
        1,64,3,64,1399,8,64,1,64,1,64,1,64,3,64,1404,8,64,1,64,1,64,1,64,
        1,64,1,64,1,64,1,64,3,64,1413,8,64,1,64,3,64,1416,8,64,1,64,3,64,
        1419,8,64,1,64,1,64,3,64,1423,8,64,1,65,1,65,1,65,1,65,1,65,1,65,
        1,65,1,65,1,65,1,65,3,65,1435,8,65,1,65,1,65,1,65,1,65,1,65,3,65,
        1442,8,65,1,65,1,65,1,65,1,65,1,65,3,65,1449,8,65,1,66,1,66,1,66,
        1,66,3,66,1455,8,66,1,66,1,66,1,66,3,66,1460,8,66,1,67,1,67,1,67,
        1,67,1,67,1,68,1,68,1,68,1,68,1,68,1,68,1,68,1,68,1,68,1,68,1,68,
        3,68,1478,8,68,1,68,1,68,1,68,3,68,1483,8,68,1,68,1,68,1,68,3,68,
        1488,8,68,1,68,1,68,1,68,1,68,1,68,1,68,1,68,3,68,1497,8,68,1,69,
        1,69,1,69,1,69,1,69,1,69,1,69,1,69,1,69,3,69,1508,8,69,1,70,1,70,
        1,70,1,70,1,70,1,70,1,70,1,70,3,70,1518,8,70,1,70,1,70,1,70,1,70,
        1,70,1,70,1,70,1,70,1,70,1,70,1,70,1,70,1,70,1,70,1,70,1,70,1,70,
        1,70,1,70,1,70,1,70,1,70,1,70,1,70,3,70,1544,8,70,1,70,1,70,1,70,
        1,70,1,70,1,70,3,70,1552,8,70,1,70,1,70,1,70,1,70,1,70,1,70,1,70,
        1,70,1,70,1,70,1,70,1,70,1,70,1,70,1,70,1,70,1,70,3,70,1571,8,70,
        1,71,1,71,1,71,1,71,1,71,1,71,1,72,1,72,1,72,1,72,1,72,3,72,1584,
        8,72,1,72,1,72,1,72,1,72,1,72,1,72,1,72,1,72,1,72,1,72,1,72,1,72,
        1,72,1,72,1,72,3,72,1601,8,72,1,72,1,72,1,72,3,72,1606,8,72,1,72,
        1,72,1,72,3,72,1611,8,72,1,72,1,72,1,72,1,72,1,72,3,72,1618,8,72,
        1,73,1,73,1,73,1,73,1,73,1,73,1,73,1,73,1,73,1,73,3,73,1630,8,73,
        1,73,3,73,1633,8,73,1,74,1,74,1,74,1,74,3,74,1639,8,74,1,74,1,74,
        1,74,1,74,1,74,1,74,1,74,1,74,1,74,1,74,1,74,1,74,1,74,1,74,3,74,
        1655,8,74,1,74,1,74,1,74,3,74,1660,8,74,1,74,1,74,1,74,3,74,1665,
        8,74,1,74,1,74,1,74,1,74,1,74,3,74,1672,8,74,1,75,1,75,1,75,1,75,
        1,75,1,75,1,75,1,75,1,75,1,75,1,75,1,75,1,75,3,75,1687,8,75,1,75,
        1,75,1,75,3,75,1692,8,75,1,75,1,75,1,75,3,75,1697,8,75,1,75,1,75,
        1,75,1,75,1,75,3,75,1704,8,75,1,76,1,76,1,76,1,76,1,76,1,76,1,76,
        1,76,1,76,1,76,1,76,1,76,1,77,1,77,1,77,1,77,1,77,1,77,1,77,1,77,
        1,77,1,77,1,77,1,77,3,77,1730,8,77,1,77,1,77,1,77,3,77,1735,8,77,
        1,77,1,77,1,77,3,77,1740,8,77,1,77,1,77,1,77,1,77,1,77,1,77,3,77,
        1748,8,77,1,77,1,77,1,77,1,77,1,77,1,77,3,77,1756,8,77,1,78,1,78,
        1,78,1,78,1,78,1,78,1,78,1,78,1,78,1,78,1,78,1,78,1,78,3,78,1771,
        8,78,1,79,1,79,1,79,1,79,1,79,3,79,1778,8,79,1,79,1,79,1,79,1,79,
        1,79,3,79,1785,8,79,1,79,1,79,1,79,3,79,1790,8,79,1,79,1,79,1,79,
        1,79,3,79,1796,8,79,1,79,1,79,1,79,1,79,1,79,3,79,1803,8,79,1,79,
        1,79,1,79,1,79,1,79,3,79,1810,8,79,1,79,1,79,1,79,1,79,1,79,1,79,
        1,79,1,79,1,79,3,79,1821,8,79,1,79,1,79,3,79,1825,8,79,1,80,1,80,
        1,80,1,80,1,80,3,80,1832,8,80,1,81,1,81,1,81,1,81,1,81,1,81,1,81,
        1,81,1,81,1,81,1,81,3,81,1845,8,81,1,81,1,81,1,81,3,81,1850,8,81,
        1,81,1,81,1,81,1,81,1,81,1,81,3,81,1858,8,81,1,81,1,81,1,81,1,81,
        1,81,1,81,1,81,1,81,1,81,1,81,1,81,1,81,1,81,1,81,1,81,3,81,1875,
        8,81,1,82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,3,82,1885,8,82,1,82,
        3,82,1888,8,82,1,83,1,83,1,83,1,83,1,83,1,83,1,83,1,83,1,83,1,83,
        3,83,1900,8,83,1,83,1,83,1,83,3,83,1905,8,83,1,83,1,83,1,83,1,83,
        1,83,1,83,1,83,1,83,1,83,1,83,1,83,1,83,1,83,1,83,3,83,1921,8,83,
        1,84,1,84,1,84,1,84,1,84,1,84,1,84,1,84,1,84,3,84,1932,8,84,1,85,
        1,85,1,85,1,85,3,85,1938,8,85,1,85,1,85,1,85,3,85,1943,8,85,1,85,
        1,85,1,85,1,85,1,85,3,85,1950,8,85,1,86,1,86,1,86,1,86,1,86,1,86,
        1,86,1,87,1,87,1,87,1,87,1,87,1,87,1,87,1,87,3,87,1967,8,87,1,87,
        1,87,1,87,3,87,1972,8,87,1,87,1,87,1,87,1,87,1,87,1,87,1,87,3,87,
        1981,8,87,1,88,1,88,1,88,1,88,1,88,1,88,3,88,1989,8,88,1,89,1,89,
        1,89,1,89,1,89,3,89,1996,8,89,1,89,1,89,1,89,3,89,2001,8,89,1,89,
        1,89,1,89,1,89,1,89,3,89,2008,8,89,1,90,1,90,1,90,1,90,1,90,1,91,
        1,91,1,91,1,91,3,91,2019,8,91,1,91,1,91,1,91,3,91,2024,8,91,1,91,
        1,91,1,91,3,91,2029,8,91,1,91,1,91,1,91,3,91,2034,8,91,1,91,1,91,
        1,91,3,91,2039,8,91,1,91,1,91,1,91,3,91,2044,8,91,1,91,1,91,1,91,
        3,91,2049,8,91,1,91,1,91,1,91,3,91,2054,8,91,1,91,1,91,1,91,3,91,
        2059,8,91,1,91,1,91,1,91,3,91,2064,8,91,1,91,1,91,1,91,3,91,2069,
        8,91,1,91,1,91,1,91,3,91,2074,8,91,1,91,1,91,1,91,3,91,2079,8,91,
        1,91,3,91,2082,8,91,1,92,1,92,1,92,1,92,1,93,1,93,1,93,5,93,2091,
        8,93,10,93,12,93,2094,9,93,1,93,1,93,1,94,1,94,5,94,2100,8,94,10,
        94,12,94,2103,9,94,1,94,1,94,1,94,3,94,2108,8,94,1,95,1,95,3,95,
        2112,8,95,1,95,1,95,1,95,3,95,2117,8,95,1,95,1,95,1,95,3,95,2122,
        8,95,1,95,3,95,2125,8,95,1,96,1,96,1,96,1,96,1,97,1,97,1,97,5,97,
        2134,8,97,10,97,12,97,2137,9,97,1,98,1,98,1,98,5,98,2142,8,98,10,
        98,12,98,2145,9,98,1,99,1,99,1,99,1,99,1,99,1,99,1,99,1,99,1,99,
        1,99,1,99,1,99,3,99,2159,8,99,1,99,1,99,1,99,1,99,1,99,1,99,1,99,
        1,99,1,99,1,99,1,99,1,99,1,99,1,99,3,99,2175,8,99,1,99,3,99,2178,
        8,99,1,99,1,99,1,99,1,99,1,99,1,99,1,99,1,99,1,99,3,99,2189,8,99,
        1,99,1,99,1,99,3,99,2194,8,99,1,99,3,99,2197,8,99,1,99,1,99,1,99,
        1,99,1,99,1,99,3,99,2205,8,99,1,99,1,99,3,99,2209,8,99,1,99,1,99,
        1,99,1,99,1,99,1,99,1,99,1,99,1,99,3,99,2220,8,99,1,99,1,99,3,99,
        2224,8,99,1,99,1,99,3,99,2228,8,99,1,99,3,99,2231,8,99,1,99,1,99,
        1,99,1,99,1,99,1,99,1,99,1,99,1,99,1,99,1,99,3,99,2244,8,99,1,99,
        3,99,2247,8,99,1,99,1,99,1,99,1,99,1,99,3,99,2254,8,99,1,99,3,99,
        2257,8,99,1,99,1,99,1,99,1,99,1,99,3,99,2264,8,99,1,99,1,99,1,99,
        3,99,2269,8,99,1,99,3,99,2272,8,99,1,99,1,99,1,99,1,99,1,99,1,99,
        1,99,1,99,1,99,1,99,1,99,1,99,3,99,2286,8,99,1,99,1,99,1,99,1,99,
        1,99,1,99,5,99,2294,8,99,10,99,12,99,2297,9,99,1,100,1,100,1,101,
        1,101,1,102,1,102,1,103,1,103,1,104,1,104,3,104,2309,8,104,1,104,
        1,104,1,105,1,105,1,106,1,106,1,106,5,106,2318,8,106,10,106,12,106,
        2321,9,106,1,106,3,106,2324,8,106,3,106,2326,8,106,1,106,1,106,5,
        106,2330,8,106,10,106,12,106,2333,9,106,1,106,1,106,1,107,1,107,
        1,107,1,107,1,108,1,108,1,108,1,108,1,108,1,108,3,108,2347,8,108,
        1,109,1,109,1,109,3,109,2352,8,109,1,110,1,110,1,110,3,110,2357,
        8,110,1,111,1,111,1,111,1,111,1,111,1,111,1,111,3,111,2366,8,111,
        1,112,1,112,1,112,1,112,1,112,1,112,1,112,1,112,1,112,1,112,1,112,
        1,112,1,112,1,112,1,112,1,112,1,112,1,112,1,112,1,112,1,112,1,112,
        1,112,1,112,1,112,1,112,1,112,1,112,1,112,1,112,1,112,1,112,1,112,
        1,112,1,112,1,112,1,112,1,112,1,112,1,112,1,112,1,112,1,112,1,112,
        1,112,1,112,1,112,1,112,1,112,1,112,1,112,1,112,1,112,1,112,1,112,
        1,112,1,112,1,112,1,112,1,112,5,112,2428,8,112,10,112,12,112,2431,
        9,112,1,112,1,112,1,112,1,112,1,112,1,112,1,112,1,112,1,112,1,112,
        1,112,1,112,5,112,2445,8,112,10,112,12,112,2448,9,112,1,112,1,112,
        1,112,1,112,1,112,1,112,1,112,1,112,1,112,1,112,1,112,1,112,1,112,
        1,112,1,112,1,112,1,112,1,112,1,112,1,112,1,112,1,112,1,112,1,112,
        1,112,1,112,1,112,1,112,1,112,1,112,1,112,1,112,1,112,1,112,1,112,
        1,112,1,112,3,112,2487,8,112,1,113,1,113,1,113,1,113,1,113,1,114,
        1,114,1,114,1,114,1,114,1,114,1,115,1,115,1,115,3,115,2503,8,115,
        1,116,1,116,3,116,2507,8,116,1,116,1,116,1,116,1,116,1,116,1,116,
        1,116,1,116,1,116,1,116,3,116,2519,8,116,1,116,1,116,1,117,1,117,
        5,117,2525,8,117,10,117,12,117,2528,9,117,1,117,1,117,1,118,1,118,
        1,118,1,118,1,118,1,118,1,118,1,118,1,118,1,118,3,118,2542,8,118,
        1,118,1,118,1,118,1,118,1,118,1,118,1,118,1,118,1,118,1,118,1,118,
        1,118,1,118,3,118,2557,8,118,1,118,1,118,1,118,1,118,1,118,1,118,
        1,118,1,118,1,118,1,118,1,118,1,118,1,118,1,118,1,118,1,118,1,118,
        1,118,1,118,1,118,1,118,1,118,1,118,1,118,1,118,1,118,1,118,1,118,
        3,118,2587,8,118,1,119,1,119,1,119,1,119,1,119,5,119,2594,8,119,
        10,119,12,119,2597,9,119,1,119,5,119,2600,8,119,10,119,12,119,2603,
        9,119,1,119,5,119,2606,8,119,10,119,12,119,2609,9,119,3,119,2611,
        8,119,1,119,1,119,1,119,1,119,1,119,1,119,5,119,2619,8,119,10,119,
        12,119,2622,9,119,1,119,1,119,1,119,1,119,1,120,1,120,1,120,1,120,
        1,120,5,120,2633,8,120,10,120,12,120,2636,9,120,1,120,5,120,2639,
        8,120,10,120,12,120,2642,9,120,1,120,5,120,2645,8,120,10,120,12,
        120,2648,9,120,3,120,2650,8,120,1,120,1,120,1,120,1,120,1,120,1,
        120,5,120,2658,8,120,10,120,12,120,2661,9,120,1,120,1,120,1,120,
        1,120,1,121,1,121,1,121,1,121,1,121,5,121,2672,8,121,10,121,12,121,
        2675,9,121,1,121,5,121,2678,8,121,10,121,12,121,2681,9,121,1,121,
        5,121,2684,8,121,10,121,12,121,2687,9,121,3,121,2689,8,121,1,121,
        1,121,1,121,1,121,1,121,1,121,5,121,2697,8,121,10,121,12,121,2700,
        9,121,1,121,1,121,1,121,1,121,1,122,1,122,1,122,1,122,1,122,5,122,
        2711,8,122,10,122,12,122,2714,9,122,1,122,5,122,2717,8,122,10,122,
        12,122,2720,9,122,1,122,5,122,2723,8,122,10,122,12,122,2726,9,122,
        3,122,2728,8,122,1,122,1,122,1,122,1,122,1,122,1,122,5,122,2736,
        8,122,10,122,12,122,2739,9,122,1,122,1,122,1,122,1,122,1,123,1,123,
        1,123,1,123,1,123,5,123,2750,8,123,10,123,12,123,2753,9,123,1,123,
        5,123,2756,8,123,10,123,12,123,2759,9,123,1,123,5,123,2762,8,123,
        10,123,12,123,2765,9,123,3,123,2767,8,123,1,123,1,123,1,123,1,123,
        1,123,1,123,5,123,2775,8,123,10,123,12,123,2778,9,123,1,123,1,123,
        1,123,1,123,1,124,1,124,1,124,1,124,1,124,5,124,2789,8,124,10,124,
        12,124,2792,9,124,1,124,5,124,2795,8,124,10,124,12,124,2798,9,124,
        1,124,5,124,2801,8,124,10,124,12,124,2804,9,124,3,124,2806,8,124,
        1,124,1,124,1,124,1,124,1,124,1,124,5,124,2814,8,124,10,124,12,124,
        2817,9,124,1,124,1,124,1,124,1,124,1,125,1,125,1,125,1,125,1,125,
        5,125,2828,8,125,10,125,12,125,2831,9,125,1,125,5,125,2834,8,125,
        10,125,12,125,2837,9,125,1,125,5,125,2840,8,125,10,125,12,125,2843,
        9,125,3,125,2845,8,125,1,125,1,125,1,125,1,125,1,125,1,125,5,125,
        2853,8,125,10,125,12,125,2856,9,125,1,125,1,125,1,125,1,125,1,126,
        1,126,1,126,1,126,1,126,5,126,2867,8,126,10,126,12,126,2870,9,126,
        1,126,5,126,2873,8,126,10,126,12,126,2876,9,126,1,126,5,126,2879,
        8,126,10,126,12,126,2882,9,126,3,126,2884,8,126,1,126,1,126,1,126,
        1,126,1,126,1,126,5,126,2892,8,126,10,126,12,126,2895,9,126,1,126,
        1,126,1,126,1,126,1,127,1,127,1,127,1,127,1,127,5,127,2906,8,127,
        10,127,12,127,2909,9,127,1,127,5,127,2912,8,127,10,127,12,127,2915,
        9,127,1,127,5,127,2918,8,127,10,127,12,127,2921,9,127,3,127,2923,
        8,127,1,127,1,127,1,127,1,127,1,127,1,127,1,127,5,127,2932,8,127,
        10,127,12,127,2935,9,127,1,127,1,127,1,127,1,127,1,128,1,128,1,128,
        1,128,1,128,5,128,2946,8,128,10,128,12,128,2949,9,128,1,128,5,128,
        2952,8,128,10,128,12,128,2955,9,128,1,128,5,128,2958,8,128,10,128,
        12,128,2961,9,128,3,128,2963,8,128,1,128,1,128,1,128,1,128,1,128,
        1,128,5,128,2971,8,128,10,128,12,128,2974,9,128,1,128,1,128,1,128,
        1,128,1,129,1,129,1,129,1,129,1,129,5,129,2985,8,129,10,129,12,129,
        2988,9,129,1,129,5,129,2991,8,129,10,129,12,129,2994,9,129,1,129,
        5,129,2997,8,129,10,129,12,129,3000,9,129,3,129,3002,8,129,1,129,
        1,129,1,129,1,129,1,129,1,129,5,129,3010,8,129,10,129,12,129,3013,
        9,129,1,129,1,129,1,129,1,129,1,130,1,130,1,130,1,130,1,130,5,130,
        3024,8,130,10,130,12,130,3027,9,130,1,130,5,130,3030,8,130,10,130,
        12,130,3033,9,130,1,130,5,130,3036,8,130,10,130,12,130,3039,9,130,
        3,130,3041,8,130,1,130,1,130,1,130,1,130,1,130,1,130,5,130,3049,
        8,130,10,130,12,130,3052,9,130,1,130,1,130,1,130,1,130,1,130,0,1,
        198,131,0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,
        42,44,46,48,50,52,54,56,58,60,62,64,66,68,70,72,74,76,78,80,82,84,
        86,88,90,92,94,96,98,100,102,104,106,108,110,112,114,116,118,120,
        122,124,126,128,130,132,134,136,138,140,142,144,146,148,150,152,
        154,156,158,160,162,164,166,168,170,172,174,176,178,180,182,184,
        186,188,190,192,194,196,198,200,202,204,206,208,210,212,214,216,
        218,220,222,224,226,228,230,232,234,236,238,240,242,244,246,248,
        250,252,254,256,258,260,0,15,1,1,305,305,1,0,44,45,1,0,33,34,2,0,
        38,38,96,96,1,0,201,202,2,0,195,195,203,203,3,0,195,195,197,197,
        213,213,2,0,195,195,197,197,5,0,3,3,37,38,96,96,180,181,201,201,
        1,0,170,171,1,0,244,248,1,0,283,289,2,0,176,176,195,195,2,0,38,38,
        181,181,2,0,19,19,184,184,3682,0,322,1,0,0,0,2,327,1,0,0,0,4,336,
        1,0,0,0,6,346,1,0,0,0,8,397,1,0,0,0,10,400,1,0,0,0,12,412,1,0,0,
        0,14,423,1,0,0,0,16,432,1,0,0,0,18,441,1,0,0,0,20,450,1,0,0,0,22,
        459,1,0,0,0,24,468,1,0,0,0,26,477,1,0,0,0,28,486,1,0,0,0,30,495,
        1,0,0,0,32,504,1,0,0,0,34,513,1,0,0,0,36,522,1,0,0,0,38,531,1,0,
        0,0,40,540,1,0,0,0,42,549,1,0,0,0,44,558,1,0,0,0,46,567,1,0,0,0,
        48,576,1,0,0,0,50,585,1,0,0,0,52,676,1,0,0,0,54,678,1,0,0,0,56,728,
        1,0,0,0,58,766,1,0,0,0,60,783,1,0,0,0,62,785,1,0,0,0,64,822,1,0,
        0,0,66,824,1,0,0,0,68,875,1,0,0,0,70,877,1,0,0,0,72,922,1,0,0,0,
        74,924,1,0,0,0,76,954,1,0,0,0,78,956,1,0,0,0,80,992,1,0,0,0,82,994,
        1,0,0,0,84,1008,1,0,0,0,86,1010,1,0,0,0,88,1029,1,0,0,0,90,1071,
        1,0,0,0,92,1073,1,0,0,0,94,1108,1,0,0,0,96,1110,1,0,0,0,98,1158,
        1,0,0,0,100,1160,1,0,0,0,102,1213,1,0,0,0,104,1215,1,0,0,0,106,1224,
        1,0,0,0,108,1263,1,0,0,0,110,1265,1,0,0,0,112,1274,1,0,0,0,114,1278,
        1,0,0,0,116,1288,1,0,0,0,118,1291,1,0,0,0,120,1294,1,0,0,0,122,1297,
        1,0,0,0,124,1300,1,0,0,0,126,1310,1,0,0,0,128,1422,1,0,0,0,130,1424,
        1,0,0,0,132,1459,1,0,0,0,134,1461,1,0,0,0,136,1496,1,0,0,0,138,1498,
        1,0,0,0,140,1570,1,0,0,0,142,1572,1,0,0,0,144,1617,1,0,0,0,146,1619,
        1,0,0,0,148,1671,1,0,0,0,150,1703,1,0,0,0,152,1705,1,0,0,0,154,1755,
        1,0,0,0,156,1757,1,0,0,0,158,1824,1,0,0,0,160,1826,1,0,0,0,162,1874,
        1,0,0,0,164,1876,1,0,0,0,166,1920,1,0,0,0,168,1922,1,0,0,0,170,1949,
        1,0,0,0,172,1951,1,0,0,0,174,1980,1,0,0,0,176,1982,1,0,0,0,178,2007,
        1,0,0,0,180,2009,1,0,0,0,182,2081,1,0,0,0,184,2083,1,0,0,0,186,2087,
        1,0,0,0,188,2107,1,0,0,0,190,2124,1,0,0,0,192,2126,1,0,0,0,194,2130,
        1,0,0,0,196,2138,1,0,0,0,198,2285,1,0,0,0,200,2298,1,0,0,0,202,2300,
        1,0,0,0,204,2302,1,0,0,0,206,2304,1,0,0,0,208,2306,1,0,0,0,210,2312,
        1,0,0,0,212,2314,1,0,0,0,214,2336,1,0,0,0,216,2346,1,0,0,0,218,2348,
        1,0,0,0,220,2353,1,0,0,0,222,2365,1,0,0,0,224,2486,1,0,0,0,226,2488,
        1,0,0,0,228,2493,1,0,0,0,230,2499,1,0,0,0,232,2504,1,0,0,0,234,2522,
        1,0,0,0,236,2586,1,0,0,0,238,2588,1,0,0,0,240,2627,1,0,0,0,242,2666,
        1,0,0,0,244,2705,1,0,0,0,246,2744,1,0,0,0,248,2783,1,0,0,0,250,2822,
        1,0,0,0,252,2861,1,0,0,0,254,2900,1,0,0,0,256,2940,1,0,0,0,258,2979,
        1,0,0,0,260,3018,1,0,0,0,262,321,3,2,1,0,263,321,3,4,2,0,264,321,
        3,6,3,0,265,321,3,8,4,0,266,321,3,10,5,0,267,321,3,12,6,0,268,321,
        3,14,7,0,269,321,3,16,8,0,270,321,3,18,9,0,271,321,3,20,10,0,272,
        321,3,22,11,0,273,321,3,24,12,0,274,321,3,26,13,0,275,321,3,28,14,
        0,276,321,3,30,15,0,277,321,3,32,16,0,278,321,3,34,17,0,279,321,
        3,36,18,0,280,321,3,38,19,0,281,321,3,40,20,0,282,321,3,42,21,0,
        283,321,3,44,22,0,284,321,3,46,23,0,285,321,3,48,24,0,286,321,3,
        50,25,0,287,321,3,186,93,0,288,321,3,208,104,0,289,321,3,212,106,
        0,290,321,3,214,107,0,291,321,3,228,114,0,292,321,3,232,116,0,293,
        321,3,234,117,0,294,321,3,238,119,0,295,321,3,240,120,0,296,321,
        3,242,121,0,297,321,3,256,128,0,298,321,3,258,129,0,299,321,3,246,
        123,0,300,321,3,244,122,0,301,321,3,248,124,0,302,321,3,250,125,
        0,303,321,3,252,126,0,304,321,3,254,127,0,305,321,3,54,27,0,306,
        321,3,62,31,0,307,321,3,66,33,0,308,321,3,84,42,0,309,321,3,92,46,
        0,310,321,3,180,90,0,311,321,3,184,92,0,312,321,3,100,50,0,313,321,
        3,96,48,0,314,321,3,134,67,0,315,321,3,146,73,0,316,321,3,160,80,
        0,317,321,3,164,82,0,318,321,3,110,55,0,319,321,3,236,118,0,320,
        262,1,0,0,0,320,263,1,0,0,0,320,264,1,0,0,0,320,265,1,0,0,0,320,
        266,1,0,0,0,320,267,1,0,0,0,320,268,1,0,0,0,320,269,1,0,0,0,320,
        270,1,0,0,0,320,271,1,0,0,0,320,272,1,0,0,0,320,273,1,0,0,0,320,
        274,1,0,0,0,320,275,1,0,0,0,320,276,1,0,0,0,320,277,1,0,0,0,320,
        278,1,0,0,0,320,279,1,0,0,0,320,280,1,0,0,0,320,281,1,0,0,0,320,
        282,1,0,0,0,320,283,1,0,0,0,320,284,1,0,0,0,320,285,1,0,0,0,320,
        286,1,0,0,0,320,287,1,0,0,0,320,288,1,0,0,0,320,289,1,0,0,0,320,
        290,1,0,0,0,320,291,1,0,0,0,320,292,1,0,0,0,320,293,1,0,0,0,320,
        294,1,0,0,0,320,295,1,0,0,0,320,296,1,0,0,0,320,297,1,0,0,0,320,
        298,1,0,0,0,320,299,1,0,0,0,320,300,1,0,0,0,320,301,1,0,0,0,320,
        302,1,0,0,0,320,303,1,0,0,0,320,304,1,0,0,0,320,305,1,0,0,0,320,
        306,1,0,0,0,320,307,1,0,0,0,320,308,1,0,0,0,320,309,1,0,0,0,320,
        310,1,0,0,0,320,311,1,0,0,0,320,312,1,0,0,0,320,313,1,0,0,0,320,
        314,1,0,0,0,320,315,1,0,0,0,320,316,1,0,0,0,320,317,1,0,0,0,320,
        318,1,0,0,0,320,319,1,0,0,0,321,324,1,0,0,0,322,320,1,0,0,0,322,
        323,1,0,0,0,323,325,1,0,0,0,324,322,1,0,0,0,325,326,5,0,0,1,326,
        1,1,0,0,0,327,331,5,199,0,0,328,330,5,303,0,0,329,328,1,0,0,0,330,
        333,1,0,0,0,331,329,1,0,0,0,331,332,1,0,0,0,332,334,1,0,0,0,333,
        331,1,0,0,0,334,335,7,0,0,0,335,3,1,0,0,0,336,340,5,3,0,0,337,339,
        3,52,26,0,338,337,1,0,0,0,339,342,1,0,0,0,340,338,1,0,0,0,340,341,
        1,0,0,0,341,343,1,0,0,0,342,340,1,0,0,0,343,344,5,2,0,0,344,5,1,
        0,0,0,345,347,5,37,0,0,346,345,1,0,0,0,346,347,1,0,0,0,347,348,1,
        0,0,0,348,352,5,38,0,0,349,351,3,60,30,0,350,349,1,0,0,0,351,354,
        1,0,0,0,352,350,1,0,0,0,352,353,1,0,0,0,353,355,1,0,0,0,354,352,
        1,0,0,0,355,356,5,2,0,0,356,7,1,0,0,0,357,361,5,41,0,0,358,360,3,
        64,32,0,359,358,1,0,0,0,360,363,1,0,0,0,361,359,1,0,0,0,361,362,
        1,0,0,0,362,364,1,0,0,0,363,361,1,0,0,0,364,398,5,2,0,0,365,369,
        7,1,0,0,366,368,3,68,34,0,367,366,1,0,0,0,368,371,1,0,0,0,369,367,
        1,0,0,0,369,370,1,0,0,0,370,372,1,0,0,0,371,369,1,0,0,0,372,398,
        5,2,0,0,373,377,5,48,0,0,374,376,3,72,36,0,375,374,1,0,0,0,376,379,
        1,0,0,0,377,375,1,0,0,0,377,378,1,0,0,0,378,380,1,0,0,0,379,377,
        1,0,0,0,380,398,5,2,0,0,381,385,5,51,0,0,382,384,3,76,38,0,383,382,
        1,0,0,0,384,387,1,0,0,0,385,383,1,0,0,0,385,386,1,0,0,0,386,388,
        1,0,0,0,387,385,1,0,0,0,388,398,5,2,0,0,389,393,5,52,0,0,390,392,
        3,80,40,0,391,390,1,0,0,0,392,395,1,0,0,0,393,391,1,0,0,0,393,394,
        1,0,0,0,394,396,1,0,0,0,395,393,1,0,0,0,396,398,5,2,0,0,397,357,
        1,0,0,0,397,365,1,0,0,0,397,373,1,0,0,0,397,381,1,0,0,0,397,389,
        1,0,0,0,398,9,1,0,0,0,399,401,5,37,0,0,400,399,1,0,0,0,400,401,1,
        0,0,0,401,402,1,0,0,0,402,406,5,53,0,0,403,405,3,84,42,0,404,403,
        1,0,0,0,405,408,1,0,0,0,406,404,1,0,0,0,406,407,1,0,0,0,407,409,
        1,0,0,0,408,406,1,0,0,0,409,410,5,2,0,0,410,11,1,0,0,0,411,413,5,
        37,0,0,412,411,1,0,0,0,412,413,1,0,0,0,413,414,1,0,0,0,414,418,5,
        58,0,0,415,417,3,90,45,0,416,415,1,0,0,0,417,420,1,0,0,0,418,416,
        1,0,0,0,418,419,1,0,0,0,419,421,1,0,0,0,420,418,1,0,0,0,421,422,
        5,2,0,0,422,13,1,0,0,0,423,427,5,61,0,0,424,426,3,94,47,0,425,424,
        1,0,0,0,426,429,1,0,0,0,427,425,1,0,0,0,427,428,1,0,0,0,428,430,
        1,0,0,0,429,427,1,0,0,0,430,431,5,2,0,0,431,15,1,0,0,0,432,436,5,
        65,0,0,433,435,3,98,49,0,434,433,1,0,0,0,435,438,1,0,0,0,436,434,
        1,0,0,0,436,437,1,0,0,0,437,439,1,0,0,0,438,436,1,0,0,0,439,440,
        5,2,0,0,440,17,1,0,0,0,441,445,5,67,0,0,442,444,3,102,51,0,443,442,
        1,0,0,0,444,447,1,0,0,0,445,443,1,0,0,0,445,446,1,0,0,0,446,448,
        1,0,0,0,447,445,1,0,0,0,448,449,5,2,0,0,449,19,1,0,0,0,450,454,5,
        71,0,0,451,453,3,108,54,0,452,451,1,0,0,0,453,456,1,0,0,0,454,452,
        1,0,0,0,454,455,1,0,0,0,455,457,1,0,0,0,456,454,1,0,0,0,457,458,
        5,2,0,0,458,21,1,0,0,0,459,463,5,79,0,0,460,462,3,128,64,0,461,460,
        1,0,0,0,462,465,1,0,0,0,463,461,1,0,0,0,463,464,1,0,0,0,464,466,
        1,0,0,0,465,463,1,0,0,0,466,467,5,2,0,0,467,23,1,0,0,0,468,472,5,
        86,0,0,469,471,3,132,66,0,470,469,1,0,0,0,471,474,1,0,0,0,472,470,
        1,0,0,0,472,473,1,0,0,0,473,475,1,0,0,0,474,472,1,0,0,0,475,476,
        5,2,0,0,476,25,1,0,0,0,477,481,5,87,0,0,478,480,3,136,68,0,479,478,
        1,0,0,0,480,483,1,0,0,0,481,479,1,0,0,0,481,482,1,0,0,0,482,484,
        1,0,0,0,483,481,1,0,0,0,484,485,5,2,0,0,485,27,1,0,0,0,486,490,5,
        88,0,0,487,489,3,140,70,0,488,487,1,0,0,0,489,492,1,0,0,0,490,488,
        1,0,0,0,490,491,1,0,0,0,491,493,1,0,0,0,492,490,1,0,0,0,493,494,
        5,2,0,0,494,29,1,0,0,0,495,499,5,92,0,0,496,498,3,144,72,0,497,496,
        1,0,0,0,498,501,1,0,0,0,499,497,1,0,0,0,499,500,1,0,0,0,500,502,
        1,0,0,0,501,499,1,0,0,0,502,503,5,2,0,0,503,31,1,0,0,0,504,508,5,
        94,0,0,505,507,3,148,74,0,506,505,1,0,0,0,507,510,1,0,0,0,508,506,
        1,0,0,0,508,509,1,0,0,0,509,511,1,0,0,0,510,508,1,0,0,0,511,512,
        5,2,0,0,512,33,1,0,0,0,513,517,5,95,0,0,514,516,3,150,75,0,515,514,
        1,0,0,0,516,519,1,0,0,0,517,515,1,0,0,0,517,518,1,0,0,0,518,520,
        1,0,0,0,519,517,1,0,0,0,520,521,5,2,0,0,521,35,1,0,0,0,522,526,5,
        96,0,0,523,525,3,154,77,0,524,523,1,0,0,0,525,528,1,0,0,0,526,524,
        1,0,0,0,526,527,1,0,0,0,527,529,1,0,0,0,528,526,1,0,0,0,529,530,
        5,2,0,0,530,37,1,0,0,0,531,535,5,98,0,0,532,534,3,158,79,0,533,532,
        1,0,0,0,534,537,1,0,0,0,535,533,1,0,0,0,535,536,1,0,0,0,536,538,
        1,0,0,0,537,535,1,0,0,0,538,539,5,2,0,0,539,39,1,0,0,0,540,544,5,
        103,0,0,541,543,3,162,81,0,542,541,1,0,0,0,543,546,1,0,0,0,544,542,
        1,0,0,0,544,545,1,0,0,0,545,547,1,0,0,0,546,544,1,0,0,0,547,548,
        5,2,0,0,548,41,1,0,0,0,549,553,5,114,0,0,550,552,3,166,83,0,551,
        550,1,0,0,0,552,555,1,0,0,0,553,551,1,0,0,0,553,554,1,0,0,0,554,
        556,1,0,0,0,555,553,1,0,0,0,556,557,5,2,0,0,557,43,1,0,0,0,558,562,
        5,115,0,0,559,561,3,170,85,0,560,559,1,0,0,0,561,564,1,0,0,0,562,
        560,1,0,0,0,562,563,1,0,0,0,563,565,1,0,0,0,564,562,1,0,0,0,565,
        566,5,2,0,0,566,45,1,0,0,0,567,571,5,116,0,0,568,570,3,174,87,0,
        569,568,1,0,0,0,570,573,1,0,0,0,571,569,1,0,0,0,571,572,1,0,0,0,
        572,574,1,0,0,0,573,571,1,0,0,0,574,575,5,2,0,0,575,47,1,0,0,0,576,
        580,5,118,0,0,577,579,3,178,89,0,578,577,1,0,0,0,579,582,1,0,0,0,
        580,578,1,0,0,0,580,581,1,0,0,0,581,583,1,0,0,0,582,580,1,0,0,0,
        583,584,5,2,0,0,584,49,1,0,0,0,585,589,5,119,0,0,586,588,3,182,91,
        0,587,586,1,0,0,0,588,591,1,0,0,0,589,587,1,0,0,0,589,590,1,0,0,
        0,590,592,1,0,0,0,591,589,1,0,0,0,592,593,5,2,0,0,593,51,1,0,0,0,
        594,677,3,54,27,0,595,677,3,238,119,0,596,597,5,5,0,0,597,598,3,
        210,105,0,598,599,3,204,102,0,599,677,1,0,0,0,600,601,5,6,0,0,601,
        602,5,224,0,0,602,677,5,223,0,0,603,604,5,7,0,0,604,605,3,210,105,
        0,605,606,3,204,102,0,606,677,1,0,0,0,607,609,5,8,0,0,608,610,5,
        207,0,0,609,608,1,0,0,0,609,610,1,0,0,0,610,611,1,0,0,0,611,677,
        3,204,102,0,612,677,3,208,104,0,613,614,5,10,0,0,614,677,3,210,105,
        0,615,616,5,11,0,0,616,617,3,210,105,0,617,618,3,210,105,0,618,619,
        3,204,102,0,619,677,1,0,0,0,620,621,5,12,0,0,621,622,3,210,105,0,
        622,623,5,195,0,0,623,677,1,0,0,0,624,625,5,13,0,0,625,626,3,210,
        105,0,626,627,5,195,0,0,627,677,1,0,0,0,628,630,5,14,0,0,629,631,
        5,207,0,0,630,629,1,0,0,0,630,631,1,0,0,0,631,632,1,0,0,0,632,677,
        5,195,0,0,633,634,5,15,0,0,634,635,5,228,0,0,635,677,5,227,0,0,636,
        637,5,16,0,0,637,638,3,56,28,0,638,639,5,2,0,0,639,677,1,0,0,0,640,
        641,5,17,0,0,641,643,5,18,0,0,642,644,5,207,0,0,643,642,1,0,0,0,
        643,644,1,0,0,0,644,645,1,0,0,0,645,677,3,204,102,0,646,677,5,19,
        0,0,647,648,5,20,0,0,648,649,3,210,105,0,649,650,3,204,102,0,650,
        677,1,0,0,0,651,652,5,21,0,0,652,653,3,210,105,0,653,654,3,204,102,
        0,654,677,1,0,0,0,655,656,5,22,0,0,656,657,3,210,105,0,657,658,3,
        204,102,0,658,677,1,0,0,0,659,660,5,23,0,0,660,661,3,210,105,0,661,
        662,3,204,102,0,662,677,1,0,0,0,663,664,5,24,0,0,664,665,3,210,105,
        0,665,666,3,204,102,0,666,677,1,0,0,0,667,668,5,25,0,0,668,669,3,
        210,105,0,669,670,3,204,102,0,670,677,1,0,0,0,671,673,5,26,0,0,672,
        674,5,207,0,0,673,672,1,0,0,0,673,674,1,0,0,0,674,675,1,0,0,0,675,
        677,3,204,102,0,676,594,1,0,0,0,676,595,1,0,0,0,676,596,1,0,0,0,
        676,600,1,0,0,0,676,603,1,0,0,0,676,607,1,0,0,0,676,612,1,0,0,0,
        676,613,1,0,0,0,676,615,1,0,0,0,676,620,1,0,0,0,676,624,1,0,0,0,
        676,628,1,0,0,0,676,633,1,0,0,0,676,636,1,0,0,0,676,640,1,0,0,0,
        676,646,1,0,0,0,676,647,1,0,0,0,676,651,1,0,0,0,676,655,1,0,0,0,
        676,659,1,0,0,0,676,663,1,0,0,0,676,667,1,0,0,0,676,671,1,0,0,0,
        677,53,1,0,0,0,678,679,5,4,0,0,679,680,3,192,96,0,680,681,3,192,
        96,0,681,683,3,200,100,0,682,684,3,200,100,0,683,682,1,0,0,0,683,
        684,1,0,0,0,684,686,1,0,0,0,685,687,3,200,100,0,686,685,1,0,0,0,
        686,687,1,0,0,0,687,691,1,0,0,0,688,690,3,58,29,0,689,688,1,0,0,
        0,690,693,1,0,0,0,691,689,1,0,0,0,691,692,1,0,0,0,692,711,1,0,0,
        0,693,691,1,0,0,0,694,696,5,190,0,0,695,697,5,4,0,0,696,695,1,0,
        0,0,696,697,1,0,0,0,697,698,1,0,0,0,698,699,3,192,96,0,699,701,3,
        192,96,0,700,702,3,200,100,0,701,700,1,0,0,0,701,702,1,0,0,0,702,
        704,1,0,0,0,703,705,3,200,100,0,704,703,1,0,0,0,704,705,1,0,0,0,
        705,707,1,0,0,0,706,708,3,200,100,0,707,706,1,0,0,0,707,708,1,0,
        0,0,708,710,1,0,0,0,709,694,1,0,0,0,710,713,1,0,0,0,711,709,1,0,
        0,0,711,712,1,0,0,0,712,55,1,0,0,0,713,711,1,0,0,0,714,716,5,27,
        0,0,715,717,5,207,0,0,716,715,1,0,0,0,716,717,1,0,0,0,717,718,1,
        0,0,0,718,729,3,204,102,0,719,721,5,28,0,0,720,722,5,207,0,0,721,
        720,1,0,0,0,721,722,1,0,0,0,722,723,1,0,0,0,723,729,3,204,102,0,
        724,725,5,29,0,0,725,729,3,192,96,0,726,727,5,30,0,0,727,729,3,192,
        96,0,728,714,1,0,0,0,728,719,1,0,0,0,728,724,1,0,0,0,728,726,1,0,
        0,0,729,57,1,0,0,0,730,732,5,31,0,0,731,733,5,207,0,0,732,731,1,
        0,0,0,732,733,1,0,0,0,733,734,1,0,0,0,734,767,3,206,103,0,735,737,
        5,32,0,0,736,738,5,207,0,0,737,736,1,0,0,0,737,738,1,0,0,0,738,739,
        1,0,0,0,739,767,3,206,103,0,740,742,5,57,0,0,741,743,5,207,0,0,742,
        741,1,0,0,0,742,743,1,0,0,0,743,744,1,0,0,0,744,767,3,206,103,0,
        745,747,7,2,0,0,746,748,5,207,0,0,747,746,1,0,0,0,747,748,1,0,0,
        0,748,749,1,0,0,0,749,767,3,206,103,0,750,752,5,35,0,0,751,753,5,
        207,0,0,752,751,1,0,0,0,752,753,1,0,0,0,753,754,1,0,0,0,754,767,
        3,206,103,0,755,757,5,36,0,0,756,758,5,207,0,0,757,756,1,0,0,0,757,
        758,1,0,0,0,758,759,1,0,0,0,759,767,3,206,103,0,760,762,5,49,0,0,
        761,763,5,207,0,0,762,761,1,0,0,0,762,763,1,0,0,0,763,764,1,0,0,
        0,764,767,3,206,103,0,765,767,5,193,0,0,766,730,1,0,0,0,766,735,
        1,0,0,0,766,740,1,0,0,0,766,745,1,0,0,0,766,750,1,0,0,0,766,755,
        1,0,0,0,766,760,1,0,0,0,766,765,1,0,0,0,767,59,1,0,0,0,768,784,3,
        214,107,0,769,784,3,62,31,0,770,784,3,240,120,0,771,773,5,39,0,0,
        772,774,5,207,0,0,773,772,1,0,0,0,773,774,1,0,0,0,774,775,1,0,0,
        0,775,784,5,195,0,0,776,784,5,19,0,0,777,779,5,21,0,0,778,780,5,
        207,0,0,779,778,1,0,0,0,779,780,1,0,0,0,780,781,1,0,0,0,781,784,
        3,204,102,0,782,784,5,40,0,0,783,768,1,0,0,0,783,769,1,0,0,0,783,
        770,1,0,0,0,783,771,1,0,0,0,783,776,1,0,0,0,783,777,1,0,0,0,783,
        782,1,0,0,0,784,61,1,0,0,0,785,786,5,4,0,0,786,787,3,192,96,0,787,
        788,3,192,96,0,788,789,3,192,96,0,789,790,3,192,96,0,790,791,3,200,
        100,0,791,792,3,200,100,0,792,793,3,200,100,0,793,794,5,195,0,0,
        794,63,1,0,0,0,795,823,3,66,33,0,796,823,3,242,121,0,797,823,3,208,
        104,0,798,799,5,42,0,0,799,800,3,204,102,0,800,801,3,204,102,0,801,
        802,3,204,102,0,802,823,1,0,0,0,803,805,5,43,0,0,804,806,5,207,0,
        0,805,804,1,0,0,0,805,806,1,0,0,0,806,807,1,0,0,0,807,823,3,204,
        102,0,808,810,5,14,0,0,809,811,5,207,0,0,810,809,1,0,0,0,810,811,
        1,0,0,0,811,812,1,0,0,0,812,823,5,195,0,0,813,815,5,15,0,0,814,816,
        5,226,0,0,815,814,1,0,0,0,815,816,1,0,0,0,816,817,1,0,0,0,817,823,
        5,227,0,0,818,819,5,17,0,0,819,820,5,18,0,0,820,823,3,204,102,0,
        821,823,5,19,0,0,822,795,1,0,0,0,822,796,1,0,0,0,822,797,1,0,0,0,
        822,798,1,0,0,0,822,803,1,0,0,0,822,808,1,0,0,0,822,813,1,0,0,0,
        822,818,1,0,0,0,822,821,1,0,0,0,823,65,1,0,0,0,824,825,5,4,0,0,825,
        826,3,192,96,0,826,827,3,192,96,0,827,828,3,192,96,0,828,829,3,192,
        96,0,829,830,3,192,96,0,830,831,3,192,96,0,831,833,3,200,100,0,832,
        834,3,200,100,0,833,832,1,0,0,0,833,834,1,0,0,0,834,836,1,0,0,0,
        835,837,3,200,100,0,836,835,1,0,0,0,836,837,1,0,0,0,837,67,1,0,0,
        0,838,876,3,70,35,0,839,876,3,208,104,0,840,841,5,46,0,0,841,876,
        5,230,0,0,842,844,5,21,0,0,843,845,5,207,0,0,844,843,1,0,0,0,844,
        845,1,0,0,0,845,846,1,0,0,0,846,876,3,204,102,0,847,848,5,47,0,0,
        848,876,5,196,0,0,849,850,5,6,0,0,850,876,5,223,0,0,851,852,5,42,
        0,0,852,853,3,204,102,0,853,854,3,204,102,0,854,855,3,204,102,0,
        855,876,1,0,0,0,856,858,5,43,0,0,857,859,5,207,0,0,858,857,1,0,0,
        0,858,859,1,0,0,0,859,860,1,0,0,0,860,876,3,204,102,0,861,863,5,
        14,0,0,862,864,5,207,0,0,863,862,1,0,0,0,863,864,1,0,0,0,864,865,
        1,0,0,0,865,876,5,195,0,0,866,868,5,15,0,0,867,869,5,226,0,0,868,
        867,1,0,0,0,868,869,1,0,0,0,869,870,1,0,0,0,870,876,5,227,0,0,871,
        872,5,17,0,0,872,873,5,18,0,0,873,876,3,204,102,0,874,876,5,19,0,
        0,875,838,1,0,0,0,875,839,1,0,0,0,875,840,1,0,0,0,875,842,1,0,0,
        0,875,847,1,0,0,0,875,849,1,0,0,0,875,851,1,0,0,0,875,856,1,0,0,
        0,875,861,1,0,0,0,875,866,1,0,0,0,875,871,1,0,0,0,875,874,1,0,0,
        0,876,69,1,0,0,0,877,878,5,4,0,0,878,879,3,192,96,0,879,880,3,192,
        96,0,880,881,3,192,96,0,881,882,3,192,96,0,882,883,3,192,96,0,883,
        884,3,192,96,0,884,885,3,200,100,0,885,892,3,200,100,0,886,893,3,
        200,100,0,887,888,3,200,100,0,888,889,3,200,100,0,889,890,3,200,
        100,0,890,891,3,200,100,0,891,893,1,0,0,0,892,886,1,0,0,0,892,887,
        1,0,0,0,892,893,1,0,0,0,893,71,1,0,0,0,894,923,3,74,37,0,895,897,
        5,49,0,0,896,898,5,207,0,0,897,896,1,0,0,0,897,898,1,0,0,0,898,899,
        1,0,0,0,899,923,5,195,0,0,900,923,3,208,104,0,901,903,5,43,0,0,902,
        904,5,207,0,0,903,902,1,0,0,0,903,904,1,0,0,0,904,905,1,0,0,0,905,
        906,3,204,102,0,906,907,3,204,102,0,907,923,1,0,0,0,908,910,5,14,
        0,0,909,911,5,207,0,0,910,909,1,0,0,0,910,911,1,0,0,0,911,912,1,
        0,0,0,912,923,5,195,0,0,913,915,5,50,0,0,914,916,5,207,0,0,915,914,
        1,0,0,0,915,916,1,0,0,0,916,917,1,0,0,0,917,923,5,195,0,0,918,919,
        5,17,0,0,919,920,5,18,0,0,920,923,3,204,102,0,921,923,5,19,0,0,922,
        894,1,0,0,0,922,895,1,0,0,0,922,900,1,0,0,0,922,901,1,0,0,0,922,
        908,1,0,0,0,922,913,1,0,0,0,922,918,1,0,0,0,922,921,1,0,0,0,923,
        73,1,0,0,0,924,925,5,4,0,0,925,926,3,192,96,0,926,927,3,192,96,0,
        927,928,3,192,96,0,928,929,3,192,96,0,929,930,3,200,100,0,930,934,
        3,200,100,0,931,932,3,200,100,0,932,933,3,200,100,0,933,935,1,0,
        0,0,934,931,1,0,0,0,934,935,1,0,0,0,935,75,1,0,0,0,936,955,3,78,
        39,0,937,955,3,208,104,0,938,939,5,42,0,0,939,955,3,204,102,0,940,
        942,5,14,0,0,941,943,5,207,0,0,942,941,1,0,0,0,942,943,1,0,0,0,943,
        944,1,0,0,0,944,955,5,195,0,0,945,947,5,15,0,0,946,948,5,226,0,0,
        947,946,1,0,0,0,947,948,1,0,0,0,948,949,1,0,0,0,949,955,5,227,0,
        0,950,951,5,17,0,0,951,952,5,18,0,0,952,955,3,204,102,0,953,955,
        5,19,0,0,954,936,1,0,0,0,954,937,1,0,0,0,954,938,1,0,0,0,954,940,
        1,0,0,0,954,945,1,0,0,0,954,950,1,0,0,0,954,953,1,0,0,0,955,77,1,
        0,0,0,956,957,5,4,0,0,957,958,3,192,96,0,958,959,3,192,96,0,959,
        961,3,200,100,0,960,962,3,200,100,0,961,960,1,0,0,0,961,962,1,0,
        0,0,962,79,1,0,0,0,963,993,3,82,41,0,964,993,3,208,104,0,965,966,
        5,42,0,0,966,967,3,204,102,0,967,968,3,204,102,0,968,969,3,204,102,
        0,969,970,3,204,102,0,970,993,1,0,0,0,971,973,5,43,0,0,972,974,5,
        207,0,0,973,972,1,0,0,0,973,974,1,0,0,0,974,975,1,0,0,0,975,993,
        3,204,102,0,976,978,5,14,0,0,977,979,5,207,0,0,978,977,1,0,0,0,978,
        979,1,0,0,0,979,980,1,0,0,0,980,993,5,195,0,0,981,983,5,15,0,0,982,
        984,5,226,0,0,983,982,1,0,0,0,983,984,1,0,0,0,984,985,1,0,0,0,985,
        993,5,227,0,0,986,987,5,17,0,0,987,988,5,18,0,0,988,993,3,204,102,
        0,989,993,5,19,0,0,990,991,5,46,0,0,991,993,5,231,0,0,992,963,1,
        0,0,0,992,964,1,0,0,0,992,965,1,0,0,0,992,971,1,0,0,0,992,976,1,
        0,0,0,992,981,1,0,0,0,992,986,1,0,0,0,992,989,1,0,0,0,992,990,1,
        0,0,0,993,81,1,0,0,0,994,995,5,4,0,0,995,996,3,192,96,0,996,997,
        3,192,96,0,997,998,3,192,96,0,998,999,3,192,96,0,999,1001,3,200,
        100,0,1000,1002,3,200,100,0,1001,1000,1,0,0,0,1001,1002,1,0,0,0,
        1002,83,1,0,0,0,1003,1009,3,214,107,0,1004,1009,3,86,43,0,1005,1009,
        3,260,130,0,1006,1009,5,55,0,0,1007,1009,5,40,0,0,1008,1003,1,0,
        0,0,1008,1004,1,0,0,0,1008,1005,1,0,0,0,1008,1006,1,0,0,0,1008,1007,
        1,0,0,0,1009,85,1,0,0,0,1010,1014,5,54,0,0,1011,1013,3,88,44,0,1012,
        1011,1,0,0,0,1013,1016,1,0,0,0,1014,1012,1,0,0,0,1014,1015,1,0,0,
        0,1015,1017,1,0,0,0,1016,1014,1,0,0,0,1017,1018,5,2,0,0,1018,87,
        1,0,0,0,1019,1021,5,56,0,0,1020,1022,5,207,0,0,1021,1020,1,0,0,0,
        1021,1022,1,0,0,0,1022,1023,1,0,0,0,1023,1030,3,192,96,0,1024,1026,
        5,57,0,0,1025,1027,5,207,0,0,1026,1025,1,0,0,0,1026,1027,1,0,0,0,
        1027,1028,1,0,0,0,1028,1030,3,204,102,0,1029,1019,1,0,0,0,1029,1024,
        1,0,0,0,1030,89,1,0,0,0,1031,1072,3,214,107,0,1032,1034,5,59,0,0,
        1033,1035,5,207,0,0,1034,1033,1,0,0,0,1034,1035,1,0,0,0,1035,1036,
        1,0,0,0,1036,1072,5,195,0,0,1037,1039,5,60,0,0,1038,1040,5,207,0,
        0,1039,1038,1,0,0,0,1039,1040,1,0,0,0,1040,1041,1,0,0,0,1041,1067,
        5,204,0,0,1042,1044,3,204,102,0,1043,1045,5,193,0,0,1044,1043,1,
        0,0,0,1044,1045,1,0,0,0,1045,1046,1,0,0,0,1046,1048,3,204,102,0,
        1047,1049,5,193,0,0,1048,1047,1,0,0,0,1048,1049,1,0,0,0,1049,1050,
        1,0,0,0,1050,1051,3,204,102,0,1051,1068,1,0,0,0,1052,1054,5,188,
        0,0,1053,1055,5,207,0,0,1054,1053,1,0,0,0,1054,1055,1,0,0,0,1055,
        1056,1,0,0,0,1056,1058,3,192,96,0,1057,1059,5,193,0,0,1058,1057,
        1,0,0,0,1058,1059,1,0,0,0,1059,1065,1,0,0,0,1060,1062,5,189,0,0,
        1061,1063,5,207,0,0,1062,1061,1,0,0,0,1062,1063,1,0,0,0,1063,1064,
        1,0,0,0,1064,1066,3,192,96,0,1065,1060,1,0,0,0,1065,1066,1,0,0,0,
        1066,1068,1,0,0,0,1067,1042,1,0,0,0,1067,1052,1,0,0,0,1068,1069,
        1,0,0,0,1069,1070,5,205,0,0,1070,1072,1,0,0,0,1071,1031,1,0,0,0,
        1071,1032,1,0,0,0,1071,1037,1,0,0,0,1072,91,1,0,0,0,1073,1074,5,
        4,0,0,1074,1075,3,192,96,0,1075,1076,3,200,100,0,1076,1077,3,200,
        100,0,1077,1078,3,200,100,0,1078,93,1,0,0,0,1079,1109,3,96,48,0,
        1080,1109,3,244,122,0,1081,1109,3,208,104,0,1082,1083,5,62,0,0,1083,
        1084,5,195,0,0,1084,1109,3,204,102,0,1085,1087,5,43,0,0,1086,1088,
        5,207,0,0,1087,1086,1,0,0,0,1087,1088,1,0,0,0,1088,1089,1,0,0,0,
        1089,1109,3,204,102,0,1090,1092,5,14,0,0,1091,1093,5,207,0,0,1092,
        1091,1,0,0,0,1092,1093,1,0,0,0,1093,1094,1,0,0,0,1094,1109,5,195,
        0,0,1095,1096,5,17,0,0,1096,1097,5,18,0,0,1097,1100,3,204,102,0,
        1098,1101,5,139,0,0,1099,1101,3,208,104,0,1100,1098,1,0,0,0,1100,
        1099,1,0,0,0,1101,1109,1,0,0,0,1102,1109,5,19,0,0,1103,1104,5,63,
        0,0,1104,1105,3,204,102,0,1105,1106,5,195,0,0,1106,1109,1,0,0,0,
        1107,1109,5,64,0,0,1108,1079,1,0,0,0,1108,1080,1,0,0,0,1108,1081,
        1,0,0,0,1108,1082,1,0,0,0,1108,1085,1,0,0,0,1108,1090,1,0,0,0,1108,
        1095,1,0,0,0,1108,1102,1,0,0,0,1108,1103,1,0,0,0,1108,1107,1,0,0,
        0,1109,95,1,0,0,0,1110,1111,5,4,0,0,1111,1112,3,192,96,0,1112,1113,
        3,192,96,0,1113,97,1,0,0,0,1114,1159,3,100,50,0,1115,1159,3,246,
        123,0,1116,1159,3,208,104,0,1117,1118,5,42,0,0,1118,1119,3,204,102,
        0,1119,1120,3,204,102,0,1120,1121,3,204,102,0,1121,1122,3,204,102,
        0,1122,1159,1,0,0,0,1123,1125,5,49,0,0,1124,1126,5,207,0,0,1125,
        1124,1,0,0,0,1125,1126,1,0,0,0,1126,1127,1,0,0,0,1127,1159,5,195,
        0,0,1128,1129,5,66,0,0,1129,1159,5,195,0,0,1130,1131,5,43,0,0,1131,
        1133,3,204,102,0,1132,1134,3,204,102,0,1133,1132,1,0,0,0,1133,1134,
        1,0,0,0,1134,1159,1,0,0,0,1135,1137,5,14,0,0,1136,1138,5,207,0,0,
        1137,1136,1,0,0,0,1137,1138,1,0,0,0,1138,1139,1,0,0,0,1139,1159,
        5,195,0,0,1140,1142,5,50,0,0,1141,1143,5,207,0,0,1142,1141,1,0,0,
        0,1142,1143,1,0,0,0,1143,1144,1,0,0,0,1144,1159,5,195,0,0,1145,1147,
        5,15,0,0,1146,1148,5,226,0,0,1147,1146,1,0,0,0,1147,1148,1,0,0,0,
        1148,1149,1,0,0,0,1149,1159,5,227,0,0,1150,1151,5,17,0,0,1151,1152,
        5,18,0,0,1152,1155,3,204,102,0,1153,1156,5,139,0,0,1154,1156,3,208,
        104,0,1155,1153,1,0,0,0,1155,1154,1,0,0,0,1156,1159,1,0,0,0,1157,
        1159,5,19,0,0,1158,1114,1,0,0,0,1158,1115,1,0,0,0,1158,1116,1,0,
        0,0,1158,1117,1,0,0,0,1158,1123,1,0,0,0,1158,1128,1,0,0,0,1158,1130,
        1,0,0,0,1158,1135,1,0,0,0,1158,1140,1,0,0,0,1158,1145,1,0,0,0,1158,
        1150,1,0,0,0,1158,1157,1,0,0,0,1159,99,1,0,0,0,1160,1161,5,4,0,0,
        1161,1162,3,192,96,0,1162,1163,3,192,96,0,1163,1164,3,192,96,0,1164,
        1170,3,192,96,0,1165,1166,3,192,96,0,1166,1167,3,192,96,0,1167,1168,
        3,192,96,0,1168,1169,3,192,96,0,1169,1171,1,0,0,0,1170,1165,1,0,
        0,0,1170,1171,1,0,0,0,1171,1172,1,0,0,0,1172,1173,3,200,100,0,1173,
        1177,3,200,100,0,1174,1175,3,200,100,0,1175,1176,3,200,100,0,1176,
        1178,1,0,0,0,1177,1174,1,0,0,0,1177,1178,1,0,0,0,1178,101,1,0,0,
        0,1179,1214,3,104,52,0,1180,1214,3,208,104,0,1181,1182,5,62,0,0,
        1182,1183,5,195,0,0,1183,1184,5,195,0,0,1184,1185,3,204,102,0,1185,
        1186,3,204,102,0,1186,1187,3,204,102,0,1187,1214,1,0,0,0,1188,1190,
        5,43,0,0,1189,1191,5,207,0,0,1190,1189,1,0,0,0,1190,1191,1,0,0,0,
        1191,1192,1,0,0,0,1192,1214,3,204,102,0,1193,1195,5,14,0,0,1194,
        1196,5,207,0,0,1195,1194,1,0,0,0,1195,1196,1,0,0,0,1196,1197,1,0,
        0,0,1197,1214,5,195,0,0,1198,1199,5,68,0,0,1199,1214,3,204,102,0,
        1200,1201,5,69,0,0,1201,1214,3,204,102,0,1202,1204,5,15,0,0,1203,
        1205,5,226,0,0,1204,1203,1,0,0,0,1204,1205,1,0,0,0,1205,1206,1,0,
        0,0,1206,1214,5,227,0,0,1207,1208,5,17,0,0,1208,1209,5,18,0,0,1209,
        1214,3,204,102,0,1210,1214,3,106,53,0,1211,1214,5,19,0,0,1212,1214,
        5,64,0,0,1213,1179,1,0,0,0,1213,1180,1,0,0,0,1213,1181,1,0,0,0,1213,
        1188,1,0,0,0,1213,1193,1,0,0,0,1213,1198,1,0,0,0,1213,1200,1,0,0,
        0,1213,1202,1,0,0,0,1213,1207,1,0,0,0,1213,1210,1,0,0,0,1213,1211,
        1,0,0,0,1213,1212,1,0,0,0,1214,103,1,0,0,0,1215,1216,5,4,0,0,1216,
        1217,3,192,96,0,1217,1218,3,192,96,0,1218,1219,3,192,96,0,1219,1220,
        3,192,96,0,1220,1221,3,192,96,0,1221,1222,3,200,100,0,1222,1223,
        3,200,100,0,1223,105,1,0,0,0,1224,1225,5,70,0,0,1225,1226,3,192,
        96,0,1226,1227,3,200,100,0,1227,1228,3,200,100,0,1228,107,1,0,0,
        0,1229,1264,3,110,55,0,1230,1264,3,112,56,0,1231,1264,3,114,57,0,
        1232,1264,3,116,58,0,1233,1264,3,118,59,0,1234,1264,3,120,60,0,1235,
        1264,3,122,61,0,1236,1264,3,124,62,0,1237,1264,3,126,63,0,1238,1264,
        3,208,104,0,1239,1240,5,78,0,0,1240,1264,3,204,102,0,1241,1242,5,
        66,0,0,1242,1264,5,195,0,0,1243,1244,5,43,0,0,1244,1246,3,204,102,
        0,1245,1247,3,204,102,0,1246,1245,1,0,0,0,1246,1247,1,0,0,0,1247,
        1264,1,0,0,0,1248,1250,5,15,0,0,1249,1251,5,226,0,0,1250,1249,1,
        0,0,0,1250,1251,1,0,0,0,1251,1252,1,0,0,0,1252,1264,5,227,0,0,1253,
        1254,5,17,0,0,1254,1255,5,18,0,0,1255,1258,3,204,102,0,1256,1259,
        5,139,0,0,1257,1259,3,208,104,0,1258,1256,1,0,0,0,1258,1257,1,0,
        0,0,1259,1260,1,0,0,0,1260,1261,5,201,0,0,1261,1264,1,0,0,0,1262,
        1264,5,19,0,0,1263,1229,1,0,0,0,1263,1230,1,0,0,0,1263,1231,1,0,
        0,0,1263,1232,1,0,0,0,1263,1233,1,0,0,0,1263,1234,1,0,0,0,1263,1235,
        1,0,0,0,1263,1236,1,0,0,0,1263,1237,1,0,0,0,1263,1238,1,0,0,0,1263,
        1239,1,0,0,0,1263,1241,1,0,0,0,1263,1243,1,0,0,0,1263,1248,1,0,0,
        0,1263,1253,1,0,0,0,1263,1262,1,0,0,0,1264,109,1,0,0,0,1265,1266,
        5,72,0,0,1266,1268,3,192,96,0,1267,1269,3,192,96,0,1268,1267,1,0,
        0,0,1268,1269,1,0,0,0,1269,1270,1,0,0,0,1270,1272,3,200,100,0,1271,
        1273,3,200,100,0,1272,1271,1,0,0,0,1272,1273,1,0,0,0,1273,111,1,
        0,0,0,1274,1275,5,70,0,0,1275,1276,3,192,96,0,1276,1277,3,200,100,
        0,1277,113,1,0,0,0,1278,1279,5,52,0,0,1279,1280,3,192,96,0,1280,
        1281,3,192,96,0,1281,1282,3,192,96,0,1282,1284,5,201,0,0,1283,1285,
        5,196,0,0,1284,1283,1,0,0,0,1284,1285,1,0,0,0,1285,1286,1,0,0,0,
        1286,1287,5,201,0,0,1287,115,1,0,0,0,1288,1289,5,73,0,0,1289,1290,
        3,192,96,0,1290,117,1,0,0,0,1291,1292,5,67,0,0,1292,1293,3,192,96,
        0,1293,119,1,0,0,0,1294,1295,5,74,0,0,1295,1296,3,192,96,0,1296,
        121,1,0,0,0,1297,1298,5,75,0,0,1298,1299,3,192,96,0,1299,123,1,0,
        0,0,1300,1301,5,76,0,0,1301,1302,5,201,0,0,1302,1303,3,192,96,0,
        1303,1304,3,192,96,0,1304,1305,3,192,96,0,1305,1306,3,192,96,0,1306,
        1308,3,192,96,0,1307,1309,3,192,96,0,1308,1307,1,0,0,0,1308,1309,
        1,0,0,0,1309,125,1,0,0,0,1310,1311,5,77,0,0,1311,1312,3,192,96,0,
        1312,127,1,0,0,0,1313,1423,3,130,65,0,1314,1423,3,208,104,0,1315,
        1316,5,27,0,0,1316,1423,3,204,102,0,1317,1319,5,43,0,0,1318,1320,
        5,207,0,0,1319,1318,1,0,0,0,1319,1320,1,0,0,0,1320,1321,1,0,0,0,
        1321,1423,3,204,102,0,1322,1323,5,80,0,0,1323,1324,3,204,102,0,1324,
        1325,3,204,102,0,1325,1330,3,204,102,0,1326,1327,3,204,102,0,1327,
        1328,3,204,102,0,1328,1329,3,204,102,0,1329,1331,1,0,0,0,1330,1326,
        1,0,0,0,1330,1331,1,0,0,0,1331,1336,1,0,0,0,1332,1333,3,204,102,
        0,1333,1334,3,204,102,0,1334,1335,3,204,102,0,1335,1337,1,0,0,0,
        1336,1332,1,0,0,0,1336,1337,1,0,0,0,1337,1342,1,0,0,0,1338,1339,
        3,204,102,0,1339,1340,3,204,102,0,1340,1341,3,204,102,0,1341,1343,
        1,0,0,0,1342,1338,1,0,0,0,1342,1343,1,0,0,0,1343,1423,1,0,0,0,1344,
        1346,5,14,0,0,1345,1347,5,207,0,0,1346,1345,1,0,0,0,1346,1347,1,
        0,0,0,1347,1348,1,0,0,0,1348,1423,5,195,0,0,1349,1350,5,81,0,0,1350,
        1351,3,204,102,0,1351,1352,3,204,102,0,1352,1357,3,204,102,0,1353,
        1354,3,204,102,0,1354,1355,3,204,102,0,1355,1356,3,204,102,0,1356,
        1358,1,0,0,0,1357,1353,1,0,0,0,1357,1358,1,0,0,0,1358,1363,1,0,0,
        0,1359,1360,3,204,102,0,1360,1361,3,204,102,0,1361,1362,3,204,102,
        0,1362,1364,1,0,0,0,1363,1359,1,0,0,0,1363,1364,1,0,0,0,1364,1369,
        1,0,0,0,1365,1366,3,204,102,0,1366,1367,3,204,102,0,1367,1368,3,
        204,102,0,1368,1370,1,0,0,0,1369,1365,1,0,0,0,1369,1370,1,0,0,0,
        1370,1423,1,0,0,0,1371,1372,5,17,0,0,1372,1373,5,18,0,0,1373,1376,
        3,204,102,0,1374,1377,5,139,0,0,1375,1377,3,208,104,0,1376,1374,
        1,0,0,0,1376,1375,1,0,0,0,1377,1423,1,0,0,0,1378,1379,5,82,0,0,1379,
        1380,3,204,102,0,1380,1381,3,204,102,0,1381,1386,3,204,102,0,1382,
        1383,3,204,102,0,1383,1384,3,204,102,0,1384,1385,3,204,102,0,1385,
        1387,1,0,0,0,1386,1382,1,0,0,0,1386,1387,1,0,0,0,1387,1392,1,0,0,
        0,1388,1389,3,204,102,0,1389,1390,3,204,102,0,1390,1391,3,204,102,
        0,1391,1393,1,0,0,0,1392,1388,1,0,0,0,1392,1393,1,0,0,0,1393,1398,
        1,0,0,0,1394,1395,3,204,102,0,1395,1396,3,204,102,0,1396,1397,3,
        204,102,0,1397,1399,1,0,0,0,1398,1394,1,0,0,0,1398,1399,1,0,0,0,
        1399,1423,1,0,0,0,1400,1423,5,19,0,0,1401,1403,5,21,0,0,1402,1404,
        5,207,0,0,1403,1402,1,0,0,0,1403,1404,1,0,0,0,1404,1405,1,0,0,0,
        1405,1423,3,204,102,0,1406,1407,5,83,0,0,1407,1423,5,234,0,0,1408,
        1409,5,63,0,0,1409,1410,5,85,0,0,1410,1412,3,204,102,0,1411,1413,
        3,204,102,0,1412,1411,1,0,0,0,1412,1413,1,0,0,0,1413,1415,1,0,0,
        0,1414,1416,3,204,102,0,1415,1414,1,0,0,0,1415,1416,1,0,0,0,1416,
        1418,1,0,0,0,1417,1419,3,204,102,0,1418,1417,1,0,0,0,1418,1419,1,
        0,0,0,1419,1423,1,0,0,0,1420,1423,5,84,0,0,1421,1423,5,64,0,0,1422,
        1313,1,0,0,0,1422,1314,1,0,0,0,1422,1315,1,0,0,0,1422,1317,1,0,0,
        0,1422,1322,1,0,0,0,1422,1344,1,0,0,0,1422,1349,1,0,0,0,1422,1371,
        1,0,0,0,1422,1378,1,0,0,0,1422,1400,1,0,0,0,1422,1401,1,0,0,0,1422,
        1406,1,0,0,0,1422,1408,1,0,0,0,1422,1420,1,0,0,0,1422,1421,1,0,0,
        0,1423,129,1,0,0,0,1424,1425,5,4,0,0,1425,1426,3,192,96,0,1426,1427,
        3,192,96,0,1427,1428,3,192,96,0,1428,1434,3,192,96,0,1429,1430,3,
        192,96,0,1430,1431,3,192,96,0,1431,1432,3,192,96,0,1432,1433,3,192,
        96,0,1433,1435,1,0,0,0,1434,1429,1,0,0,0,1434,1435,1,0,0,0,1435,
        1441,1,0,0,0,1436,1437,3,192,96,0,1437,1438,3,192,96,0,1438,1439,
        3,192,96,0,1439,1440,3,192,96,0,1440,1442,1,0,0,0,1441,1436,1,0,
        0,0,1441,1442,1,0,0,0,1442,1448,1,0,0,0,1443,1444,3,192,96,0,1444,
        1445,3,192,96,0,1445,1446,3,192,96,0,1446,1447,3,192,96,0,1447,1449,
        1,0,0,0,1448,1443,1,0,0,0,1448,1449,1,0,0,0,1449,131,1,0,0,0,1450,
        1460,3,134,67,0,1451,1460,3,248,124,0,1452,1454,5,21,0,0,1453,1455,
        5,207,0,0,1454,1453,1,0,0,0,1454,1455,1,0,0,0,1455,1456,1,0,0,0,
        1456,1460,3,204,102,0,1457,1460,5,17,0,0,1458,1460,5,19,0,0,1459,
        1450,1,0,0,0,1459,1451,1,0,0,0,1459,1452,1,0,0,0,1459,1457,1,0,0,
        0,1459,1458,1,0,0,0,1460,133,1,0,0,0,1461,1462,5,4,0,0,1462,1463,
        3,192,96,0,1463,1464,3,200,100,0,1464,1465,3,200,100,0,1465,135,
        1,0,0,0,1466,1497,3,138,69,0,1467,1497,3,208,104,0,1468,1469,5,42,
        0,0,1469,1470,3,204,102,0,1470,1471,3,204,102,0,1471,1472,3,204,
        102,0,1472,1473,3,204,102,0,1473,1474,3,204,102,0,1474,1497,1,0,
        0,0,1475,1477,5,43,0,0,1476,1478,5,207,0,0,1477,1476,1,0,0,0,1477,
        1478,1,0,0,0,1478,1479,1,0,0,0,1479,1497,3,204,102,0,1480,1482,5,
        14,0,0,1481,1483,5,207,0,0,1482,1481,1,0,0,0,1482,1483,1,0,0,0,1483,
        1484,1,0,0,0,1484,1497,5,195,0,0,1485,1487,5,15,0,0,1486,1488,5,
        226,0,0,1487,1486,1,0,0,0,1487,1488,1,0,0,0,1488,1489,1,0,0,0,1489,
        1497,5,227,0,0,1490,1491,5,17,0,0,1491,1492,5,18,0,0,1492,1497,3,
        204,102,0,1493,1497,5,19,0,0,1494,1495,5,46,0,0,1495,1497,5,231,
        0,0,1496,1466,1,0,0,0,1496,1467,1,0,0,0,1496,1468,1,0,0,0,1496,1475,
        1,0,0,0,1496,1480,1,0,0,0,1496,1485,1,0,0,0,1496,1490,1,0,0,0,1496,
        1493,1,0,0,0,1496,1494,1,0,0,0,1497,137,1,0,0,0,1498,1499,5,4,0,
        0,1499,1500,3,192,96,0,1500,1501,3,192,96,0,1501,1502,3,192,96,0,
        1502,1503,3,192,96,0,1503,1504,3,192,96,0,1504,1505,3,192,96,0,1505,
        1507,3,200,100,0,1506,1508,3,200,100,0,1507,1506,1,0,0,0,1507,1508,
        1,0,0,0,1508,139,1,0,0,0,1509,1571,3,142,71,0,1510,1571,3,208,104,
        0,1511,1512,5,27,0,0,1512,1571,3,204,102,0,1513,1514,5,89,0,0,1514,
        1571,3,204,102,0,1515,1517,5,43,0,0,1516,1518,5,207,0,0,1517,1516,
        1,0,0,0,1517,1518,1,0,0,0,1518,1519,1,0,0,0,1519,1571,3,204,102,
        0,1520,1521,5,80,0,0,1521,1522,3,204,102,0,1522,1523,3,204,102,0,
        1523,1524,3,204,102,0,1524,1525,3,204,102,0,1525,1526,3,204,102,
        0,1526,1527,3,204,102,0,1527,1528,3,204,102,0,1528,1571,1,0,0,0,
        1529,1530,5,90,0,0,1530,1571,5,195,0,0,1531,1532,5,91,0,0,1532,1533,
        3,204,102,0,1533,1534,3,204,102,0,1534,1535,3,204,102,0,1535,1536,
        3,204,102,0,1536,1537,3,204,102,0,1537,1538,3,204,102,0,1538,1539,
        3,204,102,0,1539,1540,3,204,102,0,1540,1571,1,0,0,0,1541,1543,5,
        14,0,0,1542,1544,5,207,0,0,1543,1542,1,0,0,0,1543,1544,1,0,0,0,1544,
        1545,1,0,0,0,1545,1571,5,195,0,0,1546,1547,5,17,0,0,1547,1548,5,
        18,0,0,1548,1551,3,204,102,0,1549,1552,5,139,0,0,1550,1552,3,208,
        104,0,1551,1549,1,0,0,0,1551,1550,1,0,0,0,1552,1571,1,0,0,0,1553,
        1554,5,82,0,0,1554,1555,3,204,102,0,1555,1556,3,204,102,0,1556,1557,
        3,204,102,0,1557,1558,3,204,102,0,1558,1559,3,204,102,0,1559,1560,
        3,204,102,0,1560,1561,3,204,102,0,1561,1571,1,0,0,0,1562,1571,5,
        19,0,0,1563,1564,5,155,0,0,1564,1571,5,195,0,0,1565,1566,5,63,0,
        0,1566,1567,3,204,102,0,1567,1568,3,204,102,0,1568,1571,1,0,0,0,
        1569,1571,5,64,0,0,1570,1509,1,0,0,0,1570,1510,1,0,0,0,1570,1511,
        1,0,0,0,1570,1513,1,0,0,0,1570,1515,1,0,0,0,1570,1520,1,0,0,0,1570,
        1529,1,0,0,0,1570,1531,1,0,0,0,1570,1541,1,0,0,0,1570,1546,1,0,0,
        0,1570,1553,1,0,0,0,1570,1562,1,0,0,0,1570,1563,1,0,0,0,1570,1565,
        1,0,0,0,1570,1569,1,0,0,0,1571,141,1,0,0,0,1572,1573,5,4,0,0,1573,
        1574,3,192,96,0,1574,1575,3,192,96,0,1575,1576,3,192,96,0,1576,1577,
        3,192,96,0,1577,143,1,0,0,0,1578,1618,3,146,73,0,1579,1618,3,250,
        125,0,1580,1618,3,208,104,0,1581,1583,5,21,0,0,1582,1584,5,207,0,
        0,1583,1582,1,0,0,0,1583,1584,1,0,0,0,1584,1585,1,0,0,0,1585,1618,
        3,204,102,0,1586,1587,5,46,0,0,1587,1618,5,232,0,0,1588,1589,5,42,
        0,0,1589,1590,3,204,102,0,1590,1591,3,204,102,0,1591,1592,3,204,
        102,0,1592,1618,1,0,0,0,1593,1594,5,93,0,0,1594,1595,3,204,102,0,
        1595,1596,3,204,102,0,1596,1597,3,204,102,0,1597,1618,1,0,0,0,1598,
        1600,5,43,0,0,1599,1601,5,207,0,0,1600,1599,1,0,0,0,1600,1601,1,
        0,0,0,1601,1602,1,0,0,0,1602,1618,3,204,102,0,1603,1605,5,14,0,0,
        1604,1606,5,207,0,0,1605,1604,1,0,0,0,1605,1606,1,0,0,0,1606,1607,
        1,0,0,0,1607,1618,5,195,0,0,1608,1610,5,15,0,0,1609,1611,5,226,0,
        0,1610,1609,1,0,0,0,1610,1611,1,0,0,0,1611,1612,1,0,0,0,1612,1618,
        5,227,0,0,1613,1614,5,17,0,0,1614,1615,5,18,0,0,1615,1618,3,204,
        102,0,1616,1618,5,19,0,0,1617,1578,1,0,0,0,1617,1579,1,0,0,0,1617,
        1580,1,0,0,0,1617,1581,1,0,0,0,1617,1586,1,0,0,0,1617,1588,1,0,0,
        0,1617,1593,1,0,0,0,1617,1598,1,0,0,0,1617,1603,1,0,0,0,1617,1608,
        1,0,0,0,1617,1613,1,0,0,0,1617,1616,1,0,0,0,1618,145,1,0,0,0,1619,
        1620,5,4,0,0,1620,1621,3,192,96,0,1621,1622,3,192,96,0,1622,1623,
        3,192,96,0,1623,1624,3,192,96,0,1624,1625,3,192,96,0,1625,1626,3,
        192,96,0,1626,1627,3,192,96,0,1627,1629,3,200,100,0,1628,1630,3,
        200,100,0,1629,1628,1,0,0,0,1629,1630,1,0,0,0,1630,1632,1,0,0,0,
        1631,1633,3,200,100,0,1632,1631,1,0,0,0,1632,1633,1,0,0,0,1633,147,
        1,0,0,0,1634,1672,3,146,73,0,1635,1672,3,208,104,0,1636,1638,5,21,
        0,0,1637,1639,5,207,0,0,1638,1637,1,0,0,0,1638,1639,1,0,0,0,1639,
        1640,1,0,0,0,1640,1672,3,204,102,0,1641,1642,5,42,0,0,1642,1643,
        3,204,102,0,1643,1644,3,204,102,0,1644,1645,3,204,102,0,1645,1672,
        1,0,0,0,1646,1647,5,93,0,0,1647,1648,3,204,102,0,1648,1649,3,204,
        102,0,1649,1650,3,204,102,0,1650,1651,3,204,102,0,1651,1672,1,0,
        0,0,1652,1654,5,43,0,0,1653,1655,5,207,0,0,1654,1653,1,0,0,0,1654,
        1655,1,0,0,0,1655,1656,1,0,0,0,1656,1672,3,204,102,0,1657,1659,5,
        14,0,0,1658,1660,5,207,0,0,1659,1658,1,0,0,0,1659,1660,1,0,0,0,1660,
        1661,1,0,0,0,1661,1672,5,195,0,0,1662,1664,5,15,0,0,1663,1665,5,
        226,0,0,1664,1663,1,0,0,0,1664,1665,1,0,0,0,1665,1666,1,0,0,0,1666,
        1672,5,227,0,0,1667,1668,5,17,0,0,1668,1669,5,18,0,0,1669,1672,3,
        204,102,0,1670,1672,5,19,0,0,1671,1634,1,0,0,0,1671,1635,1,0,0,0,
        1671,1636,1,0,0,0,1671,1641,1,0,0,0,1671,1646,1,0,0,0,1671,1652,
        1,0,0,0,1671,1657,1,0,0,0,1671,1662,1,0,0,0,1671,1667,1,0,0,0,1671,
        1670,1,0,0,0,1672,149,1,0,0,0,1673,1704,3,152,76,0,1674,1704,3,208,
        104,0,1675,1676,5,42,0,0,1676,1677,3,204,102,0,1677,1678,3,204,102,
        0,1678,1679,3,204,102,0,1679,1680,3,204,102,0,1680,1681,3,204,102,
        0,1681,1682,3,204,102,0,1682,1683,3,204,102,0,1683,1704,1,0,0,0,
        1684,1686,5,43,0,0,1685,1687,5,207,0,0,1686,1685,1,0,0,0,1686,1687,
        1,0,0,0,1687,1688,1,0,0,0,1688,1704,3,204,102,0,1689,1691,5,14,0,
        0,1690,1692,5,207,0,0,1691,1690,1,0,0,0,1691,1692,1,0,0,0,1692,1693,
        1,0,0,0,1693,1704,5,195,0,0,1694,1696,5,15,0,0,1695,1697,5,226,0,
        0,1696,1695,1,0,0,0,1696,1697,1,0,0,0,1697,1698,1,0,0,0,1698,1704,
        5,227,0,0,1699,1700,5,17,0,0,1700,1701,5,18,0,0,1701,1704,3,204,
        102,0,1702,1704,5,19,0,0,1703,1673,1,0,0,0,1703,1674,1,0,0,0,1703,
        1675,1,0,0,0,1703,1684,1,0,0,0,1703,1689,1,0,0,0,1703,1694,1,0,0,
        0,1703,1699,1,0,0,0,1703,1702,1,0,0,0,1704,151,1,0,0,0,1705,1706,
        5,4,0,0,1706,1707,3,192,96,0,1707,1708,3,192,96,0,1708,1709,3,192,
        96,0,1709,1710,3,192,96,0,1710,1711,3,192,96,0,1711,1712,3,192,96,
        0,1712,1713,3,192,96,0,1713,1714,3,192,96,0,1714,1715,3,200,100,
        0,1715,1716,3,200,100,0,1716,153,1,0,0,0,1717,1756,3,156,78,0,1718,
        1756,3,208,104,0,1719,1720,5,97,0,0,1720,1756,5,201,0,0,1721,1722,
        5,62,0,0,1722,1723,5,195,0,0,1723,1724,5,195,0,0,1724,1756,3,204,
        102,0,1725,1726,5,78,0,0,1726,1756,3,204,102,0,1727,1729,5,43,0,
        0,1728,1730,5,207,0,0,1729,1728,1,0,0,0,1729,1730,1,0,0,0,1730,1731,
        1,0,0,0,1731,1756,3,204,102,0,1732,1734,5,14,0,0,1733,1735,5,207,
        0,0,1734,1733,1,0,0,0,1734,1735,1,0,0,0,1735,1736,1,0,0,0,1736,1756,
        5,195,0,0,1737,1739,5,15,0,0,1738,1740,5,226,0,0,1739,1738,1,0,0,
        0,1739,1740,1,0,0,0,1740,1741,1,0,0,0,1741,1756,5,227,0,0,1742,1743,
        5,17,0,0,1743,1744,5,18,0,0,1744,1747,3,204,102,0,1745,1748,5,139,
        0,0,1746,1748,3,208,104,0,1747,1745,1,0,0,0,1747,1746,1,0,0,0,1748,
        1756,1,0,0,0,1749,1756,5,19,0,0,1750,1751,5,63,0,0,1751,1752,7,3,
        0,0,1752,1753,5,195,0,0,1753,1756,5,195,0,0,1754,1756,5,64,0,0,1755,
        1717,1,0,0,0,1755,1718,1,0,0,0,1755,1719,1,0,0,0,1755,1721,1,0,0,
        0,1755,1725,1,0,0,0,1755,1727,1,0,0,0,1755,1732,1,0,0,0,1755,1737,
        1,0,0,0,1755,1742,1,0,0,0,1755,1749,1,0,0,0,1755,1750,1,0,0,0,1755,
        1754,1,0,0,0,1756,155,1,0,0,0,1757,1758,5,4,0,0,1758,1759,3,192,
        96,0,1759,1760,3,192,96,0,1760,1761,3,192,96,0,1761,1762,3,192,96,
        0,1762,1763,3,192,96,0,1763,1764,3,192,96,0,1764,1765,3,192,96,0,
        1765,1766,3,192,96,0,1766,1767,3,192,96,0,1767,1768,3,192,96,0,1768,
        1770,3,192,96,0,1769,1771,3,192,96,0,1770,1769,1,0,0,0,1770,1771,
        1,0,0,0,1771,157,1,0,0,0,1772,1825,3,160,80,0,1773,1825,3,252,126,
        0,1774,1825,3,208,104,0,1775,1777,5,43,0,0,1776,1778,5,207,0,0,1777,
        1776,1,0,0,0,1777,1778,1,0,0,0,1778,1779,1,0,0,0,1779,1780,3,210,
        105,0,1780,1781,3,204,102,0,1781,1825,1,0,0,0,1782,1784,5,14,0,0,
        1783,1785,5,207,0,0,1784,1783,1,0,0,0,1784,1785,1,0,0,0,1785,1786,
        1,0,0,0,1786,1825,5,195,0,0,1787,1789,5,15,0,0,1788,1790,5,226,0,
        0,1789,1788,1,0,0,0,1789,1790,1,0,0,0,1790,1791,1,0,0,0,1791,1792,
        5,228,0,0,1792,1825,5,227,0,0,1793,1795,5,99,0,0,1794,1796,5,207,
        0,0,1795,1794,1,0,0,0,1795,1796,1,0,0,0,1796,1797,1,0,0,0,1797,1798,
        3,210,105,0,1798,1799,3,204,102,0,1799,1825,1,0,0,0,1800,1802,5,
        100,0,0,1801,1803,5,207,0,0,1802,1801,1,0,0,0,1802,1803,1,0,0,0,
        1803,1804,1,0,0,0,1804,1805,3,210,105,0,1805,1806,3,204,102,0,1806,
        1825,1,0,0,0,1807,1809,5,101,0,0,1808,1810,5,207,0,0,1809,1808,1,
        0,0,0,1809,1810,1,0,0,0,1810,1811,1,0,0,0,1811,1812,3,210,105,0,
        1812,1813,3,204,102,0,1813,1814,3,204,102,0,1814,1825,1,0,0,0,1815,
        1816,5,17,0,0,1816,1817,5,18,0,0,1817,1820,3,204,102,0,1818,1821,
        5,139,0,0,1819,1821,3,208,104,0,1820,1818,1,0,0,0,1820,1819,1,0,
        0,0,1821,1825,1,0,0,0,1822,1825,5,19,0,0,1823,1825,5,102,0,0,1824,
        1772,1,0,0,0,1824,1773,1,0,0,0,1824,1774,1,0,0,0,1824,1775,1,0,0,
        0,1824,1782,1,0,0,0,1824,1787,1,0,0,0,1824,1793,1,0,0,0,1824,1800,
        1,0,0,0,1824,1807,1,0,0,0,1824,1815,1,0,0,0,1824,1822,1,0,0,0,1824,
        1823,1,0,0,0,1825,159,1,0,0,0,1826,1827,5,4,0,0,1827,1828,3,192,
        96,0,1828,1829,3,192,96,0,1829,1831,3,200,100,0,1830,1832,3,200,
        100,0,1831,1830,1,0,0,0,1831,1832,1,0,0,0,1832,161,1,0,0,0,1833,
        1875,3,164,82,0,1834,1875,3,254,127,0,1835,1875,3,208,104,0,1836,
        1837,5,104,0,0,1837,1875,5,195,0,0,1838,1839,5,42,0,0,1839,1840,
        3,204,102,0,1840,1841,3,204,102,0,1841,1875,1,0,0,0,1842,1844,5,
        43,0,0,1843,1845,5,207,0,0,1844,1843,1,0,0,0,1844,1845,1,0,0,0,1845,
        1846,1,0,0,0,1846,1875,3,204,102,0,1847,1849,5,14,0,0,1848,1850,
        5,207,0,0,1849,1848,1,0,0,0,1849,1850,1,0,0,0,1850,1851,1,0,0,0,
        1851,1875,5,195,0,0,1852,1853,5,17,0,0,1853,1854,5,18,0,0,1854,1857,
        3,204,102,0,1855,1858,5,139,0,0,1856,1858,3,208,104,0,1857,1855,
        1,0,0,0,1857,1856,1,0,0,0,1858,1875,1,0,0,0,1859,1875,5,19,0,0,1860,
        1861,5,105,0,0,1861,1875,5,201,0,0,1862,1863,5,106,0,0,1863,1864,
        3,204,102,0,1864,1865,5,195,0,0,1865,1875,1,0,0,0,1866,1875,5,107,
        0,0,1867,1875,5,108,0,0,1868,1875,5,109,0,0,1869,1875,5,110,0,0,
        1870,1875,5,111,0,0,1871,1875,5,112,0,0,1872,1873,5,113,0,0,1873,
        1875,5,195,0,0,1874,1833,1,0,0,0,1874,1834,1,0,0,0,1874,1835,1,0,
        0,0,1874,1836,1,0,0,0,1874,1838,1,0,0,0,1874,1842,1,0,0,0,1874,1847,
        1,0,0,0,1874,1852,1,0,0,0,1874,1859,1,0,0,0,1874,1860,1,0,0,0,1874,
        1862,1,0,0,0,1874,1866,1,0,0,0,1874,1867,1,0,0,0,1874,1868,1,0,0,
        0,1874,1869,1,0,0,0,1874,1870,1,0,0,0,1874,1871,1,0,0,0,1874,1872,
        1,0,0,0,1875,163,1,0,0,0,1876,1877,5,4,0,0,1877,1878,3,192,96,0,
        1878,1879,3,192,96,0,1879,1880,3,192,96,0,1880,1881,3,192,96,0,1881,
        1882,3,192,96,0,1882,1884,3,200,100,0,1883,1885,3,200,100,0,1884,
        1883,1,0,0,0,1884,1885,1,0,0,0,1885,1887,1,0,0,0,1886,1888,3,200,
        100,0,1887,1886,1,0,0,0,1887,1888,1,0,0,0,1888,165,1,0,0,0,1889,
        1921,3,168,84,0,1890,1921,3,208,104,0,1891,1892,5,104,0,0,1892,1921,
        5,195,0,0,1893,1894,5,42,0,0,1894,1895,3,204,102,0,1895,1896,3,204,
        102,0,1896,1921,1,0,0,0,1897,1899,5,43,0,0,1898,1900,5,207,0,0,1899,
        1898,1,0,0,0,1899,1900,1,0,0,0,1900,1901,1,0,0,0,1901,1921,3,204,
        102,0,1902,1904,5,14,0,0,1903,1905,5,207,0,0,1904,1903,1,0,0,0,1904,
        1905,1,0,0,0,1905,1906,1,0,0,0,1906,1921,5,195,0,0,1907,1921,5,107,
        0,0,1908,1921,5,108,0,0,1909,1921,5,106,0,0,1910,1921,5,109,0,0,
        1911,1921,5,110,0,0,1912,1921,5,113,0,0,1913,1914,5,17,0,0,1914,
        1921,5,18,0,0,1915,1921,5,19,0,0,1916,1917,5,105,0,0,1917,1921,5,
        201,0,0,1918,1921,5,111,0,0,1919,1921,5,112,0,0,1920,1889,1,0,0,
        0,1920,1890,1,0,0,0,1920,1891,1,0,0,0,1920,1893,1,0,0,0,1920,1897,
        1,0,0,0,1920,1902,1,0,0,0,1920,1907,1,0,0,0,1920,1908,1,0,0,0,1920,
        1909,1,0,0,0,1920,1910,1,0,0,0,1920,1911,1,0,0,0,1920,1912,1,0,0,
        0,1920,1913,1,0,0,0,1920,1915,1,0,0,0,1920,1916,1,0,0,0,1920,1918,
        1,0,0,0,1920,1919,1,0,0,0,1921,167,1,0,0,0,1922,1923,5,4,0,0,1923,
        1924,3,192,96,0,1924,1925,3,192,96,0,1925,1926,3,192,96,0,1926,1927,
        3,192,96,0,1927,1928,3,192,96,0,1928,1929,3,192,96,0,1929,1931,3,
        200,100,0,1930,1932,3,200,100,0,1931,1930,1,0,0,0,1931,1932,1,0,
        0,0,1932,169,1,0,0,0,1933,1950,3,172,86,0,1934,1950,3,208,104,0,
        1935,1937,5,43,0,0,1936,1938,5,207,0,0,1937,1936,1,0,0,0,1937,1938,
        1,0,0,0,1938,1939,1,0,0,0,1939,1950,3,204,102,0,1940,1942,5,14,0,
        0,1941,1943,5,207,0,0,1942,1941,1,0,0,0,1942,1943,1,0,0,0,1943,1944,
        1,0,0,0,1944,1950,5,195,0,0,1945,1946,5,17,0,0,1946,1947,5,18,0,
        0,1947,1950,3,204,102,0,1948,1950,5,19,0,0,1949,1933,1,0,0,0,1949,
        1934,1,0,0,0,1949,1935,1,0,0,0,1949,1940,1,0,0,0,1949,1945,1,0,0,
        0,1949,1948,1,0,0,0,1950,171,1,0,0,0,1951,1952,5,4,0,0,1952,1953,
        3,192,96,0,1953,1954,3,192,96,0,1954,1955,3,200,100,0,1955,1956,
        3,200,100,0,1956,1957,3,200,100,0,1957,173,1,0,0,0,1958,1981,3,176,
        88,0,1959,1981,3,208,104,0,1960,1961,5,117,0,0,1961,1981,5,195,0,
        0,1962,1963,5,42,0,0,1963,1981,3,204,102,0,1964,1966,5,43,0,0,1965,
        1967,5,207,0,0,1966,1965,1,0,0,0,1966,1967,1,0,0,0,1967,1968,1,0,
        0,0,1968,1981,3,204,102,0,1969,1971,5,14,0,0,1970,1972,5,207,0,0,
        1971,1970,1,0,0,0,1971,1972,1,0,0,0,1972,1973,1,0,0,0,1973,1981,
        5,195,0,0,1974,1975,5,17,0,0,1975,1976,5,18,0,0,1976,1981,3,204,
        102,0,1977,1981,5,19,0,0,1978,1979,5,113,0,0,1979,1981,5,195,0,0,
        1980,1958,1,0,0,0,1980,1959,1,0,0,0,1980,1960,1,0,0,0,1980,1962,
        1,0,0,0,1980,1964,1,0,0,0,1980,1969,1,0,0,0,1980,1974,1,0,0,0,1980,
        1977,1,0,0,0,1980,1978,1,0,0,0,1981,175,1,0,0,0,1982,1983,5,4,0,
        0,1983,1984,3,192,96,0,1984,1985,3,192,96,0,1985,1986,3,192,96,0,
        1986,1988,3,200,100,0,1987,1989,3,200,100,0,1988,1987,1,0,0,0,1988,
        1989,1,0,0,0,1989,177,1,0,0,0,1990,2008,3,180,90,0,1991,2008,3,256,
        128,0,1992,2008,3,208,104,0,1993,1995,5,43,0,0,1994,1996,5,207,0,
        0,1995,1994,1,0,0,0,1995,1996,1,0,0,0,1996,1997,1,0,0,0,1997,2008,
        3,204,102,0,1998,2000,5,14,0,0,1999,2001,5,207,0,0,2000,1999,1,0,
        0,0,2000,2001,1,0,0,0,2001,2002,1,0,0,0,2002,2008,5,195,0,0,2003,
        2004,5,17,0,0,2004,2005,5,18,0,0,2005,2008,3,204,102,0,2006,2008,
        5,19,0,0,2007,1990,1,0,0,0,2007,1991,1,0,0,0,2007,1992,1,0,0,0,2007,
        1993,1,0,0,0,2007,1998,1,0,0,0,2007,2003,1,0,0,0,2007,2006,1,0,0,
        0,2008,179,1,0,0,0,2009,2010,5,4,0,0,2010,2011,3,192,96,0,2011,2012,
        3,192,96,0,2012,2013,3,192,96,0,2013,181,1,0,0,0,2014,2082,3,184,
        92,0,2015,2082,3,258,129,0,2016,2018,5,120,0,0,2017,2019,5,207,0,
        0,2018,2017,1,0,0,0,2018,2019,1,0,0,0,2019,2020,1,0,0,0,2020,2082,
        3,204,102,0,2021,2023,5,121,0,0,2022,2024,5,207,0,0,2023,2022,1,
        0,0,0,2023,2024,1,0,0,0,2024,2025,1,0,0,0,2025,2082,3,204,102,0,
        2026,2028,5,122,0,0,2027,2029,5,207,0,0,2028,2027,1,0,0,0,2028,2029,
        1,0,0,0,2029,2030,1,0,0,0,2030,2082,5,195,0,0,2031,2033,5,123,0,
        0,2032,2034,5,207,0,0,2033,2032,1,0,0,0,2033,2034,1,0,0,0,2034,2035,
        1,0,0,0,2035,2082,5,195,0,0,2036,2038,5,124,0,0,2037,2039,5,207,
        0,0,2038,2037,1,0,0,0,2038,2039,1,0,0,0,2039,2040,1,0,0,0,2040,2082,
        5,195,0,0,2041,2043,5,125,0,0,2042,2044,5,207,0,0,2043,2042,1,0,
        0,0,2043,2044,1,0,0,0,2044,2045,1,0,0,0,2045,2082,5,201,0,0,2046,
        2048,5,126,0,0,2047,2049,5,207,0,0,2048,2047,1,0,0,0,2048,2049,1,
        0,0,0,2049,2050,1,0,0,0,2050,2082,3,204,102,0,2051,2053,5,127,0,
        0,2052,2054,5,207,0,0,2053,2052,1,0,0,0,2053,2054,1,0,0,0,2054,2055,
        1,0,0,0,2055,2082,3,204,102,0,2056,2058,5,128,0,0,2057,2059,5,207,
        0,0,2058,2057,1,0,0,0,2058,2059,1,0,0,0,2059,2060,1,0,0,0,2060,2082,
        3,204,102,0,2061,2063,5,129,0,0,2062,2064,5,207,0,0,2063,2062,1,
        0,0,0,2063,2064,1,0,0,0,2064,2065,1,0,0,0,2065,2082,3,204,102,0,
        2066,2068,5,130,0,0,2067,2069,5,207,0,0,2068,2067,1,0,0,0,2068,2069,
        1,0,0,0,2069,2070,1,0,0,0,2070,2082,5,195,0,0,2071,2073,5,131,0,
        0,2072,2074,5,207,0,0,2073,2072,1,0,0,0,2073,2074,1,0,0,0,2074,2075,
        1,0,0,0,2075,2082,5,195,0,0,2076,2078,5,132,0,0,2077,2079,5,207,
        0,0,2078,2077,1,0,0,0,2078,2079,1,0,0,0,2079,2080,1,0,0,0,2080,2082,
        5,195,0,0,2081,2014,1,0,0,0,2081,2015,1,0,0,0,2081,2016,1,0,0,0,
        2081,2021,1,0,0,0,2081,2026,1,0,0,0,2081,2031,1,0,0,0,2081,2036,
        1,0,0,0,2081,2041,1,0,0,0,2081,2046,1,0,0,0,2081,2051,1,0,0,0,2081,
        2056,1,0,0,0,2081,2061,1,0,0,0,2081,2066,1,0,0,0,2081,2071,1,0,0,
        0,2081,2076,1,0,0,0,2082,183,1,0,0,0,2083,2084,5,4,0,0,2084,2085,
        3,192,96,0,2085,2086,3,192,96,0,2086,185,1,0,0,0,2087,2088,5,135,
        0,0,2088,2092,5,37,0,0,2089,2091,3,188,94,0,2090,2089,1,0,0,0,2091,
        2094,1,0,0,0,2092,2090,1,0,0,0,2092,2093,1,0,0,0,2093,2095,1,0,0,
        0,2094,2092,1,0,0,0,2095,2096,5,2,0,0,2096,187,1,0,0,0,2097,2101,
        5,54,0,0,2098,2100,3,190,95,0,2099,2098,1,0,0,0,2100,2103,1,0,0,
        0,2101,2099,1,0,0,0,2101,2102,1,0,0,0,2102,2104,1,0,0,0,2103,2101,
        1,0,0,0,2104,2108,5,2,0,0,2105,2108,5,55,0,0,2106,2108,5,40,0,0,
        2107,2097,1,0,0,0,2107,2105,1,0,0,0,2107,2106,1,0,0,0,2108,189,1,
        0,0,0,2109,2111,5,136,0,0,2110,2112,5,207,0,0,2111,2110,1,0,0,0,
        2111,2112,1,0,0,0,2112,2113,1,0,0,0,2113,2125,3,192,96,0,2114,2116,
        5,137,0,0,2115,2117,5,207,0,0,2116,2115,1,0,0,0,2116,2117,1,0,0,
        0,2117,2118,1,0,0,0,2118,2125,3,204,102,0,2119,2121,5,57,0,0,2120,
        2122,5,207,0,0,2121,2120,1,0,0,0,2121,2122,1,0,0,0,2122,2123,1,0,
        0,0,2123,2125,3,204,102,0,2124,2109,1,0,0,0,2124,2114,1,0,0,0,2124,
        2119,1,0,0,0,2125,191,1,0,0,0,2126,2127,5,204,0,0,2127,2128,3,194,
        97,0,2128,2129,5,205,0,0,2129,193,1,0,0,0,2130,2135,3,196,98,0,2131,
        2132,5,190,0,0,2132,2134,3,196,98,0,2133,2131,1,0,0,0,2134,2137,
        1,0,0,0,2135,2133,1,0,0,0,2135,2136,1,0,0,0,2136,195,1,0,0,0,2137,
        2135,1,0,0,0,2138,2143,3,198,99,0,2139,2140,5,191,0,0,2140,2142,
        3,198,99,0,2141,2139,1,0,0,0,2142,2145,1,0,0,0,2143,2141,1,0,0,0,
        2143,2144,1,0,0,0,2144,197,1,0,0,0,2145,2143,1,0,0,0,2146,2147,6,
        99,-1,0,2147,2148,5,204,0,0,2148,2149,3,194,97,0,2149,2150,5,205,
        0,0,2150,2286,1,0,0,0,2151,2286,5,139,0,0,2152,2153,5,141,0,0,2153,
        2154,7,4,0,0,2154,2155,7,5,0,0,2155,2286,7,4,0,0,2156,2158,5,142,
        0,0,2157,2159,5,219,0,0,2158,2157,1,0,0,0,2158,2159,1,0,0,0,2159,
        2160,1,0,0,0,2160,2161,5,220,0,0,2161,2162,5,221,0,0,2162,2286,3,
        202,101,0,2163,2164,5,143,0,0,2164,2286,3,198,99,29,2165,2166,5,
        144,0,0,2166,2286,3,198,99,28,2167,2168,5,145,0,0,2168,2286,3,198,
        99,27,2169,2177,5,146,0,0,2170,2178,5,202,0,0,2171,2174,5,201,0,
        0,2172,2173,5,206,0,0,2173,2175,5,201,0,0,2174,2172,1,0,0,0,2174,
        2175,1,0,0,0,2175,2178,1,0,0,0,2176,2178,5,213,0,0,2177,2170,1,0,
        0,0,2177,2171,1,0,0,0,2177,2176,1,0,0,0,2178,2286,1,0,0,0,2179,2286,
        5,147,0,0,2180,2181,5,148,0,0,2181,2286,5,195,0,0,2182,2286,5,149,
        0,0,2183,2196,5,150,0,0,2184,2197,5,202,0,0,2185,2188,5,201,0,0,
        2186,2187,5,206,0,0,2187,2189,5,201,0,0,2188,2186,1,0,0,0,2188,2189,
        1,0,0,0,2189,2197,1,0,0,0,2190,2193,5,198,0,0,2191,2192,5,206,0,
        0,2192,2194,5,198,0,0,2193,2191,1,0,0,0,2193,2194,1,0,0,0,2194,2197,
        1,0,0,0,2195,2197,5,213,0,0,2196,2184,1,0,0,0,2196,2185,1,0,0,0,
        2196,2190,1,0,0,0,2196,2195,1,0,0,0,2197,2286,1,0,0,0,2198,2199,
        5,192,0,0,2199,2286,3,198,99,21,2200,2201,5,151,0,0,2201,2202,5,
        204,0,0,2202,2204,3,202,101,0,2203,2205,5,193,0,0,2204,2203,1,0,
        0,0,2204,2205,1,0,0,0,2205,2206,1,0,0,0,2206,2208,3,202,101,0,2207,
        2209,5,193,0,0,2208,2207,1,0,0,0,2208,2209,1,0,0,0,2209,2210,1,0,
        0,0,2210,2211,3,202,101,0,2211,2212,5,205,0,0,2212,2213,5,152,0,
        0,2213,2214,3,202,101,0,2214,2286,1,0,0,0,2215,2216,5,151,0,0,2216,
        2217,5,204,0,0,2217,2219,5,188,0,0,2218,2220,5,207,0,0,2219,2218,
        1,0,0,0,2219,2220,1,0,0,0,2220,2221,1,0,0,0,2221,2223,3,192,96,0,
        2222,2224,5,193,0,0,2223,2222,1,0,0,0,2223,2224,1,0,0,0,2224,2230,
        1,0,0,0,2225,2227,5,189,0,0,2226,2228,5,207,0,0,2227,2226,1,0,0,
        0,2227,2228,1,0,0,0,2228,2229,1,0,0,0,2229,2231,3,192,96,0,2230,
        2225,1,0,0,0,2230,2231,1,0,0,0,2231,2232,1,0,0,0,2232,2233,5,205,
        0,0,2233,2234,5,152,0,0,2234,2235,3,202,101,0,2235,2286,1,0,0,0,
        2236,2286,5,153,0,0,2237,2286,5,154,0,0,2238,2246,5,155,0,0,2239,
        2247,5,203,0,0,2240,2243,5,195,0,0,2241,2242,5,206,0,0,2242,2244,
        5,195,0,0,2243,2241,1,0,0,0,2243,2244,1,0,0,0,2244,2247,1,0,0,0,
        2245,2247,5,213,0,0,2246,2239,1,0,0,0,2246,2240,1,0,0,0,2246,2245,
        1,0,0,0,2247,2286,1,0,0,0,2248,2256,5,156,0,0,2249,2257,5,202,0,
        0,2250,2253,5,201,0,0,2251,2252,5,206,0,0,2252,2254,5,201,0,0,2253,
        2251,1,0,0,0,2253,2254,1,0,0,0,2254,2257,1,0,0,0,2255,2257,5,213,
        0,0,2256,2249,1,0,0,0,2256,2250,1,0,0,0,2256,2255,1,0,0,0,2257,2286,
        1,0,0,0,2258,2271,5,158,0,0,2259,2272,5,202,0,0,2260,2263,5,201,
        0,0,2261,2262,5,206,0,0,2262,2264,5,201,0,0,2263,2261,1,0,0,0,2263,
        2264,1,0,0,0,2264,2272,1,0,0,0,2265,2268,5,198,0,0,2266,2267,5,206,
        0,0,2267,2269,5,198,0,0,2268,2266,1,0,0,0,2268,2269,1,0,0,0,2269,
        2272,1,0,0,0,2270,2272,5,213,0,0,2271,2259,1,0,0,0,2271,2260,1,0,
        0,0,2271,2265,1,0,0,0,2271,2270,1,0,0,0,2272,2286,1,0,0,0,2273,2286,
        5,159,0,0,2274,2286,5,160,0,0,2275,2286,5,161,0,0,2276,2286,5,162,
        0,0,2277,2286,5,163,0,0,2278,2286,5,164,0,0,2279,2286,5,165,0,0,
        2280,2286,5,166,0,0,2281,2286,5,167,0,0,2282,2286,5,168,0,0,2283,
        2286,5,133,0,0,2284,2286,5,134,0,0,2285,2146,1,0,0,0,2285,2151,1,
        0,0,0,2285,2152,1,0,0,0,2285,2156,1,0,0,0,2285,2163,1,0,0,0,2285,
        2165,1,0,0,0,2285,2167,1,0,0,0,2285,2169,1,0,0,0,2285,2179,1,0,0,
        0,2285,2180,1,0,0,0,2285,2182,1,0,0,0,2285,2183,1,0,0,0,2285,2198,
        1,0,0,0,2285,2200,1,0,0,0,2285,2215,1,0,0,0,2285,2236,1,0,0,0,2285,
        2237,1,0,0,0,2285,2238,1,0,0,0,2285,2248,1,0,0,0,2285,2258,1,0,0,
        0,2285,2273,1,0,0,0,2285,2274,1,0,0,0,2285,2275,1,0,0,0,2285,2276,
        1,0,0,0,2285,2277,1,0,0,0,2285,2278,1,0,0,0,2285,2279,1,0,0,0,2285,
        2280,1,0,0,0,2285,2281,1,0,0,0,2285,2282,1,0,0,0,2285,2283,1,0,0,
        0,2285,2284,1,0,0,0,2286,2295,1,0,0,0,2287,2288,10,32,0,0,2288,2289,
        5,140,0,0,2289,2294,3,202,101,0,2290,2291,10,14,0,0,2291,2292,5,
        157,0,0,2292,2294,3,202,101,0,2293,2287,1,0,0,0,2293,2290,1,0,0,
        0,2294,2297,1,0,0,0,2295,2293,1,0,0,0,2295,2296,1,0,0,0,2296,199,
        1,0,0,0,2297,2295,1,0,0,0,2298,2299,7,6,0,0,2299,201,1,0,0,0,2300,
        2301,7,7,0,0,2301,203,1,0,0,0,2302,2303,7,6,0,0,2303,205,1,0,0,0,
        2304,2305,7,7,0,0,2305,207,1,0,0,0,2306,2308,5,9,0,0,2307,2309,5,
        207,0,0,2308,2307,1,0,0,0,2308,2309,1,0,0,0,2309,2310,1,0,0,0,2310,
        2311,3,210,105,0,2311,209,1,0,0,0,2312,2313,7,8,0,0,2313,211,1,0,
        0,0,2314,2325,5,138,0,0,2315,2323,5,236,0,0,2316,2318,5,239,0,0,
        2317,2316,1,0,0,0,2318,2321,1,0,0,0,2319,2317,1,0,0,0,2319,2320,
        1,0,0,0,2320,2324,1,0,0,0,2321,2319,1,0,0,0,2322,2324,5,240,0,0,
        2323,2319,1,0,0,0,2323,2322,1,0,0,0,2324,2326,1,0,0,0,2325,2315,
        1,0,0,0,2325,2326,1,0,0,0,2326,2327,1,0,0,0,2327,2331,5,237,0,0,
        2328,2330,5,239,0,0,2329,2328,1,0,0,0,2330,2333,1,0,0,0,2331,2329,
        1,0,0,0,2331,2332,1,0,0,0,2332,2334,1,0,0,0,2333,2331,1,0,0,0,2334,
        2335,5,238,0,0,2335,213,1,0,0,0,2336,2337,5,169,0,0,2337,2338,3,
        216,108,0,2338,2339,3,192,96,0,2339,215,1,0,0,0,2340,2341,7,9,0,
        0,2341,2342,3,218,109,0,2342,2343,5,242,0,0,2343,2347,1,0,0,0,2344,
        2345,5,172,0,0,2345,2347,3,226,113,0,2346,2340,1,0,0,0,2346,2344,
        1,0,0,0,2347,217,1,0,0,0,2348,2351,5,252,0,0,2349,2350,5,243,0,0,
        2350,2352,3,220,110,0,2351,2349,1,0,0,0,2351,2352,1,0,0,0,2352,219,
        1,0,0,0,2353,2356,3,222,111,0,2354,2355,7,10,0,0,2355,2357,3,220,
        110,0,2356,2354,1,0,0,0,2356,2357,1,0,0,0,2357,221,1,0,0,0,2358,
        2366,5,252,0,0,2359,2366,3,224,112,0,2360,2366,5,250,0,0,2361,2366,
        5,251,0,0,2362,2366,5,276,0,0,2363,2366,5,275,0,0,2364,2366,5,277,
        0,0,2365,2358,1,0,0,0,2365,2359,1,0,0,0,2365,2360,1,0,0,0,2365,2361,
        1,0,0,0,2365,2362,1,0,0,0,2365,2363,1,0,0,0,2365,2364,1,0,0,0,2366,
        223,1,0,0,0,2367,2368,5,253,0,0,2368,2369,5,279,0,0,2369,2370,3,
        222,111,0,2370,2371,5,242,0,0,2371,2487,1,0,0,0,2372,2373,5,254,
        0,0,2373,2374,5,279,0,0,2374,2375,3,222,111,0,2375,2376,5,242,0,
        0,2376,2487,1,0,0,0,2377,2378,5,256,0,0,2378,2379,5,279,0,0,2379,
        2380,3,222,111,0,2380,2381,5,242,0,0,2381,2487,1,0,0,0,2382,2383,
        5,257,0,0,2383,2384,5,279,0,0,2384,2385,3,222,111,0,2385,2386,5,
        242,0,0,2386,2487,1,0,0,0,2387,2388,5,258,0,0,2388,2389,5,279,0,
        0,2389,2390,3,222,111,0,2390,2391,5,242,0,0,2391,2487,1,0,0,0,2392,
        2393,5,259,0,0,2393,2394,5,279,0,0,2394,2395,3,222,111,0,2395,2396,
        5,242,0,0,2396,2487,1,0,0,0,2397,2398,5,260,0,0,2398,2399,5,279,
        0,0,2399,2400,3,222,111,0,2400,2401,5,242,0,0,2401,2487,1,0,0,0,
        2402,2403,5,261,0,0,2403,2404,5,279,0,0,2404,2405,3,222,111,0,2405,
        2406,5,242,0,0,2406,2487,1,0,0,0,2407,2408,5,262,0,0,2408,2409,5,
        279,0,0,2409,2410,3,222,111,0,2410,2411,5,242,0,0,2411,2487,1,0,
        0,0,2412,2413,5,263,0,0,2413,2414,5,279,0,0,2414,2415,3,222,111,
        0,2415,2416,5,242,0,0,2416,2487,1,0,0,0,2417,2418,5,264,0,0,2418,
        2419,5,279,0,0,2419,2420,3,222,111,0,2420,2421,5,242,0,0,2421,2487,
        1,0,0,0,2422,2423,5,265,0,0,2423,2424,5,279,0,0,2424,2429,3,222,
        111,0,2425,2426,5,249,0,0,2426,2428,3,222,111,0,2427,2425,1,0,0,
        0,2428,2431,1,0,0,0,2429,2427,1,0,0,0,2429,2430,1,0,0,0,2430,2432,
        1,0,0,0,2431,2429,1,0,0,0,2432,2433,5,242,0,0,2433,2487,1,0,0,0,
        2434,2435,5,266,0,0,2435,2436,5,279,0,0,2436,2437,3,222,111,0,2437,
        2438,5,242,0,0,2438,2487,1,0,0,0,2439,2440,5,267,0,0,2440,2441,5,
        279,0,0,2441,2446,3,222,111,0,2442,2443,5,249,0,0,2443,2445,3,222,
        111,0,2444,2442,1,0,0,0,2445,2448,1,0,0,0,2446,2444,1,0,0,0,2446,
        2447,1,0,0,0,2447,2449,1,0,0,0,2448,2446,1,0,0,0,2449,2450,5,242,
        0,0,2450,2487,1,0,0,0,2451,2452,5,268,0,0,2452,2453,5,279,0,0,2453,
        2454,3,222,111,0,2454,2455,5,249,0,0,2455,2456,3,222,111,0,2456,
        2457,5,242,0,0,2457,2487,1,0,0,0,2458,2459,5,269,0,0,2459,2460,5,
        279,0,0,2460,2461,3,222,111,0,2461,2462,5,242,0,0,2462,2487,1,0,
        0,0,2463,2464,5,270,0,0,2464,2465,5,279,0,0,2465,2487,5,242,0,0,
        2466,2467,5,271,0,0,2467,2468,5,279,0,0,2468,2469,3,222,111,0,2469,
        2470,5,242,0,0,2470,2487,1,0,0,0,2471,2472,5,272,0,0,2472,2473,5,
        279,0,0,2473,2474,3,222,111,0,2474,2475,5,242,0,0,2475,2487,1,0,
        0,0,2476,2477,5,273,0,0,2477,2478,5,279,0,0,2478,2479,3,222,111,
        0,2479,2480,5,242,0,0,2480,2487,1,0,0,0,2481,2482,5,274,0,0,2482,
        2483,5,279,0,0,2483,2484,3,222,111,0,2484,2485,5,242,0,0,2485,2487,
        1,0,0,0,2486,2367,1,0,0,0,2486,2372,1,0,0,0,2486,2377,1,0,0,0,2486,
        2382,1,0,0,0,2486,2387,1,0,0,0,2486,2392,1,0,0,0,2486,2397,1,0,0,
        0,2486,2402,1,0,0,0,2486,2407,1,0,0,0,2486,2412,1,0,0,0,2486,2417,
        1,0,0,0,2486,2422,1,0,0,0,2486,2434,1,0,0,0,2486,2439,1,0,0,0,2486,
        2451,1,0,0,0,2486,2458,1,0,0,0,2486,2463,1,0,0,0,2486,2466,1,0,0,
        0,2486,2471,1,0,0,0,2486,2476,1,0,0,0,2486,2481,1,0,0,0,2487,225,
        1,0,0,0,2488,2489,7,11,0,0,2489,2490,5,281,0,0,2490,2491,5,290,0,
        0,2491,2492,5,282,0,0,2492,227,1,0,0,0,2493,2494,5,173,0,0,2494,
        2495,5,275,0,0,2495,2496,5,243,0,0,2496,2497,3,230,115,0,2497,2498,
        5,242,0,0,2498,229,1,0,0,0,2499,2502,3,222,111,0,2500,2501,7,10,
        0,0,2501,2503,3,230,115,0,2502,2500,1,0,0,0,2502,2503,1,0,0,0,2503,
        231,1,0,0,0,2504,2506,5,174,0,0,2505,2507,3,210,105,0,2506,2505,
        1,0,0,0,2506,2507,1,0,0,0,2507,2508,1,0,0,0,2508,2509,5,175,0,0,
        2509,2510,5,207,0,0,2510,2511,7,12,0,0,2511,2512,5,207,0,0,2512,
        2518,3,192,96,0,2513,2514,5,175,0,0,2514,2515,5,207,0,0,2515,2516,
        7,12,0,0,2516,2517,5,207,0,0,2517,2519,3,192,96,0,2518,2513,1,0,
        0,0,2518,2519,1,0,0,0,2519,2520,1,0,0,0,2520,2521,5,2,0,0,2521,233,
        1,0,0,0,2522,2526,5,177,0,0,2523,2525,3,236,118,0,2524,2523,1,0,
        0,0,2525,2528,1,0,0,0,2526,2524,1,0,0,0,2526,2527,1,0,0,0,2527,2529,
        1,0,0,0,2528,2526,1,0,0,0,2529,2530,5,2,0,0,2530,235,1,0,0,0,2531,
        2532,5,96,0,0,2532,2533,5,201,0,0,2533,2534,5,201,0,0,2534,2535,
        5,201,0,0,2535,2536,3,204,102,0,2536,2541,3,204,102,0,2537,2538,
        5,178,0,0,2538,2539,3,204,102,0,2539,2540,3,204,102,0,2540,2542,
        1,0,0,0,2541,2537,1,0,0,0,2541,2542,1,0,0,0,2542,2587,1,0,0,0,2543,
        2544,5,143,0,0,2544,2545,5,201,0,0,2545,2546,5,201,0,0,2546,2547,
        3,204,102,0,2547,2548,3,204,102,0,2548,2587,1,0,0,0,2549,2550,7,
        13,0,0,2550,2551,5,201,0,0,2551,2552,5,201,0,0,2552,2553,5,201,0,
        0,2553,2556,5,201,0,0,2554,2555,5,179,0,0,2555,2557,5,195,0,0,2556,
        2554,1,0,0,0,2556,2557,1,0,0,0,2557,2558,1,0,0,0,2558,2559,3,204,
        102,0,2559,2560,5,195,0,0,2560,2561,3,204,102,0,2561,2587,1,0,0,
        0,2562,2563,5,180,0,0,2563,2564,5,202,0,0,2564,2565,5,202,0,0,2565,
        2566,3,204,102,0,2566,2567,3,204,102,0,2567,2587,1,0,0,0,2568,2569,
        5,182,0,0,2569,2570,5,201,0,0,2570,2571,5,201,0,0,2571,2572,3,204,
        102,0,2572,2573,3,204,102,0,2573,2574,3,204,102,0,2574,2575,3,204,
        102,0,2575,2587,1,0,0,0,2576,2577,5,183,0,0,2577,2578,5,201,0,0,
        2578,2579,3,204,102,0,2579,2580,3,204,102,0,2580,2581,3,204,102,
        0,2581,2582,3,204,102,0,2582,2587,1,0,0,0,2583,2584,7,14,0,0,2584,
        2587,5,201,0,0,2585,2587,5,185,0,0,2586,2531,1,0,0,0,2586,2543,1,
        0,0,0,2586,2549,1,0,0,0,2586,2562,1,0,0,0,2586,2568,1,0,0,0,2586,
        2576,1,0,0,0,2586,2583,1,0,0,0,2586,2585,1,0,0,0,2587,237,1,0,0,
        0,2588,2589,5,186,0,0,2589,2590,5,297,0,0,2590,2591,5,294,0,0,2591,
        2610,5,292,0,0,2592,2594,5,295,0,0,2593,2592,1,0,0,0,2594,2597,1,
        0,0,0,2595,2593,1,0,0,0,2595,2596,1,0,0,0,2596,2611,1,0,0,0,2597,
        2595,1,0,0,0,2598,2600,5,296,0,0,2599,2598,1,0,0,0,2600,2603,1,0,
        0,0,2601,2599,1,0,0,0,2601,2602,1,0,0,0,2602,2611,1,0,0,0,2603,2601,
        1,0,0,0,2604,2606,5,298,0,0,2605,2604,1,0,0,0,2606,2609,1,0,0,0,
        2607,2605,1,0,0,0,2607,2608,1,0,0,0,2608,2611,1,0,0,0,2609,2607,
        1,0,0,0,2610,2595,1,0,0,0,2610,2601,1,0,0,0,2610,2607,1,0,0,0,2611,
        2612,1,0,0,0,2612,2613,5,293,0,0,2613,2614,5,187,0,0,2614,2620,5,
        301,0,0,2615,2619,3,228,114,0,2616,2619,3,54,27,0,2617,2619,3,4,
        2,0,2618,2615,1,0,0,0,2618,2616,1,0,0,0,2618,2617,1,0,0,0,2619,2622,
        1,0,0,0,2620,2618,1,0,0,0,2620,2621,1,0,0,0,2621,2623,1,0,0,0,2622,
        2620,1,0,0,0,2623,2624,5,2,0,0,2624,2625,5,187,0,0,2625,2626,5,301,
        0,0,2626,239,1,0,0,0,2627,2628,5,186,0,0,2628,2629,5,297,0,0,2629,
        2630,5,294,0,0,2630,2649,5,292,0,0,2631,2633,5,295,0,0,2632,2631,
        1,0,0,0,2633,2636,1,0,0,0,2634,2632,1,0,0,0,2634,2635,1,0,0,0,2635,
        2650,1,0,0,0,2636,2634,1,0,0,0,2637,2639,5,296,0,0,2638,2637,1,0,
        0,0,2639,2642,1,0,0,0,2640,2638,1,0,0,0,2640,2641,1,0,0,0,2641,2650,
        1,0,0,0,2642,2640,1,0,0,0,2643,2645,5,298,0,0,2644,2643,1,0,0,0,
        2645,2648,1,0,0,0,2646,2644,1,0,0,0,2646,2647,1,0,0,0,2647,2650,
        1,0,0,0,2648,2646,1,0,0,0,2649,2634,1,0,0,0,2649,2640,1,0,0,0,2649,
        2646,1,0,0,0,2650,2651,1,0,0,0,2651,2652,5,293,0,0,2652,2653,5,187,
        0,0,2653,2659,5,301,0,0,2654,2658,3,228,114,0,2655,2658,3,62,31,
        0,2656,2658,3,6,3,0,2657,2654,1,0,0,0,2657,2655,1,0,0,0,2657,2656,
        1,0,0,0,2658,2661,1,0,0,0,2659,2657,1,0,0,0,2659,2660,1,0,0,0,2660,
        2662,1,0,0,0,2661,2659,1,0,0,0,2662,2663,5,2,0,0,2663,2664,5,187,
        0,0,2664,2665,5,301,0,0,2665,241,1,0,0,0,2666,2667,5,186,0,0,2667,
        2668,5,297,0,0,2668,2669,5,294,0,0,2669,2688,5,292,0,0,2670,2672,
        5,295,0,0,2671,2670,1,0,0,0,2672,2675,1,0,0,0,2673,2671,1,0,0,0,
        2673,2674,1,0,0,0,2674,2689,1,0,0,0,2675,2673,1,0,0,0,2676,2678,
        5,296,0,0,2677,2676,1,0,0,0,2678,2681,1,0,0,0,2679,2677,1,0,0,0,
        2679,2680,1,0,0,0,2680,2689,1,0,0,0,2681,2679,1,0,0,0,2682,2684,
        5,298,0,0,2683,2682,1,0,0,0,2684,2687,1,0,0,0,2685,2683,1,0,0,0,
        2685,2686,1,0,0,0,2686,2689,1,0,0,0,2687,2685,1,0,0,0,2688,2673,
        1,0,0,0,2688,2679,1,0,0,0,2688,2685,1,0,0,0,2689,2690,1,0,0,0,2690,
        2691,5,293,0,0,2691,2692,5,187,0,0,2692,2698,5,301,0,0,2693,2697,
        3,228,114,0,2694,2697,3,66,33,0,2695,2697,3,8,4,0,2696,2693,1,0,
        0,0,2696,2694,1,0,0,0,2696,2695,1,0,0,0,2697,2700,1,0,0,0,2698,2696,
        1,0,0,0,2698,2699,1,0,0,0,2699,2701,1,0,0,0,2700,2698,1,0,0,0,2701,
        2702,5,2,0,0,2702,2703,5,187,0,0,2703,2704,5,301,0,0,2704,243,1,
        0,0,0,2705,2706,5,186,0,0,2706,2707,5,297,0,0,2707,2708,5,294,0,
        0,2708,2727,5,292,0,0,2709,2711,5,295,0,0,2710,2709,1,0,0,0,2711,
        2714,1,0,0,0,2712,2710,1,0,0,0,2712,2713,1,0,0,0,2713,2728,1,0,0,
        0,2714,2712,1,0,0,0,2715,2717,5,296,0,0,2716,2715,1,0,0,0,2717,2720,
        1,0,0,0,2718,2716,1,0,0,0,2718,2719,1,0,0,0,2719,2728,1,0,0,0,2720,
        2718,1,0,0,0,2721,2723,5,298,0,0,2722,2721,1,0,0,0,2723,2726,1,0,
        0,0,2724,2722,1,0,0,0,2724,2725,1,0,0,0,2725,2728,1,0,0,0,2726,2724,
        1,0,0,0,2727,2712,1,0,0,0,2727,2718,1,0,0,0,2727,2724,1,0,0,0,2728,
        2729,1,0,0,0,2729,2730,5,293,0,0,2730,2731,5,187,0,0,2731,2737,5,
        301,0,0,2732,2736,3,228,114,0,2733,2736,3,96,48,0,2734,2736,3,14,
        7,0,2735,2732,1,0,0,0,2735,2733,1,0,0,0,2735,2734,1,0,0,0,2736,2739,
        1,0,0,0,2737,2735,1,0,0,0,2737,2738,1,0,0,0,2738,2740,1,0,0,0,2739,
        2737,1,0,0,0,2740,2741,5,2,0,0,2741,2742,5,187,0,0,2742,2743,5,301,
        0,0,2743,245,1,0,0,0,2744,2745,5,186,0,0,2745,2746,5,297,0,0,2746,
        2747,5,294,0,0,2747,2766,5,292,0,0,2748,2750,5,295,0,0,2749,2748,
        1,0,0,0,2750,2753,1,0,0,0,2751,2749,1,0,0,0,2751,2752,1,0,0,0,2752,
        2767,1,0,0,0,2753,2751,1,0,0,0,2754,2756,5,296,0,0,2755,2754,1,0,
        0,0,2756,2759,1,0,0,0,2757,2755,1,0,0,0,2757,2758,1,0,0,0,2758,2767,
        1,0,0,0,2759,2757,1,0,0,0,2760,2762,5,298,0,0,2761,2760,1,0,0,0,
        2762,2765,1,0,0,0,2763,2761,1,0,0,0,2763,2764,1,0,0,0,2764,2767,
        1,0,0,0,2765,2763,1,0,0,0,2766,2751,1,0,0,0,2766,2757,1,0,0,0,2766,
        2763,1,0,0,0,2767,2768,1,0,0,0,2768,2769,5,293,0,0,2769,2770,5,187,
        0,0,2770,2776,5,301,0,0,2771,2775,3,228,114,0,2772,2775,3,100,50,
        0,2773,2775,3,16,8,0,2774,2771,1,0,0,0,2774,2772,1,0,0,0,2774,2773,
        1,0,0,0,2775,2778,1,0,0,0,2776,2774,1,0,0,0,2776,2777,1,0,0,0,2777,
        2779,1,0,0,0,2778,2776,1,0,0,0,2779,2780,5,2,0,0,2780,2781,5,187,
        0,0,2781,2782,5,301,0,0,2782,247,1,0,0,0,2783,2784,5,186,0,0,2784,
        2785,5,297,0,0,2785,2786,5,294,0,0,2786,2805,5,292,0,0,2787,2789,
        5,295,0,0,2788,2787,1,0,0,0,2789,2792,1,0,0,0,2790,2788,1,0,0,0,
        2790,2791,1,0,0,0,2791,2806,1,0,0,0,2792,2790,1,0,0,0,2793,2795,
        5,296,0,0,2794,2793,1,0,0,0,2795,2798,1,0,0,0,2796,2794,1,0,0,0,
        2796,2797,1,0,0,0,2797,2806,1,0,0,0,2798,2796,1,0,0,0,2799,2801,
        5,298,0,0,2800,2799,1,0,0,0,2801,2804,1,0,0,0,2802,2800,1,0,0,0,
        2802,2803,1,0,0,0,2803,2806,1,0,0,0,2804,2802,1,0,0,0,2805,2790,
        1,0,0,0,2805,2796,1,0,0,0,2805,2802,1,0,0,0,2806,2807,1,0,0,0,2807,
        2808,5,293,0,0,2808,2809,5,187,0,0,2809,2815,5,301,0,0,2810,2814,
        3,228,114,0,2811,2814,3,134,67,0,2812,2814,3,24,12,0,2813,2810,1,
        0,0,0,2813,2811,1,0,0,0,2813,2812,1,0,0,0,2814,2817,1,0,0,0,2815,
        2813,1,0,0,0,2815,2816,1,0,0,0,2816,2818,1,0,0,0,2817,2815,1,0,0,
        0,2818,2819,5,2,0,0,2819,2820,5,187,0,0,2820,2821,5,301,0,0,2821,
        249,1,0,0,0,2822,2823,5,186,0,0,2823,2824,5,297,0,0,2824,2825,5,
        294,0,0,2825,2844,5,292,0,0,2826,2828,5,295,0,0,2827,2826,1,0,0,
        0,2828,2831,1,0,0,0,2829,2827,1,0,0,0,2829,2830,1,0,0,0,2830,2845,
        1,0,0,0,2831,2829,1,0,0,0,2832,2834,5,296,0,0,2833,2832,1,0,0,0,
        2834,2837,1,0,0,0,2835,2833,1,0,0,0,2835,2836,1,0,0,0,2836,2845,
        1,0,0,0,2837,2835,1,0,0,0,2838,2840,5,298,0,0,2839,2838,1,0,0,0,
        2840,2843,1,0,0,0,2841,2839,1,0,0,0,2841,2842,1,0,0,0,2842,2845,
        1,0,0,0,2843,2841,1,0,0,0,2844,2829,1,0,0,0,2844,2835,1,0,0,0,2844,
        2841,1,0,0,0,2845,2846,1,0,0,0,2846,2847,5,293,0,0,2847,2848,5,187,
        0,0,2848,2854,5,301,0,0,2849,2853,3,228,114,0,2850,2853,3,146,73,
        0,2851,2853,3,30,15,0,2852,2849,1,0,0,0,2852,2850,1,0,0,0,2852,2851,
        1,0,0,0,2853,2856,1,0,0,0,2854,2852,1,0,0,0,2854,2855,1,0,0,0,2855,
        2857,1,0,0,0,2856,2854,1,0,0,0,2857,2858,5,2,0,0,2858,2859,5,187,
        0,0,2859,2860,5,301,0,0,2860,251,1,0,0,0,2861,2862,5,186,0,0,2862,
        2863,5,297,0,0,2863,2864,5,294,0,0,2864,2883,5,292,0,0,2865,2867,
        5,295,0,0,2866,2865,1,0,0,0,2867,2870,1,0,0,0,2868,2866,1,0,0,0,
        2868,2869,1,0,0,0,2869,2884,1,0,0,0,2870,2868,1,0,0,0,2871,2873,
        5,296,0,0,2872,2871,1,0,0,0,2873,2876,1,0,0,0,2874,2872,1,0,0,0,
        2874,2875,1,0,0,0,2875,2884,1,0,0,0,2876,2874,1,0,0,0,2877,2879,
        5,298,0,0,2878,2877,1,0,0,0,2879,2882,1,0,0,0,2880,2878,1,0,0,0,
        2880,2881,1,0,0,0,2881,2884,1,0,0,0,2882,2880,1,0,0,0,2883,2868,
        1,0,0,0,2883,2874,1,0,0,0,2883,2880,1,0,0,0,2884,2885,1,0,0,0,2885,
        2886,5,293,0,0,2886,2887,5,187,0,0,2887,2893,5,301,0,0,2888,2892,
        3,228,114,0,2889,2892,3,160,80,0,2890,2892,3,38,19,0,2891,2888,1,
        0,0,0,2891,2889,1,0,0,0,2891,2890,1,0,0,0,2892,2895,1,0,0,0,2893,
        2891,1,0,0,0,2893,2894,1,0,0,0,2894,2896,1,0,0,0,2895,2893,1,0,0,
        0,2896,2897,5,2,0,0,2897,2898,5,187,0,0,2898,2899,5,301,0,0,2899,
        253,1,0,0,0,2900,2901,5,186,0,0,2901,2902,5,297,0,0,2902,2903,5,
        294,0,0,2903,2922,5,292,0,0,2904,2906,5,295,0,0,2905,2904,1,0,0,
        0,2906,2909,1,0,0,0,2907,2905,1,0,0,0,2907,2908,1,0,0,0,2908,2923,
        1,0,0,0,2909,2907,1,0,0,0,2910,2912,5,296,0,0,2911,2910,1,0,0,0,
        2912,2915,1,0,0,0,2913,2911,1,0,0,0,2913,2914,1,0,0,0,2914,2923,
        1,0,0,0,2915,2913,1,0,0,0,2916,2918,5,298,0,0,2917,2916,1,0,0,0,
        2918,2921,1,0,0,0,2919,2917,1,0,0,0,2919,2920,1,0,0,0,2920,2923,
        1,0,0,0,2921,2919,1,0,0,0,2922,2907,1,0,0,0,2922,2913,1,0,0,0,2922,
        2919,1,0,0,0,2923,2924,1,0,0,0,2924,2925,5,293,0,0,2925,2926,5,187,
        0,0,2926,2933,5,301,0,0,2927,2932,3,228,114,0,2928,2932,3,164,82,
        0,2929,2932,3,40,20,0,2930,2932,3,18,9,0,2931,2927,1,0,0,0,2931,
        2928,1,0,0,0,2931,2929,1,0,0,0,2931,2930,1,0,0,0,2932,2935,1,0,0,
        0,2933,2931,1,0,0,0,2933,2934,1,0,0,0,2934,2936,1,0,0,0,2935,2933,
        1,0,0,0,2936,2937,5,2,0,0,2937,2938,5,187,0,0,2938,2939,5,301,0,
        0,2939,255,1,0,0,0,2940,2941,5,186,0,0,2941,2942,5,297,0,0,2942,
        2943,5,294,0,0,2943,2962,5,292,0,0,2944,2946,5,295,0,0,2945,2944,
        1,0,0,0,2946,2949,1,0,0,0,2947,2945,1,0,0,0,2947,2948,1,0,0,0,2948,
        2963,1,0,0,0,2949,2947,1,0,0,0,2950,2952,5,296,0,0,2951,2950,1,0,
        0,0,2952,2955,1,0,0,0,2953,2951,1,0,0,0,2953,2954,1,0,0,0,2954,2963,
        1,0,0,0,2955,2953,1,0,0,0,2956,2958,5,298,0,0,2957,2956,1,0,0,0,
        2958,2961,1,0,0,0,2959,2957,1,0,0,0,2959,2960,1,0,0,0,2960,2963,
        1,0,0,0,2961,2959,1,0,0,0,2962,2947,1,0,0,0,2962,2953,1,0,0,0,2962,
        2959,1,0,0,0,2963,2964,1,0,0,0,2964,2965,5,293,0,0,2965,2966,5,187,
        0,0,2966,2972,5,301,0,0,2967,2971,3,228,114,0,2968,2971,3,180,90,
        0,2969,2971,3,48,24,0,2970,2967,1,0,0,0,2970,2968,1,0,0,0,2970,2969,
        1,0,0,0,2971,2974,1,0,0,0,2972,2970,1,0,0,0,2972,2973,1,0,0,0,2973,
        2975,1,0,0,0,2974,2972,1,0,0,0,2975,2976,5,2,0,0,2976,2977,5,187,
        0,0,2977,2978,5,301,0,0,2978,257,1,0,0,0,2979,2980,5,186,0,0,2980,
        2981,5,297,0,0,2981,2982,5,294,0,0,2982,3001,5,292,0,0,2983,2985,
        5,295,0,0,2984,2983,1,0,0,0,2985,2988,1,0,0,0,2986,2984,1,0,0,0,
        2986,2987,1,0,0,0,2987,3002,1,0,0,0,2988,2986,1,0,0,0,2989,2991,
        5,296,0,0,2990,2989,1,0,0,0,2991,2994,1,0,0,0,2992,2990,1,0,0,0,
        2992,2993,1,0,0,0,2993,3002,1,0,0,0,2994,2992,1,0,0,0,2995,2997,
        5,298,0,0,2996,2995,1,0,0,0,2997,3000,1,0,0,0,2998,2996,1,0,0,0,
        2998,2999,1,0,0,0,2999,3002,1,0,0,0,3000,2998,1,0,0,0,3001,2986,
        1,0,0,0,3001,2992,1,0,0,0,3001,2998,1,0,0,0,3002,3003,1,0,0,0,3003,
        3004,5,293,0,0,3004,3005,5,187,0,0,3005,3011,5,301,0,0,3006,3010,
        3,228,114,0,3007,3010,3,184,92,0,3008,3010,3,50,25,0,3009,3006,1,
        0,0,0,3009,3007,1,0,0,0,3009,3008,1,0,0,0,3010,3013,1,0,0,0,3011,
        3009,1,0,0,0,3011,3012,1,0,0,0,3012,3014,1,0,0,0,3013,3011,1,0,0,
        0,3014,3015,5,2,0,0,3015,3016,5,187,0,0,3016,3017,5,301,0,0,3017,
        259,1,0,0,0,3018,3019,5,186,0,0,3019,3020,5,297,0,0,3020,3021,5,
        294,0,0,3021,3040,5,292,0,0,3022,3024,5,295,0,0,3023,3022,1,0,0,
        0,3024,3027,1,0,0,0,3025,3023,1,0,0,0,3025,3026,1,0,0,0,3026,3041,
        1,0,0,0,3027,3025,1,0,0,0,3028,3030,5,296,0,0,3029,3028,1,0,0,0,
        3030,3033,1,0,0,0,3031,3029,1,0,0,0,3031,3032,1,0,0,0,3032,3041,
        1,0,0,0,3033,3031,1,0,0,0,3034,3036,5,298,0,0,3035,3034,1,0,0,0,
        3036,3039,1,0,0,0,3037,3035,1,0,0,0,3037,3038,1,0,0,0,3038,3041,
        1,0,0,0,3039,3037,1,0,0,0,3040,3025,1,0,0,0,3040,3031,1,0,0,0,3040,
        3037,1,0,0,0,3041,3042,1,0,0,0,3042,3043,5,293,0,0,3043,3044,5,187,
        0,0,3044,3050,5,301,0,0,3045,3049,3,228,114,0,3046,3049,3,86,43,
        0,3047,3049,3,10,5,0,3048,3045,1,0,0,0,3048,3046,1,0,0,0,3048,3047,
        1,0,0,0,3049,3052,1,0,0,0,3050,3048,1,0,0,0,3050,3051,1,0,0,0,3051,
        3053,1,0,0,0,3052,3050,1,0,0,0,3053,3054,5,2,0,0,3054,3055,5,187,
        0,0,3055,3056,5,301,0,0,3056,261,1,0,0,0,347,320,322,331,340,346,
        352,361,369,377,385,393,397,400,406,412,418,427,436,445,454,463,
        472,481,490,499,508,517,526,535,544,553,562,571,580,589,609,630,
        643,673,676,683,686,691,696,701,704,707,711,716,721,728,732,737,
        742,747,752,757,762,766,773,779,783,805,810,815,822,833,836,844,
        858,863,868,875,892,897,903,910,915,922,934,942,947,954,961,973,
        978,983,992,1001,1008,1014,1021,1026,1029,1034,1039,1044,1048,1054,
        1058,1062,1065,1067,1071,1087,1092,1100,1108,1125,1133,1137,1142,
        1147,1155,1158,1170,1177,1190,1195,1204,1213,1246,1250,1258,1263,
        1268,1272,1284,1308,1319,1330,1336,1342,1346,1357,1363,1369,1376,
        1386,1392,1398,1403,1412,1415,1418,1422,1434,1441,1448,1454,1459,
        1477,1482,1487,1496,1507,1517,1543,1551,1570,1583,1600,1605,1610,
        1617,1629,1632,1638,1654,1659,1664,1671,1686,1691,1696,1703,1729,
        1734,1739,1747,1755,1770,1777,1784,1789,1795,1802,1809,1820,1824,
        1831,1844,1849,1857,1874,1884,1887,1899,1904,1920,1931,1937,1942,
        1949,1966,1971,1980,1988,1995,2000,2007,2018,2023,2028,2033,2038,
        2043,2048,2053,2058,2063,2068,2073,2078,2081,2092,2101,2107,2111,
        2116,2121,2124,2135,2143,2158,2174,2177,2188,2193,2196,2204,2208,
        2219,2223,2227,2230,2243,2246,2253,2256,2263,2268,2271,2285,2293,
        2295,2308,2319,2323,2325,2331,2346,2351,2356,2365,2429,2446,2486,
        2502,2506,2518,2526,2541,2556,2586,2595,2601,2607,2610,2618,2620,
        2634,2640,2646,2649,2657,2659,2673,2679,2685,2688,2696,2698,2712,
        2718,2724,2727,2735,2737,2751,2757,2763,2766,2774,2776,2790,2796,
        2802,2805,2813,2815,2829,2835,2841,2844,2852,2854,2868,2874,2880,
        2883,2891,2893,2907,2913,2919,2922,2931,2933,2947,2953,2959,2962,
        2970,2972,2986,2992,2998,3001,3009,3011,3025,3031,3037,3040,3048,
        3050
    ]

class XplorMRParser ( Parser ):

    grammarFileName = "XplorMRParser.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ "<INVALID>", "'SET'", "<INVALID>", "'NOE'", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "'BHIG'", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "'CUTOFF'", "'CUTON'", "'FROM'", "'TO'", 
                     "'PEAK'", "'SPECTRUM'", "'VOLUME'", "'VOL'", "'PPM1'", 
                     "'PPM2'", "<INVALID>", "<INVALID>", "<INVALID>", "'?'", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "'TYPE'", "<INVALID>", "<INVALID>", "'CV'", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "'XADC'", "<INVALID>", 
                     "'SIZE'", "'ZERO'", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "'RAMA'", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "'SORT'", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "'DCSA'", "<INVALID>", "'PCSA'", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "'TAUC'", "<INVALID>", "'XPCS'", 
                     "'TOLL'", "'SAVE'", "'FMED'", "'ERRON'", "'ERROFF'", 
                     "'FON'", "'FOFF'", "'SON'", "'SOFF'", "'FRUN'", "<INVALID>", 
                     "<INVALID>", "'XCCR'", "'WEIP'", "'HBDA'", "'HBDB'", 
                     "'KDIR'", "'KLIN'", "'NSEG'", "'NMIN'", "'NMAX'", "'SEGM'", 
                     "'OHCUT'", "<INVALID>", "<INVALID>", "<INVALID>", "'UPDFRQ'", 
                     "'PRNFRQ'", "'FREEMODE'", "<INVALID>", "<INVALID>", 
                     "'NCS'", "<INVALID>", "'SIGB'", "<INVALID>", "'ALL'", 
                     "<INVALID>", "'ATOM'", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "'ID'", "<INVALID>", 
                     "'NAME'", "<INVALID>", "'CUT'", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "'STORE1'", "'STORE2'", "'STORE3'", "'STORE4'", "'STORE5'", 
                     "'STORE6'", "'STORE7'", "'STORE8'", "'STORE9'", "'TAG'", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "'SHOW'", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "'NIL'", "<INVALID>", "'UB'", 
                     "'MULT'", "<INVALID>", "<INVALID>", "<INVALID>", "'NONB'", 
                     "<INVALID>", "<INVALID>", "'FOR'", "'LOOP'", "'TAIL'", 
                     "'HEAD'", "'OR'", "'AND'", "'NOT'", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "':'", "<INVALID>", 
                     "'<'", "'>'", "'<='", "'>='", "'#'", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "'+'", "'-'", "<INVALID>", "'/'", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "'ACOS'", "'ASIN'", "'COS'", "'DECODE'", 
                     "'ENCODE'", "'EXP'", "'GAUSS'", "'HEAVY'", "'INT'", 
                     "'LOG10'", "'LOG'", "<INVALID>", "'MAXW'", "<INVALID>", 
                     "'MOD'", "<INVALID>", "<INVALID>", "<INVALID>", "'SIN'", 
                     "'SQRT'", "'TAN'", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "'RMS'", "'SUM'", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "'IN'" ]

    symbolicNames = [ "<INVALID>", "Set", "End", "Noe", "Assign", "Asymptote", 
                      "Average", "Bhig", "Ceiling", "Classification", "CountViol", 
                      "Distribute", "Monomers", "Ncount", "Nrestraints", 
                      "Potential", "Predict", "Print", "Threshold", "Reset", 
                      "Rswitch", "Scale", "SoExponent", "SqConstant", "SqExponent", 
                      "SqOffset", "Temperature", "Cutoff", "Cuton", "From", 
                      "To", "Peak", "Spectrum", "Volume", "Vol", "Ppm1", 
                      "Ppm2", "Restraints", "Dihedral", "Nassign", "Print_any", 
                      "Sanisotropy", "Coefficients", "ForceConstant", "Xdipolar", 
                      "Dipolar", "Type", "Sign", "VeAngle", "Cv", "Partition", 
                      "Tensor", "Anisotropy", "Planar", "Group", "Initialize", 
                      "Selection", "Weight", "Harmonic", "Exponent", "Normal", 
                      "Xadc", "Expectation", "Size", "Zero", "Coupling", 
                      "Degeneracy", "Carbon", "PhiStep", "PsiStep", "Rcoil", 
                      "Proton", "Observed", "Amides", "Nitrogens", "Oxygens", 
                      "RingAtoms", "AlphasAndAmides", "Error", "Ramachandran", 
                      "Gaussian", "Phase", "Quartic", "Shape", "Sort", "Dimensions", 
                      "Collapse", "Danisotropy", "Orient", "Height", "MaxGaussians", 
                      "NewGaussian", "Dcsa", "Sigma", "Pcsa", "OneBond", 
                      "AngleDb", "DerivFlag", "PMagnetic", "Kconst", "Omega", 
                      "Tauc", "Debug", "Xpcs", "Tolerance", "Save", "Fmed", 
                      "ErrOn", "ErrOff", "Fon", "Foff", "Son", "Soff", "Frun", 
                      "Xrdcoupling", "Xangle", "Xccr", "Weip", "Hbda", "Hbdb", 
                      "Kdir", "Klin", "Nseg", "Nmin", "Nmax", "Segm", "Ohcut", 
                      "Coh1cut", "Coh2cut", "Ohncut", "Updfrq", "Prnfrq", 
                      "Freemode", "Donor", "Acceptor", "Ncs", "Equivalence", 
                      "Sigb", "Flags", "All", "Around", "Atom", "Attribute", 
                      "BondedTo", "ByGroup", "ByRes", "Chemical", "Hydrogen", 
                      "Id", "Known", "Name", "Point", "Cut", "Previous", 
                      "Pseudo", "Residue", "Resname", "Saround", "SegIdentifier", 
                      "Store1", "Store2", "Store3", "Store4", "Store5", 
                      "Store6", "Store7", "Store8", "Store9", "Tag", "Vector", 
                      "Do_Lp", "Identity_Lp", "Show", "Evaluate_Lp", "Patch", 
                      "Reference", "Nil", "Parameter", "UB", "Mult", "HBonded", 
                      "Improper", "NBFix", "NonB", "VDWOff", "Verbose", 
                      "For", "Loop", "Tail", "Head", "Or_op", "And_op", 
                      "Not_op", "Comma", "Complex", "Integer", "Logical", 
                      "Real", "Double_quote_string", "COMMENT", "SMCLN_COMMENT", 
                      "Simple_name", "Simple_names", "Integers", "L_paren", 
                      "R_paren", "Colon", "Equ_op", "Lt_op", "Gt_op", "Leq_op", 
                      "Geq_op", "Neq_op", "Symbol_name", "SPACE", "ENCLOSE_COMMENT", 
                      "SECTION_COMMENT", "LINE_COMMENT", "SET_VARIABLE", 
                      "Abs", "Attr_properties", "Comparison_ops", "SPACE_AP", 
                      "Averaging_methods", "Class_name_AM", "SPACE_AM", 
                      "Equ_op_PT", "Potential_types", "Class_name_PT", "SPACE_PT", 
                      "Rdc_dist_fix_types", "Rdc_or_Diff_anis_types", "Csa_types", 
                      "SPACE_TY", "Gauss_or_Quart", "SPACE_SH", "Exclude", 
                      "Include", "End_FL", "Class_name", "Any_class", "SPACE_FL", 
                      "R_paren_VE", "Equ_op_VE", "Add_op_VE", "Sub_op_VE", 
                      "Mul_op_VE", "Div_op_VE", "Exp_op_VE", "Comma_VE", 
                      "Integer_VE", "Real_VE", "Atom_properties_VE", "Abs_VE", 
                      "Acos_VE", "Asin_VE", "Cos_VE", "Decode_VE", "Encode_VE", 
                      "Exp_VE", "Gauss_VE", "Heavy_VE", "Int_VE", "Log10_VE", 
                      "Log_VE", "Max_VE", "Maxw_VE", "Min_VE", "Mod_VE", 
                      "Norm_VE", "Random_VE", "Sign_VE", "Sin_VE", "Sqrt_VE", 
                      "Tan_VE", "Symbol_name_VE", "Simple_name_VE", "Double_quote_string_VE", 
                      "SPACE_VE", "L_paren_VF", "SPACE_VF", "L_paren_VS", 
                      "R_paren_VS", "Average_VS", "Element_VS", "Max_VS", 
                      "Min_VS", "Norm_VS", "Rms_VS", "Sum_VS", "Atom_properties_VS", 
                      "SPACE_VS", "L_paren_CF", "R_paren_CF", "In_CF", "Integer_CF", 
                      "Real_CF", "Symbol_name_CF", "Simple_name_CF", "SPACE_CF", 
                      "COMMENT_CF", "Simple_name_LL", "SPACE_LL", "Any_name", 
                      "SPACE_CM", "RETURN_CM" ]

    RULE_xplor_nih_mr = 0
    RULE_comment = 1
    RULE_distance_restraint = 2
    RULE_dihedral_angle_restraint = 3
    RULE_rdc_restraint = 4
    RULE_planar_restraint = 5
    RULE_harmonic_restraint = 6
    RULE_antidistance_restraint = 7
    RULE_coupling_restraint = 8
    RULE_carbon_shift_restraint = 9
    RULE_proton_shift_restraint = 10
    RULE_dihedral_angle_db_restraint = 11
    RULE_radius_of_gyration_restraint = 12
    RULE_diffusion_anisotropy_restraint = 13
    RULE_orientation_db_restraint = 14
    RULE_csa_restraint = 15
    RULE_pcsa_restraint = 16
    RULE_one_bond_coupling_restraint = 17
    RULE_angle_db_restraint = 18
    RULE_pre_restraint = 19
    RULE_pcs_restraint = 20
    RULE_prdc_restraint = 21
    RULE_porientation_restraint = 22
    RULE_pccr_restraint = 23
    RULE_hbond_restraint = 24
    RULE_hbond_db_restraint = 25
    RULE_noe_statement = 26
    RULE_noe_assign = 27
    RULE_predict_statement = 28
    RULE_noe_annotation = 29
    RULE_dihedral_statement = 30
    RULE_dihedral_assign = 31
    RULE_sani_statement = 32
    RULE_sani_assign = 33
    RULE_xdip_statement = 34
    RULE_xdip_assign = 35
    RULE_vean_statement = 36
    RULE_vean_assign = 37
    RULE_tenso_statement = 38
    RULE_tenso_assign = 39
    RULE_anis_statement = 40
    RULE_anis_assign = 41
    RULE_planar_statement = 42
    RULE_planar_group = 43
    RULE_group_statement = 44
    RULE_harmonic_statement = 45
    RULE_harmonic_assign = 46
    RULE_antidistance_statement = 47
    RULE_xadc_assign = 48
    RULE_coupling_statement = 49
    RULE_coup_assign = 50
    RULE_carbon_shift_statement = 51
    RULE_carbon_shift_assign = 52
    RULE_carbon_shift_rcoil = 53
    RULE_proton_shift_statement = 54
    RULE_observed = 55
    RULE_proton_shift_rcoil = 56
    RULE_proton_shift_anisotropy = 57
    RULE_proton_shift_amides = 58
    RULE_proton_shift_carbons = 59
    RULE_proton_shift_nitrogens = 60
    RULE_proton_shift_oxygens = 61
    RULE_proton_shift_ring_atoms = 62
    RULE_proton_shift_alphas_and_amides = 63
    RULE_ramachandran_statement = 64
    RULE_rama_assign = 65
    RULE_collapse_statement = 66
    RULE_coll_assign = 67
    RULE_diffusion_statement = 68
    RULE_dani_assign = 69
    RULE_orientation_statement = 70
    RULE_orie_assign = 71
    RULE_csa_statement = 72
    RULE_csa_assign = 73
    RULE_pcsa_statement = 74
    RULE_one_bond_coupling_statement = 75
    RULE_one_bond_assign = 76
    RULE_angle_db_statement = 77
    RULE_angle_db_assign = 78
    RULE_pre_statement = 79
    RULE_pre_assign = 80
    RULE_pcs_statement = 81
    RULE_pcs_assign = 82
    RULE_prdc_statement = 83
    RULE_prdc_assign = 84
    RULE_porientation_statement = 85
    RULE_porientation_assign = 86
    RULE_pccr_statement = 87
    RULE_pccr_assign = 88
    RULE_hbond_statement = 89
    RULE_hbond_assign = 90
    RULE_hbond_db_statement = 91
    RULE_hbond_db_assign = 92
    RULE_ncs_restraint = 93
    RULE_ncs_statement = 94
    RULE_ncs_group_statement = 95
    RULE_selection = 96
    RULE_selection_expression = 97
    RULE_term = 98
    RULE_factor = 99
    RULE_number = 100
    RULE_number_f = 101
    RULE_number_s = 102
    RULE_number_a = 103
    RULE_classification = 104
    RULE_class_name = 105
    RULE_flag_statement = 106
    RULE_vector_statement = 107
    RULE_vector_mode = 108
    RULE_vector_expression = 109
    RULE_vector_operation = 110
    RULE_vflc = 111
    RULE_vector_func_call = 112
    RULE_vector_show_property = 113
    RULE_evaluate_statement = 114
    RULE_evaluate_operation = 115
    RULE_patch_statement = 116
    RULE_parameter_setting = 117
    RULE_parameter_statement = 118
    RULE_noe_assign_loop = 119
    RULE_dihedral_assign_loop = 120
    RULE_sani_assign_loop = 121
    RULE_xadc_assign_loop = 122
    RULE_coup_assign_loop = 123
    RULE_coll_assign_loop = 124
    RULE_csa_assign_loop = 125
    RULE_pre_assign_loop = 126
    RULE_pcs_assign_loop = 127
    RULE_hbond_assign_loop = 128
    RULE_hbond_db_assign_loop = 129
    RULE_planar_group_loop = 130

    ruleNames =  [ "xplor_nih_mr", "comment", "distance_restraint", "dihedral_angle_restraint", 
                   "rdc_restraint", "planar_restraint", "harmonic_restraint", 
                   "antidistance_restraint", "coupling_restraint", "carbon_shift_restraint", 
                   "proton_shift_restraint", "dihedral_angle_db_restraint", 
                   "radius_of_gyration_restraint", "diffusion_anisotropy_restraint", 
                   "orientation_db_restraint", "csa_restraint", "pcsa_restraint", 
                   "one_bond_coupling_restraint", "angle_db_restraint", 
                   "pre_restraint", "pcs_restraint", "prdc_restraint", "porientation_restraint", 
                   "pccr_restraint", "hbond_restraint", "hbond_db_restraint", 
                   "noe_statement", "noe_assign", "predict_statement", "noe_annotation", 
                   "dihedral_statement", "dihedral_assign", "sani_statement", 
                   "sani_assign", "xdip_statement", "xdip_assign", "vean_statement", 
                   "vean_assign", "tenso_statement", "tenso_assign", "anis_statement", 
                   "anis_assign", "planar_statement", "planar_group", "group_statement", 
                   "harmonic_statement", "harmonic_assign", "antidistance_statement", 
                   "xadc_assign", "coupling_statement", "coup_assign", "carbon_shift_statement", 
                   "carbon_shift_assign", "carbon_shift_rcoil", "proton_shift_statement", 
                   "observed", "proton_shift_rcoil", "proton_shift_anisotropy", 
                   "proton_shift_amides", "proton_shift_carbons", "proton_shift_nitrogens", 
                   "proton_shift_oxygens", "proton_shift_ring_atoms", "proton_shift_alphas_and_amides", 
                   "ramachandran_statement", "rama_assign", "collapse_statement", 
                   "coll_assign", "diffusion_statement", "dani_assign", 
                   "orientation_statement", "orie_assign", "csa_statement", 
                   "csa_assign", "pcsa_statement", "one_bond_coupling_statement", 
                   "one_bond_assign", "angle_db_statement", "angle_db_assign", 
                   "pre_statement", "pre_assign", "pcs_statement", "pcs_assign", 
                   "prdc_statement", "prdc_assign", "porientation_statement", 
                   "porientation_assign", "pccr_statement", "pccr_assign", 
                   "hbond_statement", "hbond_assign", "hbond_db_statement", 
                   "hbond_db_assign", "ncs_restraint", "ncs_statement", 
                   "ncs_group_statement", "selection", "selection_expression", 
                   "term", "factor", "number", "number_f", "number_s", "number_a", 
                   "classification", "class_name", "flag_statement", "vector_statement", 
                   "vector_mode", "vector_expression", "vector_operation", 
                   "vflc", "vector_func_call", "vector_show_property", "evaluate_statement", 
                   "evaluate_operation", "patch_statement", "parameter_setting", 
                   "parameter_statement", "noe_assign_loop", "dihedral_assign_loop", 
                   "sani_assign_loop", "xadc_assign_loop", "coup_assign_loop", 
                   "coll_assign_loop", "csa_assign_loop", "pre_assign_loop", 
                   "pcs_assign_loop", "hbond_assign_loop", "hbond_db_assign_loop", 
                   "planar_group_loop" ]

    EOF = Token.EOF
    Set=1
    End=2
    Noe=3
    Assign=4
    Asymptote=5
    Average=6
    Bhig=7
    Ceiling=8
    Classification=9
    CountViol=10
    Distribute=11
    Monomers=12
    Ncount=13
    Nrestraints=14
    Potential=15
    Predict=16
    Print=17
    Threshold=18
    Reset=19
    Rswitch=20
    Scale=21
    SoExponent=22
    SqConstant=23
    SqExponent=24
    SqOffset=25
    Temperature=26
    Cutoff=27
    Cuton=28
    From=29
    To=30
    Peak=31
    Spectrum=32
    Volume=33
    Vol=34
    Ppm1=35
    Ppm2=36
    Restraints=37
    Dihedral=38
    Nassign=39
    Print_any=40
    Sanisotropy=41
    Coefficients=42
    ForceConstant=43
    Xdipolar=44
    Dipolar=45
    Type=46
    Sign=47
    VeAngle=48
    Cv=49
    Partition=50
    Tensor=51
    Anisotropy=52
    Planar=53
    Group=54
    Initialize=55
    Selection=56
    Weight=57
    Harmonic=58
    Exponent=59
    Normal=60
    Xadc=61
    Expectation=62
    Size=63
    Zero=64
    Coupling=65
    Degeneracy=66
    Carbon=67
    PhiStep=68
    PsiStep=69
    Rcoil=70
    Proton=71
    Observed=72
    Amides=73
    Nitrogens=74
    Oxygens=75
    RingAtoms=76
    AlphasAndAmides=77
    Error=78
    Ramachandran=79
    Gaussian=80
    Phase=81
    Quartic=82
    Shape=83
    Sort=84
    Dimensions=85
    Collapse=86
    Danisotropy=87
    Orient=88
    Height=89
    MaxGaussians=90
    NewGaussian=91
    Dcsa=92
    Sigma=93
    Pcsa=94
    OneBond=95
    AngleDb=96
    DerivFlag=97
    PMagnetic=98
    Kconst=99
    Omega=100
    Tauc=101
    Debug=102
    Xpcs=103
    Tolerance=104
    Save=105
    Fmed=106
    ErrOn=107
    ErrOff=108
    Fon=109
    Foff=110
    Son=111
    Soff=112
    Frun=113
    Xrdcoupling=114
    Xangle=115
    Xccr=116
    Weip=117
    Hbda=118
    Hbdb=119
    Kdir=120
    Klin=121
    Nseg=122
    Nmin=123
    Nmax=124
    Segm=125
    Ohcut=126
    Coh1cut=127
    Coh2cut=128
    Ohncut=129
    Updfrq=130
    Prnfrq=131
    Freemode=132
    Donor=133
    Acceptor=134
    Ncs=135
    Equivalence=136
    Sigb=137
    Flags=138
    All=139
    Around=140
    Atom=141
    Attribute=142
    BondedTo=143
    ByGroup=144
    ByRes=145
    Chemical=146
    Hydrogen=147
    Id=148
    Known=149
    Name=150
    Point=151
    Cut=152
    Previous=153
    Pseudo=154
    Residue=155
    Resname=156
    Saround=157
    SegIdentifier=158
    Store1=159
    Store2=160
    Store3=161
    Store4=162
    Store5=163
    Store6=164
    Store7=165
    Store8=166
    Store9=167
    Tag=168
    Vector=169
    Do_Lp=170
    Identity_Lp=171
    Show=172
    Evaluate_Lp=173
    Patch=174
    Reference=175
    Nil=176
    Parameter=177
    UB=178
    Mult=179
    HBonded=180
    Improper=181
    NBFix=182
    NonB=183
    VDWOff=184
    Verbose=185
    For=186
    Loop=187
    Tail=188
    Head=189
    Or_op=190
    And_op=191
    Not_op=192
    Comma=193
    Complex=194
    Integer=195
    Logical=196
    Real=197
    Double_quote_string=198
    COMMENT=199
    SMCLN_COMMENT=200
    Simple_name=201
    Simple_names=202
    Integers=203
    L_paren=204
    R_paren=205
    Colon=206
    Equ_op=207
    Lt_op=208
    Gt_op=209
    Leq_op=210
    Geq_op=211
    Neq_op=212
    Symbol_name=213
    SPACE=214
    ENCLOSE_COMMENT=215
    SECTION_COMMENT=216
    LINE_COMMENT=217
    SET_VARIABLE=218
    Abs=219
    Attr_properties=220
    Comparison_ops=221
    SPACE_AP=222
    Averaging_methods=223
    Class_name_AM=224
    SPACE_AM=225
    Equ_op_PT=226
    Potential_types=227
    Class_name_PT=228
    SPACE_PT=229
    Rdc_dist_fix_types=230
    Rdc_or_Diff_anis_types=231
    Csa_types=232
    SPACE_TY=233
    Gauss_or_Quart=234
    SPACE_SH=235
    Exclude=236
    Include=237
    End_FL=238
    Class_name=239
    Any_class=240
    SPACE_FL=241
    R_paren_VE=242
    Equ_op_VE=243
    Add_op_VE=244
    Sub_op_VE=245
    Mul_op_VE=246
    Div_op_VE=247
    Exp_op_VE=248
    Comma_VE=249
    Integer_VE=250
    Real_VE=251
    Atom_properties_VE=252
    Abs_VE=253
    Acos_VE=254
    Asin_VE=255
    Cos_VE=256
    Decode_VE=257
    Encode_VE=258
    Exp_VE=259
    Gauss_VE=260
    Heavy_VE=261
    Int_VE=262
    Log10_VE=263
    Log_VE=264
    Max_VE=265
    Maxw_VE=266
    Min_VE=267
    Mod_VE=268
    Norm_VE=269
    Random_VE=270
    Sign_VE=271
    Sin_VE=272
    Sqrt_VE=273
    Tan_VE=274
    Symbol_name_VE=275
    Simple_name_VE=276
    Double_quote_string_VE=277
    SPACE_VE=278
    L_paren_VF=279
    SPACE_VF=280
    L_paren_VS=281
    R_paren_VS=282
    Average_VS=283
    Element_VS=284
    Max_VS=285
    Min_VS=286
    Norm_VS=287
    Rms_VS=288
    Sum_VS=289
    Atom_properties_VS=290
    SPACE_VS=291
    L_paren_CF=292
    R_paren_CF=293
    In_CF=294
    Integer_CF=295
    Real_CF=296
    Symbol_name_CF=297
    Simple_name_CF=298
    SPACE_CF=299
    COMMENT_CF=300
    Simple_name_LL=301
    SPACE_LL=302
    Any_name=303
    SPACE_CM=304
    RETURN_CM=305

    def __init__(self, input:TokenStream, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.0")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None




    class Xplor_nih_mrContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EOF(self):
            return self.getToken(XplorMRParser.EOF, 0)

        def comment(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.CommentContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.CommentContext,i)


        def distance_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Distance_restraintContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Distance_restraintContext,i)


        def dihedral_angle_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Dihedral_angle_restraintContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Dihedral_angle_restraintContext,i)


        def rdc_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Rdc_restraintContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Rdc_restraintContext,i)


        def planar_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Planar_restraintContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Planar_restraintContext,i)


        def harmonic_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Harmonic_restraintContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Harmonic_restraintContext,i)


        def antidistance_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Antidistance_restraintContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Antidistance_restraintContext,i)


        def coupling_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Coupling_restraintContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Coupling_restraintContext,i)


        def carbon_shift_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Carbon_shift_restraintContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Carbon_shift_restraintContext,i)


        def proton_shift_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Proton_shift_restraintContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Proton_shift_restraintContext,i)


        def dihedral_angle_db_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Dihedral_angle_db_restraintContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Dihedral_angle_db_restraintContext,i)


        def radius_of_gyration_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Radius_of_gyration_restraintContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Radius_of_gyration_restraintContext,i)


        def diffusion_anisotropy_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Diffusion_anisotropy_restraintContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Diffusion_anisotropy_restraintContext,i)


        def orientation_db_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Orientation_db_restraintContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Orientation_db_restraintContext,i)


        def csa_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Csa_restraintContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Csa_restraintContext,i)


        def pcsa_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Pcsa_restraintContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Pcsa_restraintContext,i)


        def one_bond_coupling_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.One_bond_coupling_restraintContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.One_bond_coupling_restraintContext,i)


        def angle_db_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Angle_db_restraintContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Angle_db_restraintContext,i)


        def pre_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Pre_restraintContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Pre_restraintContext,i)


        def pcs_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Pcs_restraintContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Pcs_restraintContext,i)


        def prdc_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Prdc_restraintContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Prdc_restraintContext,i)


        def porientation_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Porientation_restraintContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Porientation_restraintContext,i)


        def pccr_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Pccr_restraintContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Pccr_restraintContext,i)


        def hbond_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Hbond_restraintContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Hbond_restraintContext,i)


        def hbond_db_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Hbond_db_restraintContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Hbond_db_restraintContext,i)


        def ncs_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Ncs_restraintContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Ncs_restraintContext,i)


        def classification(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.ClassificationContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.ClassificationContext,i)


        def flag_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Flag_statementContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Flag_statementContext,i)


        def vector_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Vector_statementContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Vector_statementContext,i)


        def evaluate_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Evaluate_statementContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Evaluate_statementContext,i)


        def patch_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Patch_statementContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Patch_statementContext,i)


        def parameter_setting(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Parameter_settingContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Parameter_settingContext,i)


        def noe_assign_loop(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Noe_assign_loopContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Noe_assign_loopContext,i)


        def dihedral_assign_loop(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Dihedral_assign_loopContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Dihedral_assign_loopContext,i)


        def sani_assign_loop(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Sani_assign_loopContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Sani_assign_loopContext,i)


        def hbond_assign_loop(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Hbond_assign_loopContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Hbond_assign_loopContext,i)


        def hbond_db_assign_loop(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Hbond_db_assign_loopContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Hbond_db_assign_loopContext,i)


        def coup_assign_loop(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Coup_assign_loopContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Coup_assign_loopContext,i)


        def xadc_assign_loop(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Xadc_assign_loopContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Xadc_assign_loopContext,i)


        def coll_assign_loop(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Coll_assign_loopContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Coll_assign_loopContext,i)


        def csa_assign_loop(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Csa_assign_loopContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Csa_assign_loopContext,i)


        def pre_assign_loop(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Pre_assign_loopContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Pre_assign_loopContext,i)


        def pcs_assign_loop(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Pcs_assign_loopContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Pcs_assign_loopContext,i)


        def noe_assign(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Noe_assignContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Noe_assignContext,i)


        def dihedral_assign(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Dihedral_assignContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Dihedral_assignContext,i)


        def sani_assign(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Sani_assignContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Sani_assignContext,i)


        def planar_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Planar_statementContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Planar_statementContext,i)


        def harmonic_assign(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Harmonic_assignContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Harmonic_assignContext,i)


        def hbond_assign(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Hbond_assignContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Hbond_assignContext,i)


        def hbond_db_assign(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Hbond_db_assignContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Hbond_db_assignContext,i)


        def coup_assign(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Coup_assignContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Coup_assignContext,i)


        def xadc_assign(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Xadc_assignContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Xadc_assignContext,i)


        def coll_assign(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Coll_assignContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Coll_assignContext,i)


        def csa_assign(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Csa_assignContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Csa_assignContext,i)


        def pre_assign(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Pre_assignContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Pre_assignContext,i)


        def pcs_assign(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Pcs_assignContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Pcs_assignContext,i)


        def observed(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.ObservedContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.ObservedContext,i)


        def parameter_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Parameter_statementContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Parameter_statementContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_xplor_nih_mr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterXplor_nih_mr" ):
                listener.enterXplor_nih_mr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitXplor_nih_mr" ):
                listener.exitXplor_nih_mr(self)




    def xplor_nih_mr(self):

        localctx = XplorMRParser.Xplor_nih_mrContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_xplor_nih_mr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 322
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & 2664217141976760856) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & 30962534813024453) != 0) or ((((_la - 135)) & ~0x3f) == 0 and ((1 << (_la - 135)) & 4473655115383049) != 0) or _la==199:
                self.state = 320
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,0,self._ctx)
                if la_ == 1:
                    self.state = 262
                    self.comment()
                    pass

                elif la_ == 2:
                    self.state = 263
                    self.distance_restraint()
                    pass

                elif la_ == 3:
                    self.state = 264
                    self.dihedral_angle_restraint()
                    pass

                elif la_ == 4:
                    self.state = 265
                    self.rdc_restraint()
                    pass

                elif la_ == 5:
                    self.state = 266
                    self.planar_restraint()
                    pass

                elif la_ == 6:
                    self.state = 267
                    self.harmonic_restraint()
                    pass

                elif la_ == 7:
                    self.state = 268
                    self.antidistance_restraint()
                    pass

                elif la_ == 8:
                    self.state = 269
                    self.coupling_restraint()
                    pass

                elif la_ == 9:
                    self.state = 270
                    self.carbon_shift_restraint()
                    pass

                elif la_ == 10:
                    self.state = 271
                    self.proton_shift_restraint()
                    pass

                elif la_ == 11:
                    self.state = 272
                    self.dihedral_angle_db_restraint()
                    pass

                elif la_ == 12:
                    self.state = 273
                    self.radius_of_gyration_restraint()
                    pass

                elif la_ == 13:
                    self.state = 274
                    self.diffusion_anisotropy_restraint()
                    pass

                elif la_ == 14:
                    self.state = 275
                    self.orientation_db_restraint()
                    pass

                elif la_ == 15:
                    self.state = 276
                    self.csa_restraint()
                    pass

                elif la_ == 16:
                    self.state = 277
                    self.pcsa_restraint()
                    pass

                elif la_ == 17:
                    self.state = 278
                    self.one_bond_coupling_restraint()
                    pass

                elif la_ == 18:
                    self.state = 279
                    self.angle_db_restraint()
                    pass

                elif la_ == 19:
                    self.state = 280
                    self.pre_restraint()
                    pass

                elif la_ == 20:
                    self.state = 281
                    self.pcs_restraint()
                    pass

                elif la_ == 21:
                    self.state = 282
                    self.prdc_restraint()
                    pass

                elif la_ == 22:
                    self.state = 283
                    self.porientation_restraint()
                    pass

                elif la_ == 23:
                    self.state = 284
                    self.pccr_restraint()
                    pass

                elif la_ == 24:
                    self.state = 285
                    self.hbond_restraint()
                    pass

                elif la_ == 25:
                    self.state = 286
                    self.hbond_db_restraint()
                    pass

                elif la_ == 26:
                    self.state = 287
                    self.ncs_restraint()
                    pass

                elif la_ == 27:
                    self.state = 288
                    self.classification()
                    pass

                elif la_ == 28:
                    self.state = 289
                    self.flag_statement()
                    pass

                elif la_ == 29:
                    self.state = 290
                    self.vector_statement()
                    pass

                elif la_ == 30:
                    self.state = 291
                    self.evaluate_statement()
                    pass

                elif la_ == 31:
                    self.state = 292
                    self.patch_statement()
                    pass

                elif la_ == 32:
                    self.state = 293
                    self.parameter_setting()
                    pass

                elif la_ == 33:
                    self.state = 294
                    self.noe_assign_loop()
                    pass

                elif la_ == 34:
                    self.state = 295
                    self.dihedral_assign_loop()
                    pass

                elif la_ == 35:
                    self.state = 296
                    self.sani_assign_loop()
                    pass

                elif la_ == 36:
                    self.state = 297
                    self.hbond_assign_loop()
                    pass

                elif la_ == 37:
                    self.state = 298
                    self.hbond_db_assign_loop()
                    pass

                elif la_ == 38:
                    self.state = 299
                    self.coup_assign_loop()
                    pass

                elif la_ == 39:
                    self.state = 300
                    self.xadc_assign_loop()
                    pass

                elif la_ == 40:
                    self.state = 301
                    self.coll_assign_loop()
                    pass

                elif la_ == 41:
                    self.state = 302
                    self.csa_assign_loop()
                    pass

                elif la_ == 42:
                    self.state = 303
                    self.pre_assign_loop()
                    pass

                elif la_ == 43:
                    self.state = 304
                    self.pcs_assign_loop()
                    pass

                elif la_ == 44:
                    self.state = 305
                    self.noe_assign()
                    pass

                elif la_ == 45:
                    self.state = 306
                    self.dihedral_assign()
                    pass

                elif la_ == 46:
                    self.state = 307
                    self.sani_assign()
                    pass

                elif la_ == 47:
                    self.state = 308
                    self.planar_statement()
                    pass

                elif la_ == 48:
                    self.state = 309
                    self.harmonic_assign()
                    pass

                elif la_ == 49:
                    self.state = 310
                    self.hbond_assign()
                    pass

                elif la_ == 50:
                    self.state = 311
                    self.hbond_db_assign()
                    pass

                elif la_ == 51:
                    self.state = 312
                    self.coup_assign()
                    pass

                elif la_ == 52:
                    self.state = 313
                    self.xadc_assign()
                    pass

                elif la_ == 53:
                    self.state = 314
                    self.coll_assign()
                    pass

                elif la_ == 54:
                    self.state = 315
                    self.csa_assign()
                    pass

                elif la_ == 55:
                    self.state = 316
                    self.pre_assign()
                    pass

                elif la_ == 56:
                    self.state = 317
                    self.pcs_assign()
                    pass

                elif la_ == 57:
                    self.state = 318
                    self.observed()
                    pass

                elif la_ == 58:
                    self.state = 319
                    self.parameter_statement()
                    pass


                self.state = 324
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 325
            self.match(XplorMRParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CommentContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COMMENT(self):
            return self.getToken(XplorMRParser.COMMENT, 0)

        def RETURN_CM(self):
            return self.getToken(XplorMRParser.RETURN_CM, 0)

        def EOF(self):
            return self.getToken(XplorMRParser.EOF, 0)

        def Any_name(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Any_name)
            else:
                return self.getToken(XplorMRParser.Any_name, i)

        def getRuleIndex(self):
            return XplorMRParser.RULE_comment

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterComment" ):
                listener.enterComment(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitComment" ):
                listener.exitComment(self)




    def comment(self):

        localctx = XplorMRParser.CommentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_comment)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 327
            self.match(XplorMRParser.COMMENT)
            self.state = 331
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==303:
                self.state = 328
                self.match(XplorMRParser.Any_name)
                self.state = 333
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 334
            _la = self._input.LA(1)
            if not(_la==-1 or _la==305):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Distance_restraintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Noe(self):
            return self.getToken(XplorMRParser.Noe, 0)

        def End(self):
            return self.getToken(XplorMRParser.End, 0)

        def noe_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Noe_statementContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Noe_statementContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_distance_restraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDistance_restraint" ):
                listener.enterDistance_restraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDistance_restraint" ):
                listener.exitDistance_restraint(self)




    def distance_restraint(self):

        localctx = XplorMRParser.Distance_restraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_distance_restraint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 336
            self.match(XplorMRParser.Noe)
            self.state = 340
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & 133955568) != 0) or _la==186:
                self.state = 337
                self.noe_statement()
                self.state = 342
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 343
            self.match(XplorMRParser.End)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Dihedral_angle_restraintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Dihedral(self):
            return self.getToken(XplorMRParser.Dihedral, 0)

        def End(self):
            return self.getToken(XplorMRParser.End, 0)

        def Restraints(self):
            return self.getToken(XplorMRParser.Restraints, 0)

        def dihedral_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Dihedral_statementContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Dihedral_statementContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_dihedral_angle_restraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDihedral_angle_restraint" ):
                listener.enterDihedral_angle_restraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDihedral_angle_restraint" ):
                listener.exitDihedral_angle_restraint(self)




    def dihedral_angle_restraint(self):

        localctx = XplorMRParser.Dihedral_angle_restraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_dihedral_angle_restraint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 346
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==37:
                self.state = 345
                self.match(XplorMRParser.Restraints)


            self.state = 348
            self.match(XplorMRParser.Dihedral)
            self.state = 352
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & 1649270063120) != 0) or _la==169 or _la==186:
                self.state = 349
                self.dihedral_statement()
                self.state = 354
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 355
            self.match(XplorMRParser.End)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Rdc_restraintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Sanisotropy(self):
            return self.getToken(XplorMRParser.Sanisotropy, 0)

        def End(self):
            return self.getToken(XplorMRParser.End, 0)

        def sani_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Sani_statementContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Sani_statementContext,i)


        def Xdipolar(self):
            return self.getToken(XplorMRParser.Xdipolar, 0)

        def Dipolar(self):
            return self.getToken(XplorMRParser.Dipolar, 0)

        def xdip_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Xdip_statementContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Xdip_statementContext,i)


        def VeAngle(self):
            return self.getToken(XplorMRParser.VeAngle, 0)

        def vean_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Vean_statementContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Vean_statementContext,i)


        def Tensor(self):
            return self.getToken(XplorMRParser.Tensor, 0)

        def tenso_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Tenso_statementContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Tenso_statementContext,i)


        def Anisotropy(self):
            return self.getToken(XplorMRParser.Anisotropy, 0)

        def anis_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Anis_statementContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Anis_statementContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_rdc_restraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRdc_restraint" ):
                listener.enterRdc_restraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRdc_restraint" ):
                listener.exitRdc_restraint(self)




    def rdc_restraint(self):

        localctx = XplorMRParser.Rdc_restraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_rdc_restraint)
        self._la = 0 # Token type
        try:
            self.state = 397
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [41]:
                self.enterOuterAlt(localctx, 1)
                self.state = 357
                self.match(XplorMRParser.Sanisotropy)
                self.state = 361
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while (((_la) & ~0x3f) == 0 and ((1 << _la) & 13194140238352) != 0) or _la==186:
                    self.state = 358
                    self.sani_statement()
                    self.state = 363
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 364
                self.match(XplorMRParser.End)
                pass
            elif token in [44, 45]:
                self.enterOuterAlt(localctx, 2)
                self.state = 365
                _la = self._input.LA(1)
                if not(_la==44 or _la==45):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 369
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while (((_la) & ~0x3f) == 0 and ((1 << _la) & 224300374868560) != 0):
                    self.state = 366
                    self.xdip_statement()
                    self.state = 371
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 372
                self.match(XplorMRParser.End)
                pass
            elif token in [48]:
                self.enterOuterAlt(localctx, 3)
                self.state = 373
                self.match(XplorMRParser.VeAngle)
                self.state = 377
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while (((_la) & ~0x3f) == 0 and ((1 << _la) & 1697645953958416) != 0):
                    self.state = 374
                    self.vean_statement()
                    self.state = 379
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 380
                self.match(XplorMRParser.End)
                pass
            elif token in [51]:
                self.enterOuterAlt(localctx, 4)
                self.state = 381
                self.match(XplorMRParser.Tensor)
                self.state = 385
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while (((_la) & ~0x3f) == 0 and ((1 << _la) & 4398047216144) != 0):
                    self.state = 382
                    self.tenso_statement()
                    self.state = 387
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 388
                self.match(XplorMRParser.End)
                pass
            elif token in [52]:
                self.enterOuterAlt(localctx, 5)
                self.state = 389
                self.match(XplorMRParser.Anisotropy)
                self.state = 393
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while (((_la) & ~0x3f) == 0 and ((1 << _la) & 83562884416016) != 0):
                    self.state = 390
                    self.anis_statement()
                    self.state = 395
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 396
                self.match(XplorMRParser.End)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Planar_restraintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Planar(self):
            return self.getToken(XplorMRParser.Planar, 0)

        def End(self):
            return self.getToken(XplorMRParser.End, 0)

        def Restraints(self):
            return self.getToken(XplorMRParser.Restraints, 0)

        def planar_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Planar_statementContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Planar_statementContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_planar_restraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPlanar_restraint" ):
                listener.enterPlanar_restraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPlanar_restraint" ):
                listener.exitPlanar_restraint(self)




    def planar_restraint(self):

        localctx = XplorMRParser.Planar_restraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_planar_restraint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 400
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==37:
                self.state = 399
                self.match(XplorMRParser.Restraints)


            self.state = 402
            self.match(XplorMRParser.Planar)
            self.state = 406
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & 54044295040073728) != 0) or _la==169 or _la==186:
                self.state = 403
                self.planar_statement()
                self.state = 408
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 409
            self.match(XplorMRParser.End)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Harmonic_restraintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Harmonic(self):
            return self.getToken(XplorMRParser.Harmonic, 0)

        def End(self):
            return self.getToken(XplorMRParser.End, 0)

        def Restraints(self):
            return self.getToken(XplorMRParser.Restraints, 0)

        def harmonic_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Harmonic_statementContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Harmonic_statementContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_harmonic_restraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHarmonic_restraint" ):
                listener.enterHarmonic_restraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHarmonic_restraint" ):
                listener.exitHarmonic_restraint(self)




    def harmonic_restraint(self):

        localctx = XplorMRParser.Harmonic_restraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_harmonic_restraint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 412
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==37:
                self.state = 411
                self.match(XplorMRParser.Restraints)


            self.state = 414
            self.match(XplorMRParser.Harmonic)
            self.state = 418
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==59 or _la==60 or _la==169:
                self.state = 415
                self.harmonic_statement()
                self.state = 420
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 421
            self.match(XplorMRParser.End)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Antidistance_restraintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Xadc(self):
            return self.getToken(XplorMRParser.Xadc, 0)

        def End(self):
            return self.getToken(XplorMRParser.End, 0)

        def antidistance_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Antidistance_statementContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Antidistance_statementContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_antidistance_restraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAntidistance_restraint" ):
                listener.enterAntidistance_restraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAntidistance_restraint" ):
                listener.exitAntidistance_restraint(self)




    def antidistance_restraint(self):

        localctx = XplorMRParser.Antidistance_restraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_antidistance_restraint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 423
            self.match(XplorMRParser.Xadc)
            self.state = 427
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((((_la - 4)) & ~0x3f) == 0 and ((1 << (_la - 4)) & 2017613182817838113) != 0) or _la==186:
                self.state = 424
                self.antidistance_statement()
                self.state = 429
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 430
            self.match(XplorMRParser.End)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Coupling_restraintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Coupling(self):
            return self.getToken(XplorMRParser.Coupling, 0)

        def End(self):
            return self.getToken(XplorMRParser.End, 0)

        def coupling_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Coupling_statementContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Coupling_statementContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_coupling_restraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCoupling_restraint" ):
                listener.enterCoupling_restraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCoupling_restraint" ):
                listener.exitCoupling_restraint(self)




    def coupling_restraint(self):

        localctx = XplorMRParser.Coupling_restraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_coupling_restraint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 432
            self.match(XplorMRParser.Coupling)
            self.state = 436
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((((_la - 4)) & ~0x3f) == 0 and ((1 << (_la - 4)) & 4611792396177419297) != 0) or _la==186:
                self.state = 433
                self.coupling_statement()
                self.state = 438
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 439
            self.match(XplorMRParser.End)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Carbon_shift_restraintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Carbon(self):
            return self.getToken(XplorMRParser.Carbon, 0)

        def End(self):
            return self.getToken(XplorMRParser.End, 0)

        def carbon_shift_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Carbon_shift_statementContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Carbon_shift_statementContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_carbon_shift_restraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCarbon_shift_restraint" ):
                listener.enterCarbon_shift_restraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCarbon_shift_restraint" ):
                listener.exitCarbon_shift_restraint(self)




    def carbon_shift_restraint(self):

        localctx = XplorMRParser.Carbon_shift_restraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_carbon_shift_restraint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 441
            self.match(XplorMRParser.Carbon)
            self.state = 445
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & 4611694814521115152) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 113) != 0):
                self.state = 442
                self.carbon_shift_statement()
                self.state = 447
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 448
            self.match(XplorMRParser.End)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Proton_shift_restraintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Proton(self):
            return self.getToken(XplorMRParser.Proton, 0)

        def End(self):
            return self.getToken(XplorMRParser.End, 0)

        def proton_shift_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Proton_shift_statementContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Proton_shift_statementContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_proton_shift_restraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProton_shift_restraint" ):
                listener.enterProton_shift_restraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProton_shift_restraint" ):
                listener.exitProton_shift_restraint(self)




    def proton_shift_restraint(self):

        localctx = XplorMRParser.Proton_shift_restraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_proton_shift_restraint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 450
            self.match(XplorMRParser.Proton)
            self.state = 454
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & 4512395721081344) != 0) or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & 8147) != 0):
                self.state = 451
                self.proton_shift_statement()
                self.state = 456
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 457
            self.match(XplorMRParser.End)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Dihedral_angle_db_restraintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Ramachandran(self):
            return self.getToken(XplorMRParser.Ramachandran, 0)

        def End(self):
            return self.getToken(XplorMRParser.End, 0)

        def ramachandran_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Ramachandran_statementContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Ramachandran_statementContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_dihedral_angle_db_restraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDihedral_angle_db_restraint" ):
                listener.enterDihedral_angle_db_restraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDihedral_angle_db_restraint" ):
                listener.exitDihedral_angle_db_restraint(self)




    def dihedral_angle_db_restraint(self):

        localctx = XplorMRParser.Dihedral_angle_db_restraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_dihedral_angle_db_restraint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 459
            self.match(XplorMRParser.Ramachandran)
            self.state = 463
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & -9223363240624766448) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 2031617) != 0):
                self.state = 460
                self.ramachandran_statement()
                self.state = 465
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 466
            self.match(XplorMRParser.End)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Radius_of_gyration_restraintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Collapse(self):
            return self.getToken(XplorMRParser.Collapse, 0)

        def End(self):
            return self.getToken(XplorMRParser.End, 0)

        def collapse_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Collapse_statementContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Collapse_statementContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_radius_of_gyration_restraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRadius_of_gyration_restraint" ):
                listener.enterRadius_of_gyration_restraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRadius_of_gyration_restraint" ):
                listener.exitRadius_of_gyration_restraint(self)




    def radius_of_gyration_restraint(self):

        localctx = XplorMRParser.Radius_of_gyration_restraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_radius_of_gyration_restraint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 468
            self.match(XplorMRParser.Collapse)
            self.state = 472
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & 2752528) != 0) or _la==186:
                self.state = 469
                self.collapse_statement()
                self.state = 474
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 475
            self.match(XplorMRParser.End)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Diffusion_anisotropy_restraintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Danisotropy(self):
            return self.getToken(XplorMRParser.Danisotropy, 0)

        def End(self):
            return self.getToken(XplorMRParser.End, 0)

        def diffusion_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Diffusion_statementContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Diffusion_statementContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_diffusion_anisotropy_restraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDiffusion_anisotropy_restraint" ):
                listener.enterDiffusion_anisotropy_restraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDiffusion_anisotropy_restraint" ):
                listener.exitDiffusion_anisotropy_restraint(self)




    def diffusion_anisotropy_restraint(self):

        localctx = XplorMRParser.Diffusion_anisotropy_restraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_diffusion_anisotropy_restraint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 477
            self.match(XplorMRParser.Danisotropy)
            self.state = 481
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & 83562884416016) != 0):
                self.state = 478
                self.diffusion_statement()
                self.state = 483
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 484
            self.match(XplorMRParser.End)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Orientation_db_restraintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Orient(self):
            return self.getToken(XplorMRParser.Orient, 0)

        def End(self):
            return self.getToken(XplorMRParser.End, 0)

        def orientation_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Orientation_statementContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Orientation_statementContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_orientation_db_restraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOrientation_db_restraint" ):
                listener.enterOrientation_db_restraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOrientation_db_restraint" ):
                listener.exitOrientation_db_restraint(self)




    def orientation_db_restraint(self):

        localctx = XplorMRParser.Orientation_db_restraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_orientation_db_restraint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 486
            self.match(XplorMRParser.Orient)
            self.state = 490
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & -9223363240626863600) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 235208705) != 0) or _la==155:
                self.state = 487
                self.orientation_statement()
                self.state = 492
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 493
            self.match(XplorMRParser.End)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Csa_restraintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Dcsa(self):
            return self.getToken(XplorMRParser.Dcsa, 0)

        def End(self):
            return self.getToken(XplorMRParser.End, 0)

        def csa_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Csa_statementContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Csa_statementContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_csa_restraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCsa_restraint" ):
                listener.enterCsa_restraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCsa_restraint" ):
                listener.exitCsa_restraint(self)




    def csa_restraint(self):

        localctx = XplorMRParser.Csa_restraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_csa_restraint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 495
            self.match(XplorMRParser.Dcsa)
            self.state = 499
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & 83562886513168) != 0) or _la==93 or _la==186:
                self.state = 496
                self.csa_statement()
                self.state = 501
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 502
            self.match(XplorMRParser.End)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pcsa_restraintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Pcsa(self):
            return self.getToken(XplorMRParser.Pcsa, 0)

        def End(self):
            return self.getToken(XplorMRParser.End, 0)

        def pcsa_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Pcsa_statementContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Pcsa_statementContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_pcsa_restraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPcsa_restraint" ):
                listener.enterPcsa_restraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPcsa_restraint" ):
                listener.exitPcsa_restraint(self)




    def pcsa_restraint(self):

        localctx = XplorMRParser.Pcsa_restraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_pcsa_restraint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 504
            self.match(XplorMRParser.Pcsa)
            self.state = 508
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & 13194142335504) != 0) or _la==93:
                self.state = 505
                self.pcsa_statement()
                self.state = 510
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 511
            self.match(XplorMRParser.End)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class One_bond_coupling_restraintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OneBond(self):
            return self.getToken(XplorMRParser.OneBond, 0)

        def End(self):
            return self.getToken(XplorMRParser.End, 0)

        def one_bond_coupling_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.One_bond_coupling_statementContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.One_bond_coupling_statementContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_one_bond_coupling_restraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOne_bond_coupling_restraint" ):
                listener.enterOne_bond_coupling_restraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOne_bond_coupling_restraint" ):
                listener.exitOne_bond_coupling_restraint(self)




    def one_bond_coupling_restraint(self):

        localctx = XplorMRParser.One_bond_coupling_restraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_one_bond_coupling_restraint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 513
            self.match(XplorMRParser.OneBond)
            self.state = 517
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & 13194140238352) != 0):
                self.state = 514
                self.one_bond_coupling_statement()
                self.state = 519
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 520
            self.match(XplorMRParser.End)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Angle_db_restraintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AngleDb(self):
            return self.getToken(XplorMRParser.AngleDb, 0)

        def End(self):
            return self.getToken(XplorMRParser.End, 0)

        def angle_db_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Angle_db_statementContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Angle_db_statementContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_angle_db_restraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAngle_db_restraint" ):
                listener.enterAngle_db_restraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAngle_db_restraint" ):
                listener.exitAngle_db_restraint(self)




    def angle_db_restraint(self):

        localctx = XplorMRParser.Angle_db_restraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_angle_db_restraint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 522
            self.match(XplorMRParser.AngleDb)
            self.state = 526
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & -4611677222333660656) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 8589950977) != 0):
                self.state = 523
                self.angle_db_statement()
                self.state = 528
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 529
            self.match(XplorMRParser.End)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pre_restraintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PMagnetic(self):
            return self.getToken(XplorMRParser.PMagnetic, 0)

        def End(self):
            return self.getToken(XplorMRParser.End, 0)

        def pre_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Pre_statementContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Pre_statementContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_pre_restraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPre_restraint" ):
                listener.enterPre_restraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPre_restraint" ):
                listener.exitPre_restraint(self)




    def pre_restraint(self):

        localctx = XplorMRParser.Pre_restraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_pre_restraint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 531
            self.match(XplorMRParser.PMagnetic)
            self.state = 535
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & 8796093727248) != 0) or ((((_la - 99)) & ~0x3f) == 0 and ((1 << (_la - 99)) & 15) != 0) or _la==186:
                self.state = 532
                self.pre_statement()
                self.state = 537
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 538
            self.match(XplorMRParser.End)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pcs_restraintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Xpcs(self):
            return self.getToken(XplorMRParser.Xpcs, 0)

        def End(self):
            return self.getToken(XplorMRParser.End, 0)

        def pcs_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Pcs_statementContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Pcs_statementContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_pcs_restraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPcs_restraint" ):
                listener.enterPcs_restraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPcs_restraint" ):
                listener.exitPcs_restraint(self)




    def pcs_restraint(self):

        localctx = XplorMRParser.Pcs_restraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_pcs_restraint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 540
            self.match(XplorMRParser.Xpcs)
            self.state = 544
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & 13194140205584) != 0) or ((((_la - 104)) & ~0x3f) == 0 and ((1 << (_la - 104)) & 1023) != 0) or _la==186:
                self.state = 541
                self.pcs_statement()
                self.state = 546
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 547
            self.match(XplorMRParser.End)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Prdc_restraintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Xrdcoupling(self):
            return self.getToken(XplorMRParser.Xrdcoupling, 0)

        def End(self):
            return self.getToken(XplorMRParser.End, 0)

        def prdc_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Prdc_statementContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Prdc_statementContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_prdc_restraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrdc_restraint" ):
                listener.enterPrdc_restraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrdc_restraint" ):
                listener.exitPrdc_restraint(self)




    def prdc_restraint(self):

        localctx = XplorMRParser.Prdc_restraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_prdc_restraint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 549
            self.match(XplorMRParser.Xrdcoupling)
            self.state = 553
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & 13194140205584) != 0) or ((((_la - 104)) & ~0x3f) == 0 and ((1 << (_la - 104)) & 1023) != 0):
                self.state = 550
                self.prdc_statement()
                self.state = 555
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 556
            self.match(XplorMRParser.End)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Porientation_restraintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Xangle(self):
            return self.getToken(XplorMRParser.Xangle, 0)

        def End(self):
            return self.getToken(XplorMRParser.End, 0)

        def porientation_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Porientation_statementContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Porientation_statementContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_porientation_restraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPorientation_restraint" ):
                listener.enterPorientation_restraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPorientation_restraint" ):
                listener.exitPorientation_restraint(self)




    def porientation_restraint(self):

        localctx = XplorMRParser.Porientation_restraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_porientation_restraint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 558
            self.match(XplorMRParser.Xangle)
            self.state = 562
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & 8796093694480) != 0):
                self.state = 559
                self.porientation_statement()
                self.state = 564
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 565
            self.match(XplorMRParser.End)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pccr_restraintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Xccr(self):
            return self.getToken(XplorMRParser.Xccr, 0)

        def End(self):
            return self.getToken(XplorMRParser.End, 0)

        def pccr_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Pccr_statementContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Pccr_statementContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_pccr_restraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPccr_restraint" ):
                listener.enterPccr_restraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPccr_restraint" ):
                listener.exitPccr_restraint(self)




    def pccr_restraint(self):

        localctx = XplorMRParser.Pccr_restraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_pccr_restraint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 567
            self.match(XplorMRParser.Xccr)
            self.state = 571
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & 13194140205584) != 0) or _la==113 or _la==117:
                self.state = 568
                self.pccr_statement()
                self.state = 573
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 574
            self.match(XplorMRParser.End)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Hbond_restraintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Hbda(self):
            return self.getToken(XplorMRParser.Hbda, 0)

        def End(self):
            return self.getToken(XplorMRParser.End, 0)

        def hbond_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Hbond_statementContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Hbond_statementContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_hbond_restraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHbond_restraint" ):
                listener.enterHbond_restraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHbond_restraint" ):
                listener.exitHbond_restraint(self)




    def hbond_restraint(self):

        localctx = XplorMRParser.Hbond_restraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_hbond_restraint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 576
            self.match(XplorMRParser.Hbda)
            self.state = 580
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & 8796093694480) != 0) or _la==186:
                self.state = 577
                self.hbond_statement()
                self.state = 582
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 583
            self.match(XplorMRParser.End)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Hbond_db_restraintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Hbdb(self):
            return self.getToken(XplorMRParser.Hbdb, 0)

        def End(self):
            return self.getToken(XplorMRParser.End, 0)

        def hbond_db_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Hbond_db_statementContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Hbond_db_statementContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_hbond_db_restraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHbond_db_restraint" ):
                listener.enterHbond_db_restraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHbond_db_restraint" ):
                listener.exitHbond_db_restraint(self)




    def hbond_db_restraint(self):

        localctx = XplorMRParser.Hbond_db_restraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_hbond_db_restraint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 585
            self.match(XplorMRParser.Hbdb)
            self.state = 589
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==4 or ((((_la - 120)) & ~0x3f) == 0 and ((1 << (_la - 120)) & 8191) != 0) or _la==186:
                self.state = 586
                self.hbond_db_statement()
                self.state = 591
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 592
            self.match(XplorMRParser.End)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Noe_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def noe_assign(self):
            return self.getTypedRuleContext(XplorMRParser.Noe_assignContext,0)


        def noe_assign_loop(self):
            return self.getTypedRuleContext(XplorMRParser.Noe_assign_loopContext,0)


        def Asymptote(self):
            return self.getToken(XplorMRParser.Asymptote, 0)

        def class_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Class_nameContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Class_nameContext,i)


        def number_s(self):
            return self.getTypedRuleContext(XplorMRParser.Number_sContext,0)


        def Average(self):
            return self.getToken(XplorMRParser.Average, 0)

        def Class_name_AM(self):
            return self.getToken(XplorMRParser.Class_name_AM, 0)

        def Averaging_methods(self):
            return self.getToken(XplorMRParser.Averaging_methods, 0)

        def Bhig(self):
            return self.getToken(XplorMRParser.Bhig, 0)

        def Ceiling(self):
            return self.getToken(XplorMRParser.Ceiling, 0)

        def Equ_op(self):
            return self.getToken(XplorMRParser.Equ_op, 0)

        def classification(self):
            return self.getTypedRuleContext(XplorMRParser.ClassificationContext,0)


        def CountViol(self):
            return self.getToken(XplorMRParser.CountViol, 0)

        def Distribute(self):
            return self.getToken(XplorMRParser.Distribute, 0)

        def Monomers(self):
            return self.getToken(XplorMRParser.Monomers, 0)

        def Integer(self):
            return self.getToken(XplorMRParser.Integer, 0)

        def Ncount(self):
            return self.getToken(XplorMRParser.Ncount, 0)

        def Nrestraints(self):
            return self.getToken(XplorMRParser.Nrestraints, 0)

        def Potential(self):
            return self.getToken(XplorMRParser.Potential, 0)

        def Class_name_PT(self):
            return self.getToken(XplorMRParser.Class_name_PT, 0)

        def Potential_types(self):
            return self.getToken(XplorMRParser.Potential_types, 0)

        def Predict(self):
            return self.getToken(XplorMRParser.Predict, 0)

        def predict_statement(self):
            return self.getTypedRuleContext(XplorMRParser.Predict_statementContext,0)


        def End(self):
            return self.getToken(XplorMRParser.End, 0)

        def Print(self):
            return self.getToken(XplorMRParser.Print, 0)

        def Threshold(self):
            return self.getToken(XplorMRParser.Threshold, 0)

        def Reset(self):
            return self.getToken(XplorMRParser.Reset, 0)

        def Rswitch(self):
            return self.getToken(XplorMRParser.Rswitch, 0)

        def Scale(self):
            return self.getToken(XplorMRParser.Scale, 0)

        def SoExponent(self):
            return self.getToken(XplorMRParser.SoExponent, 0)

        def SqConstant(self):
            return self.getToken(XplorMRParser.SqConstant, 0)

        def SqExponent(self):
            return self.getToken(XplorMRParser.SqExponent, 0)

        def SqOffset(self):
            return self.getToken(XplorMRParser.SqOffset, 0)

        def Temperature(self):
            return self.getToken(XplorMRParser.Temperature, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_noe_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNoe_statement" ):
                listener.enterNoe_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNoe_statement" ):
                listener.exitNoe_statement(self)




    def noe_statement(self):

        localctx = XplorMRParser.Noe_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_noe_statement)
        self._la = 0 # Token type
        try:
            self.state = 676
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [4]:
                self.enterOuterAlt(localctx, 1)
                self.state = 594
                self.noe_assign()
                pass
            elif token in [186]:
                self.enterOuterAlt(localctx, 2)
                self.state = 595
                self.noe_assign_loop()
                pass
            elif token in [5]:
                self.enterOuterAlt(localctx, 3)
                self.state = 596
                self.match(XplorMRParser.Asymptote)
                self.state = 597
                self.class_name()
                self.state = 598
                self.number_s()
                pass
            elif token in [6]:
                self.enterOuterAlt(localctx, 4)
                self.state = 600
                self.match(XplorMRParser.Average)
                self.state = 601
                self.match(XplorMRParser.Class_name_AM)
                self.state = 602
                self.match(XplorMRParser.Averaging_methods)
                pass
            elif token in [7]:
                self.enterOuterAlt(localctx, 5)
                self.state = 603
                self.match(XplorMRParser.Bhig)
                self.state = 604
                self.class_name()
                self.state = 605
                self.number_s()
                pass
            elif token in [8]:
                self.enterOuterAlt(localctx, 6)
                self.state = 607
                self.match(XplorMRParser.Ceiling)
                self.state = 609
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==207:
                    self.state = 608
                    self.match(XplorMRParser.Equ_op)


                self.state = 611
                self.number_s()
                pass
            elif token in [9]:
                self.enterOuterAlt(localctx, 7)
                self.state = 612
                self.classification()
                pass
            elif token in [10]:
                self.enterOuterAlt(localctx, 8)
                self.state = 613
                self.match(XplorMRParser.CountViol)
                self.state = 614
                self.class_name()
                pass
            elif token in [11]:
                self.enterOuterAlt(localctx, 9)
                self.state = 615
                self.match(XplorMRParser.Distribute)
                self.state = 616
                self.class_name()
                self.state = 617
                self.class_name()
                self.state = 618
                self.number_s()
                pass
            elif token in [12]:
                self.enterOuterAlt(localctx, 10)
                self.state = 620
                self.match(XplorMRParser.Monomers)
                self.state = 621
                self.class_name()
                self.state = 622
                self.match(XplorMRParser.Integer)
                pass
            elif token in [13]:
                self.enterOuterAlt(localctx, 11)
                self.state = 624
                self.match(XplorMRParser.Ncount)
                self.state = 625
                self.class_name()
                self.state = 626
                self.match(XplorMRParser.Integer)
                pass
            elif token in [14]:
                self.enterOuterAlt(localctx, 12)
                self.state = 628
                self.match(XplorMRParser.Nrestraints)
                self.state = 630
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==207:
                    self.state = 629
                    self.match(XplorMRParser.Equ_op)


                self.state = 632
                self.match(XplorMRParser.Integer)
                pass
            elif token in [15]:
                self.enterOuterAlt(localctx, 13)
                self.state = 633
                self.match(XplorMRParser.Potential)
                self.state = 634
                self.match(XplorMRParser.Class_name_PT)
                self.state = 635
                self.match(XplorMRParser.Potential_types)
                pass
            elif token in [16]:
                self.enterOuterAlt(localctx, 14)
                self.state = 636
                self.match(XplorMRParser.Predict)
                self.state = 637
                self.predict_statement()
                self.state = 638
                self.match(XplorMRParser.End)
                pass
            elif token in [17]:
                self.enterOuterAlt(localctx, 15)
                self.state = 640
                self.match(XplorMRParser.Print)
                self.state = 641
                self.match(XplorMRParser.Threshold)
                self.state = 643
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==207:
                    self.state = 642
                    self.match(XplorMRParser.Equ_op)


                self.state = 645
                self.number_s()
                pass
            elif token in [19]:
                self.enterOuterAlt(localctx, 16)
                self.state = 646
                self.match(XplorMRParser.Reset)
                pass
            elif token in [20]:
                self.enterOuterAlt(localctx, 17)
                self.state = 647
                self.match(XplorMRParser.Rswitch)
                self.state = 648
                self.class_name()
                self.state = 649
                self.number_s()
                pass
            elif token in [21]:
                self.enterOuterAlt(localctx, 18)
                self.state = 651
                self.match(XplorMRParser.Scale)
                self.state = 652
                self.class_name()
                self.state = 653
                self.number_s()
                pass
            elif token in [22]:
                self.enterOuterAlt(localctx, 19)
                self.state = 655
                self.match(XplorMRParser.SoExponent)
                self.state = 656
                self.class_name()
                self.state = 657
                self.number_s()
                pass
            elif token in [23]:
                self.enterOuterAlt(localctx, 20)
                self.state = 659
                self.match(XplorMRParser.SqConstant)
                self.state = 660
                self.class_name()
                self.state = 661
                self.number_s()
                pass
            elif token in [24]:
                self.enterOuterAlt(localctx, 21)
                self.state = 663
                self.match(XplorMRParser.SqExponent)
                self.state = 664
                self.class_name()
                self.state = 665
                self.number_s()
                pass
            elif token in [25]:
                self.enterOuterAlt(localctx, 22)
                self.state = 667
                self.match(XplorMRParser.SqOffset)
                self.state = 668
                self.class_name()
                self.state = 669
                self.number_s()
                pass
            elif token in [26]:
                self.enterOuterAlt(localctx, 23)
                self.state = 671
                self.match(XplorMRParser.Temperature)
                self.state = 673
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==207:
                    self.state = 672
                    self.match(XplorMRParser.Equ_op)


                self.state = 675
                self.number_s()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Noe_assignContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Assign(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Assign)
            else:
                return self.getToken(XplorMRParser.Assign, i)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.SelectionContext,i)


        def number(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.NumberContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.NumberContext,i)


        def noe_annotation(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Noe_annotationContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Noe_annotationContext,i)


        def Or_op(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Or_op)
            else:
                return self.getToken(XplorMRParser.Or_op, i)

        def getRuleIndex(self):
            return XplorMRParser.RULE_noe_assign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNoe_assign" ):
                listener.enterNoe_assign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNoe_assign" ):
                listener.exitNoe_assign(self)




    def noe_assign(self):

        localctx = XplorMRParser.Noe_assignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_noe_assign)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 678
            self.match(XplorMRParser.Assign)
            self.state = 679
            self.selection()
            self.state = 680
            self.selection()
            self.state = 681
            self.number()
            self.state = 683
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,40,self._ctx)
            if la_ == 1:
                self.state = 682
                self.number()


            self.state = 686
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 195)) & ~0x3f) == 0 and ((1 << (_la - 195)) & 262149) != 0):
                self.state = 685
                self.number()


            self.state = 691
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & 144678273320747008) != 0) or _la==193:
                self.state = 688
                self.noe_annotation()
                self.state = 693
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 711
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==190:
                self.state = 694
                self.match(XplorMRParser.Or_op)
                self.state = 696
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==4:
                    self.state = 695
                    self.match(XplorMRParser.Assign)


                self.state = 698
                self.selection()
                self.state = 699
                self.selection()
                self.state = 701
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,44,self._ctx)
                if la_ == 1:
                    self.state = 700
                    self.number()


                self.state = 704
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,45,self._ctx)
                if la_ == 1:
                    self.state = 703
                    self.number()


                self.state = 707
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 195)) & ~0x3f) == 0 and ((1 << (_la - 195)) & 262149) != 0):
                    self.state = 706
                    self.number()


                self.state = 713
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Predict_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Cutoff(self):
            return self.getToken(XplorMRParser.Cutoff, 0)

        def number_s(self):
            return self.getTypedRuleContext(XplorMRParser.Number_sContext,0)


        def Equ_op(self):
            return self.getToken(XplorMRParser.Equ_op, 0)

        def Cuton(self):
            return self.getToken(XplorMRParser.Cuton, 0)

        def From(self):
            return self.getToken(XplorMRParser.From, 0)

        def selection(self):
            return self.getTypedRuleContext(XplorMRParser.SelectionContext,0)


        def To(self):
            return self.getToken(XplorMRParser.To, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_predict_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPredict_statement" ):
                listener.enterPredict_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPredict_statement" ):
                listener.exitPredict_statement(self)




    def predict_statement(self):

        localctx = XplorMRParser.Predict_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_predict_statement)
        self._la = 0 # Token type
        try:
            self.state = 728
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [27]:
                self.enterOuterAlt(localctx, 1)
                self.state = 714
                self.match(XplorMRParser.Cutoff)
                self.state = 716
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==207:
                    self.state = 715
                    self.match(XplorMRParser.Equ_op)


                self.state = 718
                self.number_s()
                pass
            elif token in [28]:
                self.enterOuterAlt(localctx, 2)
                self.state = 719
                self.match(XplorMRParser.Cuton)
                self.state = 721
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==207:
                    self.state = 720
                    self.match(XplorMRParser.Equ_op)


                self.state = 723
                self.number_s()
                pass
            elif token in [29]:
                self.enterOuterAlt(localctx, 3)
                self.state = 724
                self.match(XplorMRParser.From)
                self.state = 725
                self.selection()
                pass
            elif token in [30]:
                self.enterOuterAlt(localctx, 4)
                self.state = 726
                self.match(XplorMRParser.To)
                self.state = 727
                self.selection()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Noe_annotationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Peak(self):
            return self.getToken(XplorMRParser.Peak, 0)

        def number_a(self):
            return self.getTypedRuleContext(XplorMRParser.Number_aContext,0)


        def Equ_op(self):
            return self.getToken(XplorMRParser.Equ_op, 0)

        def Spectrum(self):
            return self.getToken(XplorMRParser.Spectrum, 0)

        def Weight(self):
            return self.getToken(XplorMRParser.Weight, 0)

        def Volume(self):
            return self.getToken(XplorMRParser.Volume, 0)

        def Vol(self):
            return self.getToken(XplorMRParser.Vol, 0)

        def Ppm1(self):
            return self.getToken(XplorMRParser.Ppm1, 0)

        def Ppm2(self):
            return self.getToken(XplorMRParser.Ppm2, 0)

        def Cv(self):
            return self.getToken(XplorMRParser.Cv, 0)

        def Comma(self):
            return self.getToken(XplorMRParser.Comma, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_noe_annotation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNoe_annotation" ):
                listener.enterNoe_annotation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNoe_annotation" ):
                listener.exitNoe_annotation(self)




    def noe_annotation(self):

        localctx = XplorMRParser.Noe_annotationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_noe_annotation)
        self._la = 0 # Token type
        try:
            self.state = 766
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [31]:
                self.enterOuterAlt(localctx, 1)
                self.state = 730
                self.match(XplorMRParser.Peak)
                self.state = 732
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==207:
                    self.state = 731
                    self.match(XplorMRParser.Equ_op)


                self.state = 734
                self.number_a()
                pass
            elif token in [32]:
                self.enterOuterAlt(localctx, 2)
                self.state = 735
                self.match(XplorMRParser.Spectrum)
                self.state = 737
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==207:
                    self.state = 736
                    self.match(XplorMRParser.Equ_op)


                self.state = 739
                self.number_a()
                pass
            elif token in [57]:
                self.enterOuterAlt(localctx, 3)
                self.state = 740
                self.match(XplorMRParser.Weight)
                self.state = 742
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==207:
                    self.state = 741
                    self.match(XplorMRParser.Equ_op)


                self.state = 744
                self.number_a()
                pass
            elif token in [33, 34]:
                self.enterOuterAlt(localctx, 4)
                self.state = 745
                _la = self._input.LA(1)
                if not(_la==33 or _la==34):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 747
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==207:
                    self.state = 746
                    self.match(XplorMRParser.Equ_op)


                self.state = 749
                self.number_a()
                pass
            elif token in [35]:
                self.enterOuterAlt(localctx, 5)
                self.state = 750
                self.match(XplorMRParser.Ppm1)
                self.state = 752
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==207:
                    self.state = 751
                    self.match(XplorMRParser.Equ_op)


                self.state = 754
                self.number_a()
                pass
            elif token in [36]:
                self.enterOuterAlt(localctx, 6)
                self.state = 755
                self.match(XplorMRParser.Ppm2)
                self.state = 757
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==207:
                    self.state = 756
                    self.match(XplorMRParser.Equ_op)


                self.state = 759
                self.number_a()
                pass
            elif token in [49]:
                self.enterOuterAlt(localctx, 7)
                self.state = 760
                self.match(XplorMRParser.Cv)
                self.state = 762
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==207:
                    self.state = 761
                    self.match(XplorMRParser.Equ_op)


                self.state = 764
                self.number_a()
                pass
            elif token in [193]:
                self.enterOuterAlt(localctx, 8)
                self.state = 765
                self.match(XplorMRParser.Comma)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Dihedral_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def vector_statement(self):
            return self.getTypedRuleContext(XplorMRParser.Vector_statementContext,0)


        def dihedral_assign(self):
            return self.getTypedRuleContext(XplorMRParser.Dihedral_assignContext,0)


        def dihedral_assign_loop(self):
            return self.getTypedRuleContext(XplorMRParser.Dihedral_assign_loopContext,0)


        def Nassign(self):
            return self.getToken(XplorMRParser.Nassign, 0)

        def Integer(self):
            return self.getToken(XplorMRParser.Integer, 0)

        def Equ_op(self):
            return self.getToken(XplorMRParser.Equ_op, 0)

        def Reset(self):
            return self.getToken(XplorMRParser.Reset, 0)

        def Scale(self):
            return self.getToken(XplorMRParser.Scale, 0)

        def number_s(self):
            return self.getTypedRuleContext(XplorMRParser.Number_sContext,0)


        def Print_any(self):
            return self.getToken(XplorMRParser.Print_any, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_dihedral_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDihedral_statement" ):
                listener.enterDihedral_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDihedral_statement" ):
                listener.exitDihedral_statement(self)




    def dihedral_statement(self):

        localctx = XplorMRParser.Dihedral_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_dihedral_statement)
        self._la = 0 # Token type
        try:
            self.state = 783
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [169]:
                self.enterOuterAlt(localctx, 1)
                self.state = 768
                self.vector_statement()
                pass
            elif token in [4]:
                self.enterOuterAlt(localctx, 2)
                self.state = 769
                self.dihedral_assign()
                pass
            elif token in [186]:
                self.enterOuterAlt(localctx, 3)
                self.state = 770
                self.dihedral_assign_loop()
                pass
            elif token in [39]:
                self.enterOuterAlt(localctx, 4)
                self.state = 771
                self.match(XplorMRParser.Nassign)
                self.state = 773
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==207:
                    self.state = 772
                    self.match(XplorMRParser.Equ_op)


                self.state = 775
                self.match(XplorMRParser.Integer)
                pass
            elif token in [19]:
                self.enterOuterAlt(localctx, 5)
                self.state = 776
                self.match(XplorMRParser.Reset)
                pass
            elif token in [21]:
                self.enterOuterAlt(localctx, 6)
                self.state = 777
                self.match(XplorMRParser.Scale)
                self.state = 779
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==207:
                    self.state = 778
                    self.match(XplorMRParser.Equ_op)


                self.state = 781
                self.number_s()
                pass
            elif token in [40]:
                self.enterOuterAlt(localctx, 7)
                self.state = 782
                self.match(XplorMRParser.Print_any)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Dihedral_assignContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Assign(self):
            return self.getToken(XplorMRParser.Assign, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.SelectionContext,i)


        def number(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.NumberContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.NumberContext,i)


        def Integer(self):
            return self.getToken(XplorMRParser.Integer, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_dihedral_assign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDihedral_assign" ):
                listener.enterDihedral_assign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDihedral_assign" ):
                listener.exitDihedral_assign(self)




    def dihedral_assign(self):

        localctx = XplorMRParser.Dihedral_assignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_dihedral_assign)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 785
            self.match(XplorMRParser.Assign)
            self.state = 786
            self.selection()
            self.state = 787
            self.selection()
            self.state = 788
            self.selection()
            self.state = 789
            self.selection()
            self.state = 790
            self.number()
            self.state = 791
            self.number()
            self.state = 792
            self.number()
            self.state = 793
            self.match(XplorMRParser.Integer)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Sani_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def sani_assign(self):
            return self.getTypedRuleContext(XplorMRParser.Sani_assignContext,0)


        def sani_assign_loop(self):
            return self.getTypedRuleContext(XplorMRParser.Sani_assign_loopContext,0)


        def classification(self):
            return self.getTypedRuleContext(XplorMRParser.ClassificationContext,0)


        def Coefficients(self):
            return self.getToken(XplorMRParser.Coefficients, 0)

        def number_s(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Number_sContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Number_sContext,i)


        def ForceConstant(self):
            return self.getToken(XplorMRParser.ForceConstant, 0)

        def Equ_op(self):
            return self.getToken(XplorMRParser.Equ_op, 0)

        def Nrestraints(self):
            return self.getToken(XplorMRParser.Nrestraints, 0)

        def Integer(self):
            return self.getToken(XplorMRParser.Integer, 0)

        def Potential(self):
            return self.getToken(XplorMRParser.Potential, 0)

        def Potential_types(self):
            return self.getToken(XplorMRParser.Potential_types, 0)

        def Equ_op_PT(self):
            return self.getToken(XplorMRParser.Equ_op_PT, 0)

        def Print(self):
            return self.getToken(XplorMRParser.Print, 0)

        def Threshold(self):
            return self.getToken(XplorMRParser.Threshold, 0)

        def Reset(self):
            return self.getToken(XplorMRParser.Reset, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_sani_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSani_statement" ):
                listener.enterSani_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSani_statement" ):
                listener.exitSani_statement(self)




    def sani_statement(self):

        localctx = XplorMRParser.Sani_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_sani_statement)
        self._la = 0 # Token type
        try:
            self.state = 822
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [4]:
                self.enterOuterAlt(localctx, 1)
                self.state = 795
                self.sani_assign()
                pass
            elif token in [186]:
                self.enterOuterAlt(localctx, 2)
                self.state = 796
                self.sani_assign_loop()
                pass
            elif token in [9]:
                self.enterOuterAlt(localctx, 3)
                self.state = 797
                self.classification()
                pass
            elif token in [42]:
                self.enterOuterAlt(localctx, 4)
                self.state = 798
                self.match(XplorMRParser.Coefficients)
                self.state = 799
                self.number_s()
                self.state = 800
                self.number_s()
                self.state = 801
                self.number_s()
                pass
            elif token in [43]:
                self.enterOuterAlt(localctx, 5)
                self.state = 803
                self.match(XplorMRParser.ForceConstant)
                self.state = 805
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==207:
                    self.state = 804
                    self.match(XplorMRParser.Equ_op)


                self.state = 807
                self.number_s()
                pass
            elif token in [14]:
                self.enterOuterAlt(localctx, 6)
                self.state = 808
                self.match(XplorMRParser.Nrestraints)
                self.state = 810
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==207:
                    self.state = 809
                    self.match(XplorMRParser.Equ_op)


                self.state = 812
                self.match(XplorMRParser.Integer)
                pass
            elif token in [15]:
                self.enterOuterAlt(localctx, 7)
                self.state = 813
                self.match(XplorMRParser.Potential)
                self.state = 815
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==226:
                    self.state = 814
                    self.match(XplorMRParser.Equ_op_PT)


                self.state = 817
                self.match(XplorMRParser.Potential_types)
                pass
            elif token in [17]:
                self.enterOuterAlt(localctx, 8)
                self.state = 818
                self.match(XplorMRParser.Print)
                self.state = 819
                self.match(XplorMRParser.Threshold)
                self.state = 820
                self.number_s()
                pass
            elif token in [19]:
                self.enterOuterAlt(localctx, 9)
                self.state = 821
                self.match(XplorMRParser.Reset)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Sani_assignContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Assign(self):
            return self.getToken(XplorMRParser.Assign, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.SelectionContext,i)


        def number(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.NumberContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.NumberContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_sani_assign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSani_assign" ):
                listener.enterSani_assign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSani_assign" ):
                listener.exitSani_assign(self)




    def sani_assign(self):

        localctx = XplorMRParser.Sani_assignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_sani_assign)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 824
            self.match(XplorMRParser.Assign)
            self.state = 825
            self.selection()
            self.state = 826
            self.selection()
            self.state = 827
            self.selection()
            self.state = 828
            self.selection()
            self.state = 829
            self.selection()
            self.state = 830
            self.selection()
            self.state = 831
            self.number()
            self.state = 833
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,66,self._ctx)
            if la_ == 1:
                self.state = 832
                self.number()


            self.state = 836
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 195)) & ~0x3f) == 0 and ((1 << (_la - 195)) & 262149) != 0):
                self.state = 835
                self.number()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Xdip_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def xdip_assign(self):
            return self.getTypedRuleContext(XplorMRParser.Xdip_assignContext,0)


        def classification(self):
            return self.getTypedRuleContext(XplorMRParser.ClassificationContext,0)


        def Type(self):
            return self.getToken(XplorMRParser.Type, 0)

        def Rdc_dist_fix_types(self):
            return self.getToken(XplorMRParser.Rdc_dist_fix_types, 0)

        def Scale(self):
            return self.getToken(XplorMRParser.Scale, 0)

        def number_s(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Number_sContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Number_sContext,i)


        def Equ_op(self):
            return self.getToken(XplorMRParser.Equ_op, 0)

        def Sign(self):
            return self.getToken(XplorMRParser.Sign, 0)

        def Logical(self):
            return self.getToken(XplorMRParser.Logical, 0)

        def Average(self):
            return self.getToken(XplorMRParser.Average, 0)

        def Averaging_methods(self):
            return self.getToken(XplorMRParser.Averaging_methods, 0)

        def Coefficients(self):
            return self.getToken(XplorMRParser.Coefficients, 0)

        def ForceConstant(self):
            return self.getToken(XplorMRParser.ForceConstant, 0)

        def Nrestraints(self):
            return self.getToken(XplorMRParser.Nrestraints, 0)

        def Integer(self):
            return self.getToken(XplorMRParser.Integer, 0)

        def Potential(self):
            return self.getToken(XplorMRParser.Potential, 0)

        def Potential_types(self):
            return self.getToken(XplorMRParser.Potential_types, 0)

        def Equ_op_PT(self):
            return self.getToken(XplorMRParser.Equ_op_PT, 0)

        def Print(self):
            return self.getToken(XplorMRParser.Print, 0)

        def Threshold(self):
            return self.getToken(XplorMRParser.Threshold, 0)

        def Reset(self):
            return self.getToken(XplorMRParser.Reset, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_xdip_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterXdip_statement" ):
                listener.enterXdip_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitXdip_statement" ):
                listener.exitXdip_statement(self)




    def xdip_statement(self):

        localctx = XplorMRParser.Xdip_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 68, self.RULE_xdip_statement)
        self._la = 0 # Token type
        try:
            self.state = 875
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [4]:
                self.enterOuterAlt(localctx, 1)
                self.state = 838
                self.xdip_assign()
                pass
            elif token in [9]:
                self.enterOuterAlt(localctx, 2)
                self.state = 839
                self.classification()
                pass
            elif token in [46]:
                self.enterOuterAlt(localctx, 3)
                self.state = 840
                self.match(XplorMRParser.Type)
                self.state = 841
                self.match(XplorMRParser.Rdc_dist_fix_types)
                pass
            elif token in [21]:
                self.enterOuterAlt(localctx, 4)
                self.state = 842
                self.match(XplorMRParser.Scale)
                self.state = 844
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==207:
                    self.state = 843
                    self.match(XplorMRParser.Equ_op)


                self.state = 846
                self.number_s()
                pass
            elif token in [47]:
                self.enterOuterAlt(localctx, 5)
                self.state = 847
                self.match(XplorMRParser.Sign)
                self.state = 848
                self.match(XplorMRParser.Logical)
                pass
            elif token in [6]:
                self.enterOuterAlt(localctx, 6)
                self.state = 849
                self.match(XplorMRParser.Average)
                self.state = 850
                self.match(XplorMRParser.Averaging_methods)
                pass
            elif token in [42]:
                self.enterOuterAlt(localctx, 7)
                self.state = 851
                self.match(XplorMRParser.Coefficients)
                self.state = 852
                self.number_s()
                self.state = 853
                self.number_s()
                self.state = 854
                self.number_s()
                pass
            elif token in [43]:
                self.enterOuterAlt(localctx, 8)
                self.state = 856
                self.match(XplorMRParser.ForceConstant)
                self.state = 858
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==207:
                    self.state = 857
                    self.match(XplorMRParser.Equ_op)


                self.state = 860
                self.number_s()
                pass
            elif token in [14]:
                self.enterOuterAlt(localctx, 9)
                self.state = 861
                self.match(XplorMRParser.Nrestraints)
                self.state = 863
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==207:
                    self.state = 862
                    self.match(XplorMRParser.Equ_op)


                self.state = 865
                self.match(XplorMRParser.Integer)
                pass
            elif token in [15]:
                self.enterOuterAlt(localctx, 10)
                self.state = 866
                self.match(XplorMRParser.Potential)
                self.state = 868
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==226:
                    self.state = 867
                    self.match(XplorMRParser.Equ_op_PT)


                self.state = 870
                self.match(XplorMRParser.Potential_types)
                pass
            elif token in [17]:
                self.enterOuterAlt(localctx, 11)
                self.state = 871
                self.match(XplorMRParser.Print)
                self.state = 872
                self.match(XplorMRParser.Threshold)
                self.state = 873
                self.number_s()
                pass
            elif token in [19]:
                self.enterOuterAlt(localctx, 12)
                self.state = 874
                self.match(XplorMRParser.Reset)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Xdip_assignContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Assign(self):
            return self.getToken(XplorMRParser.Assign, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.SelectionContext,i)


        def number(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.NumberContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.NumberContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_xdip_assign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterXdip_assign" ):
                listener.enterXdip_assign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitXdip_assign" ):
                listener.exitXdip_assign(self)




    def xdip_assign(self):

        localctx = XplorMRParser.Xdip_assignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_xdip_assign)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 877
            self.match(XplorMRParser.Assign)
            self.state = 878
            self.selection()
            self.state = 879
            self.selection()
            self.state = 880
            self.selection()
            self.state = 881
            self.selection()
            self.state = 882
            self.selection()
            self.state = 883
            self.selection()
            self.state = 884
            self.number()
            self.state = 885
            self.number()
            self.state = 892
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,73,self._ctx)
            if la_ == 1:
                self.state = 886
                self.number()

            elif la_ == 2:
                self.state = 887
                self.number()
                self.state = 888
                self.number()
                self.state = 889
                self.number()
                self.state = 890
                self.number()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Vean_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def vean_assign(self):
            return self.getTypedRuleContext(XplorMRParser.Vean_assignContext,0)


        def Cv(self):
            return self.getToken(XplorMRParser.Cv, 0)

        def Integer(self):
            return self.getToken(XplorMRParser.Integer, 0)

        def Equ_op(self):
            return self.getToken(XplorMRParser.Equ_op, 0)

        def classification(self):
            return self.getTypedRuleContext(XplorMRParser.ClassificationContext,0)


        def ForceConstant(self):
            return self.getToken(XplorMRParser.ForceConstant, 0)

        def number_s(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Number_sContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Number_sContext,i)


        def Nrestraints(self):
            return self.getToken(XplorMRParser.Nrestraints, 0)

        def Partition(self):
            return self.getToken(XplorMRParser.Partition, 0)

        def Print(self):
            return self.getToken(XplorMRParser.Print, 0)

        def Threshold(self):
            return self.getToken(XplorMRParser.Threshold, 0)

        def Reset(self):
            return self.getToken(XplorMRParser.Reset, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_vean_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVean_statement" ):
                listener.enterVean_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVean_statement" ):
                listener.exitVean_statement(self)




    def vean_statement(self):

        localctx = XplorMRParser.Vean_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_vean_statement)
        self._la = 0 # Token type
        try:
            self.state = 922
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [4]:
                self.enterOuterAlt(localctx, 1)
                self.state = 894
                self.vean_assign()
                pass
            elif token in [49]:
                self.enterOuterAlt(localctx, 2)
                self.state = 895
                self.match(XplorMRParser.Cv)
                self.state = 897
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==207:
                    self.state = 896
                    self.match(XplorMRParser.Equ_op)


                self.state = 899
                self.match(XplorMRParser.Integer)
                pass
            elif token in [9]:
                self.enterOuterAlt(localctx, 3)
                self.state = 900
                self.classification()
                pass
            elif token in [43]:
                self.enterOuterAlt(localctx, 4)
                self.state = 901
                self.match(XplorMRParser.ForceConstant)
                self.state = 903
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==207:
                    self.state = 902
                    self.match(XplorMRParser.Equ_op)


                self.state = 905
                self.number_s()
                self.state = 906
                self.number_s()
                pass
            elif token in [14]:
                self.enterOuterAlt(localctx, 5)
                self.state = 908
                self.match(XplorMRParser.Nrestraints)
                self.state = 910
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==207:
                    self.state = 909
                    self.match(XplorMRParser.Equ_op)


                self.state = 912
                self.match(XplorMRParser.Integer)
                pass
            elif token in [50]:
                self.enterOuterAlt(localctx, 6)
                self.state = 913
                self.match(XplorMRParser.Partition)
                self.state = 915
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==207:
                    self.state = 914
                    self.match(XplorMRParser.Equ_op)


                self.state = 917
                self.match(XplorMRParser.Integer)
                pass
            elif token in [17]:
                self.enterOuterAlt(localctx, 7)
                self.state = 918
                self.match(XplorMRParser.Print)
                self.state = 919
                self.match(XplorMRParser.Threshold)
                self.state = 920
                self.number_s()
                pass
            elif token in [19]:
                self.enterOuterAlt(localctx, 8)
                self.state = 921
                self.match(XplorMRParser.Reset)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Vean_assignContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Assign(self):
            return self.getToken(XplorMRParser.Assign, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.SelectionContext,i)


        def number(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.NumberContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.NumberContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_vean_assign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVean_assign" ):
                listener.enterVean_assign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVean_assign" ):
                listener.exitVean_assign(self)




    def vean_assign(self):

        localctx = XplorMRParser.Vean_assignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_vean_assign)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 924
            self.match(XplorMRParser.Assign)
            self.state = 925
            self.selection()
            self.state = 926
            self.selection()
            self.state = 927
            self.selection()
            self.state = 928
            self.selection()
            self.state = 929
            self.number()
            self.state = 930
            self.number()
            self.state = 934
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 195)) & ~0x3f) == 0 and ((1 << (_la - 195)) & 262149) != 0):
                self.state = 931
                self.number()
                self.state = 932
                self.number()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Tenso_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def tenso_assign(self):
            return self.getTypedRuleContext(XplorMRParser.Tenso_assignContext,0)


        def classification(self):
            return self.getTypedRuleContext(XplorMRParser.ClassificationContext,0)


        def Coefficients(self):
            return self.getToken(XplorMRParser.Coefficients, 0)

        def number_s(self):
            return self.getTypedRuleContext(XplorMRParser.Number_sContext,0)


        def Nrestraints(self):
            return self.getToken(XplorMRParser.Nrestraints, 0)

        def Integer(self):
            return self.getToken(XplorMRParser.Integer, 0)

        def Equ_op(self):
            return self.getToken(XplorMRParser.Equ_op, 0)

        def Potential(self):
            return self.getToken(XplorMRParser.Potential, 0)

        def Potential_types(self):
            return self.getToken(XplorMRParser.Potential_types, 0)

        def Equ_op_PT(self):
            return self.getToken(XplorMRParser.Equ_op_PT, 0)

        def Print(self):
            return self.getToken(XplorMRParser.Print, 0)

        def Threshold(self):
            return self.getToken(XplorMRParser.Threshold, 0)

        def Reset(self):
            return self.getToken(XplorMRParser.Reset, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_tenso_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTenso_statement" ):
                listener.enterTenso_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTenso_statement" ):
                listener.exitTenso_statement(self)




    def tenso_statement(self):

        localctx = XplorMRParser.Tenso_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 76, self.RULE_tenso_statement)
        self._la = 0 # Token type
        try:
            self.state = 954
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [4]:
                self.enterOuterAlt(localctx, 1)
                self.state = 936
                self.tenso_assign()
                pass
            elif token in [9]:
                self.enterOuterAlt(localctx, 2)
                self.state = 937
                self.classification()
                pass
            elif token in [42]:
                self.enterOuterAlt(localctx, 3)
                self.state = 938
                self.match(XplorMRParser.Coefficients)
                self.state = 939
                self.number_s()
                pass
            elif token in [14]:
                self.enterOuterAlt(localctx, 4)
                self.state = 940
                self.match(XplorMRParser.Nrestraints)
                self.state = 942
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==207:
                    self.state = 941
                    self.match(XplorMRParser.Equ_op)


                self.state = 944
                self.match(XplorMRParser.Integer)
                pass
            elif token in [15]:
                self.enterOuterAlt(localctx, 5)
                self.state = 945
                self.match(XplorMRParser.Potential)
                self.state = 947
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==226:
                    self.state = 946
                    self.match(XplorMRParser.Equ_op_PT)


                self.state = 949
                self.match(XplorMRParser.Potential_types)
                pass
            elif token in [17]:
                self.enterOuterAlt(localctx, 6)
                self.state = 950
                self.match(XplorMRParser.Print)
                self.state = 951
                self.match(XplorMRParser.Threshold)
                self.state = 952
                self.number_s()
                pass
            elif token in [19]:
                self.enterOuterAlt(localctx, 7)
                self.state = 953
                self.match(XplorMRParser.Reset)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Tenso_assignContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Assign(self):
            return self.getToken(XplorMRParser.Assign, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.SelectionContext,i)


        def number(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.NumberContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.NumberContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_tenso_assign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTenso_assign" ):
                listener.enterTenso_assign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTenso_assign" ):
                listener.exitTenso_assign(self)




    def tenso_assign(self):

        localctx = XplorMRParser.Tenso_assignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 78, self.RULE_tenso_assign)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 956
            self.match(XplorMRParser.Assign)
            self.state = 957
            self.selection()
            self.state = 958
            self.selection()
            self.state = 959
            self.number()
            self.state = 961
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 195)) & ~0x3f) == 0 and ((1 << (_la - 195)) & 262149) != 0):
                self.state = 960
                self.number()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Anis_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def anis_assign(self):
            return self.getTypedRuleContext(XplorMRParser.Anis_assignContext,0)


        def classification(self):
            return self.getTypedRuleContext(XplorMRParser.ClassificationContext,0)


        def Coefficients(self):
            return self.getToken(XplorMRParser.Coefficients, 0)

        def number_s(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Number_sContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Number_sContext,i)


        def ForceConstant(self):
            return self.getToken(XplorMRParser.ForceConstant, 0)

        def Equ_op(self):
            return self.getToken(XplorMRParser.Equ_op, 0)

        def Nrestraints(self):
            return self.getToken(XplorMRParser.Nrestraints, 0)

        def Integer(self):
            return self.getToken(XplorMRParser.Integer, 0)

        def Potential(self):
            return self.getToken(XplorMRParser.Potential, 0)

        def Potential_types(self):
            return self.getToken(XplorMRParser.Potential_types, 0)

        def Equ_op_PT(self):
            return self.getToken(XplorMRParser.Equ_op_PT, 0)

        def Print(self):
            return self.getToken(XplorMRParser.Print, 0)

        def Threshold(self):
            return self.getToken(XplorMRParser.Threshold, 0)

        def Reset(self):
            return self.getToken(XplorMRParser.Reset, 0)

        def Type(self):
            return self.getToken(XplorMRParser.Type, 0)

        def Rdc_or_Diff_anis_types(self):
            return self.getToken(XplorMRParser.Rdc_or_Diff_anis_types, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_anis_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAnis_statement" ):
                listener.enterAnis_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAnis_statement" ):
                listener.exitAnis_statement(self)




    def anis_statement(self):

        localctx = XplorMRParser.Anis_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 80, self.RULE_anis_statement)
        self._la = 0 # Token type
        try:
            self.state = 992
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [4]:
                self.enterOuterAlt(localctx, 1)
                self.state = 963
                self.anis_assign()
                pass
            elif token in [9]:
                self.enterOuterAlt(localctx, 2)
                self.state = 964
                self.classification()
                pass
            elif token in [42]:
                self.enterOuterAlt(localctx, 3)
                self.state = 965
                self.match(XplorMRParser.Coefficients)
                self.state = 966
                self.number_s()
                self.state = 967
                self.number_s()
                self.state = 968
                self.number_s()
                self.state = 969
                self.number_s()
                pass
            elif token in [43]:
                self.enterOuterAlt(localctx, 4)
                self.state = 971
                self.match(XplorMRParser.ForceConstant)
                self.state = 973
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==207:
                    self.state = 972
                    self.match(XplorMRParser.Equ_op)


                self.state = 975
                self.number_s()
                pass
            elif token in [14]:
                self.enterOuterAlt(localctx, 5)
                self.state = 976
                self.match(XplorMRParser.Nrestraints)
                self.state = 978
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==207:
                    self.state = 977
                    self.match(XplorMRParser.Equ_op)


                self.state = 980
                self.match(XplorMRParser.Integer)
                pass
            elif token in [15]:
                self.enterOuterAlt(localctx, 6)
                self.state = 981
                self.match(XplorMRParser.Potential)
                self.state = 983
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==226:
                    self.state = 982
                    self.match(XplorMRParser.Equ_op_PT)


                self.state = 985
                self.match(XplorMRParser.Potential_types)
                pass
            elif token in [17]:
                self.enterOuterAlt(localctx, 7)
                self.state = 986
                self.match(XplorMRParser.Print)
                self.state = 987
                self.match(XplorMRParser.Threshold)
                self.state = 988
                self.number_s()
                pass
            elif token in [19]:
                self.enterOuterAlt(localctx, 8)
                self.state = 989
                self.match(XplorMRParser.Reset)
                pass
            elif token in [46]:
                self.enterOuterAlt(localctx, 9)
                self.state = 990
                self.match(XplorMRParser.Type)
                self.state = 991
                self.match(XplorMRParser.Rdc_or_Diff_anis_types)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Anis_assignContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Assign(self):
            return self.getToken(XplorMRParser.Assign, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.SelectionContext,i)


        def number(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.NumberContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.NumberContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_anis_assign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAnis_assign" ):
                listener.enterAnis_assign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAnis_assign" ):
                listener.exitAnis_assign(self)




    def anis_assign(self):

        localctx = XplorMRParser.Anis_assignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 82, self.RULE_anis_assign)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 994
            self.match(XplorMRParser.Assign)
            self.state = 995
            self.selection()
            self.state = 996
            self.selection()
            self.state = 997
            self.selection()
            self.state = 998
            self.selection()
            self.state = 999
            self.number()
            self.state = 1001
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 195)) & ~0x3f) == 0 and ((1 << (_la - 195)) & 262149) != 0):
                self.state = 1000
                self.number()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Planar_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def vector_statement(self):
            return self.getTypedRuleContext(XplorMRParser.Vector_statementContext,0)


        def planar_group(self):
            return self.getTypedRuleContext(XplorMRParser.Planar_groupContext,0)


        def planar_group_loop(self):
            return self.getTypedRuleContext(XplorMRParser.Planar_group_loopContext,0)


        def Initialize(self):
            return self.getToken(XplorMRParser.Initialize, 0)

        def Print_any(self):
            return self.getToken(XplorMRParser.Print_any, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_planar_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPlanar_statement" ):
                listener.enterPlanar_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPlanar_statement" ):
                listener.exitPlanar_statement(self)




    def planar_statement(self):

        localctx = XplorMRParser.Planar_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 84, self.RULE_planar_statement)
        try:
            self.state = 1008
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [169]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1003
                self.vector_statement()
                pass
            elif token in [54]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1004
                self.planar_group()
                pass
            elif token in [186]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1005
                self.planar_group_loop()
                pass
            elif token in [55]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1006
                self.match(XplorMRParser.Initialize)
                pass
            elif token in [40]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1007
                self.match(XplorMRParser.Print_any)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Planar_groupContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Group(self):
            return self.getToken(XplorMRParser.Group, 0)

        def End(self):
            return self.getToken(XplorMRParser.End, 0)

        def group_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Group_statementContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Group_statementContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_planar_group

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPlanar_group" ):
                listener.enterPlanar_group(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPlanar_group" ):
                listener.exitPlanar_group(self)




    def planar_group(self):

        localctx = XplorMRParser.Planar_groupContext(self, self._ctx, self.state)
        self.enterRule(localctx, 86, self.RULE_planar_group)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1010
            self.match(XplorMRParser.Group)
            self.state = 1014
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==56 or _la==57:
                self.state = 1011
                self.group_statement()
                self.state = 1016
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1017
            self.match(XplorMRParser.End)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Group_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Selection(self):
            return self.getToken(XplorMRParser.Selection, 0)

        def selection(self):
            return self.getTypedRuleContext(XplorMRParser.SelectionContext,0)


        def Equ_op(self):
            return self.getToken(XplorMRParser.Equ_op, 0)

        def Weight(self):
            return self.getToken(XplorMRParser.Weight, 0)

        def number_s(self):
            return self.getTypedRuleContext(XplorMRParser.Number_sContext,0)


        def getRuleIndex(self):
            return XplorMRParser.RULE_group_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGroup_statement" ):
                listener.enterGroup_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGroup_statement" ):
                listener.exitGroup_statement(self)




    def group_statement(self):

        localctx = XplorMRParser.Group_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 88, self.RULE_group_statement)
        self._la = 0 # Token type
        try:
            self.state = 1029
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [56]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1019
                self.match(XplorMRParser.Selection)
                self.state = 1021
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==207:
                    self.state = 1020
                    self.match(XplorMRParser.Equ_op)


                self.state = 1023
                self.selection()
                pass
            elif token in [57]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1024
                self.match(XplorMRParser.Weight)
                self.state = 1026
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==207:
                    self.state = 1025
                    self.match(XplorMRParser.Equ_op)


                self.state = 1028
                self.number_s()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Harmonic_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def vector_statement(self):
            return self.getTypedRuleContext(XplorMRParser.Vector_statementContext,0)


        def Exponent(self):
            return self.getToken(XplorMRParser.Exponent, 0)

        def Integer(self):
            return self.getToken(XplorMRParser.Integer, 0)

        def Equ_op(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Equ_op)
            else:
                return self.getToken(XplorMRParser.Equ_op, i)

        def Normal(self):
            return self.getToken(XplorMRParser.Normal, 0)

        def L_paren(self):
            return self.getToken(XplorMRParser.L_paren, 0)

        def R_paren(self):
            return self.getToken(XplorMRParser.R_paren, 0)

        def number_s(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Number_sContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Number_sContext,i)


        def Tail(self):
            return self.getToken(XplorMRParser.Tail, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.SelectionContext,i)


        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Comma)
            else:
                return self.getToken(XplorMRParser.Comma, i)

        def Head(self):
            return self.getToken(XplorMRParser.Head, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_harmonic_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHarmonic_statement" ):
                listener.enterHarmonic_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHarmonic_statement" ):
                listener.exitHarmonic_statement(self)




    def harmonic_statement(self):

        localctx = XplorMRParser.Harmonic_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 90, self.RULE_harmonic_statement)
        self._la = 0 # Token type
        try:
            self.state = 1071
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [169]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1031
                self.vector_statement()
                pass
            elif token in [59]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1032
                self.match(XplorMRParser.Exponent)
                self.state = 1034
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==207:
                    self.state = 1033
                    self.match(XplorMRParser.Equ_op)


                self.state = 1036
                self.match(XplorMRParser.Integer)
                pass
            elif token in [60]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1037
                self.match(XplorMRParser.Normal)
                self.state = 1039
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==207:
                    self.state = 1038
                    self.match(XplorMRParser.Equ_op)


                self.state = 1041
                self.match(XplorMRParser.L_paren)
                self.state = 1067
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [195, 197, 213]:
                    self.state = 1042
                    self.number_s()
                    self.state = 1044
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==193:
                        self.state = 1043
                        self.match(XplorMRParser.Comma)


                    self.state = 1046
                    self.number_s()
                    self.state = 1048
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==193:
                        self.state = 1047
                        self.match(XplorMRParser.Comma)


                    self.state = 1050
                    self.number_s()
                    pass
                elif token in [188]:
                    self.state = 1052
                    self.match(XplorMRParser.Tail)
                    self.state = 1054
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==207:
                        self.state = 1053
                        self.match(XplorMRParser.Equ_op)


                    self.state = 1056
                    self.selection()
                    self.state = 1058
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==193:
                        self.state = 1057
                        self.match(XplorMRParser.Comma)


                    self.state = 1065
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==189:
                        self.state = 1060
                        self.match(XplorMRParser.Head)
                        self.state = 1062
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==207:
                            self.state = 1061
                            self.match(XplorMRParser.Equ_op)


                        self.state = 1064
                        self.selection()


                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 1069
                self.match(XplorMRParser.R_paren)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Harmonic_assignContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Assign(self):
            return self.getToken(XplorMRParser.Assign, 0)

        def selection(self):
            return self.getTypedRuleContext(XplorMRParser.SelectionContext,0)


        def number(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.NumberContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.NumberContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_harmonic_assign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHarmonic_assign" ):
                listener.enterHarmonic_assign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHarmonic_assign" ):
                listener.exitHarmonic_assign(self)




    def harmonic_assign(self):

        localctx = XplorMRParser.Harmonic_assignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 92, self.RULE_harmonic_assign)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1073
            self.match(XplorMRParser.Assign)
            self.state = 1074
            self.selection()
            self.state = 1075
            self.number()
            self.state = 1076
            self.number()
            self.state = 1077
            self.number()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Antidistance_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def xadc_assign(self):
            return self.getTypedRuleContext(XplorMRParser.Xadc_assignContext,0)


        def xadc_assign_loop(self):
            return self.getTypedRuleContext(XplorMRParser.Xadc_assign_loopContext,0)


        def classification(self):
            return self.getTypedRuleContext(XplorMRParser.ClassificationContext,0)


        def Expectation(self):
            return self.getToken(XplorMRParser.Expectation, 0)

        def Integer(self):
            return self.getToken(XplorMRParser.Integer, 0)

        def number_s(self):
            return self.getTypedRuleContext(XplorMRParser.Number_sContext,0)


        def ForceConstant(self):
            return self.getToken(XplorMRParser.ForceConstant, 0)

        def Equ_op(self):
            return self.getToken(XplorMRParser.Equ_op, 0)

        def Nrestraints(self):
            return self.getToken(XplorMRParser.Nrestraints, 0)

        def Print(self):
            return self.getToken(XplorMRParser.Print, 0)

        def Threshold(self):
            return self.getToken(XplorMRParser.Threshold, 0)

        def All(self):
            return self.getToken(XplorMRParser.All, 0)

        def Reset(self):
            return self.getToken(XplorMRParser.Reset, 0)

        def Size(self):
            return self.getToken(XplorMRParser.Size, 0)

        def Zero(self):
            return self.getToken(XplorMRParser.Zero, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_antidistance_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAntidistance_statement" ):
                listener.enterAntidistance_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAntidistance_statement" ):
                listener.exitAntidistance_statement(self)




    def antidistance_statement(self):

        localctx = XplorMRParser.Antidistance_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 94, self.RULE_antidistance_statement)
        self._la = 0 # Token type
        try:
            self.state = 1108
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [4]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1079
                self.xadc_assign()
                pass
            elif token in [186]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1080
                self.xadc_assign_loop()
                pass
            elif token in [9]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1081
                self.classification()
                pass
            elif token in [62]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1082
                self.match(XplorMRParser.Expectation)
                self.state = 1083
                self.match(XplorMRParser.Integer)
                self.state = 1084
                self.number_s()
                pass
            elif token in [43]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1085
                self.match(XplorMRParser.ForceConstant)
                self.state = 1087
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==207:
                    self.state = 1086
                    self.match(XplorMRParser.Equ_op)


                self.state = 1089
                self.number_s()
                pass
            elif token in [14]:
                self.enterOuterAlt(localctx, 6)
                self.state = 1090
                self.match(XplorMRParser.Nrestraints)
                self.state = 1092
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==207:
                    self.state = 1091
                    self.match(XplorMRParser.Equ_op)


                self.state = 1094
                self.match(XplorMRParser.Integer)
                pass
            elif token in [17]:
                self.enterOuterAlt(localctx, 7)
                self.state = 1095
                self.match(XplorMRParser.Print)
                self.state = 1096
                self.match(XplorMRParser.Threshold)
                self.state = 1097
                self.number_s()
                self.state = 1100
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [139]:
                    self.state = 1098
                    self.match(XplorMRParser.All)
                    pass
                elif token in [9]:
                    self.state = 1099
                    self.classification()
                    pass
                else:
                    raise NoViableAltException(self)

                pass
            elif token in [19]:
                self.enterOuterAlt(localctx, 8)
                self.state = 1102
                self.match(XplorMRParser.Reset)
                pass
            elif token in [63]:
                self.enterOuterAlt(localctx, 9)
                self.state = 1103
                self.match(XplorMRParser.Size)
                self.state = 1104
                self.number_s()
                self.state = 1105
                self.match(XplorMRParser.Integer)
                pass
            elif token in [64]:
                self.enterOuterAlt(localctx, 10)
                self.state = 1107
                self.match(XplorMRParser.Zero)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Xadc_assignContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Assign(self):
            return self.getToken(XplorMRParser.Assign, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.SelectionContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_xadc_assign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterXadc_assign" ):
                listener.enterXadc_assign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitXadc_assign" ):
                listener.exitXadc_assign(self)




    def xadc_assign(self):

        localctx = XplorMRParser.Xadc_assignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 96, self.RULE_xadc_assign)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1110
            self.match(XplorMRParser.Assign)
            self.state = 1111
            self.selection()
            self.state = 1112
            self.selection()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Coupling_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def coup_assign(self):
            return self.getTypedRuleContext(XplorMRParser.Coup_assignContext,0)


        def coup_assign_loop(self):
            return self.getTypedRuleContext(XplorMRParser.Coup_assign_loopContext,0)


        def classification(self):
            return self.getTypedRuleContext(XplorMRParser.ClassificationContext,0)


        def Coefficients(self):
            return self.getToken(XplorMRParser.Coefficients, 0)

        def number_s(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Number_sContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Number_sContext,i)


        def Cv(self):
            return self.getToken(XplorMRParser.Cv, 0)

        def Integer(self):
            return self.getToken(XplorMRParser.Integer, 0)

        def Equ_op(self):
            return self.getToken(XplorMRParser.Equ_op, 0)

        def Degeneracy(self):
            return self.getToken(XplorMRParser.Degeneracy, 0)

        def ForceConstant(self):
            return self.getToken(XplorMRParser.ForceConstant, 0)

        def Nrestraints(self):
            return self.getToken(XplorMRParser.Nrestraints, 0)

        def Partition(self):
            return self.getToken(XplorMRParser.Partition, 0)

        def Potential(self):
            return self.getToken(XplorMRParser.Potential, 0)

        def Potential_types(self):
            return self.getToken(XplorMRParser.Potential_types, 0)

        def Equ_op_PT(self):
            return self.getToken(XplorMRParser.Equ_op_PT, 0)

        def Print(self):
            return self.getToken(XplorMRParser.Print, 0)

        def Threshold(self):
            return self.getToken(XplorMRParser.Threshold, 0)

        def All(self):
            return self.getToken(XplorMRParser.All, 0)

        def Reset(self):
            return self.getToken(XplorMRParser.Reset, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_coupling_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCoupling_statement" ):
                listener.enterCoupling_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCoupling_statement" ):
                listener.exitCoupling_statement(self)




    def coupling_statement(self):

        localctx = XplorMRParser.Coupling_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 98, self.RULE_coupling_statement)
        self._la = 0 # Token type
        try:
            self.state = 1158
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [4]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1114
                self.coup_assign()
                pass
            elif token in [186]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1115
                self.coup_assign_loop()
                pass
            elif token in [9]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1116
                self.classification()
                pass
            elif token in [42]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1117
                self.match(XplorMRParser.Coefficients)
                self.state = 1118
                self.number_s()
                self.state = 1119
                self.number_s()
                self.state = 1120
                self.number_s()
                self.state = 1121
                self.number_s()
                pass
            elif token in [49]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1123
                self.match(XplorMRParser.Cv)
                self.state = 1125
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==207:
                    self.state = 1124
                    self.match(XplorMRParser.Equ_op)


                self.state = 1127
                self.match(XplorMRParser.Integer)
                pass
            elif token in [66]:
                self.enterOuterAlt(localctx, 6)
                self.state = 1128
                self.match(XplorMRParser.Degeneracy)
                self.state = 1129
                self.match(XplorMRParser.Integer)
                pass
            elif token in [43]:
                self.enterOuterAlt(localctx, 7)
                self.state = 1130
                self.match(XplorMRParser.ForceConstant)
                self.state = 1131
                self.number_s()
                self.state = 1133
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 195)) & ~0x3f) == 0 and ((1 << (_la - 195)) & 262149) != 0):
                    self.state = 1132
                    self.number_s()


                pass
            elif token in [14]:
                self.enterOuterAlt(localctx, 8)
                self.state = 1135
                self.match(XplorMRParser.Nrestraints)
                self.state = 1137
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==207:
                    self.state = 1136
                    self.match(XplorMRParser.Equ_op)


                self.state = 1139
                self.match(XplorMRParser.Integer)
                pass
            elif token in [50]:
                self.enterOuterAlt(localctx, 9)
                self.state = 1140
                self.match(XplorMRParser.Partition)
                self.state = 1142
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==207:
                    self.state = 1141
                    self.match(XplorMRParser.Equ_op)


                self.state = 1144
                self.match(XplorMRParser.Integer)
                pass
            elif token in [15]:
                self.enterOuterAlt(localctx, 10)
                self.state = 1145
                self.match(XplorMRParser.Potential)
                self.state = 1147
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==226:
                    self.state = 1146
                    self.match(XplorMRParser.Equ_op_PT)


                self.state = 1149
                self.match(XplorMRParser.Potential_types)
                pass
            elif token in [17]:
                self.enterOuterAlt(localctx, 11)
                self.state = 1150
                self.match(XplorMRParser.Print)
                self.state = 1151
                self.match(XplorMRParser.Threshold)
                self.state = 1152
                self.number_s()
                self.state = 1155
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [139]:
                    self.state = 1153
                    self.match(XplorMRParser.All)
                    pass
                elif token in [9]:
                    self.state = 1154
                    self.classification()
                    pass
                else:
                    raise NoViableAltException(self)

                pass
            elif token in [19]:
                self.enterOuterAlt(localctx, 12)
                self.state = 1157
                self.match(XplorMRParser.Reset)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Coup_assignContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Assign(self):
            return self.getToken(XplorMRParser.Assign, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.SelectionContext,i)


        def number(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.NumberContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.NumberContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_coup_assign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCoup_assign" ):
                listener.enterCoup_assign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCoup_assign" ):
                listener.exitCoup_assign(self)




    def coup_assign(self):

        localctx = XplorMRParser.Coup_assignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 100, self.RULE_coup_assign)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1160
            self.match(XplorMRParser.Assign)
            self.state = 1161
            self.selection()
            self.state = 1162
            self.selection()
            self.state = 1163
            self.selection()
            self.state = 1164
            self.selection()
            self.state = 1170
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==204:
                self.state = 1165
                self.selection()
                self.state = 1166
                self.selection()
                self.state = 1167
                self.selection()
                self.state = 1168
                self.selection()


            self.state = 1172
            self.number()
            self.state = 1173
            self.number()
            self.state = 1177
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 195)) & ~0x3f) == 0 and ((1 << (_la - 195)) & 262149) != 0):
                self.state = 1174
                self.number()
                self.state = 1175
                self.number()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Carbon_shift_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def carbon_shift_assign(self):
            return self.getTypedRuleContext(XplorMRParser.Carbon_shift_assignContext,0)


        def classification(self):
            return self.getTypedRuleContext(XplorMRParser.ClassificationContext,0)


        def Expectation(self):
            return self.getToken(XplorMRParser.Expectation, 0)

        def Integer(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Integer)
            else:
                return self.getToken(XplorMRParser.Integer, i)

        def number_s(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Number_sContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Number_sContext,i)


        def ForceConstant(self):
            return self.getToken(XplorMRParser.ForceConstant, 0)

        def Equ_op(self):
            return self.getToken(XplorMRParser.Equ_op, 0)

        def Nrestraints(self):
            return self.getToken(XplorMRParser.Nrestraints, 0)

        def PhiStep(self):
            return self.getToken(XplorMRParser.PhiStep, 0)

        def PsiStep(self):
            return self.getToken(XplorMRParser.PsiStep, 0)

        def Potential(self):
            return self.getToken(XplorMRParser.Potential, 0)

        def Potential_types(self):
            return self.getToken(XplorMRParser.Potential_types, 0)

        def Equ_op_PT(self):
            return self.getToken(XplorMRParser.Equ_op_PT, 0)

        def Print(self):
            return self.getToken(XplorMRParser.Print, 0)

        def Threshold(self):
            return self.getToken(XplorMRParser.Threshold, 0)

        def carbon_shift_rcoil(self):
            return self.getTypedRuleContext(XplorMRParser.Carbon_shift_rcoilContext,0)


        def Reset(self):
            return self.getToken(XplorMRParser.Reset, 0)

        def Zero(self):
            return self.getToken(XplorMRParser.Zero, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_carbon_shift_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCarbon_shift_statement" ):
                listener.enterCarbon_shift_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCarbon_shift_statement" ):
                listener.exitCarbon_shift_statement(self)




    def carbon_shift_statement(self):

        localctx = XplorMRParser.Carbon_shift_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 102, self.RULE_carbon_shift_statement)
        self._la = 0 # Token type
        try:
            self.state = 1213
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [4]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1179
                self.carbon_shift_assign()
                pass
            elif token in [9]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1180
                self.classification()
                pass
            elif token in [62]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1181
                self.match(XplorMRParser.Expectation)
                self.state = 1182
                self.match(XplorMRParser.Integer)
                self.state = 1183
                self.match(XplorMRParser.Integer)
                self.state = 1184
                self.number_s()
                self.state = 1185
                self.number_s()
                self.state = 1186
                self.number_s()
                pass
            elif token in [43]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1188
                self.match(XplorMRParser.ForceConstant)
                self.state = 1190
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==207:
                    self.state = 1189
                    self.match(XplorMRParser.Equ_op)


                self.state = 1192
                self.number_s()
                pass
            elif token in [14]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1193
                self.match(XplorMRParser.Nrestraints)
                self.state = 1195
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==207:
                    self.state = 1194
                    self.match(XplorMRParser.Equ_op)


                self.state = 1197
                self.match(XplorMRParser.Integer)
                pass
            elif token in [68]:
                self.enterOuterAlt(localctx, 6)
                self.state = 1198
                self.match(XplorMRParser.PhiStep)
                self.state = 1199
                self.number_s()
                pass
            elif token in [69]:
                self.enterOuterAlt(localctx, 7)
                self.state = 1200
                self.match(XplorMRParser.PsiStep)
                self.state = 1201
                self.number_s()
                pass
            elif token in [15]:
                self.enterOuterAlt(localctx, 8)
                self.state = 1202
                self.match(XplorMRParser.Potential)
                self.state = 1204
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==226:
                    self.state = 1203
                    self.match(XplorMRParser.Equ_op_PT)


                self.state = 1206
                self.match(XplorMRParser.Potential_types)
                pass
            elif token in [17]:
                self.enterOuterAlt(localctx, 9)
                self.state = 1207
                self.match(XplorMRParser.Print)
                self.state = 1208
                self.match(XplorMRParser.Threshold)
                self.state = 1209
                self.number_s()
                pass
            elif token in [70]:
                self.enterOuterAlt(localctx, 10)
                self.state = 1210
                self.carbon_shift_rcoil()
                pass
            elif token in [19]:
                self.enterOuterAlt(localctx, 11)
                self.state = 1211
                self.match(XplorMRParser.Reset)
                pass
            elif token in [64]:
                self.enterOuterAlt(localctx, 12)
                self.state = 1212
                self.match(XplorMRParser.Zero)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Carbon_shift_assignContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Assign(self):
            return self.getToken(XplorMRParser.Assign, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.SelectionContext,i)


        def number(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.NumberContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.NumberContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_carbon_shift_assign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCarbon_shift_assign" ):
                listener.enterCarbon_shift_assign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCarbon_shift_assign" ):
                listener.exitCarbon_shift_assign(self)




    def carbon_shift_assign(self):

        localctx = XplorMRParser.Carbon_shift_assignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 104, self.RULE_carbon_shift_assign)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1215
            self.match(XplorMRParser.Assign)
            self.state = 1216
            self.selection()
            self.state = 1217
            self.selection()
            self.state = 1218
            self.selection()
            self.state = 1219
            self.selection()
            self.state = 1220
            self.selection()
            self.state = 1221
            self.number()
            self.state = 1222
            self.number()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Carbon_shift_rcoilContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Rcoil(self):
            return self.getToken(XplorMRParser.Rcoil, 0)

        def selection(self):
            return self.getTypedRuleContext(XplorMRParser.SelectionContext,0)


        def number(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.NumberContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.NumberContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_carbon_shift_rcoil

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCarbon_shift_rcoil" ):
                listener.enterCarbon_shift_rcoil(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCarbon_shift_rcoil" ):
                listener.exitCarbon_shift_rcoil(self)




    def carbon_shift_rcoil(self):

        localctx = XplorMRParser.Carbon_shift_rcoilContext(self, self._ctx, self.state)
        self.enterRule(localctx, 106, self.RULE_carbon_shift_rcoil)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1224
            self.match(XplorMRParser.Rcoil)
            self.state = 1225
            self.selection()
            self.state = 1226
            self.number()
            self.state = 1227
            self.number()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Proton_shift_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def observed(self):
            return self.getTypedRuleContext(XplorMRParser.ObservedContext,0)


        def proton_shift_rcoil(self):
            return self.getTypedRuleContext(XplorMRParser.Proton_shift_rcoilContext,0)


        def proton_shift_anisotropy(self):
            return self.getTypedRuleContext(XplorMRParser.Proton_shift_anisotropyContext,0)


        def proton_shift_amides(self):
            return self.getTypedRuleContext(XplorMRParser.Proton_shift_amidesContext,0)


        def proton_shift_carbons(self):
            return self.getTypedRuleContext(XplorMRParser.Proton_shift_carbonsContext,0)


        def proton_shift_nitrogens(self):
            return self.getTypedRuleContext(XplorMRParser.Proton_shift_nitrogensContext,0)


        def proton_shift_oxygens(self):
            return self.getTypedRuleContext(XplorMRParser.Proton_shift_oxygensContext,0)


        def proton_shift_ring_atoms(self):
            return self.getTypedRuleContext(XplorMRParser.Proton_shift_ring_atomsContext,0)


        def proton_shift_alphas_and_amides(self):
            return self.getTypedRuleContext(XplorMRParser.Proton_shift_alphas_and_amidesContext,0)


        def classification(self):
            return self.getTypedRuleContext(XplorMRParser.ClassificationContext,0)


        def Error(self):
            return self.getToken(XplorMRParser.Error, 0)

        def number_s(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Number_sContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Number_sContext,i)


        def Degeneracy(self):
            return self.getToken(XplorMRParser.Degeneracy, 0)

        def Integer(self):
            return self.getToken(XplorMRParser.Integer, 0)

        def ForceConstant(self):
            return self.getToken(XplorMRParser.ForceConstant, 0)

        def Potential(self):
            return self.getToken(XplorMRParser.Potential, 0)

        def Potential_types(self):
            return self.getToken(XplorMRParser.Potential_types, 0)

        def Equ_op_PT(self):
            return self.getToken(XplorMRParser.Equ_op_PT, 0)

        def Print(self):
            return self.getToken(XplorMRParser.Print, 0)

        def Threshold(self):
            return self.getToken(XplorMRParser.Threshold, 0)

        def Simple_name(self):
            return self.getToken(XplorMRParser.Simple_name, 0)

        def All(self):
            return self.getToken(XplorMRParser.All, 0)

        def Reset(self):
            return self.getToken(XplorMRParser.Reset, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_proton_shift_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProton_shift_statement" ):
                listener.enterProton_shift_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProton_shift_statement" ):
                listener.exitProton_shift_statement(self)




    def proton_shift_statement(self):

        localctx = XplorMRParser.Proton_shift_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 108, self.RULE_proton_shift_statement)
        self._la = 0 # Token type
        try:
            self.state = 1263
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [72]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1229
                self.observed()
                pass
            elif token in [70]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1230
                self.proton_shift_rcoil()
                pass
            elif token in [52]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1231
                self.proton_shift_anisotropy()
                pass
            elif token in [73]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1232
                self.proton_shift_amides()
                pass
            elif token in [67]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1233
                self.proton_shift_carbons()
                pass
            elif token in [74]:
                self.enterOuterAlt(localctx, 6)
                self.state = 1234
                self.proton_shift_nitrogens()
                pass
            elif token in [75]:
                self.enterOuterAlt(localctx, 7)
                self.state = 1235
                self.proton_shift_oxygens()
                pass
            elif token in [76]:
                self.enterOuterAlt(localctx, 8)
                self.state = 1236
                self.proton_shift_ring_atoms()
                pass
            elif token in [77]:
                self.enterOuterAlt(localctx, 9)
                self.state = 1237
                self.proton_shift_alphas_and_amides()
                pass
            elif token in [9]:
                self.enterOuterAlt(localctx, 10)
                self.state = 1238
                self.classification()
                pass
            elif token in [78]:
                self.enterOuterAlt(localctx, 11)
                self.state = 1239
                self.match(XplorMRParser.Error)
                self.state = 1240
                self.number_s()
                pass
            elif token in [66]:
                self.enterOuterAlt(localctx, 12)
                self.state = 1241
                self.match(XplorMRParser.Degeneracy)
                self.state = 1242
                self.match(XplorMRParser.Integer)
                pass
            elif token in [43]:
                self.enterOuterAlt(localctx, 13)
                self.state = 1243
                self.match(XplorMRParser.ForceConstant)
                self.state = 1244
                self.number_s()
                self.state = 1246
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 195)) & ~0x3f) == 0 and ((1 << (_la - 195)) & 262149) != 0):
                    self.state = 1245
                    self.number_s()


                pass
            elif token in [15]:
                self.enterOuterAlt(localctx, 14)
                self.state = 1248
                self.match(XplorMRParser.Potential)
                self.state = 1250
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==226:
                    self.state = 1249
                    self.match(XplorMRParser.Equ_op_PT)


                self.state = 1252
                self.match(XplorMRParser.Potential_types)
                pass
            elif token in [17]:
                self.enterOuterAlt(localctx, 15)
                self.state = 1253
                self.match(XplorMRParser.Print)
                self.state = 1254
                self.match(XplorMRParser.Threshold)
                self.state = 1255
                self.number_s()
                self.state = 1258
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [139]:
                    self.state = 1256
                    self.match(XplorMRParser.All)
                    pass
                elif token in [9]:
                    self.state = 1257
                    self.classification()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 1260
                self.match(XplorMRParser.Simple_name)
                pass
            elif token in [19]:
                self.enterOuterAlt(localctx, 16)
                self.state = 1262
                self.match(XplorMRParser.Reset)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ObservedContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Observed(self):
            return self.getToken(XplorMRParser.Observed, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.SelectionContext,i)


        def number(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.NumberContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.NumberContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_observed

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterObserved" ):
                listener.enterObserved(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitObserved" ):
                listener.exitObserved(self)




    def observed(self):

        localctx = XplorMRParser.ObservedContext(self, self._ctx, self.state)
        self.enterRule(localctx, 110, self.RULE_observed)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1265
            self.match(XplorMRParser.Observed)
            self.state = 1266
            self.selection()
            self.state = 1268
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==204:
                self.state = 1267
                self.selection()


            self.state = 1270
            self.number()
            self.state = 1272
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 195)) & ~0x3f) == 0 and ((1 << (_la - 195)) & 262149) != 0):
                self.state = 1271
                self.number()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Proton_shift_rcoilContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Rcoil(self):
            return self.getToken(XplorMRParser.Rcoil, 0)

        def selection(self):
            return self.getTypedRuleContext(XplorMRParser.SelectionContext,0)


        def number(self):
            return self.getTypedRuleContext(XplorMRParser.NumberContext,0)


        def getRuleIndex(self):
            return XplorMRParser.RULE_proton_shift_rcoil

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProton_shift_rcoil" ):
                listener.enterProton_shift_rcoil(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProton_shift_rcoil" ):
                listener.exitProton_shift_rcoil(self)




    def proton_shift_rcoil(self):

        localctx = XplorMRParser.Proton_shift_rcoilContext(self, self._ctx, self.state)
        self.enterRule(localctx, 112, self.RULE_proton_shift_rcoil)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1274
            self.match(XplorMRParser.Rcoil)
            self.state = 1275
            self.selection()
            self.state = 1276
            self.number()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Proton_shift_anisotropyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Anisotropy(self):
            return self.getToken(XplorMRParser.Anisotropy, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.SelectionContext,i)


        def Simple_name(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Simple_name)
            else:
                return self.getToken(XplorMRParser.Simple_name, i)

        def Logical(self):
            return self.getToken(XplorMRParser.Logical, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_proton_shift_anisotropy

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProton_shift_anisotropy" ):
                listener.enterProton_shift_anisotropy(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProton_shift_anisotropy" ):
                listener.exitProton_shift_anisotropy(self)




    def proton_shift_anisotropy(self):

        localctx = XplorMRParser.Proton_shift_anisotropyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 114, self.RULE_proton_shift_anisotropy)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1278
            self.match(XplorMRParser.Anisotropy)
            self.state = 1279
            self.selection()
            self.state = 1280
            self.selection()
            self.state = 1281
            self.selection()
            self.state = 1282
            self.match(XplorMRParser.Simple_name)
            self.state = 1284
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==196:
                self.state = 1283
                self.match(XplorMRParser.Logical)


            self.state = 1286
            self.match(XplorMRParser.Simple_name)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Proton_shift_amidesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Amides(self):
            return self.getToken(XplorMRParser.Amides, 0)

        def selection(self):
            return self.getTypedRuleContext(XplorMRParser.SelectionContext,0)


        def getRuleIndex(self):
            return XplorMRParser.RULE_proton_shift_amides

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProton_shift_amides" ):
                listener.enterProton_shift_amides(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProton_shift_amides" ):
                listener.exitProton_shift_amides(self)




    def proton_shift_amides(self):

        localctx = XplorMRParser.Proton_shift_amidesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 116, self.RULE_proton_shift_amides)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1288
            self.match(XplorMRParser.Amides)
            self.state = 1289
            self.selection()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Proton_shift_carbonsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Carbon(self):
            return self.getToken(XplorMRParser.Carbon, 0)

        def selection(self):
            return self.getTypedRuleContext(XplorMRParser.SelectionContext,0)


        def getRuleIndex(self):
            return XplorMRParser.RULE_proton_shift_carbons

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProton_shift_carbons" ):
                listener.enterProton_shift_carbons(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProton_shift_carbons" ):
                listener.exitProton_shift_carbons(self)




    def proton_shift_carbons(self):

        localctx = XplorMRParser.Proton_shift_carbonsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 118, self.RULE_proton_shift_carbons)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1291
            self.match(XplorMRParser.Carbon)
            self.state = 1292
            self.selection()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Proton_shift_nitrogensContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Nitrogens(self):
            return self.getToken(XplorMRParser.Nitrogens, 0)

        def selection(self):
            return self.getTypedRuleContext(XplorMRParser.SelectionContext,0)


        def getRuleIndex(self):
            return XplorMRParser.RULE_proton_shift_nitrogens

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProton_shift_nitrogens" ):
                listener.enterProton_shift_nitrogens(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProton_shift_nitrogens" ):
                listener.exitProton_shift_nitrogens(self)




    def proton_shift_nitrogens(self):

        localctx = XplorMRParser.Proton_shift_nitrogensContext(self, self._ctx, self.state)
        self.enterRule(localctx, 120, self.RULE_proton_shift_nitrogens)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1294
            self.match(XplorMRParser.Nitrogens)
            self.state = 1295
            self.selection()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Proton_shift_oxygensContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Oxygens(self):
            return self.getToken(XplorMRParser.Oxygens, 0)

        def selection(self):
            return self.getTypedRuleContext(XplorMRParser.SelectionContext,0)


        def getRuleIndex(self):
            return XplorMRParser.RULE_proton_shift_oxygens

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProton_shift_oxygens" ):
                listener.enterProton_shift_oxygens(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProton_shift_oxygens" ):
                listener.exitProton_shift_oxygens(self)




    def proton_shift_oxygens(self):

        localctx = XplorMRParser.Proton_shift_oxygensContext(self, self._ctx, self.state)
        self.enterRule(localctx, 122, self.RULE_proton_shift_oxygens)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1297
            self.match(XplorMRParser.Oxygens)
            self.state = 1298
            self.selection()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Proton_shift_ring_atomsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RingAtoms(self):
            return self.getToken(XplorMRParser.RingAtoms, 0)

        def Simple_name(self):
            return self.getToken(XplorMRParser.Simple_name, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.SelectionContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_proton_shift_ring_atoms

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProton_shift_ring_atoms" ):
                listener.enterProton_shift_ring_atoms(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProton_shift_ring_atoms" ):
                listener.exitProton_shift_ring_atoms(self)




    def proton_shift_ring_atoms(self):

        localctx = XplorMRParser.Proton_shift_ring_atomsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 124, self.RULE_proton_shift_ring_atoms)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1300
            self.match(XplorMRParser.RingAtoms)
            self.state = 1301
            self.match(XplorMRParser.Simple_name)
            self.state = 1302
            self.selection()
            self.state = 1303
            self.selection()
            self.state = 1304
            self.selection()
            self.state = 1305
            self.selection()
            self.state = 1306
            self.selection()
            self.state = 1308
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==204:
                self.state = 1307
                self.selection()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Proton_shift_alphas_and_amidesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AlphasAndAmides(self):
            return self.getToken(XplorMRParser.AlphasAndAmides, 0)

        def selection(self):
            return self.getTypedRuleContext(XplorMRParser.SelectionContext,0)


        def getRuleIndex(self):
            return XplorMRParser.RULE_proton_shift_alphas_and_amides

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProton_shift_alphas_and_amides" ):
                listener.enterProton_shift_alphas_and_amides(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProton_shift_alphas_and_amides" ):
                listener.exitProton_shift_alphas_and_amides(self)




    def proton_shift_alphas_and_amides(self):

        localctx = XplorMRParser.Proton_shift_alphas_and_amidesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 126, self.RULE_proton_shift_alphas_and_amides)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1310
            self.match(XplorMRParser.AlphasAndAmides)
            self.state = 1311
            self.selection()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Ramachandran_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def rama_assign(self):
            return self.getTypedRuleContext(XplorMRParser.Rama_assignContext,0)


        def classification(self):
            return self.getTypedRuleContext(XplorMRParser.ClassificationContext,0)


        def Cutoff(self):
            return self.getToken(XplorMRParser.Cutoff, 0)

        def number_s(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Number_sContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Number_sContext,i)


        def ForceConstant(self):
            return self.getToken(XplorMRParser.ForceConstant, 0)

        def Equ_op(self):
            return self.getToken(XplorMRParser.Equ_op, 0)

        def Gaussian(self):
            return self.getToken(XplorMRParser.Gaussian, 0)

        def Nrestraints(self):
            return self.getToken(XplorMRParser.Nrestraints, 0)

        def Integer(self):
            return self.getToken(XplorMRParser.Integer, 0)

        def Phase(self):
            return self.getToken(XplorMRParser.Phase, 0)

        def Print(self):
            return self.getToken(XplorMRParser.Print, 0)

        def Threshold(self):
            return self.getToken(XplorMRParser.Threshold, 0)

        def All(self):
            return self.getToken(XplorMRParser.All, 0)

        def Quartic(self):
            return self.getToken(XplorMRParser.Quartic, 0)

        def Reset(self):
            return self.getToken(XplorMRParser.Reset, 0)

        def Scale(self):
            return self.getToken(XplorMRParser.Scale, 0)

        def Shape(self):
            return self.getToken(XplorMRParser.Shape, 0)

        def Gauss_or_Quart(self):
            return self.getToken(XplorMRParser.Gauss_or_Quart, 0)

        def Size(self):
            return self.getToken(XplorMRParser.Size, 0)

        def Dimensions(self):
            return self.getToken(XplorMRParser.Dimensions, 0)

        def Sort(self):
            return self.getToken(XplorMRParser.Sort, 0)

        def Zero(self):
            return self.getToken(XplorMRParser.Zero, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_ramachandran_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRamachandran_statement" ):
                listener.enterRamachandran_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRamachandran_statement" ):
                listener.exitRamachandran_statement(self)




    def ramachandran_statement(self):

        localctx = XplorMRParser.Ramachandran_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 128, self.RULE_ramachandran_statement)
        self._la = 0 # Token type
        try:
            self.state = 1422
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [4]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1313
                self.rama_assign()
                pass
            elif token in [9]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1314
                self.classification()
                pass
            elif token in [27]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1315
                self.match(XplorMRParser.Cutoff)
                self.state = 1316
                self.number_s()
                pass
            elif token in [43]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1317
                self.match(XplorMRParser.ForceConstant)
                self.state = 1319
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==207:
                    self.state = 1318
                    self.match(XplorMRParser.Equ_op)


                self.state = 1321
                self.number_s()
                pass
            elif token in [80]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1322
                self.match(XplorMRParser.Gaussian)
                self.state = 1323
                self.number_s()
                self.state = 1324
                self.number_s()
                self.state = 1325
                self.number_s()
                self.state = 1330
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,130,self._ctx)
                if la_ == 1:
                    self.state = 1326
                    self.number_s()
                    self.state = 1327
                    self.number_s()
                    self.state = 1328
                    self.number_s()


                self.state = 1336
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,131,self._ctx)
                if la_ == 1:
                    self.state = 1332
                    self.number_s()
                    self.state = 1333
                    self.number_s()
                    self.state = 1334
                    self.number_s()


                self.state = 1342
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 195)) & ~0x3f) == 0 and ((1 << (_la - 195)) & 262149) != 0):
                    self.state = 1338
                    self.number_s()
                    self.state = 1339
                    self.number_s()
                    self.state = 1340
                    self.number_s()


                pass
            elif token in [14]:
                self.enterOuterAlt(localctx, 6)
                self.state = 1344
                self.match(XplorMRParser.Nrestraints)
                self.state = 1346
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==207:
                    self.state = 1345
                    self.match(XplorMRParser.Equ_op)


                self.state = 1348
                self.match(XplorMRParser.Integer)
                pass
            elif token in [81]:
                self.enterOuterAlt(localctx, 7)
                self.state = 1349
                self.match(XplorMRParser.Phase)
                self.state = 1350
                self.number_s()
                self.state = 1351
                self.number_s()
                self.state = 1352
                self.number_s()
                self.state = 1357
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,134,self._ctx)
                if la_ == 1:
                    self.state = 1353
                    self.number_s()
                    self.state = 1354
                    self.number_s()
                    self.state = 1355
                    self.number_s()


                self.state = 1363
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,135,self._ctx)
                if la_ == 1:
                    self.state = 1359
                    self.number_s()
                    self.state = 1360
                    self.number_s()
                    self.state = 1361
                    self.number_s()


                self.state = 1369
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 195)) & ~0x3f) == 0 and ((1 << (_la - 195)) & 262149) != 0):
                    self.state = 1365
                    self.number_s()
                    self.state = 1366
                    self.number_s()
                    self.state = 1367
                    self.number_s()


                pass
            elif token in [17]:
                self.enterOuterAlt(localctx, 8)
                self.state = 1371
                self.match(XplorMRParser.Print)
                self.state = 1372
                self.match(XplorMRParser.Threshold)
                self.state = 1373
                self.number_s()
                self.state = 1376
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [139]:
                    self.state = 1374
                    self.match(XplorMRParser.All)
                    pass
                elif token in [9]:
                    self.state = 1375
                    self.classification()
                    pass
                else:
                    raise NoViableAltException(self)

                pass
            elif token in [82]:
                self.enterOuterAlt(localctx, 9)
                self.state = 1378
                self.match(XplorMRParser.Quartic)
                self.state = 1379
                self.number_s()
                self.state = 1380
                self.number_s()
                self.state = 1381
                self.number_s()
                self.state = 1386
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,138,self._ctx)
                if la_ == 1:
                    self.state = 1382
                    self.number_s()
                    self.state = 1383
                    self.number_s()
                    self.state = 1384
                    self.number_s()


                self.state = 1392
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,139,self._ctx)
                if la_ == 1:
                    self.state = 1388
                    self.number_s()
                    self.state = 1389
                    self.number_s()
                    self.state = 1390
                    self.number_s()


                self.state = 1398
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 195)) & ~0x3f) == 0 and ((1 << (_la - 195)) & 262149) != 0):
                    self.state = 1394
                    self.number_s()
                    self.state = 1395
                    self.number_s()
                    self.state = 1396
                    self.number_s()


                pass
            elif token in [19]:
                self.enterOuterAlt(localctx, 10)
                self.state = 1400
                self.match(XplorMRParser.Reset)
                pass
            elif token in [21]:
                self.enterOuterAlt(localctx, 11)
                self.state = 1401
                self.match(XplorMRParser.Scale)
                self.state = 1403
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==207:
                    self.state = 1402
                    self.match(XplorMRParser.Equ_op)


                self.state = 1405
                self.number_s()
                pass
            elif token in [83]:
                self.enterOuterAlt(localctx, 12)
                self.state = 1406
                self.match(XplorMRParser.Shape)
                self.state = 1407
                self.match(XplorMRParser.Gauss_or_Quart)
                pass
            elif token in [63]:
                self.enterOuterAlt(localctx, 13)
                self.state = 1408
                self.match(XplorMRParser.Size)
                self.state = 1409
                self.match(XplorMRParser.Dimensions)
                self.state = 1410
                self.number_s()
                self.state = 1412
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,142,self._ctx)
                if la_ == 1:
                    self.state = 1411
                    self.number_s()


                self.state = 1415
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,143,self._ctx)
                if la_ == 1:
                    self.state = 1414
                    self.number_s()


                self.state = 1418
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 195)) & ~0x3f) == 0 and ((1 << (_la - 195)) & 262149) != 0):
                    self.state = 1417
                    self.number_s()


                pass
            elif token in [84]:
                self.enterOuterAlt(localctx, 14)
                self.state = 1420
                self.match(XplorMRParser.Sort)
                pass
            elif token in [64]:
                self.enterOuterAlt(localctx, 15)
                self.state = 1421
                self.match(XplorMRParser.Zero)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Rama_assignContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Assign(self):
            return self.getToken(XplorMRParser.Assign, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.SelectionContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_rama_assign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRama_assign" ):
                listener.enterRama_assign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRama_assign" ):
                listener.exitRama_assign(self)




    def rama_assign(self):

        localctx = XplorMRParser.Rama_assignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 130, self.RULE_rama_assign)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1424
            self.match(XplorMRParser.Assign)
            self.state = 1425
            self.selection()
            self.state = 1426
            self.selection()
            self.state = 1427
            self.selection()
            self.state = 1428
            self.selection()
            self.state = 1434
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,146,self._ctx)
            if la_ == 1:
                self.state = 1429
                self.selection()
                self.state = 1430
                self.selection()
                self.state = 1431
                self.selection()
                self.state = 1432
                self.selection()


            self.state = 1441
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,147,self._ctx)
            if la_ == 1:
                self.state = 1436
                self.selection()
                self.state = 1437
                self.selection()
                self.state = 1438
                self.selection()
                self.state = 1439
                self.selection()


            self.state = 1448
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==204:
                self.state = 1443
                self.selection()
                self.state = 1444
                self.selection()
                self.state = 1445
                self.selection()
                self.state = 1446
                self.selection()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Collapse_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def coll_assign(self):
            return self.getTypedRuleContext(XplorMRParser.Coll_assignContext,0)


        def coll_assign_loop(self):
            return self.getTypedRuleContext(XplorMRParser.Coll_assign_loopContext,0)


        def Scale(self):
            return self.getToken(XplorMRParser.Scale, 0)

        def number_s(self):
            return self.getTypedRuleContext(XplorMRParser.Number_sContext,0)


        def Equ_op(self):
            return self.getToken(XplorMRParser.Equ_op, 0)

        def Print(self):
            return self.getToken(XplorMRParser.Print, 0)

        def Reset(self):
            return self.getToken(XplorMRParser.Reset, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_collapse_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCollapse_statement" ):
                listener.enterCollapse_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCollapse_statement" ):
                listener.exitCollapse_statement(self)




    def collapse_statement(self):

        localctx = XplorMRParser.Collapse_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 132, self.RULE_collapse_statement)
        self._la = 0 # Token type
        try:
            self.state = 1459
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [4]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1450
                self.coll_assign()
                pass
            elif token in [186]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1451
                self.coll_assign_loop()
                pass
            elif token in [21]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1452
                self.match(XplorMRParser.Scale)
                self.state = 1454
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==207:
                    self.state = 1453
                    self.match(XplorMRParser.Equ_op)


                self.state = 1456
                self.number_s()
                pass
            elif token in [17]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1457
                self.match(XplorMRParser.Print)
                pass
            elif token in [19]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1458
                self.match(XplorMRParser.Reset)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Coll_assignContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Assign(self):
            return self.getToken(XplorMRParser.Assign, 0)

        def selection(self):
            return self.getTypedRuleContext(XplorMRParser.SelectionContext,0)


        def number(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.NumberContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.NumberContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_coll_assign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColl_assign" ):
                listener.enterColl_assign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColl_assign" ):
                listener.exitColl_assign(self)




    def coll_assign(self):

        localctx = XplorMRParser.Coll_assignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 134, self.RULE_coll_assign)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1461
            self.match(XplorMRParser.Assign)
            self.state = 1462
            self.selection()
            self.state = 1463
            self.number()
            self.state = 1464
            self.number()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Diffusion_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def dani_assign(self):
            return self.getTypedRuleContext(XplorMRParser.Dani_assignContext,0)


        def classification(self):
            return self.getTypedRuleContext(XplorMRParser.ClassificationContext,0)


        def Coefficients(self):
            return self.getToken(XplorMRParser.Coefficients, 0)

        def number_s(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Number_sContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Number_sContext,i)


        def ForceConstant(self):
            return self.getToken(XplorMRParser.ForceConstant, 0)

        def Equ_op(self):
            return self.getToken(XplorMRParser.Equ_op, 0)

        def Nrestraints(self):
            return self.getToken(XplorMRParser.Nrestraints, 0)

        def Integer(self):
            return self.getToken(XplorMRParser.Integer, 0)

        def Potential(self):
            return self.getToken(XplorMRParser.Potential, 0)

        def Potential_types(self):
            return self.getToken(XplorMRParser.Potential_types, 0)

        def Equ_op_PT(self):
            return self.getToken(XplorMRParser.Equ_op_PT, 0)

        def Print(self):
            return self.getToken(XplorMRParser.Print, 0)

        def Threshold(self):
            return self.getToken(XplorMRParser.Threshold, 0)

        def Reset(self):
            return self.getToken(XplorMRParser.Reset, 0)

        def Type(self):
            return self.getToken(XplorMRParser.Type, 0)

        def Rdc_or_Diff_anis_types(self):
            return self.getToken(XplorMRParser.Rdc_or_Diff_anis_types, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_diffusion_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDiffusion_statement" ):
                listener.enterDiffusion_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDiffusion_statement" ):
                listener.exitDiffusion_statement(self)




    def diffusion_statement(self):

        localctx = XplorMRParser.Diffusion_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 136, self.RULE_diffusion_statement)
        self._la = 0 # Token type
        try:
            self.state = 1496
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [4]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1466
                self.dani_assign()
                pass
            elif token in [9]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1467
                self.classification()
                pass
            elif token in [42]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1468
                self.match(XplorMRParser.Coefficients)
                self.state = 1469
                self.number_s()
                self.state = 1470
                self.number_s()
                self.state = 1471
                self.number_s()
                self.state = 1472
                self.number_s()
                self.state = 1473
                self.number_s()
                pass
            elif token in [43]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1475
                self.match(XplorMRParser.ForceConstant)
                self.state = 1477
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==207:
                    self.state = 1476
                    self.match(XplorMRParser.Equ_op)


                self.state = 1479
                self.number_s()
                pass
            elif token in [14]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1480
                self.match(XplorMRParser.Nrestraints)
                self.state = 1482
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==207:
                    self.state = 1481
                    self.match(XplorMRParser.Equ_op)


                self.state = 1484
                self.match(XplorMRParser.Integer)
                pass
            elif token in [15]:
                self.enterOuterAlt(localctx, 6)
                self.state = 1485
                self.match(XplorMRParser.Potential)
                self.state = 1487
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==226:
                    self.state = 1486
                    self.match(XplorMRParser.Equ_op_PT)


                self.state = 1489
                self.match(XplorMRParser.Potential_types)
                pass
            elif token in [17]:
                self.enterOuterAlt(localctx, 7)
                self.state = 1490
                self.match(XplorMRParser.Print)
                self.state = 1491
                self.match(XplorMRParser.Threshold)
                self.state = 1492
                self.number_s()
                pass
            elif token in [19]:
                self.enterOuterAlt(localctx, 8)
                self.state = 1493
                self.match(XplorMRParser.Reset)
                pass
            elif token in [46]:
                self.enterOuterAlt(localctx, 9)
                self.state = 1494
                self.match(XplorMRParser.Type)
                self.state = 1495
                self.match(XplorMRParser.Rdc_or_Diff_anis_types)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Dani_assignContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Assign(self):
            return self.getToken(XplorMRParser.Assign, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.SelectionContext,i)


        def number(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.NumberContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.NumberContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_dani_assign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDani_assign" ):
                listener.enterDani_assign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDani_assign" ):
                listener.exitDani_assign(self)




    def dani_assign(self):

        localctx = XplorMRParser.Dani_assignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 138, self.RULE_dani_assign)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1498
            self.match(XplorMRParser.Assign)
            self.state = 1499
            self.selection()
            self.state = 1500
            self.selection()
            self.state = 1501
            self.selection()
            self.state = 1502
            self.selection()
            self.state = 1503
            self.selection()
            self.state = 1504
            self.selection()
            self.state = 1505
            self.number()
            self.state = 1507
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 195)) & ~0x3f) == 0 and ((1 << (_la - 195)) & 262149) != 0):
                self.state = 1506
                self.number()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Orientation_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def orie_assign(self):
            return self.getTypedRuleContext(XplorMRParser.Orie_assignContext,0)


        def classification(self):
            return self.getTypedRuleContext(XplorMRParser.ClassificationContext,0)


        def Cutoff(self):
            return self.getToken(XplorMRParser.Cutoff, 0)

        def number_s(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Number_sContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Number_sContext,i)


        def Height(self):
            return self.getToken(XplorMRParser.Height, 0)

        def ForceConstant(self):
            return self.getToken(XplorMRParser.ForceConstant, 0)

        def Equ_op(self):
            return self.getToken(XplorMRParser.Equ_op, 0)

        def Gaussian(self):
            return self.getToken(XplorMRParser.Gaussian, 0)

        def MaxGaussians(self):
            return self.getToken(XplorMRParser.MaxGaussians, 0)

        def Integer(self):
            return self.getToken(XplorMRParser.Integer, 0)

        def NewGaussian(self):
            return self.getToken(XplorMRParser.NewGaussian, 0)

        def Nrestraints(self):
            return self.getToken(XplorMRParser.Nrestraints, 0)

        def Print(self):
            return self.getToken(XplorMRParser.Print, 0)

        def Threshold(self):
            return self.getToken(XplorMRParser.Threshold, 0)

        def All(self):
            return self.getToken(XplorMRParser.All, 0)

        def Quartic(self):
            return self.getToken(XplorMRParser.Quartic, 0)

        def Reset(self):
            return self.getToken(XplorMRParser.Reset, 0)

        def Residue(self):
            return self.getToken(XplorMRParser.Residue, 0)

        def Size(self):
            return self.getToken(XplorMRParser.Size, 0)

        def Zero(self):
            return self.getToken(XplorMRParser.Zero, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_orientation_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOrientation_statement" ):
                listener.enterOrientation_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOrientation_statement" ):
                listener.exitOrientation_statement(self)




    def orientation_statement(self):

        localctx = XplorMRParser.Orientation_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 140, self.RULE_orientation_statement)
        self._la = 0 # Token type
        try:
            self.state = 1570
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [4]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1509
                self.orie_assign()
                pass
            elif token in [9]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1510
                self.classification()
                pass
            elif token in [27]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1511
                self.match(XplorMRParser.Cutoff)
                self.state = 1512
                self.number_s()
                pass
            elif token in [89]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1513
                self.match(XplorMRParser.Height)
                self.state = 1514
                self.number_s()
                pass
            elif token in [43]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1515
                self.match(XplorMRParser.ForceConstant)
                self.state = 1517
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==207:
                    self.state = 1516
                    self.match(XplorMRParser.Equ_op)


                self.state = 1519
                self.number_s()
                pass
            elif token in [80]:
                self.enterOuterAlt(localctx, 6)
                self.state = 1520
                self.match(XplorMRParser.Gaussian)
                self.state = 1521
                self.number_s()
                self.state = 1522
                self.number_s()
                self.state = 1523
                self.number_s()
                self.state = 1524
                self.number_s()
                self.state = 1525
                self.number_s()
                self.state = 1526
                self.number_s()
                self.state = 1527
                self.number_s()
                pass
            elif token in [90]:
                self.enterOuterAlt(localctx, 7)
                self.state = 1529
                self.match(XplorMRParser.MaxGaussians)
                self.state = 1530
                self.match(XplorMRParser.Integer)
                pass
            elif token in [91]:
                self.enterOuterAlt(localctx, 8)
                self.state = 1531
                self.match(XplorMRParser.NewGaussian)
                self.state = 1532
                self.number_s()
                self.state = 1533
                self.number_s()
                self.state = 1534
                self.number_s()
                self.state = 1535
                self.number_s()
                self.state = 1536
                self.number_s()
                self.state = 1537
                self.number_s()
                self.state = 1538
                self.number_s()
                self.state = 1539
                self.number_s()
                pass
            elif token in [14]:
                self.enterOuterAlt(localctx, 9)
                self.state = 1541
                self.match(XplorMRParser.Nrestraints)
                self.state = 1543
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==207:
                    self.state = 1542
                    self.match(XplorMRParser.Equ_op)


                self.state = 1545
                self.match(XplorMRParser.Integer)
                pass
            elif token in [17]:
                self.enterOuterAlt(localctx, 10)
                self.state = 1546
                self.match(XplorMRParser.Print)
                self.state = 1547
                self.match(XplorMRParser.Threshold)
                self.state = 1548
                self.number_s()
                self.state = 1551
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [139]:
                    self.state = 1549
                    self.match(XplorMRParser.All)
                    pass
                elif token in [9]:
                    self.state = 1550
                    self.classification()
                    pass
                else:
                    raise NoViableAltException(self)

                pass
            elif token in [82]:
                self.enterOuterAlt(localctx, 11)
                self.state = 1553
                self.match(XplorMRParser.Quartic)
                self.state = 1554
                self.number_s()
                self.state = 1555
                self.number_s()
                self.state = 1556
                self.number_s()
                self.state = 1557
                self.number_s()
                self.state = 1558
                self.number_s()
                self.state = 1559
                self.number_s()
                self.state = 1560
                self.number_s()
                pass
            elif token in [19]:
                self.enterOuterAlt(localctx, 12)
                self.state = 1562
                self.match(XplorMRParser.Reset)
                pass
            elif token in [155]:
                self.enterOuterAlt(localctx, 13)
                self.state = 1563
                self.match(XplorMRParser.Residue)
                self.state = 1564
                self.match(XplorMRParser.Integer)
                pass
            elif token in [63]:
                self.enterOuterAlt(localctx, 14)
                self.state = 1565
                self.match(XplorMRParser.Size)
                self.state = 1566
                self.number_s()
                self.state = 1567
                self.number_s()
                pass
            elif token in [64]:
                self.enterOuterAlt(localctx, 15)
                self.state = 1569
                self.match(XplorMRParser.Zero)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Orie_assignContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Assign(self):
            return self.getToken(XplorMRParser.Assign, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.SelectionContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_orie_assign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOrie_assign" ):
                listener.enterOrie_assign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOrie_assign" ):
                listener.exitOrie_assign(self)




    def orie_assign(self):

        localctx = XplorMRParser.Orie_assignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 142, self.RULE_orie_assign)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1572
            self.match(XplorMRParser.Assign)
            self.state = 1573
            self.selection()
            self.state = 1574
            self.selection()
            self.state = 1575
            self.selection()
            self.state = 1576
            self.selection()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Csa_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def csa_assign(self):
            return self.getTypedRuleContext(XplorMRParser.Csa_assignContext,0)


        def csa_assign_loop(self):
            return self.getTypedRuleContext(XplorMRParser.Csa_assign_loopContext,0)


        def classification(self):
            return self.getTypedRuleContext(XplorMRParser.ClassificationContext,0)


        def Scale(self):
            return self.getToken(XplorMRParser.Scale, 0)

        def number_s(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Number_sContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Number_sContext,i)


        def Equ_op(self):
            return self.getToken(XplorMRParser.Equ_op, 0)

        def Type(self):
            return self.getToken(XplorMRParser.Type, 0)

        def Csa_types(self):
            return self.getToken(XplorMRParser.Csa_types, 0)

        def Coefficients(self):
            return self.getToken(XplorMRParser.Coefficients, 0)

        def Sigma(self):
            return self.getToken(XplorMRParser.Sigma, 0)

        def ForceConstant(self):
            return self.getToken(XplorMRParser.ForceConstant, 0)

        def Nrestraints(self):
            return self.getToken(XplorMRParser.Nrestraints, 0)

        def Integer(self):
            return self.getToken(XplorMRParser.Integer, 0)

        def Potential(self):
            return self.getToken(XplorMRParser.Potential, 0)

        def Potential_types(self):
            return self.getToken(XplorMRParser.Potential_types, 0)

        def Equ_op_PT(self):
            return self.getToken(XplorMRParser.Equ_op_PT, 0)

        def Print(self):
            return self.getToken(XplorMRParser.Print, 0)

        def Threshold(self):
            return self.getToken(XplorMRParser.Threshold, 0)

        def Reset(self):
            return self.getToken(XplorMRParser.Reset, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_csa_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCsa_statement" ):
                listener.enterCsa_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCsa_statement" ):
                listener.exitCsa_statement(self)




    def csa_statement(self):

        localctx = XplorMRParser.Csa_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 144, self.RULE_csa_statement)
        self._la = 0 # Token type
        try:
            self.state = 1617
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [4]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1578
                self.csa_assign()
                pass
            elif token in [186]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1579
                self.csa_assign_loop()
                pass
            elif token in [9]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1580
                self.classification()
                pass
            elif token in [21]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1581
                self.match(XplorMRParser.Scale)
                self.state = 1583
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==207:
                    self.state = 1582
                    self.match(XplorMRParser.Equ_op)


                self.state = 1585
                self.number_s()
                pass
            elif token in [46]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1586
                self.match(XplorMRParser.Type)
                self.state = 1587
                self.match(XplorMRParser.Csa_types)
                pass
            elif token in [42]:
                self.enterOuterAlt(localctx, 6)
                self.state = 1588
                self.match(XplorMRParser.Coefficients)
                self.state = 1589
                self.number_s()
                self.state = 1590
                self.number_s()
                self.state = 1591
                self.number_s()
                pass
            elif token in [93]:
                self.enterOuterAlt(localctx, 7)
                self.state = 1593
                self.match(XplorMRParser.Sigma)
                self.state = 1594
                self.number_s()
                self.state = 1595
                self.number_s()
                self.state = 1596
                self.number_s()
                pass
            elif token in [43]:
                self.enterOuterAlt(localctx, 8)
                self.state = 1598
                self.match(XplorMRParser.ForceConstant)
                self.state = 1600
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==207:
                    self.state = 1599
                    self.match(XplorMRParser.Equ_op)


                self.state = 1602
                self.number_s()
                pass
            elif token in [14]:
                self.enterOuterAlt(localctx, 9)
                self.state = 1603
                self.match(XplorMRParser.Nrestraints)
                self.state = 1605
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==207:
                    self.state = 1604
                    self.match(XplorMRParser.Equ_op)


                self.state = 1607
                self.match(XplorMRParser.Integer)
                pass
            elif token in [15]:
                self.enterOuterAlt(localctx, 10)
                self.state = 1608
                self.match(XplorMRParser.Potential)
                self.state = 1610
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==226:
                    self.state = 1609
                    self.match(XplorMRParser.Equ_op_PT)


                self.state = 1612
                self.match(XplorMRParser.Potential_types)
                pass
            elif token in [17]:
                self.enterOuterAlt(localctx, 11)
                self.state = 1613
                self.match(XplorMRParser.Print)
                self.state = 1614
                self.match(XplorMRParser.Threshold)
                self.state = 1615
                self.number_s()
                pass
            elif token in [19]:
                self.enterOuterAlt(localctx, 12)
                self.state = 1616
                self.match(XplorMRParser.Reset)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Csa_assignContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Assign(self):
            return self.getToken(XplorMRParser.Assign, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.SelectionContext,i)


        def number(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.NumberContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.NumberContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_csa_assign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCsa_assign" ):
                listener.enterCsa_assign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCsa_assign" ):
                listener.exitCsa_assign(self)




    def csa_assign(self):

        localctx = XplorMRParser.Csa_assignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 146, self.RULE_csa_assign)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1619
            self.match(XplorMRParser.Assign)
            self.state = 1620
            self.selection()
            self.state = 1621
            self.selection()
            self.state = 1622
            self.selection()
            self.state = 1623
            self.selection()
            self.state = 1624
            self.selection()
            self.state = 1625
            self.selection()
            self.state = 1626
            self.selection()
            self.state = 1627
            self.number()
            self.state = 1629
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,165,self._ctx)
            if la_ == 1:
                self.state = 1628
                self.number()


            self.state = 1632
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 195)) & ~0x3f) == 0 and ((1 << (_la - 195)) & 262149) != 0):
                self.state = 1631
                self.number()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pcsa_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def csa_assign(self):
            return self.getTypedRuleContext(XplorMRParser.Csa_assignContext,0)


        def classification(self):
            return self.getTypedRuleContext(XplorMRParser.ClassificationContext,0)


        def Scale(self):
            return self.getToken(XplorMRParser.Scale, 0)

        def number_s(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Number_sContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Number_sContext,i)


        def Equ_op(self):
            return self.getToken(XplorMRParser.Equ_op, 0)

        def Coefficients(self):
            return self.getToken(XplorMRParser.Coefficients, 0)

        def Sigma(self):
            return self.getToken(XplorMRParser.Sigma, 0)

        def ForceConstant(self):
            return self.getToken(XplorMRParser.ForceConstant, 0)

        def Nrestraints(self):
            return self.getToken(XplorMRParser.Nrestraints, 0)

        def Integer(self):
            return self.getToken(XplorMRParser.Integer, 0)

        def Potential(self):
            return self.getToken(XplorMRParser.Potential, 0)

        def Potential_types(self):
            return self.getToken(XplorMRParser.Potential_types, 0)

        def Equ_op_PT(self):
            return self.getToken(XplorMRParser.Equ_op_PT, 0)

        def Print(self):
            return self.getToken(XplorMRParser.Print, 0)

        def Threshold(self):
            return self.getToken(XplorMRParser.Threshold, 0)

        def Reset(self):
            return self.getToken(XplorMRParser.Reset, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_pcsa_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPcsa_statement" ):
                listener.enterPcsa_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPcsa_statement" ):
                listener.exitPcsa_statement(self)




    def pcsa_statement(self):

        localctx = XplorMRParser.Pcsa_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 148, self.RULE_pcsa_statement)
        self._la = 0 # Token type
        try:
            self.state = 1671
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [4]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1634
                self.csa_assign()
                pass
            elif token in [9]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1635
                self.classification()
                pass
            elif token in [21]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1636
                self.match(XplorMRParser.Scale)
                self.state = 1638
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==207:
                    self.state = 1637
                    self.match(XplorMRParser.Equ_op)


                self.state = 1640
                self.number_s()
                pass
            elif token in [42]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1641
                self.match(XplorMRParser.Coefficients)
                self.state = 1642
                self.number_s()
                self.state = 1643
                self.number_s()
                self.state = 1644
                self.number_s()
                pass
            elif token in [93]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1646
                self.match(XplorMRParser.Sigma)
                self.state = 1647
                self.number_s()
                self.state = 1648
                self.number_s()
                self.state = 1649
                self.number_s()
                self.state = 1650
                self.number_s()
                pass
            elif token in [43]:
                self.enterOuterAlt(localctx, 6)
                self.state = 1652
                self.match(XplorMRParser.ForceConstant)
                self.state = 1654
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==207:
                    self.state = 1653
                    self.match(XplorMRParser.Equ_op)


                self.state = 1656
                self.number_s()
                pass
            elif token in [14]:
                self.enterOuterAlt(localctx, 7)
                self.state = 1657
                self.match(XplorMRParser.Nrestraints)
                self.state = 1659
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==207:
                    self.state = 1658
                    self.match(XplorMRParser.Equ_op)


                self.state = 1661
                self.match(XplorMRParser.Integer)
                pass
            elif token in [15]:
                self.enterOuterAlt(localctx, 8)
                self.state = 1662
                self.match(XplorMRParser.Potential)
                self.state = 1664
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==226:
                    self.state = 1663
                    self.match(XplorMRParser.Equ_op_PT)


                self.state = 1666
                self.match(XplorMRParser.Potential_types)
                pass
            elif token in [17]:
                self.enterOuterAlt(localctx, 9)
                self.state = 1667
                self.match(XplorMRParser.Print)
                self.state = 1668
                self.match(XplorMRParser.Threshold)
                self.state = 1669
                self.number_s()
                pass
            elif token in [19]:
                self.enterOuterAlt(localctx, 10)
                self.state = 1670
                self.match(XplorMRParser.Reset)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class One_bond_coupling_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def one_bond_assign(self):
            return self.getTypedRuleContext(XplorMRParser.One_bond_assignContext,0)


        def classification(self):
            return self.getTypedRuleContext(XplorMRParser.ClassificationContext,0)


        def Coefficients(self):
            return self.getToken(XplorMRParser.Coefficients, 0)

        def number_s(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Number_sContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Number_sContext,i)


        def ForceConstant(self):
            return self.getToken(XplorMRParser.ForceConstant, 0)

        def Equ_op(self):
            return self.getToken(XplorMRParser.Equ_op, 0)

        def Nrestraints(self):
            return self.getToken(XplorMRParser.Nrestraints, 0)

        def Integer(self):
            return self.getToken(XplorMRParser.Integer, 0)

        def Potential(self):
            return self.getToken(XplorMRParser.Potential, 0)

        def Potential_types(self):
            return self.getToken(XplorMRParser.Potential_types, 0)

        def Equ_op_PT(self):
            return self.getToken(XplorMRParser.Equ_op_PT, 0)

        def Print(self):
            return self.getToken(XplorMRParser.Print, 0)

        def Threshold(self):
            return self.getToken(XplorMRParser.Threshold, 0)

        def Reset(self):
            return self.getToken(XplorMRParser.Reset, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_one_bond_coupling_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOne_bond_coupling_statement" ):
                listener.enterOne_bond_coupling_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOne_bond_coupling_statement" ):
                listener.exitOne_bond_coupling_statement(self)




    def one_bond_coupling_statement(self):

        localctx = XplorMRParser.One_bond_coupling_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 150, self.RULE_one_bond_coupling_statement)
        self._la = 0 # Token type
        try:
            self.state = 1703
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [4]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1673
                self.one_bond_assign()
                pass
            elif token in [9]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1674
                self.classification()
                pass
            elif token in [42]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1675
                self.match(XplorMRParser.Coefficients)
                self.state = 1676
                self.number_s()
                self.state = 1677
                self.number_s()
                self.state = 1678
                self.number_s()
                self.state = 1679
                self.number_s()
                self.state = 1680
                self.number_s()
                self.state = 1681
                self.number_s()
                self.state = 1682
                self.number_s()
                pass
            elif token in [43]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1684
                self.match(XplorMRParser.ForceConstant)
                self.state = 1686
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==207:
                    self.state = 1685
                    self.match(XplorMRParser.Equ_op)


                self.state = 1688
                self.number_s()
                pass
            elif token in [14]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1689
                self.match(XplorMRParser.Nrestraints)
                self.state = 1691
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==207:
                    self.state = 1690
                    self.match(XplorMRParser.Equ_op)


                self.state = 1693
                self.match(XplorMRParser.Integer)
                pass
            elif token in [15]:
                self.enterOuterAlt(localctx, 6)
                self.state = 1694
                self.match(XplorMRParser.Potential)
                self.state = 1696
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==226:
                    self.state = 1695
                    self.match(XplorMRParser.Equ_op_PT)


                self.state = 1698
                self.match(XplorMRParser.Potential_types)
                pass
            elif token in [17]:
                self.enterOuterAlt(localctx, 7)
                self.state = 1699
                self.match(XplorMRParser.Print)
                self.state = 1700
                self.match(XplorMRParser.Threshold)
                self.state = 1701
                self.number_s()
                pass
            elif token in [19]:
                self.enterOuterAlt(localctx, 8)
                self.state = 1702
                self.match(XplorMRParser.Reset)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class One_bond_assignContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Assign(self):
            return self.getToken(XplorMRParser.Assign, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.SelectionContext,i)


        def number(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.NumberContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.NumberContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_one_bond_assign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOne_bond_assign" ):
                listener.enterOne_bond_assign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOne_bond_assign" ):
                listener.exitOne_bond_assign(self)




    def one_bond_assign(self):

        localctx = XplorMRParser.One_bond_assignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 152, self.RULE_one_bond_assign)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1705
            self.match(XplorMRParser.Assign)
            self.state = 1706
            self.selection()
            self.state = 1707
            self.selection()
            self.state = 1708
            self.selection()
            self.state = 1709
            self.selection()
            self.state = 1710
            self.selection()
            self.state = 1711
            self.selection()
            self.state = 1712
            self.selection()
            self.state = 1713
            self.selection()
            self.state = 1714
            self.number()
            self.state = 1715
            self.number()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Angle_db_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def angle_db_assign(self):
            return self.getTypedRuleContext(XplorMRParser.Angle_db_assignContext,0)


        def classification(self):
            return self.getTypedRuleContext(XplorMRParser.ClassificationContext,0)


        def DerivFlag(self):
            return self.getToken(XplorMRParser.DerivFlag, 0)

        def Simple_name(self):
            return self.getToken(XplorMRParser.Simple_name, 0)

        def Expectation(self):
            return self.getToken(XplorMRParser.Expectation, 0)

        def Integer(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Integer)
            else:
                return self.getToken(XplorMRParser.Integer, i)

        def number_s(self):
            return self.getTypedRuleContext(XplorMRParser.Number_sContext,0)


        def Error(self):
            return self.getToken(XplorMRParser.Error, 0)

        def ForceConstant(self):
            return self.getToken(XplorMRParser.ForceConstant, 0)

        def Equ_op(self):
            return self.getToken(XplorMRParser.Equ_op, 0)

        def Nrestraints(self):
            return self.getToken(XplorMRParser.Nrestraints, 0)

        def Potential(self):
            return self.getToken(XplorMRParser.Potential, 0)

        def Potential_types(self):
            return self.getToken(XplorMRParser.Potential_types, 0)

        def Equ_op_PT(self):
            return self.getToken(XplorMRParser.Equ_op_PT, 0)

        def Print(self):
            return self.getToken(XplorMRParser.Print, 0)

        def Threshold(self):
            return self.getToken(XplorMRParser.Threshold, 0)

        def All(self):
            return self.getToken(XplorMRParser.All, 0)

        def Reset(self):
            return self.getToken(XplorMRParser.Reset, 0)

        def Size(self):
            return self.getToken(XplorMRParser.Size, 0)

        def AngleDb(self):
            return self.getToken(XplorMRParser.AngleDb, 0)

        def Dihedral(self):
            return self.getToken(XplorMRParser.Dihedral, 0)

        def Zero(self):
            return self.getToken(XplorMRParser.Zero, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_angle_db_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAngle_db_statement" ):
                listener.enterAngle_db_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAngle_db_statement" ):
                listener.exitAngle_db_statement(self)




    def angle_db_statement(self):

        localctx = XplorMRParser.Angle_db_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 154, self.RULE_angle_db_statement)
        self._la = 0 # Token type
        try:
            self.state = 1755
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [4]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1717
                self.angle_db_assign()
                pass
            elif token in [9]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1718
                self.classification()
                pass
            elif token in [97]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1719
                self.match(XplorMRParser.DerivFlag)
                self.state = 1720
                self.match(XplorMRParser.Simple_name)
                pass
            elif token in [62]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1721
                self.match(XplorMRParser.Expectation)
                self.state = 1722
                self.match(XplorMRParser.Integer)
                self.state = 1723
                self.match(XplorMRParser.Integer)
                self.state = 1724
                self.number_s()
                pass
            elif token in [78]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1725
                self.match(XplorMRParser.Error)
                self.state = 1726
                self.number_s()
                pass
            elif token in [43]:
                self.enterOuterAlt(localctx, 6)
                self.state = 1727
                self.match(XplorMRParser.ForceConstant)
                self.state = 1729
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==207:
                    self.state = 1728
                    self.match(XplorMRParser.Equ_op)


                self.state = 1731
                self.number_s()
                pass
            elif token in [14]:
                self.enterOuterAlt(localctx, 7)
                self.state = 1732
                self.match(XplorMRParser.Nrestraints)
                self.state = 1734
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==207:
                    self.state = 1733
                    self.match(XplorMRParser.Equ_op)


                self.state = 1736
                self.match(XplorMRParser.Integer)
                pass
            elif token in [15]:
                self.enterOuterAlt(localctx, 8)
                self.state = 1737
                self.match(XplorMRParser.Potential)
                self.state = 1739
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==226:
                    self.state = 1738
                    self.match(XplorMRParser.Equ_op_PT)


                self.state = 1741
                self.match(XplorMRParser.Potential_types)
                pass
            elif token in [17]:
                self.enterOuterAlt(localctx, 9)
                self.state = 1742
                self.match(XplorMRParser.Print)
                self.state = 1743
                self.match(XplorMRParser.Threshold)
                self.state = 1744
                self.number_s()
                self.state = 1747
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [139]:
                    self.state = 1745
                    self.match(XplorMRParser.All)
                    pass
                elif token in [9]:
                    self.state = 1746
                    self.classification()
                    pass
                else:
                    raise NoViableAltException(self)

                pass
            elif token in [19]:
                self.enterOuterAlt(localctx, 10)
                self.state = 1749
                self.match(XplorMRParser.Reset)
                pass
            elif token in [63]:
                self.enterOuterAlt(localctx, 11)
                self.state = 1750
                self.match(XplorMRParser.Size)
                self.state = 1751
                _la = self._input.LA(1)
                if not(_la==38 or _la==96):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1752
                self.match(XplorMRParser.Integer)
                self.state = 1753
                self.match(XplorMRParser.Integer)
                pass
            elif token in [64]:
                self.enterOuterAlt(localctx, 12)
                self.state = 1754
                self.match(XplorMRParser.Zero)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Angle_db_assignContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Assign(self):
            return self.getToken(XplorMRParser.Assign, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.SelectionContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_angle_db_assign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAngle_db_assign" ):
                listener.enterAngle_db_assign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAngle_db_assign" ):
                listener.exitAngle_db_assign(self)




    def angle_db_assign(self):

        localctx = XplorMRParser.Angle_db_assignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 156, self.RULE_angle_db_assign)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1757
            self.match(XplorMRParser.Assign)
            self.state = 1758
            self.selection()
            self.state = 1759
            self.selection()
            self.state = 1760
            self.selection()
            self.state = 1761
            self.selection()
            self.state = 1762
            self.selection()
            self.state = 1763
            self.selection()
            self.state = 1764
            self.selection()
            self.state = 1765
            self.selection()
            self.state = 1766
            self.selection()
            self.state = 1767
            self.selection()
            self.state = 1768
            self.selection()
            self.state = 1770
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==204:
                self.state = 1769
                self.selection()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pre_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def pre_assign(self):
            return self.getTypedRuleContext(XplorMRParser.Pre_assignContext,0)


        def pre_assign_loop(self):
            return self.getTypedRuleContext(XplorMRParser.Pre_assign_loopContext,0)


        def classification(self):
            return self.getTypedRuleContext(XplorMRParser.ClassificationContext,0)


        def ForceConstant(self):
            return self.getToken(XplorMRParser.ForceConstant, 0)

        def class_name(self):
            return self.getTypedRuleContext(XplorMRParser.Class_nameContext,0)


        def number_s(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Number_sContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Number_sContext,i)


        def Equ_op(self):
            return self.getToken(XplorMRParser.Equ_op, 0)

        def Nrestraints(self):
            return self.getToken(XplorMRParser.Nrestraints, 0)

        def Integer(self):
            return self.getToken(XplorMRParser.Integer, 0)

        def Potential(self):
            return self.getToken(XplorMRParser.Potential, 0)

        def Class_name_PT(self):
            return self.getToken(XplorMRParser.Class_name_PT, 0)

        def Potential_types(self):
            return self.getToken(XplorMRParser.Potential_types, 0)

        def Equ_op_PT(self):
            return self.getToken(XplorMRParser.Equ_op_PT, 0)

        def Kconst(self):
            return self.getToken(XplorMRParser.Kconst, 0)

        def Omega(self):
            return self.getToken(XplorMRParser.Omega, 0)

        def Tauc(self):
            return self.getToken(XplorMRParser.Tauc, 0)

        def Print(self):
            return self.getToken(XplorMRParser.Print, 0)

        def Threshold(self):
            return self.getToken(XplorMRParser.Threshold, 0)

        def All(self):
            return self.getToken(XplorMRParser.All, 0)

        def Reset(self):
            return self.getToken(XplorMRParser.Reset, 0)

        def Debug(self):
            return self.getToken(XplorMRParser.Debug, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_pre_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPre_statement" ):
                listener.enterPre_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPre_statement" ):
                listener.exitPre_statement(self)




    def pre_statement(self):

        localctx = XplorMRParser.Pre_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 158, self.RULE_pre_statement)
        self._la = 0 # Token type
        try:
            self.state = 1824
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [4]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1772
                self.pre_assign()
                pass
            elif token in [186]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1773
                self.pre_assign_loop()
                pass
            elif token in [9]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1774
                self.classification()
                pass
            elif token in [43]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1775
                self.match(XplorMRParser.ForceConstant)
                self.state = 1777
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==207:
                    self.state = 1776
                    self.match(XplorMRParser.Equ_op)


                self.state = 1779
                self.class_name()
                self.state = 1780
                self.number_s()
                pass
            elif token in [14]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1782
                self.match(XplorMRParser.Nrestraints)
                self.state = 1784
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==207:
                    self.state = 1783
                    self.match(XplorMRParser.Equ_op)


                self.state = 1786
                self.match(XplorMRParser.Integer)
                pass
            elif token in [15]:
                self.enterOuterAlt(localctx, 6)
                self.state = 1787
                self.match(XplorMRParser.Potential)
                self.state = 1789
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==226:
                    self.state = 1788
                    self.match(XplorMRParser.Equ_op_PT)


                self.state = 1791
                self.match(XplorMRParser.Class_name_PT)
                self.state = 1792
                self.match(XplorMRParser.Potential_types)
                pass
            elif token in [99]:
                self.enterOuterAlt(localctx, 7)
                self.state = 1793
                self.match(XplorMRParser.Kconst)
                self.state = 1795
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==207:
                    self.state = 1794
                    self.match(XplorMRParser.Equ_op)


                self.state = 1797
                self.class_name()
                self.state = 1798
                self.number_s()
                pass
            elif token in [100]:
                self.enterOuterAlt(localctx, 8)
                self.state = 1800
                self.match(XplorMRParser.Omega)
                self.state = 1802
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==207:
                    self.state = 1801
                    self.match(XplorMRParser.Equ_op)


                self.state = 1804
                self.class_name()
                self.state = 1805
                self.number_s()
                pass
            elif token in [101]:
                self.enterOuterAlt(localctx, 9)
                self.state = 1807
                self.match(XplorMRParser.Tauc)
                self.state = 1809
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==207:
                    self.state = 1808
                    self.match(XplorMRParser.Equ_op)


                self.state = 1811
                self.class_name()
                self.state = 1812
                self.number_s()
                self.state = 1813
                self.number_s()
                pass
            elif token in [17]:
                self.enterOuterAlt(localctx, 10)
                self.state = 1815
                self.match(XplorMRParser.Print)
                self.state = 1816
                self.match(XplorMRParser.Threshold)
                self.state = 1817
                self.number_s()
                self.state = 1820
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [139]:
                    self.state = 1818
                    self.match(XplorMRParser.All)
                    pass
                elif token in [9]:
                    self.state = 1819
                    self.classification()
                    pass
                else:
                    raise NoViableAltException(self)

                pass
            elif token in [19]:
                self.enterOuterAlt(localctx, 11)
                self.state = 1822
                self.match(XplorMRParser.Reset)
                pass
            elif token in [102]:
                self.enterOuterAlt(localctx, 12)
                self.state = 1823
                self.match(XplorMRParser.Debug)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pre_assignContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Assign(self):
            return self.getToken(XplorMRParser.Assign, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.SelectionContext,i)


        def number(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.NumberContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.NumberContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_pre_assign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPre_assign" ):
                listener.enterPre_assign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPre_assign" ):
                listener.exitPre_assign(self)




    def pre_assign(self):

        localctx = XplorMRParser.Pre_assignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 160, self.RULE_pre_assign)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1826
            self.match(XplorMRParser.Assign)
            self.state = 1827
            self.selection()
            self.state = 1828
            self.selection()
            self.state = 1829
            self.number()
            self.state = 1831
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 195)) & ~0x3f) == 0 and ((1 << (_la - 195)) & 262149) != 0):
                self.state = 1830
                self.number()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pcs_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def pcs_assign(self):
            return self.getTypedRuleContext(XplorMRParser.Pcs_assignContext,0)


        def pcs_assign_loop(self):
            return self.getTypedRuleContext(XplorMRParser.Pcs_assign_loopContext,0)


        def classification(self):
            return self.getTypedRuleContext(XplorMRParser.ClassificationContext,0)


        def Tolerance(self):
            return self.getToken(XplorMRParser.Tolerance, 0)

        def Integer(self):
            return self.getToken(XplorMRParser.Integer, 0)

        def Coefficients(self):
            return self.getToken(XplorMRParser.Coefficients, 0)

        def number_s(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Number_sContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Number_sContext,i)


        def ForceConstant(self):
            return self.getToken(XplorMRParser.ForceConstant, 0)

        def Equ_op(self):
            return self.getToken(XplorMRParser.Equ_op, 0)

        def Nrestraints(self):
            return self.getToken(XplorMRParser.Nrestraints, 0)

        def Print(self):
            return self.getToken(XplorMRParser.Print, 0)

        def Threshold(self):
            return self.getToken(XplorMRParser.Threshold, 0)

        def All(self):
            return self.getToken(XplorMRParser.All, 0)

        def Reset(self):
            return self.getToken(XplorMRParser.Reset, 0)

        def Save(self):
            return self.getToken(XplorMRParser.Save, 0)

        def Simple_name(self):
            return self.getToken(XplorMRParser.Simple_name, 0)

        def Fmed(self):
            return self.getToken(XplorMRParser.Fmed, 0)

        def ErrOn(self):
            return self.getToken(XplorMRParser.ErrOn, 0)

        def ErrOff(self):
            return self.getToken(XplorMRParser.ErrOff, 0)

        def Fon(self):
            return self.getToken(XplorMRParser.Fon, 0)

        def Foff(self):
            return self.getToken(XplorMRParser.Foff, 0)

        def Son(self):
            return self.getToken(XplorMRParser.Son, 0)

        def Soff(self):
            return self.getToken(XplorMRParser.Soff, 0)

        def Frun(self):
            return self.getToken(XplorMRParser.Frun, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_pcs_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPcs_statement" ):
                listener.enterPcs_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPcs_statement" ):
                listener.exitPcs_statement(self)




    def pcs_statement(self):

        localctx = XplorMRParser.Pcs_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 162, self.RULE_pcs_statement)
        self._la = 0 # Token type
        try:
            self.state = 1874
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [4]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1833
                self.pcs_assign()
                pass
            elif token in [186]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1834
                self.pcs_assign_loop()
                pass
            elif token in [9]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1835
                self.classification()
                pass
            elif token in [104]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1836
                self.match(XplorMRParser.Tolerance)
                self.state = 1837
                self.match(XplorMRParser.Integer)
                pass
            elif token in [42]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1838
                self.match(XplorMRParser.Coefficients)
                self.state = 1839
                self.number_s()
                self.state = 1840
                self.number_s()
                pass
            elif token in [43]:
                self.enterOuterAlt(localctx, 6)
                self.state = 1842
                self.match(XplorMRParser.ForceConstant)
                self.state = 1844
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==207:
                    self.state = 1843
                    self.match(XplorMRParser.Equ_op)


                self.state = 1846
                self.number_s()
                pass
            elif token in [14]:
                self.enterOuterAlt(localctx, 7)
                self.state = 1847
                self.match(XplorMRParser.Nrestraints)
                self.state = 1849
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==207:
                    self.state = 1848
                    self.match(XplorMRParser.Equ_op)


                self.state = 1851
                self.match(XplorMRParser.Integer)
                pass
            elif token in [17]:
                self.enterOuterAlt(localctx, 8)
                self.state = 1852
                self.match(XplorMRParser.Print)
                self.state = 1853
                self.match(XplorMRParser.Threshold)
                self.state = 1854
                self.number_s()
                self.state = 1857
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [139]:
                    self.state = 1855
                    self.match(XplorMRParser.All)
                    pass
                elif token in [9]:
                    self.state = 1856
                    self.classification()
                    pass
                else:
                    raise NoViableAltException(self)

                pass
            elif token in [19]:
                self.enterOuterAlt(localctx, 9)
                self.state = 1859
                self.match(XplorMRParser.Reset)
                pass
            elif token in [105]:
                self.enterOuterAlt(localctx, 10)
                self.state = 1860
                self.match(XplorMRParser.Save)
                self.state = 1861
                self.match(XplorMRParser.Simple_name)
                pass
            elif token in [106]:
                self.enterOuterAlt(localctx, 11)
                self.state = 1862
                self.match(XplorMRParser.Fmed)
                self.state = 1863
                self.number_s()
                self.state = 1864
                self.match(XplorMRParser.Integer)
                pass
            elif token in [107]:
                self.enterOuterAlt(localctx, 12)
                self.state = 1866
                self.match(XplorMRParser.ErrOn)
                pass
            elif token in [108]:
                self.enterOuterAlt(localctx, 13)
                self.state = 1867
                self.match(XplorMRParser.ErrOff)
                pass
            elif token in [109]:
                self.enterOuterAlt(localctx, 14)
                self.state = 1868
                self.match(XplorMRParser.Fon)
                pass
            elif token in [110]:
                self.enterOuterAlt(localctx, 15)
                self.state = 1869
                self.match(XplorMRParser.Foff)
                pass
            elif token in [111]:
                self.enterOuterAlt(localctx, 16)
                self.state = 1870
                self.match(XplorMRParser.Son)
                pass
            elif token in [112]:
                self.enterOuterAlt(localctx, 17)
                self.state = 1871
                self.match(XplorMRParser.Soff)
                pass
            elif token in [113]:
                self.enterOuterAlt(localctx, 18)
                self.state = 1872
                self.match(XplorMRParser.Frun)
                self.state = 1873
                self.match(XplorMRParser.Integer)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pcs_assignContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Assign(self):
            return self.getToken(XplorMRParser.Assign, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.SelectionContext,i)


        def number(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.NumberContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.NumberContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_pcs_assign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPcs_assign" ):
                listener.enterPcs_assign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPcs_assign" ):
                listener.exitPcs_assign(self)




    def pcs_assign(self):

        localctx = XplorMRParser.Pcs_assignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 164, self.RULE_pcs_assign)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1876
            self.match(XplorMRParser.Assign)
            self.state = 1877
            self.selection()
            self.state = 1878
            self.selection()
            self.state = 1879
            self.selection()
            self.state = 1880
            self.selection()
            self.state = 1881
            self.selection()
            self.state = 1882
            self.number()
            self.state = 1884
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,195,self._ctx)
            if la_ == 1:
                self.state = 1883
                self.number()


            self.state = 1887
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 195)) & ~0x3f) == 0 and ((1 << (_la - 195)) & 262149) != 0):
                self.state = 1886
                self.number()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Prdc_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def prdc_assign(self):
            return self.getTypedRuleContext(XplorMRParser.Prdc_assignContext,0)


        def classification(self):
            return self.getTypedRuleContext(XplorMRParser.ClassificationContext,0)


        def Tolerance(self):
            return self.getToken(XplorMRParser.Tolerance, 0)

        def Integer(self):
            return self.getToken(XplorMRParser.Integer, 0)

        def Coefficients(self):
            return self.getToken(XplorMRParser.Coefficients, 0)

        def number_s(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Number_sContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Number_sContext,i)


        def ForceConstant(self):
            return self.getToken(XplorMRParser.ForceConstant, 0)

        def Equ_op(self):
            return self.getToken(XplorMRParser.Equ_op, 0)

        def Nrestraints(self):
            return self.getToken(XplorMRParser.Nrestraints, 0)

        def ErrOn(self):
            return self.getToken(XplorMRParser.ErrOn, 0)

        def ErrOff(self):
            return self.getToken(XplorMRParser.ErrOff, 0)

        def Fmed(self):
            return self.getToken(XplorMRParser.Fmed, 0)

        def Fon(self):
            return self.getToken(XplorMRParser.Fon, 0)

        def Foff(self):
            return self.getToken(XplorMRParser.Foff, 0)

        def Frun(self):
            return self.getToken(XplorMRParser.Frun, 0)

        def Print(self):
            return self.getToken(XplorMRParser.Print, 0)

        def Threshold(self):
            return self.getToken(XplorMRParser.Threshold, 0)

        def Reset(self):
            return self.getToken(XplorMRParser.Reset, 0)

        def Save(self):
            return self.getToken(XplorMRParser.Save, 0)

        def Simple_name(self):
            return self.getToken(XplorMRParser.Simple_name, 0)

        def Son(self):
            return self.getToken(XplorMRParser.Son, 0)

        def Soff(self):
            return self.getToken(XplorMRParser.Soff, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_prdc_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrdc_statement" ):
                listener.enterPrdc_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrdc_statement" ):
                listener.exitPrdc_statement(self)




    def prdc_statement(self):

        localctx = XplorMRParser.Prdc_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 166, self.RULE_prdc_statement)
        self._la = 0 # Token type
        try:
            self.state = 1920
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [4]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1889
                self.prdc_assign()
                pass
            elif token in [9]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1890
                self.classification()
                pass
            elif token in [104]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1891
                self.match(XplorMRParser.Tolerance)
                self.state = 1892
                self.match(XplorMRParser.Integer)
                pass
            elif token in [42]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1893
                self.match(XplorMRParser.Coefficients)
                self.state = 1894
                self.number_s()
                self.state = 1895
                self.number_s()
                pass
            elif token in [43]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1897
                self.match(XplorMRParser.ForceConstant)
                self.state = 1899
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==207:
                    self.state = 1898
                    self.match(XplorMRParser.Equ_op)


                self.state = 1901
                self.number_s()
                pass
            elif token in [14]:
                self.enterOuterAlt(localctx, 6)
                self.state = 1902
                self.match(XplorMRParser.Nrestraints)
                self.state = 1904
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==207:
                    self.state = 1903
                    self.match(XplorMRParser.Equ_op)


                self.state = 1906
                self.match(XplorMRParser.Integer)
                pass
            elif token in [107]:
                self.enterOuterAlt(localctx, 7)
                self.state = 1907
                self.match(XplorMRParser.ErrOn)
                pass
            elif token in [108]:
                self.enterOuterAlt(localctx, 8)
                self.state = 1908
                self.match(XplorMRParser.ErrOff)
                pass
            elif token in [106]:
                self.enterOuterAlt(localctx, 9)
                self.state = 1909
                self.match(XplorMRParser.Fmed)
                pass
            elif token in [109]:
                self.enterOuterAlt(localctx, 10)
                self.state = 1910
                self.match(XplorMRParser.Fon)
                pass
            elif token in [110]:
                self.enterOuterAlt(localctx, 11)
                self.state = 1911
                self.match(XplorMRParser.Foff)
                pass
            elif token in [113]:
                self.enterOuterAlt(localctx, 12)
                self.state = 1912
                self.match(XplorMRParser.Frun)
                pass
            elif token in [17]:
                self.enterOuterAlt(localctx, 13)
                self.state = 1913
                self.match(XplorMRParser.Print)
                self.state = 1914
                self.match(XplorMRParser.Threshold)
                pass
            elif token in [19]:
                self.enterOuterAlt(localctx, 14)
                self.state = 1915
                self.match(XplorMRParser.Reset)
                pass
            elif token in [105]:
                self.enterOuterAlt(localctx, 15)
                self.state = 1916
                self.match(XplorMRParser.Save)
                self.state = 1917
                self.match(XplorMRParser.Simple_name)
                pass
            elif token in [111]:
                self.enterOuterAlt(localctx, 16)
                self.state = 1918
                self.match(XplorMRParser.Son)
                pass
            elif token in [112]:
                self.enterOuterAlt(localctx, 17)
                self.state = 1919
                self.match(XplorMRParser.Soff)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Prdc_assignContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Assign(self):
            return self.getToken(XplorMRParser.Assign, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.SelectionContext,i)


        def number(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.NumberContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.NumberContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_prdc_assign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrdc_assign" ):
                listener.enterPrdc_assign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrdc_assign" ):
                listener.exitPrdc_assign(self)




    def prdc_assign(self):

        localctx = XplorMRParser.Prdc_assignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 168, self.RULE_prdc_assign)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1922
            self.match(XplorMRParser.Assign)
            self.state = 1923
            self.selection()
            self.state = 1924
            self.selection()
            self.state = 1925
            self.selection()
            self.state = 1926
            self.selection()
            self.state = 1927
            self.selection()
            self.state = 1928
            self.selection()
            self.state = 1929
            self.number()
            self.state = 1931
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 195)) & ~0x3f) == 0 and ((1 << (_la - 195)) & 262149) != 0):
                self.state = 1930
                self.number()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Porientation_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def porientation_assign(self):
            return self.getTypedRuleContext(XplorMRParser.Porientation_assignContext,0)


        def classification(self):
            return self.getTypedRuleContext(XplorMRParser.ClassificationContext,0)


        def ForceConstant(self):
            return self.getToken(XplorMRParser.ForceConstant, 0)

        def number_s(self):
            return self.getTypedRuleContext(XplorMRParser.Number_sContext,0)


        def Equ_op(self):
            return self.getToken(XplorMRParser.Equ_op, 0)

        def Nrestraints(self):
            return self.getToken(XplorMRParser.Nrestraints, 0)

        def Integer(self):
            return self.getToken(XplorMRParser.Integer, 0)

        def Print(self):
            return self.getToken(XplorMRParser.Print, 0)

        def Threshold(self):
            return self.getToken(XplorMRParser.Threshold, 0)

        def Reset(self):
            return self.getToken(XplorMRParser.Reset, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_porientation_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPorientation_statement" ):
                listener.enterPorientation_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPorientation_statement" ):
                listener.exitPorientation_statement(self)




    def porientation_statement(self):

        localctx = XplorMRParser.Porientation_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 170, self.RULE_porientation_statement)
        self._la = 0 # Token type
        try:
            self.state = 1949
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [4]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1933
                self.porientation_assign()
                pass
            elif token in [9]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1934
                self.classification()
                pass
            elif token in [43]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1935
                self.match(XplorMRParser.ForceConstant)
                self.state = 1937
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==207:
                    self.state = 1936
                    self.match(XplorMRParser.Equ_op)


                self.state = 1939
                self.number_s()
                pass
            elif token in [14]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1940
                self.match(XplorMRParser.Nrestraints)
                self.state = 1942
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==207:
                    self.state = 1941
                    self.match(XplorMRParser.Equ_op)


                self.state = 1944
                self.match(XplorMRParser.Integer)
                pass
            elif token in [17]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1945
                self.match(XplorMRParser.Print)
                self.state = 1946
                self.match(XplorMRParser.Threshold)
                self.state = 1947
                self.number_s()
                pass
            elif token in [19]:
                self.enterOuterAlt(localctx, 6)
                self.state = 1948
                self.match(XplorMRParser.Reset)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Porientation_assignContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Assign(self):
            return self.getToken(XplorMRParser.Assign, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.SelectionContext,i)


        def number(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.NumberContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.NumberContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_porientation_assign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPorientation_assign" ):
                listener.enterPorientation_assign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPorientation_assign" ):
                listener.exitPorientation_assign(self)




    def porientation_assign(self):

        localctx = XplorMRParser.Porientation_assignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 172, self.RULE_porientation_assign)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1951
            self.match(XplorMRParser.Assign)
            self.state = 1952
            self.selection()
            self.state = 1953
            self.selection()
            self.state = 1954
            self.number()
            self.state = 1955
            self.number()
            self.state = 1956
            self.number()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pccr_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def pccr_assign(self):
            return self.getTypedRuleContext(XplorMRParser.Pccr_assignContext,0)


        def classification(self):
            return self.getTypedRuleContext(XplorMRParser.ClassificationContext,0)


        def Weip(self):
            return self.getToken(XplorMRParser.Weip, 0)

        def Integer(self):
            return self.getToken(XplorMRParser.Integer, 0)

        def Coefficients(self):
            return self.getToken(XplorMRParser.Coefficients, 0)

        def number_s(self):
            return self.getTypedRuleContext(XplorMRParser.Number_sContext,0)


        def ForceConstant(self):
            return self.getToken(XplorMRParser.ForceConstant, 0)

        def Equ_op(self):
            return self.getToken(XplorMRParser.Equ_op, 0)

        def Nrestraints(self):
            return self.getToken(XplorMRParser.Nrestraints, 0)

        def Print(self):
            return self.getToken(XplorMRParser.Print, 0)

        def Threshold(self):
            return self.getToken(XplorMRParser.Threshold, 0)

        def Reset(self):
            return self.getToken(XplorMRParser.Reset, 0)

        def Frun(self):
            return self.getToken(XplorMRParser.Frun, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_pccr_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPccr_statement" ):
                listener.enterPccr_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPccr_statement" ):
                listener.exitPccr_statement(self)




    def pccr_statement(self):

        localctx = XplorMRParser.Pccr_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 174, self.RULE_pccr_statement)
        self._la = 0 # Token type
        try:
            self.state = 1980
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [4]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1958
                self.pccr_assign()
                pass
            elif token in [9]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1959
                self.classification()
                pass
            elif token in [117]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1960
                self.match(XplorMRParser.Weip)
                self.state = 1961
                self.match(XplorMRParser.Integer)
                pass
            elif token in [42]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1962
                self.match(XplorMRParser.Coefficients)
                self.state = 1963
                self.number_s()
                pass
            elif token in [43]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1964
                self.match(XplorMRParser.ForceConstant)
                self.state = 1966
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==207:
                    self.state = 1965
                    self.match(XplorMRParser.Equ_op)


                self.state = 1968
                self.number_s()
                pass
            elif token in [14]:
                self.enterOuterAlt(localctx, 6)
                self.state = 1969
                self.match(XplorMRParser.Nrestraints)
                self.state = 1971
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==207:
                    self.state = 1970
                    self.match(XplorMRParser.Equ_op)


                self.state = 1973
                self.match(XplorMRParser.Integer)
                pass
            elif token in [17]:
                self.enterOuterAlt(localctx, 7)
                self.state = 1974
                self.match(XplorMRParser.Print)
                self.state = 1975
                self.match(XplorMRParser.Threshold)
                self.state = 1976
                self.number_s()
                pass
            elif token in [19]:
                self.enterOuterAlt(localctx, 8)
                self.state = 1977
                self.match(XplorMRParser.Reset)
                pass
            elif token in [113]:
                self.enterOuterAlt(localctx, 9)
                self.state = 1978
                self.match(XplorMRParser.Frun)
                self.state = 1979
                self.match(XplorMRParser.Integer)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pccr_assignContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Assign(self):
            return self.getToken(XplorMRParser.Assign, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.SelectionContext,i)


        def number(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.NumberContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.NumberContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_pccr_assign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPccr_assign" ):
                listener.enterPccr_assign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPccr_assign" ):
                listener.exitPccr_assign(self)




    def pccr_assign(self):

        localctx = XplorMRParser.Pccr_assignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 176, self.RULE_pccr_assign)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1982
            self.match(XplorMRParser.Assign)
            self.state = 1983
            self.selection()
            self.state = 1984
            self.selection()
            self.state = 1985
            self.selection()
            self.state = 1986
            self.number()
            self.state = 1988
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 195)) & ~0x3f) == 0 and ((1 << (_la - 195)) & 262149) != 0):
                self.state = 1987
                self.number()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Hbond_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def hbond_assign(self):
            return self.getTypedRuleContext(XplorMRParser.Hbond_assignContext,0)


        def hbond_assign_loop(self):
            return self.getTypedRuleContext(XplorMRParser.Hbond_assign_loopContext,0)


        def classification(self):
            return self.getTypedRuleContext(XplorMRParser.ClassificationContext,0)


        def ForceConstant(self):
            return self.getToken(XplorMRParser.ForceConstant, 0)

        def number_s(self):
            return self.getTypedRuleContext(XplorMRParser.Number_sContext,0)


        def Equ_op(self):
            return self.getToken(XplorMRParser.Equ_op, 0)

        def Nrestraints(self):
            return self.getToken(XplorMRParser.Nrestraints, 0)

        def Integer(self):
            return self.getToken(XplorMRParser.Integer, 0)

        def Print(self):
            return self.getToken(XplorMRParser.Print, 0)

        def Threshold(self):
            return self.getToken(XplorMRParser.Threshold, 0)

        def Reset(self):
            return self.getToken(XplorMRParser.Reset, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_hbond_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHbond_statement" ):
                listener.enterHbond_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHbond_statement" ):
                listener.exitHbond_statement(self)




    def hbond_statement(self):

        localctx = XplorMRParser.Hbond_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 178, self.RULE_hbond_statement)
        self._la = 0 # Token type
        try:
            self.state = 2007
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [4]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1990
                self.hbond_assign()
                pass
            elif token in [186]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1991
                self.hbond_assign_loop()
                pass
            elif token in [9]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1992
                self.classification()
                pass
            elif token in [43]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1993
                self.match(XplorMRParser.ForceConstant)
                self.state = 1995
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==207:
                    self.state = 1994
                    self.match(XplorMRParser.Equ_op)


                self.state = 1997
                self.number_s()
                pass
            elif token in [14]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1998
                self.match(XplorMRParser.Nrestraints)
                self.state = 2000
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==207:
                    self.state = 1999
                    self.match(XplorMRParser.Equ_op)


                self.state = 2002
                self.match(XplorMRParser.Integer)
                pass
            elif token in [17]:
                self.enterOuterAlt(localctx, 6)
                self.state = 2003
                self.match(XplorMRParser.Print)
                self.state = 2004
                self.match(XplorMRParser.Threshold)
                self.state = 2005
                self.number_s()
                pass
            elif token in [19]:
                self.enterOuterAlt(localctx, 7)
                self.state = 2006
                self.match(XplorMRParser.Reset)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Hbond_assignContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Assign(self):
            return self.getToken(XplorMRParser.Assign, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.SelectionContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_hbond_assign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHbond_assign" ):
                listener.enterHbond_assign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHbond_assign" ):
                listener.exitHbond_assign(self)




    def hbond_assign(self):

        localctx = XplorMRParser.Hbond_assignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 180, self.RULE_hbond_assign)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2009
            self.match(XplorMRParser.Assign)
            self.state = 2010
            self.selection()
            self.state = 2011
            self.selection()
            self.state = 2012
            self.selection()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Hbond_db_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def hbond_db_assign(self):
            return self.getTypedRuleContext(XplorMRParser.Hbond_db_assignContext,0)


        def hbond_db_assign_loop(self):
            return self.getTypedRuleContext(XplorMRParser.Hbond_db_assign_loopContext,0)


        def Kdir(self):
            return self.getToken(XplorMRParser.Kdir, 0)

        def number_s(self):
            return self.getTypedRuleContext(XplorMRParser.Number_sContext,0)


        def Equ_op(self):
            return self.getToken(XplorMRParser.Equ_op, 0)

        def Klin(self):
            return self.getToken(XplorMRParser.Klin, 0)

        def Nseg(self):
            return self.getToken(XplorMRParser.Nseg, 0)

        def Integer(self):
            return self.getToken(XplorMRParser.Integer, 0)

        def Nmin(self):
            return self.getToken(XplorMRParser.Nmin, 0)

        def Nmax(self):
            return self.getToken(XplorMRParser.Nmax, 0)

        def Segm(self):
            return self.getToken(XplorMRParser.Segm, 0)

        def Simple_name(self):
            return self.getToken(XplorMRParser.Simple_name, 0)

        def Ohcut(self):
            return self.getToken(XplorMRParser.Ohcut, 0)

        def Coh1cut(self):
            return self.getToken(XplorMRParser.Coh1cut, 0)

        def Coh2cut(self):
            return self.getToken(XplorMRParser.Coh2cut, 0)

        def Ohncut(self):
            return self.getToken(XplorMRParser.Ohncut, 0)

        def Updfrq(self):
            return self.getToken(XplorMRParser.Updfrq, 0)

        def Prnfrq(self):
            return self.getToken(XplorMRParser.Prnfrq, 0)

        def Freemode(self):
            return self.getToken(XplorMRParser.Freemode, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_hbond_db_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHbond_db_statement" ):
                listener.enterHbond_db_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHbond_db_statement" ):
                listener.exitHbond_db_statement(self)




    def hbond_db_statement(self):

        localctx = XplorMRParser.Hbond_db_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 182, self.RULE_hbond_db_statement)
        self._la = 0 # Token type
        try:
            self.state = 2081
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [4]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2014
                self.hbond_db_assign()
                pass
            elif token in [186]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2015
                self.hbond_db_assign_loop()
                pass
            elif token in [120]:
                self.enterOuterAlt(localctx, 3)
                self.state = 2016
                self.match(XplorMRParser.Kdir)
                self.state = 2018
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==207:
                    self.state = 2017
                    self.match(XplorMRParser.Equ_op)


                self.state = 2020
                self.number_s()
                pass
            elif token in [121]:
                self.enterOuterAlt(localctx, 4)
                self.state = 2021
                self.match(XplorMRParser.Klin)
                self.state = 2023
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==207:
                    self.state = 2022
                    self.match(XplorMRParser.Equ_op)


                self.state = 2025
                self.number_s()
                pass
            elif token in [122]:
                self.enterOuterAlt(localctx, 5)
                self.state = 2026
                self.match(XplorMRParser.Nseg)
                self.state = 2028
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==207:
                    self.state = 2027
                    self.match(XplorMRParser.Equ_op)


                self.state = 2030
                self.match(XplorMRParser.Integer)
                pass
            elif token in [123]:
                self.enterOuterAlt(localctx, 6)
                self.state = 2031
                self.match(XplorMRParser.Nmin)
                self.state = 2033
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==207:
                    self.state = 2032
                    self.match(XplorMRParser.Equ_op)


                self.state = 2035
                self.match(XplorMRParser.Integer)
                pass
            elif token in [124]:
                self.enterOuterAlt(localctx, 7)
                self.state = 2036
                self.match(XplorMRParser.Nmax)
                self.state = 2038
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==207:
                    self.state = 2037
                    self.match(XplorMRParser.Equ_op)


                self.state = 2040
                self.match(XplorMRParser.Integer)
                pass
            elif token in [125]:
                self.enterOuterAlt(localctx, 8)
                self.state = 2041
                self.match(XplorMRParser.Segm)
                self.state = 2043
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==207:
                    self.state = 2042
                    self.match(XplorMRParser.Equ_op)


                self.state = 2045
                self.match(XplorMRParser.Simple_name)
                pass
            elif token in [126]:
                self.enterOuterAlt(localctx, 9)
                self.state = 2046
                self.match(XplorMRParser.Ohcut)
                self.state = 2048
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==207:
                    self.state = 2047
                    self.match(XplorMRParser.Equ_op)


                self.state = 2050
                self.number_s()
                pass
            elif token in [127]:
                self.enterOuterAlt(localctx, 10)
                self.state = 2051
                self.match(XplorMRParser.Coh1cut)
                self.state = 2053
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==207:
                    self.state = 2052
                    self.match(XplorMRParser.Equ_op)


                self.state = 2055
                self.number_s()
                pass
            elif token in [128]:
                self.enterOuterAlt(localctx, 11)
                self.state = 2056
                self.match(XplorMRParser.Coh2cut)
                self.state = 2058
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==207:
                    self.state = 2057
                    self.match(XplorMRParser.Equ_op)


                self.state = 2060
                self.number_s()
                pass
            elif token in [129]:
                self.enterOuterAlt(localctx, 12)
                self.state = 2061
                self.match(XplorMRParser.Ohncut)
                self.state = 2063
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==207:
                    self.state = 2062
                    self.match(XplorMRParser.Equ_op)


                self.state = 2065
                self.number_s()
                pass
            elif token in [130]:
                self.enterOuterAlt(localctx, 13)
                self.state = 2066
                self.match(XplorMRParser.Updfrq)
                self.state = 2068
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==207:
                    self.state = 2067
                    self.match(XplorMRParser.Equ_op)


                self.state = 2070
                self.match(XplorMRParser.Integer)
                pass
            elif token in [131]:
                self.enterOuterAlt(localctx, 14)
                self.state = 2071
                self.match(XplorMRParser.Prnfrq)
                self.state = 2073
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==207:
                    self.state = 2072
                    self.match(XplorMRParser.Equ_op)


                self.state = 2075
                self.match(XplorMRParser.Integer)
                pass
            elif token in [132]:
                self.enterOuterAlt(localctx, 15)
                self.state = 2076
                self.match(XplorMRParser.Freemode)
                self.state = 2078
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==207:
                    self.state = 2077
                    self.match(XplorMRParser.Equ_op)


                self.state = 2080
                self.match(XplorMRParser.Integer)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Hbond_db_assignContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Assign(self):
            return self.getToken(XplorMRParser.Assign, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.SelectionContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_hbond_db_assign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHbond_db_assign" ):
                listener.enterHbond_db_assign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHbond_db_assign" ):
                listener.exitHbond_db_assign(self)




    def hbond_db_assign(self):

        localctx = XplorMRParser.Hbond_db_assignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 184, self.RULE_hbond_db_assign)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2083
            self.match(XplorMRParser.Assign)
            self.state = 2084
            self.selection()
            self.state = 2085
            self.selection()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Ncs_restraintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Ncs(self):
            return self.getToken(XplorMRParser.Ncs, 0)

        def Restraints(self):
            return self.getToken(XplorMRParser.Restraints, 0)

        def End(self):
            return self.getToken(XplorMRParser.End, 0)

        def ncs_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Ncs_statementContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Ncs_statementContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_ncs_restraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNcs_restraint" ):
                listener.enterNcs_restraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNcs_restraint" ):
                listener.exitNcs_restraint(self)




    def ncs_restraint(self):

        localctx = XplorMRParser.Ncs_restraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 186, self.RULE_ncs_restraint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2087
            self.match(XplorMRParser.Ncs)
            self.state = 2088
            self.match(XplorMRParser.Restraints)
            self.state = 2092
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & 54044295040073728) != 0):
                self.state = 2089
                self.ncs_statement()
                self.state = 2094
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2095
            self.match(XplorMRParser.End)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Ncs_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Group(self):
            return self.getToken(XplorMRParser.Group, 0)

        def End(self):
            return self.getToken(XplorMRParser.End, 0)

        def ncs_group_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Ncs_group_statementContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Ncs_group_statementContext,i)


        def Initialize(self):
            return self.getToken(XplorMRParser.Initialize, 0)

        def Print_any(self):
            return self.getToken(XplorMRParser.Print_any, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_ncs_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNcs_statement" ):
                listener.enterNcs_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNcs_statement" ):
                listener.exitNcs_statement(self)




    def ncs_statement(self):

        localctx = XplorMRParser.Ncs_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 188, self.RULE_ncs_statement)
        self._la = 0 # Token type
        try:
            self.state = 2107
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [54]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2097
                self.match(XplorMRParser.Group)
                self.state = 2101
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==57 or _la==136 or _la==137:
                    self.state = 2098
                    self.ncs_group_statement()
                    self.state = 2103
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 2104
                self.match(XplorMRParser.End)
                pass
            elif token in [55]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2105
                self.match(XplorMRParser.Initialize)
                pass
            elif token in [40]:
                self.enterOuterAlt(localctx, 3)
                self.state = 2106
                self.match(XplorMRParser.Print_any)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Ncs_group_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Equivalence(self):
            return self.getToken(XplorMRParser.Equivalence, 0)

        def selection(self):
            return self.getTypedRuleContext(XplorMRParser.SelectionContext,0)


        def Equ_op(self):
            return self.getToken(XplorMRParser.Equ_op, 0)

        def Sigb(self):
            return self.getToken(XplorMRParser.Sigb, 0)

        def number_s(self):
            return self.getTypedRuleContext(XplorMRParser.Number_sContext,0)


        def Weight(self):
            return self.getToken(XplorMRParser.Weight, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_ncs_group_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNcs_group_statement" ):
                listener.enterNcs_group_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNcs_group_statement" ):
                listener.exitNcs_group_statement(self)




    def ncs_group_statement(self):

        localctx = XplorMRParser.Ncs_group_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 190, self.RULE_ncs_group_statement)
        self._la = 0 # Token type
        try:
            self.state = 2124
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [136]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2109
                self.match(XplorMRParser.Equivalence)
                self.state = 2111
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==207:
                    self.state = 2110
                    self.match(XplorMRParser.Equ_op)


                self.state = 2113
                self.selection()
                pass
            elif token in [137]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2114
                self.match(XplorMRParser.Sigb)
                self.state = 2116
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==207:
                    self.state = 2115
                    self.match(XplorMRParser.Equ_op)


                self.state = 2118
                self.number_s()
                pass
            elif token in [57]:
                self.enterOuterAlt(localctx, 3)
                self.state = 2119
                self.match(XplorMRParser.Weight)
                self.state = 2121
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==207:
                    self.state = 2120
                    self.match(XplorMRParser.Equ_op)


                self.state = 2123
                self.number_s()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SelectionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def L_paren(self):
            return self.getToken(XplorMRParser.L_paren, 0)

        def selection_expression(self):
            return self.getTypedRuleContext(XplorMRParser.Selection_expressionContext,0)


        def R_paren(self):
            return self.getToken(XplorMRParser.R_paren, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_selection

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSelection" ):
                listener.enterSelection(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSelection" ):
                listener.exitSelection(self)




    def selection(self):

        localctx = XplorMRParser.SelectionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 192, self.RULE_selection)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2126
            self.match(XplorMRParser.L_paren)
            self.state = 2127
            self.selection_expression()
            self.state = 2128
            self.match(XplorMRParser.R_paren)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Selection_expressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def term(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.TermContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.TermContext,i)


        def Or_op(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Or_op)
            else:
                return self.getToken(XplorMRParser.Or_op, i)

        def getRuleIndex(self):
            return XplorMRParser.RULE_selection_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSelection_expression" ):
                listener.enterSelection_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSelection_expression" ):
                listener.exitSelection_expression(self)




    def selection_expression(self):

        localctx = XplorMRParser.Selection_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 194, self.RULE_selection_expression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2130
            self.term()
            self.state = 2135
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==190:
                self.state = 2131
                self.match(XplorMRParser.Or_op)
                self.state = 2132
                self.term()
                self.state = 2137
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TermContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def factor(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.FactorContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.FactorContext,i)


        def And_op(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.And_op)
            else:
                return self.getToken(XplorMRParser.And_op, i)

        def getRuleIndex(self):
            return XplorMRParser.RULE_term

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTerm" ):
                listener.enterTerm(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTerm" ):
                listener.exitTerm(self)




    def term(self):

        localctx = XplorMRParser.TermContext(self, self._ctx, self.state)
        self.enterRule(localctx, 196, self.RULE_term)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2138
            self.factor(0)
            self.state = 2143
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==191:
                self.state = 2139
                self.match(XplorMRParser.And_op)
                self.state = 2140
                self.factor(0)
                self.state = 2145
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FactorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def L_paren(self):
            return self.getToken(XplorMRParser.L_paren, 0)

        def selection_expression(self):
            return self.getTypedRuleContext(XplorMRParser.Selection_expressionContext,0)


        def R_paren(self):
            return self.getToken(XplorMRParser.R_paren, 0)

        def All(self):
            return self.getToken(XplorMRParser.All, 0)

        def Atom(self):
            return self.getToken(XplorMRParser.Atom, 0)

        def Simple_names(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Simple_names)
            else:
                return self.getToken(XplorMRParser.Simple_names, i)

        def Simple_name(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Simple_name)
            else:
                return self.getToken(XplorMRParser.Simple_name, i)

        def Integers(self):
            return self.getToken(XplorMRParser.Integers, 0)

        def Integer(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Integer)
            else:
                return self.getToken(XplorMRParser.Integer, i)

        def Attribute(self):
            return self.getToken(XplorMRParser.Attribute, 0)

        def Attr_properties(self):
            return self.getToken(XplorMRParser.Attr_properties, 0)

        def Comparison_ops(self):
            return self.getToken(XplorMRParser.Comparison_ops, 0)

        def number_f(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Number_fContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Number_fContext,i)


        def Abs(self):
            return self.getToken(XplorMRParser.Abs, 0)

        def BondedTo(self):
            return self.getToken(XplorMRParser.BondedTo, 0)

        def factor(self):
            return self.getTypedRuleContext(XplorMRParser.FactorContext,0)


        def ByGroup(self):
            return self.getToken(XplorMRParser.ByGroup, 0)

        def ByRes(self):
            return self.getToken(XplorMRParser.ByRes, 0)

        def Chemical(self):
            return self.getToken(XplorMRParser.Chemical, 0)

        def Symbol_name(self):
            return self.getToken(XplorMRParser.Symbol_name, 0)

        def Colon(self):
            return self.getToken(XplorMRParser.Colon, 0)

        def Hydrogen(self):
            return self.getToken(XplorMRParser.Hydrogen, 0)

        def Id(self):
            return self.getToken(XplorMRParser.Id, 0)

        def Known(self):
            return self.getToken(XplorMRParser.Known, 0)

        def Name(self):
            return self.getToken(XplorMRParser.Name, 0)

        def Double_quote_string(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Double_quote_string)
            else:
                return self.getToken(XplorMRParser.Double_quote_string, i)

        def Not_op(self):
            return self.getToken(XplorMRParser.Not_op, 0)

        def Point(self):
            return self.getToken(XplorMRParser.Point, 0)

        def Cut(self):
            return self.getToken(XplorMRParser.Cut, 0)

        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Comma)
            else:
                return self.getToken(XplorMRParser.Comma, i)

        def Tail(self):
            return self.getToken(XplorMRParser.Tail, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.SelectionContext,i)


        def Equ_op(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Equ_op)
            else:
                return self.getToken(XplorMRParser.Equ_op, i)

        def Head(self):
            return self.getToken(XplorMRParser.Head, 0)

        def Previous(self):
            return self.getToken(XplorMRParser.Previous, 0)

        def Pseudo(self):
            return self.getToken(XplorMRParser.Pseudo, 0)

        def Residue(self):
            return self.getToken(XplorMRParser.Residue, 0)

        def Resname(self):
            return self.getToken(XplorMRParser.Resname, 0)

        def SegIdentifier(self):
            return self.getToken(XplorMRParser.SegIdentifier, 0)

        def Store1(self):
            return self.getToken(XplorMRParser.Store1, 0)

        def Store2(self):
            return self.getToken(XplorMRParser.Store2, 0)

        def Store3(self):
            return self.getToken(XplorMRParser.Store3, 0)

        def Store4(self):
            return self.getToken(XplorMRParser.Store4, 0)

        def Store5(self):
            return self.getToken(XplorMRParser.Store5, 0)

        def Store6(self):
            return self.getToken(XplorMRParser.Store6, 0)

        def Store7(self):
            return self.getToken(XplorMRParser.Store7, 0)

        def Store8(self):
            return self.getToken(XplorMRParser.Store8, 0)

        def Store9(self):
            return self.getToken(XplorMRParser.Store9, 0)

        def Tag(self):
            return self.getToken(XplorMRParser.Tag, 0)

        def Donor(self):
            return self.getToken(XplorMRParser.Donor, 0)

        def Acceptor(self):
            return self.getToken(XplorMRParser.Acceptor, 0)

        def Around(self):
            return self.getToken(XplorMRParser.Around, 0)

        def Saround(self):
            return self.getToken(XplorMRParser.Saround, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_factor

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFactor" ):
                listener.enterFactor(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFactor" ):
                listener.exitFactor(self)



    def factor(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = XplorMRParser.FactorContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 198
        self.enterRecursionRule(localctx, 198, self.RULE_factor, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2285
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,253,self._ctx)
            if la_ == 1:
                self.state = 2147
                self.match(XplorMRParser.L_paren)
                self.state = 2148
                self.selection_expression()
                self.state = 2149
                self.match(XplorMRParser.R_paren)
                pass

            elif la_ == 2:
                self.state = 2151
                self.match(XplorMRParser.All)
                pass

            elif la_ == 3:
                self.state = 2152
                self.match(XplorMRParser.Atom)
                self.state = 2153
                _la = self._input.LA(1)
                if not(_la==201 or _la==202):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 2154
                _la = self._input.LA(1)
                if not(_la==195 or _la==203):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 2155
                _la = self._input.LA(1)
                if not(_la==201 or _la==202):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass

            elif la_ == 4:
                self.state = 2156
                self.match(XplorMRParser.Attribute)
                self.state = 2158
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==219:
                    self.state = 2157
                    self.match(XplorMRParser.Abs)


                self.state = 2160
                self.match(XplorMRParser.Attr_properties)
                self.state = 2161
                self.match(XplorMRParser.Comparison_ops)
                self.state = 2162
                self.number_f()
                pass

            elif la_ == 5:
                self.state = 2163
                self.match(XplorMRParser.BondedTo)
                self.state = 2164
                self.factor(29)
                pass

            elif la_ == 6:
                self.state = 2165
                self.match(XplorMRParser.ByGroup)
                self.state = 2166
                self.factor(28)
                pass

            elif la_ == 7:
                self.state = 2167
                self.match(XplorMRParser.ByRes)
                self.state = 2168
                self.factor(27)
                pass

            elif la_ == 8:
                self.state = 2169
                self.match(XplorMRParser.Chemical)
                self.state = 2177
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [202]:
                    self.state = 2170
                    self.match(XplorMRParser.Simple_names)
                    pass
                elif token in [201]:
                    self.state = 2171
                    self.match(XplorMRParser.Simple_name)
                    self.state = 2174
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,235,self._ctx)
                    if la_ == 1:
                        self.state = 2172
                        self.match(XplorMRParser.Colon)
                        self.state = 2173
                        self.match(XplorMRParser.Simple_name)


                    pass
                elif token in [213]:
                    self.state = 2176
                    self.match(XplorMRParser.Symbol_name)
                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 9:
                self.state = 2179
                self.match(XplorMRParser.Hydrogen)
                pass

            elif la_ == 10:
                self.state = 2180
                self.match(XplorMRParser.Id)
                self.state = 2181
                self.match(XplorMRParser.Integer)
                pass

            elif la_ == 11:
                self.state = 2182
                self.match(XplorMRParser.Known)
                pass

            elif la_ == 12:
                self.state = 2183
                self.match(XplorMRParser.Name)
                self.state = 2196
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [202]:
                    self.state = 2184
                    self.match(XplorMRParser.Simple_names)
                    pass
                elif token in [201]:
                    self.state = 2185
                    self.match(XplorMRParser.Simple_name)
                    self.state = 2188
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,237,self._ctx)
                    if la_ == 1:
                        self.state = 2186
                        self.match(XplorMRParser.Colon)
                        self.state = 2187
                        self.match(XplorMRParser.Simple_name)


                    pass
                elif token in [198]:
                    self.state = 2190
                    self.match(XplorMRParser.Double_quote_string)
                    self.state = 2193
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,238,self._ctx)
                    if la_ == 1:
                        self.state = 2191
                        self.match(XplorMRParser.Colon)
                        self.state = 2192
                        self.match(XplorMRParser.Double_quote_string)


                    pass
                elif token in [213]:
                    self.state = 2195
                    self.match(XplorMRParser.Symbol_name)
                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 13:
                self.state = 2198
                self.match(XplorMRParser.Not_op)
                self.state = 2199
                self.factor(21)
                pass

            elif la_ == 14:
                self.state = 2200
                self.match(XplorMRParser.Point)
                self.state = 2201
                self.match(XplorMRParser.L_paren)
                self.state = 2202
                self.number_f()
                self.state = 2204
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==193:
                    self.state = 2203
                    self.match(XplorMRParser.Comma)


                self.state = 2206
                self.number_f()
                self.state = 2208
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==193:
                    self.state = 2207
                    self.match(XplorMRParser.Comma)


                self.state = 2210
                self.number_f()
                self.state = 2211
                self.match(XplorMRParser.R_paren)
                self.state = 2212
                self.match(XplorMRParser.Cut)
                self.state = 2213
                self.number_f()
                pass

            elif la_ == 15:
                self.state = 2215
                self.match(XplorMRParser.Point)
                self.state = 2216
                self.match(XplorMRParser.L_paren)
                self.state = 2217
                self.match(XplorMRParser.Tail)
                self.state = 2219
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==207:
                    self.state = 2218
                    self.match(XplorMRParser.Equ_op)


                self.state = 2221
                self.selection()
                self.state = 2223
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==193:
                    self.state = 2222
                    self.match(XplorMRParser.Comma)


                self.state = 2230
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==189:
                    self.state = 2225
                    self.match(XplorMRParser.Head)
                    self.state = 2227
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==207:
                        self.state = 2226
                        self.match(XplorMRParser.Equ_op)


                    self.state = 2229
                    self.selection()


                self.state = 2232
                self.match(XplorMRParser.R_paren)
                self.state = 2233
                self.match(XplorMRParser.Cut)
                self.state = 2234
                self.number_f()
                pass

            elif la_ == 16:
                self.state = 2236
                self.match(XplorMRParser.Previous)
                pass

            elif la_ == 17:
                self.state = 2237
                self.match(XplorMRParser.Pseudo)
                pass

            elif la_ == 18:
                self.state = 2238
                self.match(XplorMRParser.Residue)
                self.state = 2246
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [203]:
                    self.state = 2239
                    self.match(XplorMRParser.Integers)
                    pass
                elif token in [195]:
                    self.state = 2240
                    self.match(XplorMRParser.Integer)
                    self.state = 2243
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,246,self._ctx)
                    if la_ == 1:
                        self.state = 2241
                        self.match(XplorMRParser.Colon)
                        self.state = 2242
                        self.match(XplorMRParser.Integer)


                    pass
                elif token in [213]:
                    self.state = 2245
                    self.match(XplorMRParser.Symbol_name)
                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 19:
                self.state = 2248
                self.match(XplorMRParser.Resname)
                self.state = 2256
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [202]:
                    self.state = 2249
                    self.match(XplorMRParser.Simple_names)
                    pass
                elif token in [201]:
                    self.state = 2250
                    self.match(XplorMRParser.Simple_name)
                    self.state = 2253
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,248,self._ctx)
                    if la_ == 1:
                        self.state = 2251
                        self.match(XplorMRParser.Colon)
                        self.state = 2252
                        self.match(XplorMRParser.Simple_name)


                    pass
                elif token in [213]:
                    self.state = 2255
                    self.match(XplorMRParser.Symbol_name)
                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 20:
                self.state = 2258
                self.match(XplorMRParser.SegIdentifier)
                self.state = 2271
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [202]:
                    self.state = 2259
                    self.match(XplorMRParser.Simple_names)
                    pass
                elif token in [201]:
                    self.state = 2260
                    self.match(XplorMRParser.Simple_name)
                    self.state = 2263
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,250,self._ctx)
                    if la_ == 1:
                        self.state = 2261
                        self.match(XplorMRParser.Colon)
                        self.state = 2262
                        self.match(XplorMRParser.Simple_name)


                    pass
                elif token in [198]:
                    self.state = 2265
                    self.match(XplorMRParser.Double_quote_string)
                    self.state = 2268
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,251,self._ctx)
                    if la_ == 1:
                        self.state = 2266
                        self.match(XplorMRParser.Colon)
                        self.state = 2267
                        self.match(XplorMRParser.Double_quote_string)


                    pass
                elif token in [213]:
                    self.state = 2270
                    self.match(XplorMRParser.Symbol_name)
                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 21:
                self.state = 2273
                self.match(XplorMRParser.Store1)
                pass

            elif la_ == 22:
                self.state = 2274
                self.match(XplorMRParser.Store2)
                pass

            elif la_ == 23:
                self.state = 2275
                self.match(XplorMRParser.Store3)
                pass

            elif la_ == 24:
                self.state = 2276
                self.match(XplorMRParser.Store4)
                pass

            elif la_ == 25:
                self.state = 2277
                self.match(XplorMRParser.Store5)
                pass

            elif la_ == 26:
                self.state = 2278
                self.match(XplorMRParser.Store6)
                pass

            elif la_ == 27:
                self.state = 2279
                self.match(XplorMRParser.Store7)
                pass

            elif la_ == 28:
                self.state = 2280
                self.match(XplorMRParser.Store8)
                pass

            elif la_ == 29:
                self.state = 2281
                self.match(XplorMRParser.Store9)
                pass

            elif la_ == 30:
                self.state = 2282
                self.match(XplorMRParser.Tag)
                pass

            elif la_ == 31:
                self.state = 2283
                self.match(XplorMRParser.Donor)
                pass

            elif la_ == 32:
                self.state = 2284
                self.match(XplorMRParser.Acceptor)
                pass


            self._ctx.stop = self._input.LT(-1)
            self.state = 2295
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,255,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 2293
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,254,self._ctx)
                    if la_ == 1:
                        localctx = XplorMRParser.FactorContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_factor)
                        self.state = 2287
                        if not self.precpred(self._ctx, 32):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 32)")
                        self.state = 2288
                        self.match(XplorMRParser.Around)
                        self.state = 2289
                        self.number_f()
                        pass

                    elif la_ == 2:
                        localctx = XplorMRParser.FactorContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_factor)
                        self.state = 2290
                        if not self.precpred(self._ctx, 14):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 14)")
                        self.state = 2291
                        self.match(XplorMRParser.Saround)
                        self.state = 2292
                        self.number_f()
                        pass

             
                self.state = 2297
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,255,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class NumberContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Real(self):
            return self.getToken(XplorMRParser.Real, 0)

        def Integer(self):
            return self.getToken(XplorMRParser.Integer, 0)

        def Symbol_name(self):
            return self.getToken(XplorMRParser.Symbol_name, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_number

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNumber" ):
                listener.enterNumber(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNumber" ):
                listener.exitNumber(self)




    def number(self):

        localctx = XplorMRParser.NumberContext(self, self._ctx, self.state)
        self.enterRule(localctx, 200, self.RULE_number)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2298
            _la = self._input.LA(1)
            if not(((((_la - 195)) & ~0x3f) == 0 and ((1 << (_la - 195)) & 262149) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Number_fContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Real(self):
            return self.getToken(XplorMRParser.Real, 0)

        def Integer(self):
            return self.getToken(XplorMRParser.Integer, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_number_f

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNumber_f" ):
                listener.enterNumber_f(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNumber_f" ):
                listener.exitNumber_f(self)




    def number_f(self):

        localctx = XplorMRParser.Number_fContext(self, self._ctx, self.state)
        self.enterRule(localctx, 202, self.RULE_number_f)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2300
            _la = self._input.LA(1)
            if not(_la==195 or _la==197):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Number_sContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Real(self):
            return self.getToken(XplorMRParser.Real, 0)

        def Integer(self):
            return self.getToken(XplorMRParser.Integer, 0)

        def Symbol_name(self):
            return self.getToken(XplorMRParser.Symbol_name, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_number_s

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNumber_s" ):
                listener.enterNumber_s(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNumber_s" ):
                listener.exitNumber_s(self)




    def number_s(self):

        localctx = XplorMRParser.Number_sContext(self, self._ctx, self.state)
        self.enterRule(localctx, 204, self.RULE_number_s)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2302
            _la = self._input.LA(1)
            if not(((((_la - 195)) & ~0x3f) == 0 and ((1 << (_la - 195)) & 262149) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Number_aContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Real(self):
            return self.getToken(XplorMRParser.Real, 0)

        def Integer(self):
            return self.getToken(XplorMRParser.Integer, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_number_a

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNumber_a" ):
                listener.enterNumber_a(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNumber_a" ):
                listener.exitNumber_a(self)




    def number_a(self):

        localctx = XplorMRParser.Number_aContext(self, self._ctx, self.state)
        self.enterRule(localctx, 206, self.RULE_number_a)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2304
            _la = self._input.LA(1)
            if not(_la==195 or _la==197):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ClassificationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Classification(self):
            return self.getToken(XplorMRParser.Classification, 0)

        def class_name(self):
            return self.getTypedRuleContext(XplorMRParser.Class_nameContext,0)


        def Equ_op(self):
            return self.getToken(XplorMRParser.Equ_op, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_classification

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClassification" ):
                listener.enterClassification(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClassification" ):
                listener.exitClassification(self)




    def classification(self):

        localctx = XplorMRParser.ClassificationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 208, self.RULE_classification)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2306
            self.match(XplorMRParser.Classification)
            self.state = 2308
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==207:
                self.state = 2307
                self.match(XplorMRParser.Equ_op)


            self.state = 2310
            self.class_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Class_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Simple_name(self):
            return self.getToken(XplorMRParser.Simple_name, 0)

        def Noe(self):
            return self.getToken(XplorMRParser.Noe, 0)

        def Restraints(self):
            return self.getToken(XplorMRParser.Restraints, 0)

        def AngleDb(self):
            return self.getToken(XplorMRParser.AngleDb, 0)

        def HBonded(self):
            return self.getToken(XplorMRParser.HBonded, 0)

        def Dihedral(self):
            return self.getToken(XplorMRParser.Dihedral, 0)

        def Improper(self):
            return self.getToken(XplorMRParser.Improper, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_class_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClass_name" ):
                listener.enterClass_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClass_name" ):
                listener.exitClass_name(self)




    def class_name(self):

        localctx = XplorMRParser.Class_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 210, self.RULE_class_name)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2312
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 412316860424) != 0) or _la==96 or ((((_la - 180)) & ~0x3f) == 0 and ((1 << (_la - 180)) & 2097155) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Flag_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Flags(self):
            return self.getToken(XplorMRParser.Flags, 0)

        def Include(self):
            return self.getToken(XplorMRParser.Include, 0)

        def End_FL(self):
            return self.getToken(XplorMRParser.End_FL, 0)

        def Exclude(self):
            return self.getToken(XplorMRParser.Exclude, 0)

        def Class_name(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Class_name)
            else:
                return self.getToken(XplorMRParser.Class_name, i)

        def Any_class(self):
            return self.getToken(XplorMRParser.Any_class, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_flag_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFlag_statement" ):
                listener.enterFlag_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFlag_statement" ):
                listener.exitFlag_statement(self)




    def flag_statement(self):

        localctx = XplorMRParser.Flag_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 212, self.RULE_flag_statement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2314
            self.match(XplorMRParser.Flags)
            self.state = 2325
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==236:
                self.state = 2315
                self.match(XplorMRParser.Exclude)
                self.state = 2323
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [237, 239]:
                    self.state = 2319
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==239:
                        self.state = 2316
                        self.match(XplorMRParser.Class_name)
                        self.state = 2321
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    pass
                elif token in [240]:
                    self.state = 2322
                    self.match(XplorMRParser.Any_class)
                    pass
                else:
                    raise NoViableAltException(self)



            self.state = 2327
            self.match(XplorMRParser.Include)
            self.state = 2331
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==239:
                self.state = 2328
                self.match(XplorMRParser.Class_name)
                self.state = 2333
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2334
            self.match(XplorMRParser.End_FL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Vector_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Vector(self):
            return self.getToken(XplorMRParser.Vector, 0)

        def vector_mode(self):
            return self.getTypedRuleContext(XplorMRParser.Vector_modeContext,0)


        def selection(self):
            return self.getTypedRuleContext(XplorMRParser.SelectionContext,0)


        def getRuleIndex(self):
            return XplorMRParser.RULE_vector_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVector_statement" ):
                listener.enterVector_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVector_statement" ):
                listener.exitVector_statement(self)




    def vector_statement(self):

        localctx = XplorMRParser.Vector_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 214, self.RULE_vector_statement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2336
            self.match(XplorMRParser.Vector)
            self.state = 2337
            self.vector_mode()
            self.state = 2338
            self.selection()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Vector_modeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def vector_expression(self):
            return self.getTypedRuleContext(XplorMRParser.Vector_expressionContext,0)


        def R_paren_VE(self):
            return self.getToken(XplorMRParser.R_paren_VE, 0)

        def Do_Lp(self):
            return self.getToken(XplorMRParser.Do_Lp, 0)

        def Identity_Lp(self):
            return self.getToken(XplorMRParser.Identity_Lp, 0)

        def Show(self):
            return self.getToken(XplorMRParser.Show, 0)

        def vector_show_property(self):
            return self.getTypedRuleContext(XplorMRParser.Vector_show_propertyContext,0)


        def getRuleIndex(self):
            return XplorMRParser.RULE_vector_mode

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVector_mode" ):
                listener.enterVector_mode(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVector_mode" ):
                listener.exitVector_mode(self)




    def vector_mode(self):

        localctx = XplorMRParser.Vector_modeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 216, self.RULE_vector_mode)
        self._la = 0 # Token type
        try:
            self.state = 2346
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [170, 171]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2340
                _la = self._input.LA(1)
                if not(_la==170 or _la==171):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 2341
                self.vector_expression()
                self.state = 2342
                self.match(XplorMRParser.R_paren_VE)
                pass
            elif token in [172]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2344
                self.match(XplorMRParser.Show)
                self.state = 2345
                self.vector_show_property()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Vector_expressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Atom_properties_VE(self):
            return self.getToken(XplorMRParser.Atom_properties_VE, 0)

        def Equ_op_VE(self):
            return self.getToken(XplorMRParser.Equ_op_VE, 0)

        def vector_operation(self):
            return self.getTypedRuleContext(XplorMRParser.Vector_operationContext,0)


        def getRuleIndex(self):
            return XplorMRParser.RULE_vector_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVector_expression" ):
                listener.enterVector_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVector_expression" ):
                listener.exitVector_expression(self)




    def vector_expression(self):

        localctx = XplorMRParser.Vector_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 218, self.RULE_vector_expression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2348
            self.match(XplorMRParser.Atom_properties_VE)
            self.state = 2351
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==243:
                self.state = 2349
                self.match(XplorMRParser.Equ_op_VE)
                self.state = 2350
                self.vector_operation()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Vector_operationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def vflc(self):
            return self.getTypedRuleContext(XplorMRParser.VflcContext,0)


        def vector_operation(self):
            return self.getTypedRuleContext(XplorMRParser.Vector_operationContext,0)


        def Add_op_VE(self):
            return self.getToken(XplorMRParser.Add_op_VE, 0)

        def Sub_op_VE(self):
            return self.getToken(XplorMRParser.Sub_op_VE, 0)

        def Mul_op_VE(self):
            return self.getToken(XplorMRParser.Mul_op_VE, 0)

        def Div_op_VE(self):
            return self.getToken(XplorMRParser.Div_op_VE, 0)

        def Exp_op_VE(self):
            return self.getToken(XplorMRParser.Exp_op_VE, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_vector_operation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVector_operation" ):
                listener.enterVector_operation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVector_operation" ):
                listener.exitVector_operation(self)




    def vector_operation(self):

        localctx = XplorMRParser.Vector_operationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 220, self.RULE_vector_operation)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2353
            self.vflc()
            self.state = 2356
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 244)) & ~0x3f) == 0 and ((1 << (_la - 244)) & 31) != 0):
                self.state = 2354
                _la = self._input.LA(1)
                if not(((((_la - 244)) & ~0x3f) == 0 and ((1 << (_la - 244)) & 31) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 2355
                self.vector_operation()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VflcContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Atom_properties_VE(self):
            return self.getToken(XplorMRParser.Atom_properties_VE, 0)

        def vector_func_call(self):
            return self.getTypedRuleContext(XplorMRParser.Vector_func_callContext,0)


        def Integer_VE(self):
            return self.getToken(XplorMRParser.Integer_VE, 0)

        def Real_VE(self):
            return self.getToken(XplorMRParser.Real_VE, 0)

        def Simple_name_VE(self):
            return self.getToken(XplorMRParser.Simple_name_VE, 0)

        def Symbol_name_VE(self):
            return self.getToken(XplorMRParser.Symbol_name_VE, 0)

        def Double_quote_string_VE(self):
            return self.getToken(XplorMRParser.Double_quote_string_VE, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_vflc

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVflc" ):
                listener.enterVflc(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVflc" ):
                listener.exitVflc(self)




    def vflc(self):

        localctx = XplorMRParser.VflcContext(self, self._ctx, self.state)
        self.enterRule(localctx, 222, self.RULE_vflc)
        try:
            self.state = 2365
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [252]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2358
                self.match(XplorMRParser.Atom_properties_VE)
                pass
            elif token in [253, 254, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2359
                self.vector_func_call()
                pass
            elif token in [250]:
                self.enterOuterAlt(localctx, 3)
                self.state = 2360
                self.match(XplorMRParser.Integer_VE)
                pass
            elif token in [251]:
                self.enterOuterAlt(localctx, 4)
                self.state = 2361
                self.match(XplorMRParser.Real_VE)
                pass
            elif token in [276]:
                self.enterOuterAlt(localctx, 5)
                self.state = 2362
                self.match(XplorMRParser.Simple_name_VE)
                pass
            elif token in [275]:
                self.enterOuterAlt(localctx, 6)
                self.state = 2363
                self.match(XplorMRParser.Symbol_name_VE)
                pass
            elif token in [277]:
                self.enterOuterAlt(localctx, 7)
                self.state = 2364
                self.match(XplorMRParser.Double_quote_string_VE)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Vector_func_callContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Abs_VE(self):
            return self.getToken(XplorMRParser.Abs_VE, 0)

        def L_paren_VF(self):
            return self.getToken(XplorMRParser.L_paren_VF, 0)

        def vflc(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.VflcContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.VflcContext,i)


        def R_paren_VE(self):
            return self.getToken(XplorMRParser.R_paren_VE, 0)

        def Acos_VE(self):
            return self.getToken(XplorMRParser.Acos_VE, 0)

        def Cos_VE(self):
            return self.getToken(XplorMRParser.Cos_VE, 0)

        def Decode_VE(self):
            return self.getToken(XplorMRParser.Decode_VE, 0)

        def Encode_VE(self):
            return self.getToken(XplorMRParser.Encode_VE, 0)

        def Exp_VE(self):
            return self.getToken(XplorMRParser.Exp_VE, 0)

        def Gauss_VE(self):
            return self.getToken(XplorMRParser.Gauss_VE, 0)

        def Heavy_VE(self):
            return self.getToken(XplorMRParser.Heavy_VE, 0)

        def Int_VE(self):
            return self.getToken(XplorMRParser.Int_VE, 0)

        def Log10_VE(self):
            return self.getToken(XplorMRParser.Log10_VE, 0)

        def Log_VE(self):
            return self.getToken(XplorMRParser.Log_VE, 0)

        def Max_VE(self):
            return self.getToken(XplorMRParser.Max_VE, 0)

        def Comma_VE(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Comma_VE)
            else:
                return self.getToken(XplorMRParser.Comma_VE, i)

        def Maxw_VE(self):
            return self.getToken(XplorMRParser.Maxw_VE, 0)

        def Min_VE(self):
            return self.getToken(XplorMRParser.Min_VE, 0)

        def Mod_VE(self):
            return self.getToken(XplorMRParser.Mod_VE, 0)

        def Norm_VE(self):
            return self.getToken(XplorMRParser.Norm_VE, 0)

        def Random_VE(self):
            return self.getToken(XplorMRParser.Random_VE, 0)

        def Sign_VE(self):
            return self.getToken(XplorMRParser.Sign_VE, 0)

        def Sin_VE(self):
            return self.getToken(XplorMRParser.Sin_VE, 0)

        def Sqrt_VE(self):
            return self.getToken(XplorMRParser.Sqrt_VE, 0)

        def Tan_VE(self):
            return self.getToken(XplorMRParser.Tan_VE, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_vector_func_call

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVector_func_call" ):
                listener.enterVector_func_call(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVector_func_call" ):
                listener.exitVector_func_call(self)




    def vector_func_call(self):

        localctx = XplorMRParser.Vector_func_callContext(self, self._ctx, self.state)
        self.enterRule(localctx, 224, self.RULE_vector_func_call)
        self._la = 0 # Token type
        try:
            self.state = 2486
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [253]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2367
                self.match(XplorMRParser.Abs_VE)
                self.state = 2368
                self.match(XplorMRParser.L_paren_VF)
                self.state = 2369
                self.vflc()
                self.state = 2370
                self.match(XplorMRParser.R_paren_VE)
                pass
            elif token in [254]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2372
                self.match(XplorMRParser.Acos_VE)
                self.state = 2373
                self.match(XplorMRParser.L_paren_VF)
                self.state = 2374
                self.vflc()
                self.state = 2375
                self.match(XplorMRParser.R_paren_VE)
                pass
            elif token in [256]:
                self.enterOuterAlt(localctx, 3)
                self.state = 2377
                self.match(XplorMRParser.Cos_VE)
                self.state = 2378
                self.match(XplorMRParser.L_paren_VF)
                self.state = 2379
                self.vflc()
                self.state = 2380
                self.match(XplorMRParser.R_paren_VE)
                pass
            elif token in [257]:
                self.enterOuterAlt(localctx, 4)
                self.state = 2382
                self.match(XplorMRParser.Decode_VE)
                self.state = 2383
                self.match(XplorMRParser.L_paren_VF)
                self.state = 2384
                self.vflc()
                self.state = 2385
                self.match(XplorMRParser.R_paren_VE)
                pass
            elif token in [258]:
                self.enterOuterAlt(localctx, 5)
                self.state = 2387
                self.match(XplorMRParser.Encode_VE)
                self.state = 2388
                self.match(XplorMRParser.L_paren_VF)
                self.state = 2389
                self.vflc()
                self.state = 2390
                self.match(XplorMRParser.R_paren_VE)
                pass
            elif token in [259]:
                self.enterOuterAlt(localctx, 6)
                self.state = 2392
                self.match(XplorMRParser.Exp_VE)
                self.state = 2393
                self.match(XplorMRParser.L_paren_VF)
                self.state = 2394
                self.vflc()
                self.state = 2395
                self.match(XplorMRParser.R_paren_VE)
                pass
            elif token in [260]:
                self.enterOuterAlt(localctx, 7)
                self.state = 2397
                self.match(XplorMRParser.Gauss_VE)
                self.state = 2398
                self.match(XplorMRParser.L_paren_VF)
                self.state = 2399
                self.vflc()
                self.state = 2400
                self.match(XplorMRParser.R_paren_VE)
                pass
            elif token in [261]:
                self.enterOuterAlt(localctx, 8)
                self.state = 2402
                self.match(XplorMRParser.Heavy_VE)
                self.state = 2403
                self.match(XplorMRParser.L_paren_VF)
                self.state = 2404
                self.vflc()
                self.state = 2405
                self.match(XplorMRParser.R_paren_VE)
                pass
            elif token in [262]:
                self.enterOuterAlt(localctx, 9)
                self.state = 2407
                self.match(XplorMRParser.Int_VE)
                self.state = 2408
                self.match(XplorMRParser.L_paren_VF)
                self.state = 2409
                self.vflc()
                self.state = 2410
                self.match(XplorMRParser.R_paren_VE)
                pass
            elif token in [263]:
                self.enterOuterAlt(localctx, 10)
                self.state = 2412
                self.match(XplorMRParser.Log10_VE)
                self.state = 2413
                self.match(XplorMRParser.L_paren_VF)
                self.state = 2414
                self.vflc()
                self.state = 2415
                self.match(XplorMRParser.R_paren_VE)
                pass
            elif token in [264]:
                self.enterOuterAlt(localctx, 11)
                self.state = 2417
                self.match(XplorMRParser.Log_VE)
                self.state = 2418
                self.match(XplorMRParser.L_paren_VF)
                self.state = 2419
                self.vflc()
                self.state = 2420
                self.match(XplorMRParser.R_paren_VE)
                pass
            elif token in [265]:
                self.enterOuterAlt(localctx, 12)
                self.state = 2422
                self.match(XplorMRParser.Max_VE)
                self.state = 2423
                self.match(XplorMRParser.L_paren_VF)
                self.state = 2424
                self.vflc()
                self.state = 2429
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==249:
                    self.state = 2425
                    self.match(XplorMRParser.Comma_VE)
                    self.state = 2426
                    self.vflc()
                    self.state = 2431
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 2432
                self.match(XplorMRParser.R_paren_VE)
                pass
            elif token in [266]:
                self.enterOuterAlt(localctx, 13)
                self.state = 2434
                self.match(XplorMRParser.Maxw_VE)
                self.state = 2435
                self.match(XplorMRParser.L_paren_VF)
                self.state = 2436
                self.vflc()
                self.state = 2437
                self.match(XplorMRParser.R_paren_VE)
                pass
            elif token in [267]:
                self.enterOuterAlt(localctx, 14)
                self.state = 2439
                self.match(XplorMRParser.Min_VE)
                self.state = 2440
                self.match(XplorMRParser.L_paren_VF)
                self.state = 2441
                self.vflc()
                self.state = 2446
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==249:
                    self.state = 2442
                    self.match(XplorMRParser.Comma_VE)
                    self.state = 2443
                    self.vflc()
                    self.state = 2448
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 2449
                self.match(XplorMRParser.R_paren_VE)
                pass
            elif token in [268]:
                self.enterOuterAlt(localctx, 15)
                self.state = 2451
                self.match(XplorMRParser.Mod_VE)
                self.state = 2452
                self.match(XplorMRParser.L_paren_VF)
                self.state = 2453
                self.vflc()
                self.state = 2454
                self.match(XplorMRParser.Comma_VE)
                self.state = 2455
                self.vflc()
                self.state = 2456
                self.match(XplorMRParser.R_paren_VE)
                pass
            elif token in [269]:
                self.enterOuterAlt(localctx, 16)
                self.state = 2458
                self.match(XplorMRParser.Norm_VE)
                self.state = 2459
                self.match(XplorMRParser.L_paren_VF)
                self.state = 2460
                self.vflc()
                self.state = 2461
                self.match(XplorMRParser.R_paren_VE)
                pass
            elif token in [270]:
                self.enterOuterAlt(localctx, 17)
                self.state = 2463
                self.match(XplorMRParser.Random_VE)
                self.state = 2464
                self.match(XplorMRParser.L_paren_VF)
                self.state = 2465
                self.match(XplorMRParser.R_paren_VE)
                pass
            elif token in [271]:
                self.enterOuterAlt(localctx, 18)
                self.state = 2466
                self.match(XplorMRParser.Sign_VE)
                self.state = 2467
                self.match(XplorMRParser.L_paren_VF)
                self.state = 2468
                self.vflc()
                self.state = 2469
                self.match(XplorMRParser.R_paren_VE)
                pass
            elif token in [272]:
                self.enterOuterAlt(localctx, 19)
                self.state = 2471
                self.match(XplorMRParser.Sin_VE)
                self.state = 2472
                self.match(XplorMRParser.L_paren_VF)
                self.state = 2473
                self.vflc()
                self.state = 2474
                self.match(XplorMRParser.R_paren_VE)
                pass
            elif token in [273]:
                self.enterOuterAlt(localctx, 20)
                self.state = 2476
                self.match(XplorMRParser.Sqrt_VE)
                self.state = 2477
                self.match(XplorMRParser.L_paren_VF)
                self.state = 2478
                self.vflc()
                self.state = 2479
                self.match(XplorMRParser.R_paren_VE)
                pass
            elif token in [274]:
                self.enterOuterAlt(localctx, 21)
                self.state = 2481
                self.match(XplorMRParser.Tan_VE)
                self.state = 2482
                self.match(XplorMRParser.L_paren_VF)
                self.state = 2483
                self.vflc()
                self.state = 2484
                self.match(XplorMRParser.R_paren_VE)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Vector_show_propertyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def L_paren_VS(self):
            return self.getToken(XplorMRParser.L_paren_VS, 0)

        def Atom_properties_VS(self):
            return self.getToken(XplorMRParser.Atom_properties_VS, 0)

        def R_paren_VS(self):
            return self.getToken(XplorMRParser.R_paren_VS, 0)

        def Average_VS(self):
            return self.getToken(XplorMRParser.Average_VS, 0)

        def Element_VS(self):
            return self.getToken(XplorMRParser.Element_VS, 0)

        def Max_VS(self):
            return self.getToken(XplorMRParser.Max_VS, 0)

        def Min_VS(self):
            return self.getToken(XplorMRParser.Min_VS, 0)

        def Norm_VS(self):
            return self.getToken(XplorMRParser.Norm_VS, 0)

        def Rms_VS(self):
            return self.getToken(XplorMRParser.Rms_VS, 0)

        def Sum_VS(self):
            return self.getToken(XplorMRParser.Sum_VS, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_vector_show_property

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVector_show_property" ):
                listener.enterVector_show_property(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVector_show_property" ):
                listener.exitVector_show_property(self)




    def vector_show_property(self):

        localctx = XplorMRParser.Vector_show_propertyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 226, self.RULE_vector_show_property)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2488
            _la = self._input.LA(1)
            if not(((((_la - 283)) & ~0x3f) == 0 and ((1 << (_la - 283)) & 127) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 2489
            self.match(XplorMRParser.L_paren_VS)
            self.state = 2490
            self.match(XplorMRParser.Atom_properties_VS)
            self.state = 2491
            self.match(XplorMRParser.R_paren_VS)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Evaluate_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Evaluate_Lp(self):
            return self.getToken(XplorMRParser.Evaluate_Lp, 0)

        def Symbol_name_VE(self):
            return self.getToken(XplorMRParser.Symbol_name_VE, 0)

        def Equ_op_VE(self):
            return self.getToken(XplorMRParser.Equ_op_VE, 0)

        def evaluate_operation(self):
            return self.getTypedRuleContext(XplorMRParser.Evaluate_operationContext,0)


        def R_paren_VE(self):
            return self.getToken(XplorMRParser.R_paren_VE, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_evaluate_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEvaluate_statement" ):
                listener.enterEvaluate_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEvaluate_statement" ):
                listener.exitEvaluate_statement(self)




    def evaluate_statement(self):

        localctx = XplorMRParser.Evaluate_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 228, self.RULE_evaluate_statement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2493
            self.match(XplorMRParser.Evaluate_Lp)
            self.state = 2494
            self.match(XplorMRParser.Symbol_name_VE)
            self.state = 2495
            self.match(XplorMRParser.Equ_op_VE)
            self.state = 2496
            self.evaluate_operation()
            self.state = 2497
            self.match(XplorMRParser.R_paren_VE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Evaluate_operationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def vflc(self):
            return self.getTypedRuleContext(XplorMRParser.VflcContext,0)


        def evaluate_operation(self):
            return self.getTypedRuleContext(XplorMRParser.Evaluate_operationContext,0)


        def Add_op_VE(self):
            return self.getToken(XplorMRParser.Add_op_VE, 0)

        def Sub_op_VE(self):
            return self.getToken(XplorMRParser.Sub_op_VE, 0)

        def Mul_op_VE(self):
            return self.getToken(XplorMRParser.Mul_op_VE, 0)

        def Div_op_VE(self):
            return self.getToken(XplorMRParser.Div_op_VE, 0)

        def Exp_op_VE(self):
            return self.getToken(XplorMRParser.Exp_op_VE, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_evaluate_operation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEvaluate_operation" ):
                listener.enterEvaluate_operation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEvaluate_operation" ):
                listener.exitEvaluate_operation(self)




    def evaluate_operation(self):

        localctx = XplorMRParser.Evaluate_operationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 230, self.RULE_evaluate_operation)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2499
            self.vflc()
            self.state = 2502
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 244)) & ~0x3f) == 0 and ((1 << (_la - 244)) & 31) != 0):
                self.state = 2500
                _la = self._input.LA(1)
                if not(((((_la - 244)) & ~0x3f) == 0 and ((1 << (_la - 244)) & 31) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 2501
                self.evaluate_operation()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Patch_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Patch(self):
            return self.getToken(XplorMRParser.Patch, 0)

        def Reference(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Reference)
            else:
                return self.getToken(XplorMRParser.Reference, i)

        def Equ_op(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Equ_op)
            else:
                return self.getToken(XplorMRParser.Equ_op, i)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.SelectionContext,i)


        def End(self):
            return self.getToken(XplorMRParser.End, 0)

        def Nil(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Nil)
            else:
                return self.getToken(XplorMRParser.Nil, i)

        def Integer(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Integer)
            else:
                return self.getToken(XplorMRParser.Integer, i)

        def class_name(self):
            return self.getTypedRuleContext(XplorMRParser.Class_nameContext,0)


        def getRuleIndex(self):
            return XplorMRParser.RULE_patch_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPatch_statement" ):
                listener.enterPatch_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPatch_statement" ):
                listener.exitPatch_statement(self)




    def patch_statement(self):

        localctx = XplorMRParser.Patch_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 232, self.RULE_patch_statement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2504
            self.match(XplorMRParser.Patch)
            self.state = 2506
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 412316860424) != 0) or _la==96 or ((((_la - 180)) & ~0x3f) == 0 and ((1 << (_la - 180)) & 2097155) != 0):
                self.state = 2505
                self.class_name()


            self.state = 2508
            self.match(XplorMRParser.Reference)
            self.state = 2509
            self.match(XplorMRParser.Equ_op)
            self.state = 2510
            _la = self._input.LA(1)
            if not(_la==176 or _la==195):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 2511
            self.match(XplorMRParser.Equ_op)
            self.state = 2512
            self.selection()
            self.state = 2518
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==175:
                self.state = 2513
                self.match(XplorMRParser.Reference)
                self.state = 2514
                self.match(XplorMRParser.Equ_op)
                self.state = 2515
                _la = self._input.LA(1)
                if not(_la==176 or _la==195):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 2516
                self.match(XplorMRParser.Equ_op)
                self.state = 2517
                self.selection()


            self.state = 2520
            self.match(XplorMRParser.End)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Parameter_settingContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Parameter(self):
            return self.getToken(XplorMRParser.Parameter, 0)

        def End(self):
            return self.getToken(XplorMRParser.End, 0)

        def parameter_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Parameter_statementContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Parameter_statementContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_parameter_setting

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParameter_setting" ):
                listener.enterParameter_setting(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParameter_setting" ):
                listener.exitParameter_setting(self)




    def parameter_setting(self):

        localctx = XplorMRParser.Parameter_settingContext(self, self._ctx, self.state)
        self.enterRule(localctx, 234, self.RULE_parameter_setting)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2522
            self.match(XplorMRParser.Parameter)
            self.state = 2526
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==19 or _la==38 or _la==96 or _la==143 or ((((_la - 180)) & ~0x3f) == 0 and ((1 << (_la - 180)) & 63) != 0):
                self.state = 2523
                self.parameter_statement()
                self.state = 2528
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2529
            self.match(XplorMRParser.End)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Parameter_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AngleDb(self):
            return self.getToken(XplorMRParser.AngleDb, 0)

        def Simple_name(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Simple_name)
            else:
                return self.getToken(XplorMRParser.Simple_name, i)

        def number_s(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Number_sContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Number_sContext,i)


        def UB(self):
            return self.getToken(XplorMRParser.UB, 0)

        def BondedTo(self):
            return self.getToken(XplorMRParser.BondedTo, 0)

        def Integer(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Integer)
            else:
                return self.getToken(XplorMRParser.Integer, i)

        def Dihedral(self):
            return self.getToken(XplorMRParser.Dihedral, 0)

        def Improper(self):
            return self.getToken(XplorMRParser.Improper, 0)

        def Mult(self):
            return self.getToken(XplorMRParser.Mult, 0)

        def HBonded(self):
            return self.getToken(XplorMRParser.HBonded, 0)

        def Simple_names(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Simple_names)
            else:
                return self.getToken(XplorMRParser.Simple_names, i)

        def NBFix(self):
            return self.getToken(XplorMRParser.NBFix, 0)

        def NonB(self):
            return self.getToken(XplorMRParser.NonB, 0)

        def Reset(self):
            return self.getToken(XplorMRParser.Reset, 0)

        def VDWOff(self):
            return self.getToken(XplorMRParser.VDWOff, 0)

        def Verbose(self):
            return self.getToken(XplorMRParser.Verbose, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_parameter_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParameter_statement" ):
                listener.enterParameter_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParameter_statement" ):
                listener.exitParameter_statement(self)




    def parameter_statement(self):

        localctx = XplorMRParser.Parameter_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 236, self.RULE_parameter_statement)
        self._la = 0 # Token type
        try:
            self.state = 2586
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [96]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2531
                self.match(XplorMRParser.AngleDb)
                self.state = 2532
                self.match(XplorMRParser.Simple_name)
                self.state = 2533
                self.match(XplorMRParser.Simple_name)
                self.state = 2534
                self.match(XplorMRParser.Simple_name)
                self.state = 2535
                self.number_s()
                self.state = 2536
                self.number_s()
                self.state = 2541
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==178:
                    self.state = 2537
                    self.match(XplorMRParser.UB)
                    self.state = 2538
                    self.number_s()
                    self.state = 2539
                    self.number_s()


                pass
            elif token in [143]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2543
                self.match(XplorMRParser.BondedTo)
                self.state = 2544
                self.match(XplorMRParser.Simple_name)
                self.state = 2545
                self.match(XplorMRParser.Simple_name)
                self.state = 2546
                self.number_s()
                self.state = 2547
                self.number_s()
                pass
            elif token in [38, 181]:
                self.enterOuterAlt(localctx, 3)
                self.state = 2549
                _la = self._input.LA(1)
                if not(_la==38 or _la==181):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 2550
                self.match(XplorMRParser.Simple_name)
                self.state = 2551
                self.match(XplorMRParser.Simple_name)
                self.state = 2552
                self.match(XplorMRParser.Simple_name)
                self.state = 2553
                self.match(XplorMRParser.Simple_name)
                self.state = 2556
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==179:
                    self.state = 2554
                    self.match(XplorMRParser.Mult)
                    self.state = 2555
                    self.match(XplorMRParser.Integer)


                self.state = 2558
                self.number_s()
                self.state = 2559
                self.match(XplorMRParser.Integer)
                self.state = 2560
                self.number_s()
                pass
            elif token in [180]:
                self.enterOuterAlt(localctx, 4)
                self.state = 2562
                self.match(XplorMRParser.HBonded)
                self.state = 2563
                self.match(XplorMRParser.Simple_names)
                self.state = 2564
                self.match(XplorMRParser.Simple_names)
                self.state = 2565
                self.number_s()
                self.state = 2566
                self.number_s()
                pass
            elif token in [182]:
                self.enterOuterAlt(localctx, 5)
                self.state = 2568
                self.match(XplorMRParser.NBFix)
                self.state = 2569
                self.match(XplorMRParser.Simple_name)
                self.state = 2570
                self.match(XplorMRParser.Simple_name)
                self.state = 2571
                self.number_s()
                self.state = 2572
                self.number_s()
                self.state = 2573
                self.number_s()
                self.state = 2574
                self.number_s()
                pass
            elif token in [183]:
                self.enterOuterAlt(localctx, 6)
                self.state = 2576
                self.match(XplorMRParser.NonB)
                self.state = 2577
                self.match(XplorMRParser.Simple_name)
                self.state = 2578
                self.number_s()
                self.state = 2579
                self.number_s()
                self.state = 2580
                self.number_s()
                self.state = 2581
                self.number_s()
                pass
            elif token in [19, 184]:
                self.enterOuterAlt(localctx, 7)
                self.state = 2583
                _la = self._input.LA(1)
                if not(_la==19 or _la==184):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 2584
                self.match(XplorMRParser.Simple_name)
                pass
            elif token in [185]:
                self.enterOuterAlt(localctx, 8)
                self.state = 2585
                self.match(XplorMRParser.Verbose)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Noe_assign_loopContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def For(self):
            return self.getToken(XplorMRParser.For, 0)

        def Symbol_name_CF(self):
            return self.getToken(XplorMRParser.Symbol_name_CF, 0)

        def In_CF(self):
            return self.getToken(XplorMRParser.In_CF, 0)

        def L_paren_CF(self):
            return self.getToken(XplorMRParser.L_paren_CF, 0)

        def R_paren_CF(self):
            return self.getToken(XplorMRParser.R_paren_CF, 0)

        def Loop(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Loop)
            else:
                return self.getToken(XplorMRParser.Loop, i)

        def Simple_name_LL(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Simple_name_LL)
            else:
                return self.getToken(XplorMRParser.Simple_name_LL, i)

        def End(self):
            return self.getToken(XplorMRParser.End, 0)

        def evaluate_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Evaluate_statementContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Evaluate_statementContext,i)


        def noe_assign(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Noe_assignContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Noe_assignContext,i)


        def distance_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Distance_restraintContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Distance_restraintContext,i)


        def Integer_CF(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Integer_CF)
            else:
                return self.getToken(XplorMRParser.Integer_CF, i)

        def Real_CF(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Real_CF)
            else:
                return self.getToken(XplorMRParser.Real_CF, i)

        def Simple_name_CF(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Simple_name_CF)
            else:
                return self.getToken(XplorMRParser.Simple_name_CF, i)

        def getRuleIndex(self):
            return XplorMRParser.RULE_noe_assign_loop

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNoe_assign_loop" ):
                listener.enterNoe_assign_loop(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNoe_assign_loop" ):
                listener.exitNoe_assign_loop(self)




    def noe_assign_loop(self):

        localctx = XplorMRParser.Noe_assign_loopContext(self, self._ctx, self.state)
        self.enterRule(localctx, 238, self.RULE_noe_assign_loop)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2588
            self.match(XplorMRParser.For)
            self.state = 2589
            self.match(XplorMRParser.Symbol_name_CF)
            self.state = 2590
            self.match(XplorMRParser.In_CF)
            self.state = 2591
            self.match(XplorMRParser.L_paren_CF)
            self.state = 2610
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,278,self._ctx)
            if la_ == 1:
                self.state = 2595
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==295:
                    self.state = 2592
                    self.match(XplorMRParser.Integer_CF)
                    self.state = 2597
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 2:
                self.state = 2601
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==296:
                    self.state = 2598
                    self.match(XplorMRParser.Real_CF)
                    self.state = 2603
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 3:
                self.state = 2607
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==298:
                    self.state = 2604
                    self.match(XplorMRParser.Simple_name_CF)
                    self.state = 2609
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass


            self.state = 2612
            self.match(XplorMRParser.R_paren_CF)
            self.state = 2613
            self.match(XplorMRParser.Loop)
            self.state = 2614
            self.match(XplorMRParser.Simple_name_LL)
            self.state = 2620
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==3 or _la==4 or _la==173:
                self.state = 2618
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [173]:
                    self.state = 2615
                    self.evaluate_statement()
                    pass
                elif token in [4]:
                    self.state = 2616
                    self.noe_assign()
                    pass
                elif token in [3]:
                    self.state = 2617
                    self.distance_restraint()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 2622
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2623
            self.match(XplorMRParser.End)
            self.state = 2624
            self.match(XplorMRParser.Loop)
            self.state = 2625
            self.match(XplorMRParser.Simple_name_LL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Dihedral_assign_loopContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def For(self):
            return self.getToken(XplorMRParser.For, 0)

        def Symbol_name_CF(self):
            return self.getToken(XplorMRParser.Symbol_name_CF, 0)

        def In_CF(self):
            return self.getToken(XplorMRParser.In_CF, 0)

        def L_paren_CF(self):
            return self.getToken(XplorMRParser.L_paren_CF, 0)

        def R_paren_CF(self):
            return self.getToken(XplorMRParser.R_paren_CF, 0)

        def Loop(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Loop)
            else:
                return self.getToken(XplorMRParser.Loop, i)

        def Simple_name_LL(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Simple_name_LL)
            else:
                return self.getToken(XplorMRParser.Simple_name_LL, i)

        def End(self):
            return self.getToken(XplorMRParser.End, 0)

        def evaluate_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Evaluate_statementContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Evaluate_statementContext,i)


        def dihedral_assign(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Dihedral_assignContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Dihedral_assignContext,i)


        def dihedral_angle_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Dihedral_angle_restraintContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Dihedral_angle_restraintContext,i)


        def Integer_CF(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Integer_CF)
            else:
                return self.getToken(XplorMRParser.Integer_CF, i)

        def Real_CF(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Real_CF)
            else:
                return self.getToken(XplorMRParser.Real_CF, i)

        def Simple_name_CF(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Simple_name_CF)
            else:
                return self.getToken(XplorMRParser.Simple_name_CF, i)

        def getRuleIndex(self):
            return XplorMRParser.RULE_dihedral_assign_loop

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDihedral_assign_loop" ):
                listener.enterDihedral_assign_loop(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDihedral_assign_loop" ):
                listener.exitDihedral_assign_loop(self)




    def dihedral_assign_loop(self):

        localctx = XplorMRParser.Dihedral_assign_loopContext(self, self._ctx, self.state)
        self.enterRule(localctx, 240, self.RULE_dihedral_assign_loop)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2627
            self.match(XplorMRParser.For)
            self.state = 2628
            self.match(XplorMRParser.Symbol_name_CF)
            self.state = 2629
            self.match(XplorMRParser.In_CF)
            self.state = 2630
            self.match(XplorMRParser.L_paren_CF)
            self.state = 2649
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,284,self._ctx)
            if la_ == 1:
                self.state = 2634
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==295:
                    self.state = 2631
                    self.match(XplorMRParser.Integer_CF)
                    self.state = 2636
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 2:
                self.state = 2640
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==296:
                    self.state = 2637
                    self.match(XplorMRParser.Real_CF)
                    self.state = 2642
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 3:
                self.state = 2646
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==298:
                    self.state = 2643
                    self.match(XplorMRParser.Simple_name_CF)
                    self.state = 2648
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass


            self.state = 2651
            self.match(XplorMRParser.R_paren_CF)
            self.state = 2652
            self.match(XplorMRParser.Loop)
            self.state = 2653
            self.match(XplorMRParser.Simple_name_LL)
            self.state = 2659
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & 412316860432) != 0) or _la==173:
                self.state = 2657
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [173]:
                    self.state = 2654
                    self.evaluate_statement()
                    pass
                elif token in [4]:
                    self.state = 2655
                    self.dihedral_assign()
                    pass
                elif token in [37, 38]:
                    self.state = 2656
                    self.dihedral_angle_restraint()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 2661
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2662
            self.match(XplorMRParser.End)
            self.state = 2663
            self.match(XplorMRParser.Loop)
            self.state = 2664
            self.match(XplorMRParser.Simple_name_LL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Sani_assign_loopContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def For(self):
            return self.getToken(XplorMRParser.For, 0)

        def Symbol_name_CF(self):
            return self.getToken(XplorMRParser.Symbol_name_CF, 0)

        def In_CF(self):
            return self.getToken(XplorMRParser.In_CF, 0)

        def L_paren_CF(self):
            return self.getToken(XplorMRParser.L_paren_CF, 0)

        def R_paren_CF(self):
            return self.getToken(XplorMRParser.R_paren_CF, 0)

        def Loop(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Loop)
            else:
                return self.getToken(XplorMRParser.Loop, i)

        def Simple_name_LL(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Simple_name_LL)
            else:
                return self.getToken(XplorMRParser.Simple_name_LL, i)

        def End(self):
            return self.getToken(XplorMRParser.End, 0)

        def evaluate_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Evaluate_statementContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Evaluate_statementContext,i)


        def sani_assign(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Sani_assignContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Sani_assignContext,i)


        def rdc_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Rdc_restraintContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Rdc_restraintContext,i)


        def Integer_CF(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Integer_CF)
            else:
                return self.getToken(XplorMRParser.Integer_CF, i)

        def Real_CF(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Real_CF)
            else:
                return self.getToken(XplorMRParser.Real_CF, i)

        def Simple_name_CF(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Simple_name_CF)
            else:
                return self.getToken(XplorMRParser.Simple_name_CF, i)

        def getRuleIndex(self):
            return XplorMRParser.RULE_sani_assign_loop

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSani_assign_loop" ):
                listener.enterSani_assign_loop(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSani_assign_loop" ):
                listener.exitSani_assign_loop(self)




    def sani_assign_loop(self):

        localctx = XplorMRParser.Sani_assign_loopContext(self, self._ctx, self.state)
        self.enterRule(localctx, 242, self.RULE_sani_assign_loop)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2666
            self.match(XplorMRParser.For)
            self.state = 2667
            self.match(XplorMRParser.Symbol_name_CF)
            self.state = 2668
            self.match(XplorMRParser.In_CF)
            self.state = 2669
            self.match(XplorMRParser.L_paren_CF)
            self.state = 2688
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,290,self._ctx)
            if la_ == 1:
                self.state = 2673
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==295:
                    self.state = 2670
                    self.match(XplorMRParser.Integer_CF)
                    self.state = 2675
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 2:
                self.state = 2679
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==296:
                    self.state = 2676
                    self.match(XplorMRParser.Real_CF)
                    self.state = 2681
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 3:
                self.state = 2685
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==298:
                    self.state = 2682
                    self.match(XplorMRParser.Simple_name_CF)
                    self.state = 2687
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass


            self.state = 2690
            self.match(XplorMRParser.R_paren_CF)
            self.state = 2691
            self.match(XplorMRParser.Loop)
            self.state = 2692
            self.match(XplorMRParser.Simple_name_LL)
            self.state = 2698
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & 7091849999155216) != 0) or _la==173:
                self.state = 2696
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [173]:
                    self.state = 2693
                    self.evaluate_statement()
                    pass
                elif token in [4]:
                    self.state = 2694
                    self.sani_assign()
                    pass
                elif token in [41, 44, 45, 48, 51, 52]:
                    self.state = 2695
                    self.rdc_restraint()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 2700
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2701
            self.match(XplorMRParser.End)
            self.state = 2702
            self.match(XplorMRParser.Loop)
            self.state = 2703
            self.match(XplorMRParser.Simple_name_LL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Xadc_assign_loopContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def For(self):
            return self.getToken(XplorMRParser.For, 0)

        def Symbol_name_CF(self):
            return self.getToken(XplorMRParser.Symbol_name_CF, 0)

        def In_CF(self):
            return self.getToken(XplorMRParser.In_CF, 0)

        def L_paren_CF(self):
            return self.getToken(XplorMRParser.L_paren_CF, 0)

        def R_paren_CF(self):
            return self.getToken(XplorMRParser.R_paren_CF, 0)

        def Loop(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Loop)
            else:
                return self.getToken(XplorMRParser.Loop, i)

        def Simple_name_LL(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Simple_name_LL)
            else:
                return self.getToken(XplorMRParser.Simple_name_LL, i)

        def End(self):
            return self.getToken(XplorMRParser.End, 0)

        def evaluate_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Evaluate_statementContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Evaluate_statementContext,i)


        def xadc_assign(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Xadc_assignContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Xadc_assignContext,i)


        def antidistance_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Antidistance_restraintContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Antidistance_restraintContext,i)


        def Integer_CF(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Integer_CF)
            else:
                return self.getToken(XplorMRParser.Integer_CF, i)

        def Real_CF(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Real_CF)
            else:
                return self.getToken(XplorMRParser.Real_CF, i)

        def Simple_name_CF(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Simple_name_CF)
            else:
                return self.getToken(XplorMRParser.Simple_name_CF, i)

        def getRuleIndex(self):
            return XplorMRParser.RULE_xadc_assign_loop

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterXadc_assign_loop" ):
                listener.enterXadc_assign_loop(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitXadc_assign_loop" ):
                listener.exitXadc_assign_loop(self)




    def xadc_assign_loop(self):

        localctx = XplorMRParser.Xadc_assign_loopContext(self, self._ctx, self.state)
        self.enterRule(localctx, 244, self.RULE_xadc_assign_loop)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2705
            self.match(XplorMRParser.For)
            self.state = 2706
            self.match(XplorMRParser.Symbol_name_CF)
            self.state = 2707
            self.match(XplorMRParser.In_CF)
            self.state = 2708
            self.match(XplorMRParser.L_paren_CF)
            self.state = 2727
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,296,self._ctx)
            if la_ == 1:
                self.state = 2712
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==295:
                    self.state = 2709
                    self.match(XplorMRParser.Integer_CF)
                    self.state = 2714
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 2:
                self.state = 2718
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==296:
                    self.state = 2715
                    self.match(XplorMRParser.Real_CF)
                    self.state = 2720
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 3:
                self.state = 2724
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==298:
                    self.state = 2721
                    self.match(XplorMRParser.Simple_name_CF)
                    self.state = 2726
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass


            self.state = 2729
            self.match(XplorMRParser.R_paren_CF)
            self.state = 2730
            self.match(XplorMRParser.Loop)
            self.state = 2731
            self.match(XplorMRParser.Simple_name_LL)
            self.state = 2737
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==4 or _la==61 or _la==173:
                self.state = 2735
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [173]:
                    self.state = 2732
                    self.evaluate_statement()
                    pass
                elif token in [4]:
                    self.state = 2733
                    self.xadc_assign()
                    pass
                elif token in [61]:
                    self.state = 2734
                    self.antidistance_restraint()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 2739
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2740
            self.match(XplorMRParser.End)
            self.state = 2741
            self.match(XplorMRParser.Loop)
            self.state = 2742
            self.match(XplorMRParser.Simple_name_LL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Coup_assign_loopContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def For(self):
            return self.getToken(XplorMRParser.For, 0)

        def Symbol_name_CF(self):
            return self.getToken(XplorMRParser.Symbol_name_CF, 0)

        def In_CF(self):
            return self.getToken(XplorMRParser.In_CF, 0)

        def L_paren_CF(self):
            return self.getToken(XplorMRParser.L_paren_CF, 0)

        def R_paren_CF(self):
            return self.getToken(XplorMRParser.R_paren_CF, 0)

        def Loop(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Loop)
            else:
                return self.getToken(XplorMRParser.Loop, i)

        def Simple_name_LL(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Simple_name_LL)
            else:
                return self.getToken(XplorMRParser.Simple_name_LL, i)

        def End(self):
            return self.getToken(XplorMRParser.End, 0)

        def evaluate_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Evaluate_statementContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Evaluate_statementContext,i)


        def coup_assign(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Coup_assignContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Coup_assignContext,i)


        def coupling_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Coupling_restraintContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Coupling_restraintContext,i)


        def Integer_CF(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Integer_CF)
            else:
                return self.getToken(XplorMRParser.Integer_CF, i)

        def Real_CF(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Real_CF)
            else:
                return self.getToken(XplorMRParser.Real_CF, i)

        def Simple_name_CF(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Simple_name_CF)
            else:
                return self.getToken(XplorMRParser.Simple_name_CF, i)

        def getRuleIndex(self):
            return XplorMRParser.RULE_coup_assign_loop

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCoup_assign_loop" ):
                listener.enterCoup_assign_loop(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCoup_assign_loop" ):
                listener.exitCoup_assign_loop(self)




    def coup_assign_loop(self):

        localctx = XplorMRParser.Coup_assign_loopContext(self, self._ctx, self.state)
        self.enterRule(localctx, 246, self.RULE_coup_assign_loop)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2744
            self.match(XplorMRParser.For)
            self.state = 2745
            self.match(XplorMRParser.Symbol_name_CF)
            self.state = 2746
            self.match(XplorMRParser.In_CF)
            self.state = 2747
            self.match(XplorMRParser.L_paren_CF)
            self.state = 2766
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,302,self._ctx)
            if la_ == 1:
                self.state = 2751
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==295:
                    self.state = 2748
                    self.match(XplorMRParser.Integer_CF)
                    self.state = 2753
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 2:
                self.state = 2757
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==296:
                    self.state = 2754
                    self.match(XplorMRParser.Real_CF)
                    self.state = 2759
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 3:
                self.state = 2763
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==298:
                    self.state = 2760
                    self.match(XplorMRParser.Simple_name_CF)
                    self.state = 2765
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass


            self.state = 2768
            self.match(XplorMRParser.R_paren_CF)
            self.state = 2769
            self.match(XplorMRParser.Loop)
            self.state = 2770
            self.match(XplorMRParser.Simple_name_LL)
            self.state = 2776
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==4 or _la==65 or _la==173:
                self.state = 2774
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [173]:
                    self.state = 2771
                    self.evaluate_statement()
                    pass
                elif token in [4]:
                    self.state = 2772
                    self.coup_assign()
                    pass
                elif token in [65]:
                    self.state = 2773
                    self.coupling_restraint()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 2778
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2779
            self.match(XplorMRParser.End)
            self.state = 2780
            self.match(XplorMRParser.Loop)
            self.state = 2781
            self.match(XplorMRParser.Simple_name_LL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Coll_assign_loopContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def For(self):
            return self.getToken(XplorMRParser.For, 0)

        def Symbol_name_CF(self):
            return self.getToken(XplorMRParser.Symbol_name_CF, 0)

        def In_CF(self):
            return self.getToken(XplorMRParser.In_CF, 0)

        def L_paren_CF(self):
            return self.getToken(XplorMRParser.L_paren_CF, 0)

        def R_paren_CF(self):
            return self.getToken(XplorMRParser.R_paren_CF, 0)

        def Loop(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Loop)
            else:
                return self.getToken(XplorMRParser.Loop, i)

        def Simple_name_LL(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Simple_name_LL)
            else:
                return self.getToken(XplorMRParser.Simple_name_LL, i)

        def End(self):
            return self.getToken(XplorMRParser.End, 0)

        def evaluate_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Evaluate_statementContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Evaluate_statementContext,i)


        def coll_assign(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Coll_assignContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Coll_assignContext,i)


        def radius_of_gyration_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Radius_of_gyration_restraintContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Radius_of_gyration_restraintContext,i)


        def Integer_CF(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Integer_CF)
            else:
                return self.getToken(XplorMRParser.Integer_CF, i)

        def Real_CF(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Real_CF)
            else:
                return self.getToken(XplorMRParser.Real_CF, i)

        def Simple_name_CF(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Simple_name_CF)
            else:
                return self.getToken(XplorMRParser.Simple_name_CF, i)

        def getRuleIndex(self):
            return XplorMRParser.RULE_coll_assign_loop

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColl_assign_loop" ):
                listener.enterColl_assign_loop(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColl_assign_loop" ):
                listener.exitColl_assign_loop(self)




    def coll_assign_loop(self):

        localctx = XplorMRParser.Coll_assign_loopContext(self, self._ctx, self.state)
        self.enterRule(localctx, 248, self.RULE_coll_assign_loop)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2783
            self.match(XplorMRParser.For)
            self.state = 2784
            self.match(XplorMRParser.Symbol_name_CF)
            self.state = 2785
            self.match(XplorMRParser.In_CF)
            self.state = 2786
            self.match(XplorMRParser.L_paren_CF)
            self.state = 2805
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,308,self._ctx)
            if la_ == 1:
                self.state = 2790
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==295:
                    self.state = 2787
                    self.match(XplorMRParser.Integer_CF)
                    self.state = 2792
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 2:
                self.state = 2796
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==296:
                    self.state = 2793
                    self.match(XplorMRParser.Real_CF)
                    self.state = 2798
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 3:
                self.state = 2802
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==298:
                    self.state = 2799
                    self.match(XplorMRParser.Simple_name_CF)
                    self.state = 2804
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass


            self.state = 2807
            self.match(XplorMRParser.R_paren_CF)
            self.state = 2808
            self.match(XplorMRParser.Loop)
            self.state = 2809
            self.match(XplorMRParser.Simple_name_LL)
            self.state = 2815
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==4 or _la==86 or _la==173:
                self.state = 2813
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [173]:
                    self.state = 2810
                    self.evaluate_statement()
                    pass
                elif token in [4]:
                    self.state = 2811
                    self.coll_assign()
                    pass
                elif token in [86]:
                    self.state = 2812
                    self.radius_of_gyration_restraint()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 2817
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2818
            self.match(XplorMRParser.End)
            self.state = 2819
            self.match(XplorMRParser.Loop)
            self.state = 2820
            self.match(XplorMRParser.Simple_name_LL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Csa_assign_loopContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def For(self):
            return self.getToken(XplorMRParser.For, 0)

        def Symbol_name_CF(self):
            return self.getToken(XplorMRParser.Symbol_name_CF, 0)

        def In_CF(self):
            return self.getToken(XplorMRParser.In_CF, 0)

        def L_paren_CF(self):
            return self.getToken(XplorMRParser.L_paren_CF, 0)

        def R_paren_CF(self):
            return self.getToken(XplorMRParser.R_paren_CF, 0)

        def Loop(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Loop)
            else:
                return self.getToken(XplorMRParser.Loop, i)

        def Simple_name_LL(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Simple_name_LL)
            else:
                return self.getToken(XplorMRParser.Simple_name_LL, i)

        def End(self):
            return self.getToken(XplorMRParser.End, 0)

        def evaluate_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Evaluate_statementContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Evaluate_statementContext,i)


        def csa_assign(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Csa_assignContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Csa_assignContext,i)


        def csa_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Csa_restraintContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Csa_restraintContext,i)


        def Integer_CF(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Integer_CF)
            else:
                return self.getToken(XplorMRParser.Integer_CF, i)

        def Real_CF(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Real_CF)
            else:
                return self.getToken(XplorMRParser.Real_CF, i)

        def Simple_name_CF(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Simple_name_CF)
            else:
                return self.getToken(XplorMRParser.Simple_name_CF, i)

        def getRuleIndex(self):
            return XplorMRParser.RULE_csa_assign_loop

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCsa_assign_loop" ):
                listener.enterCsa_assign_loop(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCsa_assign_loop" ):
                listener.exitCsa_assign_loop(self)




    def csa_assign_loop(self):

        localctx = XplorMRParser.Csa_assign_loopContext(self, self._ctx, self.state)
        self.enterRule(localctx, 250, self.RULE_csa_assign_loop)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2822
            self.match(XplorMRParser.For)
            self.state = 2823
            self.match(XplorMRParser.Symbol_name_CF)
            self.state = 2824
            self.match(XplorMRParser.In_CF)
            self.state = 2825
            self.match(XplorMRParser.L_paren_CF)
            self.state = 2844
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,314,self._ctx)
            if la_ == 1:
                self.state = 2829
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==295:
                    self.state = 2826
                    self.match(XplorMRParser.Integer_CF)
                    self.state = 2831
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 2:
                self.state = 2835
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==296:
                    self.state = 2832
                    self.match(XplorMRParser.Real_CF)
                    self.state = 2837
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 3:
                self.state = 2841
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==298:
                    self.state = 2838
                    self.match(XplorMRParser.Simple_name_CF)
                    self.state = 2843
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass


            self.state = 2846
            self.match(XplorMRParser.R_paren_CF)
            self.state = 2847
            self.match(XplorMRParser.Loop)
            self.state = 2848
            self.match(XplorMRParser.Simple_name_LL)
            self.state = 2854
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==4 or _la==92 or _la==173:
                self.state = 2852
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [173]:
                    self.state = 2849
                    self.evaluate_statement()
                    pass
                elif token in [4]:
                    self.state = 2850
                    self.csa_assign()
                    pass
                elif token in [92]:
                    self.state = 2851
                    self.csa_restraint()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 2856
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2857
            self.match(XplorMRParser.End)
            self.state = 2858
            self.match(XplorMRParser.Loop)
            self.state = 2859
            self.match(XplorMRParser.Simple_name_LL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pre_assign_loopContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def For(self):
            return self.getToken(XplorMRParser.For, 0)

        def Symbol_name_CF(self):
            return self.getToken(XplorMRParser.Symbol_name_CF, 0)

        def In_CF(self):
            return self.getToken(XplorMRParser.In_CF, 0)

        def L_paren_CF(self):
            return self.getToken(XplorMRParser.L_paren_CF, 0)

        def R_paren_CF(self):
            return self.getToken(XplorMRParser.R_paren_CF, 0)

        def Loop(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Loop)
            else:
                return self.getToken(XplorMRParser.Loop, i)

        def Simple_name_LL(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Simple_name_LL)
            else:
                return self.getToken(XplorMRParser.Simple_name_LL, i)

        def End(self):
            return self.getToken(XplorMRParser.End, 0)

        def evaluate_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Evaluate_statementContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Evaluate_statementContext,i)


        def pre_assign(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Pre_assignContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Pre_assignContext,i)


        def pre_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Pre_restraintContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Pre_restraintContext,i)


        def Integer_CF(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Integer_CF)
            else:
                return self.getToken(XplorMRParser.Integer_CF, i)

        def Real_CF(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Real_CF)
            else:
                return self.getToken(XplorMRParser.Real_CF, i)

        def Simple_name_CF(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Simple_name_CF)
            else:
                return self.getToken(XplorMRParser.Simple_name_CF, i)

        def getRuleIndex(self):
            return XplorMRParser.RULE_pre_assign_loop

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPre_assign_loop" ):
                listener.enterPre_assign_loop(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPre_assign_loop" ):
                listener.exitPre_assign_loop(self)




    def pre_assign_loop(self):

        localctx = XplorMRParser.Pre_assign_loopContext(self, self._ctx, self.state)
        self.enterRule(localctx, 252, self.RULE_pre_assign_loop)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2861
            self.match(XplorMRParser.For)
            self.state = 2862
            self.match(XplorMRParser.Symbol_name_CF)
            self.state = 2863
            self.match(XplorMRParser.In_CF)
            self.state = 2864
            self.match(XplorMRParser.L_paren_CF)
            self.state = 2883
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,320,self._ctx)
            if la_ == 1:
                self.state = 2868
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==295:
                    self.state = 2865
                    self.match(XplorMRParser.Integer_CF)
                    self.state = 2870
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 2:
                self.state = 2874
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==296:
                    self.state = 2871
                    self.match(XplorMRParser.Real_CF)
                    self.state = 2876
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 3:
                self.state = 2880
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==298:
                    self.state = 2877
                    self.match(XplorMRParser.Simple_name_CF)
                    self.state = 2882
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass


            self.state = 2885
            self.match(XplorMRParser.R_paren_CF)
            self.state = 2886
            self.match(XplorMRParser.Loop)
            self.state = 2887
            self.match(XplorMRParser.Simple_name_LL)
            self.state = 2893
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==4 or _la==98 or _la==173:
                self.state = 2891
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [173]:
                    self.state = 2888
                    self.evaluate_statement()
                    pass
                elif token in [4]:
                    self.state = 2889
                    self.pre_assign()
                    pass
                elif token in [98]:
                    self.state = 2890
                    self.pre_restraint()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 2895
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2896
            self.match(XplorMRParser.End)
            self.state = 2897
            self.match(XplorMRParser.Loop)
            self.state = 2898
            self.match(XplorMRParser.Simple_name_LL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pcs_assign_loopContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def For(self):
            return self.getToken(XplorMRParser.For, 0)

        def Symbol_name_CF(self):
            return self.getToken(XplorMRParser.Symbol_name_CF, 0)

        def In_CF(self):
            return self.getToken(XplorMRParser.In_CF, 0)

        def L_paren_CF(self):
            return self.getToken(XplorMRParser.L_paren_CF, 0)

        def R_paren_CF(self):
            return self.getToken(XplorMRParser.R_paren_CF, 0)

        def Loop(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Loop)
            else:
                return self.getToken(XplorMRParser.Loop, i)

        def Simple_name_LL(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Simple_name_LL)
            else:
                return self.getToken(XplorMRParser.Simple_name_LL, i)

        def End(self):
            return self.getToken(XplorMRParser.End, 0)

        def evaluate_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Evaluate_statementContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Evaluate_statementContext,i)


        def pcs_assign(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Pcs_assignContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Pcs_assignContext,i)


        def pcs_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Pcs_restraintContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Pcs_restraintContext,i)


        def carbon_shift_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Carbon_shift_restraintContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Carbon_shift_restraintContext,i)


        def Integer_CF(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Integer_CF)
            else:
                return self.getToken(XplorMRParser.Integer_CF, i)

        def Real_CF(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Real_CF)
            else:
                return self.getToken(XplorMRParser.Real_CF, i)

        def Simple_name_CF(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Simple_name_CF)
            else:
                return self.getToken(XplorMRParser.Simple_name_CF, i)

        def getRuleIndex(self):
            return XplorMRParser.RULE_pcs_assign_loop

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPcs_assign_loop" ):
                listener.enterPcs_assign_loop(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPcs_assign_loop" ):
                listener.exitPcs_assign_loop(self)




    def pcs_assign_loop(self):

        localctx = XplorMRParser.Pcs_assign_loopContext(self, self._ctx, self.state)
        self.enterRule(localctx, 254, self.RULE_pcs_assign_loop)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2900
            self.match(XplorMRParser.For)
            self.state = 2901
            self.match(XplorMRParser.Symbol_name_CF)
            self.state = 2902
            self.match(XplorMRParser.In_CF)
            self.state = 2903
            self.match(XplorMRParser.L_paren_CF)
            self.state = 2922
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,326,self._ctx)
            if la_ == 1:
                self.state = 2907
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==295:
                    self.state = 2904
                    self.match(XplorMRParser.Integer_CF)
                    self.state = 2909
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 2:
                self.state = 2913
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==296:
                    self.state = 2910
                    self.match(XplorMRParser.Real_CF)
                    self.state = 2915
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 3:
                self.state = 2919
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==298:
                    self.state = 2916
                    self.match(XplorMRParser.Simple_name_CF)
                    self.state = 2921
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass


            self.state = 2924
            self.match(XplorMRParser.R_paren_CF)
            self.state = 2925
            self.match(XplorMRParser.Loop)
            self.state = 2926
            self.match(XplorMRParser.Simple_name_LL)
            self.state = 2933
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==4 or _la==67 or _la==103 or _la==173:
                self.state = 2931
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [173]:
                    self.state = 2927
                    self.evaluate_statement()
                    pass
                elif token in [4]:
                    self.state = 2928
                    self.pcs_assign()
                    pass
                elif token in [103]:
                    self.state = 2929
                    self.pcs_restraint()
                    pass
                elif token in [67]:
                    self.state = 2930
                    self.carbon_shift_restraint()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 2935
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2936
            self.match(XplorMRParser.End)
            self.state = 2937
            self.match(XplorMRParser.Loop)
            self.state = 2938
            self.match(XplorMRParser.Simple_name_LL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Hbond_assign_loopContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def For(self):
            return self.getToken(XplorMRParser.For, 0)

        def Symbol_name_CF(self):
            return self.getToken(XplorMRParser.Symbol_name_CF, 0)

        def In_CF(self):
            return self.getToken(XplorMRParser.In_CF, 0)

        def L_paren_CF(self):
            return self.getToken(XplorMRParser.L_paren_CF, 0)

        def R_paren_CF(self):
            return self.getToken(XplorMRParser.R_paren_CF, 0)

        def Loop(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Loop)
            else:
                return self.getToken(XplorMRParser.Loop, i)

        def Simple_name_LL(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Simple_name_LL)
            else:
                return self.getToken(XplorMRParser.Simple_name_LL, i)

        def End(self):
            return self.getToken(XplorMRParser.End, 0)

        def evaluate_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Evaluate_statementContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Evaluate_statementContext,i)


        def hbond_assign(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Hbond_assignContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Hbond_assignContext,i)


        def hbond_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Hbond_restraintContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Hbond_restraintContext,i)


        def Integer_CF(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Integer_CF)
            else:
                return self.getToken(XplorMRParser.Integer_CF, i)

        def Real_CF(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Real_CF)
            else:
                return self.getToken(XplorMRParser.Real_CF, i)

        def Simple_name_CF(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Simple_name_CF)
            else:
                return self.getToken(XplorMRParser.Simple_name_CF, i)

        def getRuleIndex(self):
            return XplorMRParser.RULE_hbond_assign_loop

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHbond_assign_loop" ):
                listener.enterHbond_assign_loop(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHbond_assign_loop" ):
                listener.exitHbond_assign_loop(self)




    def hbond_assign_loop(self):

        localctx = XplorMRParser.Hbond_assign_loopContext(self, self._ctx, self.state)
        self.enterRule(localctx, 256, self.RULE_hbond_assign_loop)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2940
            self.match(XplorMRParser.For)
            self.state = 2941
            self.match(XplorMRParser.Symbol_name_CF)
            self.state = 2942
            self.match(XplorMRParser.In_CF)
            self.state = 2943
            self.match(XplorMRParser.L_paren_CF)
            self.state = 2962
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,332,self._ctx)
            if la_ == 1:
                self.state = 2947
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==295:
                    self.state = 2944
                    self.match(XplorMRParser.Integer_CF)
                    self.state = 2949
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 2:
                self.state = 2953
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==296:
                    self.state = 2950
                    self.match(XplorMRParser.Real_CF)
                    self.state = 2955
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 3:
                self.state = 2959
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==298:
                    self.state = 2956
                    self.match(XplorMRParser.Simple_name_CF)
                    self.state = 2961
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass


            self.state = 2964
            self.match(XplorMRParser.R_paren_CF)
            self.state = 2965
            self.match(XplorMRParser.Loop)
            self.state = 2966
            self.match(XplorMRParser.Simple_name_LL)
            self.state = 2972
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==4 or _la==118 or _la==173:
                self.state = 2970
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [173]:
                    self.state = 2967
                    self.evaluate_statement()
                    pass
                elif token in [4]:
                    self.state = 2968
                    self.hbond_assign()
                    pass
                elif token in [118]:
                    self.state = 2969
                    self.hbond_restraint()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 2974
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2975
            self.match(XplorMRParser.End)
            self.state = 2976
            self.match(XplorMRParser.Loop)
            self.state = 2977
            self.match(XplorMRParser.Simple_name_LL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Hbond_db_assign_loopContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def For(self):
            return self.getToken(XplorMRParser.For, 0)

        def Symbol_name_CF(self):
            return self.getToken(XplorMRParser.Symbol_name_CF, 0)

        def In_CF(self):
            return self.getToken(XplorMRParser.In_CF, 0)

        def L_paren_CF(self):
            return self.getToken(XplorMRParser.L_paren_CF, 0)

        def R_paren_CF(self):
            return self.getToken(XplorMRParser.R_paren_CF, 0)

        def Loop(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Loop)
            else:
                return self.getToken(XplorMRParser.Loop, i)

        def Simple_name_LL(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Simple_name_LL)
            else:
                return self.getToken(XplorMRParser.Simple_name_LL, i)

        def End(self):
            return self.getToken(XplorMRParser.End, 0)

        def evaluate_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Evaluate_statementContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Evaluate_statementContext,i)


        def hbond_db_assign(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Hbond_db_assignContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Hbond_db_assignContext,i)


        def hbond_db_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Hbond_db_restraintContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Hbond_db_restraintContext,i)


        def Integer_CF(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Integer_CF)
            else:
                return self.getToken(XplorMRParser.Integer_CF, i)

        def Real_CF(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Real_CF)
            else:
                return self.getToken(XplorMRParser.Real_CF, i)

        def Simple_name_CF(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Simple_name_CF)
            else:
                return self.getToken(XplorMRParser.Simple_name_CF, i)

        def getRuleIndex(self):
            return XplorMRParser.RULE_hbond_db_assign_loop

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHbond_db_assign_loop" ):
                listener.enterHbond_db_assign_loop(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHbond_db_assign_loop" ):
                listener.exitHbond_db_assign_loop(self)




    def hbond_db_assign_loop(self):

        localctx = XplorMRParser.Hbond_db_assign_loopContext(self, self._ctx, self.state)
        self.enterRule(localctx, 258, self.RULE_hbond_db_assign_loop)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2979
            self.match(XplorMRParser.For)
            self.state = 2980
            self.match(XplorMRParser.Symbol_name_CF)
            self.state = 2981
            self.match(XplorMRParser.In_CF)
            self.state = 2982
            self.match(XplorMRParser.L_paren_CF)
            self.state = 3001
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,338,self._ctx)
            if la_ == 1:
                self.state = 2986
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==295:
                    self.state = 2983
                    self.match(XplorMRParser.Integer_CF)
                    self.state = 2988
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 2:
                self.state = 2992
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==296:
                    self.state = 2989
                    self.match(XplorMRParser.Real_CF)
                    self.state = 2994
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 3:
                self.state = 2998
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==298:
                    self.state = 2995
                    self.match(XplorMRParser.Simple_name_CF)
                    self.state = 3000
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass


            self.state = 3003
            self.match(XplorMRParser.R_paren_CF)
            self.state = 3004
            self.match(XplorMRParser.Loop)
            self.state = 3005
            self.match(XplorMRParser.Simple_name_LL)
            self.state = 3011
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==4 or _la==119 or _la==173:
                self.state = 3009
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [173]:
                    self.state = 3006
                    self.evaluate_statement()
                    pass
                elif token in [4]:
                    self.state = 3007
                    self.hbond_db_assign()
                    pass
                elif token in [119]:
                    self.state = 3008
                    self.hbond_db_restraint()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 3013
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 3014
            self.match(XplorMRParser.End)
            self.state = 3015
            self.match(XplorMRParser.Loop)
            self.state = 3016
            self.match(XplorMRParser.Simple_name_LL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Planar_group_loopContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def For(self):
            return self.getToken(XplorMRParser.For, 0)

        def Symbol_name_CF(self):
            return self.getToken(XplorMRParser.Symbol_name_CF, 0)

        def In_CF(self):
            return self.getToken(XplorMRParser.In_CF, 0)

        def L_paren_CF(self):
            return self.getToken(XplorMRParser.L_paren_CF, 0)

        def R_paren_CF(self):
            return self.getToken(XplorMRParser.R_paren_CF, 0)

        def Loop(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Loop)
            else:
                return self.getToken(XplorMRParser.Loop, i)

        def Simple_name_LL(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Simple_name_LL)
            else:
                return self.getToken(XplorMRParser.Simple_name_LL, i)

        def End(self):
            return self.getToken(XplorMRParser.End, 0)

        def evaluate_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Evaluate_statementContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Evaluate_statementContext,i)


        def planar_group(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Planar_groupContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Planar_groupContext,i)


        def planar_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Planar_restraintContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Planar_restraintContext,i)


        def Integer_CF(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Integer_CF)
            else:
                return self.getToken(XplorMRParser.Integer_CF, i)

        def Real_CF(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Real_CF)
            else:
                return self.getToken(XplorMRParser.Real_CF, i)

        def Simple_name_CF(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Simple_name_CF)
            else:
                return self.getToken(XplorMRParser.Simple_name_CF, i)

        def getRuleIndex(self):
            return XplorMRParser.RULE_planar_group_loop

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPlanar_group_loop" ):
                listener.enterPlanar_group_loop(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPlanar_group_loop" ):
                listener.exitPlanar_group_loop(self)




    def planar_group_loop(self):

        localctx = XplorMRParser.Planar_group_loopContext(self, self._ctx, self.state)
        self.enterRule(localctx, 260, self.RULE_planar_group_loop)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3018
            self.match(XplorMRParser.For)
            self.state = 3019
            self.match(XplorMRParser.Symbol_name_CF)
            self.state = 3020
            self.match(XplorMRParser.In_CF)
            self.state = 3021
            self.match(XplorMRParser.L_paren_CF)
            self.state = 3040
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,344,self._ctx)
            if la_ == 1:
                self.state = 3025
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==295:
                    self.state = 3022
                    self.match(XplorMRParser.Integer_CF)
                    self.state = 3027
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 2:
                self.state = 3031
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==296:
                    self.state = 3028
                    self.match(XplorMRParser.Real_CF)
                    self.state = 3033
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 3:
                self.state = 3037
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==298:
                    self.state = 3034
                    self.match(XplorMRParser.Simple_name_CF)
                    self.state = 3039
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass


            self.state = 3042
            self.match(XplorMRParser.R_paren_CF)
            self.state = 3043
            self.match(XplorMRParser.Loop)
            self.state = 3044
            self.match(XplorMRParser.Simple_name_LL)
            self.state = 3050
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & 27021735203176448) != 0) or _la==173:
                self.state = 3048
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [173]:
                    self.state = 3045
                    self.evaluate_statement()
                    pass
                elif token in [54]:
                    self.state = 3046
                    self.planar_group()
                    pass
                elif token in [37, 53]:
                    self.state = 3047
                    self.planar_restraint()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 3052
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 3053
            self.match(XplorMRParser.End)
            self.state = 3054
            self.match(XplorMRParser.Loop)
            self.state = 3055
            self.match(XplorMRParser.Simple_name_LL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx



    def sempred(self, localctx:RuleContext, ruleIndex:int, predIndex:int):
        if self._predicates == None:
            self._predicates = dict()
        self._predicates[99] = self.factor_sempred
        pred = self._predicates.get(ruleIndex, None)
        if pred is None:
            raise Exception("No predicate with index:" + str(ruleIndex))
        else:
            return pred(localctx, predIndex)

    def factor_sempred(self, localctx:FactorContext, predIndex:int):
            if predIndex == 0:
                return self.precpred(self._ctx, 32)
         

            if predIndex == 1:
                return self.precpred(self._ctx, 14)
         




