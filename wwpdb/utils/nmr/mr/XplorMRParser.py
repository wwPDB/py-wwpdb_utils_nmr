# Generated from XplorMRParser.g4 by ANTLR 4.10.1
# encoding: utf-8
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
	from typing import TextIO
else:
	from typing.io import TextIO

def serializedATN():
    return [
        4,1,290,2925,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,
        7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,
        13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,
        20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,
        26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,
        33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,
        39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,
        46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,52,7,
        52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,2,57,7,57,2,58,7,58,2,
        59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,2,64,7,64,2,65,7,
        65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,2,71,7,71,2,
        72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,7,77,2,78,7,
        78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,2,84,7,84,2,
        85,7,85,2,86,7,86,2,87,7,87,2,88,7,88,2,89,7,89,2,90,7,90,2,91,7,
        91,2,92,7,92,2,93,7,93,2,94,7,94,2,95,7,95,2,96,7,96,2,97,7,97,2,
        98,7,98,2,99,7,99,2,100,7,100,2,101,7,101,2,102,7,102,2,103,7,103,
        2,104,7,104,2,105,7,105,2,106,7,106,2,107,7,107,2,108,7,108,2,109,
        7,109,2,110,7,110,2,111,7,111,2,112,7,112,2,113,7,113,2,114,7,114,
        2,115,7,115,2,116,7,116,2,117,7,117,2,118,7,118,2,119,7,119,2,120,
        7,120,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,
        0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,
        0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,
        0,1,0,1,0,1,0,1,0,1,0,1,0,5,0,296,8,0,10,0,12,0,299,9,0,1,0,1,0,
        1,1,1,1,5,1,305,8,1,10,1,12,1,308,9,1,1,1,1,1,1,2,3,2,313,8,2,1,
        2,1,2,5,2,317,8,2,10,2,12,2,320,9,2,1,2,1,2,1,3,1,3,5,3,326,8,3,
        10,3,12,3,329,9,3,1,3,1,3,1,3,5,3,334,8,3,10,3,12,3,337,9,3,1,3,
        1,3,1,3,5,3,342,8,3,10,3,12,3,345,9,3,1,3,1,3,1,3,5,3,350,8,3,10,
        3,12,3,353,9,3,1,3,1,3,1,3,5,3,358,8,3,10,3,12,3,361,9,3,1,3,3,3,
        364,8,3,1,4,3,4,367,8,4,1,4,1,4,5,4,371,8,4,10,4,12,4,374,9,4,1,
        4,1,4,1,5,3,5,379,8,5,1,5,1,5,5,5,383,8,5,10,5,12,5,386,9,5,1,5,
        1,5,1,6,1,6,5,6,392,8,6,10,6,12,6,395,9,6,1,6,1,6,1,7,1,7,5,7,401,
        8,7,10,7,12,7,404,9,7,1,7,1,7,1,8,1,8,5,8,410,8,8,10,8,12,8,413,
        9,8,1,8,1,8,1,9,1,9,5,9,419,8,9,10,9,12,9,422,9,9,1,9,1,9,1,10,1,
        10,5,10,428,8,10,10,10,12,10,431,9,10,1,10,1,10,1,11,1,11,5,11,437,
        8,11,10,11,12,11,440,9,11,1,11,1,11,1,12,1,12,5,12,446,8,12,10,12,
        12,12,449,9,12,1,12,1,12,1,13,1,13,5,13,455,8,13,10,13,12,13,458,
        9,13,1,13,1,13,1,14,1,14,5,14,464,8,14,10,14,12,14,467,9,14,1,14,
        1,14,1,15,1,15,5,15,473,8,15,10,15,12,15,476,9,15,1,15,1,15,1,16,
        1,16,5,16,482,8,16,10,16,12,16,485,9,16,1,16,1,16,1,17,1,17,5,17,
        491,8,17,10,17,12,17,494,9,17,1,17,1,17,1,18,1,18,5,18,500,8,18,
        10,18,12,18,503,9,18,1,18,1,18,1,19,1,19,5,19,509,8,19,10,19,12,
        19,512,9,19,1,19,1,19,1,20,1,20,5,20,518,8,20,10,20,12,20,521,9,
        20,1,20,1,20,1,21,1,21,5,21,527,8,21,10,21,12,21,530,9,21,1,21,1,
        21,1,22,1,22,5,22,536,8,22,10,22,12,22,539,9,22,1,22,1,22,1,23,1,
        23,5,23,545,8,23,10,23,12,23,548,9,23,1,23,1,23,1,24,1,24,5,24,554,
        8,24,10,24,12,24,557,9,24,1,24,1,24,1,25,1,25,1,25,1,25,1,25,1,25,
        1,25,1,25,1,25,1,25,1,25,1,25,1,25,3,25,574,8,25,1,25,1,25,1,25,
        3,25,579,8,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,
        1,25,1,25,1,25,1,25,1,25,3,25,596,8,25,1,25,1,25,1,25,1,25,1,25,
        1,25,1,25,1,25,1,25,1,25,1,25,3,25,609,8,25,1,25,1,25,1,25,1,25,
        1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,
        1,25,1,25,1,25,1,25,1,25,3,25,633,8,25,1,25,3,25,636,8,25,1,26,1,
        26,1,26,1,26,1,26,3,26,643,8,26,1,26,3,26,646,8,26,1,26,5,26,649,
        8,26,10,26,12,26,652,9,26,1,26,1,26,3,26,656,8,26,1,26,1,26,1,26,
        3,26,661,8,26,1,26,3,26,664,8,26,1,26,3,26,667,8,26,5,26,669,8,26,
        10,26,12,26,672,9,26,1,27,1,27,3,27,676,8,27,1,27,1,27,1,27,3,27,
        681,8,27,1,27,1,27,1,27,1,27,1,27,3,27,688,8,27,1,28,1,28,3,28,692,
        8,28,1,28,1,28,1,28,3,28,697,8,28,1,28,1,28,1,28,3,28,702,8,28,1,
        28,1,28,1,28,3,28,707,8,28,1,28,1,28,1,28,3,28,712,8,28,1,28,1,28,
        1,28,3,28,717,8,28,1,28,1,28,1,28,3,28,722,8,28,1,28,3,28,725,8,
        28,1,29,1,29,1,29,1,29,1,29,3,29,732,8,29,1,29,1,29,1,29,1,29,3,
        29,738,8,29,1,29,3,29,741,8,29,1,30,1,30,1,30,1,30,1,30,1,30,1,30,
        1,30,1,30,1,30,1,31,1,31,1,31,1,31,3,31,757,8,31,1,31,1,31,1,31,
        1,31,1,31,1,31,1,31,1,31,3,31,767,8,31,1,31,1,31,1,31,3,31,772,8,
        31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,3,31,781,8,31,1,32,1,32,1,
        32,1,32,1,32,1,32,1,32,1,32,1,32,3,32,792,8,32,1,32,3,32,795,8,32,
        1,33,1,33,1,33,3,33,800,8,33,1,33,1,33,1,33,1,33,1,33,3,33,807,8,
        33,1,33,1,33,1,33,1,33,1,33,1,33,1,33,1,33,1,33,1,33,1,33,1,33,3,
        33,821,8,33,1,33,1,33,1,33,3,33,826,8,33,1,33,1,33,1,33,1,33,1,33,
        1,33,1,33,3,33,835,8,33,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,
        1,34,1,34,1,34,1,34,1,34,1,34,1,34,3,34,852,8,34,1,35,1,35,1,35,
        3,35,857,8,35,1,35,1,35,1,35,3,35,862,8,35,1,35,1,35,1,35,3,35,867,
        8,35,1,35,1,35,1,35,1,35,1,35,3,35,874,8,35,1,35,1,35,1,35,3,35,
        879,8,35,1,35,1,35,1,35,1,35,1,35,3,35,886,8,35,1,36,1,36,1,36,1,
        36,1,36,1,36,1,36,1,36,1,36,1,36,3,36,898,8,36,1,37,1,37,1,37,3,
        37,903,8,37,1,37,1,37,1,37,1,37,1,37,3,37,910,8,37,1,37,1,37,1,37,
        1,37,1,37,1,37,1,37,3,37,919,8,37,1,38,1,38,1,38,1,38,1,38,3,38,
        926,8,38,1,39,1,39,1,39,3,39,931,8,39,1,39,1,39,1,39,1,39,1,39,1,
        39,1,39,1,39,1,39,3,39,942,8,39,1,39,1,39,1,39,3,39,947,8,39,1,39,
        1,39,1,39,1,39,1,39,1,39,1,39,1,39,1,39,3,39,958,8,39,1,40,1,40,
        1,40,1,40,1,40,1,40,1,40,3,40,967,8,40,1,41,1,41,1,41,5,41,972,8,
        41,10,41,12,41,975,9,41,1,41,1,41,3,41,979,8,41,1,42,1,42,3,42,983,
        8,42,1,42,1,42,1,42,3,42,988,8,42,1,42,3,42,991,8,42,1,43,1,43,1,
        43,3,43,996,8,43,1,43,1,43,1,43,3,43,1001,8,43,1,43,1,43,1,43,3,
        43,1006,8,43,1,43,1,43,3,43,1010,8,43,1,43,1,43,1,43,1,43,3,43,1016,
        8,43,1,43,1,43,3,43,1020,8,43,1,43,1,43,3,43,1024,8,43,1,43,3,43,
        1027,8,43,3,43,1029,8,43,1,43,1,43,3,43,1033,8,43,1,44,1,44,1,44,
        1,44,1,44,1,44,1,45,1,45,1,45,1,45,3,45,1045,8,45,1,45,1,45,1,45,
        1,45,1,45,1,45,3,45,1053,8,45,1,45,1,45,1,45,3,45,1058,8,45,1,45,
        1,45,1,45,1,45,1,45,1,45,1,45,3,45,1067,8,45,1,45,3,45,1070,8,45,
        1,45,1,45,1,45,1,45,1,45,1,45,3,45,1078,8,45,1,46,1,46,1,46,1,46,
        1,47,1,47,1,47,1,47,3,47,1088,8,47,1,47,1,47,1,47,1,47,1,47,1,47,
        1,47,1,47,1,47,3,47,1099,8,47,1,47,1,47,1,47,1,47,1,47,1,47,3,47,
        1107,8,47,1,47,1,47,3,47,1111,8,47,1,47,1,47,1,47,3,47,1116,8,47,
        1,47,1,47,1,47,1,47,1,47,1,47,1,47,1,47,1,47,3,47,1127,8,47,1,47,
        3,47,1130,8,47,1,47,3,47,1133,8,47,1,48,1,48,1,48,1,48,1,48,1,48,
        1,48,1,48,1,48,1,48,3,48,1145,8,48,1,48,1,48,1,48,1,48,1,48,3,48,
        1152,8,48,1,49,1,49,1,49,3,49,1157,8,49,1,49,1,49,1,49,1,49,1,49,
        1,49,1,49,1,49,1,49,1,49,3,49,1169,8,49,1,49,1,49,1,49,3,49,1174,
        8,49,1,49,1,49,1,49,1,49,1,49,1,49,1,49,1,49,1,49,1,49,1,49,1,49,
        1,49,3,49,1189,8,49,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,
        1,51,1,51,1,51,1,51,1,51,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,
        1,52,1,52,1,52,3,52,1216,8,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,
        1,52,3,52,1226,8,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,3,52,
        1236,8,52,1,52,3,52,1239,8,52,1,52,1,52,1,52,3,52,1244,8,52,1,53,
        1,53,1,53,3,53,1249,8,53,1,53,1,53,3,53,1253,8,53,1,54,1,54,1,54,
        1,54,1,55,1,55,1,55,1,55,1,55,1,55,3,55,1265,8,55,1,55,1,55,1,56,
        1,56,1,56,1,57,1,57,1,57,1,58,1,58,1,58,1,59,1,59,1,59,1,60,1,60,
        1,60,1,60,1,60,1,60,1,60,1,60,3,60,1289,8,60,1,61,1,61,1,61,1,62,
        1,62,1,62,3,62,1297,8,62,1,62,1,62,1,62,1,62,1,62,3,62,1304,8,62,
        1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,3,62,1315,8,62,1,62,
        1,62,1,62,1,62,3,62,1321,8,62,1,62,1,62,1,62,1,62,3,62,1327,8,62,
        1,62,1,62,3,62,1331,8,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,
        1,62,3,62,1342,8,62,1,62,1,62,1,62,1,62,3,62,1348,8,62,1,62,1,62,
        1,62,1,62,3,62,1354,8,62,1,62,1,62,1,62,1,62,1,62,1,62,3,62,1362,
        8,62,1,62,3,62,1365,8,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,
        3,62,1375,8,62,1,62,1,62,1,62,1,62,3,62,1381,8,62,1,62,1,62,1,62,
        1,62,3,62,1387,8,62,1,62,1,62,1,62,3,62,1392,8,62,1,62,1,62,1,62,
        1,62,1,62,1,62,1,62,3,62,1401,8,62,1,62,3,62,1404,8,62,1,62,3,62,
        1407,8,62,1,62,1,62,3,62,1411,8,62,1,63,1,63,1,63,1,63,1,63,1,63,
        1,63,1,63,1,63,1,63,3,63,1423,8,63,1,63,1,63,1,63,1,63,1,63,3,63,
        1430,8,63,1,63,1,63,1,63,1,63,1,63,3,63,1437,8,63,1,64,1,64,1,64,
        1,64,3,64,1443,8,64,1,64,1,64,1,64,3,64,1448,8,64,1,65,1,65,1,65,
        1,65,1,65,1,66,1,66,1,66,3,66,1458,8,66,1,66,1,66,1,66,1,66,1,66,
        1,66,1,66,1,66,1,66,1,66,3,66,1470,8,66,1,66,1,66,1,66,3,66,1475,
        8,66,1,66,1,66,1,66,1,66,1,66,1,66,1,66,1,66,1,66,3,66,1486,8,66,
        1,67,1,67,1,67,1,67,1,67,1,67,1,67,1,67,1,67,3,67,1497,8,67,1,68,
        1,68,1,68,3,68,1502,8,68,1,68,1,68,1,68,1,68,1,68,1,68,1,68,3,68,
        1511,8,68,1,68,1,68,1,68,1,68,1,68,1,68,1,68,1,68,1,68,1,68,1,68,
        1,68,1,68,1,68,1,68,1,68,1,68,1,68,1,68,1,68,1,68,1,68,1,68,1,68,
        3,68,1537,8,68,1,68,1,68,1,68,1,68,1,68,1,68,1,68,3,68,1546,8,68,
        1,68,3,68,1549,8,68,1,68,1,68,1,68,1,68,1,68,1,68,1,68,1,68,1,68,
        1,68,1,68,1,68,1,68,1,68,1,68,1,68,1,68,3,68,1568,8,68,1,69,1,69,
        1,69,1,69,1,69,1,69,1,70,1,70,1,70,1,70,3,70,1580,8,70,1,70,1,70,
        1,70,3,70,1585,8,70,1,70,1,70,1,70,1,70,1,70,1,70,1,70,1,70,1,70,
        1,70,1,70,1,70,1,70,1,70,1,70,3,70,1602,8,70,1,70,1,70,1,70,3,70,
        1607,8,70,1,70,1,70,1,70,1,70,1,70,1,70,1,70,3,70,1616,8,70,1,71,
        1,71,1,71,1,71,1,71,1,71,1,71,1,71,1,71,1,71,3,71,1628,8,71,1,71,
        3,71,1631,8,71,1,72,1,72,1,72,3,72,1636,8,72,1,72,1,72,1,72,3,72,
        1641,8,72,1,72,1,72,1,72,1,72,1,72,1,72,1,72,1,72,1,72,1,72,1,72,
        1,72,1,72,1,72,3,72,1657,8,72,1,72,1,72,1,72,3,72,1662,8,72,1,72,
        1,72,1,72,1,72,1,72,1,72,1,72,3,72,1671,8,72,1,73,1,73,1,73,3,73,
        1676,8,73,1,73,1,73,1,73,1,73,1,73,1,73,1,73,1,73,1,73,1,73,1,73,
        1,73,3,73,1690,8,73,1,73,1,73,1,73,3,73,1695,8,73,1,73,1,73,1,73,
        1,73,1,73,1,73,1,73,3,73,1704,8,73,1,74,1,74,1,74,1,74,1,74,1,74,
        1,74,1,74,1,74,1,74,1,74,1,74,1,75,1,75,1,75,3,75,1721,8,75,1,75,
        1,75,1,75,1,75,1,75,1,75,1,75,1,75,1,75,1,75,1,75,3,75,1734,8,75,
        1,75,1,75,1,75,3,75,1739,8,75,1,75,1,75,1,75,1,75,1,75,1,75,1,75,
        1,75,1,75,3,75,1750,8,75,1,75,3,75,1753,8,75,1,75,1,75,1,75,1,75,
        1,75,1,75,3,75,1761,8,75,1,76,1,76,1,76,1,76,1,76,1,76,1,76,1,76,
        1,76,1,76,1,76,1,76,1,76,3,76,1776,8,76,1,77,1,77,1,77,1,77,3,77,
        1782,8,77,1,77,1,77,1,77,3,77,1787,8,77,1,77,1,77,1,77,1,77,3,77,
        1793,8,77,1,77,1,77,1,77,3,77,1798,8,77,1,77,1,77,1,77,1,77,3,77,
        1804,8,77,1,77,1,77,1,77,1,77,3,77,1810,8,77,1,77,1,77,1,77,1,77,
        3,77,1816,8,77,1,77,1,77,1,77,1,77,1,77,1,77,1,77,1,77,1,77,1,77,
        3,77,1828,8,77,1,77,3,77,1831,8,77,1,77,1,77,3,77,1835,8,77,1,78,
        1,78,1,78,1,78,1,78,3,78,1842,8,78,1,79,1,79,1,79,1,79,3,79,1848,
        8,79,1,79,1,79,1,79,1,79,1,79,1,79,1,79,1,79,1,79,3,79,1859,8,79,
        1,79,1,79,1,79,3,79,1864,8,79,1,79,1,79,1,79,1,79,1,79,1,79,1,79,
        3,79,1873,8,79,1,79,3,79,1876,8,79,1,79,1,79,1,79,1,79,1,79,1,79,
        1,79,1,79,1,79,1,79,1,79,1,79,1,79,1,79,1,79,3,79,1893,8,79,1,80,
        1,80,1,80,1,80,1,80,1,80,1,80,1,80,3,80,1903,8,80,1,81,1,81,1,81,
        3,81,1908,8,81,1,81,1,81,1,81,1,81,1,81,1,81,1,81,1,81,1,81,3,81,
        1919,8,81,1,81,1,81,1,81,3,81,1924,8,81,1,81,1,81,1,81,1,81,1,81,
        1,81,1,81,1,81,1,81,1,81,1,81,1,81,1,81,1,81,3,81,1940,8,81,1,82,
        1,82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,3,82,1951,8,82,1,83,1,83,
        1,83,3,83,1956,8,83,1,83,1,83,1,83,3,83,1961,8,83,1,83,1,83,1,83,
        3,83,1966,8,83,1,83,1,83,1,83,1,83,1,83,3,83,1973,8,83,1,84,1,84,
        1,84,1,84,1,84,1,84,1,84,1,85,1,85,1,85,3,85,1985,8,85,1,85,1,85,
        1,85,1,85,1,85,1,85,1,85,3,85,1994,8,85,1,85,1,85,1,85,3,85,1999,
        8,85,1,85,1,85,1,85,1,85,1,85,1,85,1,85,3,85,2008,8,85,1,86,1,86,
        1,86,1,86,1,86,1,86,3,86,2016,8,86,1,87,1,87,1,87,1,87,3,87,2022,
        8,87,1,87,1,87,1,87,3,87,2027,8,87,1,87,1,87,1,87,3,87,2032,8,87,
        1,87,1,87,1,87,1,87,1,87,3,87,2039,8,87,1,88,1,88,1,88,1,88,1,88,
        1,89,1,89,1,89,1,89,3,89,2050,8,89,1,89,1,89,1,89,3,89,2055,8,89,
        1,89,1,89,1,89,3,89,2060,8,89,1,89,1,89,1,89,3,89,2065,8,89,1,89,
        1,89,1,89,3,89,2070,8,89,1,89,1,89,1,89,3,89,2075,8,89,1,89,1,89,
        1,89,3,89,2080,8,89,1,89,1,89,1,89,3,89,2085,8,89,1,89,1,89,1,89,
        3,89,2090,8,89,1,89,1,89,1,89,3,89,2095,8,89,1,89,1,89,1,89,3,89,
        2100,8,89,1,89,1,89,1,89,3,89,2105,8,89,1,89,1,89,1,89,3,89,2110,
        8,89,1,89,3,89,2113,8,89,1,90,1,90,1,90,1,90,1,91,1,91,1,91,1,91,
        1,92,1,92,1,92,5,92,2126,8,92,10,92,12,92,2129,9,92,1,93,1,93,1,
        93,5,93,2134,8,93,10,93,12,93,2137,9,93,1,94,1,94,1,94,1,94,1,94,
        1,94,1,94,1,94,1,94,1,94,1,94,1,94,3,94,2151,8,94,1,94,1,94,1,94,
        1,94,1,94,1,94,1,94,1,94,1,94,1,94,1,94,1,94,1,94,1,94,3,94,2167,
        8,94,1,94,3,94,2170,8,94,1,94,1,94,1,94,1,94,1,94,1,94,1,94,1,94,
        1,94,3,94,2181,8,94,1,94,1,94,1,94,3,94,2186,8,94,1,94,3,94,2189,
        8,94,1,94,1,94,1,94,1,94,1,94,1,94,3,94,2197,8,94,1,94,1,94,3,94,
        2201,8,94,1,94,1,94,1,94,1,94,1,94,1,94,1,94,1,94,1,94,3,94,2212,
        8,94,1,94,1,94,3,94,2216,8,94,1,94,1,94,3,94,2220,8,94,1,94,3,94,
        2223,8,94,1,94,1,94,1,94,1,94,1,94,1,94,1,94,1,94,1,94,1,94,1,94,
        3,94,2236,8,94,1,94,3,94,2239,8,94,1,94,1,94,1,94,1,94,1,94,3,94,
        2246,8,94,1,94,3,94,2249,8,94,1,94,1,94,1,94,1,94,1,94,3,94,2256,
        8,94,1,94,1,94,1,94,3,94,2261,8,94,1,94,3,94,2264,8,94,1,94,1,94,
        1,94,1,94,1,94,1,94,1,94,1,94,1,94,1,94,1,94,1,94,3,94,2278,8,94,
        1,94,1,94,1,94,1,94,1,94,1,94,5,94,2286,8,94,10,94,12,94,2289,9,
        94,1,95,1,95,1,96,1,96,1,97,1,97,1,98,1,98,1,99,1,99,1,99,5,99,2302,
        8,99,10,99,12,99,2305,9,99,1,99,3,99,2308,8,99,3,99,2310,8,99,1,
        99,1,99,5,99,2314,8,99,10,99,12,99,2317,9,99,1,99,1,99,1,100,1,100,
        1,100,1,100,1,101,1,101,1,101,1,101,1,101,1,101,3,101,2331,8,101,
        1,102,1,102,1,102,3,102,2336,8,102,1,103,1,103,1,103,3,103,2341,
        8,103,1,104,1,104,1,104,1,104,1,104,1,104,1,104,3,104,2350,8,104,
        1,105,1,105,1,105,1,105,1,105,1,105,1,105,1,105,1,105,1,105,1,105,
        1,105,1,105,1,105,1,105,1,105,1,105,1,105,1,105,1,105,1,105,1,105,
        1,105,1,105,1,105,1,105,1,105,1,105,1,105,1,105,1,105,1,105,1,105,
        1,105,1,105,1,105,1,105,1,105,1,105,1,105,1,105,1,105,1,105,1,105,
        1,105,1,105,1,105,1,105,1,105,1,105,1,105,1,105,1,105,1,105,1,105,
        1,105,1,105,1,105,1,105,1,105,5,105,2412,8,105,10,105,12,105,2415,
        9,105,1,105,1,105,1,105,1,105,1,105,1,105,1,105,1,105,1,105,1,105,
        1,105,1,105,5,105,2429,8,105,10,105,12,105,2432,9,105,1,105,1,105,
        1,105,1,105,1,105,1,105,1,105,1,105,1,105,1,105,1,105,1,105,1,105,
        1,105,1,105,1,105,1,105,1,105,1,105,1,105,1,105,1,105,1,105,1,105,
        1,105,1,105,1,105,1,105,1,105,1,105,1,105,1,105,1,105,1,105,1,105,
        1,105,1,105,3,105,2471,8,105,1,106,1,106,1,106,1,106,1,106,1,107,
        1,107,1,107,1,107,1,107,1,107,1,108,1,108,1,108,3,108,2487,8,108,
        1,109,1,109,3,109,2491,8,109,1,109,1,109,1,109,1,109,1,109,1,109,
        1,109,1,109,1,109,1,109,3,109,2503,8,109,1,109,1,109,1,110,1,110,
        1,110,1,110,1,110,5,110,2512,8,110,10,110,12,110,2515,9,110,1,110,
        5,110,2518,8,110,10,110,12,110,2521,9,110,1,110,5,110,2524,8,110,
        10,110,12,110,2527,9,110,3,110,2529,8,110,1,110,1,110,1,110,1,110,
        1,110,5,110,2536,8,110,10,110,12,110,2539,9,110,1,110,1,110,1,110,
        1,110,1,111,1,111,1,111,1,111,1,111,5,111,2550,8,111,10,111,12,111,
        2553,9,111,1,111,5,111,2556,8,111,10,111,12,111,2559,9,111,1,111,
        5,111,2562,8,111,10,111,12,111,2565,9,111,3,111,2567,8,111,1,111,
        1,111,1,111,1,111,1,111,5,111,2574,8,111,10,111,12,111,2577,9,111,
        1,111,1,111,1,111,1,111,1,112,1,112,1,112,1,112,1,112,5,112,2588,
        8,112,10,112,12,112,2591,9,112,1,112,5,112,2594,8,112,10,112,12,
        112,2597,9,112,1,112,5,112,2600,8,112,10,112,12,112,2603,9,112,3,
        112,2605,8,112,1,112,1,112,1,112,1,112,1,112,5,112,2612,8,112,10,
        112,12,112,2615,9,112,1,112,1,112,1,112,1,112,1,113,1,113,1,113,
        1,113,1,113,5,113,2626,8,113,10,113,12,113,2629,9,113,1,113,5,113,
        2632,8,113,10,113,12,113,2635,9,113,1,113,5,113,2638,8,113,10,113,
        12,113,2641,9,113,3,113,2643,8,113,1,113,1,113,1,113,1,113,1,113,
        5,113,2650,8,113,10,113,12,113,2653,9,113,1,113,1,113,1,113,1,113,
        1,114,1,114,1,114,1,114,1,114,5,114,2664,8,114,10,114,12,114,2667,
        9,114,1,114,5,114,2670,8,114,10,114,12,114,2673,9,114,1,114,5,114,
        2676,8,114,10,114,12,114,2679,9,114,3,114,2681,8,114,1,114,1,114,
        1,114,1,114,1,114,5,114,2688,8,114,10,114,12,114,2691,9,114,1,114,
        1,114,1,114,1,114,1,115,1,115,1,115,1,115,1,115,5,115,2702,8,115,
        10,115,12,115,2705,9,115,1,115,5,115,2708,8,115,10,115,12,115,2711,
        9,115,1,115,5,115,2714,8,115,10,115,12,115,2717,9,115,3,115,2719,
        8,115,1,115,1,115,1,115,1,115,1,115,5,115,2726,8,115,10,115,12,115,
        2729,9,115,1,115,1,115,1,115,1,115,1,116,1,116,1,116,1,116,1,116,
        5,116,2740,8,116,10,116,12,116,2743,9,116,1,116,5,116,2746,8,116,
        10,116,12,116,2749,9,116,1,116,5,116,2752,8,116,10,116,12,116,2755,
        9,116,3,116,2757,8,116,1,116,1,116,1,116,1,116,1,116,5,116,2764,
        8,116,10,116,12,116,2767,9,116,1,116,1,116,1,116,1,116,1,117,1,117,
        1,117,1,117,1,117,5,117,2778,8,117,10,117,12,117,2781,9,117,1,117,
        5,117,2784,8,117,10,117,12,117,2787,9,117,1,117,5,117,2790,8,117,
        10,117,12,117,2793,9,117,3,117,2795,8,117,1,117,1,117,1,117,1,117,
        1,117,5,117,2802,8,117,10,117,12,117,2805,9,117,1,117,1,117,1,117,
        1,117,1,118,1,118,1,118,1,118,1,118,5,118,2816,8,118,10,118,12,118,
        2819,9,118,1,118,5,118,2822,8,118,10,118,12,118,2825,9,118,1,118,
        5,118,2828,8,118,10,118,12,118,2831,9,118,3,118,2833,8,118,1,118,
        1,118,1,118,1,118,1,118,5,118,2840,8,118,10,118,12,118,2843,9,118,
        1,118,1,118,1,118,1,118,1,119,1,119,1,119,1,119,1,119,5,119,2854,
        8,119,10,119,12,119,2857,9,119,1,119,5,119,2860,8,119,10,119,12,
        119,2863,9,119,1,119,5,119,2866,8,119,10,119,12,119,2869,9,119,3,
        119,2871,8,119,1,119,1,119,1,119,1,119,1,119,5,119,2878,8,119,10,
        119,12,119,2881,9,119,1,119,1,119,1,119,1,119,1,120,1,120,1,120,
        1,120,1,120,5,120,2892,8,120,10,120,12,120,2895,9,120,1,120,5,120,
        2898,8,120,10,120,12,120,2901,9,120,1,120,5,120,2904,8,120,10,120,
        12,120,2907,9,120,3,120,2909,8,120,1,120,1,120,1,120,1,120,1,120,
        5,120,2916,8,120,10,120,12,120,2919,9,120,1,120,1,120,1,120,1,120,
        1,120,0,1,188,121,0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,
        34,36,38,40,42,44,46,48,50,52,54,56,58,60,62,64,66,68,70,72,74,76,
        78,80,82,84,86,88,90,92,94,96,98,100,102,104,106,108,110,112,114,
        116,118,120,122,124,126,128,130,132,134,136,138,140,142,144,146,
        148,150,152,154,156,158,160,162,164,166,168,170,172,174,176,178,
        180,182,184,186,188,190,192,194,196,198,200,202,204,206,208,210,
        212,214,216,218,220,222,224,226,228,230,232,234,236,238,240,0,9,
        1,0,42,43,1,0,187,188,2,0,180,180,189,189,3,0,180,180,182,182,201,
        201,2,0,180,180,182,182,1,0,164,165,1,0,232,236,1,0,271,277,2,0,
        170,170,180,180,3527,0,297,1,0,0,0,2,302,1,0,0,0,4,312,1,0,0,0,6,
        363,1,0,0,0,8,366,1,0,0,0,10,378,1,0,0,0,12,389,1,0,0,0,14,398,1,
        0,0,0,16,407,1,0,0,0,18,416,1,0,0,0,20,425,1,0,0,0,22,434,1,0,0,
        0,24,443,1,0,0,0,26,452,1,0,0,0,28,461,1,0,0,0,30,470,1,0,0,0,32,
        479,1,0,0,0,34,488,1,0,0,0,36,497,1,0,0,0,38,506,1,0,0,0,40,515,
        1,0,0,0,42,524,1,0,0,0,44,533,1,0,0,0,46,542,1,0,0,0,48,551,1,0,
        0,0,50,635,1,0,0,0,52,637,1,0,0,0,54,687,1,0,0,0,56,724,1,0,0,0,
        58,740,1,0,0,0,60,742,1,0,0,0,62,780,1,0,0,0,64,782,1,0,0,0,66,834,
        1,0,0,0,68,836,1,0,0,0,70,885,1,0,0,0,72,887,1,0,0,0,74,918,1,0,
        0,0,76,920,1,0,0,0,78,957,1,0,0,0,80,959,1,0,0,0,82,978,1,0,0,0,
        84,990,1,0,0,0,86,1032,1,0,0,0,88,1034,1,0,0,0,90,1077,1,0,0,0,92,
        1079,1,0,0,0,94,1132,1,0,0,0,96,1134,1,0,0,0,98,1188,1,0,0,0,100,
        1190,1,0,0,0,102,1199,1,0,0,0,104,1243,1,0,0,0,106,1245,1,0,0,0,
        108,1254,1,0,0,0,110,1258,1,0,0,0,112,1268,1,0,0,0,114,1271,1,0,
        0,0,116,1274,1,0,0,0,118,1277,1,0,0,0,120,1280,1,0,0,0,122,1290,
        1,0,0,0,124,1410,1,0,0,0,126,1412,1,0,0,0,128,1447,1,0,0,0,130,1449,
        1,0,0,0,132,1485,1,0,0,0,134,1487,1,0,0,0,136,1567,1,0,0,0,138,1569,
        1,0,0,0,140,1615,1,0,0,0,142,1617,1,0,0,0,144,1670,1,0,0,0,146,1703,
        1,0,0,0,148,1705,1,0,0,0,150,1760,1,0,0,0,152,1762,1,0,0,0,154,1834,
        1,0,0,0,156,1836,1,0,0,0,158,1892,1,0,0,0,160,1894,1,0,0,0,162,1939,
        1,0,0,0,164,1941,1,0,0,0,166,1972,1,0,0,0,168,1974,1,0,0,0,170,2007,
        1,0,0,0,172,2009,1,0,0,0,174,2038,1,0,0,0,176,2040,1,0,0,0,178,2112,
        1,0,0,0,180,2114,1,0,0,0,182,2118,1,0,0,0,184,2122,1,0,0,0,186,2130,
        1,0,0,0,188,2277,1,0,0,0,190,2290,1,0,0,0,192,2292,1,0,0,0,194,2294,
        1,0,0,0,196,2296,1,0,0,0,198,2298,1,0,0,0,200,2320,1,0,0,0,202,2330,
        1,0,0,0,204,2332,1,0,0,0,206,2337,1,0,0,0,208,2349,1,0,0,0,210,2470,
        1,0,0,0,212,2472,1,0,0,0,214,2477,1,0,0,0,216,2483,1,0,0,0,218,2488,
        1,0,0,0,220,2506,1,0,0,0,222,2544,1,0,0,0,224,2582,1,0,0,0,226,2620,
        1,0,0,0,228,2658,1,0,0,0,230,2696,1,0,0,0,232,2734,1,0,0,0,234,2772,
        1,0,0,0,236,2810,1,0,0,0,238,2848,1,0,0,0,240,2886,1,0,0,0,242,296,
        3,2,1,0,243,296,3,4,2,0,244,296,3,6,3,0,245,296,3,8,4,0,246,296,
        3,10,5,0,247,296,3,12,6,0,248,296,3,14,7,0,249,296,3,16,8,0,250,
        296,3,18,9,0,251,296,3,20,10,0,252,296,3,22,11,0,253,296,3,24,12,
        0,254,296,3,26,13,0,255,296,3,28,14,0,256,296,3,30,15,0,257,296,
        3,32,16,0,258,296,3,34,17,0,259,296,3,36,18,0,260,296,3,38,19,0,
        261,296,3,40,20,0,262,296,3,42,21,0,263,296,3,44,22,0,264,296,3,
        46,23,0,265,296,3,48,24,0,266,296,3,198,99,0,267,296,3,200,100,0,
        268,296,3,214,107,0,269,296,3,218,109,0,270,296,3,220,110,0,271,
        296,3,222,111,0,272,296,3,224,112,0,273,296,3,238,119,0,274,296,
        3,240,120,0,275,296,3,228,114,0,276,296,3,226,113,0,277,296,3,230,
        115,0,278,296,3,232,116,0,279,296,3,234,117,0,280,296,3,236,118,
        0,281,296,3,52,26,0,282,296,3,60,30,0,283,296,3,64,32,0,284,296,
        3,82,41,0,285,296,3,88,44,0,286,296,3,176,88,0,287,296,3,180,90,
        0,288,296,3,96,48,0,289,296,3,92,46,0,290,296,3,130,65,0,291,296,
        3,142,71,0,292,296,3,156,78,0,293,296,3,160,80,0,294,296,3,106,53,
        0,295,242,1,0,0,0,295,243,1,0,0,0,295,244,1,0,0,0,295,245,1,0,0,
        0,295,246,1,0,0,0,295,247,1,0,0,0,295,248,1,0,0,0,295,249,1,0,0,
        0,295,250,1,0,0,0,295,251,1,0,0,0,295,252,1,0,0,0,295,253,1,0,0,
        0,295,254,1,0,0,0,295,255,1,0,0,0,295,256,1,0,0,0,295,257,1,0,0,
        0,295,258,1,0,0,0,295,259,1,0,0,0,295,260,1,0,0,0,295,261,1,0,0,
        0,295,262,1,0,0,0,295,263,1,0,0,0,295,264,1,0,0,0,295,265,1,0,0,
        0,295,266,1,0,0,0,295,267,1,0,0,0,295,268,1,0,0,0,295,269,1,0,0,
        0,295,270,1,0,0,0,295,271,1,0,0,0,295,272,1,0,0,0,295,273,1,0,0,
        0,295,274,1,0,0,0,295,275,1,0,0,0,295,276,1,0,0,0,295,277,1,0,0,
        0,295,278,1,0,0,0,295,279,1,0,0,0,295,280,1,0,0,0,295,281,1,0,0,
        0,295,282,1,0,0,0,295,283,1,0,0,0,295,284,1,0,0,0,295,285,1,0,0,
        0,295,286,1,0,0,0,295,287,1,0,0,0,295,288,1,0,0,0,295,289,1,0,0,
        0,295,290,1,0,0,0,295,291,1,0,0,0,295,292,1,0,0,0,295,293,1,0,0,
        0,295,294,1,0,0,0,296,299,1,0,0,0,297,295,1,0,0,0,297,298,1,0,0,
        0,298,300,1,0,0,0,299,297,1,0,0,0,300,301,5,0,0,1,301,1,1,0,0,0,
        302,306,5,3,0,0,303,305,3,50,25,0,304,303,1,0,0,0,305,308,1,0,0,
        0,306,304,1,0,0,0,306,307,1,0,0,0,307,309,1,0,0,0,308,306,1,0,0,
        0,309,310,5,2,0,0,310,3,1,0,0,0,311,313,5,36,0,0,312,311,1,0,0,0,
        312,313,1,0,0,0,313,314,1,0,0,0,314,318,5,37,0,0,315,317,3,58,29,
        0,316,315,1,0,0,0,317,320,1,0,0,0,318,316,1,0,0,0,318,319,1,0,0,
        0,319,321,1,0,0,0,320,318,1,0,0,0,321,322,5,2,0,0,322,5,1,0,0,0,
        323,327,5,39,0,0,324,326,3,62,31,0,325,324,1,0,0,0,326,329,1,0,0,
        0,327,325,1,0,0,0,327,328,1,0,0,0,328,330,1,0,0,0,329,327,1,0,0,
        0,330,364,5,2,0,0,331,335,7,0,0,0,332,334,3,66,33,0,333,332,1,0,
        0,0,334,337,1,0,0,0,335,333,1,0,0,0,335,336,1,0,0,0,336,338,1,0,
        0,0,337,335,1,0,0,0,338,364,5,2,0,0,339,343,5,46,0,0,340,342,3,70,
        35,0,341,340,1,0,0,0,342,345,1,0,0,0,343,341,1,0,0,0,343,344,1,0,
        0,0,344,346,1,0,0,0,345,343,1,0,0,0,346,364,5,2,0,0,347,351,5,49,
        0,0,348,350,3,74,37,0,349,348,1,0,0,0,350,353,1,0,0,0,351,349,1,
        0,0,0,351,352,1,0,0,0,352,354,1,0,0,0,353,351,1,0,0,0,354,364,5,
        2,0,0,355,359,5,50,0,0,356,358,3,78,39,0,357,356,1,0,0,0,358,361,
        1,0,0,0,359,357,1,0,0,0,359,360,1,0,0,0,360,362,1,0,0,0,361,359,
        1,0,0,0,362,364,5,2,0,0,363,323,1,0,0,0,363,331,1,0,0,0,363,339,
        1,0,0,0,363,347,1,0,0,0,363,355,1,0,0,0,364,7,1,0,0,0,365,367,5,
        36,0,0,366,365,1,0,0,0,366,367,1,0,0,0,367,368,1,0,0,0,368,372,5,
        51,0,0,369,371,3,82,41,0,370,369,1,0,0,0,371,374,1,0,0,0,372,370,
        1,0,0,0,372,373,1,0,0,0,373,375,1,0,0,0,374,372,1,0,0,0,375,376,
        5,2,0,0,376,9,1,0,0,0,377,379,5,36,0,0,378,377,1,0,0,0,378,379,1,
        0,0,0,379,380,1,0,0,0,380,384,5,56,0,0,381,383,3,86,43,0,382,381,
        1,0,0,0,383,386,1,0,0,0,384,382,1,0,0,0,384,385,1,0,0,0,385,387,
        1,0,0,0,386,384,1,0,0,0,387,388,5,2,0,0,388,11,1,0,0,0,389,393,5,
        59,0,0,390,392,3,90,45,0,391,390,1,0,0,0,392,395,1,0,0,0,393,391,
        1,0,0,0,393,394,1,0,0,0,394,396,1,0,0,0,395,393,1,0,0,0,396,397,
        5,2,0,0,397,13,1,0,0,0,398,402,5,63,0,0,399,401,3,94,47,0,400,399,
        1,0,0,0,401,404,1,0,0,0,402,400,1,0,0,0,402,403,1,0,0,0,403,405,
        1,0,0,0,404,402,1,0,0,0,405,406,5,2,0,0,406,15,1,0,0,0,407,411,5,
        65,0,0,408,410,3,98,49,0,409,408,1,0,0,0,410,413,1,0,0,0,411,409,
        1,0,0,0,411,412,1,0,0,0,412,414,1,0,0,0,413,411,1,0,0,0,414,415,
        5,2,0,0,415,17,1,0,0,0,416,420,5,69,0,0,417,419,3,104,52,0,418,417,
        1,0,0,0,419,422,1,0,0,0,420,418,1,0,0,0,420,421,1,0,0,0,421,423,
        1,0,0,0,422,420,1,0,0,0,423,424,5,2,0,0,424,19,1,0,0,0,425,429,5,
        77,0,0,426,428,3,124,62,0,427,426,1,0,0,0,428,431,1,0,0,0,429,427,
        1,0,0,0,429,430,1,0,0,0,430,432,1,0,0,0,431,429,1,0,0,0,432,433,
        5,2,0,0,433,21,1,0,0,0,434,438,5,84,0,0,435,437,3,128,64,0,436,435,
        1,0,0,0,437,440,1,0,0,0,438,436,1,0,0,0,438,439,1,0,0,0,439,441,
        1,0,0,0,440,438,1,0,0,0,441,442,5,2,0,0,442,23,1,0,0,0,443,447,5,
        85,0,0,444,446,3,132,66,0,445,444,1,0,0,0,446,449,1,0,0,0,447,445,
        1,0,0,0,447,448,1,0,0,0,448,450,1,0,0,0,449,447,1,0,0,0,450,451,
        5,2,0,0,451,25,1,0,0,0,452,456,5,86,0,0,453,455,3,136,68,0,454,453,
        1,0,0,0,455,458,1,0,0,0,456,454,1,0,0,0,456,457,1,0,0,0,457,459,
        1,0,0,0,458,456,1,0,0,0,459,460,5,2,0,0,460,27,1,0,0,0,461,465,5,
        90,0,0,462,464,3,140,70,0,463,462,1,0,0,0,464,467,1,0,0,0,465,463,
        1,0,0,0,465,466,1,0,0,0,466,468,1,0,0,0,467,465,1,0,0,0,468,469,
        5,2,0,0,469,29,1,0,0,0,470,474,5,92,0,0,471,473,3,144,72,0,472,471,
        1,0,0,0,473,476,1,0,0,0,474,472,1,0,0,0,474,475,1,0,0,0,475,477,
        1,0,0,0,476,474,1,0,0,0,477,478,5,2,0,0,478,31,1,0,0,0,479,483,5,
        93,0,0,480,482,3,146,73,0,481,480,1,0,0,0,482,485,1,0,0,0,483,481,
        1,0,0,0,483,484,1,0,0,0,484,486,1,0,0,0,485,483,1,0,0,0,486,487,
        5,2,0,0,487,33,1,0,0,0,488,492,5,94,0,0,489,491,3,150,75,0,490,489,
        1,0,0,0,491,494,1,0,0,0,492,490,1,0,0,0,492,493,1,0,0,0,493,495,
        1,0,0,0,494,492,1,0,0,0,495,496,5,2,0,0,496,35,1,0,0,0,497,501,5,
        97,0,0,498,500,3,154,77,0,499,498,1,0,0,0,500,503,1,0,0,0,501,499,
        1,0,0,0,501,502,1,0,0,0,502,504,1,0,0,0,503,501,1,0,0,0,504,505,
        5,2,0,0,505,37,1,0,0,0,506,510,5,102,0,0,507,509,3,158,79,0,508,
        507,1,0,0,0,509,512,1,0,0,0,510,508,1,0,0,0,510,511,1,0,0,0,511,
        513,1,0,0,0,512,510,1,0,0,0,513,514,5,2,0,0,514,39,1,0,0,0,515,519,
        5,113,0,0,516,518,3,162,81,0,517,516,1,0,0,0,518,521,1,0,0,0,519,
        517,1,0,0,0,519,520,1,0,0,0,520,522,1,0,0,0,521,519,1,0,0,0,522,
        523,5,2,0,0,523,41,1,0,0,0,524,528,5,114,0,0,525,527,3,166,83,0,
        526,525,1,0,0,0,527,530,1,0,0,0,528,526,1,0,0,0,528,529,1,0,0,0,
        529,531,1,0,0,0,530,528,1,0,0,0,531,532,5,2,0,0,532,43,1,0,0,0,533,
        537,5,115,0,0,534,536,3,170,85,0,535,534,1,0,0,0,536,539,1,0,0,0,
        537,535,1,0,0,0,537,538,1,0,0,0,538,540,1,0,0,0,539,537,1,0,0,0,
        540,541,5,2,0,0,541,45,1,0,0,0,542,546,5,190,0,0,543,545,3,174,87,
        0,544,543,1,0,0,0,545,548,1,0,0,0,546,544,1,0,0,0,546,547,1,0,0,
        0,547,549,1,0,0,0,548,546,1,0,0,0,549,550,5,2,0,0,550,47,1,0,0,0,
        551,555,5,191,0,0,552,554,3,178,89,0,553,552,1,0,0,0,554,557,1,0,
        0,0,555,553,1,0,0,0,555,556,1,0,0,0,556,558,1,0,0,0,557,555,1,0,
        0,0,558,559,5,2,0,0,559,49,1,0,0,0,560,636,3,52,26,0,561,636,3,220,
        110,0,562,563,5,5,0,0,563,564,5,187,0,0,564,636,3,194,97,0,565,566,
        5,6,0,0,566,567,5,212,0,0,567,636,5,211,0,0,568,569,5,7,0,0,569,
        570,5,187,0,0,570,636,3,194,97,0,571,573,5,8,0,0,572,574,5,195,0,
        0,573,572,1,0,0,0,573,574,1,0,0,0,574,575,1,0,0,0,575,636,3,194,
        97,0,576,578,5,9,0,0,577,579,5,195,0,0,578,577,1,0,0,0,578,579,1,
        0,0,0,579,580,1,0,0,0,580,636,5,187,0,0,581,582,5,10,0,0,582,636,
        5,187,0,0,583,584,5,11,0,0,584,585,5,187,0,0,585,586,5,187,0,0,586,
        636,3,194,97,0,587,588,5,12,0,0,588,589,5,187,0,0,589,636,5,180,
        0,0,590,591,5,13,0,0,591,592,5,187,0,0,592,636,5,180,0,0,593,595,
        5,14,0,0,594,596,5,195,0,0,595,594,1,0,0,0,595,596,1,0,0,0,596,597,
        1,0,0,0,597,636,5,180,0,0,598,599,5,15,0,0,599,600,5,216,0,0,600,
        636,5,215,0,0,601,602,5,16,0,0,602,603,3,54,27,0,603,604,5,2,0,0,
        604,636,1,0,0,0,605,606,5,17,0,0,606,608,5,18,0,0,607,609,5,195,
        0,0,608,607,1,0,0,0,608,609,1,0,0,0,609,610,1,0,0,0,610,636,3,194,
        97,0,611,636,5,19,0,0,612,613,5,20,0,0,613,614,5,187,0,0,614,636,
        3,194,97,0,615,616,5,21,0,0,616,617,5,187,0,0,617,636,3,194,97,0,
        618,619,5,22,0,0,619,620,5,187,0,0,620,636,3,194,97,0,621,622,5,
        23,0,0,622,623,5,187,0,0,623,636,3,194,97,0,624,625,5,24,0,0,625,
        626,5,187,0,0,626,636,3,194,97,0,627,628,5,25,0,0,628,629,5,187,
        0,0,629,636,3,194,97,0,630,632,5,26,0,0,631,633,5,195,0,0,632,631,
        1,0,0,0,632,633,1,0,0,0,633,634,1,0,0,0,634,636,3,194,97,0,635,560,
        1,0,0,0,635,561,1,0,0,0,635,562,1,0,0,0,635,565,1,0,0,0,635,568,
        1,0,0,0,635,571,1,0,0,0,635,576,1,0,0,0,635,581,1,0,0,0,635,583,
        1,0,0,0,635,587,1,0,0,0,635,590,1,0,0,0,635,593,1,0,0,0,635,598,
        1,0,0,0,635,601,1,0,0,0,635,605,1,0,0,0,635,611,1,0,0,0,635,612,
        1,0,0,0,635,615,1,0,0,0,635,618,1,0,0,0,635,621,1,0,0,0,635,624,
        1,0,0,0,635,627,1,0,0,0,635,630,1,0,0,0,636,51,1,0,0,0,637,638,5,
        4,0,0,638,639,3,182,91,0,639,640,3,182,91,0,640,642,3,190,95,0,641,
        643,3,190,95,0,642,641,1,0,0,0,642,643,1,0,0,0,643,645,1,0,0,0,644,
        646,3,190,95,0,645,644,1,0,0,0,645,646,1,0,0,0,646,650,1,0,0,0,647,
        649,3,56,28,0,648,647,1,0,0,0,649,652,1,0,0,0,650,648,1,0,0,0,650,
        651,1,0,0,0,651,670,1,0,0,0,652,650,1,0,0,0,653,655,5,175,0,0,654,
        656,5,4,0,0,655,654,1,0,0,0,655,656,1,0,0,0,656,657,1,0,0,0,657,
        658,3,182,91,0,658,660,3,182,91,0,659,661,3,190,95,0,660,659,1,0,
        0,0,660,661,1,0,0,0,661,663,1,0,0,0,662,664,3,190,95,0,663,662,1,
        0,0,0,663,664,1,0,0,0,664,666,1,0,0,0,665,667,3,190,95,0,666,665,
        1,0,0,0,666,667,1,0,0,0,667,669,1,0,0,0,668,653,1,0,0,0,669,672,
        1,0,0,0,670,668,1,0,0,0,670,671,1,0,0,0,671,53,1,0,0,0,672,670,1,
        0,0,0,673,675,5,27,0,0,674,676,5,195,0,0,675,674,1,0,0,0,675,676,
        1,0,0,0,676,677,1,0,0,0,677,688,3,194,97,0,678,680,5,28,0,0,679,
        681,5,195,0,0,680,679,1,0,0,0,680,681,1,0,0,0,681,682,1,0,0,0,682,
        688,3,194,97,0,683,684,5,29,0,0,684,688,3,182,91,0,685,686,5,30,
        0,0,686,688,3,182,91,0,687,673,1,0,0,0,687,678,1,0,0,0,687,683,1,
        0,0,0,687,685,1,0,0,0,688,55,1,0,0,0,689,691,5,31,0,0,690,692,5,
        195,0,0,691,690,1,0,0,0,691,692,1,0,0,0,692,693,1,0,0,0,693,725,
        3,196,98,0,694,696,5,32,0,0,695,697,5,195,0,0,696,695,1,0,0,0,696,
        697,1,0,0,0,697,698,1,0,0,0,698,725,3,196,98,0,699,701,5,55,0,0,
        700,702,5,195,0,0,701,700,1,0,0,0,701,702,1,0,0,0,702,703,1,0,0,
        0,703,725,3,196,98,0,704,706,5,33,0,0,705,707,5,195,0,0,706,705,
        1,0,0,0,706,707,1,0,0,0,707,708,1,0,0,0,708,725,3,196,98,0,709,711,
        5,34,0,0,710,712,5,195,0,0,711,710,1,0,0,0,711,712,1,0,0,0,712,713,
        1,0,0,0,713,725,3,196,98,0,714,716,5,35,0,0,715,717,5,195,0,0,716,
        715,1,0,0,0,716,717,1,0,0,0,717,718,1,0,0,0,718,725,3,196,98,0,719,
        721,5,47,0,0,720,722,5,195,0,0,721,720,1,0,0,0,721,722,1,0,0,0,722,
        723,1,0,0,0,723,725,3,196,98,0,724,689,1,0,0,0,724,694,1,0,0,0,724,
        699,1,0,0,0,724,704,1,0,0,0,724,709,1,0,0,0,724,714,1,0,0,0,724,
        719,1,0,0,0,725,57,1,0,0,0,726,741,3,200,100,0,727,741,3,60,30,0,
        728,741,3,222,111,0,729,731,5,38,0,0,730,732,5,195,0,0,731,730,1,
        0,0,0,731,732,1,0,0,0,732,733,1,0,0,0,733,741,5,180,0,0,734,741,
        5,19,0,0,735,737,5,21,0,0,736,738,5,195,0,0,737,736,1,0,0,0,737,
        738,1,0,0,0,738,739,1,0,0,0,739,741,3,194,97,0,740,726,1,0,0,0,740,
        727,1,0,0,0,740,728,1,0,0,0,740,729,1,0,0,0,740,734,1,0,0,0,740,
        735,1,0,0,0,741,59,1,0,0,0,742,743,5,4,0,0,743,744,3,182,91,0,744,
        745,3,182,91,0,745,746,3,182,91,0,746,747,3,182,91,0,747,748,3,190,
        95,0,748,749,3,190,95,0,749,750,3,190,95,0,750,751,5,180,0,0,751,
        61,1,0,0,0,752,781,3,64,32,0,753,781,3,224,112,0,754,756,5,9,0,0,
        755,757,5,195,0,0,756,755,1,0,0,0,756,757,1,0,0,0,757,758,1,0,0,
        0,758,781,5,187,0,0,759,760,5,40,0,0,760,761,3,194,97,0,761,762,
        3,194,97,0,762,763,3,194,97,0,763,781,1,0,0,0,764,766,5,41,0,0,765,
        767,5,195,0,0,766,765,1,0,0,0,766,767,1,0,0,0,767,768,1,0,0,0,768,
        781,3,194,97,0,769,771,5,14,0,0,770,772,5,195,0,0,771,770,1,0,0,
        0,771,772,1,0,0,0,772,773,1,0,0,0,773,781,5,180,0,0,774,775,5,15,
        0,0,775,781,5,215,0,0,776,777,5,17,0,0,777,778,5,18,0,0,778,781,
        3,194,97,0,779,781,5,19,0,0,780,752,1,0,0,0,780,753,1,0,0,0,780,
        754,1,0,0,0,780,759,1,0,0,0,780,764,1,0,0,0,780,769,1,0,0,0,780,
        774,1,0,0,0,780,776,1,0,0,0,780,779,1,0,0,0,781,63,1,0,0,0,782,783,
        5,4,0,0,783,784,3,182,91,0,784,785,3,182,91,0,785,786,3,182,91,0,
        786,787,3,182,91,0,787,788,3,182,91,0,788,789,3,182,91,0,789,791,
        3,190,95,0,790,792,3,190,95,0,791,790,1,0,0,0,791,792,1,0,0,0,792,
        794,1,0,0,0,793,795,3,190,95,0,794,793,1,0,0,0,794,795,1,0,0,0,795,
        65,1,0,0,0,796,835,3,68,34,0,797,799,5,9,0,0,798,800,5,195,0,0,799,
        798,1,0,0,0,799,800,1,0,0,0,800,801,1,0,0,0,801,835,5,187,0,0,802,
        803,5,44,0,0,803,835,5,218,0,0,804,806,5,21,0,0,805,807,5,195,0,
        0,806,805,1,0,0,0,806,807,1,0,0,0,807,808,1,0,0,0,808,835,3,194,
        97,0,809,810,5,45,0,0,810,835,5,181,0,0,811,812,5,6,0,0,812,835,
        5,211,0,0,813,814,5,40,0,0,814,815,3,194,97,0,815,816,3,194,97,0,
        816,817,3,194,97,0,817,835,1,0,0,0,818,820,5,41,0,0,819,821,5,195,
        0,0,820,819,1,0,0,0,820,821,1,0,0,0,821,822,1,0,0,0,822,835,3,194,
        97,0,823,825,5,14,0,0,824,826,5,195,0,0,825,824,1,0,0,0,825,826,
        1,0,0,0,826,827,1,0,0,0,827,835,5,180,0,0,828,829,5,15,0,0,829,835,
        5,215,0,0,830,831,5,17,0,0,831,832,5,18,0,0,832,835,3,194,97,0,833,
        835,5,19,0,0,834,796,1,0,0,0,834,797,1,0,0,0,834,802,1,0,0,0,834,
        804,1,0,0,0,834,809,1,0,0,0,834,811,1,0,0,0,834,813,1,0,0,0,834,
        818,1,0,0,0,834,823,1,0,0,0,834,828,1,0,0,0,834,830,1,0,0,0,834,
        833,1,0,0,0,835,67,1,0,0,0,836,837,5,4,0,0,837,838,3,182,91,0,838,
        839,3,182,91,0,839,840,3,182,91,0,840,841,3,182,91,0,841,842,3,182,
        91,0,842,843,3,182,91,0,843,844,3,190,95,0,844,851,3,190,95,0,845,
        852,3,190,95,0,846,847,3,190,95,0,847,848,3,190,95,0,848,849,3,190,
        95,0,849,850,3,190,95,0,850,852,1,0,0,0,851,845,1,0,0,0,851,846,
        1,0,0,0,851,852,1,0,0,0,852,69,1,0,0,0,853,886,3,72,36,0,854,856,
        5,47,0,0,855,857,5,195,0,0,856,855,1,0,0,0,856,857,1,0,0,0,857,858,
        1,0,0,0,858,886,5,180,0,0,859,861,5,9,0,0,860,862,5,195,0,0,861,
        860,1,0,0,0,861,862,1,0,0,0,862,863,1,0,0,0,863,886,5,187,0,0,864,
        866,5,41,0,0,865,867,5,195,0,0,866,865,1,0,0,0,866,867,1,0,0,0,867,
        868,1,0,0,0,868,869,3,194,97,0,869,870,3,194,97,0,870,886,1,0,0,
        0,871,873,5,14,0,0,872,874,5,195,0,0,873,872,1,0,0,0,873,874,1,0,
        0,0,874,875,1,0,0,0,875,886,5,180,0,0,876,878,5,48,0,0,877,879,5,
        195,0,0,878,877,1,0,0,0,878,879,1,0,0,0,879,880,1,0,0,0,880,886,
        5,180,0,0,881,882,5,17,0,0,882,883,5,18,0,0,883,886,3,194,97,0,884,
        886,5,19,0,0,885,853,1,0,0,0,885,854,1,0,0,0,885,859,1,0,0,0,885,
        864,1,0,0,0,885,871,1,0,0,0,885,876,1,0,0,0,885,881,1,0,0,0,885,
        884,1,0,0,0,886,71,1,0,0,0,887,888,5,4,0,0,888,889,3,182,91,0,889,
        890,3,182,91,0,890,891,3,182,91,0,891,892,3,182,91,0,892,893,3,190,
        95,0,893,897,3,190,95,0,894,895,3,190,95,0,895,896,3,190,95,0,896,
        898,1,0,0,0,897,894,1,0,0,0,897,898,1,0,0,0,898,73,1,0,0,0,899,919,
        3,76,38,0,900,902,5,9,0,0,901,903,5,195,0,0,902,901,1,0,0,0,902,
        903,1,0,0,0,903,904,1,0,0,0,904,919,5,187,0,0,905,906,5,40,0,0,906,
        919,3,194,97,0,907,909,5,14,0,0,908,910,5,195,0,0,909,908,1,0,0,
        0,909,910,1,0,0,0,910,911,1,0,0,0,911,919,5,180,0,0,912,913,5,15,
        0,0,913,919,5,215,0,0,914,915,5,17,0,0,915,916,5,18,0,0,916,919,
        3,194,97,0,917,919,5,19,0,0,918,899,1,0,0,0,918,900,1,0,0,0,918,
        905,1,0,0,0,918,907,1,0,0,0,918,912,1,0,0,0,918,914,1,0,0,0,918,
        917,1,0,0,0,919,75,1,0,0,0,920,921,5,4,0,0,921,922,3,182,91,0,922,
        923,3,182,91,0,923,925,3,190,95,0,924,926,3,190,95,0,925,924,1,0,
        0,0,925,926,1,0,0,0,926,77,1,0,0,0,927,958,3,80,40,0,928,930,5,9,
        0,0,929,931,5,195,0,0,930,929,1,0,0,0,930,931,1,0,0,0,931,932,1,
        0,0,0,932,958,5,187,0,0,933,934,5,40,0,0,934,935,3,194,97,0,935,
        936,3,194,97,0,936,937,3,194,97,0,937,938,3,194,97,0,938,958,1,0,
        0,0,939,941,5,41,0,0,940,942,5,195,0,0,941,940,1,0,0,0,941,942,1,
        0,0,0,942,943,1,0,0,0,943,958,3,194,97,0,944,946,5,14,0,0,945,947,
        5,195,0,0,946,945,1,0,0,0,946,947,1,0,0,0,947,948,1,0,0,0,948,958,
        5,180,0,0,949,950,5,15,0,0,950,958,5,215,0,0,951,952,5,17,0,0,952,
        953,5,18,0,0,953,958,3,194,97,0,954,958,5,19,0,0,955,956,5,44,0,
        0,956,958,5,219,0,0,957,927,1,0,0,0,957,928,1,0,0,0,957,933,1,0,
        0,0,957,939,1,0,0,0,957,944,1,0,0,0,957,949,1,0,0,0,957,951,1,0,
        0,0,957,954,1,0,0,0,957,955,1,0,0,0,958,79,1,0,0,0,959,960,5,4,0,
        0,960,961,3,182,91,0,961,962,3,182,91,0,962,963,3,182,91,0,963,964,
        3,182,91,0,964,966,3,190,95,0,965,967,3,190,95,0,966,965,1,0,0,0,
        966,967,1,0,0,0,967,81,1,0,0,0,968,979,3,200,100,0,969,973,5,52,
        0,0,970,972,3,84,42,0,971,970,1,0,0,0,972,975,1,0,0,0,973,971,1,
        0,0,0,973,974,1,0,0,0,974,976,1,0,0,0,975,973,1,0,0,0,976,979,5,
        2,0,0,977,979,5,53,0,0,978,968,1,0,0,0,978,969,1,0,0,0,978,977,1,
        0,0,0,979,83,1,0,0,0,980,982,5,54,0,0,981,983,5,195,0,0,982,981,
        1,0,0,0,982,983,1,0,0,0,983,984,1,0,0,0,984,991,3,182,91,0,985,987,
        5,55,0,0,986,988,5,195,0,0,987,986,1,0,0,0,987,988,1,0,0,0,988,989,
        1,0,0,0,989,991,3,194,97,0,990,980,1,0,0,0,990,985,1,0,0,0,991,85,
        1,0,0,0,992,1033,3,200,100,0,993,995,5,57,0,0,994,996,5,195,0,0,
        995,994,1,0,0,0,995,996,1,0,0,0,996,997,1,0,0,0,997,1033,5,180,0,
        0,998,1000,5,58,0,0,999,1001,5,195,0,0,1000,999,1,0,0,0,1000,1001,
        1,0,0,0,1001,1002,1,0,0,0,1002,1028,5,192,0,0,1003,1005,3,194,97,
        0,1004,1006,5,178,0,0,1005,1004,1,0,0,0,1005,1006,1,0,0,0,1006,1007,
        1,0,0,0,1007,1009,3,194,97,0,1008,1010,5,178,0,0,1009,1008,1,0,0,
        0,1009,1010,1,0,0,0,1010,1011,1,0,0,0,1011,1012,3,194,97,0,1012,
        1029,1,0,0,0,1013,1015,5,173,0,0,1014,1016,5,195,0,0,1015,1014,1,
        0,0,0,1015,1016,1,0,0,0,1016,1017,1,0,0,0,1017,1019,3,182,91,0,1018,
        1020,5,178,0,0,1019,1018,1,0,0,0,1019,1020,1,0,0,0,1020,1026,1,0,
        0,0,1021,1023,5,174,0,0,1022,1024,5,195,0,0,1023,1022,1,0,0,0,1023,
        1024,1,0,0,0,1024,1025,1,0,0,0,1025,1027,3,182,91,0,1026,1021,1,
        0,0,0,1026,1027,1,0,0,0,1027,1029,1,0,0,0,1028,1003,1,0,0,0,1028,
        1013,1,0,0,0,1029,1030,1,0,0,0,1030,1031,5,193,0,0,1031,1033,1,0,
        0,0,1032,992,1,0,0,0,1032,993,1,0,0,0,1032,998,1,0,0,0,1033,87,1,
        0,0,0,1034,1035,5,4,0,0,1035,1036,3,182,91,0,1036,1037,3,190,95,
        0,1037,1038,3,190,95,0,1038,1039,3,190,95,0,1039,89,1,0,0,0,1040,
        1078,3,92,46,0,1041,1078,3,226,113,0,1042,1044,5,9,0,0,1043,1045,
        5,195,0,0,1044,1043,1,0,0,0,1044,1045,1,0,0,0,1045,1046,1,0,0,0,
        1046,1078,5,187,0,0,1047,1048,5,60,0,0,1048,1049,5,180,0,0,1049,
        1078,3,194,97,0,1050,1052,5,41,0,0,1051,1053,5,195,0,0,1052,1051,
        1,0,0,0,1052,1053,1,0,0,0,1053,1054,1,0,0,0,1054,1078,3,194,97,0,
        1055,1057,5,14,0,0,1056,1058,5,195,0,0,1057,1056,1,0,0,0,1057,1058,
        1,0,0,0,1058,1059,1,0,0,0,1059,1078,5,180,0,0,1060,1061,5,17,0,0,
        1061,1062,5,18,0,0,1062,1069,3,194,97,0,1063,1070,5,133,0,0,1064,
        1066,5,9,0,0,1065,1067,5,195,0,0,1066,1065,1,0,0,0,1066,1067,1,0,
        0,0,1067,1068,1,0,0,0,1068,1070,5,187,0,0,1069,1063,1,0,0,0,1069,
        1064,1,0,0,0,1070,1078,1,0,0,0,1071,1078,5,19,0,0,1072,1073,5,61,
        0,0,1073,1074,3,194,97,0,1074,1075,5,180,0,0,1075,1078,1,0,0,0,1076,
        1078,5,62,0,0,1077,1040,1,0,0,0,1077,1041,1,0,0,0,1077,1042,1,0,
        0,0,1077,1047,1,0,0,0,1077,1050,1,0,0,0,1077,1055,1,0,0,0,1077,1060,
        1,0,0,0,1077,1071,1,0,0,0,1077,1072,1,0,0,0,1077,1076,1,0,0,0,1078,
        91,1,0,0,0,1079,1080,5,4,0,0,1080,1081,3,182,91,0,1081,1082,3,182,
        91,0,1082,93,1,0,0,0,1083,1133,3,96,48,0,1084,1133,3,228,114,0,1085,
        1087,5,9,0,0,1086,1088,5,195,0,0,1087,1086,1,0,0,0,1087,1088,1,0,
        0,0,1088,1089,1,0,0,0,1089,1133,5,187,0,0,1090,1091,5,40,0,0,1091,
        1092,3,194,97,0,1092,1093,3,194,97,0,1093,1094,3,194,97,0,1094,1095,
        3,194,97,0,1095,1133,1,0,0,0,1096,1098,5,47,0,0,1097,1099,5,195,
        0,0,1098,1097,1,0,0,0,1098,1099,1,0,0,0,1099,1100,1,0,0,0,1100,1133,
        5,180,0,0,1101,1102,5,64,0,0,1102,1133,5,180,0,0,1103,1104,5,41,
        0,0,1104,1106,3,194,97,0,1105,1107,3,194,97,0,1106,1105,1,0,0,0,
        1106,1107,1,0,0,0,1107,1133,1,0,0,0,1108,1110,5,14,0,0,1109,1111,
        5,195,0,0,1110,1109,1,0,0,0,1110,1111,1,0,0,0,1111,1112,1,0,0,0,
        1112,1133,5,180,0,0,1113,1115,5,48,0,0,1114,1116,5,195,0,0,1115,
        1114,1,0,0,0,1115,1116,1,0,0,0,1116,1117,1,0,0,0,1117,1133,5,180,
        0,0,1118,1119,5,15,0,0,1119,1133,5,215,0,0,1120,1121,5,17,0,0,1121,
        1122,5,18,0,0,1122,1129,3,194,97,0,1123,1130,5,133,0,0,1124,1126,
        5,9,0,0,1125,1127,5,195,0,0,1126,1125,1,0,0,0,1126,1127,1,0,0,0,
        1127,1128,1,0,0,0,1128,1130,5,187,0,0,1129,1123,1,0,0,0,1129,1124,
        1,0,0,0,1130,1133,1,0,0,0,1131,1133,5,19,0,0,1132,1083,1,0,0,0,1132,
        1084,1,0,0,0,1132,1085,1,0,0,0,1132,1090,1,0,0,0,1132,1096,1,0,0,
        0,1132,1101,1,0,0,0,1132,1103,1,0,0,0,1132,1108,1,0,0,0,1132,1113,
        1,0,0,0,1132,1118,1,0,0,0,1132,1120,1,0,0,0,1132,1131,1,0,0,0,1133,
        95,1,0,0,0,1134,1135,5,4,0,0,1135,1136,3,182,91,0,1136,1137,3,182,
        91,0,1137,1138,3,182,91,0,1138,1144,3,182,91,0,1139,1140,3,182,91,
        0,1140,1141,3,182,91,0,1141,1142,3,182,91,0,1142,1143,3,182,91,0,
        1143,1145,1,0,0,0,1144,1139,1,0,0,0,1144,1145,1,0,0,0,1145,1146,
        1,0,0,0,1146,1147,3,190,95,0,1147,1151,3,190,95,0,1148,1149,3,190,
        95,0,1149,1150,3,190,95,0,1150,1152,1,0,0,0,1151,1148,1,0,0,0,1151,
        1152,1,0,0,0,1152,97,1,0,0,0,1153,1189,3,100,50,0,1154,1156,5,9,
        0,0,1155,1157,5,195,0,0,1156,1155,1,0,0,0,1156,1157,1,0,0,0,1157,
        1158,1,0,0,0,1158,1189,5,187,0,0,1159,1160,5,60,0,0,1160,1161,5,
        180,0,0,1161,1162,5,180,0,0,1162,1163,3,194,97,0,1163,1164,3,194,
        97,0,1164,1165,3,194,97,0,1165,1189,1,0,0,0,1166,1168,5,41,0,0,1167,
        1169,5,195,0,0,1168,1167,1,0,0,0,1168,1169,1,0,0,0,1169,1170,1,0,
        0,0,1170,1189,3,194,97,0,1171,1173,5,14,0,0,1172,1174,5,195,0,0,
        1173,1172,1,0,0,0,1173,1174,1,0,0,0,1174,1175,1,0,0,0,1175,1189,
        5,180,0,0,1176,1177,5,66,0,0,1177,1189,3,194,97,0,1178,1179,5,67,
        0,0,1179,1189,3,194,97,0,1180,1181,5,15,0,0,1181,1189,5,215,0,0,
        1182,1183,5,17,0,0,1183,1184,5,18,0,0,1184,1189,3,194,97,0,1185,
        1189,3,102,51,0,1186,1189,5,19,0,0,1187,1189,5,62,0,0,1188,1153,
        1,0,0,0,1188,1154,1,0,0,0,1188,1159,1,0,0,0,1188,1166,1,0,0,0,1188,
        1171,1,0,0,0,1188,1176,1,0,0,0,1188,1178,1,0,0,0,1188,1180,1,0,0,
        0,1188,1182,1,0,0,0,1188,1185,1,0,0,0,1188,1186,1,0,0,0,1188,1187,
        1,0,0,0,1189,99,1,0,0,0,1190,1191,5,4,0,0,1191,1192,3,182,91,0,1192,
        1193,3,182,91,0,1193,1194,3,182,91,0,1194,1195,3,182,91,0,1195,1196,
        3,182,91,0,1196,1197,3,190,95,0,1197,1198,3,190,95,0,1198,101,1,
        0,0,0,1199,1200,5,68,0,0,1200,1201,3,182,91,0,1201,1202,3,190,95,
        0,1202,1203,3,190,95,0,1203,103,1,0,0,0,1204,1244,3,106,53,0,1205,
        1244,3,108,54,0,1206,1244,3,110,55,0,1207,1244,3,112,56,0,1208,1244,
        3,114,57,0,1209,1244,3,116,58,0,1210,1244,3,118,59,0,1211,1244,3,
        120,60,0,1212,1244,3,122,61,0,1213,1215,5,9,0,0,1214,1216,5,195,
        0,0,1215,1214,1,0,0,0,1215,1216,1,0,0,0,1216,1217,1,0,0,0,1217,1244,
        5,187,0,0,1218,1219,5,76,0,0,1219,1244,3,194,97,0,1220,1221,5,64,
        0,0,1221,1244,5,180,0,0,1222,1223,5,41,0,0,1223,1225,3,194,97,0,
        1224,1226,3,194,97,0,1225,1224,1,0,0,0,1225,1226,1,0,0,0,1226,1244,
        1,0,0,0,1227,1228,5,15,0,0,1228,1244,5,215,0,0,1229,1230,5,17,0,
        0,1230,1231,5,18,0,0,1231,1238,3,194,97,0,1232,1239,5,133,0,0,1233,
        1235,5,9,0,0,1234,1236,5,195,0,0,1235,1234,1,0,0,0,1235,1236,1,0,
        0,0,1236,1237,1,0,0,0,1237,1239,5,187,0,0,1238,1232,1,0,0,0,1238,
        1233,1,0,0,0,1239,1240,1,0,0,0,1240,1241,5,187,0,0,1241,1244,1,0,
        0,0,1242,1244,5,19,0,0,1243,1204,1,0,0,0,1243,1205,1,0,0,0,1243,
        1206,1,0,0,0,1243,1207,1,0,0,0,1243,1208,1,0,0,0,1243,1209,1,0,0,
        0,1243,1210,1,0,0,0,1243,1211,1,0,0,0,1243,1212,1,0,0,0,1243,1213,
        1,0,0,0,1243,1218,1,0,0,0,1243,1220,1,0,0,0,1243,1222,1,0,0,0,1243,
        1227,1,0,0,0,1243,1229,1,0,0,0,1243,1242,1,0,0,0,1244,105,1,0,0,
        0,1245,1246,5,70,0,0,1246,1248,3,182,91,0,1247,1249,3,182,91,0,1248,
        1247,1,0,0,0,1248,1249,1,0,0,0,1249,1250,1,0,0,0,1250,1252,3,190,
        95,0,1251,1253,3,190,95,0,1252,1251,1,0,0,0,1252,1253,1,0,0,0,1253,
        107,1,0,0,0,1254,1255,5,68,0,0,1255,1256,3,182,91,0,1256,1257,3,
        190,95,0,1257,109,1,0,0,0,1258,1259,5,50,0,0,1259,1260,3,182,91,
        0,1260,1261,3,182,91,0,1261,1262,3,182,91,0,1262,1264,5,187,0,0,
        1263,1265,5,181,0,0,1264,1263,1,0,0,0,1264,1265,1,0,0,0,1265,1266,
        1,0,0,0,1266,1267,5,187,0,0,1267,111,1,0,0,0,1268,1269,5,71,0,0,
        1269,1270,3,182,91,0,1270,113,1,0,0,0,1271,1272,5,65,0,0,1272,1273,
        3,182,91,0,1273,115,1,0,0,0,1274,1275,5,72,0,0,1275,1276,3,182,91,
        0,1276,117,1,0,0,0,1277,1278,5,73,0,0,1278,1279,3,182,91,0,1279,
        119,1,0,0,0,1280,1281,5,74,0,0,1281,1282,5,187,0,0,1282,1283,3,182,
        91,0,1283,1284,3,182,91,0,1284,1285,3,182,91,0,1285,1286,3,182,91,
        0,1286,1288,3,182,91,0,1287,1289,3,182,91,0,1288,1287,1,0,0,0,1288,
        1289,1,0,0,0,1289,121,1,0,0,0,1290,1291,5,75,0,0,1291,1292,3,182,
        91,0,1292,123,1,0,0,0,1293,1411,3,126,63,0,1294,1296,5,9,0,0,1295,
        1297,5,195,0,0,1296,1295,1,0,0,0,1296,1297,1,0,0,0,1297,1298,1,0,
        0,0,1298,1411,5,187,0,0,1299,1300,5,27,0,0,1300,1411,3,194,97,0,
        1301,1303,5,41,0,0,1302,1304,5,195,0,0,1303,1302,1,0,0,0,1303,1304,
        1,0,0,0,1304,1305,1,0,0,0,1305,1411,3,194,97,0,1306,1307,5,78,0,
        0,1307,1308,3,194,97,0,1308,1309,3,194,97,0,1309,1314,3,194,97,0,
        1310,1311,3,194,97,0,1311,1312,3,194,97,0,1312,1313,3,194,97,0,1313,
        1315,1,0,0,0,1314,1310,1,0,0,0,1314,1315,1,0,0,0,1315,1320,1,0,0,
        0,1316,1317,3,194,97,0,1317,1318,3,194,97,0,1318,1319,3,194,97,0,
        1319,1321,1,0,0,0,1320,1316,1,0,0,0,1320,1321,1,0,0,0,1321,1326,
        1,0,0,0,1322,1323,3,194,97,0,1323,1324,3,194,97,0,1324,1325,3,194,
        97,0,1325,1327,1,0,0,0,1326,1322,1,0,0,0,1326,1327,1,0,0,0,1327,
        1411,1,0,0,0,1328,1330,5,14,0,0,1329,1331,5,195,0,0,1330,1329,1,
        0,0,0,1330,1331,1,0,0,0,1331,1332,1,0,0,0,1332,1411,5,180,0,0,1333,
        1334,5,79,0,0,1334,1335,3,194,97,0,1335,1336,3,194,97,0,1336,1341,
        3,194,97,0,1337,1338,3,194,97,0,1338,1339,3,194,97,0,1339,1340,3,
        194,97,0,1340,1342,1,0,0,0,1341,1337,1,0,0,0,1341,1342,1,0,0,0,1342,
        1347,1,0,0,0,1343,1344,3,194,97,0,1344,1345,3,194,97,0,1345,1346,
        3,194,97,0,1346,1348,1,0,0,0,1347,1343,1,0,0,0,1347,1348,1,0,0,0,
        1348,1353,1,0,0,0,1349,1350,3,194,97,0,1350,1351,3,194,97,0,1351,
        1352,3,194,97,0,1352,1354,1,0,0,0,1353,1349,1,0,0,0,1353,1354,1,
        0,0,0,1354,1411,1,0,0,0,1355,1356,5,17,0,0,1356,1357,5,18,0,0,1357,
        1364,3,194,97,0,1358,1365,5,133,0,0,1359,1361,5,9,0,0,1360,1362,
        5,195,0,0,1361,1360,1,0,0,0,1361,1362,1,0,0,0,1362,1363,1,0,0,0,
        1363,1365,5,187,0,0,1364,1358,1,0,0,0,1364,1359,1,0,0,0,1365,1411,
        1,0,0,0,1366,1367,5,80,0,0,1367,1368,3,194,97,0,1368,1369,3,194,
        97,0,1369,1374,3,194,97,0,1370,1371,3,194,97,0,1371,1372,3,194,97,
        0,1372,1373,3,194,97,0,1373,1375,1,0,0,0,1374,1370,1,0,0,0,1374,
        1375,1,0,0,0,1375,1380,1,0,0,0,1376,1377,3,194,97,0,1377,1378,3,
        194,97,0,1378,1379,3,194,97,0,1379,1381,1,0,0,0,1380,1376,1,0,0,
        0,1380,1381,1,0,0,0,1381,1386,1,0,0,0,1382,1383,3,194,97,0,1383,
        1384,3,194,97,0,1384,1385,3,194,97,0,1385,1387,1,0,0,0,1386,1382,
        1,0,0,0,1386,1387,1,0,0,0,1387,1411,1,0,0,0,1388,1411,5,19,0,0,1389,
        1391,5,21,0,0,1390,1392,5,195,0,0,1391,1390,1,0,0,0,1391,1392,1,
        0,0,0,1392,1393,1,0,0,0,1393,1411,3,194,97,0,1394,1395,5,81,0,0,
        1395,1411,5,222,0,0,1396,1397,5,61,0,0,1397,1398,5,83,0,0,1398,1400,
        3,194,97,0,1399,1401,3,194,97,0,1400,1399,1,0,0,0,1400,1401,1,0,
        0,0,1401,1403,1,0,0,0,1402,1404,3,194,97,0,1403,1402,1,0,0,0,1403,
        1404,1,0,0,0,1404,1406,1,0,0,0,1405,1407,3,194,97,0,1406,1405,1,
        0,0,0,1406,1407,1,0,0,0,1407,1411,1,0,0,0,1408,1411,5,82,0,0,1409,
        1411,5,62,0,0,1410,1293,1,0,0,0,1410,1294,1,0,0,0,1410,1299,1,0,
        0,0,1410,1301,1,0,0,0,1410,1306,1,0,0,0,1410,1328,1,0,0,0,1410,1333,
        1,0,0,0,1410,1355,1,0,0,0,1410,1366,1,0,0,0,1410,1388,1,0,0,0,1410,
        1389,1,0,0,0,1410,1394,1,0,0,0,1410,1396,1,0,0,0,1410,1408,1,0,0,
        0,1410,1409,1,0,0,0,1411,125,1,0,0,0,1412,1413,5,4,0,0,1413,1414,
        3,182,91,0,1414,1415,3,182,91,0,1415,1416,3,182,91,0,1416,1422,3,
        182,91,0,1417,1418,3,182,91,0,1418,1419,3,182,91,0,1419,1420,3,182,
        91,0,1420,1421,3,182,91,0,1421,1423,1,0,0,0,1422,1417,1,0,0,0,1422,
        1423,1,0,0,0,1423,1429,1,0,0,0,1424,1425,3,182,91,0,1425,1426,3,
        182,91,0,1426,1427,3,182,91,0,1427,1428,3,182,91,0,1428,1430,1,0,
        0,0,1429,1424,1,0,0,0,1429,1430,1,0,0,0,1430,1436,1,0,0,0,1431,1432,
        3,182,91,0,1432,1433,3,182,91,0,1433,1434,3,182,91,0,1434,1435,3,
        182,91,0,1435,1437,1,0,0,0,1436,1431,1,0,0,0,1436,1437,1,0,0,0,1437,
        127,1,0,0,0,1438,1448,3,130,65,0,1439,1448,3,230,115,0,1440,1442,
        5,21,0,0,1441,1443,5,195,0,0,1442,1441,1,0,0,0,1442,1443,1,0,0,0,
        1443,1444,1,0,0,0,1444,1448,3,194,97,0,1445,1448,5,17,0,0,1446,1448,
        5,19,0,0,1447,1438,1,0,0,0,1447,1439,1,0,0,0,1447,1440,1,0,0,0,1447,
        1445,1,0,0,0,1447,1446,1,0,0,0,1448,129,1,0,0,0,1449,1450,5,4,0,
        0,1450,1451,3,182,91,0,1451,1452,3,190,95,0,1452,1453,3,190,95,0,
        1453,131,1,0,0,0,1454,1486,3,134,67,0,1455,1457,5,9,0,0,1456,1458,
        5,195,0,0,1457,1456,1,0,0,0,1457,1458,1,0,0,0,1458,1459,1,0,0,0,
        1459,1486,5,187,0,0,1460,1461,5,40,0,0,1461,1462,3,194,97,0,1462,
        1463,3,194,97,0,1463,1464,3,194,97,0,1464,1465,3,194,97,0,1465,1466,
        3,194,97,0,1466,1486,1,0,0,0,1467,1469,5,41,0,0,1468,1470,5,195,
        0,0,1469,1468,1,0,0,0,1469,1470,1,0,0,0,1470,1471,1,0,0,0,1471,1486,
        3,194,97,0,1472,1474,5,14,0,0,1473,1475,5,195,0,0,1474,1473,1,0,
        0,0,1474,1475,1,0,0,0,1475,1476,1,0,0,0,1476,1486,5,180,0,0,1477,
        1478,5,15,0,0,1478,1486,5,215,0,0,1479,1480,5,17,0,0,1480,1481,5,
        18,0,0,1481,1486,3,194,97,0,1482,1486,5,19,0,0,1483,1484,5,44,0,
        0,1484,1486,5,219,0,0,1485,1454,1,0,0,0,1485,1455,1,0,0,0,1485,1460,
        1,0,0,0,1485,1467,1,0,0,0,1485,1472,1,0,0,0,1485,1477,1,0,0,0,1485,
        1479,1,0,0,0,1485,1482,1,0,0,0,1485,1483,1,0,0,0,1486,133,1,0,0,
        0,1487,1488,5,4,0,0,1488,1489,3,182,91,0,1489,1490,3,182,91,0,1490,
        1491,3,182,91,0,1491,1492,3,182,91,0,1492,1493,3,182,91,0,1493,1494,
        3,182,91,0,1494,1496,3,190,95,0,1495,1497,3,190,95,0,1496,1495,1,
        0,0,0,1496,1497,1,0,0,0,1497,135,1,0,0,0,1498,1568,3,138,69,0,1499,
        1501,5,9,0,0,1500,1502,5,195,0,0,1501,1500,1,0,0,0,1501,1502,1,0,
        0,0,1502,1503,1,0,0,0,1503,1568,5,187,0,0,1504,1505,5,27,0,0,1505,
        1568,3,194,97,0,1506,1507,5,87,0,0,1507,1568,3,194,97,0,1508,1510,
        5,41,0,0,1509,1511,5,195,0,0,1510,1509,1,0,0,0,1510,1511,1,0,0,0,
        1511,1512,1,0,0,0,1512,1568,3,194,97,0,1513,1514,5,78,0,0,1514,1515,
        3,194,97,0,1515,1516,3,194,97,0,1516,1517,3,194,97,0,1517,1518,3,
        194,97,0,1518,1519,3,194,97,0,1519,1520,3,194,97,0,1520,1521,3,194,
        97,0,1521,1568,1,0,0,0,1522,1523,5,88,0,0,1523,1568,5,180,0,0,1524,
        1525,5,89,0,0,1525,1526,3,194,97,0,1526,1527,3,194,97,0,1527,1528,
        3,194,97,0,1528,1529,3,194,97,0,1529,1530,3,194,97,0,1530,1531,3,
        194,97,0,1531,1532,3,194,97,0,1532,1533,3,194,97,0,1533,1568,1,0,
        0,0,1534,1536,5,14,0,0,1535,1537,5,195,0,0,1536,1535,1,0,0,0,1536,
        1537,1,0,0,0,1537,1538,1,0,0,0,1538,1568,5,180,0,0,1539,1540,5,17,
        0,0,1540,1541,5,18,0,0,1541,1548,3,194,97,0,1542,1549,5,133,0,0,
        1543,1545,5,9,0,0,1544,1546,5,195,0,0,1545,1544,1,0,0,0,1545,1546,
        1,0,0,0,1546,1547,1,0,0,0,1547,1549,5,187,0,0,1548,1542,1,0,0,0,
        1548,1543,1,0,0,0,1549,1568,1,0,0,0,1550,1551,5,80,0,0,1551,1552,
        3,194,97,0,1552,1553,3,194,97,0,1553,1554,3,194,97,0,1554,1555,3,
        194,97,0,1555,1556,3,194,97,0,1556,1557,3,194,97,0,1557,1558,3,194,
        97,0,1558,1568,1,0,0,0,1559,1568,5,19,0,0,1560,1561,5,149,0,0,1561,
        1568,5,180,0,0,1562,1563,5,61,0,0,1563,1564,3,194,97,0,1564,1565,
        3,194,97,0,1565,1568,1,0,0,0,1566,1568,5,62,0,0,1567,1498,1,0,0,
        0,1567,1499,1,0,0,0,1567,1504,1,0,0,0,1567,1506,1,0,0,0,1567,1508,
        1,0,0,0,1567,1513,1,0,0,0,1567,1522,1,0,0,0,1567,1524,1,0,0,0,1567,
        1534,1,0,0,0,1567,1539,1,0,0,0,1567,1550,1,0,0,0,1567,1559,1,0,0,
        0,1567,1560,1,0,0,0,1567,1562,1,0,0,0,1567,1566,1,0,0,0,1568,137,
        1,0,0,0,1569,1570,5,4,0,0,1570,1571,3,182,91,0,1571,1572,3,182,91,
        0,1572,1573,3,182,91,0,1573,1574,3,182,91,0,1574,139,1,0,0,0,1575,
        1616,3,142,71,0,1576,1616,3,232,116,0,1577,1579,5,9,0,0,1578,1580,
        5,195,0,0,1579,1578,1,0,0,0,1579,1580,1,0,0,0,1580,1581,1,0,0,0,
        1581,1616,5,187,0,0,1582,1584,5,21,0,0,1583,1585,5,195,0,0,1584,
        1583,1,0,0,0,1584,1585,1,0,0,0,1585,1586,1,0,0,0,1586,1616,3,194,
        97,0,1587,1588,5,44,0,0,1588,1616,5,220,0,0,1589,1590,5,40,0,0,1590,
        1591,3,194,97,0,1591,1592,3,194,97,0,1592,1593,3,194,97,0,1593,1616,
        1,0,0,0,1594,1595,5,91,0,0,1595,1596,3,194,97,0,1596,1597,3,194,
        97,0,1597,1598,3,194,97,0,1598,1616,1,0,0,0,1599,1601,5,41,0,0,1600,
        1602,5,195,0,0,1601,1600,1,0,0,0,1601,1602,1,0,0,0,1602,1603,1,0,
        0,0,1603,1616,3,194,97,0,1604,1606,5,14,0,0,1605,1607,5,195,0,0,
        1606,1605,1,0,0,0,1606,1607,1,0,0,0,1607,1608,1,0,0,0,1608,1616,
        5,180,0,0,1609,1610,5,15,0,0,1610,1616,5,215,0,0,1611,1612,5,17,
        0,0,1612,1613,5,18,0,0,1613,1616,3,194,97,0,1614,1616,5,19,0,0,1615,
        1575,1,0,0,0,1615,1576,1,0,0,0,1615,1577,1,0,0,0,1615,1582,1,0,0,
        0,1615,1587,1,0,0,0,1615,1589,1,0,0,0,1615,1594,1,0,0,0,1615,1599,
        1,0,0,0,1615,1604,1,0,0,0,1615,1609,1,0,0,0,1615,1611,1,0,0,0,1615,
        1614,1,0,0,0,1616,141,1,0,0,0,1617,1618,5,4,0,0,1618,1619,3,182,
        91,0,1619,1620,3,182,91,0,1620,1621,3,182,91,0,1621,1622,3,182,91,
        0,1622,1623,3,182,91,0,1623,1624,3,182,91,0,1624,1625,3,182,91,0,
        1625,1627,3,190,95,0,1626,1628,3,190,95,0,1627,1626,1,0,0,0,1627,
        1628,1,0,0,0,1628,1630,1,0,0,0,1629,1631,3,190,95,0,1630,1629,1,
        0,0,0,1630,1631,1,0,0,0,1631,143,1,0,0,0,1632,1671,3,142,71,0,1633,
        1635,5,9,0,0,1634,1636,5,195,0,0,1635,1634,1,0,0,0,1635,1636,1,0,
        0,0,1636,1637,1,0,0,0,1637,1671,5,187,0,0,1638,1640,5,21,0,0,1639,
        1641,5,195,0,0,1640,1639,1,0,0,0,1640,1641,1,0,0,0,1641,1642,1,0,
        0,0,1642,1671,3,194,97,0,1643,1644,5,40,0,0,1644,1645,3,194,97,0,
        1645,1646,3,194,97,0,1646,1647,3,194,97,0,1647,1671,1,0,0,0,1648,
        1649,5,91,0,0,1649,1650,3,194,97,0,1650,1651,3,194,97,0,1651,1652,
        3,194,97,0,1652,1653,3,194,97,0,1653,1671,1,0,0,0,1654,1656,5,41,
        0,0,1655,1657,5,195,0,0,1656,1655,1,0,0,0,1656,1657,1,0,0,0,1657,
        1658,1,0,0,0,1658,1671,3,194,97,0,1659,1661,5,14,0,0,1660,1662,5,
        195,0,0,1661,1660,1,0,0,0,1661,1662,1,0,0,0,1662,1663,1,0,0,0,1663,
        1671,5,180,0,0,1664,1665,5,15,0,0,1665,1671,5,215,0,0,1666,1667,
        5,17,0,0,1667,1668,5,18,0,0,1668,1671,3,194,97,0,1669,1671,5,19,
        0,0,1670,1632,1,0,0,0,1670,1633,1,0,0,0,1670,1638,1,0,0,0,1670,1643,
        1,0,0,0,1670,1648,1,0,0,0,1670,1654,1,0,0,0,1670,1659,1,0,0,0,1670,
        1664,1,0,0,0,1670,1666,1,0,0,0,1670,1669,1,0,0,0,1671,145,1,0,0,
        0,1672,1704,3,148,74,0,1673,1675,5,9,0,0,1674,1676,5,195,0,0,1675,
        1674,1,0,0,0,1675,1676,1,0,0,0,1676,1677,1,0,0,0,1677,1704,5,187,
        0,0,1678,1679,5,40,0,0,1679,1680,3,194,97,0,1680,1681,3,194,97,0,
        1681,1682,3,194,97,0,1682,1683,3,194,97,0,1683,1684,3,194,97,0,1684,
        1685,3,194,97,0,1685,1686,3,194,97,0,1686,1704,1,0,0,0,1687,1689,
        5,41,0,0,1688,1690,5,195,0,0,1689,1688,1,0,0,0,1689,1690,1,0,0,0,
        1690,1691,1,0,0,0,1691,1704,3,194,97,0,1692,1694,5,14,0,0,1693,1695,
        5,195,0,0,1694,1693,1,0,0,0,1694,1695,1,0,0,0,1695,1696,1,0,0,0,
        1696,1704,5,180,0,0,1697,1698,5,15,0,0,1698,1704,5,215,0,0,1699,
        1700,5,17,0,0,1700,1701,5,18,0,0,1701,1704,3,194,97,0,1702,1704,
        5,19,0,0,1703,1672,1,0,0,0,1703,1673,1,0,0,0,1703,1678,1,0,0,0,1703,
        1687,1,0,0,0,1703,1692,1,0,0,0,1703,1697,1,0,0,0,1703,1699,1,0,0,
        0,1703,1702,1,0,0,0,1704,147,1,0,0,0,1705,1706,5,4,0,0,1706,1707,
        3,182,91,0,1707,1708,3,182,91,0,1708,1709,3,182,91,0,1709,1710,3,
        182,91,0,1710,1711,3,182,91,0,1711,1712,3,182,91,0,1712,1713,3,182,
        91,0,1713,1714,3,182,91,0,1714,1715,3,190,95,0,1715,1716,3,190,95,
        0,1716,149,1,0,0,0,1717,1761,3,152,76,0,1718,1720,5,9,0,0,1719,1721,
        5,195,0,0,1720,1719,1,0,0,0,1720,1721,1,0,0,0,1721,1722,1,0,0,0,
        1722,1761,5,187,0,0,1723,1724,5,95,0,0,1724,1761,5,187,0,0,1725,
        1726,5,60,0,0,1726,1727,5,180,0,0,1727,1728,5,180,0,0,1728,1761,
        3,194,97,0,1729,1730,5,76,0,0,1730,1761,3,194,97,0,1731,1733,5,41,
        0,0,1732,1734,5,195,0,0,1733,1732,1,0,0,0,1733,1734,1,0,0,0,1734,
        1735,1,0,0,0,1735,1761,3,194,97,0,1736,1738,5,14,0,0,1737,1739,5,
        195,0,0,1738,1737,1,0,0,0,1738,1739,1,0,0,0,1739,1740,1,0,0,0,1740,
        1761,5,180,0,0,1741,1742,5,15,0,0,1742,1761,5,215,0,0,1743,1744,
        5,17,0,0,1744,1745,5,18,0,0,1745,1752,3,194,97,0,1746,1753,5,133,
        0,0,1747,1749,5,9,0,0,1748,1750,5,195,0,0,1749,1748,1,0,0,0,1749,
        1750,1,0,0,0,1750,1751,1,0,0,0,1751,1753,5,187,0,0,1752,1746,1,0,
        0,0,1752,1747,1,0,0,0,1753,1761,1,0,0,0,1754,1761,5,19,0,0,1755,
        1756,5,61,0,0,1756,1757,5,96,0,0,1757,1758,5,180,0,0,1758,1761,5,
        180,0,0,1759,1761,5,62,0,0,1760,1717,1,0,0,0,1760,1718,1,0,0,0,1760,
        1723,1,0,0,0,1760,1725,1,0,0,0,1760,1729,1,0,0,0,1760,1731,1,0,0,
        0,1760,1736,1,0,0,0,1760,1741,1,0,0,0,1760,1743,1,0,0,0,1760,1754,
        1,0,0,0,1760,1755,1,0,0,0,1760,1759,1,0,0,0,1761,151,1,0,0,0,1762,
        1763,5,4,0,0,1763,1764,3,182,91,0,1764,1765,3,182,91,0,1765,1766,
        3,182,91,0,1766,1767,3,182,91,0,1767,1768,3,182,91,0,1768,1769,3,
        182,91,0,1769,1770,3,182,91,0,1770,1771,3,182,91,0,1771,1772,3,182,
        91,0,1772,1773,3,182,91,0,1773,1775,3,182,91,0,1774,1776,3,182,91,
        0,1775,1774,1,0,0,0,1775,1776,1,0,0,0,1776,153,1,0,0,0,1777,1835,
        3,156,78,0,1778,1835,3,234,117,0,1779,1781,5,9,0,0,1780,1782,5,195,
        0,0,1781,1780,1,0,0,0,1781,1782,1,0,0,0,1782,1783,1,0,0,0,1783,1835,
        5,187,0,0,1784,1786,5,41,0,0,1785,1787,5,195,0,0,1786,1785,1,0,0,
        0,1786,1787,1,0,0,0,1787,1788,1,0,0,0,1788,1789,5,187,0,0,1789,1835,
        3,194,97,0,1790,1792,5,14,0,0,1791,1793,5,195,0,0,1792,1791,1,0,
        0,0,1792,1793,1,0,0,0,1793,1794,1,0,0,0,1794,1835,5,180,0,0,1795,
        1797,5,15,0,0,1796,1798,5,214,0,0,1797,1796,1,0,0,0,1797,1798,1,
        0,0,0,1798,1799,1,0,0,0,1799,1800,5,216,0,0,1800,1835,5,215,0,0,
        1801,1803,5,98,0,0,1802,1804,5,195,0,0,1803,1802,1,0,0,0,1803,1804,
        1,0,0,0,1804,1805,1,0,0,0,1805,1806,5,187,0,0,1806,1835,3,194,97,
        0,1807,1809,5,99,0,0,1808,1810,5,195,0,0,1809,1808,1,0,0,0,1809,
        1810,1,0,0,0,1810,1811,1,0,0,0,1811,1812,5,187,0,0,1812,1835,3,194,
        97,0,1813,1815,5,100,0,0,1814,1816,5,195,0,0,1815,1814,1,0,0,0,1815,
        1816,1,0,0,0,1816,1817,1,0,0,0,1817,1818,5,187,0,0,1818,1819,3,194,
        97,0,1819,1820,3,194,97,0,1820,1835,1,0,0,0,1821,1822,5,17,0,0,1822,
        1823,5,18,0,0,1823,1830,3,194,97,0,1824,1831,5,133,0,0,1825,1827,
        5,9,0,0,1826,1828,5,195,0,0,1827,1826,1,0,0,0,1827,1828,1,0,0,0,
        1828,1829,1,0,0,0,1829,1831,5,187,0,0,1830,1824,1,0,0,0,1830,1825,
        1,0,0,0,1831,1835,1,0,0,0,1832,1835,5,19,0,0,1833,1835,5,101,0,0,
        1834,1777,1,0,0,0,1834,1778,1,0,0,0,1834,1779,1,0,0,0,1834,1784,
        1,0,0,0,1834,1790,1,0,0,0,1834,1795,1,0,0,0,1834,1801,1,0,0,0,1834,
        1807,1,0,0,0,1834,1813,1,0,0,0,1834,1821,1,0,0,0,1834,1832,1,0,0,
        0,1834,1833,1,0,0,0,1835,155,1,0,0,0,1836,1837,5,4,0,0,1837,1838,
        3,182,91,0,1838,1839,3,182,91,0,1839,1841,3,190,95,0,1840,1842,3,
        190,95,0,1841,1840,1,0,0,0,1841,1842,1,0,0,0,1842,157,1,0,0,0,1843,
        1893,3,160,80,0,1844,1893,3,236,118,0,1845,1847,5,9,0,0,1846,1848,
        5,195,0,0,1847,1846,1,0,0,0,1847,1848,1,0,0,0,1848,1849,1,0,0,0,
        1849,1893,5,187,0,0,1850,1851,5,103,0,0,1851,1893,5,180,0,0,1852,
        1853,5,40,0,0,1853,1854,3,194,97,0,1854,1855,3,194,97,0,1855,1893,
        1,0,0,0,1856,1858,5,41,0,0,1857,1859,5,195,0,0,1858,1857,1,0,0,0,
        1858,1859,1,0,0,0,1859,1860,1,0,0,0,1860,1893,3,194,97,0,1861,1863,
        5,14,0,0,1862,1864,5,195,0,0,1863,1862,1,0,0,0,1863,1864,1,0,0,0,
        1864,1865,1,0,0,0,1865,1893,5,180,0,0,1866,1867,5,17,0,0,1867,1868,
        5,18,0,0,1868,1875,3,194,97,0,1869,1876,5,133,0,0,1870,1872,5,9,
        0,0,1871,1873,5,195,0,0,1872,1871,1,0,0,0,1872,1873,1,0,0,0,1873,
        1874,1,0,0,0,1874,1876,5,187,0,0,1875,1869,1,0,0,0,1875,1870,1,0,
        0,0,1876,1893,1,0,0,0,1877,1893,5,19,0,0,1878,1879,5,104,0,0,1879,
        1893,5,187,0,0,1880,1881,5,105,0,0,1881,1882,3,194,97,0,1882,1883,
        5,180,0,0,1883,1893,1,0,0,0,1884,1893,5,106,0,0,1885,1893,5,107,
        0,0,1886,1893,5,108,0,0,1887,1893,5,109,0,0,1888,1893,5,110,0,0,
        1889,1893,5,111,0,0,1890,1891,5,112,0,0,1891,1893,5,180,0,0,1892,
        1843,1,0,0,0,1892,1844,1,0,0,0,1892,1845,1,0,0,0,1892,1850,1,0,0,
        0,1892,1852,1,0,0,0,1892,1856,1,0,0,0,1892,1861,1,0,0,0,1892,1866,
        1,0,0,0,1892,1877,1,0,0,0,1892,1878,1,0,0,0,1892,1880,1,0,0,0,1892,
        1884,1,0,0,0,1892,1885,1,0,0,0,1892,1886,1,0,0,0,1892,1887,1,0,0,
        0,1892,1888,1,0,0,0,1892,1889,1,0,0,0,1892,1890,1,0,0,0,1893,159,
        1,0,0,0,1894,1895,5,4,0,0,1895,1896,3,182,91,0,1896,1897,3,182,91,
        0,1897,1898,3,182,91,0,1898,1899,3,182,91,0,1899,1900,3,182,91,0,
        1900,1902,3,190,95,0,1901,1903,3,190,95,0,1902,1901,1,0,0,0,1902,
        1903,1,0,0,0,1903,161,1,0,0,0,1904,1940,3,164,82,0,1905,1907,5,9,
        0,0,1906,1908,5,195,0,0,1907,1906,1,0,0,0,1907,1908,1,0,0,0,1908,
        1909,1,0,0,0,1909,1940,5,187,0,0,1910,1911,5,103,0,0,1911,1940,5,
        180,0,0,1912,1913,5,40,0,0,1913,1914,3,194,97,0,1914,1915,3,194,
        97,0,1915,1940,1,0,0,0,1916,1918,5,41,0,0,1917,1919,5,195,0,0,1918,
        1917,1,0,0,0,1918,1919,1,0,0,0,1919,1920,1,0,0,0,1920,1940,3,194,
        97,0,1921,1923,5,14,0,0,1922,1924,5,195,0,0,1923,1922,1,0,0,0,1923,
        1924,1,0,0,0,1924,1925,1,0,0,0,1925,1940,5,180,0,0,1926,1940,5,106,
        0,0,1927,1940,5,107,0,0,1928,1940,5,105,0,0,1929,1940,5,108,0,0,
        1930,1940,5,109,0,0,1931,1940,5,112,0,0,1932,1933,5,17,0,0,1933,
        1940,5,18,0,0,1934,1940,5,19,0,0,1935,1936,5,104,0,0,1936,1940,5,
        187,0,0,1937,1940,5,110,0,0,1938,1940,5,111,0,0,1939,1904,1,0,0,
        0,1939,1905,1,0,0,0,1939,1910,1,0,0,0,1939,1912,1,0,0,0,1939,1916,
        1,0,0,0,1939,1921,1,0,0,0,1939,1926,1,0,0,0,1939,1927,1,0,0,0,1939,
        1928,1,0,0,0,1939,1929,1,0,0,0,1939,1930,1,0,0,0,1939,1931,1,0,0,
        0,1939,1932,1,0,0,0,1939,1934,1,0,0,0,1939,1935,1,0,0,0,1939,1937,
        1,0,0,0,1939,1938,1,0,0,0,1940,163,1,0,0,0,1941,1942,5,4,0,0,1942,
        1943,3,182,91,0,1943,1944,3,182,91,0,1944,1945,3,182,91,0,1945,1946,
        3,182,91,0,1946,1947,3,182,91,0,1947,1948,3,182,91,0,1948,1950,3,
        190,95,0,1949,1951,3,190,95,0,1950,1949,1,0,0,0,1950,1951,1,0,0,
        0,1951,165,1,0,0,0,1952,1973,3,168,84,0,1953,1955,5,9,0,0,1954,1956,
        5,195,0,0,1955,1954,1,0,0,0,1955,1956,1,0,0,0,1956,1957,1,0,0,0,
        1957,1973,5,187,0,0,1958,1960,5,41,0,0,1959,1961,5,195,0,0,1960,
        1959,1,0,0,0,1960,1961,1,0,0,0,1961,1962,1,0,0,0,1962,1973,3,194,
        97,0,1963,1965,5,14,0,0,1964,1966,5,195,0,0,1965,1964,1,0,0,0,1965,
        1966,1,0,0,0,1966,1967,1,0,0,0,1967,1973,5,180,0,0,1968,1969,5,17,
        0,0,1969,1970,5,18,0,0,1970,1973,3,194,97,0,1971,1973,5,19,0,0,1972,
        1952,1,0,0,0,1972,1953,1,0,0,0,1972,1958,1,0,0,0,1972,1963,1,0,0,
        0,1972,1968,1,0,0,0,1972,1971,1,0,0,0,1973,167,1,0,0,0,1974,1975,
        5,4,0,0,1975,1976,3,182,91,0,1976,1977,3,182,91,0,1977,1978,3,190,
        95,0,1978,1979,3,190,95,0,1979,1980,3,190,95,0,1980,169,1,0,0,0,
        1981,2008,3,172,86,0,1982,1984,5,9,0,0,1983,1985,5,195,0,0,1984,
        1983,1,0,0,0,1984,1985,1,0,0,0,1985,1986,1,0,0,0,1986,2008,5,187,
        0,0,1987,1988,5,116,0,0,1988,2008,5,180,0,0,1989,1990,5,40,0,0,1990,
        2008,3,194,97,0,1991,1993,5,41,0,0,1992,1994,5,195,0,0,1993,1992,
        1,0,0,0,1993,1994,1,0,0,0,1994,1995,1,0,0,0,1995,2008,3,194,97,0,
        1996,1998,5,14,0,0,1997,1999,5,195,0,0,1998,1997,1,0,0,0,1998,1999,
        1,0,0,0,1999,2000,1,0,0,0,2000,2008,5,180,0,0,2001,2002,5,17,0,0,
        2002,2003,5,18,0,0,2003,2008,3,194,97,0,2004,2008,5,19,0,0,2005,
        2006,5,112,0,0,2006,2008,5,180,0,0,2007,1981,1,0,0,0,2007,1982,1,
        0,0,0,2007,1987,1,0,0,0,2007,1989,1,0,0,0,2007,1991,1,0,0,0,2007,
        1996,1,0,0,0,2007,2001,1,0,0,0,2007,2004,1,0,0,0,2007,2005,1,0,0,
        0,2008,171,1,0,0,0,2009,2010,5,4,0,0,2010,2011,3,182,91,0,2011,2012,
        3,182,91,0,2012,2013,3,182,91,0,2013,2015,3,190,95,0,2014,2016,3,
        190,95,0,2015,2014,1,0,0,0,2015,2016,1,0,0,0,2016,173,1,0,0,0,2017,
        2039,3,176,88,0,2018,2039,3,238,119,0,2019,2021,5,9,0,0,2020,2022,
        5,195,0,0,2021,2020,1,0,0,0,2021,2022,1,0,0,0,2022,2023,1,0,0,0,
        2023,2039,5,187,0,0,2024,2026,5,41,0,0,2025,2027,5,195,0,0,2026,
        2025,1,0,0,0,2026,2027,1,0,0,0,2027,2028,1,0,0,0,2028,2039,3,194,
        97,0,2029,2031,5,14,0,0,2030,2032,5,195,0,0,2031,2030,1,0,0,0,2031,
        2032,1,0,0,0,2032,2033,1,0,0,0,2033,2039,5,180,0,0,2034,2035,5,17,
        0,0,2035,2036,5,18,0,0,2036,2039,3,194,97,0,2037,2039,5,19,0,0,2038,
        2017,1,0,0,0,2038,2018,1,0,0,0,2038,2019,1,0,0,0,2038,2024,1,0,0,
        0,2038,2029,1,0,0,0,2038,2034,1,0,0,0,2038,2037,1,0,0,0,2039,175,
        1,0,0,0,2040,2041,5,4,0,0,2041,2042,3,182,91,0,2042,2043,3,182,91,
        0,2043,2044,3,182,91,0,2044,177,1,0,0,0,2045,2113,3,180,90,0,2046,
        2113,3,240,120,0,2047,2049,5,117,0,0,2048,2050,5,195,0,0,2049,2048,
        1,0,0,0,2049,2050,1,0,0,0,2050,2051,1,0,0,0,2051,2113,3,194,97,0,
        2052,2054,5,118,0,0,2053,2055,5,195,0,0,2054,2053,1,0,0,0,2054,2055,
        1,0,0,0,2055,2056,1,0,0,0,2056,2113,3,194,97,0,2057,2059,5,119,0,
        0,2058,2060,5,195,0,0,2059,2058,1,0,0,0,2059,2060,1,0,0,0,2060,2061,
        1,0,0,0,2061,2113,5,180,0,0,2062,2064,5,120,0,0,2063,2065,5,195,
        0,0,2064,2063,1,0,0,0,2064,2065,1,0,0,0,2065,2066,1,0,0,0,2066,2113,
        5,180,0,0,2067,2069,5,121,0,0,2068,2070,5,195,0,0,2069,2068,1,0,
        0,0,2069,2070,1,0,0,0,2070,2071,1,0,0,0,2071,2113,5,180,0,0,2072,
        2074,5,122,0,0,2073,2075,5,195,0,0,2074,2073,1,0,0,0,2074,2075,1,
        0,0,0,2075,2076,1,0,0,0,2076,2113,5,187,0,0,2077,2079,5,123,0,0,
        2078,2080,5,195,0,0,2079,2078,1,0,0,0,2079,2080,1,0,0,0,2080,2081,
        1,0,0,0,2081,2113,3,194,97,0,2082,2084,5,124,0,0,2083,2085,5,195,
        0,0,2084,2083,1,0,0,0,2084,2085,1,0,0,0,2085,2086,1,0,0,0,2086,2113,
        3,194,97,0,2087,2089,5,125,0,0,2088,2090,5,195,0,0,2089,2088,1,0,
        0,0,2089,2090,1,0,0,0,2090,2091,1,0,0,0,2091,2113,3,194,97,0,2092,
        2094,5,126,0,0,2093,2095,5,195,0,0,2094,2093,1,0,0,0,2094,2095,1,
        0,0,0,2095,2096,1,0,0,0,2096,2113,3,194,97,0,2097,2099,5,127,0,0,
        2098,2100,5,195,0,0,2099,2098,1,0,0,0,2099,2100,1,0,0,0,2100,2101,
        1,0,0,0,2101,2113,5,180,0,0,2102,2104,5,128,0,0,2103,2105,5,195,
        0,0,2104,2103,1,0,0,0,2104,2105,1,0,0,0,2105,2106,1,0,0,0,2106,2113,
        5,180,0,0,2107,2109,5,129,0,0,2108,2110,5,195,0,0,2109,2108,1,0,
        0,0,2109,2110,1,0,0,0,2110,2111,1,0,0,0,2111,2113,5,180,0,0,2112,
        2045,1,0,0,0,2112,2046,1,0,0,0,2112,2047,1,0,0,0,2112,2052,1,0,0,
        0,2112,2057,1,0,0,0,2112,2062,1,0,0,0,2112,2067,1,0,0,0,2112,2072,
        1,0,0,0,2112,2077,1,0,0,0,2112,2082,1,0,0,0,2112,2087,1,0,0,0,2112,
        2092,1,0,0,0,2112,2097,1,0,0,0,2112,2102,1,0,0,0,2112,2107,1,0,0,
        0,2113,179,1,0,0,0,2114,2115,5,4,0,0,2115,2116,3,182,91,0,2116,2117,
        3,182,91,0,2117,181,1,0,0,0,2118,2119,5,192,0,0,2119,2120,3,184,
        92,0,2120,2121,5,193,0,0,2121,183,1,0,0,0,2122,2127,3,186,93,0,2123,
        2124,5,175,0,0,2124,2126,3,186,93,0,2125,2123,1,0,0,0,2126,2129,
        1,0,0,0,2127,2125,1,0,0,0,2127,2128,1,0,0,0,2128,185,1,0,0,0,2129,
        2127,1,0,0,0,2130,2135,3,188,94,0,2131,2132,5,176,0,0,2132,2134,
        3,188,94,0,2133,2131,1,0,0,0,2134,2137,1,0,0,0,2135,2133,1,0,0,0,
        2135,2136,1,0,0,0,2136,187,1,0,0,0,2137,2135,1,0,0,0,2138,2139,6,
        94,-1,0,2139,2140,5,192,0,0,2140,2141,3,184,92,0,2141,2142,5,193,
        0,0,2142,2278,1,0,0,0,2143,2278,5,133,0,0,2144,2145,5,135,0,0,2145,
        2146,7,1,0,0,2146,2147,7,2,0,0,2147,2278,7,1,0,0,2148,2150,5,136,
        0,0,2149,2151,5,207,0,0,2150,2149,1,0,0,0,2150,2151,1,0,0,0,2151,
        2152,1,0,0,0,2152,2153,5,208,0,0,2153,2154,5,209,0,0,2154,2278,3,
        192,96,0,2155,2156,5,137,0,0,2156,2278,3,188,94,29,2157,2158,5,138,
        0,0,2158,2278,3,188,94,28,2159,2160,5,139,0,0,2160,2278,3,188,94,
        27,2161,2169,5,140,0,0,2162,2170,5,188,0,0,2163,2166,5,187,0,0,2164,
        2165,5,194,0,0,2165,2167,5,187,0,0,2166,2164,1,0,0,0,2166,2167,1,
        0,0,0,2167,2170,1,0,0,0,2168,2170,5,201,0,0,2169,2162,1,0,0,0,2169,
        2163,1,0,0,0,2169,2168,1,0,0,0,2170,2278,1,0,0,0,2171,2278,5,141,
        0,0,2172,2173,5,142,0,0,2173,2278,5,180,0,0,2174,2278,5,143,0,0,
        2175,2188,5,144,0,0,2176,2189,5,188,0,0,2177,2180,5,187,0,0,2178,
        2179,5,194,0,0,2179,2181,5,187,0,0,2180,2178,1,0,0,0,2180,2181,1,
        0,0,0,2181,2189,1,0,0,0,2182,2185,5,183,0,0,2183,2184,5,194,0,0,
        2184,2186,5,183,0,0,2185,2183,1,0,0,0,2185,2186,1,0,0,0,2186,2189,
        1,0,0,0,2187,2189,5,201,0,0,2188,2176,1,0,0,0,2188,2177,1,0,0,0,
        2188,2182,1,0,0,0,2188,2187,1,0,0,0,2189,2278,1,0,0,0,2190,2191,
        5,177,0,0,2191,2278,3,188,94,21,2192,2193,5,145,0,0,2193,2194,5,
        192,0,0,2194,2196,3,192,96,0,2195,2197,5,178,0,0,2196,2195,1,0,0,
        0,2196,2197,1,0,0,0,2197,2198,1,0,0,0,2198,2200,3,192,96,0,2199,
        2201,5,178,0,0,2200,2199,1,0,0,0,2200,2201,1,0,0,0,2201,2202,1,0,
        0,0,2202,2203,3,192,96,0,2203,2204,5,193,0,0,2204,2205,5,146,0,0,
        2205,2206,3,192,96,0,2206,2278,1,0,0,0,2207,2208,5,145,0,0,2208,
        2209,5,192,0,0,2209,2211,5,173,0,0,2210,2212,5,195,0,0,2211,2210,
        1,0,0,0,2211,2212,1,0,0,0,2212,2213,1,0,0,0,2213,2215,3,182,91,0,
        2214,2216,5,178,0,0,2215,2214,1,0,0,0,2215,2216,1,0,0,0,2216,2222,
        1,0,0,0,2217,2219,5,174,0,0,2218,2220,5,195,0,0,2219,2218,1,0,0,
        0,2219,2220,1,0,0,0,2220,2221,1,0,0,0,2221,2223,3,182,91,0,2222,
        2217,1,0,0,0,2222,2223,1,0,0,0,2223,2224,1,0,0,0,2224,2225,5,193,
        0,0,2225,2226,5,146,0,0,2226,2227,3,192,96,0,2227,2278,1,0,0,0,2228,
        2278,5,147,0,0,2229,2278,5,148,0,0,2230,2238,5,149,0,0,2231,2239,
        5,189,0,0,2232,2235,5,180,0,0,2233,2234,5,194,0,0,2234,2236,5,180,
        0,0,2235,2233,1,0,0,0,2235,2236,1,0,0,0,2236,2239,1,0,0,0,2237,2239,
        5,201,0,0,2238,2231,1,0,0,0,2238,2232,1,0,0,0,2238,2237,1,0,0,0,
        2239,2278,1,0,0,0,2240,2248,5,150,0,0,2241,2249,5,188,0,0,2242,2245,
        5,187,0,0,2243,2244,5,194,0,0,2244,2246,5,187,0,0,2245,2243,1,0,
        0,0,2245,2246,1,0,0,0,2246,2249,1,0,0,0,2247,2249,5,201,0,0,2248,
        2241,1,0,0,0,2248,2242,1,0,0,0,2248,2247,1,0,0,0,2249,2278,1,0,0,
        0,2250,2263,5,152,0,0,2251,2264,5,188,0,0,2252,2255,5,187,0,0,2253,
        2254,5,194,0,0,2254,2256,5,187,0,0,2255,2253,1,0,0,0,2255,2256,1,
        0,0,0,2256,2264,1,0,0,0,2257,2260,5,183,0,0,2258,2259,5,194,0,0,
        2259,2261,5,183,0,0,2260,2258,1,0,0,0,2260,2261,1,0,0,0,2261,2264,
        1,0,0,0,2262,2264,5,201,0,0,2263,2251,1,0,0,0,2263,2252,1,0,0,0,
        2263,2257,1,0,0,0,2263,2262,1,0,0,0,2264,2278,1,0,0,0,2265,2278,
        5,153,0,0,2266,2278,5,154,0,0,2267,2278,5,155,0,0,2268,2278,5,156,
        0,0,2269,2278,5,157,0,0,2270,2278,5,158,0,0,2271,2278,5,159,0,0,
        2272,2278,5,160,0,0,2273,2278,5,161,0,0,2274,2278,5,162,0,0,2275,
        2278,5,130,0,0,2276,2278,5,131,0,0,2277,2138,1,0,0,0,2277,2143,1,
        0,0,0,2277,2144,1,0,0,0,2277,2148,1,0,0,0,2277,2155,1,0,0,0,2277,
        2157,1,0,0,0,2277,2159,1,0,0,0,2277,2161,1,0,0,0,2277,2171,1,0,0,
        0,2277,2172,1,0,0,0,2277,2174,1,0,0,0,2277,2175,1,0,0,0,2277,2190,
        1,0,0,0,2277,2192,1,0,0,0,2277,2207,1,0,0,0,2277,2228,1,0,0,0,2277,
        2229,1,0,0,0,2277,2230,1,0,0,0,2277,2240,1,0,0,0,2277,2250,1,0,0,
        0,2277,2265,1,0,0,0,2277,2266,1,0,0,0,2277,2267,1,0,0,0,2277,2268,
        1,0,0,0,2277,2269,1,0,0,0,2277,2270,1,0,0,0,2277,2271,1,0,0,0,2277,
        2272,1,0,0,0,2277,2273,1,0,0,0,2277,2274,1,0,0,0,2277,2275,1,0,0,
        0,2277,2276,1,0,0,0,2278,2287,1,0,0,0,2279,2280,10,32,0,0,2280,2281,
        5,134,0,0,2281,2286,3,192,96,0,2282,2283,10,14,0,0,2283,2284,5,151,
        0,0,2284,2286,3,192,96,0,2285,2279,1,0,0,0,2285,2282,1,0,0,0,2286,
        2289,1,0,0,0,2287,2285,1,0,0,0,2287,2288,1,0,0,0,2288,189,1,0,0,
        0,2289,2287,1,0,0,0,2290,2291,7,3,0,0,2291,191,1,0,0,0,2292,2293,
        7,4,0,0,2293,193,1,0,0,0,2294,2295,7,3,0,0,2295,195,1,0,0,0,2296,
        2297,7,4,0,0,2297,197,1,0,0,0,2298,2309,5,132,0,0,2299,2307,5,224,
        0,0,2300,2302,5,227,0,0,2301,2300,1,0,0,0,2302,2305,1,0,0,0,2303,
        2301,1,0,0,0,2303,2304,1,0,0,0,2304,2308,1,0,0,0,2305,2303,1,0,0,
        0,2306,2308,5,228,0,0,2307,2303,1,0,0,0,2307,2306,1,0,0,0,2308,2310,
        1,0,0,0,2309,2299,1,0,0,0,2309,2310,1,0,0,0,2310,2311,1,0,0,0,2311,
        2315,5,225,0,0,2312,2314,5,227,0,0,2313,2312,1,0,0,0,2314,2317,1,
        0,0,0,2315,2313,1,0,0,0,2315,2316,1,0,0,0,2316,2318,1,0,0,0,2317,
        2315,1,0,0,0,2318,2319,5,226,0,0,2319,199,1,0,0,0,2320,2321,5,163,
        0,0,2321,2322,3,202,101,0,2322,2323,3,182,91,0,2323,201,1,0,0,0,
        2324,2325,7,5,0,0,2325,2326,3,204,102,0,2326,2327,5,230,0,0,2327,
        2331,1,0,0,0,2328,2329,5,166,0,0,2329,2331,3,212,106,0,2330,2324,
        1,0,0,0,2330,2328,1,0,0,0,2331,203,1,0,0,0,2332,2335,5,240,0,0,2333,
        2334,5,231,0,0,2334,2336,3,206,103,0,2335,2333,1,0,0,0,2335,2336,
        1,0,0,0,2336,205,1,0,0,0,2337,2340,3,208,104,0,2338,2339,7,6,0,0,
        2339,2341,3,206,103,0,2340,2338,1,0,0,0,2340,2341,1,0,0,0,2341,207,
        1,0,0,0,2342,2350,5,240,0,0,2343,2350,3,210,105,0,2344,2350,5,238,
        0,0,2345,2350,5,239,0,0,2346,2350,5,264,0,0,2347,2350,5,263,0,0,
        2348,2350,5,265,0,0,2349,2342,1,0,0,0,2349,2343,1,0,0,0,2349,2344,
        1,0,0,0,2349,2345,1,0,0,0,2349,2346,1,0,0,0,2349,2347,1,0,0,0,2349,
        2348,1,0,0,0,2350,209,1,0,0,0,2351,2352,5,241,0,0,2352,2353,5,267,
        0,0,2353,2354,3,208,104,0,2354,2355,5,230,0,0,2355,2471,1,0,0,0,
        2356,2357,5,242,0,0,2357,2358,5,267,0,0,2358,2359,3,208,104,0,2359,
        2360,5,230,0,0,2360,2471,1,0,0,0,2361,2362,5,244,0,0,2362,2363,5,
        267,0,0,2363,2364,3,208,104,0,2364,2365,5,230,0,0,2365,2471,1,0,
        0,0,2366,2367,5,245,0,0,2367,2368,5,267,0,0,2368,2369,3,208,104,
        0,2369,2370,5,230,0,0,2370,2471,1,0,0,0,2371,2372,5,246,0,0,2372,
        2373,5,267,0,0,2373,2374,3,208,104,0,2374,2375,5,230,0,0,2375,2471,
        1,0,0,0,2376,2377,5,247,0,0,2377,2378,5,267,0,0,2378,2379,3,208,
        104,0,2379,2380,5,230,0,0,2380,2471,1,0,0,0,2381,2382,5,248,0,0,
        2382,2383,5,267,0,0,2383,2384,3,208,104,0,2384,2385,5,230,0,0,2385,
        2471,1,0,0,0,2386,2387,5,249,0,0,2387,2388,5,267,0,0,2388,2389,3,
        208,104,0,2389,2390,5,230,0,0,2390,2471,1,0,0,0,2391,2392,5,250,
        0,0,2392,2393,5,267,0,0,2393,2394,3,208,104,0,2394,2395,5,230,0,
        0,2395,2471,1,0,0,0,2396,2397,5,251,0,0,2397,2398,5,267,0,0,2398,
        2399,3,208,104,0,2399,2400,5,230,0,0,2400,2471,1,0,0,0,2401,2402,
        5,252,0,0,2402,2403,5,267,0,0,2403,2404,3,208,104,0,2404,2405,5,
        230,0,0,2405,2471,1,0,0,0,2406,2407,5,253,0,0,2407,2408,5,267,0,
        0,2408,2413,3,208,104,0,2409,2410,5,237,0,0,2410,2412,3,208,104,
        0,2411,2409,1,0,0,0,2412,2415,1,0,0,0,2413,2411,1,0,0,0,2413,2414,
        1,0,0,0,2414,2416,1,0,0,0,2415,2413,1,0,0,0,2416,2417,5,230,0,0,
        2417,2471,1,0,0,0,2418,2419,5,254,0,0,2419,2420,5,267,0,0,2420,2421,
        3,208,104,0,2421,2422,5,230,0,0,2422,2471,1,0,0,0,2423,2424,5,255,
        0,0,2424,2425,5,267,0,0,2425,2430,3,208,104,0,2426,2427,5,237,0,
        0,2427,2429,3,208,104,0,2428,2426,1,0,0,0,2429,2432,1,0,0,0,2430,
        2428,1,0,0,0,2430,2431,1,0,0,0,2431,2433,1,0,0,0,2432,2430,1,0,0,
        0,2433,2434,5,230,0,0,2434,2471,1,0,0,0,2435,2436,5,256,0,0,2436,
        2437,5,267,0,0,2437,2438,3,208,104,0,2438,2439,5,237,0,0,2439,2440,
        3,208,104,0,2440,2441,5,230,0,0,2441,2471,1,0,0,0,2442,2443,5,257,
        0,0,2443,2444,5,267,0,0,2444,2445,3,208,104,0,2445,2446,5,230,0,
        0,2446,2471,1,0,0,0,2447,2448,5,258,0,0,2448,2449,5,267,0,0,2449,
        2471,5,230,0,0,2450,2451,5,259,0,0,2451,2452,5,267,0,0,2452,2453,
        3,208,104,0,2453,2454,5,230,0,0,2454,2471,1,0,0,0,2455,2456,5,260,
        0,0,2456,2457,5,267,0,0,2457,2458,3,208,104,0,2458,2459,5,230,0,
        0,2459,2471,1,0,0,0,2460,2461,5,261,0,0,2461,2462,5,267,0,0,2462,
        2463,3,208,104,0,2463,2464,5,230,0,0,2464,2471,1,0,0,0,2465,2466,
        5,262,0,0,2466,2467,5,267,0,0,2467,2468,3,208,104,0,2468,2469,5,
        230,0,0,2469,2471,1,0,0,0,2470,2351,1,0,0,0,2470,2356,1,0,0,0,2470,
        2361,1,0,0,0,2470,2366,1,0,0,0,2470,2371,1,0,0,0,2470,2376,1,0,0,
        0,2470,2381,1,0,0,0,2470,2386,1,0,0,0,2470,2391,1,0,0,0,2470,2396,
        1,0,0,0,2470,2401,1,0,0,0,2470,2406,1,0,0,0,2470,2418,1,0,0,0,2470,
        2423,1,0,0,0,2470,2435,1,0,0,0,2470,2442,1,0,0,0,2470,2447,1,0,0,
        0,2470,2450,1,0,0,0,2470,2455,1,0,0,0,2470,2460,1,0,0,0,2470,2465,
        1,0,0,0,2471,211,1,0,0,0,2472,2473,7,7,0,0,2473,2474,5,269,0,0,2474,
        2475,5,278,0,0,2475,2476,5,270,0,0,2476,213,1,0,0,0,2477,2478,5,
        167,0,0,2478,2479,5,263,0,0,2479,2480,5,231,0,0,2480,2481,3,216,
        108,0,2481,2482,5,230,0,0,2482,215,1,0,0,0,2483,2486,3,208,104,0,
        2484,2485,7,6,0,0,2485,2487,3,216,108,0,2486,2484,1,0,0,0,2486,2487,
        1,0,0,0,2487,217,1,0,0,0,2488,2490,5,168,0,0,2489,2491,5,187,0,0,
        2490,2489,1,0,0,0,2490,2491,1,0,0,0,2491,2492,1,0,0,0,2492,2493,
        5,169,0,0,2493,2494,5,195,0,0,2494,2495,7,8,0,0,2495,2496,5,195,
        0,0,2496,2502,3,182,91,0,2497,2498,5,169,0,0,2498,2499,5,195,0,0,
        2499,2500,7,8,0,0,2500,2501,5,195,0,0,2501,2503,3,182,91,0,2502,
        2497,1,0,0,0,2502,2503,1,0,0,0,2503,2504,1,0,0,0,2504,2505,5,2,0,
        0,2505,219,1,0,0,0,2506,2507,5,171,0,0,2507,2508,5,285,0,0,2508,
        2509,5,282,0,0,2509,2528,5,280,0,0,2510,2512,5,283,0,0,2511,2510,
        1,0,0,0,2512,2515,1,0,0,0,2513,2511,1,0,0,0,2513,2514,1,0,0,0,2514,
        2529,1,0,0,0,2515,2513,1,0,0,0,2516,2518,5,284,0,0,2517,2516,1,0,
        0,0,2518,2521,1,0,0,0,2519,2517,1,0,0,0,2519,2520,1,0,0,0,2520,2529,
        1,0,0,0,2521,2519,1,0,0,0,2522,2524,5,286,0,0,2523,2522,1,0,0,0,
        2524,2527,1,0,0,0,2525,2523,1,0,0,0,2525,2526,1,0,0,0,2526,2529,
        1,0,0,0,2527,2525,1,0,0,0,2528,2513,1,0,0,0,2528,2519,1,0,0,0,2528,
        2525,1,0,0,0,2529,2530,1,0,0,0,2530,2531,5,281,0,0,2531,2532,5,172,
        0,0,2532,2537,5,289,0,0,2533,2536,3,214,107,0,2534,2536,3,52,26,
        0,2535,2533,1,0,0,0,2535,2534,1,0,0,0,2536,2539,1,0,0,0,2537,2535,
        1,0,0,0,2537,2538,1,0,0,0,2538,2540,1,0,0,0,2539,2537,1,0,0,0,2540,
        2541,5,2,0,0,2541,2542,5,172,0,0,2542,2543,5,289,0,0,2543,221,1,
        0,0,0,2544,2545,5,171,0,0,2545,2546,5,285,0,0,2546,2547,5,282,0,
        0,2547,2566,5,280,0,0,2548,2550,5,283,0,0,2549,2548,1,0,0,0,2550,
        2553,1,0,0,0,2551,2549,1,0,0,0,2551,2552,1,0,0,0,2552,2567,1,0,0,
        0,2553,2551,1,0,0,0,2554,2556,5,284,0,0,2555,2554,1,0,0,0,2556,2559,
        1,0,0,0,2557,2555,1,0,0,0,2557,2558,1,0,0,0,2558,2567,1,0,0,0,2559,
        2557,1,0,0,0,2560,2562,5,286,0,0,2561,2560,1,0,0,0,2562,2565,1,0,
        0,0,2563,2561,1,0,0,0,2563,2564,1,0,0,0,2564,2567,1,0,0,0,2565,2563,
        1,0,0,0,2566,2551,1,0,0,0,2566,2557,1,0,0,0,2566,2563,1,0,0,0,2567,
        2568,1,0,0,0,2568,2569,5,281,0,0,2569,2570,5,172,0,0,2570,2575,5,
        289,0,0,2571,2574,3,214,107,0,2572,2574,3,60,30,0,2573,2571,1,0,
        0,0,2573,2572,1,0,0,0,2574,2577,1,0,0,0,2575,2573,1,0,0,0,2575,2576,
        1,0,0,0,2576,2578,1,0,0,0,2577,2575,1,0,0,0,2578,2579,5,2,0,0,2579,
        2580,5,172,0,0,2580,2581,5,289,0,0,2581,223,1,0,0,0,2582,2583,5,
        171,0,0,2583,2584,5,285,0,0,2584,2585,5,282,0,0,2585,2604,5,280,
        0,0,2586,2588,5,283,0,0,2587,2586,1,0,0,0,2588,2591,1,0,0,0,2589,
        2587,1,0,0,0,2589,2590,1,0,0,0,2590,2605,1,0,0,0,2591,2589,1,0,0,
        0,2592,2594,5,284,0,0,2593,2592,1,0,0,0,2594,2597,1,0,0,0,2595,2593,
        1,0,0,0,2595,2596,1,0,0,0,2596,2605,1,0,0,0,2597,2595,1,0,0,0,2598,
        2600,5,286,0,0,2599,2598,1,0,0,0,2600,2603,1,0,0,0,2601,2599,1,0,
        0,0,2601,2602,1,0,0,0,2602,2605,1,0,0,0,2603,2601,1,0,0,0,2604,2589,
        1,0,0,0,2604,2595,1,0,0,0,2604,2601,1,0,0,0,2605,2606,1,0,0,0,2606,
        2607,5,281,0,0,2607,2608,5,172,0,0,2608,2613,5,289,0,0,2609,2612,
        3,214,107,0,2610,2612,3,64,32,0,2611,2609,1,0,0,0,2611,2610,1,0,
        0,0,2612,2615,1,0,0,0,2613,2611,1,0,0,0,2613,2614,1,0,0,0,2614,2616,
        1,0,0,0,2615,2613,1,0,0,0,2616,2617,5,2,0,0,2617,2618,5,172,0,0,
        2618,2619,5,289,0,0,2619,225,1,0,0,0,2620,2621,5,171,0,0,2621,2622,
        5,285,0,0,2622,2623,5,282,0,0,2623,2642,5,280,0,0,2624,2626,5,283,
        0,0,2625,2624,1,0,0,0,2626,2629,1,0,0,0,2627,2625,1,0,0,0,2627,2628,
        1,0,0,0,2628,2643,1,0,0,0,2629,2627,1,0,0,0,2630,2632,5,284,0,0,
        2631,2630,1,0,0,0,2632,2635,1,0,0,0,2633,2631,1,0,0,0,2633,2634,
        1,0,0,0,2634,2643,1,0,0,0,2635,2633,1,0,0,0,2636,2638,5,286,0,0,
        2637,2636,1,0,0,0,2638,2641,1,0,0,0,2639,2637,1,0,0,0,2639,2640,
        1,0,0,0,2640,2643,1,0,0,0,2641,2639,1,0,0,0,2642,2627,1,0,0,0,2642,
        2633,1,0,0,0,2642,2639,1,0,0,0,2643,2644,1,0,0,0,2644,2645,5,281,
        0,0,2645,2646,5,172,0,0,2646,2651,5,289,0,0,2647,2650,3,214,107,
        0,2648,2650,3,92,46,0,2649,2647,1,0,0,0,2649,2648,1,0,0,0,2650,2653,
        1,0,0,0,2651,2649,1,0,0,0,2651,2652,1,0,0,0,2652,2654,1,0,0,0,2653,
        2651,1,0,0,0,2654,2655,5,2,0,0,2655,2656,5,172,0,0,2656,2657,5,289,
        0,0,2657,227,1,0,0,0,2658,2659,5,171,0,0,2659,2660,5,285,0,0,2660,
        2661,5,282,0,0,2661,2680,5,280,0,0,2662,2664,5,283,0,0,2663,2662,
        1,0,0,0,2664,2667,1,0,0,0,2665,2663,1,0,0,0,2665,2666,1,0,0,0,2666,
        2681,1,0,0,0,2667,2665,1,0,0,0,2668,2670,5,284,0,0,2669,2668,1,0,
        0,0,2670,2673,1,0,0,0,2671,2669,1,0,0,0,2671,2672,1,0,0,0,2672,2681,
        1,0,0,0,2673,2671,1,0,0,0,2674,2676,5,286,0,0,2675,2674,1,0,0,0,
        2676,2679,1,0,0,0,2677,2675,1,0,0,0,2677,2678,1,0,0,0,2678,2681,
        1,0,0,0,2679,2677,1,0,0,0,2680,2665,1,0,0,0,2680,2671,1,0,0,0,2680,
        2677,1,0,0,0,2681,2682,1,0,0,0,2682,2683,5,281,0,0,2683,2684,5,172,
        0,0,2684,2689,5,289,0,0,2685,2688,3,214,107,0,2686,2688,3,96,48,
        0,2687,2685,1,0,0,0,2687,2686,1,0,0,0,2688,2691,1,0,0,0,2689,2687,
        1,0,0,0,2689,2690,1,0,0,0,2690,2692,1,0,0,0,2691,2689,1,0,0,0,2692,
        2693,5,2,0,0,2693,2694,5,172,0,0,2694,2695,5,289,0,0,2695,229,1,
        0,0,0,2696,2697,5,171,0,0,2697,2698,5,285,0,0,2698,2699,5,282,0,
        0,2699,2718,5,280,0,0,2700,2702,5,283,0,0,2701,2700,1,0,0,0,2702,
        2705,1,0,0,0,2703,2701,1,0,0,0,2703,2704,1,0,0,0,2704,2719,1,0,0,
        0,2705,2703,1,0,0,0,2706,2708,5,284,0,0,2707,2706,1,0,0,0,2708,2711,
        1,0,0,0,2709,2707,1,0,0,0,2709,2710,1,0,0,0,2710,2719,1,0,0,0,2711,
        2709,1,0,0,0,2712,2714,5,286,0,0,2713,2712,1,0,0,0,2714,2717,1,0,
        0,0,2715,2713,1,0,0,0,2715,2716,1,0,0,0,2716,2719,1,0,0,0,2717,2715,
        1,0,0,0,2718,2703,1,0,0,0,2718,2709,1,0,0,0,2718,2715,1,0,0,0,2719,
        2720,1,0,0,0,2720,2721,5,281,0,0,2721,2722,5,172,0,0,2722,2727,5,
        289,0,0,2723,2726,3,214,107,0,2724,2726,3,130,65,0,2725,2723,1,0,
        0,0,2725,2724,1,0,0,0,2726,2729,1,0,0,0,2727,2725,1,0,0,0,2727,2728,
        1,0,0,0,2728,2730,1,0,0,0,2729,2727,1,0,0,0,2730,2731,5,2,0,0,2731,
        2732,5,172,0,0,2732,2733,5,289,0,0,2733,231,1,0,0,0,2734,2735,5,
        171,0,0,2735,2736,5,285,0,0,2736,2737,5,282,0,0,2737,2756,5,280,
        0,0,2738,2740,5,283,0,0,2739,2738,1,0,0,0,2740,2743,1,0,0,0,2741,
        2739,1,0,0,0,2741,2742,1,0,0,0,2742,2757,1,0,0,0,2743,2741,1,0,0,
        0,2744,2746,5,284,0,0,2745,2744,1,0,0,0,2746,2749,1,0,0,0,2747,2745,
        1,0,0,0,2747,2748,1,0,0,0,2748,2757,1,0,0,0,2749,2747,1,0,0,0,2750,
        2752,5,286,0,0,2751,2750,1,0,0,0,2752,2755,1,0,0,0,2753,2751,1,0,
        0,0,2753,2754,1,0,0,0,2754,2757,1,0,0,0,2755,2753,1,0,0,0,2756,2741,
        1,0,0,0,2756,2747,1,0,0,0,2756,2753,1,0,0,0,2757,2758,1,0,0,0,2758,
        2759,5,281,0,0,2759,2760,5,172,0,0,2760,2765,5,289,0,0,2761,2764,
        3,214,107,0,2762,2764,3,142,71,0,2763,2761,1,0,0,0,2763,2762,1,0,
        0,0,2764,2767,1,0,0,0,2765,2763,1,0,0,0,2765,2766,1,0,0,0,2766,2768,
        1,0,0,0,2767,2765,1,0,0,0,2768,2769,5,2,0,0,2769,2770,5,172,0,0,
        2770,2771,5,289,0,0,2771,233,1,0,0,0,2772,2773,5,171,0,0,2773,2774,
        5,285,0,0,2774,2775,5,282,0,0,2775,2794,5,280,0,0,2776,2778,5,283,
        0,0,2777,2776,1,0,0,0,2778,2781,1,0,0,0,2779,2777,1,0,0,0,2779,2780,
        1,0,0,0,2780,2795,1,0,0,0,2781,2779,1,0,0,0,2782,2784,5,284,0,0,
        2783,2782,1,0,0,0,2784,2787,1,0,0,0,2785,2783,1,0,0,0,2785,2786,
        1,0,0,0,2786,2795,1,0,0,0,2787,2785,1,0,0,0,2788,2790,5,286,0,0,
        2789,2788,1,0,0,0,2790,2793,1,0,0,0,2791,2789,1,0,0,0,2791,2792,
        1,0,0,0,2792,2795,1,0,0,0,2793,2791,1,0,0,0,2794,2779,1,0,0,0,2794,
        2785,1,0,0,0,2794,2791,1,0,0,0,2795,2796,1,0,0,0,2796,2797,5,281,
        0,0,2797,2798,5,172,0,0,2798,2803,5,289,0,0,2799,2802,3,214,107,
        0,2800,2802,3,156,78,0,2801,2799,1,0,0,0,2801,2800,1,0,0,0,2802,
        2805,1,0,0,0,2803,2801,1,0,0,0,2803,2804,1,0,0,0,2804,2806,1,0,0,
        0,2805,2803,1,0,0,0,2806,2807,5,2,0,0,2807,2808,5,172,0,0,2808,2809,
        5,289,0,0,2809,235,1,0,0,0,2810,2811,5,171,0,0,2811,2812,5,285,0,
        0,2812,2813,5,282,0,0,2813,2832,5,280,0,0,2814,2816,5,283,0,0,2815,
        2814,1,0,0,0,2816,2819,1,0,0,0,2817,2815,1,0,0,0,2817,2818,1,0,0,
        0,2818,2833,1,0,0,0,2819,2817,1,0,0,0,2820,2822,5,284,0,0,2821,2820,
        1,0,0,0,2822,2825,1,0,0,0,2823,2821,1,0,0,0,2823,2824,1,0,0,0,2824,
        2833,1,0,0,0,2825,2823,1,0,0,0,2826,2828,5,286,0,0,2827,2826,1,0,
        0,0,2828,2831,1,0,0,0,2829,2827,1,0,0,0,2829,2830,1,0,0,0,2830,2833,
        1,0,0,0,2831,2829,1,0,0,0,2832,2817,1,0,0,0,2832,2823,1,0,0,0,2832,
        2829,1,0,0,0,2833,2834,1,0,0,0,2834,2835,5,281,0,0,2835,2836,5,172,
        0,0,2836,2841,5,289,0,0,2837,2840,3,214,107,0,2838,2840,3,160,80,
        0,2839,2837,1,0,0,0,2839,2838,1,0,0,0,2840,2843,1,0,0,0,2841,2839,
        1,0,0,0,2841,2842,1,0,0,0,2842,2844,1,0,0,0,2843,2841,1,0,0,0,2844,
        2845,5,2,0,0,2845,2846,5,172,0,0,2846,2847,5,289,0,0,2847,237,1,
        0,0,0,2848,2849,5,171,0,0,2849,2850,5,285,0,0,2850,2851,5,282,0,
        0,2851,2870,5,280,0,0,2852,2854,5,283,0,0,2853,2852,1,0,0,0,2854,
        2857,1,0,0,0,2855,2853,1,0,0,0,2855,2856,1,0,0,0,2856,2871,1,0,0,
        0,2857,2855,1,0,0,0,2858,2860,5,284,0,0,2859,2858,1,0,0,0,2860,2863,
        1,0,0,0,2861,2859,1,0,0,0,2861,2862,1,0,0,0,2862,2871,1,0,0,0,2863,
        2861,1,0,0,0,2864,2866,5,286,0,0,2865,2864,1,0,0,0,2866,2869,1,0,
        0,0,2867,2865,1,0,0,0,2867,2868,1,0,0,0,2868,2871,1,0,0,0,2869,2867,
        1,0,0,0,2870,2855,1,0,0,0,2870,2861,1,0,0,0,2870,2867,1,0,0,0,2871,
        2872,1,0,0,0,2872,2873,5,281,0,0,2873,2874,5,172,0,0,2874,2879,5,
        289,0,0,2875,2878,3,214,107,0,2876,2878,3,176,88,0,2877,2875,1,0,
        0,0,2877,2876,1,0,0,0,2878,2881,1,0,0,0,2879,2877,1,0,0,0,2879,2880,
        1,0,0,0,2880,2882,1,0,0,0,2881,2879,1,0,0,0,2882,2883,5,2,0,0,2883,
        2884,5,172,0,0,2884,2885,5,289,0,0,2885,239,1,0,0,0,2886,2887,5,
        171,0,0,2887,2888,5,285,0,0,2888,2889,5,282,0,0,2889,2908,5,280,
        0,0,2890,2892,5,283,0,0,2891,2890,1,0,0,0,2892,2895,1,0,0,0,2893,
        2891,1,0,0,0,2893,2894,1,0,0,0,2894,2909,1,0,0,0,2895,2893,1,0,0,
        0,2896,2898,5,284,0,0,2897,2896,1,0,0,0,2898,2901,1,0,0,0,2899,2897,
        1,0,0,0,2899,2900,1,0,0,0,2900,2909,1,0,0,0,2901,2899,1,0,0,0,2902,
        2904,5,286,0,0,2903,2902,1,0,0,0,2904,2907,1,0,0,0,2905,2903,1,0,
        0,0,2905,2906,1,0,0,0,2906,2909,1,0,0,0,2907,2905,1,0,0,0,2908,2893,
        1,0,0,0,2908,2899,1,0,0,0,2908,2905,1,0,0,0,2909,2910,1,0,0,0,2910,
        2911,5,281,0,0,2911,2912,5,172,0,0,2912,2917,5,289,0,0,2913,2916,
        3,214,107,0,2914,2916,3,180,90,0,2915,2913,1,0,0,0,2915,2914,1,0,
        0,0,2916,2919,1,0,0,0,2917,2915,1,0,0,0,2917,2918,1,0,0,0,2918,2920,
        1,0,0,0,2919,2917,1,0,0,0,2920,2921,5,2,0,0,2921,2922,5,172,0,0,
        2922,2923,5,289,0,0,2923,241,1,0,0,0,346,295,297,306,312,318,327,
        335,343,351,359,363,366,372,378,384,393,402,411,420,429,438,447,
        456,465,474,483,492,501,510,519,528,537,546,555,573,578,595,608,
        632,635,642,645,650,655,660,663,666,670,675,680,687,691,696,701,
        706,711,716,721,724,731,737,740,756,766,771,780,791,794,799,806,
        820,825,834,851,856,861,866,873,878,885,897,902,909,918,925,930,
        941,946,957,966,973,978,982,987,990,995,1000,1005,1009,1015,1019,
        1023,1026,1028,1032,1044,1052,1057,1066,1069,1077,1087,1098,1106,
        1110,1115,1126,1129,1132,1144,1151,1156,1168,1173,1188,1215,1225,
        1235,1238,1243,1248,1252,1264,1288,1296,1303,1314,1320,1326,1330,
        1341,1347,1353,1361,1364,1374,1380,1386,1391,1400,1403,1406,1410,
        1422,1429,1436,1442,1447,1457,1469,1474,1485,1496,1501,1510,1536,
        1545,1548,1567,1579,1584,1601,1606,1615,1627,1630,1635,1640,1656,
        1661,1670,1675,1689,1694,1703,1720,1733,1738,1749,1752,1760,1775,
        1781,1786,1792,1797,1803,1809,1815,1827,1830,1834,1841,1847,1858,
        1863,1872,1875,1892,1902,1907,1918,1923,1939,1950,1955,1960,1965,
        1972,1984,1993,1998,2007,2015,2021,2026,2031,2038,2049,2054,2059,
        2064,2069,2074,2079,2084,2089,2094,2099,2104,2109,2112,2127,2135,
        2150,2166,2169,2180,2185,2188,2196,2200,2211,2215,2219,2222,2235,
        2238,2245,2248,2255,2260,2263,2277,2285,2287,2303,2307,2309,2315,
        2330,2335,2340,2349,2413,2430,2470,2486,2490,2502,2513,2519,2525,
        2528,2535,2537,2551,2557,2563,2566,2573,2575,2589,2595,2601,2604,
        2611,2613,2627,2633,2639,2642,2649,2651,2665,2671,2677,2680,2687,
        2689,2703,2709,2715,2718,2725,2727,2741,2747,2753,2756,2763,2765,
        2779,2785,2791,2794,2801,2803,2817,2823,2829,2832,2839,2841,2855,
        2861,2867,2870,2877,2879,2893,2899,2905,2908,2915,2917
    ]

class XplorMRParser ( Parser ):

    grammarFileName = "XplorMRParser.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ "<INVALID>", "'SET'", "<INVALID>", "'NOE'", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "'BHIG'", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "'CUTOFF'", "'CUTON'", "'FROM'", "'TO'", 
                     "'PEAK'", "'SPECTRUM'", "'VOLUME'", "'PPM1'", "'PPM2'", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "'TYPE'", "<INVALID>", "<INVALID>", "'CV'", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "'XADC'", "<INVALID>", "'SIZE'", 
                     "'ZERO'", "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "'RAMA'", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "'SORT'", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "'DCSA'", "<INVALID>", "'PCSA'", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "'TAUC'", "<INVALID>", "'XPCS'", 
                     "'TOLL'", "'SAVE'", "'FMED'", "'ERRON'", "'ERROFF'", 
                     "'FON'", "'FOFF'", "'SON'", "'SOFF'", "'FRUN'", "<INVALID>", 
                     "<INVALID>", "'XCCR'", "'WEIP'", "'KDIR'", "'KLIN'", 
                     "'NSEG'", "'NMIN'", "'NMAX'", "'SEGM'", "'OHCUT'", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "'UPDFRQ'", 
                     "'PRNFRQ'", "'FREEMODE'", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "'ALL'", "<INVALID>", "'ATOM'", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "'ID'", "<INVALID>", "'NAME'", "<INVALID>", 
                     "'CUT'", "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "'STORE1'", "'STORE2'", "'STORE3'", 
                     "'STORE4'", "'STORE5'", "'STORE6'", "'STORE7'", "'STORE8'", 
                     "'STORE9'", "'TAG'", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "'SHOW'", "<INVALID>", "<INVALID>", "<INVALID>", "'NIL'", 
                     "'FOR'", "'LOOP'", "'TAIL'", "'HEAD'", "'OR'", "'AND'", 
                     "'NOT'", "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "'HBDA'", "'HBDB'", "<INVALID>", "<INVALID>", "':'", 
                     "<INVALID>", "'<'", "'>'", "'<='", "'>='", "'#'", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "'+'", "'-'", "<INVALID>", 
                     "'/'", "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "'ACOS'", "'ASIN'", "'COS'", 
                     "'DECODE'", "'ENCODE'", "'EXP'", "'GAUSS'", "'HEAVY'", 
                     "'INT'", "'LOG10'", "'LOG'", "<INVALID>", "'MAXW'", 
                     "<INVALID>", "'MOD'", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "'SIN'", "'SQRT'", "'TAN'", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "'RMS'", "'SUM'", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "'IN'" ]

    symbolicNames = [ "<INVALID>", "Set", "End", "Noe", "Assign", "Asymptote", 
                      "Average", "Bhig", "Ceiling", "Classification", "CountViol", 
                      "Distribute", "Monomers", "Ncount", "Nrestraints", 
                      "Potential", "Predict", "Print", "Threshold", "Reset", 
                      "Rswitch", "Scale", "SoExponent", "SqConstant", "SqExponent", 
                      "SqOffset", "Temperature", "Cutoff", "Cuton", "From", 
                      "To", "Peak", "Spectrum", "Volume", "Ppm1", "Ppm2", 
                      "Restraints", "Dihedral", "Nassign", "Sanisotropy", 
                      "Coefficients", "ForceConstant", "Xdipolar", "Dipolar", 
                      "Type", "Sign", "VectorAngle", "Cv", "Partition", 
                      "Tensor", "Anisotropy", "Planar", "Group", "Initialize", 
                      "Selection", "Weight", "Harmonic", "Exponent", "Normal", 
                      "Xadc", "Expectation", "Size", "Zero", "Coupling", 
                      "DegEnergy", "Carbon", "PhiStep", "PsiStep", "Rcoil", 
                      "Proton", "Observed", "Amides", "Nitrogens", "Oxygens", 
                      "RingAtoms", "AlphasAndAmides", "Error", "Ramachandran", 
                      "Gaussian", "Phase", "Quartic", "Shape", "Sort", "Dimensions", 
                      "Collapse", "Danisotropy", "Orient", "Height", "MaxGaussians", 
                      "NewGaussian", "Dcsa", "Sigma", "Pcsa", "OneBond", 
                      "AngleDb", "DerivFlag", "Angle_or_Dihedral", "Paramagnetic", 
                      "Kconst", "Omega", "Tauc", "Debug", "Xpcs", "Tolerance", 
                      "Save", "Fmed", "ErrOn", "ErrOff", "Fon", "Foff", 
                      "Son", "Soff", "Frun", "Xrdcoupling", "Xangle", "Xccr", 
                      "Weip", "Kdir", "Klin", "Nseg", "Nmin", "Nmax", "Segm", 
                      "Ohcut", "Coh1cut", "Coh2cut", "Ohncut", "Updfrq", 
                      "Prnfrq", "Freemode", "Donor", "Acceptor", "Flags", 
                      "All", "Around", "Atom", "Attribute", "BondedTo", 
                      "ByGroup", "ByRes", "Chemical", "Hydrogen", "Id", 
                      "Known", "Name", "Point", "Cut", "Previous", "Pseudo", 
                      "Residue", "Resname", "Saround", "SegIdentifier", 
                      "Store_1", "Store_2", "Store_3", "Store_4", "Store_5", 
                      "Store_6", "Store_7", "Store_8", "Store_9", "Tag", 
                      "Vector", "Do_Lp", "Identify_Lp", "Show", "Evaluate_Lp", 
                      "Patch", "Reference", "Nil", "For", "Loop", "Tail", 
                      "Head", "Or_op", "And_op", "Not_op", "Comma", "Complex", 
                      "Integer", "Logical", "Real", "Double_quote_string", 
                      "SHARP_COMMENT", "EXCLM_COMMENT", "SMCLN_COMMENT", 
                      "Simple_name", "Simple_names", "Integers", "Hbda", 
                      "Hbdb", "L_paren", "R_paren", "Colon", "Equ_op", "Lt_op", 
                      "Gt_op", "Leq_op", "Geq_op", "Neq_op", "Symbol_name", 
                      "SPACE", "COMMENT", "SECTION_COMMENT", "LINE_COMMENT", 
                      "SET_VARIABLE", "Abs", "Attr_properties", "Comparison_ops", 
                      "SPACE_ATTR", "Averaging_methods", "Simple_name_A", 
                      "SPACE_AVER", "Equ_op_P", "Potential_types", "Simple_name_P", 
                      "SPACE_POTE", "Rdc_dist_fix_types", "Rdc_or_Diff_anis_types", 
                      "Csa_types", "SPACE_TYPE", "Gauss_or_Quart", "SPACE_SHAP", 
                      "Exclude", "Include", "End_F", "Class_name", "Any_class", 
                      "SPACE_FLAG", "R_paren_VE", "Equ_op_VE", "Add_op_VE", 
                      "Sub_op_VE", "Mul_op_VE", "Div_op_VE", "Exp_op_VE", 
                      "Comma_VE", "Integer_VE", "Real_VE", "Atom_properties_VE", 
                      "Abs_VE", "Acos_VE", "Asin_VE", "Cos_VE", "Decode_VE", 
                      "Encode_VE", "Exp_VE", "Gauss_VE", "Heavy_VE", "Int_VE", 
                      "Log10_VE", "Log_VE", "Max_VE", "Maxw_VE", "Min_VE", 
                      "Mod_VE", "Norm_VE", "Random_VE", "Sign_VE", "Sin_VE", 
                      "Sqrt_VE", "Tan_VE", "Symbol_name_VE", "Simple_name_VE", 
                      "Double_quote_string_VE", "SPACE_VE", "L_paren_VF", 
                      "SPACE_VF", "L_paren_VS", "R_paren_VS", "Average_VS", 
                      "Element_VS", "Max_VS", "Min_VS", "Norm_VS", "Rms_VS", 
                      "Sum_VS", "Atom_properties_VS", "SPACE_VS", "L_paren_CF", 
                      "R_paren_CF", "In_CF", "Integer_CF", "Real_CF", "Symbol_name_CF", 
                      "Simple_name_CF", "SPACE_CF", "COMMENT_CF", "Simple_name_LL", 
                      "SPACE_LL" ]

    RULE_xplor_nih_mr = 0
    RULE_distance_restraint = 1
    RULE_dihedral_angle_restraint = 2
    RULE_rdc_restraint = 3
    RULE_planar_restraint = 4
    RULE_harmonic_restraint = 5
    RULE_antidistance_restraint = 6
    RULE_coupling_restraint = 7
    RULE_carbon_shift_restraint = 8
    RULE_proton_shift_restraint = 9
    RULE_dihedral_angle_db_restraint = 10
    RULE_radius_of_gyration_restraint = 11
    RULE_diffusion_anisotropy_restraint = 12
    RULE_orientation_db_restraint = 13
    RULE_csa_restraint = 14
    RULE_pcsa_restraint = 15
    RULE_one_bond_coupling_restraint = 16
    RULE_angle_db_restraint = 17
    RULE_pre_restraint = 18
    RULE_pcs_restraint = 19
    RULE_prdc_restraint = 20
    RULE_porientation_restraint = 21
    RULE_pccr_restraint = 22
    RULE_hbond_restraint = 23
    RULE_hbond_db_restraint = 24
    RULE_noe_statement = 25
    RULE_noe_assign = 26
    RULE_predict_statement = 27
    RULE_noe_annotation = 28
    RULE_dihedral_statement = 29
    RULE_dihedral_assign = 30
    RULE_sani_statement = 31
    RULE_sani_assign = 32
    RULE_xdip_statement = 33
    RULE_xdip_assign = 34
    RULE_vean_statement = 35
    RULE_vean_assign = 36
    RULE_tenso_statement = 37
    RULE_tenso_assign = 38
    RULE_anis_statement = 39
    RULE_anis_assign = 40
    RULE_planar_statement = 41
    RULE_group_statement = 42
    RULE_harmonic_statement = 43
    RULE_harmonic_assign = 44
    RULE_antidistance_statement = 45
    RULE_xadc_assign = 46
    RULE_coupling_statement = 47
    RULE_coup_assign = 48
    RULE_carbon_shift_statement = 49
    RULE_carbon_shift_assign = 50
    RULE_carbon_shift_rcoil = 51
    RULE_proton_shift_statement = 52
    RULE_observed = 53
    RULE_proton_shift_rcoil = 54
    RULE_proton_shift_anisotropy = 55
    RULE_proton_shift_amides = 56
    RULE_proton_shift_carbons = 57
    RULE_proton_shift_nitrogens = 58
    RULE_proton_shift_oxygens = 59
    RULE_proton_shift_ring_atoms = 60
    RULE_proton_shift_alphas_and_amides = 61
    RULE_ramachandran_statement = 62
    RULE_rama_assign = 63
    RULE_collapse_statement = 64
    RULE_coll_assign = 65
    RULE_diffusion_statement = 66
    RULE_dani_assign = 67
    RULE_orientation_statement = 68
    RULE_orie_assign = 69
    RULE_csa_statement = 70
    RULE_csa_assign = 71
    RULE_pcsa_statement = 72
    RULE_one_bond_coupling_statement = 73
    RULE_one_bond_assign = 74
    RULE_angle_db_statement = 75
    RULE_angle_db_assign = 76
    RULE_pre_statement = 77
    RULE_pre_assign = 78
    RULE_pcs_statement = 79
    RULE_pcs_assign = 80
    RULE_prdc_statement = 81
    RULE_prdc_assign = 82
    RULE_porientation_statement = 83
    RULE_porientation_assign = 84
    RULE_pccr_statement = 85
    RULE_pccr_assign = 86
    RULE_hbond_statement = 87
    RULE_hbond_assign = 88
    RULE_hbond_db_statement = 89
    RULE_hbond_db_assign = 90
    RULE_selection = 91
    RULE_selection_expression = 92
    RULE_term = 93
    RULE_factor = 94
    RULE_number = 95
    RULE_number_f = 96
    RULE_number_s = 97
    RULE_number_a = 98
    RULE_flag_statement = 99
    RULE_vector_statement = 100
    RULE_vector_mode = 101
    RULE_vector_expression = 102
    RULE_vector_operation = 103
    RULE_vflc = 104
    RULE_vector_func_call = 105
    RULE_vector_show_property = 106
    RULE_evaluate_statement = 107
    RULE_evaluate_operation = 108
    RULE_patch_statement = 109
    RULE_noe_assign_loop = 110
    RULE_dihedral_assign_loop = 111
    RULE_sani_assign_loop = 112
    RULE_xadc_assign_loop = 113
    RULE_coup_assign_loop = 114
    RULE_coll_assign_loop = 115
    RULE_csa_assign_loop = 116
    RULE_pre_assign_loop = 117
    RULE_pcs_assign_loop = 118
    RULE_hbond_assign_loop = 119
    RULE_hbond_db_assign_loop = 120

    ruleNames =  [ "xplor_nih_mr", "distance_restraint", "dihedral_angle_restraint", 
                   "rdc_restraint", "planar_restraint", "harmonic_restraint", 
                   "antidistance_restraint", "coupling_restraint", "carbon_shift_restraint", 
                   "proton_shift_restraint", "dihedral_angle_db_restraint", 
                   "radius_of_gyration_restraint", "diffusion_anisotropy_restraint", 
                   "orientation_db_restraint", "csa_restraint", "pcsa_restraint", 
                   "one_bond_coupling_restraint", "angle_db_restraint", 
                   "pre_restraint", "pcs_restraint", "prdc_restraint", "porientation_restraint", 
                   "pccr_restraint", "hbond_restraint", "hbond_db_restraint", 
                   "noe_statement", "noe_assign", "predict_statement", "noe_annotation", 
                   "dihedral_statement", "dihedral_assign", "sani_statement", 
                   "sani_assign", "xdip_statement", "xdip_assign", "vean_statement", 
                   "vean_assign", "tenso_statement", "tenso_assign", "anis_statement", 
                   "anis_assign", "planar_statement", "group_statement", 
                   "harmonic_statement", "harmonic_assign", "antidistance_statement", 
                   "xadc_assign", "coupling_statement", "coup_assign", "carbon_shift_statement", 
                   "carbon_shift_assign", "carbon_shift_rcoil", "proton_shift_statement", 
                   "observed", "proton_shift_rcoil", "proton_shift_anisotropy", 
                   "proton_shift_amides", "proton_shift_carbons", "proton_shift_nitrogens", 
                   "proton_shift_oxygens", "proton_shift_ring_atoms", "proton_shift_alphas_and_amides", 
                   "ramachandran_statement", "rama_assign", "collapse_statement", 
                   "coll_assign", "diffusion_statement", "dani_assign", 
                   "orientation_statement", "orie_assign", "csa_statement", 
                   "csa_assign", "pcsa_statement", "one_bond_coupling_statement", 
                   "one_bond_assign", "angle_db_statement", "angle_db_assign", 
                   "pre_statement", "pre_assign", "pcs_statement", "pcs_assign", 
                   "prdc_statement", "prdc_assign", "porientation_statement", 
                   "porientation_assign", "pccr_statement", "pccr_assign", 
                   "hbond_statement", "hbond_assign", "hbond_db_statement", 
                   "hbond_db_assign", "selection", "selection_expression", 
                   "term", "factor", "number", "number_f", "number_s", "number_a", 
                   "flag_statement", "vector_statement", "vector_mode", 
                   "vector_expression", "vector_operation", "vflc", "vector_func_call", 
                   "vector_show_property", "evaluate_statement", "evaluate_operation", 
                   "patch_statement", "noe_assign_loop", "dihedral_assign_loop", 
                   "sani_assign_loop", "xadc_assign_loop", "coup_assign_loop", 
                   "coll_assign_loop", "csa_assign_loop", "pre_assign_loop", 
                   "pcs_assign_loop", "hbond_assign_loop", "hbond_db_assign_loop" ]

    EOF = Token.EOF
    Set=1
    End=2
    Noe=3
    Assign=4
    Asymptote=5
    Average=6
    Bhig=7
    Ceiling=8
    Classification=9
    CountViol=10
    Distribute=11
    Monomers=12
    Ncount=13
    Nrestraints=14
    Potential=15
    Predict=16
    Print=17
    Threshold=18
    Reset=19
    Rswitch=20
    Scale=21
    SoExponent=22
    SqConstant=23
    SqExponent=24
    SqOffset=25
    Temperature=26
    Cutoff=27
    Cuton=28
    From=29
    To=30
    Peak=31
    Spectrum=32
    Volume=33
    Ppm1=34
    Ppm2=35
    Restraints=36
    Dihedral=37
    Nassign=38
    Sanisotropy=39
    Coefficients=40
    ForceConstant=41
    Xdipolar=42
    Dipolar=43
    Type=44
    Sign=45
    VectorAngle=46
    Cv=47
    Partition=48
    Tensor=49
    Anisotropy=50
    Planar=51
    Group=52
    Initialize=53
    Selection=54
    Weight=55
    Harmonic=56
    Exponent=57
    Normal=58
    Xadc=59
    Expectation=60
    Size=61
    Zero=62
    Coupling=63
    DegEnergy=64
    Carbon=65
    PhiStep=66
    PsiStep=67
    Rcoil=68
    Proton=69
    Observed=70
    Amides=71
    Nitrogens=72
    Oxygens=73
    RingAtoms=74
    AlphasAndAmides=75
    Error=76
    Ramachandran=77
    Gaussian=78
    Phase=79
    Quartic=80
    Shape=81
    Sort=82
    Dimensions=83
    Collapse=84
    Danisotropy=85
    Orient=86
    Height=87
    MaxGaussians=88
    NewGaussian=89
    Dcsa=90
    Sigma=91
    Pcsa=92
    OneBond=93
    AngleDb=94
    DerivFlag=95
    Angle_or_Dihedral=96
    Paramagnetic=97
    Kconst=98
    Omega=99
    Tauc=100
    Debug=101
    Xpcs=102
    Tolerance=103
    Save=104
    Fmed=105
    ErrOn=106
    ErrOff=107
    Fon=108
    Foff=109
    Son=110
    Soff=111
    Frun=112
    Xrdcoupling=113
    Xangle=114
    Xccr=115
    Weip=116
    Kdir=117
    Klin=118
    Nseg=119
    Nmin=120
    Nmax=121
    Segm=122
    Ohcut=123
    Coh1cut=124
    Coh2cut=125
    Ohncut=126
    Updfrq=127
    Prnfrq=128
    Freemode=129
    Donor=130
    Acceptor=131
    Flags=132
    All=133
    Around=134
    Atom=135
    Attribute=136
    BondedTo=137
    ByGroup=138
    ByRes=139
    Chemical=140
    Hydrogen=141
    Id=142
    Known=143
    Name=144
    Point=145
    Cut=146
    Previous=147
    Pseudo=148
    Residue=149
    Resname=150
    Saround=151
    SegIdentifier=152
    Store_1=153
    Store_2=154
    Store_3=155
    Store_4=156
    Store_5=157
    Store_6=158
    Store_7=159
    Store_8=160
    Store_9=161
    Tag=162
    Vector=163
    Do_Lp=164
    Identify_Lp=165
    Show=166
    Evaluate_Lp=167
    Patch=168
    Reference=169
    Nil=170
    For=171
    Loop=172
    Tail=173
    Head=174
    Or_op=175
    And_op=176
    Not_op=177
    Comma=178
    Complex=179
    Integer=180
    Logical=181
    Real=182
    Double_quote_string=183
    SHARP_COMMENT=184
    EXCLM_COMMENT=185
    SMCLN_COMMENT=186
    Simple_name=187
    Simple_names=188
    Integers=189
    Hbda=190
    Hbdb=191
    L_paren=192
    R_paren=193
    Colon=194
    Equ_op=195
    Lt_op=196
    Gt_op=197
    Leq_op=198
    Geq_op=199
    Neq_op=200
    Symbol_name=201
    SPACE=202
    COMMENT=203
    SECTION_COMMENT=204
    LINE_COMMENT=205
    SET_VARIABLE=206
    Abs=207
    Attr_properties=208
    Comparison_ops=209
    SPACE_ATTR=210
    Averaging_methods=211
    Simple_name_A=212
    SPACE_AVER=213
    Equ_op_P=214
    Potential_types=215
    Simple_name_P=216
    SPACE_POTE=217
    Rdc_dist_fix_types=218
    Rdc_or_Diff_anis_types=219
    Csa_types=220
    SPACE_TYPE=221
    Gauss_or_Quart=222
    SPACE_SHAP=223
    Exclude=224
    Include=225
    End_F=226
    Class_name=227
    Any_class=228
    SPACE_FLAG=229
    R_paren_VE=230
    Equ_op_VE=231
    Add_op_VE=232
    Sub_op_VE=233
    Mul_op_VE=234
    Div_op_VE=235
    Exp_op_VE=236
    Comma_VE=237
    Integer_VE=238
    Real_VE=239
    Atom_properties_VE=240
    Abs_VE=241
    Acos_VE=242
    Asin_VE=243
    Cos_VE=244
    Decode_VE=245
    Encode_VE=246
    Exp_VE=247
    Gauss_VE=248
    Heavy_VE=249
    Int_VE=250
    Log10_VE=251
    Log_VE=252
    Max_VE=253
    Maxw_VE=254
    Min_VE=255
    Mod_VE=256
    Norm_VE=257
    Random_VE=258
    Sign_VE=259
    Sin_VE=260
    Sqrt_VE=261
    Tan_VE=262
    Symbol_name_VE=263
    Simple_name_VE=264
    Double_quote_string_VE=265
    SPACE_VE=266
    L_paren_VF=267
    SPACE_VF=268
    L_paren_VS=269
    R_paren_VS=270
    Average_VS=271
    Element_VS=272
    Max_VS=273
    Min_VS=274
    Norm_VS=275
    Rms_VS=276
    Sum_VS=277
    Atom_properties_VS=278
    SPACE_VS=279
    L_paren_CF=280
    R_paren_CF=281
    In_CF=282
    Integer_CF=283
    Real_CF=284
    Symbol_name_CF=285
    Simple_name_CF=286
    SPACE_CF=287
    COMMENT_CF=288
    Simple_name_LL=289
    SPACE_LL=290

    def __init__(self, input:TokenStream, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.10.1")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None




    class Xplor_nih_mrContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EOF(self):
            return self.getToken(XplorMRParser.EOF, 0)

        def distance_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Distance_restraintContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Distance_restraintContext,i)


        def dihedral_angle_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Dihedral_angle_restraintContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Dihedral_angle_restraintContext,i)


        def rdc_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Rdc_restraintContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Rdc_restraintContext,i)


        def planar_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Planar_restraintContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Planar_restraintContext,i)


        def harmonic_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Harmonic_restraintContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Harmonic_restraintContext,i)


        def antidistance_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Antidistance_restraintContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Antidistance_restraintContext,i)


        def coupling_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Coupling_restraintContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Coupling_restraintContext,i)


        def carbon_shift_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Carbon_shift_restraintContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Carbon_shift_restraintContext,i)


        def proton_shift_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Proton_shift_restraintContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Proton_shift_restraintContext,i)


        def dihedral_angle_db_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Dihedral_angle_db_restraintContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Dihedral_angle_db_restraintContext,i)


        def radius_of_gyration_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Radius_of_gyration_restraintContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Radius_of_gyration_restraintContext,i)


        def diffusion_anisotropy_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Diffusion_anisotropy_restraintContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Diffusion_anisotropy_restraintContext,i)


        def orientation_db_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Orientation_db_restraintContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Orientation_db_restraintContext,i)


        def csa_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Csa_restraintContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Csa_restraintContext,i)


        def pcsa_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Pcsa_restraintContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Pcsa_restraintContext,i)


        def one_bond_coupling_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.One_bond_coupling_restraintContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.One_bond_coupling_restraintContext,i)


        def angle_db_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Angle_db_restraintContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Angle_db_restraintContext,i)


        def pre_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Pre_restraintContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Pre_restraintContext,i)


        def pcs_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Pcs_restraintContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Pcs_restraintContext,i)


        def prdc_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Prdc_restraintContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Prdc_restraintContext,i)


        def porientation_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Porientation_restraintContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Porientation_restraintContext,i)


        def pccr_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Pccr_restraintContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Pccr_restraintContext,i)


        def hbond_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Hbond_restraintContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Hbond_restraintContext,i)


        def hbond_db_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Hbond_db_restraintContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Hbond_db_restraintContext,i)


        def flag_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Flag_statementContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Flag_statementContext,i)


        def vector_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Vector_statementContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Vector_statementContext,i)


        def evaluate_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Evaluate_statementContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Evaluate_statementContext,i)


        def patch_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Patch_statementContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Patch_statementContext,i)


        def noe_assign_loop(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Noe_assign_loopContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Noe_assign_loopContext,i)


        def dihedral_assign_loop(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Dihedral_assign_loopContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Dihedral_assign_loopContext,i)


        def sani_assign_loop(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Sani_assign_loopContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Sani_assign_loopContext,i)


        def hbond_assign_loop(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Hbond_assign_loopContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Hbond_assign_loopContext,i)


        def hbond_db_assign_loop(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Hbond_db_assign_loopContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Hbond_db_assign_loopContext,i)


        def coup_assign_loop(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Coup_assign_loopContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Coup_assign_loopContext,i)


        def xadc_assign_loop(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Xadc_assign_loopContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Xadc_assign_loopContext,i)


        def coll_assign_loop(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Coll_assign_loopContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Coll_assign_loopContext,i)


        def csa_assign_loop(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Csa_assign_loopContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Csa_assign_loopContext,i)


        def pre_assign_loop(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Pre_assign_loopContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Pre_assign_loopContext,i)


        def pcs_assign_loop(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Pcs_assign_loopContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Pcs_assign_loopContext,i)


        def noe_assign(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Noe_assignContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Noe_assignContext,i)


        def dihedral_assign(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Dihedral_assignContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Dihedral_assignContext,i)


        def sani_assign(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Sani_assignContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Sani_assignContext,i)


        def planar_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Planar_statementContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Planar_statementContext,i)


        def harmonic_assign(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Harmonic_assignContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Harmonic_assignContext,i)


        def hbond_assign(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Hbond_assignContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Hbond_assignContext,i)


        def hbond_db_assign(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Hbond_db_assignContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Hbond_db_assignContext,i)


        def coup_assign(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Coup_assignContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Coup_assignContext,i)


        def xadc_assign(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Xadc_assignContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Xadc_assignContext,i)


        def coll_assign(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Coll_assignContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Coll_assignContext,i)


        def csa_assign(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Csa_assignContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Csa_assignContext,i)


        def pre_assign(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Pre_assignContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Pre_assignContext,i)


        def pcs_assign(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Pcs_assignContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Pcs_assignContext,i)


        def observed(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.ObservedContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.ObservedContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_xplor_nih_mr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterXplor_nih_mr" ):
                listener.enterXplor_nih_mr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitXplor_nih_mr" ):
                listener.exitXplor_nih_mr(self)




    def xplor_nih_mr(self):

        localctx = XplorMRParser.Xplor_nih_mrContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_xplor_nih_mr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 297
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << XplorMRParser.Noe) | (1 << XplorMRParser.Assign) | (1 << XplorMRParser.Restraints) | (1 << XplorMRParser.Dihedral) | (1 << XplorMRParser.Sanisotropy) | (1 << XplorMRParser.Xdipolar) | (1 << XplorMRParser.Dipolar) | (1 << XplorMRParser.VectorAngle) | (1 << XplorMRParser.Tensor) | (1 << XplorMRParser.Anisotropy) | (1 << XplorMRParser.Planar) | (1 << XplorMRParser.Group) | (1 << XplorMRParser.Initialize) | (1 << XplorMRParser.Harmonic) | (1 << XplorMRParser.Xadc) | (1 << XplorMRParser.Coupling))) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & ((1 << (XplorMRParser.Carbon - 65)) | (1 << (XplorMRParser.Proton - 65)) | (1 << (XplorMRParser.Observed - 65)) | (1 << (XplorMRParser.Ramachandran - 65)) | (1 << (XplorMRParser.Collapse - 65)) | (1 << (XplorMRParser.Danisotropy - 65)) | (1 << (XplorMRParser.Orient - 65)) | (1 << (XplorMRParser.Dcsa - 65)) | (1 << (XplorMRParser.Pcsa - 65)) | (1 << (XplorMRParser.OneBond - 65)) | (1 << (XplorMRParser.AngleDb - 65)) | (1 << (XplorMRParser.Paramagnetic - 65)) | (1 << (XplorMRParser.Xpcs - 65)) | (1 << (XplorMRParser.Xrdcoupling - 65)) | (1 << (XplorMRParser.Xangle - 65)) | (1 << (XplorMRParser.Xccr - 65)))) != 0) or ((((_la - 132)) & ~0x3f) == 0 and ((1 << (_la - 132)) & ((1 << (XplorMRParser.Flags - 132)) | (1 << (XplorMRParser.Vector - 132)) | (1 << (XplorMRParser.Evaluate_Lp - 132)) | (1 << (XplorMRParser.Patch - 132)) | (1 << (XplorMRParser.For - 132)) | (1 << (XplorMRParser.Hbda - 132)) | (1 << (XplorMRParser.Hbdb - 132)))) != 0):
                self.state = 295
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,0,self._ctx)
                if la_ == 1:
                    self.state = 242
                    self.distance_restraint()
                    pass

                elif la_ == 2:
                    self.state = 243
                    self.dihedral_angle_restraint()
                    pass

                elif la_ == 3:
                    self.state = 244
                    self.rdc_restraint()
                    pass

                elif la_ == 4:
                    self.state = 245
                    self.planar_restraint()
                    pass

                elif la_ == 5:
                    self.state = 246
                    self.harmonic_restraint()
                    pass

                elif la_ == 6:
                    self.state = 247
                    self.antidistance_restraint()
                    pass

                elif la_ == 7:
                    self.state = 248
                    self.coupling_restraint()
                    pass

                elif la_ == 8:
                    self.state = 249
                    self.carbon_shift_restraint()
                    pass

                elif la_ == 9:
                    self.state = 250
                    self.proton_shift_restraint()
                    pass

                elif la_ == 10:
                    self.state = 251
                    self.dihedral_angle_db_restraint()
                    pass

                elif la_ == 11:
                    self.state = 252
                    self.radius_of_gyration_restraint()
                    pass

                elif la_ == 12:
                    self.state = 253
                    self.diffusion_anisotropy_restraint()
                    pass

                elif la_ == 13:
                    self.state = 254
                    self.orientation_db_restraint()
                    pass

                elif la_ == 14:
                    self.state = 255
                    self.csa_restraint()
                    pass

                elif la_ == 15:
                    self.state = 256
                    self.pcsa_restraint()
                    pass

                elif la_ == 16:
                    self.state = 257
                    self.one_bond_coupling_restraint()
                    pass

                elif la_ == 17:
                    self.state = 258
                    self.angle_db_restraint()
                    pass

                elif la_ == 18:
                    self.state = 259
                    self.pre_restraint()
                    pass

                elif la_ == 19:
                    self.state = 260
                    self.pcs_restraint()
                    pass

                elif la_ == 20:
                    self.state = 261
                    self.prdc_restraint()
                    pass

                elif la_ == 21:
                    self.state = 262
                    self.porientation_restraint()
                    pass

                elif la_ == 22:
                    self.state = 263
                    self.pccr_restraint()
                    pass

                elif la_ == 23:
                    self.state = 264
                    self.hbond_restraint()
                    pass

                elif la_ == 24:
                    self.state = 265
                    self.hbond_db_restraint()
                    pass

                elif la_ == 25:
                    self.state = 266
                    self.flag_statement()
                    pass

                elif la_ == 26:
                    self.state = 267
                    self.vector_statement()
                    pass

                elif la_ == 27:
                    self.state = 268
                    self.evaluate_statement()
                    pass

                elif la_ == 28:
                    self.state = 269
                    self.patch_statement()
                    pass

                elif la_ == 29:
                    self.state = 270
                    self.noe_assign_loop()
                    pass

                elif la_ == 30:
                    self.state = 271
                    self.dihedral_assign_loop()
                    pass

                elif la_ == 31:
                    self.state = 272
                    self.sani_assign_loop()
                    pass

                elif la_ == 32:
                    self.state = 273
                    self.hbond_assign_loop()
                    pass

                elif la_ == 33:
                    self.state = 274
                    self.hbond_db_assign_loop()
                    pass

                elif la_ == 34:
                    self.state = 275
                    self.coup_assign_loop()
                    pass

                elif la_ == 35:
                    self.state = 276
                    self.xadc_assign_loop()
                    pass

                elif la_ == 36:
                    self.state = 277
                    self.coll_assign_loop()
                    pass

                elif la_ == 37:
                    self.state = 278
                    self.csa_assign_loop()
                    pass

                elif la_ == 38:
                    self.state = 279
                    self.pre_assign_loop()
                    pass

                elif la_ == 39:
                    self.state = 280
                    self.pcs_assign_loop()
                    pass

                elif la_ == 40:
                    self.state = 281
                    self.noe_assign()
                    pass

                elif la_ == 41:
                    self.state = 282
                    self.dihedral_assign()
                    pass

                elif la_ == 42:
                    self.state = 283
                    self.sani_assign()
                    pass

                elif la_ == 43:
                    self.state = 284
                    self.planar_statement()
                    pass

                elif la_ == 44:
                    self.state = 285
                    self.harmonic_assign()
                    pass

                elif la_ == 45:
                    self.state = 286
                    self.hbond_assign()
                    pass

                elif la_ == 46:
                    self.state = 287
                    self.hbond_db_assign()
                    pass

                elif la_ == 47:
                    self.state = 288
                    self.coup_assign()
                    pass

                elif la_ == 48:
                    self.state = 289
                    self.xadc_assign()
                    pass

                elif la_ == 49:
                    self.state = 290
                    self.coll_assign()
                    pass

                elif la_ == 50:
                    self.state = 291
                    self.csa_assign()
                    pass

                elif la_ == 51:
                    self.state = 292
                    self.pre_assign()
                    pass

                elif la_ == 52:
                    self.state = 293
                    self.pcs_assign()
                    pass

                elif la_ == 53:
                    self.state = 294
                    self.observed()
                    pass


                self.state = 299
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 300
            self.match(XplorMRParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Distance_restraintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Noe(self):
            return self.getToken(XplorMRParser.Noe, 0)

        def End(self):
            return self.getToken(XplorMRParser.End, 0)

        def noe_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Noe_statementContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Noe_statementContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_distance_restraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDistance_restraint" ):
                listener.enterDistance_restraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDistance_restraint" ):
                listener.exitDistance_restraint(self)




    def distance_restraint(self):

        localctx = XplorMRParser.Distance_restraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_distance_restraint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 302
            self.match(XplorMRParser.Noe)
            self.state = 306
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << XplorMRParser.Assign) | (1 << XplorMRParser.Asymptote) | (1 << XplorMRParser.Average) | (1 << XplorMRParser.Bhig) | (1 << XplorMRParser.Ceiling) | (1 << XplorMRParser.Classification) | (1 << XplorMRParser.CountViol) | (1 << XplorMRParser.Distribute) | (1 << XplorMRParser.Monomers) | (1 << XplorMRParser.Ncount) | (1 << XplorMRParser.Nrestraints) | (1 << XplorMRParser.Potential) | (1 << XplorMRParser.Predict) | (1 << XplorMRParser.Print) | (1 << XplorMRParser.Reset) | (1 << XplorMRParser.Rswitch) | (1 << XplorMRParser.Scale) | (1 << XplorMRParser.SoExponent) | (1 << XplorMRParser.SqConstant) | (1 << XplorMRParser.SqExponent) | (1 << XplorMRParser.SqOffset) | (1 << XplorMRParser.Temperature))) != 0) or _la==XplorMRParser.For:
                self.state = 303
                self.noe_statement()
                self.state = 308
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 309
            self.match(XplorMRParser.End)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Dihedral_angle_restraintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Dihedral(self):
            return self.getToken(XplorMRParser.Dihedral, 0)

        def End(self):
            return self.getToken(XplorMRParser.End, 0)

        def Restraints(self):
            return self.getToken(XplorMRParser.Restraints, 0)

        def dihedral_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Dihedral_statementContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Dihedral_statementContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_dihedral_angle_restraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDihedral_angle_restraint" ):
                listener.enterDihedral_angle_restraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDihedral_angle_restraint" ):
                listener.exitDihedral_angle_restraint(self)




    def dihedral_angle_restraint(self):

        localctx = XplorMRParser.Dihedral_angle_restraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_dihedral_angle_restraint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 312
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==XplorMRParser.Restraints:
                self.state = 311
                self.match(XplorMRParser.Restraints)


            self.state = 314
            self.match(XplorMRParser.Dihedral)
            self.state = 318
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << XplorMRParser.Assign) | (1 << XplorMRParser.Reset) | (1 << XplorMRParser.Scale) | (1 << XplorMRParser.Nassign))) != 0) or _la==XplorMRParser.Vector or _la==XplorMRParser.For:
                self.state = 315
                self.dihedral_statement()
                self.state = 320
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 321
            self.match(XplorMRParser.End)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Rdc_restraintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Sanisotropy(self):
            return self.getToken(XplorMRParser.Sanisotropy, 0)

        def End(self):
            return self.getToken(XplorMRParser.End, 0)

        def sani_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Sani_statementContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Sani_statementContext,i)


        def Xdipolar(self):
            return self.getToken(XplorMRParser.Xdipolar, 0)

        def Dipolar(self):
            return self.getToken(XplorMRParser.Dipolar, 0)

        def xdip_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Xdip_statementContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Xdip_statementContext,i)


        def VectorAngle(self):
            return self.getToken(XplorMRParser.VectorAngle, 0)

        def vean_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Vean_statementContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Vean_statementContext,i)


        def Tensor(self):
            return self.getToken(XplorMRParser.Tensor, 0)

        def tenso_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Tenso_statementContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Tenso_statementContext,i)


        def Anisotropy(self):
            return self.getToken(XplorMRParser.Anisotropy, 0)

        def anis_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Anis_statementContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Anis_statementContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_rdc_restraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRdc_restraint" ):
                listener.enterRdc_restraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRdc_restraint" ):
                listener.exitRdc_restraint(self)




    def rdc_restraint(self):

        localctx = XplorMRParser.Rdc_restraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_rdc_restraint)
        self._la = 0 # Token type
        try:
            self.state = 363
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [XplorMRParser.Sanisotropy]:
                self.enterOuterAlt(localctx, 1)
                self.state = 323
                self.match(XplorMRParser.Sanisotropy)
                self.state = 327
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << XplorMRParser.Assign) | (1 << XplorMRParser.Classification) | (1 << XplorMRParser.Nrestraints) | (1 << XplorMRParser.Potential) | (1 << XplorMRParser.Print) | (1 << XplorMRParser.Reset) | (1 << XplorMRParser.Coefficients) | (1 << XplorMRParser.ForceConstant))) != 0) or _la==XplorMRParser.For:
                    self.state = 324
                    self.sani_statement()
                    self.state = 329
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 330
                self.match(XplorMRParser.End)
                pass
            elif token in [XplorMRParser.Xdipolar, XplorMRParser.Dipolar]:
                self.enterOuterAlt(localctx, 2)
                self.state = 331
                _la = self._input.LA(1)
                if not(_la==XplorMRParser.Xdipolar or _la==XplorMRParser.Dipolar):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 335
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << XplorMRParser.Assign) | (1 << XplorMRParser.Average) | (1 << XplorMRParser.Classification) | (1 << XplorMRParser.Nrestraints) | (1 << XplorMRParser.Potential) | (1 << XplorMRParser.Print) | (1 << XplorMRParser.Reset) | (1 << XplorMRParser.Scale) | (1 << XplorMRParser.Coefficients) | (1 << XplorMRParser.ForceConstant) | (1 << XplorMRParser.Type) | (1 << XplorMRParser.Sign))) != 0):
                    self.state = 332
                    self.xdip_statement()
                    self.state = 337
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 338
                self.match(XplorMRParser.End)
                pass
            elif token in [XplorMRParser.VectorAngle]:
                self.enterOuterAlt(localctx, 3)
                self.state = 339
                self.match(XplorMRParser.VectorAngle)
                self.state = 343
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << XplorMRParser.Assign) | (1 << XplorMRParser.Classification) | (1 << XplorMRParser.Nrestraints) | (1 << XplorMRParser.Print) | (1 << XplorMRParser.Reset) | (1 << XplorMRParser.ForceConstant) | (1 << XplorMRParser.Cv) | (1 << XplorMRParser.Partition))) != 0):
                    self.state = 340
                    self.vean_statement()
                    self.state = 345
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 346
                self.match(XplorMRParser.End)
                pass
            elif token in [XplorMRParser.Tensor]:
                self.enterOuterAlt(localctx, 4)
                self.state = 347
                self.match(XplorMRParser.Tensor)
                self.state = 351
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << XplorMRParser.Assign) | (1 << XplorMRParser.Classification) | (1 << XplorMRParser.Nrestraints) | (1 << XplorMRParser.Potential) | (1 << XplorMRParser.Print) | (1 << XplorMRParser.Reset) | (1 << XplorMRParser.Coefficients))) != 0):
                    self.state = 348
                    self.tenso_statement()
                    self.state = 353
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 354
                self.match(XplorMRParser.End)
                pass
            elif token in [XplorMRParser.Anisotropy]:
                self.enterOuterAlt(localctx, 5)
                self.state = 355
                self.match(XplorMRParser.Anisotropy)
                self.state = 359
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << XplorMRParser.Assign) | (1 << XplorMRParser.Classification) | (1 << XplorMRParser.Nrestraints) | (1 << XplorMRParser.Potential) | (1 << XplorMRParser.Print) | (1 << XplorMRParser.Reset) | (1 << XplorMRParser.Coefficients) | (1 << XplorMRParser.ForceConstant) | (1 << XplorMRParser.Type))) != 0):
                    self.state = 356
                    self.anis_statement()
                    self.state = 361
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 362
                self.match(XplorMRParser.End)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Planar_restraintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Planar(self):
            return self.getToken(XplorMRParser.Planar, 0)

        def End(self):
            return self.getToken(XplorMRParser.End, 0)

        def Restraints(self):
            return self.getToken(XplorMRParser.Restraints, 0)

        def planar_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Planar_statementContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Planar_statementContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_planar_restraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPlanar_restraint" ):
                listener.enterPlanar_restraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPlanar_restraint" ):
                listener.exitPlanar_restraint(self)




    def planar_restraint(self):

        localctx = XplorMRParser.Planar_restraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_planar_restraint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 366
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==XplorMRParser.Restraints:
                self.state = 365
                self.match(XplorMRParser.Restraints)


            self.state = 368
            self.match(XplorMRParser.Planar)
            self.state = 372
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==XplorMRParser.Group or _la==XplorMRParser.Initialize or _la==XplorMRParser.Vector:
                self.state = 369
                self.planar_statement()
                self.state = 374
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 375
            self.match(XplorMRParser.End)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Harmonic_restraintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Harmonic(self):
            return self.getToken(XplorMRParser.Harmonic, 0)

        def End(self):
            return self.getToken(XplorMRParser.End, 0)

        def Restraints(self):
            return self.getToken(XplorMRParser.Restraints, 0)

        def harmonic_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Harmonic_statementContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Harmonic_statementContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_harmonic_restraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHarmonic_restraint" ):
                listener.enterHarmonic_restraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHarmonic_restraint" ):
                listener.exitHarmonic_restraint(self)




    def harmonic_restraint(self):

        localctx = XplorMRParser.Harmonic_restraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_harmonic_restraint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 378
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==XplorMRParser.Restraints:
                self.state = 377
                self.match(XplorMRParser.Restraints)


            self.state = 380
            self.match(XplorMRParser.Harmonic)
            self.state = 384
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==XplorMRParser.Exponent or _la==XplorMRParser.Normal or _la==XplorMRParser.Vector:
                self.state = 381
                self.harmonic_statement()
                self.state = 386
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 387
            self.match(XplorMRParser.End)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Antidistance_restraintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Xadc(self):
            return self.getToken(XplorMRParser.Xadc, 0)

        def End(self):
            return self.getToken(XplorMRParser.End, 0)

        def antidistance_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Antidistance_statementContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Antidistance_statementContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_antidistance_restraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAntidistance_restraint" ):
                listener.enterAntidistance_restraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAntidistance_restraint" ):
                listener.exitAntidistance_restraint(self)




    def antidistance_restraint(self):

        localctx = XplorMRParser.Antidistance_restraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_antidistance_restraint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 389
            self.match(XplorMRParser.Xadc)
            self.state = 393
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << XplorMRParser.Assign) | (1 << XplorMRParser.Classification) | (1 << XplorMRParser.Nrestraints) | (1 << XplorMRParser.Print) | (1 << XplorMRParser.Reset) | (1 << XplorMRParser.ForceConstant) | (1 << XplorMRParser.Expectation) | (1 << XplorMRParser.Size) | (1 << XplorMRParser.Zero))) != 0) or _la==XplorMRParser.For:
                self.state = 390
                self.antidistance_statement()
                self.state = 395
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 396
            self.match(XplorMRParser.End)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Coupling_restraintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Coupling(self):
            return self.getToken(XplorMRParser.Coupling, 0)

        def End(self):
            return self.getToken(XplorMRParser.End, 0)

        def coupling_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Coupling_statementContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Coupling_statementContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_coupling_restraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCoupling_restraint" ):
                listener.enterCoupling_restraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCoupling_restraint" ):
                listener.exitCoupling_restraint(self)




    def coupling_restraint(self):

        localctx = XplorMRParser.Coupling_restraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_coupling_restraint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 398
            self.match(XplorMRParser.Coupling)
            self.state = 402
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((((_la - 4)) & ~0x3f) == 0 and ((1 << (_la - 4)) & ((1 << (XplorMRParser.Assign - 4)) | (1 << (XplorMRParser.Classification - 4)) | (1 << (XplorMRParser.Nrestraints - 4)) | (1 << (XplorMRParser.Potential - 4)) | (1 << (XplorMRParser.Print - 4)) | (1 << (XplorMRParser.Reset - 4)) | (1 << (XplorMRParser.Coefficients - 4)) | (1 << (XplorMRParser.ForceConstant - 4)) | (1 << (XplorMRParser.Cv - 4)) | (1 << (XplorMRParser.Partition - 4)) | (1 << (XplorMRParser.DegEnergy - 4)))) != 0) or _la==XplorMRParser.For:
                self.state = 399
                self.coupling_statement()
                self.state = 404
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 405
            self.match(XplorMRParser.End)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Carbon_shift_restraintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Carbon(self):
            return self.getToken(XplorMRParser.Carbon, 0)

        def End(self):
            return self.getToken(XplorMRParser.End, 0)

        def carbon_shift_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Carbon_shift_statementContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Carbon_shift_statementContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_carbon_shift_restraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCarbon_shift_restraint" ):
                listener.enterCarbon_shift_restraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCarbon_shift_restraint" ):
                listener.exitCarbon_shift_restraint(self)




    def carbon_shift_restraint(self):

        localctx = XplorMRParser.Carbon_shift_restraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_carbon_shift_restraint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 407
            self.match(XplorMRParser.Carbon)
            self.state = 411
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << XplorMRParser.Assign) | (1 << XplorMRParser.Classification) | (1 << XplorMRParser.Nrestraints) | (1 << XplorMRParser.Potential) | (1 << XplorMRParser.Print) | (1 << XplorMRParser.Reset) | (1 << XplorMRParser.ForceConstant) | (1 << XplorMRParser.Expectation) | (1 << XplorMRParser.Zero))) != 0) or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & ((1 << (XplorMRParser.PhiStep - 66)) | (1 << (XplorMRParser.PsiStep - 66)) | (1 << (XplorMRParser.Rcoil - 66)))) != 0):
                self.state = 408
                self.carbon_shift_statement()
                self.state = 413
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 414
            self.match(XplorMRParser.End)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Proton_shift_restraintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Proton(self):
            return self.getToken(XplorMRParser.Proton, 0)

        def End(self):
            return self.getToken(XplorMRParser.End, 0)

        def proton_shift_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Proton_shift_statementContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Proton_shift_statementContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_proton_shift_restraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProton_shift_restraint" ):
                listener.enterProton_shift_restraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProton_shift_restraint" ):
                listener.exitProton_shift_restraint(self)




    def proton_shift_restraint(self):

        localctx = XplorMRParser.Proton_shift_restraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_proton_shift_restraint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 416
            self.match(XplorMRParser.Proton)
            self.state = 420
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << XplorMRParser.Classification) | (1 << XplorMRParser.Potential) | (1 << XplorMRParser.Print) | (1 << XplorMRParser.Reset) | (1 << XplorMRParser.ForceConstant) | (1 << XplorMRParser.Anisotropy))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (XplorMRParser.DegEnergy - 64)) | (1 << (XplorMRParser.Carbon - 64)) | (1 << (XplorMRParser.Rcoil - 64)) | (1 << (XplorMRParser.Observed - 64)) | (1 << (XplorMRParser.Amides - 64)) | (1 << (XplorMRParser.Nitrogens - 64)) | (1 << (XplorMRParser.Oxygens - 64)) | (1 << (XplorMRParser.RingAtoms - 64)) | (1 << (XplorMRParser.AlphasAndAmides - 64)) | (1 << (XplorMRParser.Error - 64)))) != 0):
                self.state = 417
                self.proton_shift_statement()
                self.state = 422
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 423
            self.match(XplorMRParser.End)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Dihedral_angle_db_restraintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Ramachandran(self):
            return self.getToken(XplorMRParser.Ramachandran, 0)

        def End(self):
            return self.getToken(XplorMRParser.End, 0)

        def ramachandran_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Ramachandran_statementContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Ramachandran_statementContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_dihedral_angle_db_restraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDihedral_angle_db_restraint" ):
                listener.enterDihedral_angle_db_restraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDihedral_angle_db_restraint" ):
                listener.exitDihedral_angle_db_restraint(self)




    def dihedral_angle_db_restraint(self):

        localctx = XplorMRParser.Dihedral_angle_db_restraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_dihedral_angle_db_restraint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 425
            self.match(XplorMRParser.Ramachandran)
            self.state = 429
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << XplorMRParser.Assign) | (1 << XplorMRParser.Classification) | (1 << XplorMRParser.Nrestraints) | (1 << XplorMRParser.Print) | (1 << XplorMRParser.Reset) | (1 << XplorMRParser.Scale) | (1 << XplorMRParser.Cutoff) | (1 << XplorMRParser.ForceConstant) | (1 << XplorMRParser.Size) | (1 << XplorMRParser.Zero))) != 0) or ((((_la - 78)) & ~0x3f) == 0 and ((1 << (_la - 78)) & ((1 << (XplorMRParser.Gaussian - 78)) | (1 << (XplorMRParser.Phase - 78)) | (1 << (XplorMRParser.Quartic - 78)) | (1 << (XplorMRParser.Shape - 78)) | (1 << (XplorMRParser.Sort - 78)))) != 0):
                self.state = 426
                self.ramachandran_statement()
                self.state = 431
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 432
            self.match(XplorMRParser.End)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Radius_of_gyration_restraintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Collapse(self):
            return self.getToken(XplorMRParser.Collapse, 0)

        def End(self):
            return self.getToken(XplorMRParser.End, 0)

        def collapse_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Collapse_statementContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Collapse_statementContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_radius_of_gyration_restraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRadius_of_gyration_restraint" ):
                listener.enterRadius_of_gyration_restraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRadius_of_gyration_restraint" ):
                listener.exitRadius_of_gyration_restraint(self)




    def radius_of_gyration_restraint(self):

        localctx = XplorMRParser.Radius_of_gyration_restraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_radius_of_gyration_restraint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 434
            self.match(XplorMRParser.Collapse)
            self.state = 438
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << XplorMRParser.Assign) | (1 << XplorMRParser.Print) | (1 << XplorMRParser.Reset) | (1 << XplorMRParser.Scale))) != 0) or _la==XplorMRParser.For:
                self.state = 435
                self.collapse_statement()
                self.state = 440
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 441
            self.match(XplorMRParser.End)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Diffusion_anisotropy_restraintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Danisotropy(self):
            return self.getToken(XplorMRParser.Danisotropy, 0)

        def End(self):
            return self.getToken(XplorMRParser.End, 0)

        def diffusion_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Diffusion_statementContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Diffusion_statementContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_diffusion_anisotropy_restraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDiffusion_anisotropy_restraint" ):
                listener.enterDiffusion_anisotropy_restraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDiffusion_anisotropy_restraint" ):
                listener.exitDiffusion_anisotropy_restraint(self)




    def diffusion_anisotropy_restraint(self):

        localctx = XplorMRParser.Diffusion_anisotropy_restraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_diffusion_anisotropy_restraint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 443
            self.match(XplorMRParser.Danisotropy)
            self.state = 447
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << XplorMRParser.Assign) | (1 << XplorMRParser.Classification) | (1 << XplorMRParser.Nrestraints) | (1 << XplorMRParser.Potential) | (1 << XplorMRParser.Print) | (1 << XplorMRParser.Reset) | (1 << XplorMRParser.Coefficients) | (1 << XplorMRParser.ForceConstant) | (1 << XplorMRParser.Type))) != 0):
                self.state = 444
                self.diffusion_statement()
                self.state = 449
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 450
            self.match(XplorMRParser.End)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Orientation_db_restraintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Orient(self):
            return self.getToken(XplorMRParser.Orient, 0)

        def End(self):
            return self.getToken(XplorMRParser.End, 0)

        def orientation_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Orientation_statementContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Orientation_statementContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_orientation_db_restraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOrientation_db_restraint" ):
                listener.enterOrientation_db_restraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOrientation_db_restraint" ):
                listener.exitOrientation_db_restraint(self)




    def orientation_db_restraint(self):

        localctx = XplorMRParser.Orientation_db_restraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_orientation_db_restraint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 452
            self.match(XplorMRParser.Orient)
            self.state = 456
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << XplorMRParser.Assign) | (1 << XplorMRParser.Classification) | (1 << XplorMRParser.Nrestraints) | (1 << XplorMRParser.Print) | (1 << XplorMRParser.Reset) | (1 << XplorMRParser.Cutoff) | (1 << XplorMRParser.ForceConstant) | (1 << XplorMRParser.Size) | (1 << XplorMRParser.Zero))) != 0) or ((((_la - 78)) & ~0x3f) == 0 and ((1 << (_la - 78)) & ((1 << (XplorMRParser.Gaussian - 78)) | (1 << (XplorMRParser.Quartic - 78)) | (1 << (XplorMRParser.Height - 78)) | (1 << (XplorMRParser.MaxGaussians - 78)) | (1 << (XplorMRParser.NewGaussian - 78)))) != 0) or _la==XplorMRParser.Residue:
                self.state = 453
                self.orientation_statement()
                self.state = 458
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 459
            self.match(XplorMRParser.End)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Csa_restraintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Dcsa(self):
            return self.getToken(XplorMRParser.Dcsa, 0)

        def End(self):
            return self.getToken(XplorMRParser.End, 0)

        def csa_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Csa_statementContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Csa_statementContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_csa_restraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCsa_restraint" ):
                listener.enterCsa_restraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCsa_restraint" ):
                listener.exitCsa_restraint(self)




    def csa_restraint(self):

        localctx = XplorMRParser.Csa_restraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_csa_restraint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 461
            self.match(XplorMRParser.Dcsa)
            self.state = 465
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << XplorMRParser.Assign) | (1 << XplorMRParser.Classification) | (1 << XplorMRParser.Nrestraints) | (1 << XplorMRParser.Potential) | (1 << XplorMRParser.Print) | (1 << XplorMRParser.Reset) | (1 << XplorMRParser.Scale) | (1 << XplorMRParser.Coefficients) | (1 << XplorMRParser.ForceConstant) | (1 << XplorMRParser.Type))) != 0) or _la==XplorMRParser.Sigma or _la==XplorMRParser.For:
                self.state = 462
                self.csa_statement()
                self.state = 467
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 468
            self.match(XplorMRParser.End)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pcsa_restraintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Pcsa(self):
            return self.getToken(XplorMRParser.Pcsa, 0)

        def End(self):
            return self.getToken(XplorMRParser.End, 0)

        def pcsa_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Pcsa_statementContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Pcsa_statementContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_pcsa_restraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPcsa_restraint" ):
                listener.enterPcsa_restraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPcsa_restraint" ):
                listener.exitPcsa_restraint(self)




    def pcsa_restraint(self):

        localctx = XplorMRParser.Pcsa_restraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_pcsa_restraint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 470
            self.match(XplorMRParser.Pcsa)
            self.state = 474
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << XplorMRParser.Assign) | (1 << XplorMRParser.Classification) | (1 << XplorMRParser.Nrestraints) | (1 << XplorMRParser.Potential) | (1 << XplorMRParser.Print) | (1 << XplorMRParser.Reset) | (1 << XplorMRParser.Scale) | (1 << XplorMRParser.Coefficients) | (1 << XplorMRParser.ForceConstant))) != 0) or _la==XplorMRParser.Sigma:
                self.state = 471
                self.pcsa_statement()
                self.state = 476
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 477
            self.match(XplorMRParser.End)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class One_bond_coupling_restraintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OneBond(self):
            return self.getToken(XplorMRParser.OneBond, 0)

        def End(self):
            return self.getToken(XplorMRParser.End, 0)

        def one_bond_coupling_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.One_bond_coupling_statementContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.One_bond_coupling_statementContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_one_bond_coupling_restraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOne_bond_coupling_restraint" ):
                listener.enterOne_bond_coupling_restraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOne_bond_coupling_restraint" ):
                listener.exitOne_bond_coupling_restraint(self)




    def one_bond_coupling_restraint(self):

        localctx = XplorMRParser.One_bond_coupling_restraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_one_bond_coupling_restraint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 479
            self.match(XplorMRParser.OneBond)
            self.state = 483
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << XplorMRParser.Assign) | (1 << XplorMRParser.Classification) | (1 << XplorMRParser.Nrestraints) | (1 << XplorMRParser.Potential) | (1 << XplorMRParser.Print) | (1 << XplorMRParser.Reset) | (1 << XplorMRParser.Coefficients) | (1 << XplorMRParser.ForceConstant))) != 0):
                self.state = 480
                self.one_bond_coupling_statement()
                self.state = 485
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 486
            self.match(XplorMRParser.End)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Angle_db_restraintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AngleDb(self):
            return self.getToken(XplorMRParser.AngleDb, 0)

        def End(self):
            return self.getToken(XplorMRParser.End, 0)

        def angle_db_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Angle_db_statementContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Angle_db_statementContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_angle_db_restraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAngle_db_restraint" ):
                listener.enterAngle_db_restraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAngle_db_restraint" ):
                listener.exitAngle_db_restraint(self)




    def angle_db_restraint(self):

        localctx = XplorMRParser.Angle_db_restraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_angle_db_restraint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 488
            self.match(XplorMRParser.AngleDb)
            self.state = 492
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << XplorMRParser.Assign) | (1 << XplorMRParser.Classification) | (1 << XplorMRParser.Nrestraints) | (1 << XplorMRParser.Potential) | (1 << XplorMRParser.Print) | (1 << XplorMRParser.Reset) | (1 << XplorMRParser.ForceConstant) | (1 << XplorMRParser.Expectation) | (1 << XplorMRParser.Size) | (1 << XplorMRParser.Zero))) != 0) or _la==XplorMRParser.Error or _la==XplorMRParser.DerivFlag:
                self.state = 489
                self.angle_db_statement()
                self.state = 494
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 495
            self.match(XplorMRParser.End)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pre_restraintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Paramagnetic(self):
            return self.getToken(XplorMRParser.Paramagnetic, 0)

        def End(self):
            return self.getToken(XplorMRParser.End, 0)

        def pre_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Pre_statementContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Pre_statementContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_pre_restraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPre_restraint" ):
                listener.enterPre_restraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPre_restraint" ):
                listener.exitPre_restraint(self)




    def pre_restraint(self):

        localctx = XplorMRParser.Pre_restraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_pre_restraint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 497
            self.match(XplorMRParser.Paramagnetic)
            self.state = 501
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << XplorMRParser.Assign) | (1 << XplorMRParser.Classification) | (1 << XplorMRParser.Nrestraints) | (1 << XplorMRParser.Potential) | (1 << XplorMRParser.Print) | (1 << XplorMRParser.Reset) | (1 << XplorMRParser.ForceConstant))) != 0) or ((((_la - 98)) & ~0x3f) == 0 and ((1 << (_la - 98)) & ((1 << (XplorMRParser.Kconst - 98)) | (1 << (XplorMRParser.Omega - 98)) | (1 << (XplorMRParser.Tauc - 98)) | (1 << (XplorMRParser.Debug - 98)))) != 0) or _la==XplorMRParser.For:
                self.state = 498
                self.pre_statement()
                self.state = 503
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 504
            self.match(XplorMRParser.End)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pcs_restraintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Xpcs(self):
            return self.getToken(XplorMRParser.Xpcs, 0)

        def End(self):
            return self.getToken(XplorMRParser.End, 0)

        def pcs_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Pcs_statementContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Pcs_statementContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_pcs_restraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPcs_restraint" ):
                listener.enterPcs_restraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPcs_restraint" ):
                listener.exitPcs_restraint(self)




    def pcs_restraint(self):

        localctx = XplorMRParser.Pcs_restraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_pcs_restraint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 506
            self.match(XplorMRParser.Xpcs)
            self.state = 510
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << XplorMRParser.Assign) | (1 << XplorMRParser.Classification) | (1 << XplorMRParser.Nrestraints) | (1 << XplorMRParser.Print) | (1 << XplorMRParser.Reset) | (1 << XplorMRParser.Coefficients) | (1 << XplorMRParser.ForceConstant))) != 0) or ((((_la - 103)) & ~0x3f) == 0 and ((1 << (_la - 103)) & ((1 << (XplorMRParser.Tolerance - 103)) | (1 << (XplorMRParser.Save - 103)) | (1 << (XplorMRParser.Fmed - 103)) | (1 << (XplorMRParser.ErrOn - 103)) | (1 << (XplorMRParser.ErrOff - 103)) | (1 << (XplorMRParser.Fon - 103)) | (1 << (XplorMRParser.Foff - 103)) | (1 << (XplorMRParser.Son - 103)) | (1 << (XplorMRParser.Soff - 103)) | (1 << (XplorMRParser.Frun - 103)))) != 0) or _la==XplorMRParser.For:
                self.state = 507
                self.pcs_statement()
                self.state = 512
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 513
            self.match(XplorMRParser.End)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Prdc_restraintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Xrdcoupling(self):
            return self.getToken(XplorMRParser.Xrdcoupling, 0)

        def End(self):
            return self.getToken(XplorMRParser.End, 0)

        def prdc_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Prdc_statementContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Prdc_statementContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_prdc_restraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrdc_restraint" ):
                listener.enterPrdc_restraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrdc_restraint" ):
                listener.exitPrdc_restraint(self)




    def prdc_restraint(self):

        localctx = XplorMRParser.Prdc_restraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_prdc_restraint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 515
            self.match(XplorMRParser.Xrdcoupling)
            self.state = 519
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << XplorMRParser.Assign) | (1 << XplorMRParser.Classification) | (1 << XplorMRParser.Nrestraints) | (1 << XplorMRParser.Print) | (1 << XplorMRParser.Reset) | (1 << XplorMRParser.Coefficients) | (1 << XplorMRParser.ForceConstant))) != 0) or ((((_la - 103)) & ~0x3f) == 0 and ((1 << (_la - 103)) & ((1 << (XplorMRParser.Tolerance - 103)) | (1 << (XplorMRParser.Save - 103)) | (1 << (XplorMRParser.Fmed - 103)) | (1 << (XplorMRParser.ErrOn - 103)) | (1 << (XplorMRParser.ErrOff - 103)) | (1 << (XplorMRParser.Fon - 103)) | (1 << (XplorMRParser.Foff - 103)) | (1 << (XplorMRParser.Son - 103)) | (1 << (XplorMRParser.Soff - 103)) | (1 << (XplorMRParser.Frun - 103)))) != 0):
                self.state = 516
                self.prdc_statement()
                self.state = 521
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 522
            self.match(XplorMRParser.End)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Porientation_restraintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Xangle(self):
            return self.getToken(XplorMRParser.Xangle, 0)

        def End(self):
            return self.getToken(XplorMRParser.End, 0)

        def porientation_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Porientation_statementContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Porientation_statementContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_porientation_restraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPorientation_restraint" ):
                listener.enterPorientation_restraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPorientation_restraint" ):
                listener.exitPorientation_restraint(self)




    def porientation_restraint(self):

        localctx = XplorMRParser.Porientation_restraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_porientation_restraint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 524
            self.match(XplorMRParser.Xangle)
            self.state = 528
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << XplorMRParser.Assign) | (1 << XplorMRParser.Classification) | (1 << XplorMRParser.Nrestraints) | (1 << XplorMRParser.Print) | (1 << XplorMRParser.Reset) | (1 << XplorMRParser.ForceConstant))) != 0):
                self.state = 525
                self.porientation_statement()
                self.state = 530
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 531
            self.match(XplorMRParser.End)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pccr_restraintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Xccr(self):
            return self.getToken(XplorMRParser.Xccr, 0)

        def End(self):
            return self.getToken(XplorMRParser.End, 0)

        def pccr_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Pccr_statementContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Pccr_statementContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_pccr_restraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPccr_restraint" ):
                listener.enterPccr_restraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPccr_restraint" ):
                listener.exitPccr_restraint(self)




    def pccr_restraint(self):

        localctx = XplorMRParser.Pccr_restraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_pccr_restraint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 533
            self.match(XplorMRParser.Xccr)
            self.state = 537
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << XplorMRParser.Assign) | (1 << XplorMRParser.Classification) | (1 << XplorMRParser.Nrestraints) | (1 << XplorMRParser.Print) | (1 << XplorMRParser.Reset) | (1 << XplorMRParser.Coefficients) | (1 << XplorMRParser.ForceConstant))) != 0) or _la==XplorMRParser.Frun or _la==XplorMRParser.Weip:
                self.state = 534
                self.pccr_statement()
                self.state = 539
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 540
            self.match(XplorMRParser.End)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Hbond_restraintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Hbda(self):
            return self.getToken(XplorMRParser.Hbda, 0)

        def End(self):
            return self.getToken(XplorMRParser.End, 0)

        def hbond_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Hbond_statementContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Hbond_statementContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_hbond_restraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHbond_restraint" ):
                listener.enterHbond_restraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHbond_restraint" ):
                listener.exitHbond_restraint(self)




    def hbond_restraint(self):

        localctx = XplorMRParser.Hbond_restraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_hbond_restraint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 542
            self.match(XplorMRParser.Hbda)
            self.state = 546
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << XplorMRParser.Assign) | (1 << XplorMRParser.Classification) | (1 << XplorMRParser.Nrestraints) | (1 << XplorMRParser.Print) | (1 << XplorMRParser.Reset) | (1 << XplorMRParser.ForceConstant))) != 0) or _la==XplorMRParser.For:
                self.state = 543
                self.hbond_statement()
                self.state = 548
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 549
            self.match(XplorMRParser.End)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Hbond_db_restraintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Hbdb(self):
            return self.getToken(XplorMRParser.Hbdb, 0)

        def End(self):
            return self.getToken(XplorMRParser.End, 0)

        def hbond_db_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Hbond_db_statementContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Hbond_db_statementContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_hbond_db_restraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHbond_db_restraint" ):
                listener.enterHbond_db_restraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHbond_db_restraint" ):
                listener.exitHbond_db_restraint(self)




    def hbond_db_restraint(self):

        localctx = XplorMRParser.Hbond_db_restraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_hbond_db_restraint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 551
            self.match(XplorMRParser.Hbdb)
            self.state = 555
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==XplorMRParser.Assign or ((((_la - 117)) & ~0x3f) == 0 and ((1 << (_la - 117)) & ((1 << (XplorMRParser.Kdir - 117)) | (1 << (XplorMRParser.Klin - 117)) | (1 << (XplorMRParser.Nseg - 117)) | (1 << (XplorMRParser.Nmin - 117)) | (1 << (XplorMRParser.Nmax - 117)) | (1 << (XplorMRParser.Segm - 117)) | (1 << (XplorMRParser.Ohcut - 117)) | (1 << (XplorMRParser.Coh1cut - 117)) | (1 << (XplorMRParser.Coh2cut - 117)) | (1 << (XplorMRParser.Ohncut - 117)) | (1 << (XplorMRParser.Updfrq - 117)) | (1 << (XplorMRParser.Prnfrq - 117)) | (1 << (XplorMRParser.Freemode - 117)) | (1 << (XplorMRParser.For - 117)))) != 0):
                self.state = 552
                self.hbond_db_statement()
                self.state = 557
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 558
            self.match(XplorMRParser.End)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Noe_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def noe_assign(self):
            return self.getTypedRuleContext(XplorMRParser.Noe_assignContext,0)


        def noe_assign_loop(self):
            return self.getTypedRuleContext(XplorMRParser.Noe_assign_loopContext,0)


        def Asymptote(self):
            return self.getToken(XplorMRParser.Asymptote, 0)

        def Simple_name(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Simple_name)
            else:
                return self.getToken(XplorMRParser.Simple_name, i)

        def number_s(self):
            return self.getTypedRuleContext(XplorMRParser.Number_sContext,0)


        def Average(self):
            return self.getToken(XplorMRParser.Average, 0)

        def Simple_name_A(self):
            return self.getToken(XplorMRParser.Simple_name_A, 0)

        def Averaging_methods(self):
            return self.getToken(XplorMRParser.Averaging_methods, 0)

        def Bhig(self):
            return self.getToken(XplorMRParser.Bhig, 0)

        def Ceiling(self):
            return self.getToken(XplorMRParser.Ceiling, 0)

        def Equ_op(self):
            return self.getToken(XplorMRParser.Equ_op, 0)

        def Classification(self):
            return self.getToken(XplorMRParser.Classification, 0)

        def CountViol(self):
            return self.getToken(XplorMRParser.CountViol, 0)

        def Distribute(self):
            return self.getToken(XplorMRParser.Distribute, 0)

        def Monomers(self):
            return self.getToken(XplorMRParser.Monomers, 0)

        def Integer(self):
            return self.getToken(XplorMRParser.Integer, 0)

        def Ncount(self):
            return self.getToken(XplorMRParser.Ncount, 0)

        def Nrestraints(self):
            return self.getToken(XplorMRParser.Nrestraints, 0)

        def Potential(self):
            return self.getToken(XplorMRParser.Potential, 0)

        def Simple_name_P(self):
            return self.getToken(XplorMRParser.Simple_name_P, 0)

        def Potential_types(self):
            return self.getToken(XplorMRParser.Potential_types, 0)

        def Predict(self):
            return self.getToken(XplorMRParser.Predict, 0)

        def predict_statement(self):
            return self.getTypedRuleContext(XplorMRParser.Predict_statementContext,0)


        def End(self):
            return self.getToken(XplorMRParser.End, 0)

        def Print(self):
            return self.getToken(XplorMRParser.Print, 0)

        def Threshold(self):
            return self.getToken(XplorMRParser.Threshold, 0)

        def Reset(self):
            return self.getToken(XplorMRParser.Reset, 0)

        def Rswitch(self):
            return self.getToken(XplorMRParser.Rswitch, 0)

        def Scale(self):
            return self.getToken(XplorMRParser.Scale, 0)

        def SoExponent(self):
            return self.getToken(XplorMRParser.SoExponent, 0)

        def SqConstant(self):
            return self.getToken(XplorMRParser.SqConstant, 0)

        def SqExponent(self):
            return self.getToken(XplorMRParser.SqExponent, 0)

        def SqOffset(self):
            return self.getToken(XplorMRParser.SqOffset, 0)

        def Temperature(self):
            return self.getToken(XplorMRParser.Temperature, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_noe_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNoe_statement" ):
                listener.enterNoe_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNoe_statement" ):
                listener.exitNoe_statement(self)




    def noe_statement(self):

        localctx = XplorMRParser.Noe_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_noe_statement)
        self._la = 0 # Token type
        try:
            self.state = 635
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [XplorMRParser.Assign]:
                self.enterOuterAlt(localctx, 1)
                self.state = 560
                self.noe_assign()
                pass
            elif token in [XplorMRParser.For]:
                self.enterOuterAlt(localctx, 2)
                self.state = 561
                self.noe_assign_loop()
                pass
            elif token in [XplorMRParser.Asymptote]:
                self.enterOuterAlt(localctx, 3)
                self.state = 562
                self.match(XplorMRParser.Asymptote)
                self.state = 563
                self.match(XplorMRParser.Simple_name)
                self.state = 564
                self.number_s()
                pass
            elif token in [XplorMRParser.Average]:
                self.enterOuterAlt(localctx, 4)
                self.state = 565
                self.match(XplorMRParser.Average)
                self.state = 566
                self.match(XplorMRParser.Simple_name_A)
                self.state = 567
                self.match(XplorMRParser.Averaging_methods)
                pass
            elif token in [XplorMRParser.Bhig]:
                self.enterOuterAlt(localctx, 5)
                self.state = 568
                self.match(XplorMRParser.Bhig)
                self.state = 569
                self.match(XplorMRParser.Simple_name)
                self.state = 570
                self.number_s()
                pass
            elif token in [XplorMRParser.Ceiling]:
                self.enterOuterAlt(localctx, 6)
                self.state = 571
                self.match(XplorMRParser.Ceiling)
                self.state = 573
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 572
                    self.match(XplorMRParser.Equ_op)


                self.state = 575
                self.number_s()
                pass
            elif token in [XplorMRParser.Classification]:
                self.enterOuterAlt(localctx, 7)
                self.state = 576
                self.match(XplorMRParser.Classification)
                self.state = 578
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 577
                    self.match(XplorMRParser.Equ_op)


                self.state = 580
                self.match(XplorMRParser.Simple_name)
                pass
            elif token in [XplorMRParser.CountViol]:
                self.enterOuterAlt(localctx, 8)
                self.state = 581
                self.match(XplorMRParser.CountViol)
                self.state = 582
                self.match(XplorMRParser.Simple_name)
                pass
            elif token in [XplorMRParser.Distribute]:
                self.enterOuterAlt(localctx, 9)
                self.state = 583
                self.match(XplorMRParser.Distribute)
                self.state = 584
                self.match(XplorMRParser.Simple_name)
                self.state = 585
                self.match(XplorMRParser.Simple_name)
                self.state = 586
                self.number_s()
                pass
            elif token in [XplorMRParser.Monomers]:
                self.enterOuterAlt(localctx, 10)
                self.state = 587
                self.match(XplorMRParser.Monomers)
                self.state = 588
                self.match(XplorMRParser.Simple_name)
                self.state = 589
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.Ncount]:
                self.enterOuterAlt(localctx, 11)
                self.state = 590
                self.match(XplorMRParser.Ncount)
                self.state = 591
                self.match(XplorMRParser.Simple_name)
                self.state = 592
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.Nrestraints]:
                self.enterOuterAlt(localctx, 12)
                self.state = 593
                self.match(XplorMRParser.Nrestraints)
                self.state = 595
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 594
                    self.match(XplorMRParser.Equ_op)


                self.state = 597
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.Potential]:
                self.enterOuterAlt(localctx, 13)
                self.state = 598
                self.match(XplorMRParser.Potential)
                self.state = 599
                self.match(XplorMRParser.Simple_name_P)
                self.state = 600
                self.match(XplorMRParser.Potential_types)
                pass
            elif token in [XplorMRParser.Predict]:
                self.enterOuterAlt(localctx, 14)
                self.state = 601
                self.match(XplorMRParser.Predict)
                self.state = 602
                self.predict_statement()
                self.state = 603
                self.match(XplorMRParser.End)
                pass
            elif token in [XplorMRParser.Print]:
                self.enterOuterAlt(localctx, 15)
                self.state = 605
                self.match(XplorMRParser.Print)
                self.state = 606
                self.match(XplorMRParser.Threshold)
                self.state = 608
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 607
                    self.match(XplorMRParser.Equ_op)


                self.state = 610
                self.number_s()
                pass
            elif token in [XplorMRParser.Reset]:
                self.enterOuterAlt(localctx, 16)
                self.state = 611
                self.match(XplorMRParser.Reset)
                pass
            elif token in [XplorMRParser.Rswitch]:
                self.enterOuterAlt(localctx, 17)
                self.state = 612
                self.match(XplorMRParser.Rswitch)
                self.state = 613
                self.match(XplorMRParser.Simple_name)
                self.state = 614
                self.number_s()
                pass
            elif token in [XplorMRParser.Scale]:
                self.enterOuterAlt(localctx, 18)
                self.state = 615
                self.match(XplorMRParser.Scale)
                self.state = 616
                self.match(XplorMRParser.Simple_name)
                self.state = 617
                self.number_s()
                pass
            elif token in [XplorMRParser.SoExponent]:
                self.enterOuterAlt(localctx, 19)
                self.state = 618
                self.match(XplorMRParser.SoExponent)
                self.state = 619
                self.match(XplorMRParser.Simple_name)
                self.state = 620
                self.number_s()
                pass
            elif token in [XplorMRParser.SqConstant]:
                self.enterOuterAlt(localctx, 20)
                self.state = 621
                self.match(XplorMRParser.SqConstant)
                self.state = 622
                self.match(XplorMRParser.Simple_name)
                self.state = 623
                self.number_s()
                pass
            elif token in [XplorMRParser.SqExponent]:
                self.enterOuterAlt(localctx, 21)
                self.state = 624
                self.match(XplorMRParser.SqExponent)
                self.state = 625
                self.match(XplorMRParser.Simple_name)
                self.state = 626
                self.number_s()
                pass
            elif token in [XplorMRParser.SqOffset]:
                self.enterOuterAlt(localctx, 22)
                self.state = 627
                self.match(XplorMRParser.SqOffset)
                self.state = 628
                self.match(XplorMRParser.Simple_name)
                self.state = 629
                self.number_s()
                pass
            elif token in [XplorMRParser.Temperature]:
                self.enterOuterAlt(localctx, 23)
                self.state = 630
                self.match(XplorMRParser.Temperature)
                self.state = 632
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 631
                    self.match(XplorMRParser.Equ_op)


                self.state = 634
                self.number_s()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Noe_assignContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Assign(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Assign)
            else:
                return self.getToken(XplorMRParser.Assign, i)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.SelectionContext,i)


        def number(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.NumberContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.NumberContext,i)


        def noe_annotation(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Noe_annotationContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Noe_annotationContext,i)


        def Or_op(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Or_op)
            else:
                return self.getToken(XplorMRParser.Or_op, i)

        def getRuleIndex(self):
            return XplorMRParser.RULE_noe_assign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNoe_assign" ):
                listener.enterNoe_assign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNoe_assign" ):
                listener.exitNoe_assign(self)




    def noe_assign(self):

        localctx = XplorMRParser.Noe_assignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_noe_assign)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 637
            self.match(XplorMRParser.Assign)
            self.state = 638
            self.selection()
            self.state = 639
            self.selection()
            self.state = 640
            self.number()
            self.state = 642
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,40,self._ctx)
            if la_ == 1:
                self.state = 641
                self.number()


            self.state = 645
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 180)) & ~0x3f) == 0 and ((1 << (_la - 180)) & ((1 << (XplorMRParser.Integer - 180)) | (1 << (XplorMRParser.Real - 180)) | (1 << (XplorMRParser.Symbol_name - 180)))) != 0):
                self.state = 644
                self.number()


            self.state = 650
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << XplorMRParser.Peak) | (1 << XplorMRParser.Spectrum) | (1 << XplorMRParser.Volume) | (1 << XplorMRParser.Ppm1) | (1 << XplorMRParser.Ppm2) | (1 << XplorMRParser.Cv) | (1 << XplorMRParser.Weight))) != 0):
                self.state = 647
                self.noe_annotation()
                self.state = 652
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 670
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==XplorMRParser.Or_op:
                self.state = 653
                self.match(XplorMRParser.Or_op)
                self.state = 655
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Assign:
                    self.state = 654
                    self.match(XplorMRParser.Assign)


                self.state = 657
                self.selection()
                self.state = 658
                self.selection()
                self.state = 660
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,44,self._ctx)
                if la_ == 1:
                    self.state = 659
                    self.number()


                self.state = 663
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,45,self._ctx)
                if la_ == 1:
                    self.state = 662
                    self.number()


                self.state = 666
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 180)) & ~0x3f) == 0 and ((1 << (_la - 180)) & ((1 << (XplorMRParser.Integer - 180)) | (1 << (XplorMRParser.Real - 180)) | (1 << (XplorMRParser.Symbol_name - 180)))) != 0):
                    self.state = 665
                    self.number()


                self.state = 672
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Predict_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Cutoff(self):
            return self.getToken(XplorMRParser.Cutoff, 0)

        def number_s(self):
            return self.getTypedRuleContext(XplorMRParser.Number_sContext,0)


        def Equ_op(self):
            return self.getToken(XplorMRParser.Equ_op, 0)

        def Cuton(self):
            return self.getToken(XplorMRParser.Cuton, 0)

        def From(self):
            return self.getToken(XplorMRParser.From, 0)

        def selection(self):
            return self.getTypedRuleContext(XplorMRParser.SelectionContext,0)


        def To(self):
            return self.getToken(XplorMRParser.To, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_predict_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPredict_statement" ):
                listener.enterPredict_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPredict_statement" ):
                listener.exitPredict_statement(self)




    def predict_statement(self):

        localctx = XplorMRParser.Predict_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_predict_statement)
        self._la = 0 # Token type
        try:
            self.state = 687
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [XplorMRParser.Cutoff]:
                self.enterOuterAlt(localctx, 1)
                self.state = 673
                self.match(XplorMRParser.Cutoff)
                self.state = 675
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 674
                    self.match(XplorMRParser.Equ_op)


                self.state = 677
                self.number_s()
                pass
            elif token in [XplorMRParser.Cuton]:
                self.enterOuterAlt(localctx, 2)
                self.state = 678
                self.match(XplorMRParser.Cuton)
                self.state = 680
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 679
                    self.match(XplorMRParser.Equ_op)


                self.state = 682
                self.number_s()
                pass
            elif token in [XplorMRParser.From]:
                self.enterOuterAlt(localctx, 3)
                self.state = 683
                self.match(XplorMRParser.From)
                self.state = 684
                self.selection()
                pass
            elif token in [XplorMRParser.To]:
                self.enterOuterAlt(localctx, 4)
                self.state = 685
                self.match(XplorMRParser.To)
                self.state = 686
                self.selection()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Noe_annotationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Peak(self):
            return self.getToken(XplorMRParser.Peak, 0)

        def number_a(self):
            return self.getTypedRuleContext(XplorMRParser.Number_aContext,0)


        def Equ_op(self):
            return self.getToken(XplorMRParser.Equ_op, 0)

        def Spectrum(self):
            return self.getToken(XplorMRParser.Spectrum, 0)

        def Weight(self):
            return self.getToken(XplorMRParser.Weight, 0)

        def Volume(self):
            return self.getToken(XplorMRParser.Volume, 0)

        def Ppm1(self):
            return self.getToken(XplorMRParser.Ppm1, 0)

        def Ppm2(self):
            return self.getToken(XplorMRParser.Ppm2, 0)

        def Cv(self):
            return self.getToken(XplorMRParser.Cv, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_noe_annotation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNoe_annotation" ):
                listener.enterNoe_annotation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNoe_annotation" ):
                listener.exitNoe_annotation(self)




    def noe_annotation(self):

        localctx = XplorMRParser.Noe_annotationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_noe_annotation)
        self._la = 0 # Token type
        try:
            self.state = 724
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [XplorMRParser.Peak]:
                self.enterOuterAlt(localctx, 1)
                self.state = 689
                self.match(XplorMRParser.Peak)
                self.state = 691
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 690
                    self.match(XplorMRParser.Equ_op)


                self.state = 693
                self.number_a()
                pass
            elif token in [XplorMRParser.Spectrum]:
                self.enterOuterAlt(localctx, 2)
                self.state = 694
                self.match(XplorMRParser.Spectrum)
                self.state = 696
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 695
                    self.match(XplorMRParser.Equ_op)


                self.state = 698
                self.number_a()
                pass
            elif token in [XplorMRParser.Weight]:
                self.enterOuterAlt(localctx, 3)
                self.state = 699
                self.match(XplorMRParser.Weight)
                self.state = 701
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 700
                    self.match(XplorMRParser.Equ_op)


                self.state = 703
                self.number_a()
                pass
            elif token in [XplorMRParser.Volume]:
                self.enterOuterAlt(localctx, 4)
                self.state = 704
                self.match(XplorMRParser.Volume)
                self.state = 706
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 705
                    self.match(XplorMRParser.Equ_op)


                self.state = 708
                self.number_a()
                pass
            elif token in [XplorMRParser.Ppm1]:
                self.enterOuterAlt(localctx, 5)
                self.state = 709
                self.match(XplorMRParser.Ppm1)
                self.state = 711
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 710
                    self.match(XplorMRParser.Equ_op)


                self.state = 713
                self.number_a()
                pass
            elif token in [XplorMRParser.Ppm2]:
                self.enterOuterAlt(localctx, 6)
                self.state = 714
                self.match(XplorMRParser.Ppm2)
                self.state = 716
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 715
                    self.match(XplorMRParser.Equ_op)


                self.state = 718
                self.number_a()
                pass
            elif token in [XplorMRParser.Cv]:
                self.enterOuterAlt(localctx, 7)
                self.state = 719
                self.match(XplorMRParser.Cv)
                self.state = 721
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 720
                    self.match(XplorMRParser.Equ_op)


                self.state = 723
                self.number_a()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Dihedral_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def vector_statement(self):
            return self.getTypedRuleContext(XplorMRParser.Vector_statementContext,0)


        def dihedral_assign(self):
            return self.getTypedRuleContext(XplorMRParser.Dihedral_assignContext,0)


        def dihedral_assign_loop(self):
            return self.getTypedRuleContext(XplorMRParser.Dihedral_assign_loopContext,0)


        def Nassign(self):
            return self.getToken(XplorMRParser.Nassign, 0)

        def Integer(self):
            return self.getToken(XplorMRParser.Integer, 0)

        def Equ_op(self):
            return self.getToken(XplorMRParser.Equ_op, 0)

        def Reset(self):
            return self.getToken(XplorMRParser.Reset, 0)

        def Scale(self):
            return self.getToken(XplorMRParser.Scale, 0)

        def number_s(self):
            return self.getTypedRuleContext(XplorMRParser.Number_sContext,0)


        def getRuleIndex(self):
            return XplorMRParser.RULE_dihedral_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDihedral_statement" ):
                listener.enterDihedral_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDihedral_statement" ):
                listener.exitDihedral_statement(self)




    def dihedral_statement(self):

        localctx = XplorMRParser.Dihedral_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_dihedral_statement)
        self._la = 0 # Token type
        try:
            self.state = 740
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [XplorMRParser.Vector]:
                self.enterOuterAlt(localctx, 1)
                self.state = 726
                self.vector_statement()
                pass
            elif token in [XplorMRParser.Assign]:
                self.enterOuterAlt(localctx, 2)
                self.state = 727
                self.dihedral_assign()
                pass
            elif token in [XplorMRParser.For]:
                self.enterOuterAlt(localctx, 3)
                self.state = 728
                self.dihedral_assign_loop()
                pass
            elif token in [XplorMRParser.Nassign]:
                self.enterOuterAlt(localctx, 4)
                self.state = 729
                self.match(XplorMRParser.Nassign)
                self.state = 731
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 730
                    self.match(XplorMRParser.Equ_op)


                self.state = 733
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.Reset]:
                self.enterOuterAlt(localctx, 5)
                self.state = 734
                self.match(XplorMRParser.Reset)
                pass
            elif token in [XplorMRParser.Scale]:
                self.enterOuterAlt(localctx, 6)
                self.state = 735
                self.match(XplorMRParser.Scale)
                self.state = 737
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 736
                    self.match(XplorMRParser.Equ_op)


                self.state = 739
                self.number_s()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Dihedral_assignContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Assign(self):
            return self.getToken(XplorMRParser.Assign, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.SelectionContext,i)


        def number(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.NumberContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.NumberContext,i)


        def Integer(self):
            return self.getToken(XplorMRParser.Integer, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_dihedral_assign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDihedral_assign" ):
                listener.enterDihedral_assign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDihedral_assign" ):
                listener.exitDihedral_assign(self)




    def dihedral_assign(self):

        localctx = XplorMRParser.Dihedral_assignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_dihedral_assign)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 742
            self.match(XplorMRParser.Assign)
            self.state = 743
            self.selection()
            self.state = 744
            self.selection()
            self.state = 745
            self.selection()
            self.state = 746
            self.selection()
            self.state = 747
            self.number()
            self.state = 748
            self.number()
            self.state = 749
            self.number()
            self.state = 750
            self.match(XplorMRParser.Integer)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Sani_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def sani_assign(self):
            return self.getTypedRuleContext(XplorMRParser.Sani_assignContext,0)


        def sani_assign_loop(self):
            return self.getTypedRuleContext(XplorMRParser.Sani_assign_loopContext,0)


        def Classification(self):
            return self.getToken(XplorMRParser.Classification, 0)

        def Simple_name(self):
            return self.getToken(XplorMRParser.Simple_name, 0)

        def Equ_op(self):
            return self.getToken(XplorMRParser.Equ_op, 0)

        def Coefficients(self):
            return self.getToken(XplorMRParser.Coefficients, 0)

        def number_s(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Number_sContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Number_sContext,i)


        def ForceConstant(self):
            return self.getToken(XplorMRParser.ForceConstant, 0)

        def Nrestraints(self):
            return self.getToken(XplorMRParser.Nrestraints, 0)

        def Integer(self):
            return self.getToken(XplorMRParser.Integer, 0)

        def Potential(self):
            return self.getToken(XplorMRParser.Potential, 0)

        def Potential_types(self):
            return self.getToken(XplorMRParser.Potential_types, 0)

        def Print(self):
            return self.getToken(XplorMRParser.Print, 0)

        def Threshold(self):
            return self.getToken(XplorMRParser.Threshold, 0)

        def Reset(self):
            return self.getToken(XplorMRParser.Reset, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_sani_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSani_statement" ):
                listener.enterSani_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSani_statement" ):
                listener.exitSani_statement(self)




    def sani_statement(self):

        localctx = XplorMRParser.Sani_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_sani_statement)
        self._la = 0 # Token type
        try:
            self.state = 780
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [XplorMRParser.Assign]:
                self.enterOuterAlt(localctx, 1)
                self.state = 752
                self.sani_assign()
                pass
            elif token in [XplorMRParser.For]:
                self.enterOuterAlt(localctx, 2)
                self.state = 753
                self.sani_assign_loop()
                pass
            elif token in [XplorMRParser.Classification]:
                self.enterOuterAlt(localctx, 3)
                self.state = 754
                self.match(XplorMRParser.Classification)
                self.state = 756
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 755
                    self.match(XplorMRParser.Equ_op)


                self.state = 758
                self.match(XplorMRParser.Simple_name)
                pass
            elif token in [XplorMRParser.Coefficients]:
                self.enterOuterAlt(localctx, 4)
                self.state = 759
                self.match(XplorMRParser.Coefficients)
                self.state = 760
                self.number_s()
                self.state = 761
                self.number_s()
                self.state = 762
                self.number_s()
                pass
            elif token in [XplorMRParser.ForceConstant]:
                self.enterOuterAlt(localctx, 5)
                self.state = 764
                self.match(XplorMRParser.ForceConstant)
                self.state = 766
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 765
                    self.match(XplorMRParser.Equ_op)


                self.state = 768
                self.number_s()
                pass
            elif token in [XplorMRParser.Nrestraints]:
                self.enterOuterAlt(localctx, 6)
                self.state = 769
                self.match(XplorMRParser.Nrestraints)
                self.state = 771
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 770
                    self.match(XplorMRParser.Equ_op)


                self.state = 773
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.Potential]:
                self.enterOuterAlt(localctx, 7)
                self.state = 774
                self.match(XplorMRParser.Potential)
                self.state = 775
                self.match(XplorMRParser.Potential_types)
                pass
            elif token in [XplorMRParser.Print]:
                self.enterOuterAlt(localctx, 8)
                self.state = 776
                self.match(XplorMRParser.Print)
                self.state = 777
                self.match(XplorMRParser.Threshold)
                self.state = 778
                self.number_s()
                pass
            elif token in [XplorMRParser.Reset]:
                self.enterOuterAlt(localctx, 9)
                self.state = 779
                self.match(XplorMRParser.Reset)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Sani_assignContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Assign(self):
            return self.getToken(XplorMRParser.Assign, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.SelectionContext,i)


        def number(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.NumberContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.NumberContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_sani_assign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSani_assign" ):
                listener.enterSani_assign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSani_assign" ):
                listener.exitSani_assign(self)




    def sani_assign(self):

        localctx = XplorMRParser.Sani_assignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_sani_assign)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 782
            self.match(XplorMRParser.Assign)
            self.state = 783
            self.selection()
            self.state = 784
            self.selection()
            self.state = 785
            self.selection()
            self.state = 786
            self.selection()
            self.state = 787
            self.selection()
            self.state = 788
            self.selection()
            self.state = 789
            self.number()
            self.state = 791
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,66,self._ctx)
            if la_ == 1:
                self.state = 790
                self.number()


            self.state = 794
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 180)) & ~0x3f) == 0 and ((1 << (_la - 180)) & ((1 << (XplorMRParser.Integer - 180)) | (1 << (XplorMRParser.Real - 180)) | (1 << (XplorMRParser.Symbol_name - 180)))) != 0):
                self.state = 793
                self.number()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Xdip_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def xdip_assign(self):
            return self.getTypedRuleContext(XplorMRParser.Xdip_assignContext,0)


        def Classification(self):
            return self.getToken(XplorMRParser.Classification, 0)

        def Simple_name(self):
            return self.getToken(XplorMRParser.Simple_name, 0)

        def Equ_op(self):
            return self.getToken(XplorMRParser.Equ_op, 0)

        def Type(self):
            return self.getToken(XplorMRParser.Type, 0)

        def Rdc_dist_fix_types(self):
            return self.getToken(XplorMRParser.Rdc_dist_fix_types, 0)

        def Scale(self):
            return self.getToken(XplorMRParser.Scale, 0)

        def number_s(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Number_sContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Number_sContext,i)


        def Sign(self):
            return self.getToken(XplorMRParser.Sign, 0)

        def Logical(self):
            return self.getToken(XplorMRParser.Logical, 0)

        def Average(self):
            return self.getToken(XplorMRParser.Average, 0)

        def Averaging_methods(self):
            return self.getToken(XplorMRParser.Averaging_methods, 0)

        def Coefficients(self):
            return self.getToken(XplorMRParser.Coefficients, 0)

        def ForceConstant(self):
            return self.getToken(XplorMRParser.ForceConstant, 0)

        def Nrestraints(self):
            return self.getToken(XplorMRParser.Nrestraints, 0)

        def Integer(self):
            return self.getToken(XplorMRParser.Integer, 0)

        def Potential(self):
            return self.getToken(XplorMRParser.Potential, 0)

        def Potential_types(self):
            return self.getToken(XplorMRParser.Potential_types, 0)

        def Print(self):
            return self.getToken(XplorMRParser.Print, 0)

        def Threshold(self):
            return self.getToken(XplorMRParser.Threshold, 0)

        def Reset(self):
            return self.getToken(XplorMRParser.Reset, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_xdip_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterXdip_statement" ):
                listener.enterXdip_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitXdip_statement" ):
                listener.exitXdip_statement(self)




    def xdip_statement(self):

        localctx = XplorMRParser.Xdip_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_xdip_statement)
        self._la = 0 # Token type
        try:
            self.state = 834
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [XplorMRParser.Assign]:
                self.enterOuterAlt(localctx, 1)
                self.state = 796
                self.xdip_assign()
                pass
            elif token in [XplorMRParser.Classification]:
                self.enterOuterAlt(localctx, 2)
                self.state = 797
                self.match(XplorMRParser.Classification)
                self.state = 799
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 798
                    self.match(XplorMRParser.Equ_op)


                self.state = 801
                self.match(XplorMRParser.Simple_name)
                pass
            elif token in [XplorMRParser.Type]:
                self.enterOuterAlt(localctx, 3)
                self.state = 802
                self.match(XplorMRParser.Type)
                self.state = 803
                self.match(XplorMRParser.Rdc_dist_fix_types)
                pass
            elif token in [XplorMRParser.Scale]:
                self.enterOuterAlt(localctx, 4)
                self.state = 804
                self.match(XplorMRParser.Scale)
                self.state = 806
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 805
                    self.match(XplorMRParser.Equ_op)


                self.state = 808
                self.number_s()
                pass
            elif token in [XplorMRParser.Sign]:
                self.enterOuterAlt(localctx, 5)
                self.state = 809
                self.match(XplorMRParser.Sign)
                self.state = 810
                self.match(XplorMRParser.Logical)
                pass
            elif token in [XplorMRParser.Average]:
                self.enterOuterAlt(localctx, 6)
                self.state = 811
                self.match(XplorMRParser.Average)
                self.state = 812
                self.match(XplorMRParser.Averaging_methods)
                pass
            elif token in [XplorMRParser.Coefficients]:
                self.enterOuterAlt(localctx, 7)
                self.state = 813
                self.match(XplorMRParser.Coefficients)
                self.state = 814
                self.number_s()
                self.state = 815
                self.number_s()
                self.state = 816
                self.number_s()
                pass
            elif token in [XplorMRParser.ForceConstant]:
                self.enterOuterAlt(localctx, 8)
                self.state = 818
                self.match(XplorMRParser.ForceConstant)
                self.state = 820
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 819
                    self.match(XplorMRParser.Equ_op)


                self.state = 822
                self.number_s()
                pass
            elif token in [XplorMRParser.Nrestraints]:
                self.enterOuterAlt(localctx, 9)
                self.state = 823
                self.match(XplorMRParser.Nrestraints)
                self.state = 825
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 824
                    self.match(XplorMRParser.Equ_op)


                self.state = 827
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.Potential]:
                self.enterOuterAlt(localctx, 10)
                self.state = 828
                self.match(XplorMRParser.Potential)
                self.state = 829
                self.match(XplorMRParser.Potential_types)
                pass
            elif token in [XplorMRParser.Print]:
                self.enterOuterAlt(localctx, 11)
                self.state = 830
                self.match(XplorMRParser.Print)
                self.state = 831
                self.match(XplorMRParser.Threshold)
                self.state = 832
                self.number_s()
                pass
            elif token in [XplorMRParser.Reset]:
                self.enterOuterAlt(localctx, 12)
                self.state = 833
                self.match(XplorMRParser.Reset)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Xdip_assignContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Assign(self):
            return self.getToken(XplorMRParser.Assign, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.SelectionContext,i)


        def number(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.NumberContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.NumberContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_xdip_assign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterXdip_assign" ):
                listener.enterXdip_assign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitXdip_assign" ):
                listener.exitXdip_assign(self)




    def xdip_assign(self):

        localctx = XplorMRParser.Xdip_assignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 68, self.RULE_xdip_assign)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 836
            self.match(XplorMRParser.Assign)
            self.state = 837
            self.selection()
            self.state = 838
            self.selection()
            self.state = 839
            self.selection()
            self.state = 840
            self.selection()
            self.state = 841
            self.selection()
            self.state = 842
            self.selection()
            self.state = 843
            self.number()
            self.state = 844
            self.number()
            self.state = 851
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,73,self._ctx)
            if la_ == 1:
                self.state = 845
                self.number()

            elif la_ == 2:
                self.state = 846
                self.number()
                self.state = 847
                self.number()
                self.state = 848
                self.number()
                self.state = 849
                self.number()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Vean_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def vean_assign(self):
            return self.getTypedRuleContext(XplorMRParser.Vean_assignContext,0)


        def Cv(self):
            return self.getToken(XplorMRParser.Cv, 0)

        def Integer(self):
            return self.getToken(XplorMRParser.Integer, 0)

        def Equ_op(self):
            return self.getToken(XplorMRParser.Equ_op, 0)

        def Classification(self):
            return self.getToken(XplorMRParser.Classification, 0)

        def Simple_name(self):
            return self.getToken(XplorMRParser.Simple_name, 0)

        def ForceConstant(self):
            return self.getToken(XplorMRParser.ForceConstant, 0)

        def number_s(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Number_sContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Number_sContext,i)


        def Nrestraints(self):
            return self.getToken(XplorMRParser.Nrestraints, 0)

        def Partition(self):
            return self.getToken(XplorMRParser.Partition, 0)

        def Print(self):
            return self.getToken(XplorMRParser.Print, 0)

        def Threshold(self):
            return self.getToken(XplorMRParser.Threshold, 0)

        def Reset(self):
            return self.getToken(XplorMRParser.Reset, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_vean_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVean_statement" ):
                listener.enterVean_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVean_statement" ):
                listener.exitVean_statement(self)




    def vean_statement(self):

        localctx = XplorMRParser.Vean_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_vean_statement)
        self._la = 0 # Token type
        try:
            self.state = 885
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [XplorMRParser.Assign]:
                self.enterOuterAlt(localctx, 1)
                self.state = 853
                self.vean_assign()
                pass
            elif token in [XplorMRParser.Cv]:
                self.enterOuterAlt(localctx, 2)
                self.state = 854
                self.match(XplorMRParser.Cv)
                self.state = 856
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 855
                    self.match(XplorMRParser.Equ_op)


                self.state = 858
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.Classification]:
                self.enterOuterAlt(localctx, 3)
                self.state = 859
                self.match(XplorMRParser.Classification)
                self.state = 861
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 860
                    self.match(XplorMRParser.Equ_op)


                self.state = 863
                self.match(XplorMRParser.Simple_name)
                pass
            elif token in [XplorMRParser.ForceConstant]:
                self.enterOuterAlt(localctx, 4)
                self.state = 864
                self.match(XplorMRParser.ForceConstant)
                self.state = 866
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 865
                    self.match(XplorMRParser.Equ_op)


                self.state = 868
                self.number_s()
                self.state = 869
                self.number_s()
                pass
            elif token in [XplorMRParser.Nrestraints]:
                self.enterOuterAlt(localctx, 5)
                self.state = 871
                self.match(XplorMRParser.Nrestraints)
                self.state = 873
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 872
                    self.match(XplorMRParser.Equ_op)


                self.state = 875
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.Partition]:
                self.enterOuterAlt(localctx, 6)
                self.state = 876
                self.match(XplorMRParser.Partition)
                self.state = 878
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 877
                    self.match(XplorMRParser.Equ_op)


                self.state = 880
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.Print]:
                self.enterOuterAlt(localctx, 7)
                self.state = 881
                self.match(XplorMRParser.Print)
                self.state = 882
                self.match(XplorMRParser.Threshold)
                self.state = 883
                self.number_s()
                pass
            elif token in [XplorMRParser.Reset]:
                self.enterOuterAlt(localctx, 8)
                self.state = 884
                self.match(XplorMRParser.Reset)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Vean_assignContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Assign(self):
            return self.getToken(XplorMRParser.Assign, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.SelectionContext,i)


        def number(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.NumberContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.NumberContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_vean_assign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVean_assign" ):
                listener.enterVean_assign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVean_assign" ):
                listener.exitVean_assign(self)




    def vean_assign(self):

        localctx = XplorMRParser.Vean_assignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_vean_assign)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 887
            self.match(XplorMRParser.Assign)
            self.state = 888
            self.selection()
            self.state = 889
            self.selection()
            self.state = 890
            self.selection()
            self.state = 891
            self.selection()
            self.state = 892
            self.number()
            self.state = 893
            self.number()
            self.state = 897
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 180)) & ~0x3f) == 0 and ((1 << (_la - 180)) & ((1 << (XplorMRParser.Integer - 180)) | (1 << (XplorMRParser.Real - 180)) | (1 << (XplorMRParser.Symbol_name - 180)))) != 0):
                self.state = 894
                self.number()
                self.state = 895
                self.number()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Tenso_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def tenso_assign(self):
            return self.getTypedRuleContext(XplorMRParser.Tenso_assignContext,0)


        def Classification(self):
            return self.getToken(XplorMRParser.Classification, 0)

        def Simple_name(self):
            return self.getToken(XplorMRParser.Simple_name, 0)

        def Equ_op(self):
            return self.getToken(XplorMRParser.Equ_op, 0)

        def Coefficients(self):
            return self.getToken(XplorMRParser.Coefficients, 0)

        def number_s(self):
            return self.getTypedRuleContext(XplorMRParser.Number_sContext,0)


        def Nrestraints(self):
            return self.getToken(XplorMRParser.Nrestraints, 0)

        def Integer(self):
            return self.getToken(XplorMRParser.Integer, 0)

        def Potential(self):
            return self.getToken(XplorMRParser.Potential, 0)

        def Potential_types(self):
            return self.getToken(XplorMRParser.Potential_types, 0)

        def Print(self):
            return self.getToken(XplorMRParser.Print, 0)

        def Threshold(self):
            return self.getToken(XplorMRParser.Threshold, 0)

        def Reset(self):
            return self.getToken(XplorMRParser.Reset, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_tenso_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTenso_statement" ):
                listener.enterTenso_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTenso_statement" ):
                listener.exitTenso_statement(self)




    def tenso_statement(self):

        localctx = XplorMRParser.Tenso_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_tenso_statement)
        self._la = 0 # Token type
        try:
            self.state = 918
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [XplorMRParser.Assign]:
                self.enterOuterAlt(localctx, 1)
                self.state = 899
                self.tenso_assign()
                pass
            elif token in [XplorMRParser.Classification]:
                self.enterOuterAlt(localctx, 2)
                self.state = 900
                self.match(XplorMRParser.Classification)
                self.state = 902
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 901
                    self.match(XplorMRParser.Equ_op)


                self.state = 904
                self.match(XplorMRParser.Simple_name)
                pass
            elif token in [XplorMRParser.Coefficients]:
                self.enterOuterAlt(localctx, 3)
                self.state = 905
                self.match(XplorMRParser.Coefficients)
                self.state = 906
                self.number_s()
                pass
            elif token in [XplorMRParser.Nrestraints]:
                self.enterOuterAlt(localctx, 4)
                self.state = 907
                self.match(XplorMRParser.Nrestraints)
                self.state = 909
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 908
                    self.match(XplorMRParser.Equ_op)


                self.state = 911
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.Potential]:
                self.enterOuterAlt(localctx, 5)
                self.state = 912
                self.match(XplorMRParser.Potential)
                self.state = 913
                self.match(XplorMRParser.Potential_types)
                pass
            elif token in [XplorMRParser.Print]:
                self.enterOuterAlt(localctx, 6)
                self.state = 914
                self.match(XplorMRParser.Print)
                self.state = 915
                self.match(XplorMRParser.Threshold)
                self.state = 916
                self.number_s()
                pass
            elif token in [XplorMRParser.Reset]:
                self.enterOuterAlt(localctx, 7)
                self.state = 917
                self.match(XplorMRParser.Reset)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Tenso_assignContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Assign(self):
            return self.getToken(XplorMRParser.Assign, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.SelectionContext,i)


        def number(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.NumberContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.NumberContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_tenso_assign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTenso_assign" ):
                listener.enterTenso_assign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTenso_assign" ):
                listener.exitTenso_assign(self)




    def tenso_assign(self):

        localctx = XplorMRParser.Tenso_assignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 76, self.RULE_tenso_assign)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 920
            self.match(XplorMRParser.Assign)
            self.state = 921
            self.selection()
            self.state = 922
            self.selection()
            self.state = 923
            self.number()
            self.state = 925
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 180)) & ~0x3f) == 0 and ((1 << (_la - 180)) & ((1 << (XplorMRParser.Integer - 180)) | (1 << (XplorMRParser.Real - 180)) | (1 << (XplorMRParser.Symbol_name - 180)))) != 0):
                self.state = 924
                self.number()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Anis_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def anis_assign(self):
            return self.getTypedRuleContext(XplorMRParser.Anis_assignContext,0)


        def Classification(self):
            return self.getToken(XplorMRParser.Classification, 0)

        def Simple_name(self):
            return self.getToken(XplorMRParser.Simple_name, 0)

        def Equ_op(self):
            return self.getToken(XplorMRParser.Equ_op, 0)

        def Coefficients(self):
            return self.getToken(XplorMRParser.Coefficients, 0)

        def number_s(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Number_sContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Number_sContext,i)


        def ForceConstant(self):
            return self.getToken(XplorMRParser.ForceConstant, 0)

        def Nrestraints(self):
            return self.getToken(XplorMRParser.Nrestraints, 0)

        def Integer(self):
            return self.getToken(XplorMRParser.Integer, 0)

        def Potential(self):
            return self.getToken(XplorMRParser.Potential, 0)

        def Potential_types(self):
            return self.getToken(XplorMRParser.Potential_types, 0)

        def Print(self):
            return self.getToken(XplorMRParser.Print, 0)

        def Threshold(self):
            return self.getToken(XplorMRParser.Threshold, 0)

        def Reset(self):
            return self.getToken(XplorMRParser.Reset, 0)

        def Type(self):
            return self.getToken(XplorMRParser.Type, 0)

        def Rdc_or_Diff_anis_types(self):
            return self.getToken(XplorMRParser.Rdc_or_Diff_anis_types, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_anis_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAnis_statement" ):
                listener.enterAnis_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAnis_statement" ):
                listener.exitAnis_statement(self)




    def anis_statement(self):

        localctx = XplorMRParser.Anis_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 78, self.RULE_anis_statement)
        self._la = 0 # Token type
        try:
            self.state = 957
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [XplorMRParser.Assign]:
                self.enterOuterAlt(localctx, 1)
                self.state = 927
                self.anis_assign()
                pass
            elif token in [XplorMRParser.Classification]:
                self.enterOuterAlt(localctx, 2)
                self.state = 928
                self.match(XplorMRParser.Classification)
                self.state = 930
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 929
                    self.match(XplorMRParser.Equ_op)


                self.state = 932
                self.match(XplorMRParser.Simple_name)
                pass
            elif token in [XplorMRParser.Coefficients]:
                self.enterOuterAlt(localctx, 3)
                self.state = 933
                self.match(XplorMRParser.Coefficients)
                self.state = 934
                self.number_s()
                self.state = 935
                self.number_s()
                self.state = 936
                self.number_s()
                self.state = 937
                self.number_s()
                pass
            elif token in [XplorMRParser.ForceConstant]:
                self.enterOuterAlt(localctx, 4)
                self.state = 939
                self.match(XplorMRParser.ForceConstant)
                self.state = 941
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 940
                    self.match(XplorMRParser.Equ_op)


                self.state = 943
                self.number_s()
                pass
            elif token in [XplorMRParser.Nrestraints]:
                self.enterOuterAlt(localctx, 5)
                self.state = 944
                self.match(XplorMRParser.Nrestraints)
                self.state = 946
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 945
                    self.match(XplorMRParser.Equ_op)


                self.state = 948
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.Potential]:
                self.enterOuterAlt(localctx, 6)
                self.state = 949
                self.match(XplorMRParser.Potential)
                self.state = 950
                self.match(XplorMRParser.Potential_types)
                pass
            elif token in [XplorMRParser.Print]:
                self.enterOuterAlt(localctx, 7)
                self.state = 951
                self.match(XplorMRParser.Print)
                self.state = 952
                self.match(XplorMRParser.Threshold)
                self.state = 953
                self.number_s()
                pass
            elif token in [XplorMRParser.Reset]:
                self.enterOuterAlt(localctx, 8)
                self.state = 954
                self.match(XplorMRParser.Reset)
                pass
            elif token in [XplorMRParser.Type]:
                self.enterOuterAlt(localctx, 9)
                self.state = 955
                self.match(XplorMRParser.Type)
                self.state = 956
                self.match(XplorMRParser.Rdc_or_Diff_anis_types)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Anis_assignContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Assign(self):
            return self.getToken(XplorMRParser.Assign, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.SelectionContext,i)


        def number(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.NumberContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.NumberContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_anis_assign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAnis_assign" ):
                listener.enterAnis_assign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAnis_assign" ):
                listener.exitAnis_assign(self)




    def anis_assign(self):

        localctx = XplorMRParser.Anis_assignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 80, self.RULE_anis_assign)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 959
            self.match(XplorMRParser.Assign)
            self.state = 960
            self.selection()
            self.state = 961
            self.selection()
            self.state = 962
            self.selection()
            self.state = 963
            self.selection()
            self.state = 964
            self.number()
            self.state = 966
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 180)) & ~0x3f) == 0 and ((1 << (_la - 180)) & ((1 << (XplorMRParser.Integer - 180)) | (1 << (XplorMRParser.Real - 180)) | (1 << (XplorMRParser.Symbol_name - 180)))) != 0):
                self.state = 965
                self.number()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Planar_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def vector_statement(self):
            return self.getTypedRuleContext(XplorMRParser.Vector_statementContext,0)


        def Group(self):
            return self.getToken(XplorMRParser.Group, 0)

        def End(self):
            return self.getToken(XplorMRParser.End, 0)

        def group_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Group_statementContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Group_statementContext,i)


        def Initialize(self):
            return self.getToken(XplorMRParser.Initialize, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_planar_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPlanar_statement" ):
                listener.enterPlanar_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPlanar_statement" ):
                listener.exitPlanar_statement(self)




    def planar_statement(self):

        localctx = XplorMRParser.Planar_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 82, self.RULE_planar_statement)
        self._la = 0 # Token type
        try:
            self.state = 978
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [XplorMRParser.Vector]:
                self.enterOuterAlt(localctx, 1)
                self.state = 968
                self.vector_statement()
                pass
            elif token in [XplorMRParser.Group]:
                self.enterOuterAlt(localctx, 2)
                self.state = 969
                self.match(XplorMRParser.Group)
                self.state = 973
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==XplorMRParser.Selection or _la==XplorMRParser.Weight:
                    self.state = 970
                    self.group_statement()
                    self.state = 975
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 976
                self.match(XplorMRParser.End)
                pass
            elif token in [XplorMRParser.Initialize]:
                self.enterOuterAlt(localctx, 3)
                self.state = 977
                self.match(XplorMRParser.Initialize)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Group_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Selection(self):
            return self.getToken(XplorMRParser.Selection, 0)

        def selection(self):
            return self.getTypedRuleContext(XplorMRParser.SelectionContext,0)


        def Equ_op(self):
            return self.getToken(XplorMRParser.Equ_op, 0)

        def Weight(self):
            return self.getToken(XplorMRParser.Weight, 0)

        def number_s(self):
            return self.getTypedRuleContext(XplorMRParser.Number_sContext,0)


        def getRuleIndex(self):
            return XplorMRParser.RULE_group_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGroup_statement" ):
                listener.enterGroup_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGroup_statement" ):
                listener.exitGroup_statement(self)




    def group_statement(self):

        localctx = XplorMRParser.Group_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 84, self.RULE_group_statement)
        self._la = 0 # Token type
        try:
            self.state = 990
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [XplorMRParser.Selection]:
                self.enterOuterAlt(localctx, 1)
                self.state = 980
                self.match(XplorMRParser.Selection)
                self.state = 982
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 981
                    self.match(XplorMRParser.Equ_op)


                self.state = 984
                self.selection()
                pass
            elif token in [XplorMRParser.Weight]:
                self.enterOuterAlt(localctx, 2)
                self.state = 985
                self.match(XplorMRParser.Weight)
                self.state = 987
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 986
                    self.match(XplorMRParser.Equ_op)


                self.state = 989
                self.number_s()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Harmonic_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def vector_statement(self):
            return self.getTypedRuleContext(XplorMRParser.Vector_statementContext,0)


        def Exponent(self):
            return self.getToken(XplorMRParser.Exponent, 0)

        def Integer(self):
            return self.getToken(XplorMRParser.Integer, 0)

        def Equ_op(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Equ_op)
            else:
                return self.getToken(XplorMRParser.Equ_op, i)

        def Normal(self):
            return self.getToken(XplorMRParser.Normal, 0)

        def L_paren(self):
            return self.getToken(XplorMRParser.L_paren, 0)

        def R_paren(self):
            return self.getToken(XplorMRParser.R_paren, 0)

        def number_s(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Number_sContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Number_sContext,i)


        def Tail(self):
            return self.getToken(XplorMRParser.Tail, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.SelectionContext,i)


        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Comma)
            else:
                return self.getToken(XplorMRParser.Comma, i)

        def Head(self):
            return self.getToken(XplorMRParser.Head, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_harmonic_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHarmonic_statement" ):
                listener.enterHarmonic_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHarmonic_statement" ):
                listener.exitHarmonic_statement(self)




    def harmonic_statement(self):

        localctx = XplorMRParser.Harmonic_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 86, self.RULE_harmonic_statement)
        self._la = 0 # Token type
        try:
            self.state = 1032
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [XplorMRParser.Vector]:
                self.enterOuterAlt(localctx, 1)
                self.state = 992
                self.vector_statement()
                pass
            elif token in [XplorMRParser.Exponent]:
                self.enterOuterAlt(localctx, 2)
                self.state = 993
                self.match(XplorMRParser.Exponent)
                self.state = 995
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 994
                    self.match(XplorMRParser.Equ_op)


                self.state = 997
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.Normal]:
                self.enterOuterAlt(localctx, 3)
                self.state = 998
                self.match(XplorMRParser.Normal)
                self.state = 1000
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 999
                    self.match(XplorMRParser.Equ_op)


                self.state = 1002
                self.match(XplorMRParser.L_paren)
                self.state = 1028
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [XplorMRParser.Integer, XplorMRParser.Real, XplorMRParser.Symbol_name]:
                    self.state = 1003
                    self.number_s()
                    self.state = 1005
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==XplorMRParser.Comma:
                        self.state = 1004
                        self.match(XplorMRParser.Comma)


                    self.state = 1007
                    self.number_s()
                    self.state = 1009
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==XplorMRParser.Comma:
                        self.state = 1008
                        self.match(XplorMRParser.Comma)


                    self.state = 1011
                    self.number_s()
                    pass
                elif token in [XplorMRParser.Tail]:
                    self.state = 1013
                    self.match(XplorMRParser.Tail)
                    self.state = 1015
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==XplorMRParser.Equ_op:
                        self.state = 1014
                        self.match(XplorMRParser.Equ_op)


                    self.state = 1017
                    self.selection()
                    self.state = 1019
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==XplorMRParser.Comma:
                        self.state = 1018
                        self.match(XplorMRParser.Comma)


                    self.state = 1026
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==XplorMRParser.Head:
                        self.state = 1021
                        self.match(XplorMRParser.Head)
                        self.state = 1023
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==XplorMRParser.Equ_op:
                            self.state = 1022
                            self.match(XplorMRParser.Equ_op)


                        self.state = 1025
                        self.selection()


                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 1030
                self.match(XplorMRParser.R_paren)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Harmonic_assignContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Assign(self):
            return self.getToken(XplorMRParser.Assign, 0)

        def selection(self):
            return self.getTypedRuleContext(XplorMRParser.SelectionContext,0)


        def number(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.NumberContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.NumberContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_harmonic_assign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHarmonic_assign" ):
                listener.enterHarmonic_assign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHarmonic_assign" ):
                listener.exitHarmonic_assign(self)




    def harmonic_assign(self):

        localctx = XplorMRParser.Harmonic_assignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 88, self.RULE_harmonic_assign)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1034
            self.match(XplorMRParser.Assign)
            self.state = 1035
            self.selection()
            self.state = 1036
            self.number()
            self.state = 1037
            self.number()
            self.state = 1038
            self.number()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Antidistance_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def xadc_assign(self):
            return self.getTypedRuleContext(XplorMRParser.Xadc_assignContext,0)


        def xadc_assign_loop(self):
            return self.getTypedRuleContext(XplorMRParser.Xadc_assign_loopContext,0)


        def Classification(self):
            return self.getToken(XplorMRParser.Classification, 0)

        def Simple_name(self):
            return self.getToken(XplorMRParser.Simple_name, 0)

        def Equ_op(self):
            return self.getToken(XplorMRParser.Equ_op, 0)

        def Expectation(self):
            return self.getToken(XplorMRParser.Expectation, 0)

        def Integer(self):
            return self.getToken(XplorMRParser.Integer, 0)

        def number_s(self):
            return self.getTypedRuleContext(XplorMRParser.Number_sContext,0)


        def ForceConstant(self):
            return self.getToken(XplorMRParser.ForceConstant, 0)

        def Nrestraints(self):
            return self.getToken(XplorMRParser.Nrestraints, 0)

        def Print(self):
            return self.getToken(XplorMRParser.Print, 0)

        def Threshold(self):
            return self.getToken(XplorMRParser.Threshold, 0)

        def All(self):
            return self.getToken(XplorMRParser.All, 0)

        def Reset(self):
            return self.getToken(XplorMRParser.Reset, 0)

        def Size(self):
            return self.getToken(XplorMRParser.Size, 0)

        def Zero(self):
            return self.getToken(XplorMRParser.Zero, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_antidistance_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAntidistance_statement" ):
                listener.enterAntidistance_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAntidistance_statement" ):
                listener.exitAntidistance_statement(self)




    def antidistance_statement(self):

        localctx = XplorMRParser.Antidistance_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 90, self.RULE_antidistance_statement)
        self._la = 0 # Token type
        try:
            self.state = 1077
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [XplorMRParser.Assign]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1040
                self.xadc_assign()
                pass
            elif token in [XplorMRParser.For]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1041
                self.xadc_assign_loop()
                pass
            elif token in [XplorMRParser.Classification]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1042
                self.match(XplorMRParser.Classification)
                self.state = 1044
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 1043
                    self.match(XplorMRParser.Equ_op)


                self.state = 1046
                self.match(XplorMRParser.Simple_name)
                pass
            elif token in [XplorMRParser.Expectation]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1047
                self.match(XplorMRParser.Expectation)
                self.state = 1048
                self.match(XplorMRParser.Integer)
                self.state = 1049
                self.number_s()
                pass
            elif token in [XplorMRParser.ForceConstant]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1050
                self.match(XplorMRParser.ForceConstant)
                self.state = 1052
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 1051
                    self.match(XplorMRParser.Equ_op)


                self.state = 1054
                self.number_s()
                pass
            elif token in [XplorMRParser.Nrestraints]:
                self.enterOuterAlt(localctx, 6)
                self.state = 1055
                self.match(XplorMRParser.Nrestraints)
                self.state = 1057
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 1056
                    self.match(XplorMRParser.Equ_op)


                self.state = 1059
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.Print]:
                self.enterOuterAlt(localctx, 7)
                self.state = 1060
                self.match(XplorMRParser.Print)
                self.state = 1061
                self.match(XplorMRParser.Threshold)
                self.state = 1062
                self.number_s()
                self.state = 1069
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [XplorMRParser.All]:
                    self.state = 1063
                    self.match(XplorMRParser.All)
                    pass
                elif token in [XplorMRParser.Classification]:
                    self.state = 1064
                    self.match(XplorMRParser.Classification)
                    self.state = 1066
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==XplorMRParser.Equ_op:
                        self.state = 1065
                        self.match(XplorMRParser.Equ_op)


                    self.state = 1068
                    self.match(XplorMRParser.Simple_name)
                    pass
                else:
                    raise NoViableAltException(self)

                pass
            elif token in [XplorMRParser.Reset]:
                self.enterOuterAlt(localctx, 8)
                self.state = 1071
                self.match(XplorMRParser.Reset)
                pass
            elif token in [XplorMRParser.Size]:
                self.enterOuterAlt(localctx, 9)
                self.state = 1072
                self.match(XplorMRParser.Size)
                self.state = 1073
                self.number_s()
                self.state = 1074
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.Zero]:
                self.enterOuterAlt(localctx, 10)
                self.state = 1076
                self.match(XplorMRParser.Zero)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Xadc_assignContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Assign(self):
            return self.getToken(XplorMRParser.Assign, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.SelectionContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_xadc_assign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterXadc_assign" ):
                listener.enterXadc_assign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitXadc_assign" ):
                listener.exitXadc_assign(self)




    def xadc_assign(self):

        localctx = XplorMRParser.Xadc_assignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 92, self.RULE_xadc_assign)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1079
            self.match(XplorMRParser.Assign)
            self.state = 1080
            self.selection()
            self.state = 1081
            self.selection()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Coupling_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def coup_assign(self):
            return self.getTypedRuleContext(XplorMRParser.Coup_assignContext,0)


        def coup_assign_loop(self):
            return self.getTypedRuleContext(XplorMRParser.Coup_assign_loopContext,0)


        def Classification(self):
            return self.getToken(XplorMRParser.Classification, 0)

        def Simple_name(self):
            return self.getToken(XplorMRParser.Simple_name, 0)

        def Equ_op(self):
            return self.getToken(XplorMRParser.Equ_op, 0)

        def Coefficients(self):
            return self.getToken(XplorMRParser.Coefficients, 0)

        def number_s(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Number_sContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Number_sContext,i)


        def Cv(self):
            return self.getToken(XplorMRParser.Cv, 0)

        def Integer(self):
            return self.getToken(XplorMRParser.Integer, 0)

        def DegEnergy(self):
            return self.getToken(XplorMRParser.DegEnergy, 0)

        def ForceConstant(self):
            return self.getToken(XplorMRParser.ForceConstant, 0)

        def Nrestraints(self):
            return self.getToken(XplorMRParser.Nrestraints, 0)

        def Partition(self):
            return self.getToken(XplorMRParser.Partition, 0)

        def Potential(self):
            return self.getToken(XplorMRParser.Potential, 0)

        def Potential_types(self):
            return self.getToken(XplorMRParser.Potential_types, 0)

        def Print(self):
            return self.getToken(XplorMRParser.Print, 0)

        def Threshold(self):
            return self.getToken(XplorMRParser.Threshold, 0)

        def All(self):
            return self.getToken(XplorMRParser.All, 0)

        def Reset(self):
            return self.getToken(XplorMRParser.Reset, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_coupling_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCoupling_statement" ):
                listener.enterCoupling_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCoupling_statement" ):
                listener.exitCoupling_statement(self)




    def coupling_statement(self):

        localctx = XplorMRParser.Coupling_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 94, self.RULE_coupling_statement)
        self._la = 0 # Token type
        try:
            self.state = 1132
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [XplorMRParser.Assign]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1083
                self.coup_assign()
                pass
            elif token in [XplorMRParser.For]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1084
                self.coup_assign_loop()
                pass
            elif token in [XplorMRParser.Classification]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1085
                self.match(XplorMRParser.Classification)
                self.state = 1087
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 1086
                    self.match(XplorMRParser.Equ_op)


                self.state = 1089
                self.match(XplorMRParser.Simple_name)
                pass
            elif token in [XplorMRParser.Coefficients]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1090
                self.match(XplorMRParser.Coefficients)
                self.state = 1091
                self.number_s()
                self.state = 1092
                self.number_s()
                self.state = 1093
                self.number_s()
                self.state = 1094
                self.number_s()
                pass
            elif token in [XplorMRParser.Cv]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1096
                self.match(XplorMRParser.Cv)
                self.state = 1098
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 1097
                    self.match(XplorMRParser.Equ_op)


                self.state = 1100
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.DegEnergy]:
                self.enterOuterAlt(localctx, 6)
                self.state = 1101
                self.match(XplorMRParser.DegEnergy)
                self.state = 1102
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.ForceConstant]:
                self.enterOuterAlt(localctx, 7)
                self.state = 1103
                self.match(XplorMRParser.ForceConstant)
                self.state = 1104
                self.number_s()
                self.state = 1106
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 180)) & ~0x3f) == 0 and ((1 << (_la - 180)) & ((1 << (XplorMRParser.Integer - 180)) | (1 << (XplorMRParser.Real - 180)) | (1 << (XplorMRParser.Symbol_name - 180)))) != 0):
                    self.state = 1105
                    self.number_s()


                pass
            elif token in [XplorMRParser.Nrestraints]:
                self.enterOuterAlt(localctx, 8)
                self.state = 1108
                self.match(XplorMRParser.Nrestraints)
                self.state = 1110
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 1109
                    self.match(XplorMRParser.Equ_op)


                self.state = 1112
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.Partition]:
                self.enterOuterAlt(localctx, 9)
                self.state = 1113
                self.match(XplorMRParser.Partition)
                self.state = 1115
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 1114
                    self.match(XplorMRParser.Equ_op)


                self.state = 1117
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.Potential]:
                self.enterOuterAlt(localctx, 10)
                self.state = 1118
                self.match(XplorMRParser.Potential)
                self.state = 1119
                self.match(XplorMRParser.Potential_types)
                pass
            elif token in [XplorMRParser.Print]:
                self.enterOuterAlt(localctx, 11)
                self.state = 1120
                self.match(XplorMRParser.Print)
                self.state = 1121
                self.match(XplorMRParser.Threshold)
                self.state = 1122
                self.number_s()
                self.state = 1129
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [XplorMRParser.All]:
                    self.state = 1123
                    self.match(XplorMRParser.All)
                    pass
                elif token in [XplorMRParser.Classification]:
                    self.state = 1124
                    self.match(XplorMRParser.Classification)
                    self.state = 1126
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==XplorMRParser.Equ_op:
                        self.state = 1125
                        self.match(XplorMRParser.Equ_op)


                    self.state = 1128
                    self.match(XplorMRParser.Simple_name)
                    pass
                else:
                    raise NoViableAltException(self)

                pass
            elif token in [XplorMRParser.Reset]:
                self.enterOuterAlt(localctx, 12)
                self.state = 1131
                self.match(XplorMRParser.Reset)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Coup_assignContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Assign(self):
            return self.getToken(XplorMRParser.Assign, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.SelectionContext,i)


        def number(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.NumberContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.NumberContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_coup_assign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCoup_assign" ):
                listener.enterCoup_assign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCoup_assign" ):
                listener.exitCoup_assign(self)




    def coup_assign(self):

        localctx = XplorMRParser.Coup_assignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 96, self.RULE_coup_assign)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1134
            self.match(XplorMRParser.Assign)
            self.state = 1135
            self.selection()
            self.state = 1136
            self.selection()
            self.state = 1137
            self.selection()
            self.state = 1138
            self.selection()
            self.state = 1144
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==XplorMRParser.L_paren:
                self.state = 1139
                self.selection()
                self.state = 1140
                self.selection()
                self.state = 1141
                self.selection()
                self.state = 1142
                self.selection()


            self.state = 1146
            self.number()
            self.state = 1147
            self.number()
            self.state = 1151
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 180)) & ~0x3f) == 0 and ((1 << (_la - 180)) & ((1 << (XplorMRParser.Integer - 180)) | (1 << (XplorMRParser.Real - 180)) | (1 << (XplorMRParser.Symbol_name - 180)))) != 0):
                self.state = 1148
                self.number()
                self.state = 1149
                self.number()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Carbon_shift_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def carbon_shift_assign(self):
            return self.getTypedRuleContext(XplorMRParser.Carbon_shift_assignContext,0)


        def Classification(self):
            return self.getToken(XplorMRParser.Classification, 0)

        def Simple_name(self):
            return self.getToken(XplorMRParser.Simple_name, 0)

        def Equ_op(self):
            return self.getToken(XplorMRParser.Equ_op, 0)

        def Expectation(self):
            return self.getToken(XplorMRParser.Expectation, 0)

        def Integer(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Integer)
            else:
                return self.getToken(XplorMRParser.Integer, i)

        def number_s(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Number_sContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Number_sContext,i)


        def ForceConstant(self):
            return self.getToken(XplorMRParser.ForceConstant, 0)

        def Nrestraints(self):
            return self.getToken(XplorMRParser.Nrestraints, 0)

        def PhiStep(self):
            return self.getToken(XplorMRParser.PhiStep, 0)

        def PsiStep(self):
            return self.getToken(XplorMRParser.PsiStep, 0)

        def Potential(self):
            return self.getToken(XplorMRParser.Potential, 0)

        def Potential_types(self):
            return self.getToken(XplorMRParser.Potential_types, 0)

        def Print(self):
            return self.getToken(XplorMRParser.Print, 0)

        def Threshold(self):
            return self.getToken(XplorMRParser.Threshold, 0)

        def carbon_shift_rcoil(self):
            return self.getTypedRuleContext(XplorMRParser.Carbon_shift_rcoilContext,0)


        def Reset(self):
            return self.getToken(XplorMRParser.Reset, 0)

        def Zero(self):
            return self.getToken(XplorMRParser.Zero, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_carbon_shift_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCarbon_shift_statement" ):
                listener.enterCarbon_shift_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCarbon_shift_statement" ):
                listener.exitCarbon_shift_statement(self)




    def carbon_shift_statement(self):

        localctx = XplorMRParser.Carbon_shift_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 98, self.RULE_carbon_shift_statement)
        self._la = 0 # Token type
        try:
            self.state = 1188
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [XplorMRParser.Assign]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1153
                self.carbon_shift_assign()
                pass
            elif token in [XplorMRParser.Classification]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1154
                self.match(XplorMRParser.Classification)
                self.state = 1156
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 1155
                    self.match(XplorMRParser.Equ_op)


                self.state = 1158
                self.match(XplorMRParser.Simple_name)
                pass
            elif token in [XplorMRParser.Expectation]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1159
                self.match(XplorMRParser.Expectation)
                self.state = 1160
                self.match(XplorMRParser.Integer)
                self.state = 1161
                self.match(XplorMRParser.Integer)
                self.state = 1162
                self.number_s()
                self.state = 1163
                self.number_s()
                self.state = 1164
                self.number_s()
                pass
            elif token in [XplorMRParser.ForceConstant]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1166
                self.match(XplorMRParser.ForceConstant)
                self.state = 1168
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 1167
                    self.match(XplorMRParser.Equ_op)


                self.state = 1170
                self.number_s()
                pass
            elif token in [XplorMRParser.Nrestraints]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1171
                self.match(XplorMRParser.Nrestraints)
                self.state = 1173
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 1172
                    self.match(XplorMRParser.Equ_op)


                self.state = 1175
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.PhiStep]:
                self.enterOuterAlt(localctx, 6)
                self.state = 1176
                self.match(XplorMRParser.PhiStep)
                self.state = 1177
                self.number_s()
                pass
            elif token in [XplorMRParser.PsiStep]:
                self.enterOuterAlt(localctx, 7)
                self.state = 1178
                self.match(XplorMRParser.PsiStep)
                self.state = 1179
                self.number_s()
                pass
            elif token in [XplorMRParser.Potential]:
                self.enterOuterAlt(localctx, 8)
                self.state = 1180
                self.match(XplorMRParser.Potential)
                self.state = 1181
                self.match(XplorMRParser.Potential_types)
                pass
            elif token in [XplorMRParser.Print]:
                self.enterOuterAlt(localctx, 9)
                self.state = 1182
                self.match(XplorMRParser.Print)
                self.state = 1183
                self.match(XplorMRParser.Threshold)
                self.state = 1184
                self.number_s()
                pass
            elif token in [XplorMRParser.Rcoil]:
                self.enterOuterAlt(localctx, 10)
                self.state = 1185
                self.carbon_shift_rcoil()
                pass
            elif token in [XplorMRParser.Reset]:
                self.enterOuterAlt(localctx, 11)
                self.state = 1186
                self.match(XplorMRParser.Reset)
                pass
            elif token in [XplorMRParser.Zero]:
                self.enterOuterAlt(localctx, 12)
                self.state = 1187
                self.match(XplorMRParser.Zero)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Carbon_shift_assignContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Assign(self):
            return self.getToken(XplorMRParser.Assign, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.SelectionContext,i)


        def number(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.NumberContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.NumberContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_carbon_shift_assign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCarbon_shift_assign" ):
                listener.enterCarbon_shift_assign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCarbon_shift_assign" ):
                listener.exitCarbon_shift_assign(self)




    def carbon_shift_assign(self):

        localctx = XplorMRParser.Carbon_shift_assignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 100, self.RULE_carbon_shift_assign)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1190
            self.match(XplorMRParser.Assign)
            self.state = 1191
            self.selection()
            self.state = 1192
            self.selection()
            self.state = 1193
            self.selection()
            self.state = 1194
            self.selection()
            self.state = 1195
            self.selection()
            self.state = 1196
            self.number()
            self.state = 1197
            self.number()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Carbon_shift_rcoilContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Rcoil(self):
            return self.getToken(XplorMRParser.Rcoil, 0)

        def selection(self):
            return self.getTypedRuleContext(XplorMRParser.SelectionContext,0)


        def number(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.NumberContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.NumberContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_carbon_shift_rcoil

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCarbon_shift_rcoil" ):
                listener.enterCarbon_shift_rcoil(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCarbon_shift_rcoil" ):
                listener.exitCarbon_shift_rcoil(self)




    def carbon_shift_rcoil(self):

        localctx = XplorMRParser.Carbon_shift_rcoilContext(self, self._ctx, self.state)
        self.enterRule(localctx, 102, self.RULE_carbon_shift_rcoil)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1199
            self.match(XplorMRParser.Rcoil)
            self.state = 1200
            self.selection()
            self.state = 1201
            self.number()
            self.state = 1202
            self.number()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Proton_shift_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def observed(self):
            return self.getTypedRuleContext(XplorMRParser.ObservedContext,0)


        def proton_shift_rcoil(self):
            return self.getTypedRuleContext(XplorMRParser.Proton_shift_rcoilContext,0)


        def proton_shift_anisotropy(self):
            return self.getTypedRuleContext(XplorMRParser.Proton_shift_anisotropyContext,0)


        def proton_shift_amides(self):
            return self.getTypedRuleContext(XplorMRParser.Proton_shift_amidesContext,0)


        def proton_shift_carbons(self):
            return self.getTypedRuleContext(XplorMRParser.Proton_shift_carbonsContext,0)


        def proton_shift_nitrogens(self):
            return self.getTypedRuleContext(XplorMRParser.Proton_shift_nitrogensContext,0)


        def proton_shift_oxygens(self):
            return self.getTypedRuleContext(XplorMRParser.Proton_shift_oxygensContext,0)


        def proton_shift_ring_atoms(self):
            return self.getTypedRuleContext(XplorMRParser.Proton_shift_ring_atomsContext,0)


        def proton_shift_alphas_and_amides(self):
            return self.getTypedRuleContext(XplorMRParser.Proton_shift_alphas_and_amidesContext,0)


        def Classification(self):
            return self.getToken(XplorMRParser.Classification, 0)

        def Simple_name(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Simple_name)
            else:
                return self.getToken(XplorMRParser.Simple_name, i)

        def Equ_op(self):
            return self.getToken(XplorMRParser.Equ_op, 0)

        def Error(self):
            return self.getToken(XplorMRParser.Error, 0)

        def number_s(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Number_sContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Number_sContext,i)


        def DegEnergy(self):
            return self.getToken(XplorMRParser.DegEnergy, 0)

        def Integer(self):
            return self.getToken(XplorMRParser.Integer, 0)

        def ForceConstant(self):
            return self.getToken(XplorMRParser.ForceConstant, 0)

        def Potential(self):
            return self.getToken(XplorMRParser.Potential, 0)

        def Potential_types(self):
            return self.getToken(XplorMRParser.Potential_types, 0)

        def Print(self):
            return self.getToken(XplorMRParser.Print, 0)

        def Threshold(self):
            return self.getToken(XplorMRParser.Threshold, 0)

        def All(self):
            return self.getToken(XplorMRParser.All, 0)

        def Reset(self):
            return self.getToken(XplorMRParser.Reset, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_proton_shift_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProton_shift_statement" ):
                listener.enterProton_shift_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProton_shift_statement" ):
                listener.exitProton_shift_statement(self)




    def proton_shift_statement(self):

        localctx = XplorMRParser.Proton_shift_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 104, self.RULE_proton_shift_statement)
        self._la = 0 # Token type
        try:
            self.state = 1243
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [XplorMRParser.Observed]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1204
                self.observed()
                pass
            elif token in [XplorMRParser.Rcoil]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1205
                self.proton_shift_rcoil()
                pass
            elif token in [XplorMRParser.Anisotropy]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1206
                self.proton_shift_anisotropy()
                pass
            elif token in [XplorMRParser.Amides]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1207
                self.proton_shift_amides()
                pass
            elif token in [XplorMRParser.Carbon]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1208
                self.proton_shift_carbons()
                pass
            elif token in [XplorMRParser.Nitrogens]:
                self.enterOuterAlt(localctx, 6)
                self.state = 1209
                self.proton_shift_nitrogens()
                pass
            elif token in [XplorMRParser.Oxygens]:
                self.enterOuterAlt(localctx, 7)
                self.state = 1210
                self.proton_shift_oxygens()
                pass
            elif token in [XplorMRParser.RingAtoms]:
                self.enterOuterAlt(localctx, 8)
                self.state = 1211
                self.proton_shift_ring_atoms()
                pass
            elif token in [XplorMRParser.AlphasAndAmides]:
                self.enterOuterAlt(localctx, 9)
                self.state = 1212
                self.proton_shift_alphas_and_amides()
                pass
            elif token in [XplorMRParser.Classification]:
                self.enterOuterAlt(localctx, 10)
                self.state = 1213
                self.match(XplorMRParser.Classification)
                self.state = 1215
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 1214
                    self.match(XplorMRParser.Equ_op)


                self.state = 1217
                self.match(XplorMRParser.Simple_name)
                pass
            elif token in [XplorMRParser.Error]:
                self.enterOuterAlt(localctx, 11)
                self.state = 1218
                self.match(XplorMRParser.Error)
                self.state = 1219
                self.number_s()
                pass
            elif token in [XplorMRParser.DegEnergy]:
                self.enterOuterAlt(localctx, 12)
                self.state = 1220
                self.match(XplorMRParser.DegEnergy)
                self.state = 1221
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.ForceConstant]:
                self.enterOuterAlt(localctx, 13)
                self.state = 1222
                self.match(XplorMRParser.ForceConstant)
                self.state = 1223
                self.number_s()
                self.state = 1225
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 180)) & ~0x3f) == 0 and ((1 << (_la - 180)) & ((1 << (XplorMRParser.Integer - 180)) | (1 << (XplorMRParser.Real - 180)) | (1 << (XplorMRParser.Symbol_name - 180)))) != 0):
                    self.state = 1224
                    self.number_s()


                pass
            elif token in [XplorMRParser.Potential]:
                self.enterOuterAlt(localctx, 14)
                self.state = 1227
                self.match(XplorMRParser.Potential)
                self.state = 1228
                self.match(XplorMRParser.Potential_types)
                pass
            elif token in [XplorMRParser.Print]:
                self.enterOuterAlt(localctx, 15)
                self.state = 1229
                self.match(XplorMRParser.Print)
                self.state = 1230
                self.match(XplorMRParser.Threshold)
                self.state = 1231
                self.number_s()
                self.state = 1238
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [XplorMRParser.All]:
                    self.state = 1232
                    self.match(XplorMRParser.All)
                    pass
                elif token in [XplorMRParser.Classification]:
                    self.state = 1233
                    self.match(XplorMRParser.Classification)
                    self.state = 1235
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==XplorMRParser.Equ_op:
                        self.state = 1234
                        self.match(XplorMRParser.Equ_op)


                    self.state = 1237
                    self.match(XplorMRParser.Simple_name)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 1240
                self.match(XplorMRParser.Simple_name)
                pass
            elif token in [XplorMRParser.Reset]:
                self.enterOuterAlt(localctx, 16)
                self.state = 1242
                self.match(XplorMRParser.Reset)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ObservedContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Observed(self):
            return self.getToken(XplorMRParser.Observed, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.SelectionContext,i)


        def number(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.NumberContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.NumberContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_observed

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterObserved" ):
                listener.enterObserved(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitObserved" ):
                listener.exitObserved(self)




    def observed(self):

        localctx = XplorMRParser.ObservedContext(self, self._ctx, self.state)
        self.enterRule(localctx, 106, self.RULE_observed)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1245
            self.match(XplorMRParser.Observed)
            self.state = 1246
            self.selection()
            self.state = 1248
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==XplorMRParser.L_paren:
                self.state = 1247
                self.selection()


            self.state = 1250
            self.number()
            self.state = 1252
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 180)) & ~0x3f) == 0 and ((1 << (_la - 180)) & ((1 << (XplorMRParser.Integer - 180)) | (1 << (XplorMRParser.Real - 180)) | (1 << (XplorMRParser.Symbol_name - 180)))) != 0):
                self.state = 1251
                self.number()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Proton_shift_rcoilContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Rcoil(self):
            return self.getToken(XplorMRParser.Rcoil, 0)

        def selection(self):
            return self.getTypedRuleContext(XplorMRParser.SelectionContext,0)


        def number(self):
            return self.getTypedRuleContext(XplorMRParser.NumberContext,0)


        def getRuleIndex(self):
            return XplorMRParser.RULE_proton_shift_rcoil

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProton_shift_rcoil" ):
                listener.enterProton_shift_rcoil(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProton_shift_rcoil" ):
                listener.exitProton_shift_rcoil(self)




    def proton_shift_rcoil(self):

        localctx = XplorMRParser.Proton_shift_rcoilContext(self, self._ctx, self.state)
        self.enterRule(localctx, 108, self.RULE_proton_shift_rcoil)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1254
            self.match(XplorMRParser.Rcoil)
            self.state = 1255
            self.selection()
            self.state = 1256
            self.number()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Proton_shift_anisotropyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Anisotropy(self):
            return self.getToken(XplorMRParser.Anisotropy, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.SelectionContext,i)


        def Simple_name(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Simple_name)
            else:
                return self.getToken(XplorMRParser.Simple_name, i)

        def Logical(self):
            return self.getToken(XplorMRParser.Logical, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_proton_shift_anisotropy

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProton_shift_anisotropy" ):
                listener.enterProton_shift_anisotropy(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProton_shift_anisotropy" ):
                listener.exitProton_shift_anisotropy(self)




    def proton_shift_anisotropy(self):

        localctx = XplorMRParser.Proton_shift_anisotropyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 110, self.RULE_proton_shift_anisotropy)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1258
            self.match(XplorMRParser.Anisotropy)
            self.state = 1259
            self.selection()
            self.state = 1260
            self.selection()
            self.state = 1261
            self.selection()
            self.state = 1262
            self.match(XplorMRParser.Simple_name)
            self.state = 1264
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==XplorMRParser.Logical:
                self.state = 1263
                self.match(XplorMRParser.Logical)


            self.state = 1266
            self.match(XplorMRParser.Simple_name)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Proton_shift_amidesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Amides(self):
            return self.getToken(XplorMRParser.Amides, 0)

        def selection(self):
            return self.getTypedRuleContext(XplorMRParser.SelectionContext,0)


        def getRuleIndex(self):
            return XplorMRParser.RULE_proton_shift_amides

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProton_shift_amides" ):
                listener.enterProton_shift_amides(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProton_shift_amides" ):
                listener.exitProton_shift_amides(self)




    def proton_shift_amides(self):

        localctx = XplorMRParser.Proton_shift_amidesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 112, self.RULE_proton_shift_amides)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1268
            self.match(XplorMRParser.Amides)
            self.state = 1269
            self.selection()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Proton_shift_carbonsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Carbon(self):
            return self.getToken(XplorMRParser.Carbon, 0)

        def selection(self):
            return self.getTypedRuleContext(XplorMRParser.SelectionContext,0)


        def getRuleIndex(self):
            return XplorMRParser.RULE_proton_shift_carbons

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProton_shift_carbons" ):
                listener.enterProton_shift_carbons(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProton_shift_carbons" ):
                listener.exitProton_shift_carbons(self)




    def proton_shift_carbons(self):

        localctx = XplorMRParser.Proton_shift_carbonsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 114, self.RULE_proton_shift_carbons)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1271
            self.match(XplorMRParser.Carbon)
            self.state = 1272
            self.selection()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Proton_shift_nitrogensContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Nitrogens(self):
            return self.getToken(XplorMRParser.Nitrogens, 0)

        def selection(self):
            return self.getTypedRuleContext(XplorMRParser.SelectionContext,0)


        def getRuleIndex(self):
            return XplorMRParser.RULE_proton_shift_nitrogens

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProton_shift_nitrogens" ):
                listener.enterProton_shift_nitrogens(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProton_shift_nitrogens" ):
                listener.exitProton_shift_nitrogens(self)




    def proton_shift_nitrogens(self):

        localctx = XplorMRParser.Proton_shift_nitrogensContext(self, self._ctx, self.state)
        self.enterRule(localctx, 116, self.RULE_proton_shift_nitrogens)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1274
            self.match(XplorMRParser.Nitrogens)
            self.state = 1275
            self.selection()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Proton_shift_oxygensContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Oxygens(self):
            return self.getToken(XplorMRParser.Oxygens, 0)

        def selection(self):
            return self.getTypedRuleContext(XplorMRParser.SelectionContext,0)


        def getRuleIndex(self):
            return XplorMRParser.RULE_proton_shift_oxygens

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProton_shift_oxygens" ):
                listener.enterProton_shift_oxygens(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProton_shift_oxygens" ):
                listener.exitProton_shift_oxygens(self)




    def proton_shift_oxygens(self):

        localctx = XplorMRParser.Proton_shift_oxygensContext(self, self._ctx, self.state)
        self.enterRule(localctx, 118, self.RULE_proton_shift_oxygens)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1277
            self.match(XplorMRParser.Oxygens)
            self.state = 1278
            self.selection()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Proton_shift_ring_atomsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RingAtoms(self):
            return self.getToken(XplorMRParser.RingAtoms, 0)

        def Simple_name(self):
            return self.getToken(XplorMRParser.Simple_name, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.SelectionContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_proton_shift_ring_atoms

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProton_shift_ring_atoms" ):
                listener.enterProton_shift_ring_atoms(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProton_shift_ring_atoms" ):
                listener.exitProton_shift_ring_atoms(self)




    def proton_shift_ring_atoms(self):

        localctx = XplorMRParser.Proton_shift_ring_atomsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 120, self.RULE_proton_shift_ring_atoms)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1280
            self.match(XplorMRParser.RingAtoms)
            self.state = 1281
            self.match(XplorMRParser.Simple_name)
            self.state = 1282
            self.selection()
            self.state = 1283
            self.selection()
            self.state = 1284
            self.selection()
            self.state = 1285
            self.selection()
            self.state = 1286
            self.selection()
            self.state = 1288
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==XplorMRParser.L_paren:
                self.state = 1287
                self.selection()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Proton_shift_alphas_and_amidesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AlphasAndAmides(self):
            return self.getToken(XplorMRParser.AlphasAndAmides, 0)

        def selection(self):
            return self.getTypedRuleContext(XplorMRParser.SelectionContext,0)


        def getRuleIndex(self):
            return XplorMRParser.RULE_proton_shift_alphas_and_amides

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProton_shift_alphas_and_amides" ):
                listener.enterProton_shift_alphas_and_amides(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProton_shift_alphas_and_amides" ):
                listener.exitProton_shift_alphas_and_amides(self)




    def proton_shift_alphas_and_amides(self):

        localctx = XplorMRParser.Proton_shift_alphas_and_amidesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 122, self.RULE_proton_shift_alphas_and_amides)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1290
            self.match(XplorMRParser.AlphasAndAmides)
            self.state = 1291
            self.selection()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Ramachandran_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def rama_assign(self):
            return self.getTypedRuleContext(XplorMRParser.Rama_assignContext,0)


        def Classification(self):
            return self.getToken(XplorMRParser.Classification, 0)

        def Simple_name(self):
            return self.getToken(XplorMRParser.Simple_name, 0)

        def Equ_op(self):
            return self.getToken(XplorMRParser.Equ_op, 0)

        def Cutoff(self):
            return self.getToken(XplorMRParser.Cutoff, 0)

        def number_s(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Number_sContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Number_sContext,i)


        def ForceConstant(self):
            return self.getToken(XplorMRParser.ForceConstant, 0)

        def Gaussian(self):
            return self.getToken(XplorMRParser.Gaussian, 0)

        def Nrestraints(self):
            return self.getToken(XplorMRParser.Nrestraints, 0)

        def Integer(self):
            return self.getToken(XplorMRParser.Integer, 0)

        def Phase(self):
            return self.getToken(XplorMRParser.Phase, 0)

        def Print(self):
            return self.getToken(XplorMRParser.Print, 0)

        def Threshold(self):
            return self.getToken(XplorMRParser.Threshold, 0)

        def All(self):
            return self.getToken(XplorMRParser.All, 0)

        def Quartic(self):
            return self.getToken(XplorMRParser.Quartic, 0)

        def Reset(self):
            return self.getToken(XplorMRParser.Reset, 0)

        def Scale(self):
            return self.getToken(XplorMRParser.Scale, 0)

        def Shape(self):
            return self.getToken(XplorMRParser.Shape, 0)

        def Gauss_or_Quart(self):
            return self.getToken(XplorMRParser.Gauss_or_Quart, 0)

        def Size(self):
            return self.getToken(XplorMRParser.Size, 0)

        def Dimensions(self):
            return self.getToken(XplorMRParser.Dimensions, 0)

        def Sort(self):
            return self.getToken(XplorMRParser.Sort, 0)

        def Zero(self):
            return self.getToken(XplorMRParser.Zero, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_ramachandran_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRamachandran_statement" ):
                listener.enterRamachandran_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRamachandran_statement" ):
                listener.exitRamachandran_statement(self)




    def ramachandran_statement(self):

        localctx = XplorMRParser.Ramachandran_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 124, self.RULE_ramachandran_statement)
        self._la = 0 # Token type
        try:
            self.state = 1410
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [XplorMRParser.Assign]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1293
                self.rama_assign()
                pass
            elif token in [XplorMRParser.Classification]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1294
                self.match(XplorMRParser.Classification)
                self.state = 1296
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 1295
                    self.match(XplorMRParser.Equ_op)


                self.state = 1298
                self.match(XplorMRParser.Simple_name)
                pass
            elif token in [XplorMRParser.Cutoff]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1299
                self.match(XplorMRParser.Cutoff)
                self.state = 1300
                self.number_s()
                pass
            elif token in [XplorMRParser.ForceConstant]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1301
                self.match(XplorMRParser.ForceConstant)
                self.state = 1303
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 1302
                    self.match(XplorMRParser.Equ_op)


                self.state = 1305
                self.number_s()
                pass
            elif token in [XplorMRParser.Gaussian]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1306
                self.match(XplorMRParser.Gaussian)
                self.state = 1307
                self.number_s()
                self.state = 1308
                self.number_s()
                self.state = 1309
                self.number_s()
                self.state = 1314
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,136,self._ctx)
                if la_ == 1:
                    self.state = 1310
                    self.number_s()
                    self.state = 1311
                    self.number_s()
                    self.state = 1312
                    self.number_s()


                self.state = 1320
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,137,self._ctx)
                if la_ == 1:
                    self.state = 1316
                    self.number_s()
                    self.state = 1317
                    self.number_s()
                    self.state = 1318
                    self.number_s()


                self.state = 1326
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 180)) & ~0x3f) == 0 and ((1 << (_la - 180)) & ((1 << (XplorMRParser.Integer - 180)) | (1 << (XplorMRParser.Real - 180)) | (1 << (XplorMRParser.Symbol_name - 180)))) != 0):
                    self.state = 1322
                    self.number_s()
                    self.state = 1323
                    self.number_s()
                    self.state = 1324
                    self.number_s()


                pass
            elif token in [XplorMRParser.Nrestraints]:
                self.enterOuterAlt(localctx, 6)
                self.state = 1328
                self.match(XplorMRParser.Nrestraints)
                self.state = 1330
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 1329
                    self.match(XplorMRParser.Equ_op)


                self.state = 1332
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.Phase]:
                self.enterOuterAlt(localctx, 7)
                self.state = 1333
                self.match(XplorMRParser.Phase)
                self.state = 1334
                self.number_s()
                self.state = 1335
                self.number_s()
                self.state = 1336
                self.number_s()
                self.state = 1341
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,140,self._ctx)
                if la_ == 1:
                    self.state = 1337
                    self.number_s()
                    self.state = 1338
                    self.number_s()
                    self.state = 1339
                    self.number_s()


                self.state = 1347
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,141,self._ctx)
                if la_ == 1:
                    self.state = 1343
                    self.number_s()
                    self.state = 1344
                    self.number_s()
                    self.state = 1345
                    self.number_s()


                self.state = 1353
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 180)) & ~0x3f) == 0 and ((1 << (_la - 180)) & ((1 << (XplorMRParser.Integer - 180)) | (1 << (XplorMRParser.Real - 180)) | (1 << (XplorMRParser.Symbol_name - 180)))) != 0):
                    self.state = 1349
                    self.number_s()
                    self.state = 1350
                    self.number_s()
                    self.state = 1351
                    self.number_s()


                pass
            elif token in [XplorMRParser.Print]:
                self.enterOuterAlt(localctx, 8)
                self.state = 1355
                self.match(XplorMRParser.Print)
                self.state = 1356
                self.match(XplorMRParser.Threshold)
                self.state = 1357
                self.number_s()
                self.state = 1364
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [XplorMRParser.All]:
                    self.state = 1358
                    self.match(XplorMRParser.All)
                    pass
                elif token in [XplorMRParser.Classification]:
                    self.state = 1359
                    self.match(XplorMRParser.Classification)
                    self.state = 1361
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==XplorMRParser.Equ_op:
                        self.state = 1360
                        self.match(XplorMRParser.Equ_op)


                    self.state = 1363
                    self.match(XplorMRParser.Simple_name)
                    pass
                else:
                    raise NoViableAltException(self)

                pass
            elif token in [XplorMRParser.Quartic]:
                self.enterOuterAlt(localctx, 9)
                self.state = 1366
                self.match(XplorMRParser.Quartic)
                self.state = 1367
                self.number_s()
                self.state = 1368
                self.number_s()
                self.state = 1369
                self.number_s()
                self.state = 1374
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,145,self._ctx)
                if la_ == 1:
                    self.state = 1370
                    self.number_s()
                    self.state = 1371
                    self.number_s()
                    self.state = 1372
                    self.number_s()


                self.state = 1380
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,146,self._ctx)
                if la_ == 1:
                    self.state = 1376
                    self.number_s()
                    self.state = 1377
                    self.number_s()
                    self.state = 1378
                    self.number_s()


                self.state = 1386
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 180)) & ~0x3f) == 0 and ((1 << (_la - 180)) & ((1 << (XplorMRParser.Integer - 180)) | (1 << (XplorMRParser.Real - 180)) | (1 << (XplorMRParser.Symbol_name - 180)))) != 0):
                    self.state = 1382
                    self.number_s()
                    self.state = 1383
                    self.number_s()
                    self.state = 1384
                    self.number_s()


                pass
            elif token in [XplorMRParser.Reset]:
                self.enterOuterAlt(localctx, 10)
                self.state = 1388
                self.match(XplorMRParser.Reset)
                pass
            elif token in [XplorMRParser.Scale]:
                self.enterOuterAlt(localctx, 11)
                self.state = 1389
                self.match(XplorMRParser.Scale)
                self.state = 1391
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 1390
                    self.match(XplorMRParser.Equ_op)


                self.state = 1393
                self.number_s()
                pass
            elif token in [XplorMRParser.Shape]:
                self.enterOuterAlt(localctx, 12)
                self.state = 1394
                self.match(XplorMRParser.Shape)
                self.state = 1395
                self.match(XplorMRParser.Gauss_or_Quart)
                pass
            elif token in [XplorMRParser.Size]:
                self.enterOuterAlt(localctx, 13)
                self.state = 1396
                self.match(XplorMRParser.Size)
                self.state = 1397
                self.match(XplorMRParser.Dimensions)
                self.state = 1398
                self.number_s()
                self.state = 1400
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,149,self._ctx)
                if la_ == 1:
                    self.state = 1399
                    self.number_s()


                self.state = 1403
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,150,self._ctx)
                if la_ == 1:
                    self.state = 1402
                    self.number_s()


                self.state = 1406
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 180)) & ~0x3f) == 0 and ((1 << (_la - 180)) & ((1 << (XplorMRParser.Integer - 180)) | (1 << (XplorMRParser.Real - 180)) | (1 << (XplorMRParser.Symbol_name - 180)))) != 0):
                    self.state = 1405
                    self.number_s()


                pass
            elif token in [XplorMRParser.Sort]:
                self.enterOuterAlt(localctx, 14)
                self.state = 1408
                self.match(XplorMRParser.Sort)
                pass
            elif token in [XplorMRParser.Zero]:
                self.enterOuterAlt(localctx, 15)
                self.state = 1409
                self.match(XplorMRParser.Zero)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Rama_assignContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Assign(self):
            return self.getToken(XplorMRParser.Assign, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.SelectionContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_rama_assign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRama_assign" ):
                listener.enterRama_assign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRama_assign" ):
                listener.exitRama_assign(self)




    def rama_assign(self):

        localctx = XplorMRParser.Rama_assignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 126, self.RULE_rama_assign)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1412
            self.match(XplorMRParser.Assign)
            self.state = 1413
            self.selection()
            self.state = 1414
            self.selection()
            self.state = 1415
            self.selection()
            self.state = 1416
            self.selection()
            self.state = 1422
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,153,self._ctx)
            if la_ == 1:
                self.state = 1417
                self.selection()
                self.state = 1418
                self.selection()
                self.state = 1419
                self.selection()
                self.state = 1420
                self.selection()


            self.state = 1429
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,154,self._ctx)
            if la_ == 1:
                self.state = 1424
                self.selection()
                self.state = 1425
                self.selection()
                self.state = 1426
                self.selection()
                self.state = 1427
                self.selection()


            self.state = 1436
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==XplorMRParser.L_paren:
                self.state = 1431
                self.selection()
                self.state = 1432
                self.selection()
                self.state = 1433
                self.selection()
                self.state = 1434
                self.selection()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Collapse_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def coll_assign(self):
            return self.getTypedRuleContext(XplorMRParser.Coll_assignContext,0)


        def coll_assign_loop(self):
            return self.getTypedRuleContext(XplorMRParser.Coll_assign_loopContext,0)


        def Scale(self):
            return self.getToken(XplorMRParser.Scale, 0)

        def number_s(self):
            return self.getTypedRuleContext(XplorMRParser.Number_sContext,0)


        def Equ_op(self):
            return self.getToken(XplorMRParser.Equ_op, 0)

        def Print(self):
            return self.getToken(XplorMRParser.Print, 0)

        def Reset(self):
            return self.getToken(XplorMRParser.Reset, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_collapse_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCollapse_statement" ):
                listener.enterCollapse_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCollapse_statement" ):
                listener.exitCollapse_statement(self)




    def collapse_statement(self):

        localctx = XplorMRParser.Collapse_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 128, self.RULE_collapse_statement)
        self._la = 0 # Token type
        try:
            self.state = 1447
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [XplorMRParser.Assign]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1438
                self.coll_assign()
                pass
            elif token in [XplorMRParser.For]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1439
                self.coll_assign_loop()
                pass
            elif token in [XplorMRParser.Scale]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1440
                self.match(XplorMRParser.Scale)
                self.state = 1442
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 1441
                    self.match(XplorMRParser.Equ_op)


                self.state = 1444
                self.number_s()
                pass
            elif token in [XplorMRParser.Print]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1445
                self.match(XplorMRParser.Print)
                pass
            elif token in [XplorMRParser.Reset]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1446
                self.match(XplorMRParser.Reset)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Coll_assignContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Assign(self):
            return self.getToken(XplorMRParser.Assign, 0)

        def selection(self):
            return self.getTypedRuleContext(XplorMRParser.SelectionContext,0)


        def number(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.NumberContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.NumberContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_coll_assign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColl_assign" ):
                listener.enterColl_assign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColl_assign" ):
                listener.exitColl_assign(self)




    def coll_assign(self):

        localctx = XplorMRParser.Coll_assignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 130, self.RULE_coll_assign)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1449
            self.match(XplorMRParser.Assign)
            self.state = 1450
            self.selection()
            self.state = 1451
            self.number()
            self.state = 1452
            self.number()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Diffusion_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def dani_assign(self):
            return self.getTypedRuleContext(XplorMRParser.Dani_assignContext,0)


        def Classification(self):
            return self.getToken(XplorMRParser.Classification, 0)

        def Simple_name(self):
            return self.getToken(XplorMRParser.Simple_name, 0)

        def Equ_op(self):
            return self.getToken(XplorMRParser.Equ_op, 0)

        def Coefficients(self):
            return self.getToken(XplorMRParser.Coefficients, 0)

        def number_s(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Number_sContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Number_sContext,i)


        def ForceConstant(self):
            return self.getToken(XplorMRParser.ForceConstant, 0)

        def Nrestraints(self):
            return self.getToken(XplorMRParser.Nrestraints, 0)

        def Integer(self):
            return self.getToken(XplorMRParser.Integer, 0)

        def Potential(self):
            return self.getToken(XplorMRParser.Potential, 0)

        def Potential_types(self):
            return self.getToken(XplorMRParser.Potential_types, 0)

        def Print(self):
            return self.getToken(XplorMRParser.Print, 0)

        def Threshold(self):
            return self.getToken(XplorMRParser.Threshold, 0)

        def Reset(self):
            return self.getToken(XplorMRParser.Reset, 0)

        def Type(self):
            return self.getToken(XplorMRParser.Type, 0)

        def Rdc_or_Diff_anis_types(self):
            return self.getToken(XplorMRParser.Rdc_or_Diff_anis_types, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_diffusion_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDiffusion_statement" ):
                listener.enterDiffusion_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDiffusion_statement" ):
                listener.exitDiffusion_statement(self)




    def diffusion_statement(self):

        localctx = XplorMRParser.Diffusion_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 132, self.RULE_diffusion_statement)
        self._la = 0 # Token type
        try:
            self.state = 1485
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [XplorMRParser.Assign]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1454
                self.dani_assign()
                pass
            elif token in [XplorMRParser.Classification]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1455
                self.match(XplorMRParser.Classification)
                self.state = 1457
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 1456
                    self.match(XplorMRParser.Equ_op)


                self.state = 1459
                self.match(XplorMRParser.Simple_name)
                pass
            elif token in [XplorMRParser.Coefficients]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1460
                self.match(XplorMRParser.Coefficients)
                self.state = 1461
                self.number_s()
                self.state = 1462
                self.number_s()
                self.state = 1463
                self.number_s()
                self.state = 1464
                self.number_s()
                self.state = 1465
                self.number_s()
                pass
            elif token in [XplorMRParser.ForceConstant]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1467
                self.match(XplorMRParser.ForceConstant)
                self.state = 1469
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 1468
                    self.match(XplorMRParser.Equ_op)


                self.state = 1471
                self.number_s()
                pass
            elif token in [XplorMRParser.Nrestraints]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1472
                self.match(XplorMRParser.Nrestraints)
                self.state = 1474
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 1473
                    self.match(XplorMRParser.Equ_op)


                self.state = 1476
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.Potential]:
                self.enterOuterAlt(localctx, 6)
                self.state = 1477
                self.match(XplorMRParser.Potential)
                self.state = 1478
                self.match(XplorMRParser.Potential_types)
                pass
            elif token in [XplorMRParser.Print]:
                self.enterOuterAlt(localctx, 7)
                self.state = 1479
                self.match(XplorMRParser.Print)
                self.state = 1480
                self.match(XplorMRParser.Threshold)
                self.state = 1481
                self.number_s()
                pass
            elif token in [XplorMRParser.Reset]:
                self.enterOuterAlt(localctx, 8)
                self.state = 1482
                self.match(XplorMRParser.Reset)
                pass
            elif token in [XplorMRParser.Type]:
                self.enterOuterAlt(localctx, 9)
                self.state = 1483
                self.match(XplorMRParser.Type)
                self.state = 1484
                self.match(XplorMRParser.Rdc_or_Diff_anis_types)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Dani_assignContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Assign(self):
            return self.getToken(XplorMRParser.Assign, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.SelectionContext,i)


        def number(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.NumberContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.NumberContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_dani_assign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDani_assign" ):
                listener.enterDani_assign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDani_assign" ):
                listener.exitDani_assign(self)




    def dani_assign(self):

        localctx = XplorMRParser.Dani_assignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 134, self.RULE_dani_assign)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1487
            self.match(XplorMRParser.Assign)
            self.state = 1488
            self.selection()
            self.state = 1489
            self.selection()
            self.state = 1490
            self.selection()
            self.state = 1491
            self.selection()
            self.state = 1492
            self.selection()
            self.state = 1493
            self.selection()
            self.state = 1494
            self.number()
            self.state = 1496
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 180)) & ~0x3f) == 0 and ((1 << (_la - 180)) & ((1 << (XplorMRParser.Integer - 180)) | (1 << (XplorMRParser.Real - 180)) | (1 << (XplorMRParser.Symbol_name - 180)))) != 0):
                self.state = 1495
                self.number()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Orientation_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def orie_assign(self):
            return self.getTypedRuleContext(XplorMRParser.Orie_assignContext,0)


        def Classification(self):
            return self.getToken(XplorMRParser.Classification, 0)

        def Simple_name(self):
            return self.getToken(XplorMRParser.Simple_name, 0)

        def Equ_op(self):
            return self.getToken(XplorMRParser.Equ_op, 0)

        def Cutoff(self):
            return self.getToken(XplorMRParser.Cutoff, 0)

        def number_s(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Number_sContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Number_sContext,i)


        def Height(self):
            return self.getToken(XplorMRParser.Height, 0)

        def ForceConstant(self):
            return self.getToken(XplorMRParser.ForceConstant, 0)

        def Gaussian(self):
            return self.getToken(XplorMRParser.Gaussian, 0)

        def MaxGaussians(self):
            return self.getToken(XplorMRParser.MaxGaussians, 0)

        def Integer(self):
            return self.getToken(XplorMRParser.Integer, 0)

        def NewGaussian(self):
            return self.getToken(XplorMRParser.NewGaussian, 0)

        def Nrestraints(self):
            return self.getToken(XplorMRParser.Nrestraints, 0)

        def Print(self):
            return self.getToken(XplorMRParser.Print, 0)

        def Threshold(self):
            return self.getToken(XplorMRParser.Threshold, 0)

        def All(self):
            return self.getToken(XplorMRParser.All, 0)

        def Quartic(self):
            return self.getToken(XplorMRParser.Quartic, 0)

        def Reset(self):
            return self.getToken(XplorMRParser.Reset, 0)

        def Residue(self):
            return self.getToken(XplorMRParser.Residue, 0)

        def Size(self):
            return self.getToken(XplorMRParser.Size, 0)

        def Zero(self):
            return self.getToken(XplorMRParser.Zero, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_orientation_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOrientation_statement" ):
                listener.enterOrientation_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOrientation_statement" ):
                listener.exitOrientation_statement(self)




    def orientation_statement(self):

        localctx = XplorMRParser.Orientation_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 136, self.RULE_orientation_statement)
        self._la = 0 # Token type
        try:
            self.state = 1567
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [XplorMRParser.Assign]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1498
                self.orie_assign()
                pass
            elif token in [XplorMRParser.Classification]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1499
                self.match(XplorMRParser.Classification)
                self.state = 1501
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 1500
                    self.match(XplorMRParser.Equ_op)


                self.state = 1503
                self.match(XplorMRParser.Simple_name)
                pass
            elif token in [XplorMRParser.Cutoff]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1504
                self.match(XplorMRParser.Cutoff)
                self.state = 1505
                self.number_s()
                pass
            elif token in [XplorMRParser.Height]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1506
                self.match(XplorMRParser.Height)
                self.state = 1507
                self.number_s()
                pass
            elif token in [XplorMRParser.ForceConstant]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1508
                self.match(XplorMRParser.ForceConstant)
                self.state = 1510
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 1509
                    self.match(XplorMRParser.Equ_op)


                self.state = 1512
                self.number_s()
                pass
            elif token in [XplorMRParser.Gaussian]:
                self.enterOuterAlt(localctx, 6)
                self.state = 1513
                self.match(XplorMRParser.Gaussian)
                self.state = 1514
                self.number_s()
                self.state = 1515
                self.number_s()
                self.state = 1516
                self.number_s()
                self.state = 1517
                self.number_s()
                self.state = 1518
                self.number_s()
                self.state = 1519
                self.number_s()
                self.state = 1520
                self.number_s()
                pass
            elif token in [XplorMRParser.MaxGaussians]:
                self.enterOuterAlt(localctx, 7)
                self.state = 1522
                self.match(XplorMRParser.MaxGaussians)
                self.state = 1523
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.NewGaussian]:
                self.enterOuterAlt(localctx, 8)
                self.state = 1524
                self.match(XplorMRParser.NewGaussian)
                self.state = 1525
                self.number_s()
                self.state = 1526
                self.number_s()
                self.state = 1527
                self.number_s()
                self.state = 1528
                self.number_s()
                self.state = 1529
                self.number_s()
                self.state = 1530
                self.number_s()
                self.state = 1531
                self.number_s()
                self.state = 1532
                self.number_s()
                pass
            elif token in [XplorMRParser.Nrestraints]:
                self.enterOuterAlt(localctx, 9)
                self.state = 1534
                self.match(XplorMRParser.Nrestraints)
                self.state = 1536
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 1535
                    self.match(XplorMRParser.Equ_op)


                self.state = 1538
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.Print]:
                self.enterOuterAlt(localctx, 10)
                self.state = 1539
                self.match(XplorMRParser.Print)
                self.state = 1540
                self.match(XplorMRParser.Threshold)
                self.state = 1541
                self.number_s()
                self.state = 1548
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [XplorMRParser.All]:
                    self.state = 1542
                    self.match(XplorMRParser.All)
                    pass
                elif token in [XplorMRParser.Classification]:
                    self.state = 1543
                    self.match(XplorMRParser.Classification)
                    self.state = 1545
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==XplorMRParser.Equ_op:
                        self.state = 1544
                        self.match(XplorMRParser.Equ_op)


                    self.state = 1547
                    self.match(XplorMRParser.Simple_name)
                    pass
                else:
                    raise NoViableAltException(self)

                pass
            elif token in [XplorMRParser.Quartic]:
                self.enterOuterAlt(localctx, 11)
                self.state = 1550
                self.match(XplorMRParser.Quartic)
                self.state = 1551
                self.number_s()
                self.state = 1552
                self.number_s()
                self.state = 1553
                self.number_s()
                self.state = 1554
                self.number_s()
                self.state = 1555
                self.number_s()
                self.state = 1556
                self.number_s()
                self.state = 1557
                self.number_s()
                pass
            elif token in [XplorMRParser.Reset]:
                self.enterOuterAlt(localctx, 12)
                self.state = 1559
                self.match(XplorMRParser.Reset)
                pass
            elif token in [XplorMRParser.Residue]:
                self.enterOuterAlt(localctx, 13)
                self.state = 1560
                self.match(XplorMRParser.Residue)
                self.state = 1561
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.Size]:
                self.enterOuterAlt(localctx, 14)
                self.state = 1562
                self.match(XplorMRParser.Size)
                self.state = 1563
                self.number_s()
                self.state = 1564
                self.number_s()
                pass
            elif token in [XplorMRParser.Zero]:
                self.enterOuterAlt(localctx, 15)
                self.state = 1566
                self.match(XplorMRParser.Zero)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Orie_assignContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Assign(self):
            return self.getToken(XplorMRParser.Assign, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.SelectionContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_orie_assign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOrie_assign" ):
                listener.enterOrie_assign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOrie_assign" ):
                listener.exitOrie_assign(self)




    def orie_assign(self):

        localctx = XplorMRParser.Orie_assignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 138, self.RULE_orie_assign)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1569
            self.match(XplorMRParser.Assign)
            self.state = 1570
            self.selection()
            self.state = 1571
            self.selection()
            self.state = 1572
            self.selection()
            self.state = 1573
            self.selection()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Csa_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def csa_assign(self):
            return self.getTypedRuleContext(XplorMRParser.Csa_assignContext,0)


        def csa_assign_loop(self):
            return self.getTypedRuleContext(XplorMRParser.Csa_assign_loopContext,0)


        def Classification(self):
            return self.getToken(XplorMRParser.Classification, 0)

        def Simple_name(self):
            return self.getToken(XplorMRParser.Simple_name, 0)

        def Equ_op(self):
            return self.getToken(XplorMRParser.Equ_op, 0)

        def Scale(self):
            return self.getToken(XplorMRParser.Scale, 0)

        def number_s(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Number_sContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Number_sContext,i)


        def Type(self):
            return self.getToken(XplorMRParser.Type, 0)

        def Csa_types(self):
            return self.getToken(XplorMRParser.Csa_types, 0)

        def Coefficients(self):
            return self.getToken(XplorMRParser.Coefficients, 0)

        def Sigma(self):
            return self.getToken(XplorMRParser.Sigma, 0)

        def ForceConstant(self):
            return self.getToken(XplorMRParser.ForceConstant, 0)

        def Nrestraints(self):
            return self.getToken(XplorMRParser.Nrestraints, 0)

        def Integer(self):
            return self.getToken(XplorMRParser.Integer, 0)

        def Potential(self):
            return self.getToken(XplorMRParser.Potential, 0)

        def Potential_types(self):
            return self.getToken(XplorMRParser.Potential_types, 0)

        def Print(self):
            return self.getToken(XplorMRParser.Print, 0)

        def Threshold(self):
            return self.getToken(XplorMRParser.Threshold, 0)

        def Reset(self):
            return self.getToken(XplorMRParser.Reset, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_csa_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCsa_statement" ):
                listener.enterCsa_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCsa_statement" ):
                listener.exitCsa_statement(self)




    def csa_statement(self):

        localctx = XplorMRParser.Csa_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 140, self.RULE_csa_statement)
        self._la = 0 # Token type
        try:
            self.state = 1615
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [XplorMRParser.Assign]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1575
                self.csa_assign()
                pass
            elif token in [XplorMRParser.For]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1576
                self.csa_assign_loop()
                pass
            elif token in [XplorMRParser.Classification]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1577
                self.match(XplorMRParser.Classification)
                self.state = 1579
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 1578
                    self.match(XplorMRParser.Equ_op)


                self.state = 1581
                self.match(XplorMRParser.Simple_name)
                pass
            elif token in [XplorMRParser.Scale]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1582
                self.match(XplorMRParser.Scale)
                self.state = 1584
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 1583
                    self.match(XplorMRParser.Equ_op)


                self.state = 1586
                self.number_s()
                pass
            elif token in [XplorMRParser.Type]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1587
                self.match(XplorMRParser.Type)
                self.state = 1588
                self.match(XplorMRParser.Csa_types)
                pass
            elif token in [XplorMRParser.Coefficients]:
                self.enterOuterAlt(localctx, 6)
                self.state = 1589
                self.match(XplorMRParser.Coefficients)
                self.state = 1590
                self.number_s()
                self.state = 1591
                self.number_s()
                self.state = 1592
                self.number_s()
                pass
            elif token in [XplorMRParser.Sigma]:
                self.enterOuterAlt(localctx, 7)
                self.state = 1594
                self.match(XplorMRParser.Sigma)
                self.state = 1595
                self.number_s()
                self.state = 1596
                self.number_s()
                self.state = 1597
                self.number_s()
                pass
            elif token in [XplorMRParser.ForceConstant]:
                self.enterOuterAlt(localctx, 8)
                self.state = 1599
                self.match(XplorMRParser.ForceConstant)
                self.state = 1601
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 1600
                    self.match(XplorMRParser.Equ_op)


                self.state = 1603
                self.number_s()
                pass
            elif token in [XplorMRParser.Nrestraints]:
                self.enterOuterAlt(localctx, 9)
                self.state = 1604
                self.match(XplorMRParser.Nrestraints)
                self.state = 1606
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 1605
                    self.match(XplorMRParser.Equ_op)


                self.state = 1608
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.Potential]:
                self.enterOuterAlt(localctx, 10)
                self.state = 1609
                self.match(XplorMRParser.Potential)
                self.state = 1610
                self.match(XplorMRParser.Potential_types)
                pass
            elif token in [XplorMRParser.Print]:
                self.enterOuterAlt(localctx, 11)
                self.state = 1611
                self.match(XplorMRParser.Print)
                self.state = 1612
                self.match(XplorMRParser.Threshold)
                self.state = 1613
                self.number_s()
                pass
            elif token in [XplorMRParser.Reset]:
                self.enterOuterAlt(localctx, 12)
                self.state = 1614
                self.match(XplorMRParser.Reset)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Csa_assignContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Assign(self):
            return self.getToken(XplorMRParser.Assign, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.SelectionContext,i)


        def number(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.NumberContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.NumberContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_csa_assign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCsa_assign" ):
                listener.enterCsa_assign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCsa_assign" ):
                listener.exitCsa_assign(self)




    def csa_assign(self):

        localctx = XplorMRParser.Csa_assignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 142, self.RULE_csa_assign)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1617
            self.match(XplorMRParser.Assign)
            self.state = 1618
            self.selection()
            self.state = 1619
            self.selection()
            self.state = 1620
            self.selection()
            self.state = 1621
            self.selection()
            self.state = 1622
            self.selection()
            self.state = 1623
            self.selection()
            self.state = 1624
            self.selection()
            self.state = 1625
            self.number()
            self.state = 1627
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,174,self._ctx)
            if la_ == 1:
                self.state = 1626
                self.number()


            self.state = 1630
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 180)) & ~0x3f) == 0 and ((1 << (_la - 180)) & ((1 << (XplorMRParser.Integer - 180)) | (1 << (XplorMRParser.Real - 180)) | (1 << (XplorMRParser.Symbol_name - 180)))) != 0):
                self.state = 1629
                self.number()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pcsa_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def csa_assign(self):
            return self.getTypedRuleContext(XplorMRParser.Csa_assignContext,0)


        def Classification(self):
            return self.getToken(XplorMRParser.Classification, 0)

        def Simple_name(self):
            return self.getToken(XplorMRParser.Simple_name, 0)

        def Equ_op(self):
            return self.getToken(XplorMRParser.Equ_op, 0)

        def Scale(self):
            return self.getToken(XplorMRParser.Scale, 0)

        def number_s(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Number_sContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Number_sContext,i)


        def Coefficients(self):
            return self.getToken(XplorMRParser.Coefficients, 0)

        def Sigma(self):
            return self.getToken(XplorMRParser.Sigma, 0)

        def ForceConstant(self):
            return self.getToken(XplorMRParser.ForceConstant, 0)

        def Nrestraints(self):
            return self.getToken(XplorMRParser.Nrestraints, 0)

        def Integer(self):
            return self.getToken(XplorMRParser.Integer, 0)

        def Potential(self):
            return self.getToken(XplorMRParser.Potential, 0)

        def Potential_types(self):
            return self.getToken(XplorMRParser.Potential_types, 0)

        def Print(self):
            return self.getToken(XplorMRParser.Print, 0)

        def Threshold(self):
            return self.getToken(XplorMRParser.Threshold, 0)

        def Reset(self):
            return self.getToken(XplorMRParser.Reset, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_pcsa_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPcsa_statement" ):
                listener.enterPcsa_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPcsa_statement" ):
                listener.exitPcsa_statement(self)




    def pcsa_statement(self):

        localctx = XplorMRParser.Pcsa_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 144, self.RULE_pcsa_statement)
        self._la = 0 # Token type
        try:
            self.state = 1670
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [XplorMRParser.Assign]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1632
                self.csa_assign()
                pass
            elif token in [XplorMRParser.Classification]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1633
                self.match(XplorMRParser.Classification)
                self.state = 1635
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 1634
                    self.match(XplorMRParser.Equ_op)


                self.state = 1637
                self.match(XplorMRParser.Simple_name)
                pass
            elif token in [XplorMRParser.Scale]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1638
                self.match(XplorMRParser.Scale)
                self.state = 1640
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 1639
                    self.match(XplorMRParser.Equ_op)


                self.state = 1642
                self.number_s()
                pass
            elif token in [XplorMRParser.Coefficients]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1643
                self.match(XplorMRParser.Coefficients)
                self.state = 1644
                self.number_s()
                self.state = 1645
                self.number_s()
                self.state = 1646
                self.number_s()
                pass
            elif token in [XplorMRParser.Sigma]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1648
                self.match(XplorMRParser.Sigma)
                self.state = 1649
                self.number_s()
                self.state = 1650
                self.number_s()
                self.state = 1651
                self.number_s()
                self.state = 1652
                self.number_s()
                pass
            elif token in [XplorMRParser.ForceConstant]:
                self.enterOuterAlt(localctx, 6)
                self.state = 1654
                self.match(XplorMRParser.ForceConstant)
                self.state = 1656
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 1655
                    self.match(XplorMRParser.Equ_op)


                self.state = 1658
                self.number_s()
                pass
            elif token in [XplorMRParser.Nrestraints]:
                self.enterOuterAlt(localctx, 7)
                self.state = 1659
                self.match(XplorMRParser.Nrestraints)
                self.state = 1661
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 1660
                    self.match(XplorMRParser.Equ_op)


                self.state = 1663
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.Potential]:
                self.enterOuterAlt(localctx, 8)
                self.state = 1664
                self.match(XplorMRParser.Potential)
                self.state = 1665
                self.match(XplorMRParser.Potential_types)
                pass
            elif token in [XplorMRParser.Print]:
                self.enterOuterAlt(localctx, 9)
                self.state = 1666
                self.match(XplorMRParser.Print)
                self.state = 1667
                self.match(XplorMRParser.Threshold)
                self.state = 1668
                self.number_s()
                pass
            elif token in [XplorMRParser.Reset]:
                self.enterOuterAlt(localctx, 10)
                self.state = 1669
                self.match(XplorMRParser.Reset)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class One_bond_coupling_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def one_bond_assign(self):
            return self.getTypedRuleContext(XplorMRParser.One_bond_assignContext,0)


        def Classification(self):
            return self.getToken(XplorMRParser.Classification, 0)

        def Simple_name(self):
            return self.getToken(XplorMRParser.Simple_name, 0)

        def Equ_op(self):
            return self.getToken(XplorMRParser.Equ_op, 0)

        def Coefficients(self):
            return self.getToken(XplorMRParser.Coefficients, 0)

        def number_s(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Number_sContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Number_sContext,i)


        def ForceConstant(self):
            return self.getToken(XplorMRParser.ForceConstant, 0)

        def Nrestraints(self):
            return self.getToken(XplorMRParser.Nrestraints, 0)

        def Integer(self):
            return self.getToken(XplorMRParser.Integer, 0)

        def Potential(self):
            return self.getToken(XplorMRParser.Potential, 0)

        def Potential_types(self):
            return self.getToken(XplorMRParser.Potential_types, 0)

        def Print(self):
            return self.getToken(XplorMRParser.Print, 0)

        def Threshold(self):
            return self.getToken(XplorMRParser.Threshold, 0)

        def Reset(self):
            return self.getToken(XplorMRParser.Reset, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_one_bond_coupling_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOne_bond_coupling_statement" ):
                listener.enterOne_bond_coupling_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOne_bond_coupling_statement" ):
                listener.exitOne_bond_coupling_statement(self)




    def one_bond_coupling_statement(self):

        localctx = XplorMRParser.One_bond_coupling_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 146, self.RULE_one_bond_coupling_statement)
        self._la = 0 # Token type
        try:
            self.state = 1703
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [XplorMRParser.Assign]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1672
                self.one_bond_assign()
                pass
            elif token in [XplorMRParser.Classification]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1673
                self.match(XplorMRParser.Classification)
                self.state = 1675
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 1674
                    self.match(XplorMRParser.Equ_op)


                self.state = 1677
                self.match(XplorMRParser.Simple_name)
                pass
            elif token in [XplorMRParser.Coefficients]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1678
                self.match(XplorMRParser.Coefficients)
                self.state = 1679
                self.number_s()
                self.state = 1680
                self.number_s()
                self.state = 1681
                self.number_s()
                self.state = 1682
                self.number_s()
                self.state = 1683
                self.number_s()
                self.state = 1684
                self.number_s()
                self.state = 1685
                self.number_s()
                pass
            elif token in [XplorMRParser.ForceConstant]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1687
                self.match(XplorMRParser.ForceConstant)
                self.state = 1689
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 1688
                    self.match(XplorMRParser.Equ_op)


                self.state = 1691
                self.number_s()
                pass
            elif token in [XplorMRParser.Nrestraints]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1692
                self.match(XplorMRParser.Nrestraints)
                self.state = 1694
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 1693
                    self.match(XplorMRParser.Equ_op)


                self.state = 1696
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.Potential]:
                self.enterOuterAlt(localctx, 6)
                self.state = 1697
                self.match(XplorMRParser.Potential)
                self.state = 1698
                self.match(XplorMRParser.Potential_types)
                pass
            elif token in [XplorMRParser.Print]:
                self.enterOuterAlt(localctx, 7)
                self.state = 1699
                self.match(XplorMRParser.Print)
                self.state = 1700
                self.match(XplorMRParser.Threshold)
                self.state = 1701
                self.number_s()
                pass
            elif token in [XplorMRParser.Reset]:
                self.enterOuterAlt(localctx, 8)
                self.state = 1702
                self.match(XplorMRParser.Reset)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class One_bond_assignContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Assign(self):
            return self.getToken(XplorMRParser.Assign, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.SelectionContext,i)


        def number(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.NumberContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.NumberContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_one_bond_assign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOne_bond_assign" ):
                listener.enterOne_bond_assign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOne_bond_assign" ):
                listener.exitOne_bond_assign(self)




    def one_bond_assign(self):

        localctx = XplorMRParser.One_bond_assignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 148, self.RULE_one_bond_assign)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1705
            self.match(XplorMRParser.Assign)
            self.state = 1706
            self.selection()
            self.state = 1707
            self.selection()
            self.state = 1708
            self.selection()
            self.state = 1709
            self.selection()
            self.state = 1710
            self.selection()
            self.state = 1711
            self.selection()
            self.state = 1712
            self.selection()
            self.state = 1713
            self.selection()
            self.state = 1714
            self.number()
            self.state = 1715
            self.number()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Angle_db_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def angle_db_assign(self):
            return self.getTypedRuleContext(XplorMRParser.Angle_db_assignContext,0)


        def Classification(self):
            return self.getToken(XplorMRParser.Classification, 0)

        def Simple_name(self):
            return self.getToken(XplorMRParser.Simple_name, 0)

        def Equ_op(self):
            return self.getToken(XplorMRParser.Equ_op, 0)

        def DerivFlag(self):
            return self.getToken(XplorMRParser.DerivFlag, 0)

        def Expectation(self):
            return self.getToken(XplorMRParser.Expectation, 0)

        def Integer(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Integer)
            else:
                return self.getToken(XplorMRParser.Integer, i)

        def number_s(self):
            return self.getTypedRuleContext(XplorMRParser.Number_sContext,0)


        def Error(self):
            return self.getToken(XplorMRParser.Error, 0)

        def ForceConstant(self):
            return self.getToken(XplorMRParser.ForceConstant, 0)

        def Nrestraints(self):
            return self.getToken(XplorMRParser.Nrestraints, 0)

        def Potential(self):
            return self.getToken(XplorMRParser.Potential, 0)

        def Potential_types(self):
            return self.getToken(XplorMRParser.Potential_types, 0)

        def Print(self):
            return self.getToken(XplorMRParser.Print, 0)

        def Threshold(self):
            return self.getToken(XplorMRParser.Threshold, 0)

        def All(self):
            return self.getToken(XplorMRParser.All, 0)

        def Reset(self):
            return self.getToken(XplorMRParser.Reset, 0)

        def Size(self):
            return self.getToken(XplorMRParser.Size, 0)

        def Angle_or_Dihedral(self):
            return self.getToken(XplorMRParser.Angle_or_Dihedral, 0)

        def Zero(self):
            return self.getToken(XplorMRParser.Zero, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_angle_db_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAngle_db_statement" ):
                listener.enterAngle_db_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAngle_db_statement" ):
                listener.exitAngle_db_statement(self)




    def angle_db_statement(self):

        localctx = XplorMRParser.Angle_db_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 150, self.RULE_angle_db_statement)
        self._la = 0 # Token type
        try:
            self.state = 1760
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [XplorMRParser.Assign]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1717
                self.angle_db_assign()
                pass
            elif token in [XplorMRParser.Classification]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1718
                self.match(XplorMRParser.Classification)
                self.state = 1720
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 1719
                    self.match(XplorMRParser.Equ_op)


                self.state = 1722
                self.match(XplorMRParser.Simple_name)
                pass
            elif token in [XplorMRParser.DerivFlag]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1723
                self.match(XplorMRParser.DerivFlag)
                self.state = 1724
                self.match(XplorMRParser.Simple_name)
                pass
            elif token in [XplorMRParser.Expectation]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1725
                self.match(XplorMRParser.Expectation)
                self.state = 1726
                self.match(XplorMRParser.Integer)
                self.state = 1727
                self.match(XplorMRParser.Integer)
                self.state = 1728
                self.number_s()
                pass
            elif token in [XplorMRParser.Error]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1729
                self.match(XplorMRParser.Error)
                self.state = 1730
                self.number_s()
                pass
            elif token in [XplorMRParser.ForceConstant]:
                self.enterOuterAlt(localctx, 6)
                self.state = 1731
                self.match(XplorMRParser.ForceConstant)
                self.state = 1733
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 1732
                    self.match(XplorMRParser.Equ_op)


                self.state = 1735
                self.number_s()
                pass
            elif token in [XplorMRParser.Nrestraints]:
                self.enterOuterAlt(localctx, 7)
                self.state = 1736
                self.match(XplorMRParser.Nrestraints)
                self.state = 1738
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 1737
                    self.match(XplorMRParser.Equ_op)


                self.state = 1740
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.Potential]:
                self.enterOuterAlt(localctx, 8)
                self.state = 1741
                self.match(XplorMRParser.Potential)
                self.state = 1742
                self.match(XplorMRParser.Potential_types)
                pass
            elif token in [XplorMRParser.Print]:
                self.enterOuterAlt(localctx, 9)
                self.state = 1743
                self.match(XplorMRParser.Print)
                self.state = 1744
                self.match(XplorMRParser.Threshold)
                self.state = 1745
                self.number_s()
                self.state = 1752
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [XplorMRParser.All]:
                    self.state = 1746
                    self.match(XplorMRParser.All)
                    pass
                elif token in [XplorMRParser.Classification]:
                    self.state = 1747
                    self.match(XplorMRParser.Classification)
                    self.state = 1749
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==XplorMRParser.Equ_op:
                        self.state = 1748
                        self.match(XplorMRParser.Equ_op)


                    self.state = 1751
                    self.match(XplorMRParser.Simple_name)
                    pass
                else:
                    raise NoViableAltException(self)

                pass
            elif token in [XplorMRParser.Reset]:
                self.enterOuterAlt(localctx, 10)
                self.state = 1754
                self.match(XplorMRParser.Reset)
                pass
            elif token in [XplorMRParser.Size]:
                self.enterOuterAlt(localctx, 11)
                self.state = 1755
                self.match(XplorMRParser.Size)
                self.state = 1756
                self.match(XplorMRParser.Angle_or_Dihedral)
                self.state = 1757
                self.match(XplorMRParser.Integer)
                self.state = 1758
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.Zero]:
                self.enterOuterAlt(localctx, 12)
                self.state = 1759
                self.match(XplorMRParser.Zero)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Angle_db_assignContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Assign(self):
            return self.getToken(XplorMRParser.Assign, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.SelectionContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_angle_db_assign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAngle_db_assign" ):
                listener.enterAngle_db_assign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAngle_db_assign" ):
                listener.exitAngle_db_assign(self)




    def angle_db_assign(self):

        localctx = XplorMRParser.Angle_db_assignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 152, self.RULE_angle_db_assign)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1762
            self.match(XplorMRParser.Assign)
            self.state = 1763
            self.selection()
            self.state = 1764
            self.selection()
            self.state = 1765
            self.selection()
            self.state = 1766
            self.selection()
            self.state = 1767
            self.selection()
            self.state = 1768
            self.selection()
            self.state = 1769
            self.selection()
            self.state = 1770
            self.selection()
            self.state = 1771
            self.selection()
            self.state = 1772
            self.selection()
            self.state = 1773
            self.selection()
            self.state = 1775
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==XplorMRParser.L_paren:
                self.state = 1774
                self.selection()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pre_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def pre_assign(self):
            return self.getTypedRuleContext(XplorMRParser.Pre_assignContext,0)


        def pre_assign_loop(self):
            return self.getTypedRuleContext(XplorMRParser.Pre_assign_loopContext,0)


        def Classification(self):
            return self.getToken(XplorMRParser.Classification, 0)

        def Simple_name(self):
            return self.getToken(XplorMRParser.Simple_name, 0)

        def Equ_op(self):
            return self.getToken(XplorMRParser.Equ_op, 0)

        def ForceConstant(self):
            return self.getToken(XplorMRParser.ForceConstant, 0)

        def number_s(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Number_sContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Number_sContext,i)


        def Nrestraints(self):
            return self.getToken(XplorMRParser.Nrestraints, 0)

        def Integer(self):
            return self.getToken(XplorMRParser.Integer, 0)

        def Potential(self):
            return self.getToken(XplorMRParser.Potential, 0)

        def Simple_name_P(self):
            return self.getToken(XplorMRParser.Simple_name_P, 0)

        def Potential_types(self):
            return self.getToken(XplorMRParser.Potential_types, 0)

        def Equ_op_P(self):
            return self.getToken(XplorMRParser.Equ_op_P, 0)

        def Kconst(self):
            return self.getToken(XplorMRParser.Kconst, 0)

        def Omega(self):
            return self.getToken(XplorMRParser.Omega, 0)

        def Tauc(self):
            return self.getToken(XplorMRParser.Tauc, 0)

        def Print(self):
            return self.getToken(XplorMRParser.Print, 0)

        def Threshold(self):
            return self.getToken(XplorMRParser.Threshold, 0)

        def All(self):
            return self.getToken(XplorMRParser.All, 0)

        def Reset(self):
            return self.getToken(XplorMRParser.Reset, 0)

        def Debug(self):
            return self.getToken(XplorMRParser.Debug, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_pre_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPre_statement" ):
                listener.enterPre_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPre_statement" ):
                listener.exitPre_statement(self)




    def pre_statement(self):

        localctx = XplorMRParser.Pre_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 154, self.RULE_pre_statement)
        self._la = 0 # Token type
        try:
            self.state = 1834
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [XplorMRParser.Assign]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1777
                self.pre_assign()
                pass
            elif token in [XplorMRParser.For]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1778
                self.pre_assign_loop()
                pass
            elif token in [XplorMRParser.Classification]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1779
                self.match(XplorMRParser.Classification)
                self.state = 1781
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 1780
                    self.match(XplorMRParser.Equ_op)


                self.state = 1783
                self.match(XplorMRParser.Simple_name)
                pass
            elif token in [XplorMRParser.ForceConstant]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1784
                self.match(XplorMRParser.ForceConstant)
                self.state = 1786
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 1785
                    self.match(XplorMRParser.Equ_op)


                self.state = 1788
                self.match(XplorMRParser.Simple_name)
                self.state = 1789
                self.number_s()
                pass
            elif token in [XplorMRParser.Nrestraints]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1790
                self.match(XplorMRParser.Nrestraints)
                self.state = 1792
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 1791
                    self.match(XplorMRParser.Equ_op)


                self.state = 1794
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.Potential]:
                self.enterOuterAlt(localctx, 6)
                self.state = 1795
                self.match(XplorMRParser.Potential)
                self.state = 1797
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op_P:
                    self.state = 1796
                    self.match(XplorMRParser.Equ_op_P)


                self.state = 1799
                self.match(XplorMRParser.Simple_name_P)
                self.state = 1800
                self.match(XplorMRParser.Potential_types)
                pass
            elif token in [XplorMRParser.Kconst]:
                self.enterOuterAlt(localctx, 7)
                self.state = 1801
                self.match(XplorMRParser.Kconst)
                self.state = 1803
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 1802
                    self.match(XplorMRParser.Equ_op)


                self.state = 1805
                self.match(XplorMRParser.Simple_name)
                self.state = 1806
                self.number_s()
                pass
            elif token in [XplorMRParser.Omega]:
                self.enterOuterAlt(localctx, 8)
                self.state = 1807
                self.match(XplorMRParser.Omega)
                self.state = 1809
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 1808
                    self.match(XplorMRParser.Equ_op)


                self.state = 1811
                self.match(XplorMRParser.Simple_name)
                self.state = 1812
                self.number_s()
                pass
            elif token in [XplorMRParser.Tauc]:
                self.enterOuterAlt(localctx, 9)
                self.state = 1813
                self.match(XplorMRParser.Tauc)
                self.state = 1815
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 1814
                    self.match(XplorMRParser.Equ_op)


                self.state = 1817
                self.match(XplorMRParser.Simple_name)
                self.state = 1818
                self.number_s()
                self.state = 1819
                self.number_s()
                pass
            elif token in [XplorMRParser.Print]:
                self.enterOuterAlt(localctx, 10)
                self.state = 1821
                self.match(XplorMRParser.Print)
                self.state = 1822
                self.match(XplorMRParser.Threshold)
                self.state = 1823
                self.number_s()
                self.state = 1830
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [XplorMRParser.All]:
                    self.state = 1824
                    self.match(XplorMRParser.All)
                    pass
                elif token in [XplorMRParser.Classification]:
                    self.state = 1825
                    self.match(XplorMRParser.Classification)
                    self.state = 1827
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==XplorMRParser.Equ_op:
                        self.state = 1826
                        self.match(XplorMRParser.Equ_op)


                    self.state = 1829
                    self.match(XplorMRParser.Simple_name)
                    pass
                else:
                    raise NoViableAltException(self)

                pass
            elif token in [XplorMRParser.Reset]:
                self.enterOuterAlt(localctx, 11)
                self.state = 1832
                self.match(XplorMRParser.Reset)
                pass
            elif token in [XplorMRParser.Debug]:
                self.enterOuterAlt(localctx, 12)
                self.state = 1833
                self.match(XplorMRParser.Debug)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pre_assignContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Assign(self):
            return self.getToken(XplorMRParser.Assign, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.SelectionContext,i)


        def number(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.NumberContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.NumberContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_pre_assign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPre_assign" ):
                listener.enterPre_assign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPre_assign" ):
                listener.exitPre_assign(self)




    def pre_assign(self):

        localctx = XplorMRParser.Pre_assignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 156, self.RULE_pre_assign)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1836
            self.match(XplorMRParser.Assign)
            self.state = 1837
            self.selection()
            self.state = 1838
            self.selection()
            self.state = 1839
            self.number()
            self.state = 1841
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 180)) & ~0x3f) == 0 and ((1 << (_la - 180)) & ((1 << (XplorMRParser.Integer - 180)) | (1 << (XplorMRParser.Real - 180)) | (1 << (XplorMRParser.Symbol_name - 180)))) != 0):
                self.state = 1840
                self.number()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pcs_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def pcs_assign(self):
            return self.getTypedRuleContext(XplorMRParser.Pcs_assignContext,0)


        def pcs_assign_loop(self):
            return self.getTypedRuleContext(XplorMRParser.Pcs_assign_loopContext,0)


        def Classification(self):
            return self.getToken(XplorMRParser.Classification, 0)

        def Simple_name(self):
            return self.getToken(XplorMRParser.Simple_name, 0)

        def Equ_op(self):
            return self.getToken(XplorMRParser.Equ_op, 0)

        def Tolerance(self):
            return self.getToken(XplorMRParser.Tolerance, 0)

        def Integer(self):
            return self.getToken(XplorMRParser.Integer, 0)

        def Coefficients(self):
            return self.getToken(XplorMRParser.Coefficients, 0)

        def number_s(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Number_sContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Number_sContext,i)


        def ForceConstant(self):
            return self.getToken(XplorMRParser.ForceConstant, 0)

        def Nrestraints(self):
            return self.getToken(XplorMRParser.Nrestraints, 0)

        def Print(self):
            return self.getToken(XplorMRParser.Print, 0)

        def Threshold(self):
            return self.getToken(XplorMRParser.Threshold, 0)

        def All(self):
            return self.getToken(XplorMRParser.All, 0)

        def Reset(self):
            return self.getToken(XplorMRParser.Reset, 0)

        def Save(self):
            return self.getToken(XplorMRParser.Save, 0)

        def Fmed(self):
            return self.getToken(XplorMRParser.Fmed, 0)

        def ErrOn(self):
            return self.getToken(XplorMRParser.ErrOn, 0)

        def ErrOff(self):
            return self.getToken(XplorMRParser.ErrOff, 0)

        def Fon(self):
            return self.getToken(XplorMRParser.Fon, 0)

        def Foff(self):
            return self.getToken(XplorMRParser.Foff, 0)

        def Son(self):
            return self.getToken(XplorMRParser.Son, 0)

        def Soff(self):
            return self.getToken(XplorMRParser.Soff, 0)

        def Frun(self):
            return self.getToken(XplorMRParser.Frun, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_pcs_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPcs_statement" ):
                listener.enterPcs_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPcs_statement" ):
                listener.exitPcs_statement(self)




    def pcs_statement(self):

        localctx = XplorMRParser.Pcs_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 158, self.RULE_pcs_statement)
        self._la = 0 # Token type
        try:
            self.state = 1892
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [XplorMRParser.Assign]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1843
                self.pcs_assign()
                pass
            elif token in [XplorMRParser.For]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1844
                self.pcs_assign_loop()
                pass
            elif token in [XplorMRParser.Classification]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1845
                self.match(XplorMRParser.Classification)
                self.state = 1847
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 1846
                    self.match(XplorMRParser.Equ_op)


                self.state = 1849
                self.match(XplorMRParser.Simple_name)
                pass
            elif token in [XplorMRParser.Tolerance]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1850
                self.match(XplorMRParser.Tolerance)
                self.state = 1851
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.Coefficients]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1852
                self.match(XplorMRParser.Coefficients)
                self.state = 1853
                self.number_s()
                self.state = 1854
                self.number_s()
                pass
            elif token in [XplorMRParser.ForceConstant]:
                self.enterOuterAlt(localctx, 6)
                self.state = 1856
                self.match(XplorMRParser.ForceConstant)
                self.state = 1858
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 1857
                    self.match(XplorMRParser.Equ_op)


                self.state = 1860
                self.number_s()
                pass
            elif token in [XplorMRParser.Nrestraints]:
                self.enterOuterAlt(localctx, 7)
                self.state = 1861
                self.match(XplorMRParser.Nrestraints)
                self.state = 1863
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 1862
                    self.match(XplorMRParser.Equ_op)


                self.state = 1865
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.Print]:
                self.enterOuterAlt(localctx, 8)
                self.state = 1866
                self.match(XplorMRParser.Print)
                self.state = 1867
                self.match(XplorMRParser.Threshold)
                self.state = 1868
                self.number_s()
                self.state = 1875
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [XplorMRParser.All]:
                    self.state = 1869
                    self.match(XplorMRParser.All)
                    pass
                elif token in [XplorMRParser.Classification]:
                    self.state = 1870
                    self.match(XplorMRParser.Classification)
                    self.state = 1872
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==XplorMRParser.Equ_op:
                        self.state = 1871
                        self.match(XplorMRParser.Equ_op)


                    self.state = 1874
                    self.match(XplorMRParser.Simple_name)
                    pass
                else:
                    raise NoViableAltException(self)

                pass
            elif token in [XplorMRParser.Reset]:
                self.enterOuterAlt(localctx, 9)
                self.state = 1877
                self.match(XplorMRParser.Reset)
                pass
            elif token in [XplorMRParser.Save]:
                self.enterOuterAlt(localctx, 10)
                self.state = 1878
                self.match(XplorMRParser.Save)
                self.state = 1879
                self.match(XplorMRParser.Simple_name)
                pass
            elif token in [XplorMRParser.Fmed]:
                self.enterOuterAlt(localctx, 11)
                self.state = 1880
                self.match(XplorMRParser.Fmed)
                self.state = 1881
                self.number_s()
                self.state = 1882
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.ErrOn]:
                self.enterOuterAlt(localctx, 12)
                self.state = 1884
                self.match(XplorMRParser.ErrOn)
                pass
            elif token in [XplorMRParser.ErrOff]:
                self.enterOuterAlt(localctx, 13)
                self.state = 1885
                self.match(XplorMRParser.ErrOff)
                pass
            elif token in [XplorMRParser.Fon]:
                self.enterOuterAlt(localctx, 14)
                self.state = 1886
                self.match(XplorMRParser.Fon)
                pass
            elif token in [XplorMRParser.Foff]:
                self.enterOuterAlt(localctx, 15)
                self.state = 1887
                self.match(XplorMRParser.Foff)
                pass
            elif token in [XplorMRParser.Son]:
                self.enterOuterAlt(localctx, 16)
                self.state = 1888
                self.match(XplorMRParser.Son)
                pass
            elif token in [XplorMRParser.Soff]:
                self.enterOuterAlt(localctx, 17)
                self.state = 1889
                self.match(XplorMRParser.Soff)
                pass
            elif token in [XplorMRParser.Frun]:
                self.enterOuterAlt(localctx, 18)
                self.state = 1890
                self.match(XplorMRParser.Frun)
                self.state = 1891
                self.match(XplorMRParser.Integer)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pcs_assignContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Assign(self):
            return self.getToken(XplorMRParser.Assign, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.SelectionContext,i)


        def number(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.NumberContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.NumberContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_pcs_assign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPcs_assign" ):
                listener.enterPcs_assign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPcs_assign" ):
                listener.exitPcs_assign(self)




    def pcs_assign(self):

        localctx = XplorMRParser.Pcs_assignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 160, self.RULE_pcs_assign)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1894
            self.match(XplorMRParser.Assign)
            self.state = 1895
            self.selection()
            self.state = 1896
            self.selection()
            self.state = 1897
            self.selection()
            self.state = 1898
            self.selection()
            self.state = 1899
            self.selection()
            self.state = 1900
            self.number()
            self.state = 1902
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 180)) & ~0x3f) == 0 and ((1 << (_la - 180)) & ((1 << (XplorMRParser.Integer - 180)) | (1 << (XplorMRParser.Real - 180)) | (1 << (XplorMRParser.Symbol_name - 180)))) != 0):
                self.state = 1901
                self.number()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Prdc_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def prdc_assign(self):
            return self.getTypedRuleContext(XplorMRParser.Prdc_assignContext,0)


        def Classification(self):
            return self.getToken(XplorMRParser.Classification, 0)

        def Simple_name(self):
            return self.getToken(XplorMRParser.Simple_name, 0)

        def Equ_op(self):
            return self.getToken(XplorMRParser.Equ_op, 0)

        def Tolerance(self):
            return self.getToken(XplorMRParser.Tolerance, 0)

        def Integer(self):
            return self.getToken(XplorMRParser.Integer, 0)

        def Coefficients(self):
            return self.getToken(XplorMRParser.Coefficients, 0)

        def number_s(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Number_sContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Number_sContext,i)


        def ForceConstant(self):
            return self.getToken(XplorMRParser.ForceConstant, 0)

        def Nrestraints(self):
            return self.getToken(XplorMRParser.Nrestraints, 0)

        def ErrOn(self):
            return self.getToken(XplorMRParser.ErrOn, 0)

        def ErrOff(self):
            return self.getToken(XplorMRParser.ErrOff, 0)

        def Fmed(self):
            return self.getToken(XplorMRParser.Fmed, 0)

        def Fon(self):
            return self.getToken(XplorMRParser.Fon, 0)

        def Foff(self):
            return self.getToken(XplorMRParser.Foff, 0)

        def Frun(self):
            return self.getToken(XplorMRParser.Frun, 0)

        def Print(self):
            return self.getToken(XplorMRParser.Print, 0)

        def Threshold(self):
            return self.getToken(XplorMRParser.Threshold, 0)

        def Reset(self):
            return self.getToken(XplorMRParser.Reset, 0)

        def Save(self):
            return self.getToken(XplorMRParser.Save, 0)

        def Son(self):
            return self.getToken(XplorMRParser.Son, 0)

        def Soff(self):
            return self.getToken(XplorMRParser.Soff, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_prdc_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrdc_statement" ):
                listener.enterPrdc_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrdc_statement" ):
                listener.exitPrdc_statement(self)




    def prdc_statement(self):

        localctx = XplorMRParser.Prdc_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 162, self.RULE_prdc_statement)
        self._la = 0 # Token type
        try:
            self.state = 1939
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [XplorMRParser.Assign]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1904
                self.prdc_assign()
                pass
            elif token in [XplorMRParser.Classification]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1905
                self.match(XplorMRParser.Classification)
                self.state = 1907
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 1906
                    self.match(XplorMRParser.Equ_op)


                self.state = 1909
                self.match(XplorMRParser.Simple_name)
                pass
            elif token in [XplorMRParser.Tolerance]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1910
                self.match(XplorMRParser.Tolerance)
                self.state = 1911
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.Coefficients]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1912
                self.match(XplorMRParser.Coefficients)
                self.state = 1913
                self.number_s()
                self.state = 1914
                self.number_s()
                pass
            elif token in [XplorMRParser.ForceConstant]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1916
                self.match(XplorMRParser.ForceConstant)
                self.state = 1918
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 1917
                    self.match(XplorMRParser.Equ_op)


                self.state = 1920
                self.number_s()
                pass
            elif token in [XplorMRParser.Nrestraints]:
                self.enterOuterAlt(localctx, 6)
                self.state = 1921
                self.match(XplorMRParser.Nrestraints)
                self.state = 1923
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 1922
                    self.match(XplorMRParser.Equ_op)


                self.state = 1925
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.ErrOn]:
                self.enterOuterAlt(localctx, 7)
                self.state = 1926
                self.match(XplorMRParser.ErrOn)
                pass
            elif token in [XplorMRParser.ErrOff]:
                self.enterOuterAlt(localctx, 8)
                self.state = 1927
                self.match(XplorMRParser.ErrOff)
                pass
            elif token in [XplorMRParser.Fmed]:
                self.enterOuterAlt(localctx, 9)
                self.state = 1928
                self.match(XplorMRParser.Fmed)
                pass
            elif token in [XplorMRParser.Fon]:
                self.enterOuterAlt(localctx, 10)
                self.state = 1929
                self.match(XplorMRParser.Fon)
                pass
            elif token in [XplorMRParser.Foff]:
                self.enterOuterAlt(localctx, 11)
                self.state = 1930
                self.match(XplorMRParser.Foff)
                pass
            elif token in [XplorMRParser.Frun]:
                self.enterOuterAlt(localctx, 12)
                self.state = 1931
                self.match(XplorMRParser.Frun)
                pass
            elif token in [XplorMRParser.Print]:
                self.enterOuterAlt(localctx, 13)
                self.state = 1932
                self.match(XplorMRParser.Print)
                self.state = 1933
                self.match(XplorMRParser.Threshold)
                pass
            elif token in [XplorMRParser.Reset]:
                self.enterOuterAlt(localctx, 14)
                self.state = 1934
                self.match(XplorMRParser.Reset)
                pass
            elif token in [XplorMRParser.Save]:
                self.enterOuterAlt(localctx, 15)
                self.state = 1935
                self.match(XplorMRParser.Save)
                self.state = 1936
                self.match(XplorMRParser.Simple_name)
                pass
            elif token in [XplorMRParser.Son]:
                self.enterOuterAlt(localctx, 16)
                self.state = 1937
                self.match(XplorMRParser.Son)
                pass
            elif token in [XplorMRParser.Soff]:
                self.enterOuterAlt(localctx, 17)
                self.state = 1938
                self.match(XplorMRParser.Soff)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Prdc_assignContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Assign(self):
            return self.getToken(XplorMRParser.Assign, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.SelectionContext,i)


        def number(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.NumberContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.NumberContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_prdc_assign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrdc_assign" ):
                listener.enterPrdc_assign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrdc_assign" ):
                listener.exitPrdc_assign(self)




    def prdc_assign(self):

        localctx = XplorMRParser.Prdc_assignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 164, self.RULE_prdc_assign)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1941
            self.match(XplorMRParser.Assign)
            self.state = 1942
            self.selection()
            self.state = 1943
            self.selection()
            self.state = 1944
            self.selection()
            self.state = 1945
            self.selection()
            self.state = 1946
            self.selection()
            self.state = 1947
            self.selection()
            self.state = 1948
            self.number()
            self.state = 1950
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 180)) & ~0x3f) == 0 and ((1 << (_la - 180)) & ((1 << (XplorMRParser.Integer - 180)) | (1 << (XplorMRParser.Real - 180)) | (1 << (XplorMRParser.Symbol_name - 180)))) != 0):
                self.state = 1949
                self.number()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Porientation_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def porientation_assign(self):
            return self.getTypedRuleContext(XplorMRParser.Porientation_assignContext,0)


        def Classification(self):
            return self.getToken(XplorMRParser.Classification, 0)

        def Simple_name(self):
            return self.getToken(XplorMRParser.Simple_name, 0)

        def Equ_op(self):
            return self.getToken(XplorMRParser.Equ_op, 0)

        def ForceConstant(self):
            return self.getToken(XplorMRParser.ForceConstant, 0)

        def number_s(self):
            return self.getTypedRuleContext(XplorMRParser.Number_sContext,0)


        def Nrestraints(self):
            return self.getToken(XplorMRParser.Nrestraints, 0)

        def Integer(self):
            return self.getToken(XplorMRParser.Integer, 0)

        def Print(self):
            return self.getToken(XplorMRParser.Print, 0)

        def Threshold(self):
            return self.getToken(XplorMRParser.Threshold, 0)

        def Reset(self):
            return self.getToken(XplorMRParser.Reset, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_porientation_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPorientation_statement" ):
                listener.enterPorientation_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPorientation_statement" ):
                listener.exitPorientation_statement(self)




    def porientation_statement(self):

        localctx = XplorMRParser.Porientation_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 166, self.RULE_porientation_statement)
        self._la = 0 # Token type
        try:
            self.state = 1972
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [XplorMRParser.Assign]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1952
                self.porientation_assign()
                pass
            elif token in [XplorMRParser.Classification]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1953
                self.match(XplorMRParser.Classification)
                self.state = 1955
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 1954
                    self.match(XplorMRParser.Equ_op)


                self.state = 1957
                self.match(XplorMRParser.Simple_name)
                pass
            elif token in [XplorMRParser.ForceConstant]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1958
                self.match(XplorMRParser.ForceConstant)
                self.state = 1960
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 1959
                    self.match(XplorMRParser.Equ_op)


                self.state = 1962
                self.number_s()
                pass
            elif token in [XplorMRParser.Nrestraints]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1963
                self.match(XplorMRParser.Nrestraints)
                self.state = 1965
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 1964
                    self.match(XplorMRParser.Equ_op)


                self.state = 1967
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.Print]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1968
                self.match(XplorMRParser.Print)
                self.state = 1969
                self.match(XplorMRParser.Threshold)
                self.state = 1970
                self.number_s()
                pass
            elif token in [XplorMRParser.Reset]:
                self.enterOuterAlt(localctx, 6)
                self.state = 1971
                self.match(XplorMRParser.Reset)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Porientation_assignContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Assign(self):
            return self.getToken(XplorMRParser.Assign, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.SelectionContext,i)


        def number(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.NumberContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.NumberContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_porientation_assign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPorientation_assign" ):
                listener.enterPorientation_assign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPorientation_assign" ):
                listener.exitPorientation_assign(self)




    def porientation_assign(self):

        localctx = XplorMRParser.Porientation_assignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 168, self.RULE_porientation_assign)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1974
            self.match(XplorMRParser.Assign)
            self.state = 1975
            self.selection()
            self.state = 1976
            self.selection()
            self.state = 1977
            self.number()
            self.state = 1978
            self.number()
            self.state = 1979
            self.number()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pccr_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def pccr_assign(self):
            return self.getTypedRuleContext(XplorMRParser.Pccr_assignContext,0)


        def Classification(self):
            return self.getToken(XplorMRParser.Classification, 0)

        def Simple_name(self):
            return self.getToken(XplorMRParser.Simple_name, 0)

        def Equ_op(self):
            return self.getToken(XplorMRParser.Equ_op, 0)

        def Weip(self):
            return self.getToken(XplorMRParser.Weip, 0)

        def Integer(self):
            return self.getToken(XplorMRParser.Integer, 0)

        def Coefficients(self):
            return self.getToken(XplorMRParser.Coefficients, 0)

        def number_s(self):
            return self.getTypedRuleContext(XplorMRParser.Number_sContext,0)


        def ForceConstant(self):
            return self.getToken(XplorMRParser.ForceConstant, 0)

        def Nrestraints(self):
            return self.getToken(XplorMRParser.Nrestraints, 0)

        def Print(self):
            return self.getToken(XplorMRParser.Print, 0)

        def Threshold(self):
            return self.getToken(XplorMRParser.Threshold, 0)

        def Reset(self):
            return self.getToken(XplorMRParser.Reset, 0)

        def Frun(self):
            return self.getToken(XplorMRParser.Frun, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_pccr_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPccr_statement" ):
                listener.enterPccr_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPccr_statement" ):
                listener.exitPccr_statement(self)




    def pccr_statement(self):

        localctx = XplorMRParser.Pccr_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 170, self.RULE_pccr_statement)
        self._la = 0 # Token type
        try:
            self.state = 2007
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [XplorMRParser.Assign]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1981
                self.pccr_assign()
                pass
            elif token in [XplorMRParser.Classification]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1982
                self.match(XplorMRParser.Classification)
                self.state = 1984
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 1983
                    self.match(XplorMRParser.Equ_op)


                self.state = 1986
                self.match(XplorMRParser.Simple_name)
                pass
            elif token in [XplorMRParser.Weip]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1987
                self.match(XplorMRParser.Weip)
                self.state = 1988
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.Coefficients]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1989
                self.match(XplorMRParser.Coefficients)
                self.state = 1990
                self.number_s()
                pass
            elif token in [XplorMRParser.ForceConstant]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1991
                self.match(XplorMRParser.ForceConstant)
                self.state = 1993
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 1992
                    self.match(XplorMRParser.Equ_op)


                self.state = 1995
                self.number_s()
                pass
            elif token in [XplorMRParser.Nrestraints]:
                self.enterOuterAlt(localctx, 6)
                self.state = 1996
                self.match(XplorMRParser.Nrestraints)
                self.state = 1998
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 1997
                    self.match(XplorMRParser.Equ_op)


                self.state = 2000
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.Print]:
                self.enterOuterAlt(localctx, 7)
                self.state = 2001
                self.match(XplorMRParser.Print)
                self.state = 2002
                self.match(XplorMRParser.Threshold)
                self.state = 2003
                self.number_s()
                pass
            elif token in [XplorMRParser.Reset]:
                self.enterOuterAlt(localctx, 8)
                self.state = 2004
                self.match(XplorMRParser.Reset)
                pass
            elif token in [XplorMRParser.Frun]:
                self.enterOuterAlt(localctx, 9)
                self.state = 2005
                self.match(XplorMRParser.Frun)
                self.state = 2006
                self.match(XplorMRParser.Integer)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pccr_assignContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Assign(self):
            return self.getToken(XplorMRParser.Assign, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.SelectionContext,i)


        def number(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.NumberContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.NumberContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_pccr_assign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPccr_assign" ):
                listener.enterPccr_assign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPccr_assign" ):
                listener.exitPccr_assign(self)




    def pccr_assign(self):

        localctx = XplorMRParser.Pccr_assignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 172, self.RULE_pccr_assign)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2009
            self.match(XplorMRParser.Assign)
            self.state = 2010
            self.selection()
            self.state = 2011
            self.selection()
            self.state = 2012
            self.selection()
            self.state = 2013
            self.number()
            self.state = 2015
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 180)) & ~0x3f) == 0 and ((1 << (_la - 180)) & ((1 << (XplorMRParser.Integer - 180)) | (1 << (XplorMRParser.Real - 180)) | (1 << (XplorMRParser.Symbol_name - 180)))) != 0):
                self.state = 2014
                self.number()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Hbond_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def hbond_assign(self):
            return self.getTypedRuleContext(XplorMRParser.Hbond_assignContext,0)


        def hbond_assign_loop(self):
            return self.getTypedRuleContext(XplorMRParser.Hbond_assign_loopContext,0)


        def Classification(self):
            return self.getToken(XplorMRParser.Classification, 0)

        def Simple_name(self):
            return self.getToken(XplorMRParser.Simple_name, 0)

        def Equ_op(self):
            return self.getToken(XplorMRParser.Equ_op, 0)

        def ForceConstant(self):
            return self.getToken(XplorMRParser.ForceConstant, 0)

        def number_s(self):
            return self.getTypedRuleContext(XplorMRParser.Number_sContext,0)


        def Nrestraints(self):
            return self.getToken(XplorMRParser.Nrestraints, 0)

        def Integer(self):
            return self.getToken(XplorMRParser.Integer, 0)

        def Print(self):
            return self.getToken(XplorMRParser.Print, 0)

        def Threshold(self):
            return self.getToken(XplorMRParser.Threshold, 0)

        def Reset(self):
            return self.getToken(XplorMRParser.Reset, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_hbond_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHbond_statement" ):
                listener.enterHbond_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHbond_statement" ):
                listener.exitHbond_statement(self)




    def hbond_statement(self):

        localctx = XplorMRParser.Hbond_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 174, self.RULE_hbond_statement)
        self._la = 0 # Token type
        try:
            self.state = 2038
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [XplorMRParser.Assign]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2017
                self.hbond_assign()
                pass
            elif token in [XplorMRParser.For]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2018
                self.hbond_assign_loop()
                pass
            elif token in [XplorMRParser.Classification]:
                self.enterOuterAlt(localctx, 3)
                self.state = 2019
                self.match(XplorMRParser.Classification)
                self.state = 2021
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 2020
                    self.match(XplorMRParser.Equ_op)


                self.state = 2023
                self.match(XplorMRParser.Simple_name)
                pass
            elif token in [XplorMRParser.ForceConstant]:
                self.enterOuterAlt(localctx, 4)
                self.state = 2024
                self.match(XplorMRParser.ForceConstant)
                self.state = 2026
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 2025
                    self.match(XplorMRParser.Equ_op)


                self.state = 2028
                self.number_s()
                pass
            elif token in [XplorMRParser.Nrestraints]:
                self.enterOuterAlt(localctx, 5)
                self.state = 2029
                self.match(XplorMRParser.Nrestraints)
                self.state = 2031
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 2030
                    self.match(XplorMRParser.Equ_op)


                self.state = 2033
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.Print]:
                self.enterOuterAlt(localctx, 6)
                self.state = 2034
                self.match(XplorMRParser.Print)
                self.state = 2035
                self.match(XplorMRParser.Threshold)
                self.state = 2036
                self.number_s()
                pass
            elif token in [XplorMRParser.Reset]:
                self.enterOuterAlt(localctx, 7)
                self.state = 2037
                self.match(XplorMRParser.Reset)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Hbond_assignContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Assign(self):
            return self.getToken(XplorMRParser.Assign, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.SelectionContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_hbond_assign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHbond_assign" ):
                listener.enterHbond_assign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHbond_assign" ):
                listener.exitHbond_assign(self)




    def hbond_assign(self):

        localctx = XplorMRParser.Hbond_assignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 176, self.RULE_hbond_assign)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2040
            self.match(XplorMRParser.Assign)
            self.state = 2041
            self.selection()
            self.state = 2042
            self.selection()
            self.state = 2043
            self.selection()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Hbond_db_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def hbond_db_assign(self):
            return self.getTypedRuleContext(XplorMRParser.Hbond_db_assignContext,0)


        def hbond_db_assign_loop(self):
            return self.getTypedRuleContext(XplorMRParser.Hbond_db_assign_loopContext,0)


        def Kdir(self):
            return self.getToken(XplorMRParser.Kdir, 0)

        def number_s(self):
            return self.getTypedRuleContext(XplorMRParser.Number_sContext,0)


        def Equ_op(self):
            return self.getToken(XplorMRParser.Equ_op, 0)

        def Klin(self):
            return self.getToken(XplorMRParser.Klin, 0)

        def Nseg(self):
            return self.getToken(XplorMRParser.Nseg, 0)

        def Integer(self):
            return self.getToken(XplorMRParser.Integer, 0)

        def Nmin(self):
            return self.getToken(XplorMRParser.Nmin, 0)

        def Nmax(self):
            return self.getToken(XplorMRParser.Nmax, 0)

        def Segm(self):
            return self.getToken(XplorMRParser.Segm, 0)

        def Simple_name(self):
            return self.getToken(XplorMRParser.Simple_name, 0)

        def Ohcut(self):
            return self.getToken(XplorMRParser.Ohcut, 0)

        def Coh1cut(self):
            return self.getToken(XplorMRParser.Coh1cut, 0)

        def Coh2cut(self):
            return self.getToken(XplorMRParser.Coh2cut, 0)

        def Ohncut(self):
            return self.getToken(XplorMRParser.Ohncut, 0)

        def Updfrq(self):
            return self.getToken(XplorMRParser.Updfrq, 0)

        def Prnfrq(self):
            return self.getToken(XplorMRParser.Prnfrq, 0)

        def Freemode(self):
            return self.getToken(XplorMRParser.Freemode, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_hbond_db_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHbond_db_statement" ):
                listener.enterHbond_db_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHbond_db_statement" ):
                listener.exitHbond_db_statement(self)




    def hbond_db_statement(self):

        localctx = XplorMRParser.Hbond_db_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 178, self.RULE_hbond_db_statement)
        self._la = 0 # Token type
        try:
            self.state = 2112
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [XplorMRParser.Assign]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2045
                self.hbond_db_assign()
                pass
            elif token in [XplorMRParser.For]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2046
                self.hbond_db_assign_loop()
                pass
            elif token in [XplorMRParser.Kdir]:
                self.enterOuterAlt(localctx, 3)
                self.state = 2047
                self.match(XplorMRParser.Kdir)
                self.state = 2049
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 2048
                    self.match(XplorMRParser.Equ_op)


                self.state = 2051
                self.number_s()
                pass
            elif token in [XplorMRParser.Klin]:
                self.enterOuterAlt(localctx, 4)
                self.state = 2052
                self.match(XplorMRParser.Klin)
                self.state = 2054
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 2053
                    self.match(XplorMRParser.Equ_op)


                self.state = 2056
                self.number_s()
                pass
            elif token in [XplorMRParser.Nseg]:
                self.enterOuterAlt(localctx, 5)
                self.state = 2057
                self.match(XplorMRParser.Nseg)
                self.state = 2059
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 2058
                    self.match(XplorMRParser.Equ_op)


                self.state = 2061
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.Nmin]:
                self.enterOuterAlt(localctx, 6)
                self.state = 2062
                self.match(XplorMRParser.Nmin)
                self.state = 2064
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 2063
                    self.match(XplorMRParser.Equ_op)


                self.state = 2066
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.Nmax]:
                self.enterOuterAlt(localctx, 7)
                self.state = 2067
                self.match(XplorMRParser.Nmax)
                self.state = 2069
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 2068
                    self.match(XplorMRParser.Equ_op)


                self.state = 2071
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.Segm]:
                self.enterOuterAlt(localctx, 8)
                self.state = 2072
                self.match(XplorMRParser.Segm)
                self.state = 2074
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 2073
                    self.match(XplorMRParser.Equ_op)


                self.state = 2076
                self.match(XplorMRParser.Simple_name)
                pass
            elif token in [XplorMRParser.Ohcut]:
                self.enterOuterAlt(localctx, 9)
                self.state = 2077
                self.match(XplorMRParser.Ohcut)
                self.state = 2079
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 2078
                    self.match(XplorMRParser.Equ_op)


                self.state = 2081
                self.number_s()
                pass
            elif token in [XplorMRParser.Coh1cut]:
                self.enterOuterAlt(localctx, 10)
                self.state = 2082
                self.match(XplorMRParser.Coh1cut)
                self.state = 2084
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 2083
                    self.match(XplorMRParser.Equ_op)


                self.state = 2086
                self.number_s()
                pass
            elif token in [XplorMRParser.Coh2cut]:
                self.enterOuterAlt(localctx, 11)
                self.state = 2087
                self.match(XplorMRParser.Coh2cut)
                self.state = 2089
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 2088
                    self.match(XplorMRParser.Equ_op)


                self.state = 2091
                self.number_s()
                pass
            elif token in [XplorMRParser.Ohncut]:
                self.enterOuterAlt(localctx, 12)
                self.state = 2092
                self.match(XplorMRParser.Ohncut)
                self.state = 2094
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 2093
                    self.match(XplorMRParser.Equ_op)


                self.state = 2096
                self.number_s()
                pass
            elif token in [XplorMRParser.Updfrq]:
                self.enterOuterAlt(localctx, 13)
                self.state = 2097
                self.match(XplorMRParser.Updfrq)
                self.state = 2099
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 2098
                    self.match(XplorMRParser.Equ_op)


                self.state = 2101
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.Prnfrq]:
                self.enterOuterAlt(localctx, 14)
                self.state = 2102
                self.match(XplorMRParser.Prnfrq)
                self.state = 2104
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 2103
                    self.match(XplorMRParser.Equ_op)


                self.state = 2106
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.Freemode]:
                self.enterOuterAlt(localctx, 15)
                self.state = 2107
                self.match(XplorMRParser.Freemode)
                self.state = 2109
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 2108
                    self.match(XplorMRParser.Equ_op)


                self.state = 2111
                self.match(XplorMRParser.Integer)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Hbond_db_assignContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Assign(self):
            return self.getToken(XplorMRParser.Assign, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.SelectionContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_hbond_db_assign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHbond_db_assign" ):
                listener.enterHbond_db_assign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHbond_db_assign" ):
                listener.exitHbond_db_assign(self)




    def hbond_db_assign(self):

        localctx = XplorMRParser.Hbond_db_assignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 180, self.RULE_hbond_db_assign)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2114
            self.match(XplorMRParser.Assign)
            self.state = 2115
            self.selection()
            self.state = 2116
            self.selection()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SelectionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def L_paren(self):
            return self.getToken(XplorMRParser.L_paren, 0)

        def selection_expression(self):
            return self.getTypedRuleContext(XplorMRParser.Selection_expressionContext,0)


        def R_paren(self):
            return self.getToken(XplorMRParser.R_paren, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_selection

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSelection" ):
                listener.enterSelection(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSelection" ):
                listener.exitSelection(self)




    def selection(self):

        localctx = XplorMRParser.SelectionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 182, self.RULE_selection)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2118
            self.match(XplorMRParser.L_paren)
            self.state = 2119
            self.selection_expression()
            self.state = 2120
            self.match(XplorMRParser.R_paren)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Selection_expressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def term(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.TermContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.TermContext,i)


        def Or_op(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Or_op)
            else:
                return self.getToken(XplorMRParser.Or_op, i)

        def getRuleIndex(self):
            return XplorMRParser.RULE_selection_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSelection_expression" ):
                listener.enterSelection_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSelection_expression" ):
                listener.exitSelection_expression(self)




    def selection_expression(self):

        localctx = XplorMRParser.Selection_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 184, self.RULE_selection_expression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2122
            self.term()
            self.state = 2127
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==XplorMRParser.Or_op:
                self.state = 2123
                self.match(XplorMRParser.Or_op)
                self.state = 2124
                self.term()
                self.state = 2129
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TermContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def factor(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.FactorContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.FactorContext,i)


        def And_op(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.And_op)
            else:
                return self.getToken(XplorMRParser.And_op, i)

        def getRuleIndex(self):
            return XplorMRParser.RULE_term

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTerm" ):
                listener.enterTerm(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTerm" ):
                listener.exitTerm(self)




    def term(self):

        localctx = XplorMRParser.TermContext(self, self._ctx, self.state)
        self.enterRule(localctx, 186, self.RULE_term)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2130
            self.factor(0)
            self.state = 2135
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==XplorMRParser.And_op:
                self.state = 2131
                self.match(XplorMRParser.And_op)
                self.state = 2132
                self.factor(0)
                self.state = 2137
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FactorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def L_paren(self):
            return self.getToken(XplorMRParser.L_paren, 0)

        def selection_expression(self):
            return self.getTypedRuleContext(XplorMRParser.Selection_expressionContext,0)


        def R_paren(self):
            return self.getToken(XplorMRParser.R_paren, 0)

        def All(self):
            return self.getToken(XplorMRParser.All, 0)

        def Atom(self):
            return self.getToken(XplorMRParser.Atom, 0)

        def Simple_names(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Simple_names)
            else:
                return self.getToken(XplorMRParser.Simple_names, i)

        def Simple_name(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Simple_name)
            else:
                return self.getToken(XplorMRParser.Simple_name, i)

        def Integers(self):
            return self.getToken(XplorMRParser.Integers, 0)

        def Integer(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Integer)
            else:
                return self.getToken(XplorMRParser.Integer, i)

        def Attribute(self):
            return self.getToken(XplorMRParser.Attribute, 0)

        def Attr_properties(self):
            return self.getToken(XplorMRParser.Attr_properties, 0)

        def Comparison_ops(self):
            return self.getToken(XplorMRParser.Comparison_ops, 0)

        def number_f(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Number_fContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Number_fContext,i)


        def Abs(self):
            return self.getToken(XplorMRParser.Abs, 0)

        def BondedTo(self):
            return self.getToken(XplorMRParser.BondedTo, 0)

        def factor(self):
            return self.getTypedRuleContext(XplorMRParser.FactorContext,0)


        def ByGroup(self):
            return self.getToken(XplorMRParser.ByGroup, 0)

        def ByRes(self):
            return self.getToken(XplorMRParser.ByRes, 0)

        def Chemical(self):
            return self.getToken(XplorMRParser.Chemical, 0)

        def Symbol_name(self):
            return self.getToken(XplorMRParser.Symbol_name, 0)

        def Colon(self):
            return self.getToken(XplorMRParser.Colon, 0)

        def Hydrogen(self):
            return self.getToken(XplorMRParser.Hydrogen, 0)

        def Id(self):
            return self.getToken(XplorMRParser.Id, 0)

        def Known(self):
            return self.getToken(XplorMRParser.Known, 0)

        def Name(self):
            return self.getToken(XplorMRParser.Name, 0)

        def Double_quote_string(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Double_quote_string)
            else:
                return self.getToken(XplorMRParser.Double_quote_string, i)

        def Not_op(self):
            return self.getToken(XplorMRParser.Not_op, 0)

        def Point(self):
            return self.getToken(XplorMRParser.Point, 0)

        def Cut(self):
            return self.getToken(XplorMRParser.Cut, 0)

        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Comma)
            else:
                return self.getToken(XplorMRParser.Comma, i)

        def Tail(self):
            return self.getToken(XplorMRParser.Tail, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.SelectionContext,i)


        def Equ_op(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Equ_op)
            else:
                return self.getToken(XplorMRParser.Equ_op, i)

        def Head(self):
            return self.getToken(XplorMRParser.Head, 0)

        def Previous(self):
            return self.getToken(XplorMRParser.Previous, 0)

        def Pseudo(self):
            return self.getToken(XplorMRParser.Pseudo, 0)

        def Residue(self):
            return self.getToken(XplorMRParser.Residue, 0)

        def Resname(self):
            return self.getToken(XplorMRParser.Resname, 0)

        def SegIdentifier(self):
            return self.getToken(XplorMRParser.SegIdentifier, 0)

        def Store_1(self):
            return self.getToken(XplorMRParser.Store_1, 0)

        def Store_2(self):
            return self.getToken(XplorMRParser.Store_2, 0)

        def Store_3(self):
            return self.getToken(XplorMRParser.Store_3, 0)

        def Store_4(self):
            return self.getToken(XplorMRParser.Store_4, 0)

        def Store_5(self):
            return self.getToken(XplorMRParser.Store_5, 0)

        def Store_6(self):
            return self.getToken(XplorMRParser.Store_6, 0)

        def Store_7(self):
            return self.getToken(XplorMRParser.Store_7, 0)

        def Store_8(self):
            return self.getToken(XplorMRParser.Store_8, 0)

        def Store_9(self):
            return self.getToken(XplorMRParser.Store_9, 0)

        def Tag(self):
            return self.getToken(XplorMRParser.Tag, 0)

        def Donor(self):
            return self.getToken(XplorMRParser.Donor, 0)

        def Acceptor(self):
            return self.getToken(XplorMRParser.Acceptor, 0)

        def Around(self):
            return self.getToken(XplorMRParser.Around, 0)

        def Saround(self):
            return self.getToken(XplorMRParser.Saround, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_factor

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFactor" ):
                listener.enterFactor(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFactor" ):
                listener.exitFactor(self)



    def factor(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = XplorMRParser.FactorContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 188
        self.enterRecursionRule(localctx, 188, self.RULE_factor, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2277
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,263,self._ctx)
            if la_ == 1:
                self.state = 2139
                self.match(XplorMRParser.L_paren)
                self.state = 2140
                self.selection_expression()
                self.state = 2141
                self.match(XplorMRParser.R_paren)
                pass

            elif la_ == 2:
                self.state = 2143
                self.match(XplorMRParser.All)
                pass

            elif la_ == 3:
                self.state = 2144
                self.match(XplorMRParser.Atom)
                self.state = 2145
                _la = self._input.LA(1)
                if not(_la==XplorMRParser.Simple_name or _la==XplorMRParser.Simple_names):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 2146
                _la = self._input.LA(1)
                if not(_la==XplorMRParser.Integer or _la==XplorMRParser.Integers):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 2147
                _la = self._input.LA(1)
                if not(_la==XplorMRParser.Simple_name or _la==XplorMRParser.Simple_names):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass

            elif la_ == 4:
                self.state = 2148
                self.match(XplorMRParser.Attribute)
                self.state = 2150
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Abs:
                    self.state = 2149
                    self.match(XplorMRParser.Abs)


                self.state = 2152
                self.match(XplorMRParser.Attr_properties)
                self.state = 2153
                self.match(XplorMRParser.Comparison_ops)
                self.state = 2154
                self.number_f()
                pass

            elif la_ == 5:
                self.state = 2155
                self.match(XplorMRParser.BondedTo)
                self.state = 2156
                self.factor(29)
                pass

            elif la_ == 6:
                self.state = 2157
                self.match(XplorMRParser.ByGroup)
                self.state = 2158
                self.factor(28)
                pass

            elif la_ == 7:
                self.state = 2159
                self.match(XplorMRParser.ByRes)
                self.state = 2160
                self.factor(27)
                pass

            elif la_ == 8:
                self.state = 2161
                self.match(XplorMRParser.Chemical)
                self.state = 2169
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [XplorMRParser.Simple_names]:
                    self.state = 2162
                    self.match(XplorMRParser.Simple_names)
                    pass
                elif token in [XplorMRParser.Simple_name]:
                    self.state = 2163
                    self.match(XplorMRParser.Simple_name)
                    self.state = 2166
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,245,self._ctx)
                    if la_ == 1:
                        self.state = 2164
                        self.match(XplorMRParser.Colon)
                        self.state = 2165
                        self.match(XplorMRParser.Simple_name)


                    pass
                elif token in [XplorMRParser.Symbol_name]:
                    self.state = 2168
                    self.match(XplorMRParser.Symbol_name)
                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 9:
                self.state = 2171
                self.match(XplorMRParser.Hydrogen)
                pass

            elif la_ == 10:
                self.state = 2172
                self.match(XplorMRParser.Id)
                self.state = 2173
                self.match(XplorMRParser.Integer)
                pass

            elif la_ == 11:
                self.state = 2174
                self.match(XplorMRParser.Known)
                pass

            elif la_ == 12:
                self.state = 2175
                self.match(XplorMRParser.Name)
                self.state = 2188
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [XplorMRParser.Simple_names]:
                    self.state = 2176
                    self.match(XplorMRParser.Simple_names)
                    pass
                elif token in [XplorMRParser.Simple_name]:
                    self.state = 2177
                    self.match(XplorMRParser.Simple_name)
                    self.state = 2180
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,247,self._ctx)
                    if la_ == 1:
                        self.state = 2178
                        self.match(XplorMRParser.Colon)
                        self.state = 2179
                        self.match(XplorMRParser.Simple_name)


                    pass
                elif token in [XplorMRParser.Double_quote_string]:
                    self.state = 2182
                    self.match(XplorMRParser.Double_quote_string)
                    self.state = 2185
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,248,self._ctx)
                    if la_ == 1:
                        self.state = 2183
                        self.match(XplorMRParser.Colon)
                        self.state = 2184
                        self.match(XplorMRParser.Double_quote_string)


                    pass
                elif token in [XplorMRParser.Symbol_name]:
                    self.state = 2187
                    self.match(XplorMRParser.Symbol_name)
                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 13:
                self.state = 2190
                self.match(XplorMRParser.Not_op)
                self.state = 2191
                self.factor(21)
                pass

            elif la_ == 14:
                self.state = 2192
                self.match(XplorMRParser.Point)
                self.state = 2193
                self.match(XplorMRParser.L_paren)
                self.state = 2194
                self.number_f()
                self.state = 2196
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Comma:
                    self.state = 2195
                    self.match(XplorMRParser.Comma)


                self.state = 2198
                self.number_f()
                self.state = 2200
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Comma:
                    self.state = 2199
                    self.match(XplorMRParser.Comma)


                self.state = 2202
                self.number_f()
                self.state = 2203
                self.match(XplorMRParser.R_paren)
                self.state = 2204
                self.match(XplorMRParser.Cut)
                self.state = 2205
                self.number_f()
                pass

            elif la_ == 15:
                self.state = 2207
                self.match(XplorMRParser.Point)
                self.state = 2208
                self.match(XplorMRParser.L_paren)
                self.state = 2209
                self.match(XplorMRParser.Tail)
                self.state = 2211
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 2210
                    self.match(XplorMRParser.Equ_op)


                self.state = 2213
                self.selection()
                self.state = 2215
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Comma:
                    self.state = 2214
                    self.match(XplorMRParser.Comma)


                self.state = 2222
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Head:
                    self.state = 2217
                    self.match(XplorMRParser.Head)
                    self.state = 2219
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==XplorMRParser.Equ_op:
                        self.state = 2218
                        self.match(XplorMRParser.Equ_op)


                    self.state = 2221
                    self.selection()


                self.state = 2224
                self.match(XplorMRParser.R_paren)
                self.state = 2225
                self.match(XplorMRParser.Cut)
                self.state = 2226
                self.number_f()
                pass

            elif la_ == 16:
                self.state = 2228
                self.match(XplorMRParser.Previous)
                pass

            elif la_ == 17:
                self.state = 2229
                self.match(XplorMRParser.Pseudo)
                pass

            elif la_ == 18:
                self.state = 2230
                self.match(XplorMRParser.Residue)
                self.state = 2238
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [XplorMRParser.Integers]:
                    self.state = 2231
                    self.match(XplorMRParser.Integers)
                    pass
                elif token in [XplorMRParser.Integer]:
                    self.state = 2232
                    self.match(XplorMRParser.Integer)
                    self.state = 2235
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,256,self._ctx)
                    if la_ == 1:
                        self.state = 2233
                        self.match(XplorMRParser.Colon)
                        self.state = 2234
                        self.match(XplorMRParser.Integer)


                    pass
                elif token in [XplorMRParser.Symbol_name]:
                    self.state = 2237
                    self.match(XplorMRParser.Symbol_name)
                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 19:
                self.state = 2240
                self.match(XplorMRParser.Resname)
                self.state = 2248
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [XplorMRParser.Simple_names]:
                    self.state = 2241
                    self.match(XplorMRParser.Simple_names)
                    pass
                elif token in [XplorMRParser.Simple_name]:
                    self.state = 2242
                    self.match(XplorMRParser.Simple_name)
                    self.state = 2245
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,258,self._ctx)
                    if la_ == 1:
                        self.state = 2243
                        self.match(XplorMRParser.Colon)
                        self.state = 2244
                        self.match(XplorMRParser.Simple_name)


                    pass
                elif token in [XplorMRParser.Symbol_name]:
                    self.state = 2247
                    self.match(XplorMRParser.Symbol_name)
                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 20:
                self.state = 2250
                self.match(XplorMRParser.SegIdentifier)
                self.state = 2263
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [XplorMRParser.Simple_names]:
                    self.state = 2251
                    self.match(XplorMRParser.Simple_names)
                    pass
                elif token in [XplorMRParser.Simple_name]:
                    self.state = 2252
                    self.match(XplorMRParser.Simple_name)
                    self.state = 2255
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,260,self._ctx)
                    if la_ == 1:
                        self.state = 2253
                        self.match(XplorMRParser.Colon)
                        self.state = 2254
                        self.match(XplorMRParser.Simple_name)


                    pass
                elif token in [XplorMRParser.Double_quote_string]:
                    self.state = 2257
                    self.match(XplorMRParser.Double_quote_string)
                    self.state = 2260
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,261,self._ctx)
                    if la_ == 1:
                        self.state = 2258
                        self.match(XplorMRParser.Colon)
                        self.state = 2259
                        self.match(XplorMRParser.Double_quote_string)


                    pass
                elif token in [XplorMRParser.Symbol_name]:
                    self.state = 2262
                    self.match(XplorMRParser.Symbol_name)
                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 21:
                self.state = 2265
                self.match(XplorMRParser.Store_1)
                pass

            elif la_ == 22:
                self.state = 2266
                self.match(XplorMRParser.Store_2)
                pass

            elif la_ == 23:
                self.state = 2267
                self.match(XplorMRParser.Store_3)
                pass

            elif la_ == 24:
                self.state = 2268
                self.match(XplorMRParser.Store_4)
                pass

            elif la_ == 25:
                self.state = 2269
                self.match(XplorMRParser.Store_5)
                pass

            elif la_ == 26:
                self.state = 2270
                self.match(XplorMRParser.Store_6)
                pass

            elif la_ == 27:
                self.state = 2271
                self.match(XplorMRParser.Store_7)
                pass

            elif la_ == 28:
                self.state = 2272
                self.match(XplorMRParser.Store_8)
                pass

            elif la_ == 29:
                self.state = 2273
                self.match(XplorMRParser.Store_9)
                pass

            elif la_ == 30:
                self.state = 2274
                self.match(XplorMRParser.Tag)
                pass

            elif la_ == 31:
                self.state = 2275
                self.match(XplorMRParser.Donor)
                pass

            elif la_ == 32:
                self.state = 2276
                self.match(XplorMRParser.Acceptor)
                pass


            self._ctx.stop = self._input.LT(-1)
            self.state = 2287
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,265,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 2285
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,264,self._ctx)
                    if la_ == 1:
                        localctx = XplorMRParser.FactorContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_factor)
                        self.state = 2279
                        if not self.precpred(self._ctx, 32):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 32)")
                        self.state = 2280
                        self.match(XplorMRParser.Around)
                        self.state = 2281
                        self.number_f()
                        pass

                    elif la_ == 2:
                        localctx = XplorMRParser.FactorContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_factor)
                        self.state = 2282
                        if not self.precpred(self._ctx, 14):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 14)")
                        self.state = 2283
                        self.match(XplorMRParser.Saround)
                        self.state = 2284
                        self.number_f()
                        pass

             
                self.state = 2289
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,265,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class NumberContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Real(self):
            return self.getToken(XplorMRParser.Real, 0)

        def Integer(self):
            return self.getToken(XplorMRParser.Integer, 0)

        def Symbol_name(self):
            return self.getToken(XplorMRParser.Symbol_name, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_number

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNumber" ):
                listener.enterNumber(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNumber" ):
                listener.exitNumber(self)




    def number(self):

        localctx = XplorMRParser.NumberContext(self, self._ctx, self.state)
        self.enterRule(localctx, 190, self.RULE_number)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2290
            _la = self._input.LA(1)
            if not(((((_la - 180)) & ~0x3f) == 0 and ((1 << (_la - 180)) & ((1 << (XplorMRParser.Integer - 180)) | (1 << (XplorMRParser.Real - 180)) | (1 << (XplorMRParser.Symbol_name - 180)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Number_fContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Real(self):
            return self.getToken(XplorMRParser.Real, 0)

        def Integer(self):
            return self.getToken(XplorMRParser.Integer, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_number_f

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNumber_f" ):
                listener.enterNumber_f(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNumber_f" ):
                listener.exitNumber_f(self)




    def number_f(self):

        localctx = XplorMRParser.Number_fContext(self, self._ctx, self.state)
        self.enterRule(localctx, 192, self.RULE_number_f)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2292
            _la = self._input.LA(1)
            if not(_la==XplorMRParser.Integer or _la==XplorMRParser.Real):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Number_sContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Real(self):
            return self.getToken(XplorMRParser.Real, 0)

        def Integer(self):
            return self.getToken(XplorMRParser.Integer, 0)

        def Symbol_name(self):
            return self.getToken(XplorMRParser.Symbol_name, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_number_s

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNumber_s" ):
                listener.enterNumber_s(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNumber_s" ):
                listener.exitNumber_s(self)




    def number_s(self):

        localctx = XplorMRParser.Number_sContext(self, self._ctx, self.state)
        self.enterRule(localctx, 194, self.RULE_number_s)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2294
            _la = self._input.LA(1)
            if not(((((_la - 180)) & ~0x3f) == 0 and ((1 << (_la - 180)) & ((1 << (XplorMRParser.Integer - 180)) | (1 << (XplorMRParser.Real - 180)) | (1 << (XplorMRParser.Symbol_name - 180)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Number_aContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Real(self):
            return self.getToken(XplorMRParser.Real, 0)

        def Integer(self):
            return self.getToken(XplorMRParser.Integer, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_number_a

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNumber_a" ):
                listener.enterNumber_a(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNumber_a" ):
                listener.exitNumber_a(self)




    def number_a(self):

        localctx = XplorMRParser.Number_aContext(self, self._ctx, self.state)
        self.enterRule(localctx, 196, self.RULE_number_a)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2296
            _la = self._input.LA(1)
            if not(_la==XplorMRParser.Integer or _la==XplorMRParser.Real):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Flag_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Flags(self):
            return self.getToken(XplorMRParser.Flags, 0)

        def Include(self):
            return self.getToken(XplorMRParser.Include, 0)

        def End_F(self):
            return self.getToken(XplorMRParser.End_F, 0)

        def Exclude(self):
            return self.getToken(XplorMRParser.Exclude, 0)

        def Class_name(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Class_name)
            else:
                return self.getToken(XplorMRParser.Class_name, i)

        def Any_class(self):
            return self.getToken(XplorMRParser.Any_class, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_flag_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFlag_statement" ):
                listener.enterFlag_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFlag_statement" ):
                listener.exitFlag_statement(self)




    def flag_statement(self):

        localctx = XplorMRParser.Flag_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 198, self.RULE_flag_statement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2298
            self.match(XplorMRParser.Flags)
            self.state = 2309
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==XplorMRParser.Exclude:
                self.state = 2299
                self.match(XplorMRParser.Exclude)
                self.state = 2307
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [XplorMRParser.Include, XplorMRParser.Class_name]:
                    self.state = 2303
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==XplorMRParser.Class_name:
                        self.state = 2300
                        self.match(XplorMRParser.Class_name)
                        self.state = 2305
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    pass
                elif token in [XplorMRParser.Any_class]:
                    self.state = 2306
                    self.match(XplorMRParser.Any_class)
                    pass
                else:
                    raise NoViableAltException(self)



            self.state = 2311
            self.match(XplorMRParser.Include)
            self.state = 2315
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==XplorMRParser.Class_name:
                self.state = 2312
                self.match(XplorMRParser.Class_name)
                self.state = 2317
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2318
            self.match(XplorMRParser.End_F)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Vector_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Vector(self):
            return self.getToken(XplorMRParser.Vector, 0)

        def vector_mode(self):
            return self.getTypedRuleContext(XplorMRParser.Vector_modeContext,0)


        def selection(self):
            return self.getTypedRuleContext(XplorMRParser.SelectionContext,0)


        def getRuleIndex(self):
            return XplorMRParser.RULE_vector_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVector_statement" ):
                listener.enterVector_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVector_statement" ):
                listener.exitVector_statement(self)




    def vector_statement(self):

        localctx = XplorMRParser.Vector_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 200, self.RULE_vector_statement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2320
            self.match(XplorMRParser.Vector)
            self.state = 2321
            self.vector_mode()
            self.state = 2322
            self.selection()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Vector_modeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def vector_expression(self):
            return self.getTypedRuleContext(XplorMRParser.Vector_expressionContext,0)


        def R_paren_VE(self):
            return self.getToken(XplorMRParser.R_paren_VE, 0)

        def Do_Lp(self):
            return self.getToken(XplorMRParser.Do_Lp, 0)

        def Identify_Lp(self):
            return self.getToken(XplorMRParser.Identify_Lp, 0)

        def Show(self):
            return self.getToken(XplorMRParser.Show, 0)

        def vector_show_property(self):
            return self.getTypedRuleContext(XplorMRParser.Vector_show_propertyContext,0)


        def getRuleIndex(self):
            return XplorMRParser.RULE_vector_mode

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVector_mode" ):
                listener.enterVector_mode(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVector_mode" ):
                listener.exitVector_mode(self)




    def vector_mode(self):

        localctx = XplorMRParser.Vector_modeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 202, self.RULE_vector_mode)
        self._la = 0 # Token type
        try:
            self.state = 2330
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [XplorMRParser.Do_Lp, XplorMRParser.Identify_Lp]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2324
                _la = self._input.LA(1)
                if not(_la==XplorMRParser.Do_Lp or _la==XplorMRParser.Identify_Lp):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 2325
                self.vector_expression()
                self.state = 2326
                self.match(XplorMRParser.R_paren_VE)
                pass
            elif token in [XplorMRParser.Show]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2328
                self.match(XplorMRParser.Show)
                self.state = 2329
                self.vector_show_property()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Vector_expressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Atom_properties_VE(self):
            return self.getToken(XplorMRParser.Atom_properties_VE, 0)

        def Equ_op_VE(self):
            return self.getToken(XplorMRParser.Equ_op_VE, 0)

        def vector_operation(self):
            return self.getTypedRuleContext(XplorMRParser.Vector_operationContext,0)


        def getRuleIndex(self):
            return XplorMRParser.RULE_vector_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVector_expression" ):
                listener.enterVector_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVector_expression" ):
                listener.exitVector_expression(self)




    def vector_expression(self):

        localctx = XplorMRParser.Vector_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 204, self.RULE_vector_expression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2332
            self.match(XplorMRParser.Atom_properties_VE)
            self.state = 2335
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==XplorMRParser.Equ_op_VE:
                self.state = 2333
                self.match(XplorMRParser.Equ_op_VE)
                self.state = 2334
                self.vector_operation()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Vector_operationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def vflc(self):
            return self.getTypedRuleContext(XplorMRParser.VflcContext,0)


        def vector_operation(self):
            return self.getTypedRuleContext(XplorMRParser.Vector_operationContext,0)


        def Add_op_VE(self):
            return self.getToken(XplorMRParser.Add_op_VE, 0)

        def Sub_op_VE(self):
            return self.getToken(XplorMRParser.Sub_op_VE, 0)

        def Mul_op_VE(self):
            return self.getToken(XplorMRParser.Mul_op_VE, 0)

        def Div_op_VE(self):
            return self.getToken(XplorMRParser.Div_op_VE, 0)

        def Exp_op_VE(self):
            return self.getToken(XplorMRParser.Exp_op_VE, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_vector_operation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVector_operation" ):
                listener.enterVector_operation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVector_operation" ):
                listener.exitVector_operation(self)




    def vector_operation(self):

        localctx = XplorMRParser.Vector_operationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 206, self.RULE_vector_operation)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2337
            self.vflc()
            self.state = 2340
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 232)) & ~0x3f) == 0 and ((1 << (_la - 232)) & ((1 << (XplorMRParser.Add_op_VE - 232)) | (1 << (XplorMRParser.Sub_op_VE - 232)) | (1 << (XplorMRParser.Mul_op_VE - 232)) | (1 << (XplorMRParser.Div_op_VE - 232)) | (1 << (XplorMRParser.Exp_op_VE - 232)))) != 0):
                self.state = 2338
                _la = self._input.LA(1)
                if not(((((_la - 232)) & ~0x3f) == 0 and ((1 << (_la - 232)) & ((1 << (XplorMRParser.Add_op_VE - 232)) | (1 << (XplorMRParser.Sub_op_VE - 232)) | (1 << (XplorMRParser.Mul_op_VE - 232)) | (1 << (XplorMRParser.Div_op_VE - 232)) | (1 << (XplorMRParser.Exp_op_VE - 232)))) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 2339
                self.vector_operation()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VflcContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Atom_properties_VE(self):
            return self.getToken(XplorMRParser.Atom_properties_VE, 0)

        def vector_func_call(self):
            return self.getTypedRuleContext(XplorMRParser.Vector_func_callContext,0)


        def Integer_VE(self):
            return self.getToken(XplorMRParser.Integer_VE, 0)

        def Real_VE(self):
            return self.getToken(XplorMRParser.Real_VE, 0)

        def Simple_name_VE(self):
            return self.getToken(XplorMRParser.Simple_name_VE, 0)

        def Symbol_name_VE(self):
            return self.getToken(XplorMRParser.Symbol_name_VE, 0)

        def Double_quote_string_VE(self):
            return self.getToken(XplorMRParser.Double_quote_string_VE, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_vflc

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVflc" ):
                listener.enterVflc(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVflc" ):
                listener.exitVflc(self)




    def vflc(self):

        localctx = XplorMRParser.VflcContext(self, self._ctx, self.state)
        self.enterRule(localctx, 208, self.RULE_vflc)
        try:
            self.state = 2349
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [XplorMRParser.Atom_properties_VE]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2342
                self.match(XplorMRParser.Atom_properties_VE)
                pass
            elif token in [XplorMRParser.Abs_VE, XplorMRParser.Acos_VE, XplorMRParser.Cos_VE, XplorMRParser.Decode_VE, XplorMRParser.Encode_VE, XplorMRParser.Exp_VE, XplorMRParser.Gauss_VE, XplorMRParser.Heavy_VE, XplorMRParser.Int_VE, XplorMRParser.Log10_VE, XplorMRParser.Log_VE, XplorMRParser.Max_VE, XplorMRParser.Maxw_VE, XplorMRParser.Min_VE, XplorMRParser.Mod_VE, XplorMRParser.Norm_VE, XplorMRParser.Random_VE, XplorMRParser.Sign_VE, XplorMRParser.Sin_VE, XplorMRParser.Sqrt_VE, XplorMRParser.Tan_VE]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2343
                self.vector_func_call()
                pass
            elif token in [XplorMRParser.Integer_VE]:
                self.enterOuterAlt(localctx, 3)
                self.state = 2344
                self.match(XplorMRParser.Integer_VE)
                pass
            elif token in [XplorMRParser.Real_VE]:
                self.enterOuterAlt(localctx, 4)
                self.state = 2345
                self.match(XplorMRParser.Real_VE)
                pass
            elif token in [XplorMRParser.Simple_name_VE]:
                self.enterOuterAlt(localctx, 5)
                self.state = 2346
                self.match(XplorMRParser.Simple_name_VE)
                pass
            elif token in [XplorMRParser.Symbol_name_VE]:
                self.enterOuterAlt(localctx, 6)
                self.state = 2347
                self.match(XplorMRParser.Symbol_name_VE)
                pass
            elif token in [XplorMRParser.Double_quote_string_VE]:
                self.enterOuterAlt(localctx, 7)
                self.state = 2348
                self.match(XplorMRParser.Double_quote_string_VE)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Vector_func_callContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Abs_VE(self):
            return self.getToken(XplorMRParser.Abs_VE, 0)

        def L_paren_VF(self):
            return self.getToken(XplorMRParser.L_paren_VF, 0)

        def vflc(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.VflcContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.VflcContext,i)


        def R_paren_VE(self):
            return self.getToken(XplorMRParser.R_paren_VE, 0)

        def Acos_VE(self):
            return self.getToken(XplorMRParser.Acos_VE, 0)

        def Cos_VE(self):
            return self.getToken(XplorMRParser.Cos_VE, 0)

        def Decode_VE(self):
            return self.getToken(XplorMRParser.Decode_VE, 0)

        def Encode_VE(self):
            return self.getToken(XplorMRParser.Encode_VE, 0)

        def Exp_VE(self):
            return self.getToken(XplorMRParser.Exp_VE, 0)

        def Gauss_VE(self):
            return self.getToken(XplorMRParser.Gauss_VE, 0)

        def Heavy_VE(self):
            return self.getToken(XplorMRParser.Heavy_VE, 0)

        def Int_VE(self):
            return self.getToken(XplorMRParser.Int_VE, 0)

        def Log10_VE(self):
            return self.getToken(XplorMRParser.Log10_VE, 0)

        def Log_VE(self):
            return self.getToken(XplorMRParser.Log_VE, 0)

        def Max_VE(self):
            return self.getToken(XplorMRParser.Max_VE, 0)

        def Comma_VE(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Comma_VE)
            else:
                return self.getToken(XplorMRParser.Comma_VE, i)

        def Maxw_VE(self):
            return self.getToken(XplorMRParser.Maxw_VE, 0)

        def Min_VE(self):
            return self.getToken(XplorMRParser.Min_VE, 0)

        def Mod_VE(self):
            return self.getToken(XplorMRParser.Mod_VE, 0)

        def Norm_VE(self):
            return self.getToken(XplorMRParser.Norm_VE, 0)

        def Random_VE(self):
            return self.getToken(XplorMRParser.Random_VE, 0)

        def Sign_VE(self):
            return self.getToken(XplorMRParser.Sign_VE, 0)

        def Sin_VE(self):
            return self.getToken(XplorMRParser.Sin_VE, 0)

        def Sqrt_VE(self):
            return self.getToken(XplorMRParser.Sqrt_VE, 0)

        def Tan_VE(self):
            return self.getToken(XplorMRParser.Tan_VE, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_vector_func_call

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVector_func_call" ):
                listener.enterVector_func_call(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVector_func_call" ):
                listener.exitVector_func_call(self)




    def vector_func_call(self):

        localctx = XplorMRParser.Vector_func_callContext(self, self._ctx, self.state)
        self.enterRule(localctx, 210, self.RULE_vector_func_call)
        self._la = 0 # Token type
        try:
            self.state = 2470
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [XplorMRParser.Abs_VE]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2351
                self.match(XplorMRParser.Abs_VE)
                self.state = 2352
                self.match(XplorMRParser.L_paren_VF)
                self.state = 2353
                self.vflc()
                self.state = 2354
                self.match(XplorMRParser.R_paren_VE)
                pass
            elif token in [XplorMRParser.Acos_VE]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2356
                self.match(XplorMRParser.Acos_VE)
                self.state = 2357
                self.match(XplorMRParser.L_paren_VF)
                self.state = 2358
                self.vflc()
                self.state = 2359
                self.match(XplorMRParser.R_paren_VE)
                pass
            elif token in [XplorMRParser.Cos_VE]:
                self.enterOuterAlt(localctx, 3)
                self.state = 2361
                self.match(XplorMRParser.Cos_VE)
                self.state = 2362
                self.match(XplorMRParser.L_paren_VF)
                self.state = 2363
                self.vflc()
                self.state = 2364
                self.match(XplorMRParser.R_paren_VE)
                pass
            elif token in [XplorMRParser.Decode_VE]:
                self.enterOuterAlt(localctx, 4)
                self.state = 2366
                self.match(XplorMRParser.Decode_VE)
                self.state = 2367
                self.match(XplorMRParser.L_paren_VF)
                self.state = 2368
                self.vflc()
                self.state = 2369
                self.match(XplorMRParser.R_paren_VE)
                pass
            elif token in [XplorMRParser.Encode_VE]:
                self.enterOuterAlt(localctx, 5)
                self.state = 2371
                self.match(XplorMRParser.Encode_VE)
                self.state = 2372
                self.match(XplorMRParser.L_paren_VF)
                self.state = 2373
                self.vflc()
                self.state = 2374
                self.match(XplorMRParser.R_paren_VE)
                pass
            elif token in [XplorMRParser.Exp_VE]:
                self.enterOuterAlt(localctx, 6)
                self.state = 2376
                self.match(XplorMRParser.Exp_VE)
                self.state = 2377
                self.match(XplorMRParser.L_paren_VF)
                self.state = 2378
                self.vflc()
                self.state = 2379
                self.match(XplorMRParser.R_paren_VE)
                pass
            elif token in [XplorMRParser.Gauss_VE]:
                self.enterOuterAlt(localctx, 7)
                self.state = 2381
                self.match(XplorMRParser.Gauss_VE)
                self.state = 2382
                self.match(XplorMRParser.L_paren_VF)
                self.state = 2383
                self.vflc()
                self.state = 2384
                self.match(XplorMRParser.R_paren_VE)
                pass
            elif token in [XplorMRParser.Heavy_VE]:
                self.enterOuterAlt(localctx, 8)
                self.state = 2386
                self.match(XplorMRParser.Heavy_VE)
                self.state = 2387
                self.match(XplorMRParser.L_paren_VF)
                self.state = 2388
                self.vflc()
                self.state = 2389
                self.match(XplorMRParser.R_paren_VE)
                pass
            elif token in [XplorMRParser.Int_VE]:
                self.enterOuterAlt(localctx, 9)
                self.state = 2391
                self.match(XplorMRParser.Int_VE)
                self.state = 2392
                self.match(XplorMRParser.L_paren_VF)
                self.state = 2393
                self.vflc()
                self.state = 2394
                self.match(XplorMRParser.R_paren_VE)
                pass
            elif token in [XplorMRParser.Log10_VE]:
                self.enterOuterAlt(localctx, 10)
                self.state = 2396
                self.match(XplorMRParser.Log10_VE)
                self.state = 2397
                self.match(XplorMRParser.L_paren_VF)
                self.state = 2398
                self.vflc()
                self.state = 2399
                self.match(XplorMRParser.R_paren_VE)
                pass
            elif token in [XplorMRParser.Log_VE]:
                self.enterOuterAlt(localctx, 11)
                self.state = 2401
                self.match(XplorMRParser.Log_VE)
                self.state = 2402
                self.match(XplorMRParser.L_paren_VF)
                self.state = 2403
                self.vflc()
                self.state = 2404
                self.match(XplorMRParser.R_paren_VE)
                pass
            elif token in [XplorMRParser.Max_VE]:
                self.enterOuterAlt(localctx, 12)
                self.state = 2406
                self.match(XplorMRParser.Max_VE)
                self.state = 2407
                self.match(XplorMRParser.L_paren_VF)
                self.state = 2408
                self.vflc()
                self.state = 2413
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==XplorMRParser.Comma_VE:
                    self.state = 2409
                    self.match(XplorMRParser.Comma_VE)
                    self.state = 2410
                    self.vflc()
                    self.state = 2415
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 2416
                self.match(XplorMRParser.R_paren_VE)
                pass
            elif token in [XplorMRParser.Maxw_VE]:
                self.enterOuterAlt(localctx, 13)
                self.state = 2418
                self.match(XplorMRParser.Maxw_VE)
                self.state = 2419
                self.match(XplorMRParser.L_paren_VF)
                self.state = 2420
                self.vflc()
                self.state = 2421
                self.match(XplorMRParser.R_paren_VE)
                pass
            elif token in [XplorMRParser.Min_VE]:
                self.enterOuterAlt(localctx, 14)
                self.state = 2423
                self.match(XplorMRParser.Min_VE)
                self.state = 2424
                self.match(XplorMRParser.L_paren_VF)
                self.state = 2425
                self.vflc()
                self.state = 2430
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==XplorMRParser.Comma_VE:
                    self.state = 2426
                    self.match(XplorMRParser.Comma_VE)
                    self.state = 2427
                    self.vflc()
                    self.state = 2432
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 2433
                self.match(XplorMRParser.R_paren_VE)
                pass
            elif token in [XplorMRParser.Mod_VE]:
                self.enterOuterAlt(localctx, 15)
                self.state = 2435
                self.match(XplorMRParser.Mod_VE)
                self.state = 2436
                self.match(XplorMRParser.L_paren_VF)
                self.state = 2437
                self.vflc()
                self.state = 2438
                self.match(XplorMRParser.Comma_VE)
                self.state = 2439
                self.vflc()
                self.state = 2440
                self.match(XplorMRParser.R_paren_VE)
                pass
            elif token in [XplorMRParser.Norm_VE]:
                self.enterOuterAlt(localctx, 16)
                self.state = 2442
                self.match(XplorMRParser.Norm_VE)
                self.state = 2443
                self.match(XplorMRParser.L_paren_VF)
                self.state = 2444
                self.vflc()
                self.state = 2445
                self.match(XplorMRParser.R_paren_VE)
                pass
            elif token in [XplorMRParser.Random_VE]:
                self.enterOuterAlt(localctx, 17)
                self.state = 2447
                self.match(XplorMRParser.Random_VE)
                self.state = 2448
                self.match(XplorMRParser.L_paren_VF)
                self.state = 2449
                self.match(XplorMRParser.R_paren_VE)
                pass
            elif token in [XplorMRParser.Sign_VE]:
                self.enterOuterAlt(localctx, 18)
                self.state = 2450
                self.match(XplorMRParser.Sign_VE)
                self.state = 2451
                self.match(XplorMRParser.L_paren_VF)
                self.state = 2452
                self.vflc()
                self.state = 2453
                self.match(XplorMRParser.R_paren_VE)
                pass
            elif token in [XplorMRParser.Sin_VE]:
                self.enterOuterAlt(localctx, 19)
                self.state = 2455
                self.match(XplorMRParser.Sin_VE)
                self.state = 2456
                self.match(XplorMRParser.L_paren_VF)
                self.state = 2457
                self.vflc()
                self.state = 2458
                self.match(XplorMRParser.R_paren_VE)
                pass
            elif token in [XplorMRParser.Sqrt_VE]:
                self.enterOuterAlt(localctx, 20)
                self.state = 2460
                self.match(XplorMRParser.Sqrt_VE)
                self.state = 2461
                self.match(XplorMRParser.L_paren_VF)
                self.state = 2462
                self.vflc()
                self.state = 2463
                self.match(XplorMRParser.R_paren_VE)
                pass
            elif token in [XplorMRParser.Tan_VE]:
                self.enterOuterAlt(localctx, 21)
                self.state = 2465
                self.match(XplorMRParser.Tan_VE)
                self.state = 2466
                self.match(XplorMRParser.L_paren_VF)
                self.state = 2467
                self.vflc()
                self.state = 2468
                self.match(XplorMRParser.R_paren_VE)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Vector_show_propertyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def L_paren_VS(self):
            return self.getToken(XplorMRParser.L_paren_VS, 0)

        def Atom_properties_VS(self):
            return self.getToken(XplorMRParser.Atom_properties_VS, 0)

        def R_paren_VS(self):
            return self.getToken(XplorMRParser.R_paren_VS, 0)

        def Average_VS(self):
            return self.getToken(XplorMRParser.Average_VS, 0)

        def Element_VS(self):
            return self.getToken(XplorMRParser.Element_VS, 0)

        def Max_VS(self):
            return self.getToken(XplorMRParser.Max_VS, 0)

        def Min_VS(self):
            return self.getToken(XplorMRParser.Min_VS, 0)

        def Norm_VS(self):
            return self.getToken(XplorMRParser.Norm_VS, 0)

        def Rms_VS(self):
            return self.getToken(XplorMRParser.Rms_VS, 0)

        def Sum_VS(self):
            return self.getToken(XplorMRParser.Sum_VS, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_vector_show_property

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVector_show_property" ):
                listener.enterVector_show_property(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVector_show_property" ):
                listener.exitVector_show_property(self)




    def vector_show_property(self):

        localctx = XplorMRParser.Vector_show_propertyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 212, self.RULE_vector_show_property)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2472
            _la = self._input.LA(1)
            if not(((((_la - 271)) & ~0x3f) == 0 and ((1 << (_la - 271)) & ((1 << (XplorMRParser.Average_VS - 271)) | (1 << (XplorMRParser.Element_VS - 271)) | (1 << (XplorMRParser.Max_VS - 271)) | (1 << (XplorMRParser.Min_VS - 271)) | (1 << (XplorMRParser.Norm_VS - 271)) | (1 << (XplorMRParser.Rms_VS - 271)) | (1 << (XplorMRParser.Sum_VS - 271)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 2473
            self.match(XplorMRParser.L_paren_VS)
            self.state = 2474
            self.match(XplorMRParser.Atom_properties_VS)
            self.state = 2475
            self.match(XplorMRParser.R_paren_VS)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Evaluate_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Evaluate_Lp(self):
            return self.getToken(XplorMRParser.Evaluate_Lp, 0)

        def Symbol_name_VE(self):
            return self.getToken(XplorMRParser.Symbol_name_VE, 0)

        def Equ_op_VE(self):
            return self.getToken(XplorMRParser.Equ_op_VE, 0)

        def evaluate_operation(self):
            return self.getTypedRuleContext(XplorMRParser.Evaluate_operationContext,0)


        def R_paren_VE(self):
            return self.getToken(XplorMRParser.R_paren_VE, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_evaluate_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEvaluate_statement" ):
                listener.enterEvaluate_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEvaluate_statement" ):
                listener.exitEvaluate_statement(self)




    def evaluate_statement(self):

        localctx = XplorMRParser.Evaluate_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 214, self.RULE_evaluate_statement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2477
            self.match(XplorMRParser.Evaluate_Lp)
            self.state = 2478
            self.match(XplorMRParser.Symbol_name_VE)
            self.state = 2479
            self.match(XplorMRParser.Equ_op_VE)
            self.state = 2480
            self.evaluate_operation()
            self.state = 2481
            self.match(XplorMRParser.R_paren_VE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Evaluate_operationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def vflc(self):
            return self.getTypedRuleContext(XplorMRParser.VflcContext,0)


        def evaluate_operation(self):
            return self.getTypedRuleContext(XplorMRParser.Evaluate_operationContext,0)


        def Add_op_VE(self):
            return self.getToken(XplorMRParser.Add_op_VE, 0)

        def Sub_op_VE(self):
            return self.getToken(XplorMRParser.Sub_op_VE, 0)

        def Mul_op_VE(self):
            return self.getToken(XplorMRParser.Mul_op_VE, 0)

        def Div_op_VE(self):
            return self.getToken(XplorMRParser.Div_op_VE, 0)

        def Exp_op_VE(self):
            return self.getToken(XplorMRParser.Exp_op_VE, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_evaluate_operation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEvaluate_operation" ):
                listener.enterEvaluate_operation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEvaluate_operation" ):
                listener.exitEvaluate_operation(self)




    def evaluate_operation(self):

        localctx = XplorMRParser.Evaluate_operationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 216, self.RULE_evaluate_operation)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2483
            self.vflc()
            self.state = 2486
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 232)) & ~0x3f) == 0 and ((1 << (_la - 232)) & ((1 << (XplorMRParser.Add_op_VE - 232)) | (1 << (XplorMRParser.Sub_op_VE - 232)) | (1 << (XplorMRParser.Mul_op_VE - 232)) | (1 << (XplorMRParser.Div_op_VE - 232)) | (1 << (XplorMRParser.Exp_op_VE - 232)))) != 0):
                self.state = 2484
                _la = self._input.LA(1)
                if not(((((_la - 232)) & ~0x3f) == 0 and ((1 << (_la - 232)) & ((1 << (XplorMRParser.Add_op_VE - 232)) | (1 << (XplorMRParser.Sub_op_VE - 232)) | (1 << (XplorMRParser.Mul_op_VE - 232)) | (1 << (XplorMRParser.Div_op_VE - 232)) | (1 << (XplorMRParser.Exp_op_VE - 232)))) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 2485
                self.evaluate_operation()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Patch_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Patch(self):
            return self.getToken(XplorMRParser.Patch, 0)

        def Reference(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Reference)
            else:
                return self.getToken(XplorMRParser.Reference, i)

        def Equ_op(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Equ_op)
            else:
                return self.getToken(XplorMRParser.Equ_op, i)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.SelectionContext,i)


        def End(self):
            return self.getToken(XplorMRParser.End, 0)

        def Nil(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Nil)
            else:
                return self.getToken(XplorMRParser.Nil, i)

        def Integer(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Integer)
            else:
                return self.getToken(XplorMRParser.Integer, i)

        def Simple_name(self):
            return self.getToken(XplorMRParser.Simple_name, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_patch_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPatch_statement" ):
                listener.enterPatch_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPatch_statement" ):
                listener.exitPatch_statement(self)




    def patch_statement(self):

        localctx = XplorMRParser.Patch_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 218, self.RULE_patch_statement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2488
            self.match(XplorMRParser.Patch)
            self.state = 2490
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==XplorMRParser.Simple_name:
                self.state = 2489
                self.match(XplorMRParser.Simple_name)


            self.state = 2492
            self.match(XplorMRParser.Reference)
            self.state = 2493
            self.match(XplorMRParser.Equ_op)
            self.state = 2494
            _la = self._input.LA(1)
            if not(_la==XplorMRParser.Nil or _la==XplorMRParser.Integer):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 2495
            self.match(XplorMRParser.Equ_op)
            self.state = 2496
            self.selection()
            self.state = 2502
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==XplorMRParser.Reference:
                self.state = 2497
                self.match(XplorMRParser.Reference)
                self.state = 2498
                self.match(XplorMRParser.Equ_op)
                self.state = 2499
                _la = self._input.LA(1)
                if not(_la==XplorMRParser.Nil or _la==XplorMRParser.Integer):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 2500
                self.match(XplorMRParser.Equ_op)
                self.state = 2501
                self.selection()


            self.state = 2504
            self.match(XplorMRParser.End)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Noe_assign_loopContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def For(self):
            return self.getToken(XplorMRParser.For, 0)

        def Symbol_name_CF(self):
            return self.getToken(XplorMRParser.Symbol_name_CF, 0)

        def In_CF(self):
            return self.getToken(XplorMRParser.In_CF, 0)

        def L_paren_CF(self):
            return self.getToken(XplorMRParser.L_paren_CF, 0)

        def R_paren_CF(self):
            return self.getToken(XplorMRParser.R_paren_CF, 0)

        def Loop(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Loop)
            else:
                return self.getToken(XplorMRParser.Loop, i)

        def Simple_name_LL(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Simple_name_LL)
            else:
                return self.getToken(XplorMRParser.Simple_name_LL, i)

        def End(self):
            return self.getToken(XplorMRParser.End, 0)

        def evaluate_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Evaluate_statementContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Evaluate_statementContext,i)


        def noe_assign(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Noe_assignContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Noe_assignContext,i)


        def Integer_CF(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Integer_CF)
            else:
                return self.getToken(XplorMRParser.Integer_CF, i)

        def Real_CF(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Real_CF)
            else:
                return self.getToken(XplorMRParser.Real_CF, i)

        def Simple_name_CF(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Simple_name_CF)
            else:
                return self.getToken(XplorMRParser.Simple_name_CF, i)

        def getRuleIndex(self):
            return XplorMRParser.RULE_noe_assign_loop

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNoe_assign_loop" ):
                listener.enterNoe_assign_loop(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNoe_assign_loop" ):
                listener.exitNoe_assign_loop(self)




    def noe_assign_loop(self):

        localctx = XplorMRParser.Noe_assign_loopContext(self, self._ctx, self.state)
        self.enterRule(localctx, 220, self.RULE_noe_assign_loop)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2506
            self.match(XplorMRParser.For)
            self.state = 2507
            self.match(XplorMRParser.Symbol_name_CF)
            self.state = 2508
            self.match(XplorMRParser.In_CF)
            self.state = 2509
            self.match(XplorMRParser.L_paren_CF)
            self.state = 2528
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,283,self._ctx)
            if la_ == 1:
                self.state = 2513
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==XplorMRParser.Integer_CF:
                    self.state = 2510
                    self.match(XplorMRParser.Integer_CF)
                    self.state = 2515
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 2:
                self.state = 2519
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==XplorMRParser.Real_CF:
                    self.state = 2516
                    self.match(XplorMRParser.Real_CF)
                    self.state = 2521
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 3:
                self.state = 2525
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==XplorMRParser.Simple_name_CF:
                    self.state = 2522
                    self.match(XplorMRParser.Simple_name_CF)
                    self.state = 2527
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass


            self.state = 2530
            self.match(XplorMRParser.R_paren_CF)
            self.state = 2531
            self.match(XplorMRParser.Loop)
            self.state = 2532
            self.match(XplorMRParser.Simple_name_LL)
            self.state = 2537
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==XplorMRParser.Assign or _la==XplorMRParser.Evaluate_Lp:
                self.state = 2535
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [XplorMRParser.Evaluate_Lp]:
                    self.state = 2533
                    self.evaluate_statement()
                    pass
                elif token in [XplorMRParser.Assign]:
                    self.state = 2534
                    self.noe_assign()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 2539
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2540
            self.match(XplorMRParser.End)
            self.state = 2541
            self.match(XplorMRParser.Loop)
            self.state = 2542
            self.match(XplorMRParser.Simple_name_LL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Dihedral_assign_loopContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def For(self):
            return self.getToken(XplorMRParser.For, 0)

        def Symbol_name_CF(self):
            return self.getToken(XplorMRParser.Symbol_name_CF, 0)

        def In_CF(self):
            return self.getToken(XplorMRParser.In_CF, 0)

        def L_paren_CF(self):
            return self.getToken(XplorMRParser.L_paren_CF, 0)

        def R_paren_CF(self):
            return self.getToken(XplorMRParser.R_paren_CF, 0)

        def Loop(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Loop)
            else:
                return self.getToken(XplorMRParser.Loop, i)

        def Simple_name_LL(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Simple_name_LL)
            else:
                return self.getToken(XplorMRParser.Simple_name_LL, i)

        def End(self):
            return self.getToken(XplorMRParser.End, 0)

        def evaluate_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Evaluate_statementContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Evaluate_statementContext,i)


        def dihedral_assign(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Dihedral_assignContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Dihedral_assignContext,i)


        def Integer_CF(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Integer_CF)
            else:
                return self.getToken(XplorMRParser.Integer_CF, i)

        def Real_CF(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Real_CF)
            else:
                return self.getToken(XplorMRParser.Real_CF, i)

        def Simple_name_CF(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Simple_name_CF)
            else:
                return self.getToken(XplorMRParser.Simple_name_CF, i)

        def getRuleIndex(self):
            return XplorMRParser.RULE_dihedral_assign_loop

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDihedral_assign_loop" ):
                listener.enterDihedral_assign_loop(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDihedral_assign_loop" ):
                listener.exitDihedral_assign_loop(self)




    def dihedral_assign_loop(self):

        localctx = XplorMRParser.Dihedral_assign_loopContext(self, self._ctx, self.state)
        self.enterRule(localctx, 222, self.RULE_dihedral_assign_loop)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2544
            self.match(XplorMRParser.For)
            self.state = 2545
            self.match(XplorMRParser.Symbol_name_CF)
            self.state = 2546
            self.match(XplorMRParser.In_CF)
            self.state = 2547
            self.match(XplorMRParser.L_paren_CF)
            self.state = 2566
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,289,self._ctx)
            if la_ == 1:
                self.state = 2551
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==XplorMRParser.Integer_CF:
                    self.state = 2548
                    self.match(XplorMRParser.Integer_CF)
                    self.state = 2553
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 2:
                self.state = 2557
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==XplorMRParser.Real_CF:
                    self.state = 2554
                    self.match(XplorMRParser.Real_CF)
                    self.state = 2559
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 3:
                self.state = 2563
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==XplorMRParser.Simple_name_CF:
                    self.state = 2560
                    self.match(XplorMRParser.Simple_name_CF)
                    self.state = 2565
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass


            self.state = 2568
            self.match(XplorMRParser.R_paren_CF)
            self.state = 2569
            self.match(XplorMRParser.Loop)
            self.state = 2570
            self.match(XplorMRParser.Simple_name_LL)
            self.state = 2575
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==XplorMRParser.Assign or _la==XplorMRParser.Evaluate_Lp:
                self.state = 2573
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [XplorMRParser.Evaluate_Lp]:
                    self.state = 2571
                    self.evaluate_statement()
                    pass
                elif token in [XplorMRParser.Assign]:
                    self.state = 2572
                    self.dihedral_assign()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 2577
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2578
            self.match(XplorMRParser.End)
            self.state = 2579
            self.match(XplorMRParser.Loop)
            self.state = 2580
            self.match(XplorMRParser.Simple_name_LL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Sani_assign_loopContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def For(self):
            return self.getToken(XplorMRParser.For, 0)

        def Symbol_name_CF(self):
            return self.getToken(XplorMRParser.Symbol_name_CF, 0)

        def In_CF(self):
            return self.getToken(XplorMRParser.In_CF, 0)

        def L_paren_CF(self):
            return self.getToken(XplorMRParser.L_paren_CF, 0)

        def R_paren_CF(self):
            return self.getToken(XplorMRParser.R_paren_CF, 0)

        def Loop(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Loop)
            else:
                return self.getToken(XplorMRParser.Loop, i)

        def Simple_name_LL(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Simple_name_LL)
            else:
                return self.getToken(XplorMRParser.Simple_name_LL, i)

        def End(self):
            return self.getToken(XplorMRParser.End, 0)

        def evaluate_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Evaluate_statementContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Evaluate_statementContext,i)


        def sani_assign(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Sani_assignContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Sani_assignContext,i)


        def Integer_CF(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Integer_CF)
            else:
                return self.getToken(XplorMRParser.Integer_CF, i)

        def Real_CF(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Real_CF)
            else:
                return self.getToken(XplorMRParser.Real_CF, i)

        def Simple_name_CF(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Simple_name_CF)
            else:
                return self.getToken(XplorMRParser.Simple_name_CF, i)

        def getRuleIndex(self):
            return XplorMRParser.RULE_sani_assign_loop

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSani_assign_loop" ):
                listener.enterSani_assign_loop(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSani_assign_loop" ):
                listener.exitSani_assign_loop(self)




    def sani_assign_loop(self):

        localctx = XplorMRParser.Sani_assign_loopContext(self, self._ctx, self.state)
        self.enterRule(localctx, 224, self.RULE_sani_assign_loop)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2582
            self.match(XplorMRParser.For)
            self.state = 2583
            self.match(XplorMRParser.Symbol_name_CF)
            self.state = 2584
            self.match(XplorMRParser.In_CF)
            self.state = 2585
            self.match(XplorMRParser.L_paren_CF)
            self.state = 2604
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,295,self._ctx)
            if la_ == 1:
                self.state = 2589
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==XplorMRParser.Integer_CF:
                    self.state = 2586
                    self.match(XplorMRParser.Integer_CF)
                    self.state = 2591
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 2:
                self.state = 2595
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==XplorMRParser.Real_CF:
                    self.state = 2592
                    self.match(XplorMRParser.Real_CF)
                    self.state = 2597
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 3:
                self.state = 2601
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==XplorMRParser.Simple_name_CF:
                    self.state = 2598
                    self.match(XplorMRParser.Simple_name_CF)
                    self.state = 2603
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass


            self.state = 2606
            self.match(XplorMRParser.R_paren_CF)
            self.state = 2607
            self.match(XplorMRParser.Loop)
            self.state = 2608
            self.match(XplorMRParser.Simple_name_LL)
            self.state = 2613
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==XplorMRParser.Assign or _la==XplorMRParser.Evaluate_Lp:
                self.state = 2611
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [XplorMRParser.Evaluate_Lp]:
                    self.state = 2609
                    self.evaluate_statement()
                    pass
                elif token in [XplorMRParser.Assign]:
                    self.state = 2610
                    self.sani_assign()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 2615
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2616
            self.match(XplorMRParser.End)
            self.state = 2617
            self.match(XplorMRParser.Loop)
            self.state = 2618
            self.match(XplorMRParser.Simple_name_LL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Xadc_assign_loopContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def For(self):
            return self.getToken(XplorMRParser.For, 0)

        def Symbol_name_CF(self):
            return self.getToken(XplorMRParser.Symbol_name_CF, 0)

        def In_CF(self):
            return self.getToken(XplorMRParser.In_CF, 0)

        def L_paren_CF(self):
            return self.getToken(XplorMRParser.L_paren_CF, 0)

        def R_paren_CF(self):
            return self.getToken(XplorMRParser.R_paren_CF, 0)

        def Loop(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Loop)
            else:
                return self.getToken(XplorMRParser.Loop, i)

        def Simple_name_LL(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Simple_name_LL)
            else:
                return self.getToken(XplorMRParser.Simple_name_LL, i)

        def End(self):
            return self.getToken(XplorMRParser.End, 0)

        def evaluate_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Evaluate_statementContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Evaluate_statementContext,i)


        def xadc_assign(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Xadc_assignContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Xadc_assignContext,i)


        def Integer_CF(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Integer_CF)
            else:
                return self.getToken(XplorMRParser.Integer_CF, i)

        def Real_CF(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Real_CF)
            else:
                return self.getToken(XplorMRParser.Real_CF, i)

        def Simple_name_CF(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Simple_name_CF)
            else:
                return self.getToken(XplorMRParser.Simple_name_CF, i)

        def getRuleIndex(self):
            return XplorMRParser.RULE_xadc_assign_loop

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterXadc_assign_loop" ):
                listener.enterXadc_assign_loop(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitXadc_assign_loop" ):
                listener.exitXadc_assign_loop(self)




    def xadc_assign_loop(self):

        localctx = XplorMRParser.Xadc_assign_loopContext(self, self._ctx, self.state)
        self.enterRule(localctx, 226, self.RULE_xadc_assign_loop)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2620
            self.match(XplorMRParser.For)
            self.state = 2621
            self.match(XplorMRParser.Symbol_name_CF)
            self.state = 2622
            self.match(XplorMRParser.In_CF)
            self.state = 2623
            self.match(XplorMRParser.L_paren_CF)
            self.state = 2642
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,301,self._ctx)
            if la_ == 1:
                self.state = 2627
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==XplorMRParser.Integer_CF:
                    self.state = 2624
                    self.match(XplorMRParser.Integer_CF)
                    self.state = 2629
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 2:
                self.state = 2633
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==XplorMRParser.Real_CF:
                    self.state = 2630
                    self.match(XplorMRParser.Real_CF)
                    self.state = 2635
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 3:
                self.state = 2639
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==XplorMRParser.Simple_name_CF:
                    self.state = 2636
                    self.match(XplorMRParser.Simple_name_CF)
                    self.state = 2641
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass


            self.state = 2644
            self.match(XplorMRParser.R_paren_CF)
            self.state = 2645
            self.match(XplorMRParser.Loop)
            self.state = 2646
            self.match(XplorMRParser.Simple_name_LL)
            self.state = 2651
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==XplorMRParser.Assign or _la==XplorMRParser.Evaluate_Lp:
                self.state = 2649
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [XplorMRParser.Evaluate_Lp]:
                    self.state = 2647
                    self.evaluate_statement()
                    pass
                elif token in [XplorMRParser.Assign]:
                    self.state = 2648
                    self.xadc_assign()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 2653
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2654
            self.match(XplorMRParser.End)
            self.state = 2655
            self.match(XplorMRParser.Loop)
            self.state = 2656
            self.match(XplorMRParser.Simple_name_LL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Coup_assign_loopContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def For(self):
            return self.getToken(XplorMRParser.For, 0)

        def Symbol_name_CF(self):
            return self.getToken(XplorMRParser.Symbol_name_CF, 0)

        def In_CF(self):
            return self.getToken(XplorMRParser.In_CF, 0)

        def L_paren_CF(self):
            return self.getToken(XplorMRParser.L_paren_CF, 0)

        def R_paren_CF(self):
            return self.getToken(XplorMRParser.R_paren_CF, 0)

        def Loop(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Loop)
            else:
                return self.getToken(XplorMRParser.Loop, i)

        def Simple_name_LL(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Simple_name_LL)
            else:
                return self.getToken(XplorMRParser.Simple_name_LL, i)

        def End(self):
            return self.getToken(XplorMRParser.End, 0)

        def evaluate_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Evaluate_statementContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Evaluate_statementContext,i)


        def coup_assign(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Coup_assignContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Coup_assignContext,i)


        def Integer_CF(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Integer_CF)
            else:
                return self.getToken(XplorMRParser.Integer_CF, i)

        def Real_CF(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Real_CF)
            else:
                return self.getToken(XplorMRParser.Real_CF, i)

        def Simple_name_CF(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Simple_name_CF)
            else:
                return self.getToken(XplorMRParser.Simple_name_CF, i)

        def getRuleIndex(self):
            return XplorMRParser.RULE_coup_assign_loop

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCoup_assign_loop" ):
                listener.enterCoup_assign_loop(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCoup_assign_loop" ):
                listener.exitCoup_assign_loop(self)




    def coup_assign_loop(self):

        localctx = XplorMRParser.Coup_assign_loopContext(self, self._ctx, self.state)
        self.enterRule(localctx, 228, self.RULE_coup_assign_loop)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2658
            self.match(XplorMRParser.For)
            self.state = 2659
            self.match(XplorMRParser.Symbol_name_CF)
            self.state = 2660
            self.match(XplorMRParser.In_CF)
            self.state = 2661
            self.match(XplorMRParser.L_paren_CF)
            self.state = 2680
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,307,self._ctx)
            if la_ == 1:
                self.state = 2665
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==XplorMRParser.Integer_CF:
                    self.state = 2662
                    self.match(XplorMRParser.Integer_CF)
                    self.state = 2667
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 2:
                self.state = 2671
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==XplorMRParser.Real_CF:
                    self.state = 2668
                    self.match(XplorMRParser.Real_CF)
                    self.state = 2673
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 3:
                self.state = 2677
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==XplorMRParser.Simple_name_CF:
                    self.state = 2674
                    self.match(XplorMRParser.Simple_name_CF)
                    self.state = 2679
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass


            self.state = 2682
            self.match(XplorMRParser.R_paren_CF)
            self.state = 2683
            self.match(XplorMRParser.Loop)
            self.state = 2684
            self.match(XplorMRParser.Simple_name_LL)
            self.state = 2689
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==XplorMRParser.Assign or _la==XplorMRParser.Evaluate_Lp:
                self.state = 2687
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [XplorMRParser.Evaluate_Lp]:
                    self.state = 2685
                    self.evaluate_statement()
                    pass
                elif token in [XplorMRParser.Assign]:
                    self.state = 2686
                    self.coup_assign()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 2691
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2692
            self.match(XplorMRParser.End)
            self.state = 2693
            self.match(XplorMRParser.Loop)
            self.state = 2694
            self.match(XplorMRParser.Simple_name_LL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Coll_assign_loopContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def For(self):
            return self.getToken(XplorMRParser.For, 0)

        def Symbol_name_CF(self):
            return self.getToken(XplorMRParser.Symbol_name_CF, 0)

        def In_CF(self):
            return self.getToken(XplorMRParser.In_CF, 0)

        def L_paren_CF(self):
            return self.getToken(XplorMRParser.L_paren_CF, 0)

        def R_paren_CF(self):
            return self.getToken(XplorMRParser.R_paren_CF, 0)

        def Loop(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Loop)
            else:
                return self.getToken(XplorMRParser.Loop, i)

        def Simple_name_LL(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Simple_name_LL)
            else:
                return self.getToken(XplorMRParser.Simple_name_LL, i)

        def End(self):
            return self.getToken(XplorMRParser.End, 0)

        def evaluate_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Evaluate_statementContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Evaluate_statementContext,i)


        def coll_assign(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Coll_assignContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Coll_assignContext,i)


        def Integer_CF(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Integer_CF)
            else:
                return self.getToken(XplorMRParser.Integer_CF, i)

        def Real_CF(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Real_CF)
            else:
                return self.getToken(XplorMRParser.Real_CF, i)

        def Simple_name_CF(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Simple_name_CF)
            else:
                return self.getToken(XplorMRParser.Simple_name_CF, i)

        def getRuleIndex(self):
            return XplorMRParser.RULE_coll_assign_loop

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColl_assign_loop" ):
                listener.enterColl_assign_loop(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColl_assign_loop" ):
                listener.exitColl_assign_loop(self)




    def coll_assign_loop(self):

        localctx = XplorMRParser.Coll_assign_loopContext(self, self._ctx, self.state)
        self.enterRule(localctx, 230, self.RULE_coll_assign_loop)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2696
            self.match(XplorMRParser.For)
            self.state = 2697
            self.match(XplorMRParser.Symbol_name_CF)
            self.state = 2698
            self.match(XplorMRParser.In_CF)
            self.state = 2699
            self.match(XplorMRParser.L_paren_CF)
            self.state = 2718
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,313,self._ctx)
            if la_ == 1:
                self.state = 2703
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==XplorMRParser.Integer_CF:
                    self.state = 2700
                    self.match(XplorMRParser.Integer_CF)
                    self.state = 2705
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 2:
                self.state = 2709
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==XplorMRParser.Real_CF:
                    self.state = 2706
                    self.match(XplorMRParser.Real_CF)
                    self.state = 2711
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 3:
                self.state = 2715
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==XplorMRParser.Simple_name_CF:
                    self.state = 2712
                    self.match(XplorMRParser.Simple_name_CF)
                    self.state = 2717
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass


            self.state = 2720
            self.match(XplorMRParser.R_paren_CF)
            self.state = 2721
            self.match(XplorMRParser.Loop)
            self.state = 2722
            self.match(XplorMRParser.Simple_name_LL)
            self.state = 2727
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==XplorMRParser.Assign or _la==XplorMRParser.Evaluate_Lp:
                self.state = 2725
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [XplorMRParser.Evaluate_Lp]:
                    self.state = 2723
                    self.evaluate_statement()
                    pass
                elif token in [XplorMRParser.Assign]:
                    self.state = 2724
                    self.coll_assign()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 2729
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2730
            self.match(XplorMRParser.End)
            self.state = 2731
            self.match(XplorMRParser.Loop)
            self.state = 2732
            self.match(XplorMRParser.Simple_name_LL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Csa_assign_loopContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def For(self):
            return self.getToken(XplorMRParser.For, 0)

        def Symbol_name_CF(self):
            return self.getToken(XplorMRParser.Symbol_name_CF, 0)

        def In_CF(self):
            return self.getToken(XplorMRParser.In_CF, 0)

        def L_paren_CF(self):
            return self.getToken(XplorMRParser.L_paren_CF, 0)

        def R_paren_CF(self):
            return self.getToken(XplorMRParser.R_paren_CF, 0)

        def Loop(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Loop)
            else:
                return self.getToken(XplorMRParser.Loop, i)

        def Simple_name_LL(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Simple_name_LL)
            else:
                return self.getToken(XplorMRParser.Simple_name_LL, i)

        def End(self):
            return self.getToken(XplorMRParser.End, 0)

        def evaluate_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Evaluate_statementContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Evaluate_statementContext,i)


        def csa_assign(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Csa_assignContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Csa_assignContext,i)


        def Integer_CF(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Integer_CF)
            else:
                return self.getToken(XplorMRParser.Integer_CF, i)

        def Real_CF(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Real_CF)
            else:
                return self.getToken(XplorMRParser.Real_CF, i)

        def Simple_name_CF(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Simple_name_CF)
            else:
                return self.getToken(XplorMRParser.Simple_name_CF, i)

        def getRuleIndex(self):
            return XplorMRParser.RULE_csa_assign_loop

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCsa_assign_loop" ):
                listener.enterCsa_assign_loop(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCsa_assign_loop" ):
                listener.exitCsa_assign_loop(self)




    def csa_assign_loop(self):

        localctx = XplorMRParser.Csa_assign_loopContext(self, self._ctx, self.state)
        self.enterRule(localctx, 232, self.RULE_csa_assign_loop)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2734
            self.match(XplorMRParser.For)
            self.state = 2735
            self.match(XplorMRParser.Symbol_name_CF)
            self.state = 2736
            self.match(XplorMRParser.In_CF)
            self.state = 2737
            self.match(XplorMRParser.L_paren_CF)
            self.state = 2756
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,319,self._ctx)
            if la_ == 1:
                self.state = 2741
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==XplorMRParser.Integer_CF:
                    self.state = 2738
                    self.match(XplorMRParser.Integer_CF)
                    self.state = 2743
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 2:
                self.state = 2747
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==XplorMRParser.Real_CF:
                    self.state = 2744
                    self.match(XplorMRParser.Real_CF)
                    self.state = 2749
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 3:
                self.state = 2753
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==XplorMRParser.Simple_name_CF:
                    self.state = 2750
                    self.match(XplorMRParser.Simple_name_CF)
                    self.state = 2755
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass


            self.state = 2758
            self.match(XplorMRParser.R_paren_CF)
            self.state = 2759
            self.match(XplorMRParser.Loop)
            self.state = 2760
            self.match(XplorMRParser.Simple_name_LL)
            self.state = 2765
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==XplorMRParser.Assign or _la==XplorMRParser.Evaluate_Lp:
                self.state = 2763
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [XplorMRParser.Evaluate_Lp]:
                    self.state = 2761
                    self.evaluate_statement()
                    pass
                elif token in [XplorMRParser.Assign]:
                    self.state = 2762
                    self.csa_assign()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 2767
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2768
            self.match(XplorMRParser.End)
            self.state = 2769
            self.match(XplorMRParser.Loop)
            self.state = 2770
            self.match(XplorMRParser.Simple_name_LL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pre_assign_loopContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def For(self):
            return self.getToken(XplorMRParser.For, 0)

        def Symbol_name_CF(self):
            return self.getToken(XplorMRParser.Symbol_name_CF, 0)

        def In_CF(self):
            return self.getToken(XplorMRParser.In_CF, 0)

        def L_paren_CF(self):
            return self.getToken(XplorMRParser.L_paren_CF, 0)

        def R_paren_CF(self):
            return self.getToken(XplorMRParser.R_paren_CF, 0)

        def Loop(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Loop)
            else:
                return self.getToken(XplorMRParser.Loop, i)

        def Simple_name_LL(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Simple_name_LL)
            else:
                return self.getToken(XplorMRParser.Simple_name_LL, i)

        def End(self):
            return self.getToken(XplorMRParser.End, 0)

        def evaluate_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Evaluate_statementContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Evaluate_statementContext,i)


        def pre_assign(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Pre_assignContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Pre_assignContext,i)


        def Integer_CF(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Integer_CF)
            else:
                return self.getToken(XplorMRParser.Integer_CF, i)

        def Real_CF(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Real_CF)
            else:
                return self.getToken(XplorMRParser.Real_CF, i)

        def Simple_name_CF(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Simple_name_CF)
            else:
                return self.getToken(XplorMRParser.Simple_name_CF, i)

        def getRuleIndex(self):
            return XplorMRParser.RULE_pre_assign_loop

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPre_assign_loop" ):
                listener.enterPre_assign_loop(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPre_assign_loop" ):
                listener.exitPre_assign_loop(self)




    def pre_assign_loop(self):

        localctx = XplorMRParser.Pre_assign_loopContext(self, self._ctx, self.state)
        self.enterRule(localctx, 234, self.RULE_pre_assign_loop)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2772
            self.match(XplorMRParser.For)
            self.state = 2773
            self.match(XplorMRParser.Symbol_name_CF)
            self.state = 2774
            self.match(XplorMRParser.In_CF)
            self.state = 2775
            self.match(XplorMRParser.L_paren_CF)
            self.state = 2794
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,325,self._ctx)
            if la_ == 1:
                self.state = 2779
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==XplorMRParser.Integer_CF:
                    self.state = 2776
                    self.match(XplorMRParser.Integer_CF)
                    self.state = 2781
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 2:
                self.state = 2785
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==XplorMRParser.Real_CF:
                    self.state = 2782
                    self.match(XplorMRParser.Real_CF)
                    self.state = 2787
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 3:
                self.state = 2791
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==XplorMRParser.Simple_name_CF:
                    self.state = 2788
                    self.match(XplorMRParser.Simple_name_CF)
                    self.state = 2793
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass


            self.state = 2796
            self.match(XplorMRParser.R_paren_CF)
            self.state = 2797
            self.match(XplorMRParser.Loop)
            self.state = 2798
            self.match(XplorMRParser.Simple_name_LL)
            self.state = 2803
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==XplorMRParser.Assign or _la==XplorMRParser.Evaluate_Lp:
                self.state = 2801
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [XplorMRParser.Evaluate_Lp]:
                    self.state = 2799
                    self.evaluate_statement()
                    pass
                elif token in [XplorMRParser.Assign]:
                    self.state = 2800
                    self.pre_assign()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 2805
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2806
            self.match(XplorMRParser.End)
            self.state = 2807
            self.match(XplorMRParser.Loop)
            self.state = 2808
            self.match(XplorMRParser.Simple_name_LL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pcs_assign_loopContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def For(self):
            return self.getToken(XplorMRParser.For, 0)

        def Symbol_name_CF(self):
            return self.getToken(XplorMRParser.Symbol_name_CF, 0)

        def In_CF(self):
            return self.getToken(XplorMRParser.In_CF, 0)

        def L_paren_CF(self):
            return self.getToken(XplorMRParser.L_paren_CF, 0)

        def R_paren_CF(self):
            return self.getToken(XplorMRParser.R_paren_CF, 0)

        def Loop(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Loop)
            else:
                return self.getToken(XplorMRParser.Loop, i)

        def Simple_name_LL(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Simple_name_LL)
            else:
                return self.getToken(XplorMRParser.Simple_name_LL, i)

        def End(self):
            return self.getToken(XplorMRParser.End, 0)

        def evaluate_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Evaluate_statementContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Evaluate_statementContext,i)


        def pcs_assign(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Pcs_assignContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Pcs_assignContext,i)


        def Integer_CF(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Integer_CF)
            else:
                return self.getToken(XplorMRParser.Integer_CF, i)

        def Real_CF(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Real_CF)
            else:
                return self.getToken(XplorMRParser.Real_CF, i)

        def Simple_name_CF(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Simple_name_CF)
            else:
                return self.getToken(XplorMRParser.Simple_name_CF, i)

        def getRuleIndex(self):
            return XplorMRParser.RULE_pcs_assign_loop

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPcs_assign_loop" ):
                listener.enterPcs_assign_loop(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPcs_assign_loop" ):
                listener.exitPcs_assign_loop(self)




    def pcs_assign_loop(self):

        localctx = XplorMRParser.Pcs_assign_loopContext(self, self._ctx, self.state)
        self.enterRule(localctx, 236, self.RULE_pcs_assign_loop)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2810
            self.match(XplorMRParser.For)
            self.state = 2811
            self.match(XplorMRParser.Symbol_name_CF)
            self.state = 2812
            self.match(XplorMRParser.In_CF)
            self.state = 2813
            self.match(XplorMRParser.L_paren_CF)
            self.state = 2832
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,331,self._ctx)
            if la_ == 1:
                self.state = 2817
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==XplorMRParser.Integer_CF:
                    self.state = 2814
                    self.match(XplorMRParser.Integer_CF)
                    self.state = 2819
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 2:
                self.state = 2823
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==XplorMRParser.Real_CF:
                    self.state = 2820
                    self.match(XplorMRParser.Real_CF)
                    self.state = 2825
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 3:
                self.state = 2829
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==XplorMRParser.Simple_name_CF:
                    self.state = 2826
                    self.match(XplorMRParser.Simple_name_CF)
                    self.state = 2831
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass


            self.state = 2834
            self.match(XplorMRParser.R_paren_CF)
            self.state = 2835
            self.match(XplorMRParser.Loop)
            self.state = 2836
            self.match(XplorMRParser.Simple_name_LL)
            self.state = 2841
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==XplorMRParser.Assign or _la==XplorMRParser.Evaluate_Lp:
                self.state = 2839
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [XplorMRParser.Evaluate_Lp]:
                    self.state = 2837
                    self.evaluate_statement()
                    pass
                elif token in [XplorMRParser.Assign]:
                    self.state = 2838
                    self.pcs_assign()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 2843
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2844
            self.match(XplorMRParser.End)
            self.state = 2845
            self.match(XplorMRParser.Loop)
            self.state = 2846
            self.match(XplorMRParser.Simple_name_LL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Hbond_assign_loopContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def For(self):
            return self.getToken(XplorMRParser.For, 0)

        def Symbol_name_CF(self):
            return self.getToken(XplorMRParser.Symbol_name_CF, 0)

        def In_CF(self):
            return self.getToken(XplorMRParser.In_CF, 0)

        def L_paren_CF(self):
            return self.getToken(XplorMRParser.L_paren_CF, 0)

        def R_paren_CF(self):
            return self.getToken(XplorMRParser.R_paren_CF, 0)

        def Loop(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Loop)
            else:
                return self.getToken(XplorMRParser.Loop, i)

        def Simple_name_LL(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Simple_name_LL)
            else:
                return self.getToken(XplorMRParser.Simple_name_LL, i)

        def End(self):
            return self.getToken(XplorMRParser.End, 0)

        def evaluate_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Evaluate_statementContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Evaluate_statementContext,i)


        def hbond_assign(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Hbond_assignContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Hbond_assignContext,i)


        def Integer_CF(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Integer_CF)
            else:
                return self.getToken(XplorMRParser.Integer_CF, i)

        def Real_CF(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Real_CF)
            else:
                return self.getToken(XplorMRParser.Real_CF, i)

        def Simple_name_CF(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Simple_name_CF)
            else:
                return self.getToken(XplorMRParser.Simple_name_CF, i)

        def getRuleIndex(self):
            return XplorMRParser.RULE_hbond_assign_loop

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHbond_assign_loop" ):
                listener.enterHbond_assign_loop(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHbond_assign_loop" ):
                listener.exitHbond_assign_loop(self)




    def hbond_assign_loop(self):

        localctx = XplorMRParser.Hbond_assign_loopContext(self, self._ctx, self.state)
        self.enterRule(localctx, 238, self.RULE_hbond_assign_loop)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2848
            self.match(XplorMRParser.For)
            self.state = 2849
            self.match(XplorMRParser.Symbol_name_CF)
            self.state = 2850
            self.match(XplorMRParser.In_CF)
            self.state = 2851
            self.match(XplorMRParser.L_paren_CF)
            self.state = 2870
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,337,self._ctx)
            if la_ == 1:
                self.state = 2855
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==XplorMRParser.Integer_CF:
                    self.state = 2852
                    self.match(XplorMRParser.Integer_CF)
                    self.state = 2857
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 2:
                self.state = 2861
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==XplorMRParser.Real_CF:
                    self.state = 2858
                    self.match(XplorMRParser.Real_CF)
                    self.state = 2863
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 3:
                self.state = 2867
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==XplorMRParser.Simple_name_CF:
                    self.state = 2864
                    self.match(XplorMRParser.Simple_name_CF)
                    self.state = 2869
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass


            self.state = 2872
            self.match(XplorMRParser.R_paren_CF)
            self.state = 2873
            self.match(XplorMRParser.Loop)
            self.state = 2874
            self.match(XplorMRParser.Simple_name_LL)
            self.state = 2879
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==XplorMRParser.Assign or _la==XplorMRParser.Evaluate_Lp:
                self.state = 2877
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [XplorMRParser.Evaluate_Lp]:
                    self.state = 2875
                    self.evaluate_statement()
                    pass
                elif token in [XplorMRParser.Assign]:
                    self.state = 2876
                    self.hbond_assign()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 2881
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2882
            self.match(XplorMRParser.End)
            self.state = 2883
            self.match(XplorMRParser.Loop)
            self.state = 2884
            self.match(XplorMRParser.Simple_name_LL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Hbond_db_assign_loopContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def For(self):
            return self.getToken(XplorMRParser.For, 0)

        def Symbol_name_CF(self):
            return self.getToken(XplorMRParser.Symbol_name_CF, 0)

        def In_CF(self):
            return self.getToken(XplorMRParser.In_CF, 0)

        def L_paren_CF(self):
            return self.getToken(XplorMRParser.L_paren_CF, 0)

        def R_paren_CF(self):
            return self.getToken(XplorMRParser.R_paren_CF, 0)

        def Loop(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Loop)
            else:
                return self.getToken(XplorMRParser.Loop, i)

        def Simple_name_LL(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Simple_name_LL)
            else:
                return self.getToken(XplorMRParser.Simple_name_LL, i)

        def End(self):
            return self.getToken(XplorMRParser.End, 0)

        def evaluate_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Evaluate_statementContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Evaluate_statementContext,i)


        def hbond_db_assign(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Hbond_db_assignContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Hbond_db_assignContext,i)


        def Integer_CF(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Integer_CF)
            else:
                return self.getToken(XplorMRParser.Integer_CF, i)

        def Real_CF(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Real_CF)
            else:
                return self.getToken(XplorMRParser.Real_CF, i)

        def Simple_name_CF(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Simple_name_CF)
            else:
                return self.getToken(XplorMRParser.Simple_name_CF, i)

        def getRuleIndex(self):
            return XplorMRParser.RULE_hbond_db_assign_loop

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHbond_db_assign_loop" ):
                listener.enterHbond_db_assign_loop(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHbond_db_assign_loop" ):
                listener.exitHbond_db_assign_loop(self)




    def hbond_db_assign_loop(self):

        localctx = XplorMRParser.Hbond_db_assign_loopContext(self, self._ctx, self.state)
        self.enterRule(localctx, 240, self.RULE_hbond_db_assign_loop)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2886
            self.match(XplorMRParser.For)
            self.state = 2887
            self.match(XplorMRParser.Symbol_name_CF)
            self.state = 2888
            self.match(XplorMRParser.In_CF)
            self.state = 2889
            self.match(XplorMRParser.L_paren_CF)
            self.state = 2908
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,343,self._ctx)
            if la_ == 1:
                self.state = 2893
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==XplorMRParser.Integer_CF:
                    self.state = 2890
                    self.match(XplorMRParser.Integer_CF)
                    self.state = 2895
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 2:
                self.state = 2899
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==XplorMRParser.Real_CF:
                    self.state = 2896
                    self.match(XplorMRParser.Real_CF)
                    self.state = 2901
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 3:
                self.state = 2905
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==XplorMRParser.Simple_name_CF:
                    self.state = 2902
                    self.match(XplorMRParser.Simple_name_CF)
                    self.state = 2907
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass


            self.state = 2910
            self.match(XplorMRParser.R_paren_CF)
            self.state = 2911
            self.match(XplorMRParser.Loop)
            self.state = 2912
            self.match(XplorMRParser.Simple_name_LL)
            self.state = 2917
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==XplorMRParser.Assign or _la==XplorMRParser.Evaluate_Lp:
                self.state = 2915
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [XplorMRParser.Evaluate_Lp]:
                    self.state = 2913
                    self.evaluate_statement()
                    pass
                elif token in [XplorMRParser.Assign]:
                    self.state = 2914
                    self.hbond_db_assign()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 2919
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2920
            self.match(XplorMRParser.End)
            self.state = 2921
            self.match(XplorMRParser.Loop)
            self.state = 2922
            self.match(XplorMRParser.Simple_name_LL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx



    def sempred(self, localctx:RuleContext, ruleIndex:int, predIndex:int):
        if self._predicates == None:
            self._predicates = dict()
        self._predicates[94] = self.factor_sempred
        pred = self._predicates.get(ruleIndex, None)
        if pred is None:
            raise Exception("No predicate with index:" + str(ruleIndex))
        else:
            return pred(localctx, predIndex)

    def factor_sempred(self, localctx:FactorContext, predIndex:int):
            if predIndex == 0:
                return self.precpred(self._ctx, 32)
         

            if predIndex == 1:
                return self.precpred(self._ctx, 14)
         




