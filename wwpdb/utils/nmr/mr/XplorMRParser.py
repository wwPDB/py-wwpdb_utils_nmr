# Generated from XplorMRParser.g4 by ANTLR 4.9
# encoding: utf-8
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
	from typing import TextIO
else:
	from typing.io import TextIO


def serializedATN():
    with StringIO() as buf:
        buf.write("\3\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964\3\u00c5")
        buf.write("\u0725\4\2\t\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7\t\7")
        buf.write("\4\b\t\b\4\t\t\t\4\n\t\n\4\13\t\13\4\f\t\f\4\r\t\r\4\16")
        buf.write("\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22\t\22\4\23\t\23")
        buf.write("\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30\t\30\4\31")
        buf.write("\t\31\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t\35\4\36\t\36")
        buf.write("\4\37\t\37\4 \t \4!\t!\4\"\t\"\4#\t#\4$\t$\4%\t%\4&\t")
        buf.write("&\4\'\t\'\4(\t(\4)\t)\4*\t*\4+\t+\4,\t,\4-\t-\4.\t.\4")
        buf.write("/\t/\4\60\t\60\4\61\t\61\4\62\t\62\4\63\t\63\4\64\t\64")
        buf.write("\4\65\t\65\4\66\t\66\4\67\t\67\48\t8\49\t9\4:\t:\4;\t")
        buf.write(";\4<\t<\4=\t=\4>\t>\4?\t?\4@\t@\4A\tA\4B\tB\4C\tC\4D\t")
        buf.write("D\4E\tE\4F\tF\4G\tG\4H\tH\4I\tI\4J\tJ\4K\tK\4L\tL\4M\t")
        buf.write("M\4N\tN\4O\tO\4P\tP\4Q\tQ\4R\tR\4S\tS\4T\tT\4U\tU\4V\t")
        buf.write("V\4W\tW\4X\tX\4Y\tY\4Z\tZ\4[\t[\4\\\t\\\4]\t]\4^\t^\4")
        buf.write("_\t_\3\2\3\2\3\2\3\2\3\2\3\2\3\2\3\2\3\2\3\2\3\2\3\2\3")
        buf.write("\2\3\2\3\2\3\2\3\2\3\2\3\2\3\2\3\2\3\2\3\2\3\2\3\2\3\2")
        buf.write("\3\2\3\2\3\2\3\2\3\2\3\2\3\2\3\2\7\2\u00e1\n\2\f\2\16")
        buf.write("\2\u00e4\13\2\3\2\3\2\3\3\3\3\7\3\u00ea\n\3\f\3\16\3\u00ed")
        buf.write("\13\3\3\3\3\3\3\4\3\4\3\4\7\4\u00f4\n\4\f\4\16\4\u00f7")
        buf.write("\13\4\3\4\3\4\3\5\3\5\7\5\u00fd\n\5\f\5\16\5\u0100\13")
        buf.write("\5\3\5\3\5\3\5\7\5\u0105\n\5\f\5\16\5\u0108\13\5\3\5\3")
        buf.write("\5\3\5\7\5\u010d\n\5\f\5\16\5\u0110\13\5\3\5\3\5\3\5\7")
        buf.write("\5\u0115\n\5\f\5\16\5\u0118\13\5\3\5\3\5\3\5\7\5\u011d")
        buf.write("\n\5\f\5\16\5\u0120\13\5\3\5\5\5\u0123\n\5\3\6\3\6\3\6")
        buf.write("\7\6\u0128\n\6\f\6\16\6\u012b\13\6\3\6\3\6\3\7\3\7\7\7")
        buf.write("\u0131\n\7\f\7\16\7\u0134\13\7\3\7\3\7\3\b\3\b\7\b\u013a")
        buf.write("\n\b\f\b\16\b\u013d\13\b\3\b\3\b\3\t\3\t\7\t\u0143\n\t")
        buf.write("\f\t\16\t\u0146\13\t\3\t\3\t\3\n\3\n\7\n\u014c\n\n\f\n")
        buf.write("\16\n\u014f\13\n\3\n\3\n\3\13\3\13\7\13\u0155\n\13\f\13")
        buf.write("\16\13\u0158\13\13\3\13\3\13\3\f\3\f\7\f\u015e\n\f\f\f")
        buf.write("\16\f\u0161\13\f\3\f\3\f\3\r\3\r\7\r\u0167\n\r\f\r\16")
        buf.write("\r\u016a\13\r\3\r\3\r\3\16\3\16\7\16\u0170\n\16\f\16\16")
        buf.write("\16\u0173\13\16\3\16\3\16\3\17\3\17\7\17\u0179\n\17\f")
        buf.write("\17\16\17\u017c\13\17\3\17\3\17\3\20\3\20\7\20\u0182\n")
        buf.write("\20\f\20\16\20\u0185\13\20\3\20\3\20\3\21\3\21\7\21\u018b")
        buf.write("\n\21\f\21\16\21\u018e\13\21\3\21\3\21\3\22\3\22\7\22")
        buf.write("\u0194\n\22\f\22\16\22\u0197\13\22\3\22\3\22\3\23\3\23")
        buf.write("\7\23\u019d\n\23\f\23\16\23\u01a0\13\23\3\23\3\23\3\24")
        buf.write("\3\24\7\24\u01a6\n\24\f\24\16\24\u01a9\13\24\3\24\3\24")
        buf.write("\3\25\3\25\7\25\u01af\n\25\f\25\16\25\u01b2\13\25\3\25")
        buf.write("\3\25\3\26\3\26\7\26\u01b8\n\26\f\26\16\26\u01bb\13\26")
        buf.write("\3\26\3\26\3\27\3\27\7\27\u01c1\n\27\f\27\16\27\u01c4")
        buf.write("\13\27\3\27\3\27\3\30\3\30\7\30\u01ca\n\30\f\30\16\30")
        buf.write("\u01cd\13\30\3\30\3\30\3\31\3\31\3\31\3\31\3\31\3\31\3")
        buf.write("\31\3\31\3\31\3\31\3\31\3\31\5\31\u01dd\n\31\3\31\3\31")
        buf.write("\3\31\3\31\3\31\3\31\3\31\3\31\3\31\3\31\3\31\3\31\3\31")
        buf.write("\3\31\3\31\3\31\3\31\5\31\u01f0\n\31\3\31\3\31\3\31\3")
        buf.write("\31\3\31\3\31\3\31\3\31\3\31\3\31\3\31\5\31\u01fd\n\31")
        buf.write("\3\31\3\31\3\31\3\31\3\31\3\31\3\31\3\31\3\31\3\31\3\31")
        buf.write("\3\31\3\31\3\31\3\31\3\31\3\31\3\31\3\31\3\31\3\31\3\31")
        buf.write("\5\31\u0215\n\31\3\31\5\31\u0218\n\31\3\32\3\32\3\32\3")
        buf.write("\32\3\32\3\32\3\32\7\32\u0221\n\32\f\32\16\32\u0224\13")
        buf.write("\32\3\32\3\32\3\32\3\32\7\32\u022a\n\32\f\32\16\32\u022d")
        buf.write("\13\32\3\33\3\33\5\33\u0231\n\33\3\33\3\33\3\33\5\33\u0236")
        buf.write("\n\33\3\33\3\33\3\33\3\33\3\33\5\33\u023d\n\33\3\34\3")
        buf.write("\34\5\34\u0241\n\34\3\34\3\34\3\34\5\34\u0246\n\34\3\34")
        buf.write("\3\34\3\34\5\34\u024b\n\34\3\34\3\34\3\34\5\34\u0250\n")
        buf.write("\34\3\34\3\34\3\34\5\34\u0255\n\34\3\34\3\34\3\34\5\34")
        buf.write("\u025a\n\34\3\34\3\34\3\34\5\34\u025f\n\34\3\34\5\34\u0262")
        buf.write("\n\34\3\35\3\35\3\35\5\35\u0267\n\35\3\35\3\35\3\35\3")
        buf.write("\35\5\35\u026d\n\35\3\36\3\36\3\36\3\36\3\36\3\36\3\36")
        buf.write("\3\36\3\36\3\36\3\37\3\37\3\37\3\37\3\37\3\37\3\37\3\37")
        buf.write("\3\37\3\37\3\37\3\37\3\37\3\37\3\37\3\37\3\37\3\37\5\37")
        buf.write("\u028b\n\37\3 \3 \3 \3 \3 \3 \3 \3 \3 \3 \5 \u0297\n ")
        buf.write("\3!\3!\3!\3!\3!\3!\3!\3!\3!\3!\3!\3!\3!\3!\3!\3!\3!\3")
        buf.write("!\3!\3!\3!\3!\3!\3!\3!\3!\5!\u02b3\n!\3\"\3\"\3\"\3\"")
        buf.write("\3\"\3\"\3\"\3\"\3\"\3\"\3\"\3\"\3\"\3\"\3\"\5\"\u02c4")
        buf.write("\n\"\3#\3#\3#\5#\u02c9\n#\3#\3#\3#\3#\3#\3#\3#\3#\3#\3")
        buf.write("#\3#\5#\u02d6\n#\3#\3#\3#\3#\3#\5#\u02dd\n#\3$\3$\3$\3")
        buf.write("$\3$\3$\3$\3$\3$\3$\3%\3%\3%\3%\3%\3%\3%\3%\3%\3%\3%\3")
        buf.write("%\3%\5%\u02f6\n%\3&\3&\3&\3&\3&\3&\3\'\3\'\3\'\3\'\3\'")
        buf.write("\3\'\3\'\3\'\3\'\3\'\3\'\3\'\3\'\3\'\3\'\3\'\3\'\3\'\3")
        buf.write("\'\3\'\3\'\5\'\u0313\n\'\3(\3(\3(\3(\3(\3(\3(\3(\3)\3")
        buf.write(")\7)\u031f\n)\f)\16)\u0322\13)\3)\3)\5)\u0326\n)\3*\3")
        buf.write("*\5*\u032a\n*\3*\3*\3*\5*\u032f\n*\3*\5*\u0332\n*\3+\3")
        buf.write("+\3+\3+\3+\3+\3+\3+\3+\3+\3+\3+\3+\3+\3+\3+\5+\u0344\n")
        buf.write("+\3+\3+\3+\3+\3+\3+\5+\u034c\n+\3,\3,\3,\3,\3-\3-\3-\3")
        buf.write("-\3-\3-\3-\3-\3-\3-\3-\5-\u035d\n-\3-\3-\3-\3-\3-\3-\5")
        buf.write("-\u0365\n-\3-\3-\3-\3-\5-\u036b\n-\3-\3-\3-\3-\3-\3-\3")
        buf.write("-\3-\3-\5-\u0376\n-\3-\5-\u0379\n-\3.\3.\3.\3.\3.\3.\3")
        buf.write(".\3.\3.\3.\5.\u0385\n.\3.\3.\3.\3.\3.\5.\u038c\n.\3/\3")
        buf.write("/\3/\3/\3/\3/\3/\3/\3/\3/\3/\3/\3/\3/\3/\3/\3/\3/\3/\3")
        buf.write("/\3/\3/\3/\3/\3/\3/\5/\u03a8\n/\3\60\3\60\3\60\3\60\3")
        buf.write("\60\3\60\3\60\3\60\3\60\3\61\3\61\3\61\3\61\3\61\3\62")
        buf.write("\3\62\3\62\3\62\3\62\3\62\3\62\3\62\3\62\3\62\3\62\3\62")
        buf.write("\3\62\3\62\3\62\3\62\3\62\3\62\5\62\u03ca\n\62\3\62\3")
        buf.write("\62\3\62\3\62\3\62\3\62\3\62\3\62\5\62\u03d4\n\62\3\62")
        buf.write("\3\62\3\62\5\62\u03d9\n\62\3\63\3\63\3\63\5\63\u03de\n")
        buf.write("\63\3\63\3\63\5\63\u03e2\n\63\3\64\3\64\3\64\3\64\3\65")
        buf.write("\3\65\3\65\3\65\3\65\3\65\5\65\u03ee\n\65\3\65\3\65\3")
        buf.write("\66\3\66\3\66\3\67\3\67\3\67\38\38\38\39\39\39\3:\3:\3")
        buf.write(":\3:\3:\3:\3:\3:\5:\u0406\n:\3;\3;\3;\3<\3<\3<\3<\3<\3")
        buf.write("<\3<\3<\3<\3<\3<\3<\3<\3<\3<\5<\u041a\n<\3<\3<\3<\3<\5")
        buf.write("<\u0420\n<\3<\3<\3<\3<\5<\u0426\n<\3<\3<\3<\3<\3<\3<\3")
        buf.write("<\3<\3<\3<\5<\u0432\n<\3<\3<\3<\3<\5<\u0438\n<\3<\3<\3")
        buf.write("<\3<\5<\u043e\n<\3<\3<\3<\3<\3<\3<\5<\u0446\n<\3<\3<\3")
        buf.write("<\3<\3<\3<\3<\3<\5<\u0450\n<\3<\3<\3<\3<\5<\u0456\n<\3")
        buf.write("<\3<\3<\3<\5<\u045c\n<\3<\3<\3<\3<\3<\3<\3<\3<\3<\5<\u0467")
        buf.write("\n<\3<\5<\u046a\n<\3<\5<\u046d\n<\3<\3<\5<\u0471\n<\3")
        buf.write("=\3=\3=\3=\3=\3=\3=\3=\3=\3=\5=\u047d\n=\3=\3=\3=\3=\3")
        buf.write("=\5=\u0484\n=\3=\3=\3=\3=\3=\5=\u048b\n=\3>\3>\3>\3>\3")
        buf.write(">\5>\u0492\n>\3?\3?\3?\3?\3?\3@\3@\3@\3@\3@\3@\3@\3@\3")
        buf.write("@\3@\3@\3@\3@\3@\3@\3@\3@\3@\3@\3@\3@\3@\5@\u04af\n@\3")
        buf.write("A\3A\3A\3A\3A\3A\3A\3A\3A\3A\3B\3B\3B\3B\3B\3B\3B\3B\3")
        buf.write("B\3B\3B\3B\3B\3B\3B\3B\3B\3B\3B\3B\3B\3B\3B\3B\3B\3B\3")
        buf.write("B\3B\3B\3B\3B\3B\3B\3B\3B\3B\3B\3B\5B\u04e1\nB\3B\3B\3")
        buf.write("B\3B\3B\3B\3B\3B\3B\3B\3B\3B\3B\3B\3B\3B\3B\5B\u04f4\n")
        buf.write("B\3C\3C\3C\3C\3C\3C\3D\3D\3D\3D\3D\3D\3D\3D\3D\3D\3D\3")
        buf.write("D\3D\3D\3D\3D\3D\3D\3D\3D\3D\3D\3D\3D\3D\3D\3D\5D\u0517")
        buf.write("\nD\3E\3E\3E\3E\3E\3E\3E\3E\3E\3E\3E\3E\3F\3F\3F\3F\3")
        buf.write("F\3F\3F\3F\3F\3F\3F\3F\3F\3F\3F\3F\3F\3F\3F\3F\3F\3F\3")
        buf.write("F\3F\3F\3F\5F\u053f\nF\3G\3G\3G\3G\3G\3G\3G\3G\3G\3G\3")
        buf.write("G\3G\3G\3G\3G\3G\3G\3G\3G\3G\3G\3G\5G\u0557\nG\3H\3H\3")
        buf.write("H\3H\3H\3H\3H\3H\3H\3H\3H\3H\3I\3I\3I\3I\3I\3I\3I\3I\3")
        buf.write("I\3I\3I\3I\3I\3I\3I\3I\3I\3I\3I\3I\3I\3I\3I\5I\u057c\n")
        buf.write("I\3I\3I\3I\3I\3I\3I\5I\u0584\nI\3J\3J\3J\3J\3J\3J\3J\3")
        buf.write("J\3J\3J\3J\3J\3J\5J\u0593\nJ\3K\3K\3K\5K\u0598\nK\3K\3")
        buf.write("K\3K\5K\u059d\nK\3K\3K\3K\3K\5K\u05a3\nK\3K\3K\3K\5K\u05a8")
        buf.write("\nK\3K\3K\3K\3K\5K\u05ae\nK\3K\3K\3K\3K\5K\u05b4\nK\3")
        buf.write("K\3K\3K\3K\5K\u05ba\nK\3K\3K\3K\3K\3K\3K\3K\3K\3K\3K\5")
        buf.write("K\u05c6\nK\3K\3K\5K\u05ca\nK\3L\3L\3L\3L\3L\3L\3M\3M\3")
        buf.write("M\3M\3M\3M\3M\3M\3M\3M\3M\3M\3M\3M\3M\3M\3M\3M\3M\5M\u05e5")
        buf.write("\nM\3M\3M\3M\3M\3M\3M\3M\3M\3M\3M\3M\3M\3M\3M\3M\5M\u05f6")
        buf.write("\nM\3N\3N\3N\3N\3N\3N\3N\3N\3N\3O\3O\3O\3O\3O\3O\3O\3")
        buf.write("O\3O\3O\3O\3O\3O\3O\3O\3O\3O\3O\3O\3O\3O\3O\3O\3O\3O\3")
        buf.write("O\5O\u061b\nO\3P\3P\3P\3P\3P\3P\3P\3P\3P\3P\3Q\3Q\3Q\3")
        buf.write("Q\3Q\3Q\3Q\3Q\3Q\3Q\3Q\5Q\u0632\nQ\3R\3R\3R\3R\3R\3R\3")
        buf.write("R\3S\3S\3S\3S\3S\3S\3S\3S\3S\3S\3S\3S\3S\3S\3S\3S\3S\5")
        buf.write("S\u064c\nS\3T\3T\3T\3T\3T\3T\3T\3U\3U\3U\3U\3U\3U\3U\3")
        buf.write("U\3U\3U\3U\5U\u0660\nU\3V\3V\3V\3V\3V\3W\3W\3W\3W\3X\3")
        buf.write("X\3X\7X\u066e\nX\fX\16X\u0671\13X\3Y\3Y\3Y\7Y\u0676\n")
        buf.write("Y\fY\16Y\u0679\13Y\3Z\3Z\3Z\3Z\3Z\3Z\3Z\3Z\3Z\3Z\3Z\3")
        buf.write("Z\5Z\u0687\nZ\3Z\3Z\3Z\3Z\3Z\3Z\3Z\3Z\3Z\3Z\3Z\3Z\3Z\3")
        buf.write("Z\5Z\u0697\nZ\5Z\u0699\nZ\3Z\3Z\3Z\3Z\3Z\3Z\3Z\3Z\3Z\5")
        buf.write("Z\u06a4\nZ\5Z\u06a6\nZ\3Z\3Z\3Z\3Z\3Z\3Z\5Z\u06ae\nZ\3")
        buf.write("Z\3Z\5Z\u06b2\nZ\3Z\3Z\3Z\3Z\3Z\3Z\3Z\3Z\3Z\5Z\u06bd\n")
        buf.write("Z\3Z\3Z\5Z\u06c1\nZ\3Z\3Z\5Z\u06c5\nZ\3Z\5Z\u06c8\nZ\3")
        buf.write("Z\3Z\3Z\3Z\3Z\3Z\3Z\3Z\3Z\3Z\3Z\5Z\u06d5\nZ\5Z\u06d7\n")
        buf.write("Z\3Z\3Z\3Z\3Z\3Z\5Z\u06de\nZ\5Z\u06e0\nZ\3Z\3Z\3Z\3Z\3")
        buf.write("Z\5Z\u06e7\nZ\3Z\3Z\3Z\5Z\u06ec\nZ\5Z\u06ee\nZ\3Z\3Z\3")
        buf.write("Z\3Z\3Z\3Z\3Z\3Z\3Z\3Z\5Z\u06fa\nZ\3Z\3Z\3Z\3Z\3Z\3Z\7")
        buf.write("Z\u0702\nZ\fZ\16Z\u0705\13Z\3[\3[\3\\\3\\\3]\3]\3^\3^")
        buf.write("\3_\3_\3_\7_\u0712\n_\f_\16_\u0715\13_\3_\5_\u0718\n_")
        buf.write("\5_\u071a\n_\3_\3_\7_\u071e\n_\f_\16_\u0721\13_\3_\3_")
        buf.write("\3_\2\3\u00b2`\2\4\6\b\n\f\16\20\22\24\26\30\32\34\36")
        buf.write(" \"$&(*,.\60\62\64\668:<>@BDFHJLNPRTVXZ\\^`bdfhjlnprt")
        buf.write("vxz|~\u0080\u0082\u0084\u0086\u0088\u008a\u008c\u008e")
        buf.write("\u0090\u0092\u0094\u0096\u0098\u009a\u009c\u009e\u00a0")
        buf.write("\u00a2\u00a4\u00a6\u00a8\u00aa\u00ac\u00ae\u00b0\u00b2")
        buf.write("\u00b4\u00b6\u00b8\u00ba\u00bc\2\6\3\2/\60\3\2\u00ac\u00ad")
        buf.write("\4\2\u00a8\u00a8\u00ae\u00ae\4\2\u00a8\u00a8\u00aa\u00aa")
        buf.write("\2\u087d\2\u00e2\3\2\2\2\4\u00e7\3\2\2\2\6\u00f0\3\2\2")
        buf.write("\2\b\u0122\3\2\2\2\n\u0124\3\2\2\2\f\u012e\3\2\2\2\16")
        buf.write("\u0137\3\2\2\2\20\u0140\3\2\2\2\22\u0149\3\2\2\2\24\u0152")
        buf.write("\3\2\2\2\26\u015b\3\2\2\2\30\u0164\3\2\2\2\32\u016d\3")
        buf.write("\2\2\2\34\u0176\3\2\2\2\36\u017f\3\2\2\2 \u0188\3\2\2")
        buf.write("\2\"\u0191\3\2\2\2$\u019a\3\2\2\2&\u01a3\3\2\2\2(\u01ac")
        buf.write("\3\2\2\2*\u01b5\3\2\2\2,\u01be\3\2\2\2.\u01c7\3\2\2\2")
        buf.write("\60\u0217\3\2\2\2\62\u0219\3\2\2\2\64\u023c\3\2\2\2\66")
        buf.write("\u0261\3\2\2\28\u026c\3\2\2\2:\u026e\3\2\2\2<\u028a\3")
        buf.write("\2\2\2>\u028c\3\2\2\2@\u02b2\3\2\2\2B\u02b4\3\2\2\2D\u02dc")
        buf.write("\3\2\2\2F\u02de\3\2\2\2H\u02f5\3\2\2\2J\u02f7\3\2\2\2")
        buf.write("L\u0312\3\2\2\2N\u0314\3\2\2\2P\u0325\3\2\2\2R\u0331\3")
        buf.write("\2\2\2T\u034b\3\2\2\2V\u034d\3\2\2\2X\u0378\3\2\2\2Z\u037a")
        buf.write("\3\2\2\2\\\u03a7\3\2\2\2^\u03a9\3\2\2\2`\u03b2\3\2\2\2")
        buf.write("b\u03d8\3\2\2\2d\u03da\3\2\2\2f\u03e3\3\2\2\2h\u03e7\3")
        buf.write("\2\2\2j\u03f1\3\2\2\2l\u03f4\3\2\2\2n\u03f7\3\2\2\2p\u03fa")
        buf.write("\3\2\2\2r\u03fd\3\2\2\2t\u0407\3\2\2\2v\u0470\3\2\2\2")
        buf.write("x\u0472\3\2\2\2z\u0491\3\2\2\2|\u0493\3\2\2\2~\u04ae\3")
        buf.write("\2\2\2\u0080\u04b0\3\2\2\2\u0082\u04f3\3\2\2\2\u0084\u04f5")
        buf.write("\3\2\2\2\u0086\u0516\3\2\2\2\u0088\u0518\3\2\2\2\u008a")
        buf.write("\u053e\3\2\2\2\u008c\u0556\3\2\2\2\u008e\u0558\3\2\2\2")
        buf.write("\u0090\u0583\3\2\2\2\u0092\u0585\3\2\2\2\u0094\u05c9\3")
        buf.write("\2\2\2\u0096\u05cb\3\2\2\2\u0098\u05f5\3\2\2\2\u009a\u05f7")
        buf.write("\3\2\2\2\u009c\u061a\3\2\2\2\u009e\u061c\3\2\2\2\u00a0")
        buf.write("\u0631\3\2\2\2\u00a2\u0633\3\2\2\2\u00a4\u064b\3\2\2\2")
        buf.write("\u00a6\u064d\3\2\2\2\u00a8\u065f\3\2\2\2\u00aa\u0661\3")
        buf.write("\2\2\2\u00ac\u0666\3\2\2\2\u00ae\u066a\3\2\2\2\u00b0\u0672")
        buf.write("\3\2\2\2\u00b2\u06f9\3\2\2\2\u00b4\u0706\3\2\2\2\u00b6")
        buf.write("\u0708\3\2\2\2\u00b8\u070a\3\2\2\2\u00ba\u070c\3\2\2\2")
        buf.write("\u00bc\u070e\3\2\2\2\u00be\u00e1\5\4\3\2\u00bf\u00e1\5")
        buf.write("\6\4\2\u00c0\u00e1\5\b\5\2\u00c1\u00e1\5\n\6\2\u00c2\u00e1")
        buf.write("\5\f\7\2\u00c3\u00e1\5\16\b\2\u00c4\u00e1\5\20\t\2\u00c5")
        buf.write("\u00e1\5\22\n\2\u00c6\u00e1\5\24\13\2\u00c7\u00e1\5\26")
        buf.write("\f\2\u00c8\u00e1\5\30\r\2\u00c9\u00e1\5\32\16\2\u00ca")
        buf.write("\u00e1\5\34\17\2\u00cb\u00e1\5\36\20\2\u00cc\u00e1\5 ")
        buf.write("\21\2\u00cd\u00e1\5\"\22\2\u00ce\u00e1\5$\23\2\u00cf\u00e1")
        buf.write("\5&\24\2\u00d0\u00e1\5(\25\2\u00d1\u00e1\5*\26\2\u00d2")
        buf.write("\u00e1\5,\27\2\u00d3\u00e1\5.\30\2\u00d4\u00e1\5\u00bc")
        buf.write("_\2\u00d5\u00e1\5\62\32\2\u00d6\u00e1\5:\36\2\u00d7\u00e1")
        buf.write("\5> \2\u00d8\u00e1\5P)\2\u00d9\u00e1\5\u00aaV\2\u00da")
        buf.write("\u00e1\5Z.\2\u00db\u00e1\5V,\2\u00dc\u00e1\5|?\2\u00dd")
        buf.write("\u00e1\5\u0088E\2\u00de\u00e1\5\u0096L\2\u00df\u00e1\5")
        buf.write("\u009aN\2\u00e0\u00be\3\2\2\2\u00e0\u00bf\3\2\2\2\u00e0")
        buf.write("\u00c0\3\2\2\2\u00e0\u00c1\3\2\2\2\u00e0\u00c2\3\2\2\2")
        buf.write("\u00e0\u00c3\3\2\2\2\u00e0\u00c4\3\2\2\2\u00e0\u00c5\3")
        buf.write("\2\2\2\u00e0\u00c6\3\2\2\2\u00e0\u00c7\3\2\2\2\u00e0\u00c8")
        buf.write("\3\2\2\2\u00e0\u00c9\3\2\2\2\u00e0\u00ca\3\2\2\2\u00e0")
        buf.write("\u00cb\3\2\2\2\u00e0\u00cc\3\2\2\2\u00e0\u00cd\3\2\2\2")
        buf.write("\u00e0\u00ce\3\2\2\2\u00e0\u00cf\3\2\2\2\u00e0\u00d0\3")
        buf.write("\2\2\2\u00e0\u00d1\3\2\2\2\u00e0\u00d2\3\2\2\2\u00e0\u00d3")
        buf.write("\3\2\2\2\u00e0\u00d4\3\2\2\2\u00e0\u00d5\3\2\2\2\u00e0")
        buf.write("\u00d6\3\2\2\2\u00e0\u00d7\3\2\2\2\u00e0\u00d8\3\2\2\2")
        buf.write("\u00e0\u00d9\3\2\2\2\u00e0\u00da\3\2\2\2\u00e0\u00db\3")
        buf.write("\2\2\2\u00e0\u00dc\3\2\2\2\u00e0\u00dd\3\2\2\2\u00e0\u00de")
        buf.write("\3\2\2\2\u00e0\u00df\3\2\2\2\u00e1\u00e4\3\2\2\2\u00e2")
        buf.write("\u00e0\3\2\2\2\u00e2\u00e3\3\2\2\2\u00e3\u00e5\3\2\2\2")
        buf.write("\u00e4\u00e2\3\2\2\2\u00e5\u00e6\7\2\2\3\u00e6\3\3\2\2")
        buf.write("\2\u00e7\u00eb\7\5\2\2\u00e8\u00ea\5\60\31\2\u00e9\u00e8")
        buf.write("\3\2\2\2\u00ea\u00ed\3\2\2\2\u00eb\u00e9\3\2\2\2\u00eb")
        buf.write("\u00ec\3\2\2\2\u00ec\u00ee\3\2\2\2\u00ed\u00eb\3\2\2\2")
        buf.write("\u00ee\u00ef\7\4\2\2\u00ef\5\3\2\2\2\u00f0\u00f1\7(\2")
        buf.write("\2\u00f1\u00f5\7)\2\2\u00f2\u00f4\58\35\2\u00f3\u00f2")
        buf.write("\3\2\2\2\u00f4\u00f7\3\2\2\2\u00f5\u00f3\3\2\2\2\u00f5")
        buf.write("\u00f6\3\2\2\2\u00f6\u00f8\3\2\2\2\u00f7\u00f5\3\2\2\2")
        buf.write("\u00f8\u00f9\7\4\2\2\u00f9\7\3\2\2\2\u00fa\u00fe\7+\2")
        buf.write("\2\u00fb\u00fd\5<\37\2\u00fc\u00fb\3\2\2\2\u00fd\u0100")
        buf.write("\3\2\2\2\u00fe\u00fc\3\2\2\2\u00fe\u00ff\3\2\2\2\u00ff")
        buf.write("\u0101\3\2\2\2\u0100\u00fe\3\2\2\2\u0101\u0123\7\4\2\2")
        buf.write("\u0102\u0106\t\2\2\2\u0103\u0105\5@!\2\u0104\u0103\3\2")
        buf.write("\2\2\u0105\u0108\3\2\2\2\u0106\u0104\3\2\2\2\u0106\u0107")
        buf.write("\3\2\2\2\u0107\u0109\3\2\2\2\u0108\u0106\3\2\2\2\u0109")
        buf.write("\u0123\7\4\2\2\u010a\u010e\7\66\2\2\u010b\u010d\5D#\2")
        buf.write("\u010c\u010b\3\2\2\2\u010d\u0110\3\2\2\2\u010e\u010c\3")
        buf.write("\2\2\2\u010e\u010f\3\2\2\2\u010f\u0111\3\2\2\2\u0110\u010e")
        buf.write("\3\2\2\2\u0111\u0123\7\4\2\2\u0112\u0116\79\2\2\u0113")
        buf.write("\u0115\5H%\2\u0114\u0113\3\2\2\2\u0115\u0118\3\2\2\2\u0116")
        buf.write("\u0114\3\2\2\2\u0116\u0117\3\2\2\2\u0117\u0119\3\2\2\2")
        buf.write("\u0118\u0116\3\2\2\2\u0119\u0123\7\4\2\2\u011a\u011e\7")
        buf.write(":\2\2\u011b\u011d\5L\'\2\u011c\u011b\3\2\2\2\u011d\u0120")
        buf.write("\3\2\2\2\u011e\u011c\3\2\2\2\u011e\u011f\3\2\2\2\u011f")
        buf.write("\u0121\3\2\2\2\u0120\u011e\3\2\2\2\u0121\u0123\7\4\2\2")
        buf.write("\u0122\u00fa\3\2\2\2\u0122\u0102\3\2\2\2\u0122\u010a\3")
        buf.write("\2\2\2\u0122\u0112\3\2\2\2\u0122\u011a\3\2\2\2\u0123\t")
        buf.write("\3\2\2\2\u0124\u0125\7(\2\2\u0125\u0129\7<\2\2\u0126\u0128")
        buf.write("\5P)\2\u0127\u0126\3\2\2\2\u0128\u012b\3\2\2\2\u0129\u0127")
        buf.write("\3\2\2\2\u0129\u012a\3\2\2\2\u012a\u012c\3\2\2\2\u012b")
        buf.write("\u0129\3\2\2\2\u012c\u012d\7\4\2\2\u012d\13\3\2\2\2\u012e")
        buf.write("\u0132\7A\2\2\u012f\u0131\5T+\2\u0130\u012f\3\2\2\2\u0131")
        buf.write("\u0134\3\2\2\2\u0132\u0130\3\2\2\2\u0132\u0133\3\2\2\2")
        buf.write("\u0133\u0135\3\2\2\2\u0134\u0132\3\2\2\2\u0135\u0136\7")
        buf.write("\4\2\2\u0136\r\3\2\2\2\u0137\u013b\7E\2\2\u0138\u013a")
        buf.write("\5X-\2\u0139\u0138\3\2\2\2\u013a\u013d\3\2\2\2\u013b\u0139")
        buf.write("\3\2\2\2\u013b\u013c\3\2\2\2\u013c\u013e\3\2\2\2\u013d")
        buf.write("\u013b\3\2\2\2\u013e\u013f\7\4\2\2\u013f\17\3\2\2\2\u0140")
        buf.write("\u0144\7H\2\2\u0141\u0143\5\\/\2\u0142\u0141\3\2\2\2\u0143")
        buf.write("\u0146\3\2\2\2\u0144\u0142\3\2\2\2\u0144\u0145\3\2\2\2")
        buf.write("\u0145\u0147\3\2\2\2\u0146\u0144\3\2\2\2\u0147\u0148\7")
        buf.write("\4\2\2\u0148\21\3\2\2\2\u0149\u014d\7L\2\2\u014a\u014c")
        buf.write("\5b\62\2\u014b\u014a\3\2\2\2\u014c\u014f\3\2\2\2\u014d")
        buf.write("\u014b\3\2\2\2\u014d\u014e\3\2\2\2\u014e\u0150\3\2\2\2")
        buf.write("\u014f\u014d\3\2\2\2\u0150\u0151\7\4\2\2\u0151\23\3\2")
        buf.write("\2\2\u0152\u0156\7V\2\2\u0153\u0155\5v<\2\u0154\u0153")
        buf.write("\3\2\2\2\u0155\u0158\3\2\2\2\u0156\u0154\3\2\2\2\u0156")
        buf.write("\u0157\3\2\2\2\u0157\u0159\3\2\2\2\u0158\u0156\3\2\2\2")
        buf.write("\u0159\u015a\7\4\2\2\u015a\25\3\2\2\2\u015b\u015f\7^\2")
        buf.write("\2\u015c\u015e\5z>\2\u015d\u015c\3\2\2\2\u015e\u0161\3")
        buf.write("\2\2\2\u015f\u015d\3\2\2\2\u015f\u0160\3\2\2\2\u0160\u0162")
        buf.write("\3\2\2\2\u0161\u015f\3\2\2\2\u0162\u0163\7\4\2\2\u0163")
        buf.write("\27\3\2\2\2\u0164\u0168\7_\2\2\u0165\u0167\5~@\2\u0166")
        buf.write("\u0165\3\2\2\2\u0167\u016a\3\2\2\2\u0168\u0166\3\2\2\2")
        buf.write("\u0168\u0169\3\2\2\2\u0169\u016b\3\2\2\2\u016a\u0168\3")
        buf.write("\2\2\2\u016b\u016c\7\4\2\2\u016c\31\3\2\2\2\u016d\u0171")
        buf.write("\7a\2\2\u016e\u0170\5\u0082B\2\u016f\u016e\3\2\2\2\u0170")
        buf.write("\u0173\3\2\2\2\u0171\u016f\3\2\2\2\u0171\u0172\3\2\2\2")
        buf.write("\u0172\u0174\3\2\2\2\u0173\u0171\3\2\2\2\u0174\u0175\7")
        buf.write("\4\2\2\u0175\33\3\2\2\2\u0176\u017a\7e\2\2\u0177\u0179")
        buf.write("\5\u0086D\2\u0178\u0177\3\2\2\2\u0179\u017c\3\2\2\2\u017a")
        buf.write("\u0178\3\2\2\2\u017a\u017b\3\2\2\2\u017b\u017d\3\2\2\2")
        buf.write("\u017c\u017a\3\2\2\2\u017d\u017e\7\4\2\2\u017e\35\3\2")
        buf.write("\2\2\u017f\u0183\7h\2\2\u0180\u0182\5\u008aF\2\u0181\u0180")
        buf.write("\3\2\2\2\u0182\u0185\3\2\2\2\u0183\u0181\3\2\2\2\u0183")
        buf.write("\u0184\3\2\2\2\u0184\u0186\3\2\2\2\u0185\u0183\3\2\2\2")
        buf.write("\u0186\u0187\7\4\2\2\u0187\37\3\2\2\2\u0188\u018c\7i\2")
        buf.write("\2\u0189\u018b\5\u008cG\2\u018a\u0189\3\2\2\2\u018b\u018e")
        buf.write("\3\2\2\2\u018c\u018a\3\2\2\2\u018c\u018d\3\2\2\2\u018d")
        buf.write("\u018f\3\2\2\2\u018e\u018c\3\2\2\2\u018f\u0190\7\4\2\2")
        buf.write("\u0190!\3\2\2\2\u0191\u0195\7j\2\2\u0192\u0194\5\u0090")
        buf.write("I\2\u0193\u0192\3\2\2\2\u0194\u0197\3\2\2\2\u0195\u0193")
        buf.write("\3\2\2\2\u0195\u0196\3\2\2\2\u0196\u0198\3\2\2\2\u0197")
        buf.write("\u0195\3\2\2\2\u0198\u0199\7\4\2\2\u0199#\3\2\2\2\u019a")
        buf.write("\u019e\7m\2\2\u019b\u019d\5\u0094K\2\u019c\u019b\3\2\2")
        buf.write("\2\u019d\u01a0\3\2\2\2\u019e\u019c\3\2\2\2\u019e\u019f")
        buf.write("\3\2\2\2\u019f\u01a1\3\2\2\2\u01a0\u019e\3\2\2\2\u01a1")
        buf.write("\u01a2\7\4\2\2\u01a2%\3\2\2\2\u01a3\u01a7\7r\2\2\u01a4")
        buf.write("\u01a6\5\u0098M\2\u01a5\u01a4\3\2\2\2\u01a6\u01a9\3\2")
        buf.write("\2\2\u01a7\u01a5\3\2\2\2\u01a7\u01a8\3\2\2\2\u01a8\u01aa")
        buf.write("\3\2\2\2\u01a9\u01a7\3\2\2\2\u01aa\u01ab\7\4\2\2\u01ab")
        buf.write("\'\3\2\2\2\u01ac\u01b0\7}\2\2\u01ad\u01af\5\u009cO\2\u01ae")
        buf.write("\u01ad\3\2\2\2\u01af\u01b2\3\2\2\2\u01b0\u01ae\3\2\2\2")
        buf.write("\u01b0\u01b1\3\2\2\2\u01b1\u01b3\3\2\2\2\u01b2\u01b0\3")
        buf.write("\2\2\2\u01b3\u01b4\7\4\2\2\u01b4)\3\2\2\2\u01b5\u01b9")
        buf.write("\7~\2\2\u01b6\u01b8\5\u00a0Q\2\u01b7\u01b6\3\2\2\2\u01b8")
        buf.write("\u01bb\3\2\2\2\u01b9\u01b7\3\2\2\2\u01b9\u01ba\3\2\2\2")
        buf.write("\u01ba\u01bc\3\2\2\2\u01bb\u01b9\3\2\2\2\u01bc\u01bd\7")
        buf.write("\4\2\2\u01bd+\3\2\2\2\u01be\u01c2\7\177\2\2\u01bf\u01c1")
        buf.write("\5\u00a4S\2\u01c0\u01bf\3\2\2\2\u01c1\u01c4\3\2\2\2\u01c2")
        buf.write("\u01c0\3\2\2\2\u01c2\u01c3\3\2\2\2\u01c3\u01c5\3\2\2\2")
        buf.write("\u01c4\u01c2\3\2\2\2\u01c5\u01c6\7\4\2\2\u01c6-\3\2\2")
        buf.write("\2\u01c7\u01cb\7\u0081\2\2\u01c8\u01ca\5\u00a8U\2\u01c9")
        buf.write("\u01c8\3\2\2\2\u01ca\u01cd\3\2\2\2\u01cb\u01c9\3\2\2\2")
        buf.write("\u01cb\u01cc\3\2\2\2\u01cc\u01ce\3\2\2\2\u01cd\u01cb\3")
        buf.write("\2\2\2\u01ce\u01cf\7\4\2\2\u01cf/\3\2\2\2\u01d0\u0218")
        buf.write("\5\62\32\2\u01d1\u01d2\7\7\2\2\u01d2\u01d3\7\u00ac\2\2")
        buf.write("\u01d3\u0218\5\u00b8]\2\u01d4\u01d5\7\b\2\2\u01d5\u01d6")
        buf.write("\7\u00ac\2\2\u01d6\u0218\7\35\2\2\u01d7\u01d8\7\t\2\2")
        buf.write("\u01d8\u01d9\7\u00ac\2\2\u01d9\u0218\5\u00b8]\2\u01da")
        buf.write("\u01dc\7\n\2\2\u01db\u01dd\7\u00b2\2\2\u01dc\u01db\3\2")
        buf.write("\2\2\u01dc\u01dd\3\2\2\2\u01dd\u01de\3\2\2\2\u01de\u0218")
        buf.write("\5\u00b8]\2\u01df\u01e0\7\13\2\2\u01e0\u0218\7\u00ac\2")
        buf.write("\2\u01e1\u01e2\7\f\2\2\u01e2\u0218\7\u00ac\2\2\u01e3\u01e4")
        buf.write("\7\r\2\2\u01e4\u01e5\7\u00ac\2\2\u01e5\u01e6\7\u00ac\2")
        buf.write("\2\u01e6\u0218\5\u00b8]\2\u01e7\u01e8\7\16\2\2\u01e8\u01e9")
        buf.write("\7\u00ac\2\2\u01e9\u0218\7\u00a8\2\2\u01ea\u01eb\7\17")
        buf.write("\2\2\u01eb\u01ec\7\u00ac\2\2\u01ec\u0218\7\u00a8\2\2\u01ed")
        buf.write("\u01ef\7\20\2\2\u01ee\u01f0\7\u00b2\2\2\u01ef\u01ee\3")
        buf.write("\2\2\2\u01ef\u01f0\3\2\2\2\u01f0\u01f1\3\2\2\2\u01f1\u0218")
        buf.write("\7\u00a8\2\2\u01f2\u01f3\7\21\2\2\u01f3\u01f4\7\u00ac")
        buf.write("\2\2\u01f4\u0218\7\36\2\2\u01f5\u01f6\7\22\2\2\u01f6\u01f7")
        buf.write("\5\64\33\2\u01f7\u01f8\7\4\2\2\u01f8\u0218\3\2\2\2\u01f9")
        buf.write("\u01fa\7\23\2\2\u01fa\u01fc\7\24\2\2\u01fb\u01fd\7\u00b2")
        buf.write("\2\2\u01fc\u01fb\3\2\2\2\u01fc\u01fd\3\2\2\2\u01fd\u01fe")
        buf.write("\3\2\2\2\u01fe\u0218\5\u00b8]\2\u01ff\u0218\7\25\2\2\u0200")
        buf.write("\u0201\7\26\2\2\u0201\u0202\7\u00ac\2\2\u0202\u0218\5")
        buf.write("\u00b8]\2\u0203\u0204\7\27\2\2\u0204\u0205\7\u00ac\2\2")
        buf.write("\u0205\u0218\5\u00b8]\2\u0206\u0207\7\30\2\2\u0207\u0208")
        buf.write("\7\u00ac\2\2\u0208\u0218\5\u00b8]\2\u0209\u020a\7\31\2")
        buf.write("\2\u020a\u020b\7\u00ac\2\2\u020b\u0218\5\u00b8]\2\u020c")
        buf.write("\u020d\7\32\2\2\u020d\u020e\7\u00ac\2\2\u020e\u0218\5")
        buf.write("\u00b8]\2\u020f\u0210\7\33\2\2\u0210\u0211\7\u00ac\2\2")
        buf.write("\u0211\u0218\5\u00b8]\2\u0212\u0214\7\34\2\2\u0213\u0215")
        buf.write("\7\u00b2\2\2\u0214\u0213\3\2\2\2\u0214\u0215\3\2\2\2\u0215")
        buf.write("\u0216\3\2\2\2\u0216\u0218\5\u00b8]\2\u0217\u01d0\3\2")
        buf.write("\2\2\u0217\u01d1\3\2\2\2\u0217\u01d4\3\2\2\2\u0217\u01d7")
        buf.write("\3\2\2\2\u0217\u01da\3\2\2\2\u0217\u01df\3\2\2\2\u0217")
        buf.write("\u01e1\3\2\2\2\u0217\u01e3\3\2\2\2\u0217\u01e7\3\2\2\2")
        buf.write("\u0217\u01ea\3\2\2\2\u0217\u01ed\3\2\2\2\u0217\u01f2\3")
        buf.write("\2\2\2\u0217\u01f5\3\2\2\2\u0217\u01f9\3\2\2\2\u0217\u01ff")
        buf.write("\3\2\2\2\u0217\u0200\3\2\2\2\u0217\u0203\3\2\2\2\u0217")
        buf.write("\u0206\3\2\2\2\u0217\u0209\3\2\2\2\u0217\u020c\3\2\2\2")
        buf.write("\u0217\u020f\3\2\2\2\u0217\u0212\3\2\2\2\u0218\61\3\2")
        buf.write("\2\2\u0219\u021a\7\6\2\2\u021a\u021b\5\u00acW\2\u021b")
        buf.write("\u021c\5\u00acW\2\u021c\u021d\5\u00b4[\2\u021d\u021e\5")
        buf.write("\u00b4[\2\u021e\u0222\5\u00b4[\2\u021f\u0221\5\66\34\2")
        buf.write("\u0220\u021f\3\2\2\2\u0221\u0224\3\2\2\2\u0222\u0220\3")
        buf.write("\2\2\2\u0222\u0223\3\2\2\2\u0223\u022b\3\2\2\2\u0224\u0222")
        buf.write("\3\2\2\2\u0225\u0226\7\u00a3\2\2\u0226\u0227\5\u00acW")
        buf.write("\2\u0227\u0228\5\u00acW\2\u0228\u022a\3\2\2\2\u0229\u0225")
        buf.write("\3\2\2\2\u022a\u022d\3\2\2\2\u022b\u0229\3\2\2\2\u022b")
        buf.write("\u022c\3\2\2\2\u022c\63\3\2\2\2\u022d\u022b\3\2\2\2\u022e")
        buf.write("\u0230\7\37\2\2\u022f\u0231\7\u00b2\2\2\u0230\u022f\3")
        buf.write("\2\2\2\u0230\u0231\3\2\2\2\u0231\u0232\3\2\2\2\u0232\u023d")
        buf.write("\5\u00b8]\2\u0233\u0235\7 \2\2\u0234\u0236\7\u00b2\2\2")
        buf.write("\u0235\u0234\3\2\2\2\u0235\u0236\3\2\2\2\u0236\u0237\3")
        buf.write("\2\2\2\u0237\u023d\5\u00b8]\2\u0238\u0239\7!\2\2\u0239")
        buf.write("\u023d\5\u00acW\2\u023a\u023b\7\"\2\2\u023b\u023d\5\u00ac")
        buf.write("W\2\u023c\u022e\3\2\2\2\u023c\u0233\3\2\2\2\u023c\u0238")
        buf.write("\3\2\2\2\u023c\u023a\3\2\2\2\u023d\65\3\2\2\2\u023e\u0240")
        buf.write("\7#\2\2\u023f\u0241\7\u00b2\2\2\u0240\u023f\3\2\2\2\u0240")
        buf.write("\u0241\3\2\2\2\u0241\u0242\3\2\2\2\u0242\u0262\5\u00ba")
        buf.write("^\2\u0243\u0245\7$\2\2\u0244\u0246\7\u00b2\2\2\u0245\u0244")
        buf.write("\3\2\2\2\u0245\u0246\3\2\2\2\u0246\u0247\3\2\2\2\u0247")
        buf.write("\u0262\5\u00ba^\2\u0248\u024a\7@\2\2\u0249\u024b\7\u00b2")
        buf.write("\2\2\u024a\u0249\3\2\2\2\u024a\u024b\3\2\2\2\u024b\u024c")
        buf.write("\3\2\2\2\u024c\u0262\5\u00ba^\2\u024d\u024f\7%\2\2\u024e")
        buf.write("\u0250\7\u00b2\2\2\u024f\u024e\3\2\2\2\u024f\u0250\3\2")
        buf.write("\2\2\u0250\u0251\3\2\2\2\u0251\u0262\5\u00ba^\2\u0252")
        buf.write("\u0254\7&\2\2\u0253\u0255\7\u00b2\2\2\u0254\u0253\3\2")
        buf.write("\2\2\u0254\u0255\3\2\2\2\u0255\u0256\3\2\2\2\u0256\u0262")
        buf.write("\5\u00ba^\2\u0257\u0259\7\'\2\2\u0258\u025a\7\u00b2\2")
        buf.write("\2\u0259\u0258\3\2\2\2\u0259\u025a\3\2\2\2\u025a\u025b")
        buf.write("\3\2\2\2\u025b\u0262\5\u00ba^\2\u025c\u025e\7\67\2\2\u025d")
        buf.write("\u025f\7\u00b2\2\2\u025e\u025d\3\2\2\2\u025e\u025f\3\2")
        buf.write("\2\2\u025f\u0260\3\2\2\2\u0260\u0262\5\u00ba^\2\u0261")
        buf.write("\u023e\3\2\2\2\u0261\u0243\3\2\2\2\u0261\u0248\3\2\2\2")
        buf.write("\u0261\u024d\3\2\2\2\u0261\u0252\3\2\2\2\u0261\u0257\3")
        buf.write("\2\2\2\u0261\u025c\3\2\2\2\u0262\67\3\2\2\2\u0263\u026d")
        buf.write("\5:\36\2\u0264\u0266\7*\2\2\u0265\u0267\7\u00b2\2\2\u0266")
        buf.write("\u0265\3\2\2\2\u0266\u0267\3\2\2\2\u0267\u0268\3\2\2\2")
        buf.write("\u0268\u026d\7\u00a8\2\2\u0269\u026d\7\25\2\2\u026a\u026b")
        buf.write("\7\27\2\2\u026b\u026d\5\u00b8]\2\u026c\u0263\3\2\2\2\u026c")
        buf.write("\u0264\3\2\2\2\u026c\u0269\3\2\2\2\u026c\u026a\3\2\2\2")
        buf.write("\u026d9\3\2\2\2\u026e\u026f\7\6\2\2\u026f\u0270\5\u00ac")
        buf.write("W\2\u0270\u0271\5\u00acW\2\u0271\u0272\5\u00acW\2\u0272")
        buf.write("\u0273\5\u00acW\2\u0273\u0274\5\u00b4[\2\u0274\u0275\5")
        buf.write("\u00b4[\2\u0275\u0276\5\u00b4[\2\u0276\u0277\7\u00a8\2")
        buf.write("\2\u0277;\3\2\2\2\u0278\u028b\5> \2\u0279\u027a\7\13\2")
        buf.write("\2\u027a\u028b\7\u00ac\2\2\u027b\u027c\7,\2\2\u027c\u027d")
        buf.write("\5\u00b8]\2\u027d\u027e\5\u00b8]\2\u027e\u027f\5\u00b8")
        buf.write("]\2\u027f\u028b\3\2\2\2\u0280\u0281\7-\2\2\u0281\u028b")
        buf.write("\5\u00b8]\2\u0282\u0283\7\20\2\2\u0283\u028b\7\u00a8\2")
        buf.write("\2\u0284\u0285\7\21\2\2\u0285\u028b\7.\2\2\u0286\u0287")
        buf.write("\7\23\2\2\u0287\u0288\7\24\2\2\u0288\u028b\5\u00b8]\2")
        buf.write("\u0289\u028b\7\25\2\2\u028a\u0278\3\2\2\2\u028a\u0279")
        buf.write("\3\2\2\2\u028a\u027b\3\2\2\2\u028a\u0280\3\2\2\2\u028a")
        buf.write("\u0282\3\2\2\2\u028a\u0284\3\2\2\2\u028a\u0286\3\2\2\2")
        buf.write("\u028a\u0289\3\2\2\2\u028b=\3\2\2\2\u028c\u028d\7\6\2")
        buf.write("\2\u028d\u028e\5\u00acW\2\u028e\u028f\5\u00acW\2\u028f")
        buf.write("\u0290\5\u00acW\2\u0290\u0291\5\u00acW\2\u0291\u0292\5")
        buf.write("\u00acW\2\u0292\u0293\5\u00acW\2\u0293\u0294\5\u00b4[")
        buf.write("\2\u0294\u0296\5\u00b4[\2\u0295\u0297\5\u00b4[\2\u0296")
        buf.write("\u0295\3\2\2\2\u0296\u0297\3\2\2\2\u0297?\3\2\2\2\u0298")
        buf.write("\u02b3\5B\"\2\u0299\u029a\7\13\2\2\u029a\u02b3\7\u00ac")
        buf.write("\2\2\u029b\u029c\7\61\2\2\u029c\u02b3\7\64\2\2\u029d\u029e")
        buf.write("\7\27\2\2\u029e\u02b3\5\u00b8]\2\u029f\u02a0\7\62\2\2")
        buf.write("\u02a0\u02b3\7\u00a9\2\2\u02a1\u02a2\7\63\2\2\u02a2\u02b3")
        buf.write("\7\65\2\2\u02a3\u02a4\7,\2\2\u02a4\u02a5\5\u00b8]\2\u02a5")
        buf.write("\u02a6\5\u00b8]\2\u02a6\u02a7\5\u00b8]\2\u02a7\u02b3\3")
        buf.write("\2\2\2\u02a8\u02a9\7-\2\2\u02a9\u02b3\5\u00b8]\2\u02aa")
        buf.write("\u02ab\7\20\2\2\u02ab\u02b3\7\u00a8\2\2\u02ac\u02ad\7")
        buf.write("\21\2\2\u02ad\u02b3\7.\2\2\u02ae\u02af\7\23\2\2\u02af")
        buf.write("\u02b0\7\24\2\2\u02b0\u02b3\5\u00b8]\2\u02b1\u02b3\7\25")
        buf.write("\2\2\u02b2\u0298\3\2\2\2\u02b2\u0299\3\2\2\2\u02b2\u029b")
        buf.write("\3\2\2\2\u02b2\u029d\3\2\2\2\u02b2\u029f\3\2\2\2\u02b2")
        buf.write("\u02a1\3\2\2\2\u02b2\u02a3\3\2\2\2\u02b2\u02a8\3\2\2\2")
        buf.write("\u02b2\u02aa\3\2\2\2\u02b2\u02ac\3\2\2\2\u02b2\u02ae\3")
        buf.write("\2\2\2\u02b2\u02b1\3\2\2\2\u02b3A\3\2\2\2\u02b4\u02b5")
        buf.write("\7\6\2\2\u02b5\u02b6\5\u00acW\2\u02b6\u02b7\5\u00acW\2")
        buf.write("\u02b7\u02b8\5\u00acW\2\u02b8\u02b9\5\u00acW\2\u02b9\u02ba")
        buf.write("\5\u00acW\2\u02ba\u02bb\5\u00acW\2\u02bb\u02bc\5\u00b4")
        buf.write("[\2\u02bc\u02c3\5\u00b4[\2\u02bd\u02c4\5\u00b4[\2\u02be")
        buf.write("\u02bf\5\u00b4[\2\u02bf\u02c0\5\u00b4[\2\u02c0\u02c1\5")
        buf.write("\u00b4[\2\u02c1\u02c2\5\u00b4[\2\u02c2\u02c4\3\2\2\2\u02c3")
        buf.write("\u02bd\3\2\2\2\u02c3\u02be\3\2\2\2\u02c3\u02c4\3\2\2\2")
        buf.write("\u02c4C\3\2\2\2\u02c5\u02dd\5F$\2\u02c6\u02c8\7\67\2\2")
        buf.write("\u02c7\u02c9\7\u00b2\2\2\u02c8\u02c7\3\2\2\2\u02c8\u02c9")
        buf.write("\3\2\2\2\u02c9\u02ca\3\2\2\2\u02ca\u02dd\7\u00a8\2\2\u02cb")
        buf.write("\u02cc\7\13\2\2\u02cc\u02dd\7\u00ac\2\2\u02cd\u02ce\7")
        buf.write("-\2\2\u02ce\u02cf\5\u00b8]\2\u02cf\u02d0\5\u00b8]\2\u02d0")
        buf.write("\u02dd\3\2\2\2\u02d1\u02d2\7\20\2\2\u02d2\u02dd\7\u00a8")
        buf.write("\2\2\u02d3\u02d5\78\2\2\u02d4\u02d6\7\u00b2\2\2\u02d5")
        buf.write("\u02d4\3\2\2\2\u02d5\u02d6\3\2\2\2\u02d6\u02d7\3\2\2\2")
        buf.write("\u02d7\u02dd\7\u00a8\2\2\u02d8\u02d9\7\23\2\2\u02d9\u02da")
        buf.write("\7\24\2\2\u02da\u02dd\5\u00b8]\2\u02db\u02dd\7\25\2\2")
        buf.write("\u02dc\u02c5\3\2\2\2\u02dc\u02c6\3\2\2\2\u02dc\u02cb\3")
        buf.write("\2\2\2\u02dc\u02cd\3\2\2\2\u02dc\u02d1\3\2\2\2\u02dc\u02d3")
        buf.write("\3\2\2\2\u02dc\u02d8\3\2\2\2\u02dc\u02db\3\2\2\2\u02dd")
        buf.write("E\3\2\2\2\u02de\u02df\7\6\2\2\u02df\u02e0\5\u00acW\2\u02e0")
        buf.write("\u02e1\5\u00acW\2\u02e1\u02e2\5\u00acW\2\u02e2\u02e3\5")
        buf.write("\u00acW\2\u02e3\u02e4\5\u00b4[\2\u02e4\u02e5\5\u00b4[")
        buf.write("\2\u02e5\u02e6\5\u00b4[\2\u02e6\u02e7\5\u00b4[\2\u02e7")
        buf.write("G\3\2\2\2\u02e8\u02f6\5J&\2\u02e9\u02ea\7\13\2\2\u02ea")
        buf.write("\u02f6\7\u00ac\2\2\u02eb\u02ec\7,\2\2\u02ec\u02f6\5\u00b8")
        buf.write("]\2\u02ed\u02ee\7\20\2\2\u02ee\u02f6\7\u00a8\2\2\u02ef")
        buf.write("\u02f0\7\21\2\2\u02f0\u02f6\7.\2\2\u02f1\u02f2\7\23\2")
        buf.write("\2\u02f2\u02f3\7\24\2\2\u02f3\u02f6\5\u00b8]\2\u02f4\u02f6")
        buf.write("\7\25\2\2\u02f5\u02e8\3\2\2\2\u02f5\u02e9\3\2\2\2\u02f5")
        buf.write("\u02eb\3\2\2\2\u02f5\u02ed\3\2\2\2\u02f5\u02ef\3\2\2\2")
        buf.write("\u02f5\u02f1\3\2\2\2\u02f5\u02f4\3\2\2\2\u02f6I\3\2\2")
        buf.write("\2\u02f7\u02f8\7\6\2\2\u02f8\u02f9\5\u00acW\2\u02f9\u02fa")
        buf.write("\5\u00acW\2\u02fa\u02fb\5\u00b4[\2\u02fb\u02fc\5\u00b4")
        buf.write("[\2\u02fcK\3\2\2\2\u02fd\u0313\5N(\2\u02fe\u02ff\7\13")
        buf.write("\2\2\u02ff\u0313\7\u00ac\2\2\u0300\u0301\7,\2\2\u0301")
        buf.write("\u0302\5\u00b8]\2\u0302\u0303\5\u00b8]\2\u0303\u0304\5")
        buf.write("\u00b8]\2\u0304\u0305\5\u00b8]\2\u0305\u0313\3\2\2\2\u0306")
        buf.write("\u0307\7-\2\2\u0307\u0313\5\u00b8]\2\u0308\u0309\7\20")
        buf.write("\2\2\u0309\u0313\7\u00a8\2\2\u030a\u030b\7\21\2\2\u030b")
        buf.write("\u0313\7.\2\2\u030c\u030d\7\23\2\2\u030d\u030e\7\24\2")
        buf.write("\2\u030e\u0313\5\u00b8]\2\u030f\u0313\7\25\2\2\u0310\u0311")
        buf.write("\7\61\2\2\u0311\u0313\7;\2\2\u0312\u02fd\3\2\2\2\u0312")
        buf.write("\u02fe\3\2\2\2\u0312\u0300\3\2\2\2\u0312\u0306\3\2\2\2")
        buf.write("\u0312\u0308\3\2\2\2\u0312\u030a\3\2\2\2\u0312\u030c\3")
        buf.write("\2\2\2\u0312\u030f\3\2\2\2\u0312\u0310\3\2\2\2\u0313M")
        buf.write("\3\2\2\2\u0314\u0315\7\6\2\2\u0315\u0316\5\u00acW\2\u0316")
        buf.write("\u0317\5\u00acW\2\u0317\u0318\5\u00acW\2\u0318\u0319\5")
        buf.write("\u00acW\2\u0319\u031a\5\u00b4[\2\u031a\u031b\5\u00b4[")
        buf.write("\2\u031bO\3\2\2\2\u031c\u0320\7=\2\2\u031d\u031f\5R*\2")
        buf.write("\u031e\u031d\3\2\2\2\u031f\u0322\3\2\2\2\u0320\u031e\3")
        buf.write("\2\2\2\u0320\u0321\3\2\2\2\u0321\u0323\3\2\2\2\u0322\u0320")
        buf.write("\3\2\2\2\u0323\u0326\7\4\2\2\u0324\u0326\7>\2\2\u0325")
        buf.write("\u031c\3\2\2\2\u0325\u0324\3\2\2\2\u0326Q\3\2\2\2\u0327")
        buf.write("\u0329\7?\2\2\u0328\u032a\7\u00b2\2\2\u0329\u0328\3\2")
        buf.write("\2\2\u0329\u032a\3\2\2\2\u032a\u032b\3\2\2\2\u032b\u0332")
        buf.write("\5\u00acW\2\u032c\u032e\7@\2\2\u032d\u032f\7\u00b2\2\2")
        buf.write("\u032e\u032d\3\2\2\2\u032e\u032f\3\2\2\2\u032f\u0330\3")
        buf.write("\2\2\2\u0330\u0332\5\u00b8]\2\u0331\u0327\3\2\2\2\u0331")
        buf.write("\u032c\3\2\2\2\u0332S\3\2\2\2\u0333\u034c\5V,\2\u0334")
        buf.write("\u0335\7\13\2\2\u0335\u034c\7\u00ac\2\2\u0336\u0337\7")
        buf.write("B\2\2\u0337\u0338\7\u00a8\2\2\u0338\u034c\5\u00b8]\2\u0339")
        buf.write("\u033a\7-\2\2\u033a\u034c\5\u00b8]\2\u033b\u033c\7\20")
        buf.write("\2\2\u033c\u034c\7\u00a8\2\2\u033d\u033e\7\23\2\2\u033e")
        buf.write("\u033f\7\24\2\2\u033f\u0343\5\u00b8]\2\u0340\u0344\7\u0083")
        buf.write("\2\2\u0341\u0342\7\13\2\2\u0342\u0344\7\u00ac\2\2\u0343")
        buf.write("\u0340\3\2\2\2\u0343\u0341\3\2\2\2\u0344\u034c\3\2\2\2")
        buf.write("\u0345\u034c\7\25\2\2\u0346\u0347\7C\2\2\u0347\u0348\5")
        buf.write("\u00b8]\2\u0348\u0349\7\u00a8\2\2\u0349\u034c\3\2\2\2")
        buf.write("\u034a\u034c\7D\2\2\u034b\u0333\3\2\2\2\u034b\u0334\3")
        buf.write("\2\2\2\u034b\u0336\3\2\2\2\u034b\u0339\3\2\2\2\u034b\u033b")
        buf.write("\3\2\2\2\u034b\u033d\3\2\2\2\u034b\u0345\3\2\2\2\u034b")
        buf.write("\u0346\3\2\2\2\u034b\u034a\3\2\2\2\u034cU\3\2\2\2\u034d")
        buf.write("\u034e\7\6\2\2\u034e\u034f\5\u00acW\2\u034f\u0350\5\u00ac")
        buf.write("W\2\u0350W\3\2\2\2\u0351\u0379\5Z.\2\u0352\u0353\7\13")
        buf.write("\2\2\u0353\u0379\7\u00ac\2\2\u0354\u0355\7,\2\2\u0355")
        buf.write("\u0356\5\u00b8]\2\u0356\u0357\5\u00b8]\2\u0357\u0358\5")
        buf.write("\u00b8]\2\u0358\u0359\5\u00b8]\2\u0359\u0379\3\2\2\2\u035a")
        buf.write("\u035c\7\67\2\2\u035b\u035d\7\u00b2\2\2\u035c\u035b\3")
        buf.write("\2\2\2\u035c\u035d\3\2\2\2\u035d\u035e\3\2\2\2\u035e\u0379")
        buf.write("\7\u00a8\2\2\u035f\u0360\7F\2\2\u0360\u0379\7\u00a8\2")
        buf.write("\2\u0361\u0362\7-\2\2\u0362\u0364\5\u00b8]\2\u0363\u0365")
        buf.write("\5\u00b8]\2\u0364\u0363\3\2\2\2\u0364\u0365\3\2\2\2\u0365")
        buf.write("\u0379\3\2\2\2\u0366\u0367\7\20\2\2\u0367\u0379\7\u00a8")
        buf.write("\2\2\u0368\u036a\78\2\2\u0369\u036b\7\u00b2\2\2\u036a")
        buf.write("\u0369\3\2\2\2\u036a\u036b\3\2\2\2\u036b\u036c\3\2\2\2")
        buf.write("\u036c\u0379\7\u00a8\2\2\u036d\u036e\7\21\2\2\u036e\u0379")
        buf.write("\7G\2\2\u036f\u0370\7\23\2\2\u0370\u0371\7\24\2\2\u0371")
        buf.write("\u0375\5\u00b8]\2\u0372\u0376\7\u0083\2\2\u0373\u0374")
        buf.write("\7\13\2\2\u0374\u0376\7\u00ac\2\2\u0375\u0372\3\2\2\2")
        buf.write("\u0375\u0373\3\2\2\2\u0376\u0379\3\2\2\2\u0377\u0379\7")
        buf.write("\25\2\2\u0378\u0351\3\2\2\2\u0378\u0352\3\2\2\2\u0378")
        buf.write("\u0354\3\2\2\2\u0378\u035a\3\2\2\2\u0378\u035f\3\2\2\2")
        buf.write("\u0378\u0361\3\2\2\2\u0378\u0366\3\2\2\2\u0378\u0368\3")
        buf.write("\2\2\2\u0378\u036d\3\2\2\2\u0378\u036f\3\2\2\2\u0378\u0377")
        buf.write("\3\2\2\2\u0379Y\3\2\2\2\u037a\u037b\7\6\2\2\u037b\u037c")
        buf.write("\5\u00acW\2\u037c\u037d\5\u00acW\2\u037d\u037e\5\u00ac")
        buf.write("W\2\u037e\u0384\5\u00acW\2\u037f\u0380\5\u00acW\2\u0380")
        buf.write("\u0381\5\u00acW\2\u0381\u0382\5\u00acW\2\u0382\u0383\5")
        buf.write("\u00acW\2\u0383\u0385\3\2\2\2\u0384\u037f\3\2\2\2\u0384")
        buf.write("\u0385\3\2\2\2\u0385\u0386\3\2\2\2\u0386\u0387\5\u00b4")
        buf.write("[\2\u0387\u038b\5\u00b4[\2\u0388\u0389\5\u00b4[\2\u0389")
        buf.write("\u038a\5\u00b4[\2\u038a\u038c\3\2\2\2\u038b\u0388\3\2")
        buf.write("\2\2\u038b\u038c\3\2\2\2\u038c[\3\2\2\2\u038d\u03a8\5")
        buf.write("^\60\2\u038e\u038f\7\13\2\2\u038f\u03a8\7\u00ac\2\2\u0390")
        buf.write("\u0391\7B\2\2\u0391\u0392\7\u00a8\2\2\u0392\u0393\7\u00a8")
        buf.write("\2\2\u0393\u0394\5\u00b8]\2\u0394\u0395\5\u00b8]\2\u0395")
        buf.write("\u0396\5\u00b8]\2\u0396\u03a8\3\2\2\2\u0397\u0398\7-\2")
        buf.write("\2\u0398\u03a8\5\u00b8]\2\u0399\u039a\7\20\2\2\u039a\u03a8")
        buf.write("\7\u00a8\2\2\u039b\u039c\7I\2\2\u039c\u03a8\5\u00b8]\2")
        buf.write("\u039d\u039e\7J\2\2\u039e\u03a8\5\u00b8]\2\u039f\u03a0")
        buf.write("\7\21\2\2\u03a0\u03a8\7.\2\2\u03a1\u03a2\7\23\2\2\u03a2")
        buf.write("\u03a3\7\24\2\2\u03a3\u03a8\5\u00b8]\2\u03a4\u03a8\5`")
        buf.write("\61\2\u03a5\u03a8\7\25\2\2\u03a6\u03a8\7D\2\2\u03a7\u038d")
        buf.write("\3\2\2\2\u03a7\u038e\3\2\2\2\u03a7\u0390\3\2\2\2\u03a7")
        buf.write("\u0397\3\2\2\2\u03a7\u0399\3\2\2\2\u03a7\u039b\3\2\2\2")
        buf.write("\u03a7\u039d\3\2\2\2\u03a7\u039f\3\2\2\2\u03a7\u03a1\3")
        buf.write("\2\2\2\u03a7\u03a4\3\2\2\2\u03a7\u03a5\3\2\2\2\u03a7\u03a6")
        buf.write("\3\2\2\2\u03a8]\3\2\2\2\u03a9\u03aa\7\6\2\2\u03aa\u03ab")
        buf.write("\5\u00acW\2\u03ab\u03ac\5\u00acW\2\u03ac\u03ad\5\u00ac")
        buf.write("W\2\u03ad\u03ae\5\u00acW\2\u03ae\u03af\5\u00acW\2\u03af")
        buf.write("\u03b0\5\u00b4[\2\u03b0\u03b1\5\u00b4[\2\u03b1_\3\2\2")
        buf.write("\2\u03b2\u03b3\7K\2\2\u03b3\u03b4\5\u00acW\2\u03b4\u03b5")
        buf.write("\5\u00b8]\2\u03b5\u03b6\5\u00b8]\2\u03b6a\3\2\2\2\u03b7")
        buf.write("\u03d9\5d\63\2\u03b8\u03d9\5f\64\2\u03b9\u03d9\5h\65\2")
        buf.write("\u03ba\u03d9\5j\66\2\u03bb\u03d9\5l\67\2\u03bc\u03d9\5")
        buf.write("n8\2\u03bd\u03d9\5p9\2\u03be\u03d9\5r:\2\u03bf\u03d9\5")
        buf.write("t;\2\u03c0\u03c1\7\13\2\2\u03c1\u03d9\7\u00ac\2\2\u03c2")
        buf.write("\u03c3\7T\2\2\u03c3\u03d9\5\u00b8]\2\u03c4\u03c5\7F\2")
        buf.write("\2\u03c5\u03d9\7\u00a8\2\2\u03c6\u03c7\7-\2\2\u03c7\u03c9")
        buf.write("\5\u00b8]\2\u03c8\u03ca\5\u00b8]\2\u03c9\u03c8\3\2\2\2")
        buf.write("\u03c9\u03ca\3\2\2\2\u03ca\u03d9\3\2\2\2\u03cb\u03cc\7")
        buf.write("\21\2\2\u03cc\u03d9\7G\2\2\u03cd\u03ce\7\23\2\2\u03ce")
        buf.write("\u03cf\7\24\2\2\u03cf\u03d3\5\u00b8]\2\u03d0\u03d4\7\u0083")
        buf.write("\2\2\u03d1\u03d2\7\13\2\2\u03d2\u03d4\7\u00ac\2\2\u03d3")
        buf.write("\u03d0\3\2\2\2\u03d3\u03d1\3\2\2\2\u03d4\u03d5\3\2\2\2")
        buf.write("\u03d5\u03d6\7\u00ac\2\2\u03d6\u03d9\3\2\2\2\u03d7\u03d9")
        buf.write("\7\25\2\2\u03d8\u03b7\3\2\2\2\u03d8\u03b8\3\2\2\2\u03d8")
        buf.write("\u03b9\3\2\2\2\u03d8\u03ba\3\2\2\2\u03d8\u03bb\3\2\2\2")
        buf.write("\u03d8\u03bc\3\2\2\2\u03d8\u03bd\3\2\2\2\u03d8\u03be\3")
        buf.write("\2\2\2\u03d8\u03bf\3\2\2\2\u03d8\u03c0\3\2\2\2\u03d8\u03c2")
        buf.write("\3\2\2\2\u03d8\u03c4\3\2\2\2\u03d8\u03c6\3\2\2\2\u03d8")
        buf.write("\u03cb\3\2\2\2\u03d8\u03cd\3\2\2\2\u03d8\u03d7\3\2\2\2")
        buf.write("\u03d9c\3\2\2\2\u03da\u03db\7M\2\2\u03db\u03dd\5\u00ac")
        buf.write("W\2\u03dc\u03de\5\u00acW\2\u03dd\u03dc\3\2\2\2\u03dd\u03de")
        buf.write("\3\2\2\2\u03de\u03df\3\2\2\2\u03df\u03e1\5\u00b8]\2\u03e0")
        buf.write("\u03e2\5\u00b8]\2\u03e1\u03e0\3\2\2\2\u03e1\u03e2\3\2")
        buf.write("\2\2\u03e2e\3\2\2\2\u03e3\u03e4\7K\2\2\u03e4\u03e5\5\u00ac")
        buf.write("W\2\u03e5\u03e6\5\u00b8]\2\u03e6g\3\2\2\2\u03e7\u03e8")
        buf.write("\7:\2\2\u03e8\u03e9\5\u00acW\2\u03e9\u03ea\5\u00acW\2")
        buf.write("\u03ea\u03eb\5\u00acW\2\u03eb\u03ed\7\u00ac\2\2\u03ec")
        buf.write("\u03ee\7\u00a9\2\2\u03ed\u03ec\3\2\2\2\u03ed\u03ee\3\2")
        buf.write("\2\2\u03ee\u03ef\3\2\2\2\u03ef\u03f0\7\u00ac\2\2\u03f0")
        buf.write("i\3\2\2\2\u03f1\u03f2\7N\2\2\u03f2\u03f3\5\u00acW\2\u03f3")
        buf.write("k\3\2\2\2\u03f4\u03f5\7O\2\2\u03f5\u03f6\5\u00acW\2\u03f6")
        buf.write("m\3\2\2\2\u03f7\u03f8\7P\2\2\u03f8\u03f9\5\u00acW\2\u03f9")
        buf.write("o\3\2\2\2\u03fa\u03fb\7Q\2\2\u03fb\u03fc\5\u00acW\2\u03fc")
        buf.write("q\3\2\2\2\u03fd\u03fe\7R\2\2\u03fe\u03ff\7\u00ac\2\2\u03ff")
        buf.write("\u0400\5\u00acW\2\u0400\u0401\5\u00acW\2\u0401\u0402\5")
        buf.write("\u00acW\2\u0402\u0403\5\u00acW\2\u0403\u0405\5\u00acW")
        buf.write("\2\u0404\u0406\5\u00acW\2\u0405\u0404\3\2\2\2\u0405\u0406")
        buf.write("\3\2\2\2\u0406s\3\2\2\2\u0407\u0408\7S\2\2\u0408\u0409")
        buf.write("\5\u00acW\2\u0409u\3\2\2\2\u040a\u0471\5x=\2\u040b\u040c")
        buf.write("\7\13\2\2\u040c\u0471\7\u00ac\2\2\u040d\u040e\7\37\2\2")
        buf.write("\u040e\u0471\5\u00b8]\2\u040f\u0410\7-\2\2\u0410\u0471")
        buf.write("\5\u00b8]\2\u0411\u0412\7W\2\2\u0412\u0413\5\u00b8]\2")
        buf.write("\u0413\u0414\5\u00b8]\2\u0414\u0419\5\u00b8]\2\u0415\u0416")
        buf.write("\5\u00b8]\2\u0416\u0417\5\u00b8]\2\u0417\u0418\5\u00b8")
        buf.write("]\2\u0418\u041a\3\2\2\2\u0419\u0415\3\2\2\2\u0419\u041a")
        buf.write("\3\2\2\2\u041a\u041f\3\2\2\2\u041b\u041c\5\u00b8]\2\u041c")
        buf.write("\u041d\5\u00b8]\2\u041d\u041e\5\u00b8]\2\u041e\u0420\3")
        buf.write("\2\2\2\u041f\u041b\3\2\2\2\u041f\u0420\3\2\2\2\u0420\u0425")
        buf.write("\3\2\2\2\u0421\u0422\5\u00b8]\2\u0422\u0423\5\u00b8]\2")
        buf.write("\u0423\u0424\5\u00b8]\2\u0424\u0426\3\2\2\2\u0425\u0421")
        buf.write("\3\2\2\2\u0425\u0426\3\2\2\2\u0426\u0471\3\2\2\2\u0427")
        buf.write("\u0428\7\20\2\2\u0428\u0471\7\u00a8\2\2\u0429\u042a\7")
        buf.write("X\2\2\u042a\u042b\5\u00b8]\2\u042b\u042c\5\u00b8]\2\u042c")
        buf.write("\u0431\5\u00b8]\2\u042d\u042e\5\u00b8]\2\u042e\u042f\5")
        buf.write("\u00b8]\2\u042f\u0430\5\u00b8]\2\u0430\u0432\3\2\2\2\u0431")
        buf.write("\u042d\3\2\2\2\u0431\u0432\3\2\2\2\u0432\u0437\3\2\2\2")
        buf.write("\u0433\u0434\5\u00b8]\2\u0434\u0435\5\u00b8]\2\u0435\u0436")
        buf.write("\5\u00b8]\2\u0436\u0438\3\2\2\2\u0437\u0433\3\2\2\2\u0437")
        buf.write("\u0438\3\2\2\2\u0438\u043d\3\2\2\2\u0439\u043a\5\u00b8")
        buf.write("]\2\u043a\u043b\5\u00b8]\2\u043b\u043c\5\u00b8]\2\u043c")
        buf.write("\u043e\3\2\2\2\u043d\u0439\3\2\2\2\u043d\u043e\3\2\2\2")
        buf.write("\u043e\u0471\3\2\2\2\u043f\u0440\7\23\2\2\u0440\u0441")
        buf.write("\7\24\2\2\u0441\u0445\5\u00b8]\2\u0442\u0446\7\u0083\2")
        buf.write("\2\u0443\u0444\7\13\2\2\u0444\u0446\7\u00ac\2\2\u0445")
        buf.write("\u0442\3\2\2\2\u0445\u0443\3\2\2\2\u0446\u0471\3\2\2\2")
        buf.write("\u0447\u0448\7Y\2\2\u0448\u0449\5\u00b8]\2\u0449\u044a")
        buf.write("\5\u00b8]\2\u044a\u044f\5\u00b8]\2\u044b\u044c\5\u00b8")
        buf.write("]\2\u044c\u044d\5\u00b8]\2\u044d\u044e\5\u00b8]\2\u044e")
        buf.write("\u0450\3\2\2\2\u044f\u044b\3\2\2\2\u044f\u0450\3\2\2\2")
        buf.write("\u0450\u0455\3\2\2\2\u0451\u0452\5\u00b8]\2\u0452\u0453")
        buf.write("\5\u00b8]\2\u0453\u0454\5\u00b8]\2\u0454\u0456\3\2\2\2")
        buf.write("\u0455\u0451\3\2\2\2\u0455\u0456\3\2\2\2\u0456\u045b\3")
        buf.write("\2\2\2\u0457\u0458\5\u00b8]\2\u0458\u0459\5\u00b8]\2\u0459")
        buf.write("\u045a\5\u00b8]\2\u045a\u045c\3\2\2\2\u045b\u0457\3\2")
        buf.write("\2\2\u045b\u045c\3\2\2\2\u045c\u0471\3\2\2\2\u045d\u0471")
        buf.write("\7\25\2\2\u045e\u045f\7\27\2\2\u045f\u0471\5\u00b8]\2")
        buf.write("\u0460\u0461\7Z\2\2\u0461\u0471\7\\\2\2\u0462\u0463\7")
        buf.write("C\2\2\u0463\u0464\7]\2\2\u0464\u0466\5\u00b8]\2\u0465")
        buf.write("\u0467\5\u00b8]\2\u0466\u0465\3\2\2\2\u0466\u0467\3\2")
        buf.write("\2\2\u0467\u0469\3\2\2\2\u0468\u046a\5\u00b8]\2\u0469")
        buf.write("\u0468\3\2\2\2\u0469\u046a\3\2\2\2\u046a\u046c\3\2\2\2")
        buf.write("\u046b\u046d\5\u00b8]\2\u046c\u046b\3\2\2\2\u046c\u046d")
        buf.write("\3\2\2\2\u046d\u0471\3\2\2\2\u046e\u0471\7[\2\2\u046f")
        buf.write("\u0471\7D\2\2\u0470\u040a\3\2\2\2\u0470\u040b\3\2\2\2")
        buf.write("\u0470\u040d\3\2\2\2\u0470\u040f\3\2\2\2\u0470\u0411\3")
        buf.write("\2\2\2\u0470\u0427\3\2\2\2\u0470\u0429\3\2\2\2\u0470\u043f")
        buf.write("\3\2\2\2\u0470\u0447\3\2\2\2\u0470\u045d\3\2\2\2\u0470")
        buf.write("\u045e\3\2\2\2\u0470\u0460\3\2\2\2\u0470\u0462\3\2\2\2")
        buf.write("\u0470\u046e\3\2\2\2\u0470\u046f\3\2\2\2\u0471w\3\2\2")
        buf.write("\2\u0472\u0473\7\6\2\2\u0473\u0474\5\u00acW\2\u0474\u0475")
        buf.write("\5\u00acW\2\u0475\u0476\5\u00acW\2\u0476\u047c\5\u00ac")
        buf.write("W\2\u0477\u0478\5\u00acW\2\u0478\u0479\5\u00acW\2\u0479")
        buf.write("\u047a\5\u00acW\2\u047a\u047b\5\u00acW\2\u047b\u047d\3")
        buf.write("\2\2\2\u047c\u0477\3\2\2\2\u047c\u047d\3\2\2\2\u047d\u0483")
        buf.write("\3\2\2\2\u047e\u047f\5\u00acW\2\u047f\u0480\5\u00acW\2")
        buf.write("\u0480\u0481\5\u00acW\2\u0481\u0482\5\u00acW\2\u0482\u0484")
        buf.write("\3\2\2\2\u0483\u047e\3\2\2\2\u0483\u0484\3\2\2\2\u0484")
        buf.write("\u048a\3\2\2\2\u0485\u0486\5\u00acW\2\u0486\u0487\5\u00ac")
        buf.write("W\2\u0487\u0488\5\u00acW\2\u0488\u0489\5\u00acW\2\u0489")
        buf.write("\u048b\3\2\2\2\u048a\u0485\3\2\2\2\u048a\u048b\3\2\2\2")
        buf.write("\u048by\3\2\2\2\u048c\u0492\5|?\2\u048d\u048e\7\27\2\2")
        buf.write("\u048e\u0492\5\u00b8]\2\u048f\u0492\7\23\2\2\u0490\u0492")
        buf.write("\7\25\2\2\u0491\u048c\3\2\2\2\u0491\u048d\3\2\2\2\u0491")
        buf.write("\u048f\3\2\2\2\u0491\u0490\3\2\2\2\u0492{\3\2\2\2\u0493")
        buf.write("\u0494\7\6\2\2\u0494\u0495\5\u00acW\2\u0495\u0496\5\u00b4")
        buf.write("[\2\u0496\u0497\5\u00b4[\2\u0497}\3\2\2\2\u0498\u04af")
        buf.write("\5\u0080A\2\u0499\u049a\7\13\2\2\u049a\u04af\7\u00ac\2")
        buf.write("\2\u049b\u049c\7,\2\2\u049c\u049d\5\u00b8]\2\u049d\u049e")
        buf.write("\5\u00b8]\2\u049e\u049f\5\u00b8]\2\u049f\u04a0\5\u00b8")
        buf.write("]\2\u04a0\u04a1\5\u00b8]\2\u04a1\u04af\3\2\2\2\u04a2\u04a3")
        buf.write("\7-\2\2\u04a3\u04af\5\u00b8]\2\u04a4\u04a5\7\20\2\2\u04a5")
        buf.write("\u04af\7\u00a8\2\2\u04a6\u04a7\7\21\2\2\u04a7\u04af\7")
        buf.write(".\2\2\u04a8\u04a9\7\23\2\2\u04a9\u04aa\7\24\2\2\u04aa")
        buf.write("\u04af\5\u00b8]\2\u04ab\u04af\7\25\2\2\u04ac\u04ad\7\61")
        buf.write("\2\2\u04ad\u04af\7`\2\2\u04ae\u0498\3\2\2\2\u04ae\u0499")
        buf.write("\3\2\2\2\u04ae\u049b\3\2\2\2\u04ae\u04a2\3\2\2\2\u04ae")
        buf.write("\u04a4\3\2\2\2\u04ae\u04a6\3\2\2\2\u04ae\u04a8\3\2\2\2")
        buf.write("\u04ae\u04ab\3\2\2\2\u04ae\u04ac\3\2\2\2\u04af\177\3\2")
        buf.write("\2\2\u04b0\u04b1\7\6\2\2\u04b1\u04b2\5\u00acW\2\u04b2")
        buf.write("\u04b3\5\u00acW\2\u04b3\u04b4\5\u00acW\2\u04b4\u04b5\5")
        buf.write("\u00acW\2\u04b5\u04b6\5\u00acW\2\u04b6\u04b7\5\u00acW")
        buf.write("\2\u04b7\u04b8\5\u00b4[\2\u04b8\u04b9\5\u00b4[\2\u04b9")
        buf.write("\u0081\3\2\2\2\u04ba\u04f4\5\u0084C\2\u04bb\u04bc\7\13")
        buf.write("\2\2\u04bc\u04f4\7\u00ac\2\2\u04bd\u04be\7\37\2\2\u04be")
        buf.write("\u04f4\5\u00b8]\2\u04bf\u04c0\7b\2\2\u04c0\u04f4\5\u00b8")
        buf.write("]\2\u04c1\u04c2\7-\2\2\u04c2\u04f4\5\u00b8]\2\u04c3\u04c4")
        buf.write("\7W\2\2\u04c4\u04c5\5\u00b8]\2\u04c5\u04c6\5\u00b8]\2")
        buf.write("\u04c6\u04c7\5\u00b8]\2\u04c7\u04c8\5\u00b8]\2\u04c8\u04c9")
        buf.write("\5\u00b8]\2\u04c9\u04ca\5\u00b8]\2\u04ca\u04cb\5\u00b8")
        buf.write("]\2\u04cb\u04f4\3\2\2\2\u04cc\u04cd\7c\2\2\u04cd\u04f4")
        buf.write("\7\u00a8\2\2\u04ce\u04cf\7d\2\2\u04cf\u04d0\5\u00b8]\2")
        buf.write("\u04d0\u04d1\5\u00b8]\2\u04d1\u04d2\5\u00b8]\2\u04d2\u04d3")
        buf.write("\5\u00b8]\2\u04d3\u04d4\5\u00b8]\2\u04d4\u04d5\5\u00b8")
        buf.write("]\2\u04d5\u04d6\5\u00b8]\2\u04d6\u04d7\5\u00b8]\2\u04d7")
        buf.write("\u04f4\3\2\2\2\u04d8\u04d9\7\20\2\2\u04d9\u04f4\7\u00a8")
        buf.write("\2\2\u04da\u04db\7\23\2\2\u04db\u04dc\7\24\2\2\u04dc\u04e0")
        buf.write("\5\u00b8]\2\u04dd\u04e1\7\u0083\2\2\u04de\u04df\7\13\2")
        buf.write("\2\u04df\u04e1\7\u00ac\2\2\u04e0\u04dd\3\2\2\2\u04e0\u04de")
        buf.write("\3\2\2\2\u04e1\u04f4\3\2\2\2\u04e2\u04e3\7Y\2\2\u04e3")
        buf.write("\u04e4\5\u00b8]\2\u04e4\u04e5\5\u00b8]\2\u04e5\u04e6\5")
        buf.write("\u00b8]\2\u04e6\u04e7\5\u00b8]\2\u04e7\u04e8\5\u00b8]")
        buf.write("\2\u04e8\u04e9\5\u00b8]\2\u04e9\u04ea\5\u00b8]\2\u04ea")
        buf.write("\u04f4\3\2\2\2\u04eb\u04f4\7\25\2\2\u04ec\u04ed\7\u0093")
        buf.write("\2\2\u04ed\u04f4\7\u00a8\2\2\u04ee\u04ef\7C\2\2\u04ef")
        buf.write("\u04f0\5\u00b8]\2\u04f0\u04f1\5\u00b8]\2\u04f1\u04f4\3")
        buf.write("\2\2\2\u04f2\u04f4\7D\2\2\u04f3\u04ba\3\2\2\2\u04f3\u04bb")
        buf.write("\3\2\2\2\u04f3\u04bd\3\2\2\2\u04f3\u04bf\3\2\2\2\u04f3")
        buf.write("\u04c1\3\2\2\2\u04f3\u04c3\3\2\2\2\u04f3\u04cc\3\2\2\2")
        buf.write("\u04f3\u04ce\3\2\2\2\u04f3\u04d8\3\2\2\2\u04f3\u04da\3")
        buf.write("\2\2\2\u04f3\u04e2\3\2\2\2\u04f3\u04eb\3\2\2\2\u04f3\u04ec")
        buf.write("\3\2\2\2\u04f3\u04ee\3\2\2\2\u04f3\u04f2\3\2\2\2\u04f4")
        buf.write("\u0083\3\2\2\2\u04f5\u04f6\7\6\2\2\u04f6\u04f7\5\u00ac")
        buf.write("W\2\u04f7\u04f8\5\u00acW\2\u04f8\u04f9\5\u00acW\2\u04f9")
        buf.write("\u04fa\5\u00acW\2\u04fa\u0085\3\2\2\2\u04fb\u0517\5\u0088")
        buf.write("E\2\u04fc\u04fd\7\13\2\2\u04fd\u0517\7\u00ac\2\2\u04fe")
        buf.write("\u04ff\7\27\2\2\u04ff\u0517\5\u00b8]\2\u0500\u0501\7\61")
        buf.write("\2\2\u0501\u0517\7g\2\2\u0502\u0503\7,\2\2\u0503\u0504")
        buf.write("\5\u00b8]\2\u0504\u0505\5\u00b8]\2\u0505\u0506\5\u00b8")
        buf.write("]\2\u0506\u0517\3\2\2\2\u0507\u0508\7f\2\2\u0508\u0509")
        buf.write("\5\u00b8]\2\u0509\u050a\5\u00b8]\2\u050a\u050b\5\u00b8")
        buf.write("]\2\u050b\u0517\3\2\2\2\u050c\u050d\7-\2\2\u050d\u0517")
        buf.write("\5\u00b8]\2\u050e\u050f\7\20\2\2\u050f\u0517\7\u00a8\2")
        buf.write("\2\u0510\u0511\7\21\2\2\u0511\u0517\7.\2\2\u0512\u0513")
        buf.write("\7\23\2\2\u0513\u0514\7\24\2\2\u0514\u0517\5\u00b8]\2")
        buf.write("\u0515\u0517\7\25\2\2\u0516\u04fb\3\2\2\2\u0516\u04fc")
        buf.write("\3\2\2\2\u0516\u04fe\3\2\2\2\u0516\u0500\3\2\2\2\u0516")
        buf.write("\u0502\3\2\2\2\u0516\u0507\3\2\2\2\u0516\u050c\3\2\2\2")
        buf.write("\u0516\u050e\3\2\2\2\u0516\u0510\3\2\2\2\u0516\u0512\3")
        buf.write("\2\2\2\u0516\u0515\3\2\2\2\u0517\u0087\3\2\2\2\u0518\u0519")
        buf.write("\7\6\2\2\u0519\u051a\5\u00acW\2\u051a\u051b\5\u00acW\2")
        buf.write("\u051b\u051c\5\u00acW\2\u051c\u051d\5\u00acW\2\u051d\u051e")
        buf.write("\5\u00acW\2\u051e\u051f\5\u00acW\2\u051f\u0520\5\u00ac")
        buf.write("W\2\u0520\u0521\5\u00b4[\2\u0521\u0522\5\u00b4[\2\u0522")
        buf.write("\u0523\5\u00b4[\2\u0523\u0089\3\2\2\2\u0524\u053f\5\u0088")
        buf.write("E\2\u0525\u0526\7\13\2\2\u0526\u053f\7\u00ac\2\2\u0527")
        buf.write("\u0528\7\27\2\2\u0528\u053f\5\u00b8]\2\u0529\u052a\7,")
        buf.write("\2\2\u052a\u052b\5\u00b8]\2\u052b\u052c\5\u00b8]\2\u052c")
        buf.write("\u052d\5\u00b8]\2\u052d\u053f\3\2\2\2\u052e\u052f\7f\2")
        buf.write("\2\u052f\u0530\5\u00b8]\2\u0530\u0531\5\u00b8]\2\u0531")
        buf.write("\u0532\5\u00b8]\2\u0532\u0533\5\u00b8]\2\u0533\u053f\3")
        buf.write("\2\2\2\u0534\u0535\7-\2\2\u0535\u053f\5\u00b8]\2\u0536")
        buf.write("\u0537\7\20\2\2\u0537\u053f\7\u00a8\2\2\u0538\u0539\7")
        buf.write("\21\2\2\u0539\u053f\7.\2\2\u053a\u053b\7\23\2\2\u053b")
        buf.write("\u053c\7\24\2\2\u053c\u053f\5\u00b8]\2\u053d\u053f\7\25")
        buf.write("\2\2\u053e\u0524\3\2\2\2\u053e\u0525\3\2\2\2\u053e\u0527")
        buf.write("\3\2\2\2\u053e\u0529\3\2\2\2\u053e\u052e\3\2\2\2\u053e")
        buf.write("\u0534\3\2\2\2\u053e\u0536\3\2\2\2\u053e\u0538\3\2\2\2")
        buf.write("\u053e\u053a\3\2\2\2\u053e\u053d\3\2\2\2\u053f\u008b\3")
        buf.write("\2\2\2\u0540\u0557\5\u008eH\2\u0541\u0542\7\13\2\2\u0542")
        buf.write("\u0557\7\u00ac\2\2\u0543\u0544\7,\2\2\u0544\u0545\5\u00b8")
        buf.write("]\2\u0545\u0546\5\u00b8]\2\u0546\u0547\5\u00b8]\2\u0547")
        buf.write("\u0548\5\u00b8]\2\u0548\u0549\5\u00b8]\2\u0549\u054a\5")
        buf.write("\u00b8]\2\u054a\u054b\5\u00b8]\2\u054b\u0557\3\2\2\2\u054c")
        buf.write("\u054d\7-\2\2\u054d\u0557\5\u00b8]\2\u054e\u054f\7\20")
        buf.write("\2\2\u054f\u0557\7\u00a8\2\2\u0550\u0551\7\21\2\2\u0551")
        buf.write("\u0557\7.\2\2\u0552\u0553\7\23\2\2\u0553\u0554\7\24\2")
        buf.write("\2\u0554\u0557\5\u00b8]\2\u0555\u0557\7\25\2\2\u0556\u0540")
        buf.write("\3\2\2\2\u0556\u0541\3\2\2\2\u0556\u0543\3\2\2\2\u0556")
        buf.write("\u054c\3\2\2\2\u0556\u054e\3\2\2\2\u0556\u0550\3\2\2\2")
        buf.write("\u0556\u0552\3\2\2\2\u0556\u0555\3\2\2\2\u0557\u008d\3")
        buf.write("\2\2\2\u0558\u0559\7\6\2\2\u0559\u055a\5\u00acW\2\u055a")
        buf.write("\u055b\5\u00acW\2\u055b\u055c\5\u00acW\2\u055c\u055d\5")
        buf.write("\u00acW\2\u055d\u055e\5\u00acW\2\u055e\u055f\5\u00acW")
        buf.write("\2\u055f\u0560\5\u00acW\2\u0560\u0561\5\u00acW\2\u0561")
        buf.write("\u0562\5\u00b4[\2\u0562\u0563\5\u00b4[\2\u0563\u008f\3")
        buf.write("\2\2\2\u0564\u0584\5\u0092J\2\u0565\u0566\7\13\2\2\u0566")
        buf.write("\u0584\7\u00ac\2\2\u0567\u0568\7k\2\2\u0568\u0584\7\u00ac")
        buf.write("\2\2\u0569\u056a\7B\2\2\u056a\u056b\7\u00a8\2\2\u056b")
        buf.write("\u056c\7\u00a8\2\2\u056c\u0584\5\u00b8]\2\u056d\u056e")
        buf.write("\7T\2\2\u056e\u0584\5\u00b8]\2\u056f\u0570\7-\2\2\u0570")
        buf.write("\u0584\5\u00b8]\2\u0571\u0572\7\20\2\2\u0572\u0584\7\u00a8")
        buf.write("\2\2\u0573\u0574\7\21\2\2\u0574\u0584\7.\2\2\u0575\u0576")
        buf.write("\7\23\2\2\u0576\u0577\7\24\2\2\u0577\u057b\5\u00b8]\2")
        buf.write("\u0578\u057c\7\u0083\2\2\u0579\u057a\7\13\2\2\u057a\u057c")
        buf.write("\7\u00ac\2\2\u057b\u0578\3\2\2\2\u057b\u0579\3\2\2\2\u057c")
        buf.write("\u0584\3\2\2\2\u057d\u0584\7\25\2\2\u057e\u057f\7C\2\2")
        buf.write("\u057f\u0580\7l\2\2\u0580\u0581\7\u00a8\2\2\u0581\u0584")
        buf.write("\7\u00a8\2\2\u0582\u0584\7D\2\2\u0583\u0564\3\2\2\2\u0583")
        buf.write("\u0565\3\2\2\2\u0583\u0567\3\2\2\2\u0583\u0569\3\2\2\2")
        buf.write("\u0583\u056d\3\2\2\2\u0583\u056f\3\2\2\2\u0583\u0571\3")
        buf.write("\2\2\2\u0583\u0573\3\2\2\2\u0583\u0575\3\2\2\2\u0583\u057d")
        buf.write("\3\2\2\2\u0583\u057e\3\2\2\2\u0583\u0582\3\2\2\2\u0584")
        buf.write("\u0091\3\2\2\2\u0585\u0586\7\6\2\2\u0586\u0587\5\u00ac")
        buf.write("W\2\u0587\u0588\5\u00acW\2\u0588\u0589\5\u00acW\2\u0589")
        buf.write("\u058a\5\u00acW\2\u058a\u058b\5\u00acW\2\u058b\u058c\5")
        buf.write("\u00acW\2\u058c\u058d\5\u00acW\2\u058d\u058e\5\u00acW")
        buf.write("\2\u058e\u058f\5\u00acW\2\u058f\u0590\5\u00acW\2\u0590")
        buf.write("\u0592\5\u00acW\2\u0591\u0593\5\u00acW\2\u0592\u0591\3")
        buf.write("\2\2\2\u0592\u0593\3\2\2\2\u0593\u0093\3\2\2\2\u0594\u05ca")
        buf.write("\5\u0096L\2\u0595\u0597\7\13\2\2\u0596\u0598\7\u00b2\2")
        buf.write("\2\u0597\u0596\3\2\2\2\u0597\u0598\3\2\2\2\u0598\u0599")
        buf.write("\3\2\2\2\u0599\u05ca\7\u00ac\2\2\u059a\u059c\7-\2\2\u059b")
        buf.write("\u059d\7\u00b2\2\2\u059c\u059b\3\2\2\2\u059c\u059d\3\2")
        buf.write("\2\2\u059d\u059e\3\2\2\2\u059e\u059f\7\u00ac\2\2\u059f")
        buf.write("\u05ca\5\u00b8]\2\u05a0\u05a2\7\20\2\2\u05a1\u05a3\7\u00b2")
        buf.write("\2\2\u05a2\u05a1\3\2\2\2\u05a2\u05a3\3\2\2\2\u05a3\u05a4")
        buf.write("\3\2\2\2\u05a4\u05ca\7\u00a8\2\2\u05a5\u05a7\7\21\2\2")
        buf.write("\u05a6\u05a8\7\u00b2\2\2\u05a7\u05a6\3\2\2\2\u05a7\u05a8")
        buf.write("\3\2\2\2\u05a8\u05a9\3\2\2\2\u05a9\u05aa\7\u00ac\2\2\u05aa")
        buf.write("\u05ca\7.\2\2\u05ab\u05ad\7n\2\2\u05ac\u05ae\7\u00b2\2")
        buf.write("\2\u05ad\u05ac\3\2\2\2\u05ad\u05ae\3\2\2\2\u05ae\u05af")
        buf.write("\3\2\2\2\u05af\u05b0\7\u00ac\2\2\u05b0\u05ca\5\u00b8]")
        buf.write("\2\u05b1\u05b3\7o\2\2\u05b2\u05b4\7\u00b2\2\2\u05b3\u05b2")
        buf.write("\3\2\2\2\u05b3\u05b4\3\2\2\2\u05b4\u05b5\3\2\2\2\u05b5")
        buf.write("\u05b6\7\u00ac\2\2\u05b6\u05ca\5\u00b8]\2\u05b7\u05b9")
        buf.write("\7p\2\2\u05b8\u05ba\7\u00b2\2\2\u05b9\u05b8\3\2\2\2\u05b9")
        buf.write("\u05ba\3\2\2\2\u05ba\u05bb\3\2\2\2\u05bb\u05bc\7\u00ac")
        buf.write("\2\2\u05bc\u05bd\5\u00b8]\2\u05bd\u05be\5\u00b8]\2\u05be")
        buf.write("\u05ca\3\2\2\2\u05bf\u05c0\7\23\2\2\u05c0\u05c1\7\24\2")
        buf.write("\2\u05c1\u05c5\5\u00b8]\2\u05c2\u05c6\7\u0083\2\2\u05c3")
        buf.write("\u05c4\7\13\2\2\u05c4\u05c6\7\u00ac\2\2\u05c5\u05c2\3")
        buf.write("\2\2\2\u05c5\u05c3\3\2\2\2\u05c6\u05ca\3\2\2\2\u05c7\u05ca")
        buf.write("\7\25\2\2\u05c8\u05ca\7q\2\2\u05c9\u0594\3\2\2\2\u05c9")
        buf.write("\u0595\3\2\2\2\u05c9\u059a\3\2\2\2\u05c9\u05a0\3\2\2\2")
        buf.write("\u05c9\u05a5\3\2\2\2\u05c9\u05ab\3\2\2\2\u05c9\u05b1\3")
        buf.write("\2\2\2\u05c9\u05b7\3\2\2\2\u05c9\u05bf\3\2\2\2\u05c9\u05c7")
        buf.write("\3\2\2\2\u05c9\u05c8\3\2\2\2\u05ca\u0095\3\2\2\2\u05cb")
        buf.write("\u05cc\7\6\2\2\u05cc\u05cd\5\u00acW\2\u05cd\u05ce\5\u00ac")
        buf.write("W\2\u05ce\u05cf\5\u00b4[\2\u05cf\u05d0\5\u00b4[\2\u05d0")
        buf.write("\u0097\3\2\2\2\u05d1\u05f6\5\u009aN\2\u05d2\u05d3\7\13")
        buf.write("\2\2\u05d3\u05f6\7\u00ac\2\2\u05d4\u05d5\7s\2\2\u05d5")
        buf.write("\u05f6\7\u00a8\2\2\u05d6\u05d7\7,\2\2\u05d7\u05d8\5\u00b8")
        buf.write("]\2\u05d8\u05d9\5\u00b8]\2\u05d9\u05f6\3\2\2\2\u05da\u05db")
        buf.write("\7-\2\2\u05db\u05f6\5\u00b8]\2\u05dc\u05dd\7\20\2\2\u05dd")
        buf.write("\u05f6\7\u00a8\2\2\u05de\u05df\7\23\2\2\u05df\u05e0\7")
        buf.write("\24\2\2\u05e0\u05e4\5\u00b8]\2\u05e1\u05e5\7\u0083\2\2")
        buf.write("\u05e2\u05e3\7\13\2\2\u05e3\u05e5\7\u00ac\2\2\u05e4\u05e1")
        buf.write("\3\2\2\2\u05e4\u05e2\3\2\2\2\u05e5\u05f6\3\2\2\2\u05e6")
        buf.write("\u05f6\7\25\2\2\u05e7\u05e8\7t\2\2\u05e8\u05f6\7\u00ac")
        buf.write("\2\2\u05e9\u05ea\7u\2\2\u05ea\u05eb\5\u00b8]\2\u05eb\u05ec")
        buf.write("\7\u00a8\2\2\u05ec\u05f6\3\2\2\2\u05ed\u05f6\7v\2\2\u05ee")
        buf.write("\u05f6\7w\2\2\u05ef\u05f6\7x\2\2\u05f0\u05f6\7y\2\2\u05f1")
        buf.write("\u05f6\7z\2\2\u05f2\u05f6\7{\2\2\u05f3\u05f4\7|\2\2\u05f4")
        buf.write("\u05f6\7\u00a8\2\2\u05f5\u05d1\3\2\2\2\u05f5\u05d2\3\2")
        buf.write("\2\2\u05f5\u05d4\3\2\2\2\u05f5\u05d6\3\2\2\2\u05f5\u05da")
        buf.write("\3\2\2\2\u05f5\u05dc\3\2\2\2\u05f5\u05de\3\2\2\2\u05f5")
        buf.write("\u05e6\3\2\2\2\u05f5\u05e7\3\2\2\2\u05f5\u05e9\3\2\2\2")
        buf.write("\u05f5\u05ed\3\2\2\2\u05f5\u05ee\3\2\2\2\u05f5\u05ef\3")
        buf.write("\2\2\2\u05f5\u05f0\3\2\2\2\u05f5\u05f1\3\2\2\2\u05f5\u05f2")
        buf.write("\3\2\2\2\u05f5\u05f3\3\2\2\2\u05f6\u0099\3\2\2\2\u05f7")
        buf.write("\u05f8\7\6\2\2\u05f8\u05f9\5\u00acW\2\u05f9\u05fa\5\u00ac")
        buf.write("W\2\u05fa\u05fb\5\u00acW\2\u05fb\u05fc\5\u00acW\2\u05fc")
        buf.write("\u05fd\5\u00acW\2\u05fd\u05fe\5\u00b4[\2\u05fe\u05ff\5")
        buf.write("\u00b4[\2\u05ff\u009b\3\2\2\2\u0600\u061b\5\u009eP\2\u0601")
        buf.write("\u0602\7\13\2\2\u0602\u061b\7\u00ac\2\2\u0603\u0604\7")
        buf.write("s\2\2\u0604\u061b\7\u00a8\2\2\u0605\u0606\7,\2\2\u0606")
        buf.write("\u0607\5\u00b8]\2\u0607\u0608\5\u00b8]\2\u0608\u061b\3")
        buf.write("\2\2\2\u0609\u060a\7-\2\2\u060a\u061b\5\u00b8]\2\u060b")
        buf.write("\u060c\7\20\2\2\u060c\u061b\7\u00a8\2\2\u060d\u061b\7")
        buf.write("v\2\2\u060e\u061b\7w\2\2\u060f\u061b\7u\2\2\u0610\u061b")
        buf.write("\7x\2\2\u0611\u061b\7y\2\2\u0612\u061b\7|\2\2\u0613\u0614")
        buf.write("\7\23\2\2\u0614\u061b\7\24\2\2\u0615\u061b\7\25\2\2\u0616")
        buf.write("\u0617\7t\2\2\u0617\u061b\7\u00ac\2\2\u0618\u061b\7z\2")
        buf.write("\2\u0619\u061b\7{\2\2\u061a\u0600\3\2\2\2\u061a\u0601")
        buf.write("\3\2\2\2\u061a\u0603\3\2\2\2\u061a\u0605\3\2\2\2\u061a")
        buf.write("\u0609\3\2\2\2\u061a\u060b\3\2\2\2\u061a\u060d\3\2\2\2")
        buf.write("\u061a\u060e\3\2\2\2\u061a\u060f\3\2\2\2\u061a\u0610\3")
        buf.write("\2\2\2\u061a\u0611\3\2\2\2\u061a\u0612\3\2\2\2\u061a\u0613")
        buf.write("\3\2\2\2\u061a\u0615\3\2\2\2\u061a\u0616\3\2\2\2\u061a")
        buf.write("\u0618\3\2\2\2\u061a\u0619\3\2\2\2\u061b\u009d\3\2\2\2")
        buf.write("\u061c\u061d\7\6\2\2\u061d\u061e\5\u00acW\2\u061e\u061f")
        buf.write("\5\u00acW\2\u061f\u0620\5\u00acW\2\u0620\u0621\5\u00ac")
        buf.write("W\2\u0621\u0622\5\u00acW\2\u0622\u0623\5\u00acW\2\u0623")
        buf.write("\u0624\5\u00b4[\2\u0624\u0625\5\u00b4[\2\u0625\u009f\3")
        buf.write("\2\2\2\u0626\u0632\5\u00a2R\2\u0627\u0628\7\13\2\2\u0628")
        buf.write("\u0632\7\u00ac\2\2\u0629\u062a\7-\2\2\u062a\u0632\5\u00b8")
        buf.write("]\2\u062b\u062c\7\20\2\2\u062c\u0632\7\u00a8\2\2\u062d")
        buf.write("\u062e\7\23\2\2\u062e\u062f\7\24\2\2\u062f\u0632\5\u00b8")
        buf.write("]\2\u0630\u0632\7\25\2\2\u0631\u0626\3\2\2\2\u0631\u0627")
        buf.write("\3\2\2\2\u0631\u0629\3\2\2\2\u0631\u062b\3\2\2\2\u0631")
        buf.write("\u062d\3\2\2\2\u0631\u0630\3\2\2\2\u0632\u00a1\3\2\2\2")
        buf.write("\u0633\u0634\7\6\2\2\u0634\u0635\5\u00acW\2\u0635\u0636")
        buf.write("\5\u00acW\2\u0636\u0637\5\u00b4[\2\u0637\u0638\5\u00b4")
        buf.write("[\2\u0638\u0639\5\u00b4[\2\u0639\u00a3\3\2\2\2\u063a\u064c")
        buf.write("\5\u00a6T\2\u063b\u063c\7\13\2\2\u063c\u064c\7\u00ac\2")
        buf.write("\2\u063d\u063e\7\u0080\2\2\u063e\u064c\7\u00a8\2\2\u063f")
        buf.write("\u0640\7,\2\2\u0640\u064c\5\u00b8]\2\u0641\u0642\7-\2")
        buf.write("\2\u0642\u064c\5\u00b8]\2\u0643\u0644\7\20\2\2\u0644\u064c")
        buf.write("\7\u00a8\2\2\u0645\u0646\7\23\2\2\u0646\u0647\7\24\2\2")
        buf.write("\u0647\u064c\5\u00b8]\2\u0648\u064c\7\25\2\2\u0649\u064a")
        buf.write("\7|\2\2\u064a\u064c\7\u00a8\2\2\u064b\u063a\3\2\2\2\u064b")
        buf.write("\u063b\3\2\2\2\u064b\u063d\3\2\2\2\u064b\u063f\3\2\2\2")
        buf.write("\u064b\u0641\3\2\2\2\u064b\u0643\3\2\2\2\u064b\u0645\3")
        buf.write("\2\2\2\u064b\u0648\3\2\2\2\u064b\u0649\3\2\2\2\u064c\u00a5")
        buf.write("\3\2\2\2\u064d\u064e\7\6\2\2\u064e\u064f\5\u00acW\2\u064f")
        buf.write("\u0650\5\u00acW\2\u0650\u0651\5\u00acW\2\u0651\u0652\5")
        buf.write("\u00b4[\2\u0652\u0653\5\u00b4[\2\u0653\u00a7\3\2\2\2\u0654")
        buf.write("\u0660\5\u00aaV\2\u0655\u0656\7\13\2\2\u0656\u0660\7\u00ac")
        buf.write("\2\2\u0657\u0658\7-\2\2\u0658\u0660\5\u00b8]\2\u0659\u065a")
        buf.write("\7\20\2\2\u065a\u0660\7\u00a8\2\2\u065b\u065c\7\23\2\2")
        buf.write("\u065c\u065d\7\24\2\2\u065d\u0660\5\u00b8]\2\u065e\u0660")
        buf.write("\7\25\2\2\u065f\u0654\3\2\2\2\u065f\u0655\3\2\2\2\u065f")
        buf.write("\u0657\3\2\2\2\u065f\u0659\3\2\2\2\u065f\u065b\3\2\2\2")
        buf.write("\u065f\u065e\3\2\2\2\u0660\u00a9\3\2\2\2\u0661\u0662\7")
        buf.write("\6\2\2\u0662\u0663\5\u00acW\2\u0663\u0664\5\u00acW\2\u0664")
        buf.write("\u0665\5\u00acW\2\u0665\u00ab\3\2\2\2\u0666\u0667\7\u00af")
        buf.write("\2\2\u0667\u0668\5\u00aeX\2\u0668\u0669\7\u00b0\2\2\u0669")
        buf.write("\u00ad\3\2\2\2\u066a\u066f\5\u00b0Y\2\u066b\u066c\7\u00a3")
        buf.write("\2\2\u066c\u066e\5\u00b0Y\2\u066d\u066b\3\2\2\2\u066e")
        buf.write("\u0671\3\2\2\2\u066f\u066d\3\2\2\2\u066f\u0670\3\2\2\2")
        buf.write("\u0670\u00af\3\2\2\2\u0671\u066f\3\2\2\2\u0672\u0677\5")
        buf.write("\u00b2Z\2\u0673\u0674\7\u00a4\2\2\u0674\u0676\5\u00b2")
        buf.write("Z\2\u0675\u0673\3\2\2\2\u0676\u0679\3\2\2\2\u0677\u0675")
        buf.write("\3\2\2\2\u0677\u0678\3\2\2\2\u0678\u00b1\3\2\2\2\u0679")
        buf.write("\u0677\3\2\2\2\u067a\u067b\bZ\1\2\u067b\u067c\7\u00af")
        buf.write("\2\2\u067c\u067d\5\u00aeX\2\u067d\u067e\7\u00b0\2\2\u067e")
        buf.write("\u06fa\3\2\2\2\u067f\u06fa\7\u0083\2\2\u0680\u0681\7\u0085")
        buf.write("\2\2\u0681\u0682\t\3\2\2\u0682\u0683\t\4\2\2\u0683\u06fa")
        buf.write("\t\3\2\2\u0684\u0686\7\u0086\2\2\u0685\u0687\7\u00bc\2")
        buf.write("\2\u0686\u0685\3\2\2\2\u0686\u0687\3\2\2\2\u0687\u0688")
        buf.write("\3\2\2\2\u0688\u0689\7\u00bd\2\2\u0689\u068a\7\u00be\2")
        buf.write("\2\u068a\u06fa\5\u00b6\\\2\u068b\u068c\7\u0087\2\2\u068c")
        buf.write("\u06fa\5\u00b2Z\35\u068d\u068e\7\u0088\2\2\u068e\u06fa")
        buf.write("\5\u00b2Z\34\u068f\u0690\7\u0089\2\2\u0690\u06fa\5\u00b2")
        buf.write("Z\33\u0691\u0698\7\u008a\2\2\u0692\u0699\7\u00ad\2\2\u0693")
        buf.write("\u0696\7\u00ac\2\2\u0694\u0695\7\u00b1\2\2\u0695\u0697")
        buf.write("\7\u00ac\2\2\u0696\u0694\3\2\2\2\u0696\u0697\3\2\2\2\u0697")
        buf.write("\u0699\3\2\2\2\u0698\u0692\3\2\2\2\u0698\u0693\3\2\2\2")
        buf.write("\u0699\u06fa\3\2\2\2\u069a\u06fa\7\u008b\2\2\u069b\u069c")
        buf.write("\7\u008c\2\2\u069c\u06fa\7\u00a8\2\2\u069d\u06fa\7\u008d")
        buf.write("\2\2\u069e\u06a5\7\u008e\2\2\u069f\u06a6\7\u00ad\2\2\u06a0")
        buf.write("\u06a3\7\u00ac\2\2\u06a1\u06a2\7\u00b1\2\2\u06a2\u06a4")
        buf.write("\7\u00ac\2\2\u06a3\u06a1\3\2\2\2\u06a3\u06a4\3\2\2\2\u06a4")
        buf.write("\u06a6\3\2\2\2\u06a5\u069f\3\2\2\2\u06a5\u06a0\3\2\2\2")
        buf.write("\u06a6\u06fa\3\2\2\2\u06a7\u06a8\7\u00a5\2\2\u06a8\u06fa")
        buf.write("\5\u00b2Z\25\u06a9\u06aa\7\u008f\2\2\u06aa\u06ab\7\u00af")
        buf.write("\2\2\u06ab\u06ad\5\u00b6\\\2\u06ac\u06ae\7\u00a6\2\2\u06ad")
        buf.write("\u06ac\3\2\2\2\u06ad\u06ae\3\2\2\2\u06ae\u06af\3\2\2\2")
        buf.write("\u06af\u06b1\5\u00b6\\\2\u06b0\u06b2\7\u00a6\2\2\u06b1")
        buf.write("\u06b0\3\2\2\2\u06b1\u06b2\3\2\2\2\u06b2\u06b3\3\2\2\2")
        buf.write("\u06b3\u06b4\5\u00b6\\\2\u06b4\u06b5\7\u00b0\2\2\u06b5")
        buf.write("\u06b6\7\u0090\2\2\u06b6\u06b7\5\u00b6\\\2\u06b7\u06fa")
        buf.write("\3\2\2\2\u06b8\u06b9\7\u008f\2\2\u06b9\u06ba\7\u00af\2")
        buf.write("\2\u06ba\u06bc\7\u00a1\2\2\u06bb\u06bd\7\u00b2\2\2\u06bc")
        buf.write("\u06bb\3\2\2\2\u06bc\u06bd\3\2\2\2\u06bd\u06be\3\2\2\2")
        buf.write("\u06be\u06c0\5\u00acW\2\u06bf\u06c1\7\u00a6\2\2\u06c0")
        buf.write("\u06bf\3\2\2\2\u06c0\u06c1\3\2\2\2\u06c1\u06c7\3\2\2\2")
        buf.write("\u06c2\u06c4\7\u00a2\2\2\u06c3\u06c5\7\u00b2\2\2\u06c4")
        buf.write("\u06c3\3\2\2\2\u06c4\u06c5\3\2\2\2\u06c5\u06c6\3\2\2\2")
        buf.write("\u06c6\u06c8\5\u00acW\2\u06c7\u06c2\3\2\2\2\u06c7\u06c8")
        buf.write("\3\2\2\2\u06c8\u06c9\3\2\2\2\u06c9\u06ca\7\u00b0\2\2\u06ca")
        buf.write("\u06cb\7\u0090\2\2\u06cb\u06cc\5\u00b6\\\2\u06cc\u06fa")
        buf.write("\3\2\2\2\u06cd\u06fa\7\u0091\2\2\u06ce\u06fa\7\u0092\2")
        buf.write("\2\u06cf\u06d6\7\u0093\2\2\u06d0\u06d7\7\u00ae\2\2\u06d1")
        buf.write("\u06d4\7\u00a8\2\2\u06d2\u06d3\7\u00b1\2\2\u06d3\u06d5")
        buf.write("\7\u00a8\2\2\u06d4\u06d2\3\2\2\2\u06d4\u06d5\3\2\2\2\u06d5")
        buf.write("\u06d7\3\2\2\2\u06d6\u06d0\3\2\2\2\u06d6\u06d1\3\2\2\2")
        buf.write("\u06d7\u06fa\3\2\2\2\u06d8\u06df\7\u0094\2\2\u06d9\u06e0")
        buf.write("\7\u00ad\2\2\u06da\u06dd\7\u00ac\2\2\u06db\u06dc\7\u00b1")
        buf.write("\2\2\u06dc\u06de\7\u00ac\2\2\u06dd\u06db\3\2\2\2\u06dd")
        buf.write("\u06de\3\2\2\2\u06de\u06e0\3\2\2\2\u06df\u06d9\3\2\2\2")
        buf.write("\u06df\u06da\3\2\2\2\u06e0\u06fa\3\2\2\2\u06e1\u06ed\7")
        buf.write("\u0096\2\2\u06e2\u06ee\7\u00ad\2\2\u06e3\u06e6\7\u00ac")
        buf.write("\2\2\u06e4\u06e5\7\u00b1\2\2\u06e5\u06e7\7\u00ac\2\2\u06e6")
        buf.write("\u06e4\3\2\2\2\u06e6\u06e7\3\2\2\2\u06e7\u06ee\3\2\2\2")
        buf.write("\u06e8\u06eb\7\u00ab\2\2\u06e9\u06ea\7\u00b1\2\2\u06ea")
        buf.write("\u06ec\7\u00ab\2\2\u06eb\u06e9\3\2\2\2\u06eb\u06ec\3\2")
        buf.write("\2\2\u06ec\u06ee\3\2\2\2\u06ed\u06e2\3\2\2\2\u06ed\u06e3")
        buf.write("\3\2\2\2\u06ed\u06e8\3\2\2\2\u06ee\u06fa\3\2\2\2\u06ef")
        buf.write("\u06fa\7\u0097\2\2\u06f0\u06fa\7\u0098\2\2\u06f1\u06fa")
        buf.write("\7\u0099\2\2\u06f2\u06fa\7\u009a\2\2\u06f3\u06fa\7\u009b")
        buf.write("\2\2\u06f4\u06fa\7\u009c\2\2\u06f5\u06fa\7\u009d\2\2\u06f6")
        buf.write("\u06fa\7\u009e\2\2\u06f7\u06fa\7\u009f\2\2\u06f8\u06fa")
        buf.write("\7\u00a0\2\2\u06f9\u067a\3\2\2\2\u06f9\u067f\3\2\2\2\u06f9")
        buf.write("\u0680\3\2\2\2\u06f9\u0684\3\2\2\2\u06f9\u068b\3\2\2\2")
        buf.write("\u06f9\u068d\3\2\2\2\u06f9\u068f\3\2\2\2\u06f9\u0691\3")
        buf.write("\2\2\2\u06f9\u069a\3\2\2\2\u06f9\u069b\3\2\2\2\u06f9\u069d")
        buf.write("\3\2\2\2\u06f9\u069e\3\2\2\2\u06f9\u06a7\3\2\2\2\u06f9")
        buf.write("\u06a9\3\2\2\2\u06f9\u06b8\3\2\2\2\u06f9\u06cd\3\2\2\2")
        buf.write("\u06f9\u06ce\3\2\2\2\u06f9\u06cf\3\2\2\2\u06f9\u06d8\3")
        buf.write("\2\2\2\u06f9\u06e1\3\2\2\2\u06f9\u06ef\3\2\2\2\u06f9\u06f0")
        buf.write("\3\2\2\2\u06f9\u06f1\3\2\2\2\u06f9\u06f2\3\2\2\2\u06f9")
        buf.write("\u06f3\3\2\2\2\u06f9\u06f4\3\2\2\2\u06f9\u06f5\3\2\2\2")
        buf.write("\u06f9\u06f6\3\2\2\2\u06f9\u06f7\3\2\2\2\u06f9\u06f8\3")
        buf.write("\2\2\2\u06fa\u0703\3\2\2\2\u06fb\u06fc\f \2\2\u06fc\u06fd")
        buf.write("\7\u0084\2\2\u06fd\u0702\5\u00b6\\\2\u06fe\u06ff\f\16")
        buf.write("\2\2\u06ff\u0700\7\u0095\2\2\u0700\u0702\5\u00b6\\\2\u0701")
        buf.write("\u06fb\3\2\2\2\u0701\u06fe\3\2\2\2\u0702\u0705\3\2\2\2")
        buf.write("\u0703\u0701\3\2\2\2\u0703\u0704\3\2\2\2\u0704\u00b3\3")
        buf.write("\2\2\2\u0705\u0703\3\2\2\2\u0706\u0707\t\5\2\2\u0707\u00b5")
        buf.write("\3\2\2\2\u0708\u0709\t\5\2\2\u0709\u00b7\3\2\2\2\u070a")
        buf.write("\u070b\t\5\2\2\u070b\u00b9\3\2\2\2\u070c\u070d\t\5\2\2")
        buf.write("\u070d\u00bb\3\2\2\2\u070e\u0719\7\u0082\2\2\u070f\u0717")
        buf.write("\7\u00c0\2\2\u0710\u0712\7\u00c3\2\2\u0711\u0710\3\2\2")
        buf.write("\2\u0712\u0715\3\2\2\2\u0713\u0711\3\2\2\2\u0713\u0714")
        buf.write("\3\2\2\2\u0714\u0718\3\2\2\2\u0715\u0713\3\2\2\2\u0716")
        buf.write("\u0718\7\u00c4\2\2\u0717\u0713\3\2\2\2\u0717\u0716\3\2")
        buf.write("\2\2\u0718\u071a\3\2\2\2\u0719\u070f\3\2\2\2\u0719\u071a")
        buf.write("\3\2\2\2\u071a\u071b\3\2\2\2\u071b\u071f\7\u00c1\2\2\u071c")
        buf.write("\u071e\7\u00c3\2\2\u071d\u071c\3\2\2\2\u071e\u0721\3\2")
        buf.write("\2\2\u071f\u071d\3\2\2\2\u071f\u0720\3\2\2\2\u0720\u0722")
        buf.write("\3\2\2\2\u0721\u071f\3\2\2\2\u0722\u0723\7\u00c2\2\2\u0723")
        buf.write("\u00bd\3\2\2\2\u0097\u00e0\u00e2\u00eb\u00f5\u00fe\u0106")
        buf.write("\u010e\u0116\u011e\u0122\u0129\u0132\u013b\u0144\u014d")
        buf.write("\u0156\u015f\u0168\u0171\u017a\u0183\u018c\u0195\u019e")
        buf.write("\u01a7\u01b0\u01b9\u01c2\u01cb\u01dc\u01ef\u01fc\u0214")
        buf.write("\u0217\u0222\u022b\u0230\u0235\u023c\u0240\u0245\u024a")
        buf.write("\u024f\u0254\u0259\u025e\u0261\u0266\u026c\u028a\u0296")
        buf.write("\u02b2\u02c3\u02c8\u02d5\u02dc\u02f5\u0312\u0320\u0325")
        buf.write("\u0329\u032e\u0331\u0343\u034b\u035c\u0364\u036a\u0375")
        buf.write("\u0378\u0384\u038b\u03a7\u03c9\u03d3\u03d8\u03dd\u03e1")
        buf.write("\u03ed\u0405\u0419\u041f\u0425\u0431\u0437\u043d\u0445")
        buf.write("\u044f\u0455\u045b\u0466\u0469\u046c\u0470\u047c\u0483")
        buf.write("\u048a\u0491\u04ae\u04e0\u04f3\u0516\u053e\u0556\u057b")
        buf.write("\u0583\u0592\u0597\u059c\u05a2\u05a7\u05ad\u05b3\u05b9")
        buf.write("\u05c5\u05c9\u05e4\u05f5\u061a\u0631\u064b\u065f\u066f")
        buf.write("\u0677\u0686\u0696\u0698\u06a3\u06a5\u06ad\u06b1\u06bc")
        buf.write("\u06c0\u06c4\u06c7\u06d4\u06d6\u06dd\u06df\u06e6\u06eb")
        buf.write("\u06ed\u06f9\u0701\u0703\u0713\u0717\u0719\u071f")
        return buf.getvalue()


class XplorMRParser ( Parser ):

    grammarFileName = "XplorMRParser.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "','", "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "'('", "')'", "':'", "'='", "'<'", "'>'", "'<='", "'>='", 
                     "'#'", "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "'*'" ]

    symbolicNames = [ "<INVALID>", "Set", "End", "Noe", "Assign", "Asymptote", 
                      "Averaging", "Bhig", "Ceiling", "Classification", 
                      "CountViol", "Distribute", "Monomers", "Ncount", "Nrestraints", 
                      "Potential", "Predict", "Print", "Threshold", "Reset", 
                      "Rswitch", "Scale", "SoExponent", "SqConstant", "SqExponent", 
                      "SqOffset", "Temperature", "Noe_avr_methods", "Noe_potential", 
                      "Cutoff", "Cuton", "From", "To", "Peak", "Spectrum", 
                      "Volume", "Ppm1", "Ppm2", "Restraints", "Dihedral", 
                      "Nassign", "Sanisotropy", "Coefficients", "ForceConstant", 
                      "Rdc_potential", "Xdipolar", "Dipolar", "Type", "Sign", 
                      "Average", "Rdc_dist_fix_types", "Rdc_avr_methods", 
                      "VectorAngle", "Cv", "Partition", "Tensor", "Anisotropy", 
                      "Rdc_anis_types", "Planar", "Group", "Initialize", 
                      "Selection", "Weight", "Xadc", "Expectation", "Size", 
                      "Zero", "Coupling", "DegEnergy", "Coupling_potential", 
                      "Carbon", "PhiStep", "PsiStep", "Rcoil", "Proton", 
                      "Observed", "Amides", "Carbons", "Nitrogens", "Oxygens", 
                      "RingAtoms", "AlphasAndAmides", "Error", "Rmsd_or_Not", 
                      "Ramachandran", "Gaussian", "Phase", "Quartic", "Shape", 
                      "Sort", "Gauss_or_Quart", "Dimensions", "Collapse", 
                      "Danisotropy", "Diff_anis_types", "Orient", "Height", 
                      "MaxGaussians", "NewGaussian", "Dcsa", "Sigma", "Csa_types", 
                      "Pcsa", "OneBond", "AngleDb", "DerivFlag", "Angle_dihedral", 
                      "Paramagnetic", "Kconst", "Omega", "Tauc", "Debug", 
                      "Xpcs", "Tolerance", "Save", "Fmed", "ErrOn", "ErrOff", 
                      "Fon", "Foff", "Son", "Soff", "Frun", "Xrdcoupling", 
                      "Xangle", "Xccr", "Weip", "Hbda", "Flags", "All", 
                      "Around", "Atom", "Attribute", "BondedTo", "ByGroup", 
                      "ByRes", "Chemical", "Hydrogen", "Id", "Known", "Name", 
                      "Point", "Cut", "Previous", "Pseudo", "Residue", "Resname", 
                      "Saround", "SegIdentifier", "Store_1", "Store_2", 
                      "Store_3", "Store_4", "Store_5", "Store_6", "Store_7", 
                      "Store_8", "Store_9", "Tag", "Tail", "Head", "Or_op", 
                      "And_op", "Not_op", "Comma", "Complex", "Integer", 
                      "Logical", "Real", "Double_quote_string", "Simple_name", 
                      "Simple_names", "Integers", "L_paren", "R_paren", 
                      "Colon", "Equ_op", "Lt_op", "Gt_op", "Leq_op", "Geq_op", 
                      "Neq_op", "SPACE", "COMMENT", "LINE_COMMENT", "SET_VARIABLE", 
                      "Abs", "Attr_properties", "Comparison_ops", "SPACE_ATTR", 
                      "Exclude", "Include", "End_flag", "Class_name", "Any_class", 
                      "SPACE_FLAG" ]

    RULE_xplor_nih_mr = 0
    RULE_distance_restraint = 1
    RULE_dihedral_angle_restraint = 2
    RULE_rdc_restraint = 3
    RULE_planar_restraint = 4
    RULE_antidistance_restraint = 5
    RULE_coupling_restraint = 6
    RULE_carbon_shift_restraint = 7
    RULE_proton_shift_restraint = 8
    RULE_dihedral_angle_db_restraint = 9
    RULE_radius_of_gyration_restraint = 10
    RULE_diffusion_anisotropy_restraint = 11
    RULE_orientation_db_restraint = 12
    RULE_csa_restraint = 13
    RULE_pcsa_restraint = 14
    RULE_one_bond_coupling_restraint = 15
    RULE_angle_db_restraint = 16
    RULE_pre_restraint = 17
    RULE_pcs_restraint = 18
    RULE_prdc_restraint = 19
    RULE_porientation_restraint = 20
    RULE_pccr_restraint = 21
    RULE_hbond_restraint = 22
    RULE_noe_statement = 23
    RULE_noe_assign = 24
    RULE_predict_statement = 25
    RULE_noe_annotation = 26
    RULE_dihedral_statement = 27
    RULE_dihedral_assign = 28
    RULE_sani_statement = 29
    RULE_sani_assign = 30
    RULE_xdip_statement = 31
    RULE_xdip_assign = 32
    RULE_vean_statement = 33
    RULE_vean_assign = 34
    RULE_tenso_statement = 35
    RULE_tenso_assign = 36
    RULE_anis_statement = 37
    RULE_anis_assign = 38
    RULE_planar_statement = 39
    RULE_group_statement = 40
    RULE_antidistance_statement = 41
    RULE_xadc_assign = 42
    RULE_coupling_statement = 43
    RULE_coup_assign = 44
    RULE_carbon_shift_statement = 45
    RULE_carbon_shift_assign = 46
    RULE_carbon_shift_rcoil = 47
    RULE_proton_shift_statement = 48
    RULE_observed = 49
    RULE_proton_shift_rcoil = 50
    RULE_proton_shift_anisotropy = 51
    RULE_proton_shift_amides = 52
    RULE_proton_shift_carbons = 53
    RULE_proton_shift_nitrogens = 54
    RULE_proton_shift_oxygens = 55
    RULE_proton_shift_ring_atoms = 56
    RULE_proton_shift_alphas_and_amides = 57
    RULE_ramachandran_statement = 58
    RULE_rama_assign = 59
    RULE_collapse_statement = 60
    RULE_coll_assign = 61
    RULE_diffusion_statement = 62
    RULE_dani_assign = 63
    RULE_orientation_statement = 64
    RULE_orie_assign = 65
    RULE_csa_statement = 66
    RULE_csa_assign = 67
    RULE_pcsa_statement = 68
    RULE_one_bond_coupling_statement = 69
    RULE_one_bond_assign = 70
    RULE_angle_db_statement = 71
    RULE_angle_db_assign = 72
    RULE_pre_statement = 73
    RULE_pre_assign = 74
    RULE_pcs_statement = 75
    RULE_pcs_assign = 76
    RULE_prdc_statement = 77
    RULE_prdc_assign = 78
    RULE_porientation_statement = 79
    RULE_porientation_assign = 80
    RULE_pccr_statement = 81
    RULE_pccr_assign = 82
    RULE_hbond_statement = 83
    RULE_hbond_assign = 84
    RULE_selection = 85
    RULE_selection_expression = 86
    RULE_term = 87
    RULE_factor = 88
    RULE_number = 89
    RULE_number_f = 90
    RULE_number_s = 91
    RULE_number_a = 92
    RULE_flag_statement = 93

    ruleNames =  [ "xplor_nih_mr", "distance_restraint", "dihedral_angle_restraint", 
                   "rdc_restraint", "planar_restraint", "antidistance_restraint", 
                   "coupling_restraint", "carbon_shift_restraint", "proton_shift_restraint", 
                   "dihedral_angle_db_restraint", "radius_of_gyration_restraint", 
                   "diffusion_anisotropy_restraint", "orientation_db_restraint", 
                   "csa_restraint", "pcsa_restraint", "one_bond_coupling_restraint", 
                   "angle_db_restraint", "pre_restraint", "pcs_restraint", 
                   "prdc_restraint", "porientation_restraint", "pccr_restraint", 
                   "hbond_restraint", "noe_statement", "noe_assign", "predict_statement", 
                   "noe_annotation", "dihedral_statement", "dihedral_assign", 
                   "sani_statement", "sani_assign", "xdip_statement", "xdip_assign", 
                   "vean_statement", "vean_assign", "tenso_statement", "tenso_assign", 
                   "anis_statement", "anis_assign", "planar_statement", 
                   "group_statement", "antidistance_statement", "xadc_assign", 
                   "coupling_statement", "coup_assign", "carbon_shift_statement", 
                   "carbon_shift_assign", "carbon_shift_rcoil", "proton_shift_statement", 
                   "observed", "proton_shift_rcoil", "proton_shift_anisotropy", 
                   "proton_shift_amides", "proton_shift_carbons", "proton_shift_nitrogens", 
                   "proton_shift_oxygens", "proton_shift_ring_atoms", "proton_shift_alphas_and_amides", 
                   "ramachandran_statement", "rama_assign", "collapse_statement", 
                   "coll_assign", "diffusion_statement", "dani_assign", 
                   "orientation_statement", "orie_assign", "csa_statement", 
                   "csa_assign", "pcsa_statement", "one_bond_coupling_statement", 
                   "one_bond_assign", "angle_db_statement", "angle_db_assign", 
                   "pre_statement", "pre_assign", "pcs_statement", "pcs_assign", 
                   "prdc_statement", "prdc_assign", "porientation_statement", 
                   "porientation_assign", "pccr_statement", "pccr_assign", 
                   "hbond_statement", "hbond_assign", "selection", "selection_expression", 
                   "term", "factor", "number", "number_f", "number_s", "number_a", 
                   "flag_statement" ]

    EOF = Token.EOF
    Set=1
    End=2
    Noe=3
    Assign=4
    Asymptote=5
    Averaging=6
    Bhig=7
    Ceiling=8
    Classification=9
    CountViol=10
    Distribute=11
    Monomers=12
    Ncount=13
    Nrestraints=14
    Potential=15
    Predict=16
    Print=17
    Threshold=18
    Reset=19
    Rswitch=20
    Scale=21
    SoExponent=22
    SqConstant=23
    SqExponent=24
    SqOffset=25
    Temperature=26
    Noe_avr_methods=27
    Noe_potential=28
    Cutoff=29
    Cuton=30
    From=31
    To=32
    Peak=33
    Spectrum=34
    Volume=35
    Ppm1=36
    Ppm2=37
    Restraints=38
    Dihedral=39
    Nassign=40
    Sanisotropy=41
    Coefficients=42
    ForceConstant=43
    Rdc_potential=44
    Xdipolar=45
    Dipolar=46
    Type=47
    Sign=48
    Average=49
    Rdc_dist_fix_types=50
    Rdc_avr_methods=51
    VectorAngle=52
    Cv=53
    Partition=54
    Tensor=55
    Anisotropy=56
    Rdc_anis_types=57
    Planar=58
    Group=59
    Initialize=60
    Selection=61
    Weight=62
    Xadc=63
    Expectation=64
    Size=65
    Zero=66
    Coupling=67
    DegEnergy=68
    Coupling_potential=69
    Carbon=70
    PhiStep=71
    PsiStep=72
    Rcoil=73
    Proton=74
    Observed=75
    Amides=76
    Carbons=77
    Nitrogens=78
    Oxygens=79
    RingAtoms=80
    AlphasAndAmides=81
    Error=82
    Rmsd_or_Not=83
    Ramachandran=84
    Gaussian=85
    Phase=86
    Quartic=87
    Shape=88
    Sort=89
    Gauss_or_Quart=90
    Dimensions=91
    Collapse=92
    Danisotropy=93
    Diff_anis_types=94
    Orient=95
    Height=96
    MaxGaussians=97
    NewGaussian=98
    Dcsa=99
    Sigma=100
    Csa_types=101
    Pcsa=102
    OneBond=103
    AngleDb=104
    DerivFlag=105
    Angle_dihedral=106
    Paramagnetic=107
    Kconst=108
    Omega=109
    Tauc=110
    Debug=111
    Xpcs=112
    Tolerance=113
    Save=114
    Fmed=115
    ErrOn=116
    ErrOff=117
    Fon=118
    Foff=119
    Son=120
    Soff=121
    Frun=122
    Xrdcoupling=123
    Xangle=124
    Xccr=125
    Weip=126
    Hbda=127
    Flags=128
    All=129
    Around=130
    Atom=131
    Attribute=132
    BondedTo=133
    ByGroup=134
    ByRes=135
    Chemical=136
    Hydrogen=137
    Id=138
    Known=139
    Name=140
    Point=141
    Cut=142
    Previous=143
    Pseudo=144
    Residue=145
    Resname=146
    Saround=147
    SegIdentifier=148
    Store_1=149
    Store_2=150
    Store_3=151
    Store_4=152
    Store_5=153
    Store_6=154
    Store_7=155
    Store_8=156
    Store_9=157
    Tag=158
    Tail=159
    Head=160
    Or_op=161
    And_op=162
    Not_op=163
    Comma=164
    Complex=165
    Integer=166
    Logical=167
    Real=168
    Double_quote_string=169
    Simple_name=170
    Simple_names=171
    Integers=172
    L_paren=173
    R_paren=174
    Colon=175
    Equ_op=176
    Lt_op=177
    Gt_op=178
    Leq_op=179
    Geq_op=180
    Neq_op=181
    SPACE=182
    COMMENT=183
    LINE_COMMENT=184
    SET_VARIABLE=185
    Abs=186
    Attr_properties=187
    Comparison_ops=188
    SPACE_ATTR=189
    Exclude=190
    Include=191
    End_flag=192
    Class_name=193
    Any_class=194
    SPACE_FLAG=195

    def __init__(self, input:TokenStream, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.9")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None




    class Xplor_nih_mrContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EOF(self):
            return self.getToken(XplorMRParser.EOF, 0)

        def distance_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Distance_restraintContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Distance_restraintContext,i)


        def dihedral_angle_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Dihedral_angle_restraintContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Dihedral_angle_restraintContext,i)


        def rdc_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Rdc_restraintContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Rdc_restraintContext,i)


        def planar_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Planar_restraintContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Planar_restraintContext,i)


        def antidistance_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Antidistance_restraintContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Antidistance_restraintContext,i)


        def coupling_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Coupling_restraintContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Coupling_restraintContext,i)


        def carbon_shift_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Carbon_shift_restraintContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Carbon_shift_restraintContext,i)


        def proton_shift_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Proton_shift_restraintContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Proton_shift_restraintContext,i)


        def dihedral_angle_db_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Dihedral_angle_db_restraintContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Dihedral_angle_db_restraintContext,i)


        def radius_of_gyration_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Radius_of_gyration_restraintContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Radius_of_gyration_restraintContext,i)


        def diffusion_anisotropy_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Diffusion_anisotropy_restraintContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Diffusion_anisotropy_restraintContext,i)


        def orientation_db_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Orientation_db_restraintContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Orientation_db_restraintContext,i)


        def csa_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Csa_restraintContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Csa_restraintContext,i)


        def pcsa_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Pcsa_restraintContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Pcsa_restraintContext,i)


        def one_bond_coupling_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.One_bond_coupling_restraintContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.One_bond_coupling_restraintContext,i)


        def angle_db_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Angle_db_restraintContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Angle_db_restraintContext,i)


        def pre_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Pre_restraintContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Pre_restraintContext,i)


        def pcs_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Pcs_restraintContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Pcs_restraintContext,i)


        def prdc_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Prdc_restraintContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Prdc_restraintContext,i)


        def porientation_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Porientation_restraintContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Porientation_restraintContext,i)


        def pccr_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Pccr_restraintContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Pccr_restraintContext,i)


        def hbond_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Hbond_restraintContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Hbond_restraintContext,i)


        def flag_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Flag_statementContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Flag_statementContext,i)


        def noe_assign(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Noe_assignContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Noe_assignContext,i)


        def dihedral_assign(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Dihedral_assignContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Dihedral_assignContext,i)


        def sani_assign(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Sani_assignContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Sani_assignContext,i)


        def planar_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Planar_statementContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Planar_statementContext,i)


        def hbond_assign(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Hbond_assignContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Hbond_assignContext,i)


        def coup_assign(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Coup_assignContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Coup_assignContext,i)


        def xadc_assign(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Xadc_assignContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Xadc_assignContext,i)


        def coll_assign(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Coll_assignContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Coll_assignContext,i)


        def csa_assign(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Csa_assignContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Csa_assignContext,i)


        def pre_assign(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Pre_assignContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Pre_assignContext,i)


        def pcs_assign(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Pcs_assignContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Pcs_assignContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_xplor_nih_mr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterXplor_nih_mr" ):
                listener.enterXplor_nih_mr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitXplor_nih_mr" ):
                listener.exitXplor_nih_mr(self)




    def xplor_nih_mr(self):

        localctx = XplorMRParser.Xplor_nih_mrContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_xplor_nih_mr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 224
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << XplorMRParser.Noe) | (1 << XplorMRParser.Assign) | (1 << XplorMRParser.Restraints) | (1 << XplorMRParser.Sanisotropy) | (1 << XplorMRParser.Xdipolar) | (1 << XplorMRParser.Dipolar) | (1 << XplorMRParser.VectorAngle) | (1 << XplorMRParser.Tensor) | (1 << XplorMRParser.Anisotropy) | (1 << XplorMRParser.Group) | (1 << XplorMRParser.Initialize) | (1 << XplorMRParser.Xadc))) != 0) or ((((_la - 67)) & ~0x3f) == 0 and ((1 << (_la - 67)) & ((1 << (XplorMRParser.Coupling - 67)) | (1 << (XplorMRParser.Carbon - 67)) | (1 << (XplorMRParser.Proton - 67)) | (1 << (XplorMRParser.Ramachandran - 67)) | (1 << (XplorMRParser.Collapse - 67)) | (1 << (XplorMRParser.Danisotropy - 67)) | (1 << (XplorMRParser.Orient - 67)) | (1 << (XplorMRParser.Dcsa - 67)) | (1 << (XplorMRParser.Pcsa - 67)) | (1 << (XplorMRParser.OneBond - 67)) | (1 << (XplorMRParser.AngleDb - 67)) | (1 << (XplorMRParser.Paramagnetic - 67)) | (1 << (XplorMRParser.Xpcs - 67)) | (1 << (XplorMRParser.Xrdcoupling - 67)) | (1 << (XplorMRParser.Xangle - 67)) | (1 << (XplorMRParser.Xccr - 67)) | (1 << (XplorMRParser.Hbda - 67)) | (1 << (XplorMRParser.Flags - 67)))) != 0):
                self.state = 222
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,0,self._ctx)
                if la_ == 1:
                    self.state = 188
                    self.distance_restraint()
                    pass

                elif la_ == 2:
                    self.state = 189
                    self.dihedral_angle_restraint()
                    pass

                elif la_ == 3:
                    self.state = 190
                    self.rdc_restraint()
                    pass

                elif la_ == 4:
                    self.state = 191
                    self.planar_restraint()
                    pass

                elif la_ == 5:
                    self.state = 192
                    self.antidistance_restraint()
                    pass

                elif la_ == 6:
                    self.state = 193
                    self.coupling_restraint()
                    pass

                elif la_ == 7:
                    self.state = 194
                    self.carbon_shift_restraint()
                    pass

                elif la_ == 8:
                    self.state = 195
                    self.proton_shift_restraint()
                    pass

                elif la_ == 9:
                    self.state = 196
                    self.dihedral_angle_db_restraint()
                    pass

                elif la_ == 10:
                    self.state = 197
                    self.radius_of_gyration_restraint()
                    pass

                elif la_ == 11:
                    self.state = 198
                    self.diffusion_anisotropy_restraint()
                    pass

                elif la_ == 12:
                    self.state = 199
                    self.orientation_db_restraint()
                    pass

                elif la_ == 13:
                    self.state = 200
                    self.csa_restraint()
                    pass

                elif la_ == 14:
                    self.state = 201
                    self.pcsa_restraint()
                    pass

                elif la_ == 15:
                    self.state = 202
                    self.one_bond_coupling_restraint()
                    pass

                elif la_ == 16:
                    self.state = 203
                    self.angle_db_restraint()
                    pass

                elif la_ == 17:
                    self.state = 204
                    self.pre_restraint()
                    pass

                elif la_ == 18:
                    self.state = 205
                    self.pcs_restraint()
                    pass

                elif la_ == 19:
                    self.state = 206
                    self.prdc_restraint()
                    pass

                elif la_ == 20:
                    self.state = 207
                    self.porientation_restraint()
                    pass

                elif la_ == 21:
                    self.state = 208
                    self.pccr_restraint()
                    pass

                elif la_ == 22:
                    self.state = 209
                    self.hbond_restraint()
                    pass

                elif la_ == 23:
                    self.state = 210
                    self.flag_statement()
                    pass

                elif la_ == 24:
                    self.state = 211
                    self.noe_assign()
                    pass

                elif la_ == 25:
                    self.state = 212
                    self.dihedral_assign()
                    pass

                elif la_ == 26:
                    self.state = 213
                    self.sani_assign()
                    pass

                elif la_ == 27:
                    self.state = 214
                    self.planar_statement()
                    pass

                elif la_ == 28:
                    self.state = 215
                    self.hbond_assign()
                    pass

                elif la_ == 29:
                    self.state = 216
                    self.coup_assign()
                    pass

                elif la_ == 30:
                    self.state = 217
                    self.xadc_assign()
                    pass

                elif la_ == 31:
                    self.state = 218
                    self.coll_assign()
                    pass

                elif la_ == 32:
                    self.state = 219
                    self.csa_assign()
                    pass

                elif la_ == 33:
                    self.state = 220
                    self.pre_assign()
                    pass

                elif la_ == 34:
                    self.state = 221
                    self.pcs_assign()
                    pass


                self.state = 226
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 227
            self.match(XplorMRParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Distance_restraintContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Noe(self):
            return self.getToken(XplorMRParser.Noe, 0)

        def End(self):
            return self.getToken(XplorMRParser.End, 0)

        def noe_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Noe_statementContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Noe_statementContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_distance_restraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDistance_restraint" ):
                listener.enterDistance_restraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDistance_restraint" ):
                listener.exitDistance_restraint(self)




    def distance_restraint(self):

        localctx = XplorMRParser.Distance_restraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_distance_restraint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 229
            self.match(XplorMRParser.Noe)
            self.state = 233
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << XplorMRParser.Assign) | (1 << XplorMRParser.Asymptote) | (1 << XplorMRParser.Averaging) | (1 << XplorMRParser.Bhig) | (1 << XplorMRParser.Ceiling) | (1 << XplorMRParser.Classification) | (1 << XplorMRParser.CountViol) | (1 << XplorMRParser.Distribute) | (1 << XplorMRParser.Monomers) | (1 << XplorMRParser.Ncount) | (1 << XplorMRParser.Nrestraints) | (1 << XplorMRParser.Potential) | (1 << XplorMRParser.Predict) | (1 << XplorMRParser.Print) | (1 << XplorMRParser.Reset) | (1 << XplorMRParser.Rswitch) | (1 << XplorMRParser.Scale) | (1 << XplorMRParser.SoExponent) | (1 << XplorMRParser.SqConstant) | (1 << XplorMRParser.SqExponent) | (1 << XplorMRParser.SqOffset) | (1 << XplorMRParser.Temperature))) != 0):
                self.state = 230
                self.noe_statement()
                self.state = 235
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 236
            self.match(XplorMRParser.End)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Dihedral_angle_restraintContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Restraints(self):
            return self.getToken(XplorMRParser.Restraints, 0)

        def Dihedral(self):
            return self.getToken(XplorMRParser.Dihedral, 0)

        def End(self):
            return self.getToken(XplorMRParser.End, 0)

        def dihedral_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Dihedral_statementContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Dihedral_statementContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_dihedral_angle_restraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDihedral_angle_restraint" ):
                listener.enterDihedral_angle_restraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDihedral_angle_restraint" ):
                listener.exitDihedral_angle_restraint(self)




    def dihedral_angle_restraint(self):

        localctx = XplorMRParser.Dihedral_angle_restraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_dihedral_angle_restraint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 238
            self.match(XplorMRParser.Restraints)
            self.state = 239
            self.match(XplorMRParser.Dihedral)
            self.state = 243
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << XplorMRParser.Assign) | (1 << XplorMRParser.Reset) | (1 << XplorMRParser.Scale) | (1 << XplorMRParser.Nassign))) != 0):
                self.state = 240
                self.dihedral_statement()
                self.state = 245
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 246
            self.match(XplorMRParser.End)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Rdc_restraintContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Sanisotropy(self):
            return self.getToken(XplorMRParser.Sanisotropy, 0)

        def End(self):
            return self.getToken(XplorMRParser.End, 0)

        def sani_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Sani_statementContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Sani_statementContext,i)


        def Xdipolar(self):
            return self.getToken(XplorMRParser.Xdipolar, 0)

        def Dipolar(self):
            return self.getToken(XplorMRParser.Dipolar, 0)

        def xdip_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Xdip_statementContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Xdip_statementContext,i)


        def VectorAngle(self):
            return self.getToken(XplorMRParser.VectorAngle, 0)

        def vean_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Vean_statementContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Vean_statementContext,i)


        def Tensor(self):
            return self.getToken(XplorMRParser.Tensor, 0)

        def tenso_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Tenso_statementContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Tenso_statementContext,i)


        def Anisotropy(self):
            return self.getToken(XplorMRParser.Anisotropy, 0)

        def anis_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Anis_statementContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Anis_statementContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_rdc_restraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRdc_restraint" ):
                listener.enterRdc_restraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRdc_restraint" ):
                listener.exitRdc_restraint(self)




    def rdc_restraint(self):

        localctx = XplorMRParser.Rdc_restraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_rdc_restraint)
        self._la = 0 # Token type
        try:
            self.state = 288
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [XplorMRParser.Sanisotropy]:
                self.enterOuterAlt(localctx, 1)
                self.state = 248
                self.match(XplorMRParser.Sanisotropy)
                self.state = 252
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << XplorMRParser.Assign) | (1 << XplorMRParser.Classification) | (1 << XplorMRParser.Nrestraints) | (1 << XplorMRParser.Potential) | (1 << XplorMRParser.Print) | (1 << XplorMRParser.Reset) | (1 << XplorMRParser.Coefficients) | (1 << XplorMRParser.ForceConstant))) != 0):
                    self.state = 249
                    self.sani_statement()
                    self.state = 254
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 255
                self.match(XplorMRParser.End)
                pass
            elif token in [XplorMRParser.Xdipolar, XplorMRParser.Dipolar]:
                self.enterOuterAlt(localctx, 2)
                self.state = 256
                _la = self._input.LA(1)
                if not(_la==XplorMRParser.Xdipolar or _la==XplorMRParser.Dipolar):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 260
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << XplorMRParser.Assign) | (1 << XplorMRParser.Classification) | (1 << XplorMRParser.Nrestraints) | (1 << XplorMRParser.Potential) | (1 << XplorMRParser.Print) | (1 << XplorMRParser.Reset) | (1 << XplorMRParser.Scale) | (1 << XplorMRParser.Coefficients) | (1 << XplorMRParser.ForceConstant) | (1 << XplorMRParser.Type) | (1 << XplorMRParser.Sign) | (1 << XplorMRParser.Average))) != 0):
                    self.state = 257
                    self.xdip_statement()
                    self.state = 262
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 263
                self.match(XplorMRParser.End)
                pass
            elif token in [XplorMRParser.VectorAngle]:
                self.enterOuterAlt(localctx, 3)
                self.state = 264
                self.match(XplorMRParser.VectorAngle)
                self.state = 268
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << XplorMRParser.Assign) | (1 << XplorMRParser.Classification) | (1 << XplorMRParser.Nrestraints) | (1 << XplorMRParser.Print) | (1 << XplorMRParser.Reset) | (1 << XplorMRParser.ForceConstant) | (1 << XplorMRParser.Cv) | (1 << XplorMRParser.Partition))) != 0):
                    self.state = 265
                    self.vean_statement()
                    self.state = 270
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 271
                self.match(XplorMRParser.End)
                pass
            elif token in [XplorMRParser.Tensor]:
                self.enterOuterAlt(localctx, 4)
                self.state = 272
                self.match(XplorMRParser.Tensor)
                self.state = 276
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << XplorMRParser.Assign) | (1 << XplorMRParser.Classification) | (1 << XplorMRParser.Nrestraints) | (1 << XplorMRParser.Potential) | (1 << XplorMRParser.Print) | (1 << XplorMRParser.Reset) | (1 << XplorMRParser.Coefficients))) != 0):
                    self.state = 273
                    self.tenso_statement()
                    self.state = 278
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 279
                self.match(XplorMRParser.End)
                pass
            elif token in [XplorMRParser.Anisotropy]:
                self.enterOuterAlt(localctx, 5)
                self.state = 280
                self.match(XplorMRParser.Anisotropy)
                self.state = 284
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << XplorMRParser.Assign) | (1 << XplorMRParser.Classification) | (1 << XplorMRParser.Nrestraints) | (1 << XplorMRParser.Potential) | (1 << XplorMRParser.Print) | (1 << XplorMRParser.Reset) | (1 << XplorMRParser.Coefficients) | (1 << XplorMRParser.ForceConstant) | (1 << XplorMRParser.Type))) != 0):
                    self.state = 281
                    self.anis_statement()
                    self.state = 286
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 287
                self.match(XplorMRParser.End)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Planar_restraintContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Restraints(self):
            return self.getToken(XplorMRParser.Restraints, 0)

        def Planar(self):
            return self.getToken(XplorMRParser.Planar, 0)

        def End(self):
            return self.getToken(XplorMRParser.End, 0)

        def planar_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Planar_statementContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Planar_statementContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_planar_restraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPlanar_restraint" ):
                listener.enterPlanar_restraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPlanar_restraint" ):
                listener.exitPlanar_restraint(self)




    def planar_restraint(self):

        localctx = XplorMRParser.Planar_restraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_planar_restraint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 290
            self.match(XplorMRParser.Restraints)
            self.state = 291
            self.match(XplorMRParser.Planar)
            self.state = 295
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==XplorMRParser.Group or _la==XplorMRParser.Initialize:
                self.state = 292
                self.planar_statement()
                self.state = 297
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 298
            self.match(XplorMRParser.End)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Antidistance_restraintContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Xadc(self):
            return self.getToken(XplorMRParser.Xadc, 0)

        def End(self):
            return self.getToken(XplorMRParser.End, 0)

        def antidistance_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Antidistance_statementContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Antidistance_statementContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_antidistance_restraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAntidistance_restraint" ):
                listener.enterAntidistance_restraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAntidistance_restraint" ):
                listener.exitAntidistance_restraint(self)




    def antidistance_restraint(self):

        localctx = XplorMRParser.Antidistance_restraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_antidistance_restraint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 300
            self.match(XplorMRParser.Xadc)
            self.state = 304
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((((_la - 4)) & ~0x3f) == 0 and ((1 << (_la - 4)) & ((1 << (XplorMRParser.Assign - 4)) | (1 << (XplorMRParser.Classification - 4)) | (1 << (XplorMRParser.Nrestraints - 4)) | (1 << (XplorMRParser.Print - 4)) | (1 << (XplorMRParser.Reset - 4)) | (1 << (XplorMRParser.ForceConstant - 4)) | (1 << (XplorMRParser.Expectation - 4)) | (1 << (XplorMRParser.Size - 4)) | (1 << (XplorMRParser.Zero - 4)))) != 0):
                self.state = 301
                self.antidistance_statement()
                self.state = 306
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 307
            self.match(XplorMRParser.End)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Coupling_restraintContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Coupling(self):
            return self.getToken(XplorMRParser.Coupling, 0)

        def End(self):
            return self.getToken(XplorMRParser.End, 0)

        def coupling_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Coupling_statementContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Coupling_statementContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_coupling_restraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCoupling_restraint" ):
                listener.enterCoupling_restraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCoupling_restraint" ):
                listener.exitCoupling_restraint(self)




    def coupling_restraint(self):

        localctx = XplorMRParser.Coupling_restraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_coupling_restraint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 309
            self.match(XplorMRParser.Coupling)
            self.state = 313
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << XplorMRParser.Assign) | (1 << XplorMRParser.Classification) | (1 << XplorMRParser.Nrestraints) | (1 << XplorMRParser.Potential) | (1 << XplorMRParser.Print) | (1 << XplorMRParser.Reset) | (1 << XplorMRParser.Coefficients) | (1 << XplorMRParser.ForceConstant) | (1 << XplorMRParser.Cv) | (1 << XplorMRParser.Partition))) != 0) or _la==XplorMRParser.DegEnergy:
                self.state = 310
                self.coupling_statement()
                self.state = 315
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 316
            self.match(XplorMRParser.End)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Carbon_shift_restraintContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Carbon(self):
            return self.getToken(XplorMRParser.Carbon, 0)

        def End(self):
            return self.getToken(XplorMRParser.End, 0)

        def carbon_shift_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Carbon_shift_statementContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Carbon_shift_statementContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_carbon_shift_restraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCarbon_shift_restraint" ):
                listener.enterCarbon_shift_restraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCarbon_shift_restraint" ):
                listener.exitCarbon_shift_restraint(self)




    def carbon_shift_restraint(self):

        localctx = XplorMRParser.Carbon_shift_restraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_carbon_shift_restraint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 318
            self.match(XplorMRParser.Carbon)
            self.state = 322
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << XplorMRParser.Assign) | (1 << XplorMRParser.Classification) | (1 << XplorMRParser.Nrestraints) | (1 << XplorMRParser.Potential) | (1 << XplorMRParser.Print) | (1 << XplorMRParser.Reset) | (1 << XplorMRParser.ForceConstant))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (XplorMRParser.Expectation - 64)) | (1 << (XplorMRParser.Zero - 64)) | (1 << (XplorMRParser.PhiStep - 64)) | (1 << (XplorMRParser.PsiStep - 64)) | (1 << (XplorMRParser.Rcoil - 64)))) != 0):
                self.state = 319
                self.carbon_shift_statement()
                self.state = 324
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 325
            self.match(XplorMRParser.End)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Proton_shift_restraintContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Proton(self):
            return self.getToken(XplorMRParser.Proton, 0)

        def End(self):
            return self.getToken(XplorMRParser.End, 0)

        def proton_shift_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Proton_shift_statementContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Proton_shift_statementContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_proton_shift_restraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProton_shift_restraint" ):
                listener.enterProton_shift_restraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProton_shift_restraint" ):
                listener.exitProton_shift_restraint(self)




    def proton_shift_restraint(self):

        localctx = XplorMRParser.Proton_shift_restraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_proton_shift_restraint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 327
            self.match(XplorMRParser.Proton)
            self.state = 331
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << XplorMRParser.Classification) | (1 << XplorMRParser.Potential) | (1 << XplorMRParser.Print) | (1 << XplorMRParser.Reset) | (1 << XplorMRParser.ForceConstant) | (1 << XplorMRParser.Anisotropy))) != 0) or ((((_la - 68)) & ~0x3f) == 0 and ((1 << (_la - 68)) & ((1 << (XplorMRParser.DegEnergy - 68)) | (1 << (XplorMRParser.Rcoil - 68)) | (1 << (XplorMRParser.Observed - 68)) | (1 << (XplorMRParser.Amides - 68)) | (1 << (XplorMRParser.Carbons - 68)) | (1 << (XplorMRParser.Nitrogens - 68)) | (1 << (XplorMRParser.Oxygens - 68)) | (1 << (XplorMRParser.RingAtoms - 68)) | (1 << (XplorMRParser.AlphasAndAmides - 68)) | (1 << (XplorMRParser.Error - 68)))) != 0):
                self.state = 328
                self.proton_shift_statement()
                self.state = 333
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 334
            self.match(XplorMRParser.End)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Dihedral_angle_db_restraintContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Ramachandran(self):
            return self.getToken(XplorMRParser.Ramachandran, 0)

        def End(self):
            return self.getToken(XplorMRParser.End, 0)

        def ramachandran_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Ramachandran_statementContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Ramachandran_statementContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_dihedral_angle_db_restraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDihedral_angle_db_restraint" ):
                listener.enterDihedral_angle_db_restraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDihedral_angle_db_restraint" ):
                listener.exitDihedral_angle_db_restraint(self)




    def dihedral_angle_db_restraint(self):

        localctx = XplorMRParser.Dihedral_angle_db_restraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_dihedral_angle_db_restraint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 336
            self.match(XplorMRParser.Ramachandran)
            self.state = 340
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << XplorMRParser.Assign) | (1 << XplorMRParser.Classification) | (1 << XplorMRParser.Nrestraints) | (1 << XplorMRParser.Print) | (1 << XplorMRParser.Reset) | (1 << XplorMRParser.Scale) | (1 << XplorMRParser.Cutoff) | (1 << XplorMRParser.ForceConstant))) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & ((1 << (XplorMRParser.Size - 65)) | (1 << (XplorMRParser.Zero - 65)) | (1 << (XplorMRParser.Gaussian - 65)) | (1 << (XplorMRParser.Phase - 65)) | (1 << (XplorMRParser.Quartic - 65)) | (1 << (XplorMRParser.Shape - 65)) | (1 << (XplorMRParser.Sort - 65)))) != 0):
                self.state = 337
                self.ramachandran_statement()
                self.state = 342
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 343
            self.match(XplorMRParser.End)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Radius_of_gyration_restraintContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Collapse(self):
            return self.getToken(XplorMRParser.Collapse, 0)

        def End(self):
            return self.getToken(XplorMRParser.End, 0)

        def collapse_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Collapse_statementContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Collapse_statementContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_radius_of_gyration_restraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRadius_of_gyration_restraint" ):
                listener.enterRadius_of_gyration_restraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRadius_of_gyration_restraint" ):
                listener.exitRadius_of_gyration_restraint(self)




    def radius_of_gyration_restraint(self):

        localctx = XplorMRParser.Radius_of_gyration_restraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_radius_of_gyration_restraint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 345
            self.match(XplorMRParser.Collapse)
            self.state = 349
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << XplorMRParser.Assign) | (1 << XplorMRParser.Print) | (1 << XplorMRParser.Reset) | (1 << XplorMRParser.Scale))) != 0):
                self.state = 346
                self.collapse_statement()
                self.state = 351
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 352
            self.match(XplorMRParser.End)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Diffusion_anisotropy_restraintContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Danisotropy(self):
            return self.getToken(XplorMRParser.Danisotropy, 0)

        def End(self):
            return self.getToken(XplorMRParser.End, 0)

        def diffusion_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Diffusion_statementContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Diffusion_statementContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_diffusion_anisotropy_restraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDiffusion_anisotropy_restraint" ):
                listener.enterDiffusion_anisotropy_restraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDiffusion_anisotropy_restraint" ):
                listener.exitDiffusion_anisotropy_restraint(self)




    def diffusion_anisotropy_restraint(self):

        localctx = XplorMRParser.Diffusion_anisotropy_restraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_diffusion_anisotropy_restraint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 354
            self.match(XplorMRParser.Danisotropy)
            self.state = 358
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << XplorMRParser.Assign) | (1 << XplorMRParser.Classification) | (1 << XplorMRParser.Nrestraints) | (1 << XplorMRParser.Potential) | (1 << XplorMRParser.Print) | (1 << XplorMRParser.Reset) | (1 << XplorMRParser.Coefficients) | (1 << XplorMRParser.ForceConstant) | (1 << XplorMRParser.Type))) != 0):
                self.state = 355
                self.diffusion_statement()
                self.state = 360
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 361
            self.match(XplorMRParser.End)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Orientation_db_restraintContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Orient(self):
            return self.getToken(XplorMRParser.Orient, 0)

        def End(self):
            return self.getToken(XplorMRParser.End, 0)

        def orientation_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Orientation_statementContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Orientation_statementContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_orientation_db_restraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOrientation_db_restraint" ):
                listener.enterOrientation_db_restraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOrientation_db_restraint" ):
                listener.exitOrientation_db_restraint(self)




    def orientation_db_restraint(self):

        localctx = XplorMRParser.Orientation_db_restraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_orientation_db_restraint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 363
            self.match(XplorMRParser.Orient)
            self.state = 367
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((((_la - 4)) & ~0x3f) == 0 and ((1 << (_la - 4)) & ((1 << (XplorMRParser.Assign - 4)) | (1 << (XplorMRParser.Classification - 4)) | (1 << (XplorMRParser.Nrestraints - 4)) | (1 << (XplorMRParser.Print - 4)) | (1 << (XplorMRParser.Reset - 4)) | (1 << (XplorMRParser.Cutoff - 4)) | (1 << (XplorMRParser.ForceConstant - 4)) | (1 << (XplorMRParser.Size - 4)) | (1 << (XplorMRParser.Zero - 4)))) != 0) or ((((_la - 85)) & ~0x3f) == 0 and ((1 << (_la - 85)) & ((1 << (XplorMRParser.Gaussian - 85)) | (1 << (XplorMRParser.Quartic - 85)) | (1 << (XplorMRParser.Height - 85)) | (1 << (XplorMRParser.MaxGaussians - 85)) | (1 << (XplorMRParser.NewGaussian - 85)) | (1 << (XplorMRParser.Residue - 85)))) != 0):
                self.state = 364
                self.orientation_statement()
                self.state = 369
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 370
            self.match(XplorMRParser.End)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Csa_restraintContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Dcsa(self):
            return self.getToken(XplorMRParser.Dcsa, 0)

        def End(self):
            return self.getToken(XplorMRParser.End, 0)

        def csa_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Csa_statementContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Csa_statementContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_csa_restraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCsa_restraint" ):
                listener.enterCsa_restraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCsa_restraint" ):
                listener.exitCsa_restraint(self)




    def csa_restraint(self):

        localctx = XplorMRParser.Csa_restraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_csa_restraint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 372
            self.match(XplorMRParser.Dcsa)
            self.state = 376
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << XplorMRParser.Assign) | (1 << XplorMRParser.Classification) | (1 << XplorMRParser.Nrestraints) | (1 << XplorMRParser.Potential) | (1 << XplorMRParser.Print) | (1 << XplorMRParser.Reset) | (1 << XplorMRParser.Scale) | (1 << XplorMRParser.Coefficients) | (1 << XplorMRParser.ForceConstant) | (1 << XplorMRParser.Type))) != 0) or _la==XplorMRParser.Sigma:
                self.state = 373
                self.csa_statement()
                self.state = 378
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 379
            self.match(XplorMRParser.End)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pcsa_restraintContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Pcsa(self):
            return self.getToken(XplorMRParser.Pcsa, 0)

        def End(self):
            return self.getToken(XplorMRParser.End, 0)

        def pcsa_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Pcsa_statementContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Pcsa_statementContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_pcsa_restraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPcsa_restraint" ):
                listener.enterPcsa_restraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPcsa_restraint" ):
                listener.exitPcsa_restraint(self)




    def pcsa_restraint(self):

        localctx = XplorMRParser.Pcsa_restraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_pcsa_restraint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 381
            self.match(XplorMRParser.Pcsa)
            self.state = 385
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << XplorMRParser.Assign) | (1 << XplorMRParser.Classification) | (1 << XplorMRParser.Nrestraints) | (1 << XplorMRParser.Potential) | (1 << XplorMRParser.Print) | (1 << XplorMRParser.Reset) | (1 << XplorMRParser.Scale) | (1 << XplorMRParser.Coefficients) | (1 << XplorMRParser.ForceConstant))) != 0) or _la==XplorMRParser.Sigma:
                self.state = 382
                self.pcsa_statement()
                self.state = 387
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 388
            self.match(XplorMRParser.End)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class One_bond_coupling_restraintContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OneBond(self):
            return self.getToken(XplorMRParser.OneBond, 0)

        def End(self):
            return self.getToken(XplorMRParser.End, 0)

        def one_bond_coupling_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.One_bond_coupling_statementContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.One_bond_coupling_statementContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_one_bond_coupling_restraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOne_bond_coupling_restraint" ):
                listener.enterOne_bond_coupling_restraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOne_bond_coupling_restraint" ):
                listener.exitOne_bond_coupling_restraint(self)




    def one_bond_coupling_restraint(self):

        localctx = XplorMRParser.One_bond_coupling_restraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_one_bond_coupling_restraint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 390
            self.match(XplorMRParser.OneBond)
            self.state = 394
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << XplorMRParser.Assign) | (1 << XplorMRParser.Classification) | (1 << XplorMRParser.Nrestraints) | (1 << XplorMRParser.Potential) | (1 << XplorMRParser.Print) | (1 << XplorMRParser.Reset) | (1 << XplorMRParser.Coefficients) | (1 << XplorMRParser.ForceConstant))) != 0):
                self.state = 391
                self.one_bond_coupling_statement()
                self.state = 396
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 397
            self.match(XplorMRParser.End)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Angle_db_restraintContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AngleDb(self):
            return self.getToken(XplorMRParser.AngleDb, 0)

        def End(self):
            return self.getToken(XplorMRParser.End, 0)

        def angle_db_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Angle_db_statementContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Angle_db_statementContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_angle_db_restraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAngle_db_restraint" ):
                listener.enterAngle_db_restraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAngle_db_restraint" ):
                listener.exitAngle_db_restraint(self)




    def angle_db_restraint(self):

        localctx = XplorMRParser.Angle_db_restraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_angle_db_restraint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 399
            self.match(XplorMRParser.AngleDb)
            self.state = 403
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << XplorMRParser.Assign) | (1 << XplorMRParser.Classification) | (1 << XplorMRParser.Nrestraints) | (1 << XplorMRParser.Potential) | (1 << XplorMRParser.Print) | (1 << XplorMRParser.Reset) | (1 << XplorMRParser.ForceConstant))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (XplorMRParser.Expectation - 64)) | (1 << (XplorMRParser.Size - 64)) | (1 << (XplorMRParser.Zero - 64)) | (1 << (XplorMRParser.Error - 64)) | (1 << (XplorMRParser.DerivFlag - 64)))) != 0):
                self.state = 400
                self.angle_db_statement()
                self.state = 405
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 406
            self.match(XplorMRParser.End)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pre_restraintContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Paramagnetic(self):
            return self.getToken(XplorMRParser.Paramagnetic, 0)

        def End(self):
            return self.getToken(XplorMRParser.End, 0)

        def pre_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Pre_statementContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Pre_statementContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_pre_restraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPre_restraint" ):
                listener.enterPre_restraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPre_restraint" ):
                listener.exitPre_restraint(self)




    def pre_restraint(self):

        localctx = XplorMRParser.Pre_restraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_pre_restraint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 408
            self.match(XplorMRParser.Paramagnetic)
            self.state = 412
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << XplorMRParser.Assign) | (1 << XplorMRParser.Classification) | (1 << XplorMRParser.Nrestraints) | (1 << XplorMRParser.Potential) | (1 << XplorMRParser.Print) | (1 << XplorMRParser.Reset) | (1 << XplorMRParser.ForceConstant))) != 0) or ((((_la - 108)) & ~0x3f) == 0 and ((1 << (_la - 108)) & ((1 << (XplorMRParser.Kconst - 108)) | (1 << (XplorMRParser.Omega - 108)) | (1 << (XplorMRParser.Tauc - 108)) | (1 << (XplorMRParser.Debug - 108)))) != 0):
                self.state = 409
                self.pre_statement()
                self.state = 414
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 415
            self.match(XplorMRParser.End)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pcs_restraintContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Xpcs(self):
            return self.getToken(XplorMRParser.Xpcs, 0)

        def End(self):
            return self.getToken(XplorMRParser.End, 0)

        def pcs_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Pcs_statementContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Pcs_statementContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_pcs_restraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPcs_restraint" ):
                listener.enterPcs_restraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPcs_restraint" ):
                listener.exitPcs_restraint(self)




    def pcs_restraint(self):

        localctx = XplorMRParser.Pcs_restraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_pcs_restraint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 417
            self.match(XplorMRParser.Xpcs)
            self.state = 421
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << XplorMRParser.Assign) | (1 << XplorMRParser.Classification) | (1 << XplorMRParser.Nrestraints) | (1 << XplorMRParser.Print) | (1 << XplorMRParser.Reset) | (1 << XplorMRParser.Coefficients) | (1 << XplorMRParser.ForceConstant))) != 0) or ((((_la - 113)) & ~0x3f) == 0 and ((1 << (_la - 113)) & ((1 << (XplorMRParser.Tolerance - 113)) | (1 << (XplorMRParser.Save - 113)) | (1 << (XplorMRParser.Fmed - 113)) | (1 << (XplorMRParser.ErrOn - 113)) | (1 << (XplorMRParser.ErrOff - 113)) | (1 << (XplorMRParser.Fon - 113)) | (1 << (XplorMRParser.Foff - 113)) | (1 << (XplorMRParser.Son - 113)) | (1 << (XplorMRParser.Soff - 113)) | (1 << (XplorMRParser.Frun - 113)))) != 0):
                self.state = 418
                self.pcs_statement()
                self.state = 423
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 424
            self.match(XplorMRParser.End)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Prdc_restraintContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Xrdcoupling(self):
            return self.getToken(XplorMRParser.Xrdcoupling, 0)

        def End(self):
            return self.getToken(XplorMRParser.End, 0)

        def prdc_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Prdc_statementContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Prdc_statementContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_prdc_restraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrdc_restraint" ):
                listener.enterPrdc_restraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrdc_restraint" ):
                listener.exitPrdc_restraint(self)




    def prdc_restraint(self):

        localctx = XplorMRParser.Prdc_restraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_prdc_restraint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 426
            self.match(XplorMRParser.Xrdcoupling)
            self.state = 430
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << XplorMRParser.Assign) | (1 << XplorMRParser.Classification) | (1 << XplorMRParser.Nrestraints) | (1 << XplorMRParser.Print) | (1 << XplorMRParser.Reset) | (1 << XplorMRParser.Coefficients) | (1 << XplorMRParser.ForceConstant))) != 0) or ((((_la - 113)) & ~0x3f) == 0 and ((1 << (_la - 113)) & ((1 << (XplorMRParser.Tolerance - 113)) | (1 << (XplorMRParser.Save - 113)) | (1 << (XplorMRParser.Fmed - 113)) | (1 << (XplorMRParser.ErrOn - 113)) | (1 << (XplorMRParser.ErrOff - 113)) | (1 << (XplorMRParser.Fon - 113)) | (1 << (XplorMRParser.Foff - 113)) | (1 << (XplorMRParser.Son - 113)) | (1 << (XplorMRParser.Soff - 113)) | (1 << (XplorMRParser.Frun - 113)))) != 0):
                self.state = 427
                self.prdc_statement()
                self.state = 432
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 433
            self.match(XplorMRParser.End)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Porientation_restraintContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Xangle(self):
            return self.getToken(XplorMRParser.Xangle, 0)

        def End(self):
            return self.getToken(XplorMRParser.End, 0)

        def porientation_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Porientation_statementContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Porientation_statementContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_porientation_restraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPorientation_restraint" ):
                listener.enterPorientation_restraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPorientation_restraint" ):
                listener.exitPorientation_restraint(self)




    def porientation_restraint(self):

        localctx = XplorMRParser.Porientation_restraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_porientation_restraint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 435
            self.match(XplorMRParser.Xangle)
            self.state = 439
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << XplorMRParser.Assign) | (1 << XplorMRParser.Classification) | (1 << XplorMRParser.Nrestraints) | (1 << XplorMRParser.Print) | (1 << XplorMRParser.Reset) | (1 << XplorMRParser.ForceConstant))) != 0):
                self.state = 436
                self.porientation_statement()
                self.state = 441
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 442
            self.match(XplorMRParser.End)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pccr_restraintContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Xccr(self):
            return self.getToken(XplorMRParser.Xccr, 0)

        def End(self):
            return self.getToken(XplorMRParser.End, 0)

        def pccr_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Pccr_statementContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Pccr_statementContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_pccr_restraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPccr_restraint" ):
                listener.enterPccr_restraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPccr_restraint" ):
                listener.exitPccr_restraint(self)




    def pccr_restraint(self):

        localctx = XplorMRParser.Pccr_restraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_pccr_restraint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 444
            self.match(XplorMRParser.Xccr)
            self.state = 448
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << XplorMRParser.Assign) | (1 << XplorMRParser.Classification) | (1 << XplorMRParser.Nrestraints) | (1 << XplorMRParser.Print) | (1 << XplorMRParser.Reset) | (1 << XplorMRParser.Coefficients) | (1 << XplorMRParser.ForceConstant))) != 0) or _la==XplorMRParser.Frun or _la==XplorMRParser.Weip:
                self.state = 445
                self.pccr_statement()
                self.state = 450
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 451
            self.match(XplorMRParser.End)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Hbond_restraintContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Hbda(self):
            return self.getToken(XplorMRParser.Hbda, 0)

        def End(self):
            return self.getToken(XplorMRParser.End, 0)

        def hbond_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Hbond_statementContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Hbond_statementContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_hbond_restraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHbond_restraint" ):
                listener.enterHbond_restraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHbond_restraint" ):
                listener.exitHbond_restraint(self)




    def hbond_restraint(self):

        localctx = XplorMRParser.Hbond_restraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_hbond_restraint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 453
            self.match(XplorMRParser.Hbda)
            self.state = 457
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << XplorMRParser.Assign) | (1 << XplorMRParser.Classification) | (1 << XplorMRParser.Nrestraints) | (1 << XplorMRParser.Print) | (1 << XplorMRParser.Reset) | (1 << XplorMRParser.ForceConstant))) != 0):
                self.state = 454
                self.hbond_statement()
                self.state = 459
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 460
            self.match(XplorMRParser.End)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Noe_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def noe_assign(self):
            return self.getTypedRuleContext(XplorMRParser.Noe_assignContext,0)


        def Asymptote(self):
            return self.getToken(XplorMRParser.Asymptote, 0)

        def Simple_name(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Simple_name)
            else:
                return self.getToken(XplorMRParser.Simple_name, i)

        def number_s(self):
            return self.getTypedRuleContext(XplorMRParser.Number_sContext,0)


        def Averaging(self):
            return self.getToken(XplorMRParser.Averaging, 0)

        def Noe_avr_methods(self):
            return self.getToken(XplorMRParser.Noe_avr_methods, 0)

        def Bhig(self):
            return self.getToken(XplorMRParser.Bhig, 0)

        def Ceiling(self):
            return self.getToken(XplorMRParser.Ceiling, 0)

        def Equ_op(self):
            return self.getToken(XplorMRParser.Equ_op, 0)

        def Classification(self):
            return self.getToken(XplorMRParser.Classification, 0)

        def CountViol(self):
            return self.getToken(XplorMRParser.CountViol, 0)

        def Distribute(self):
            return self.getToken(XplorMRParser.Distribute, 0)

        def Monomers(self):
            return self.getToken(XplorMRParser.Monomers, 0)

        def Integer(self):
            return self.getToken(XplorMRParser.Integer, 0)

        def Ncount(self):
            return self.getToken(XplorMRParser.Ncount, 0)

        def Nrestraints(self):
            return self.getToken(XplorMRParser.Nrestraints, 0)

        def Potential(self):
            return self.getToken(XplorMRParser.Potential, 0)

        def Noe_potential(self):
            return self.getToken(XplorMRParser.Noe_potential, 0)

        def Predict(self):
            return self.getToken(XplorMRParser.Predict, 0)

        def predict_statement(self):
            return self.getTypedRuleContext(XplorMRParser.Predict_statementContext,0)


        def End(self):
            return self.getToken(XplorMRParser.End, 0)

        def Print(self):
            return self.getToken(XplorMRParser.Print, 0)

        def Threshold(self):
            return self.getToken(XplorMRParser.Threshold, 0)

        def Reset(self):
            return self.getToken(XplorMRParser.Reset, 0)

        def Rswitch(self):
            return self.getToken(XplorMRParser.Rswitch, 0)

        def Scale(self):
            return self.getToken(XplorMRParser.Scale, 0)

        def SoExponent(self):
            return self.getToken(XplorMRParser.SoExponent, 0)

        def SqConstant(self):
            return self.getToken(XplorMRParser.SqConstant, 0)

        def SqExponent(self):
            return self.getToken(XplorMRParser.SqExponent, 0)

        def SqOffset(self):
            return self.getToken(XplorMRParser.SqOffset, 0)

        def Temperature(self):
            return self.getToken(XplorMRParser.Temperature, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_noe_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNoe_statement" ):
                listener.enterNoe_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNoe_statement" ):
                listener.exitNoe_statement(self)




    def noe_statement(self):

        localctx = XplorMRParser.Noe_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_noe_statement)
        self._la = 0 # Token type
        try:
            self.state = 533
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [XplorMRParser.Assign]:
                self.enterOuterAlt(localctx, 1)
                self.state = 462
                self.noe_assign()
                pass
            elif token in [XplorMRParser.Asymptote]:
                self.enterOuterAlt(localctx, 2)
                self.state = 463
                self.match(XplorMRParser.Asymptote)
                self.state = 464
                self.match(XplorMRParser.Simple_name)
                self.state = 465
                self.number_s()
                pass
            elif token in [XplorMRParser.Averaging]:
                self.enterOuterAlt(localctx, 3)
                self.state = 466
                self.match(XplorMRParser.Averaging)
                self.state = 467
                self.match(XplorMRParser.Simple_name)
                self.state = 468
                self.match(XplorMRParser.Noe_avr_methods)
                pass
            elif token in [XplorMRParser.Bhig]:
                self.enterOuterAlt(localctx, 4)
                self.state = 469
                self.match(XplorMRParser.Bhig)
                self.state = 470
                self.match(XplorMRParser.Simple_name)
                self.state = 471
                self.number_s()
                pass
            elif token in [XplorMRParser.Ceiling]:
                self.enterOuterAlt(localctx, 5)
                self.state = 472
                self.match(XplorMRParser.Ceiling)
                self.state = 474
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 473
                    self.match(XplorMRParser.Equ_op)


                self.state = 476
                self.number_s()
                pass
            elif token in [XplorMRParser.Classification]:
                self.enterOuterAlt(localctx, 6)
                self.state = 477
                self.match(XplorMRParser.Classification)
                self.state = 478
                self.match(XplorMRParser.Simple_name)
                pass
            elif token in [XplorMRParser.CountViol]:
                self.enterOuterAlt(localctx, 7)
                self.state = 479
                self.match(XplorMRParser.CountViol)
                self.state = 480
                self.match(XplorMRParser.Simple_name)
                pass
            elif token in [XplorMRParser.Distribute]:
                self.enterOuterAlt(localctx, 8)
                self.state = 481
                self.match(XplorMRParser.Distribute)
                self.state = 482
                self.match(XplorMRParser.Simple_name)
                self.state = 483
                self.match(XplorMRParser.Simple_name)
                self.state = 484
                self.number_s()
                pass
            elif token in [XplorMRParser.Monomers]:
                self.enterOuterAlt(localctx, 9)
                self.state = 485
                self.match(XplorMRParser.Monomers)
                self.state = 486
                self.match(XplorMRParser.Simple_name)
                self.state = 487
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.Ncount]:
                self.enterOuterAlt(localctx, 10)
                self.state = 488
                self.match(XplorMRParser.Ncount)
                self.state = 489
                self.match(XplorMRParser.Simple_name)
                self.state = 490
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.Nrestraints]:
                self.enterOuterAlt(localctx, 11)
                self.state = 491
                self.match(XplorMRParser.Nrestraints)
                self.state = 493
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 492
                    self.match(XplorMRParser.Equ_op)


                self.state = 495
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.Potential]:
                self.enterOuterAlt(localctx, 12)
                self.state = 496
                self.match(XplorMRParser.Potential)
                self.state = 497
                self.match(XplorMRParser.Simple_name)
                self.state = 498
                self.match(XplorMRParser.Noe_potential)
                pass
            elif token in [XplorMRParser.Predict]:
                self.enterOuterAlt(localctx, 13)
                self.state = 499
                self.match(XplorMRParser.Predict)
                self.state = 500
                self.predict_statement()
                self.state = 501
                self.match(XplorMRParser.End)
                pass
            elif token in [XplorMRParser.Print]:
                self.enterOuterAlt(localctx, 14)
                self.state = 503
                self.match(XplorMRParser.Print)
                self.state = 504
                self.match(XplorMRParser.Threshold)
                self.state = 506
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 505
                    self.match(XplorMRParser.Equ_op)


                self.state = 508
                self.number_s()
                pass
            elif token in [XplorMRParser.Reset]:
                self.enterOuterAlt(localctx, 15)
                self.state = 509
                self.match(XplorMRParser.Reset)
                pass
            elif token in [XplorMRParser.Rswitch]:
                self.enterOuterAlt(localctx, 16)
                self.state = 510
                self.match(XplorMRParser.Rswitch)
                self.state = 511
                self.match(XplorMRParser.Simple_name)
                self.state = 512
                self.number_s()
                pass
            elif token in [XplorMRParser.Scale]:
                self.enterOuterAlt(localctx, 17)
                self.state = 513
                self.match(XplorMRParser.Scale)
                self.state = 514
                self.match(XplorMRParser.Simple_name)
                self.state = 515
                self.number_s()
                pass
            elif token in [XplorMRParser.SoExponent]:
                self.enterOuterAlt(localctx, 18)
                self.state = 516
                self.match(XplorMRParser.SoExponent)
                self.state = 517
                self.match(XplorMRParser.Simple_name)
                self.state = 518
                self.number_s()
                pass
            elif token in [XplorMRParser.SqConstant]:
                self.enterOuterAlt(localctx, 19)
                self.state = 519
                self.match(XplorMRParser.SqConstant)
                self.state = 520
                self.match(XplorMRParser.Simple_name)
                self.state = 521
                self.number_s()
                pass
            elif token in [XplorMRParser.SqExponent]:
                self.enterOuterAlt(localctx, 20)
                self.state = 522
                self.match(XplorMRParser.SqExponent)
                self.state = 523
                self.match(XplorMRParser.Simple_name)
                self.state = 524
                self.number_s()
                pass
            elif token in [XplorMRParser.SqOffset]:
                self.enterOuterAlt(localctx, 21)
                self.state = 525
                self.match(XplorMRParser.SqOffset)
                self.state = 526
                self.match(XplorMRParser.Simple_name)
                self.state = 527
                self.number_s()
                pass
            elif token in [XplorMRParser.Temperature]:
                self.enterOuterAlt(localctx, 22)
                self.state = 528
                self.match(XplorMRParser.Temperature)
                self.state = 530
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 529
                    self.match(XplorMRParser.Equ_op)


                self.state = 532
                self.number_s()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Noe_assignContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Assign(self):
            return self.getToken(XplorMRParser.Assign, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.SelectionContext,i)


        def number(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.NumberContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.NumberContext,i)


        def noe_annotation(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Noe_annotationContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Noe_annotationContext,i)


        def Or_op(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Or_op)
            else:
                return self.getToken(XplorMRParser.Or_op, i)

        def getRuleIndex(self):
            return XplorMRParser.RULE_noe_assign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNoe_assign" ):
                listener.enterNoe_assign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNoe_assign" ):
                listener.exitNoe_assign(self)




    def noe_assign(self):

        localctx = XplorMRParser.Noe_assignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_noe_assign)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 535
            self.match(XplorMRParser.Assign)
            self.state = 536
            self.selection()
            self.state = 537
            self.selection()
            self.state = 538
            self.number()
            self.state = 539
            self.number()
            self.state = 540
            self.number()
            self.state = 544
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << XplorMRParser.Peak) | (1 << XplorMRParser.Spectrum) | (1 << XplorMRParser.Volume) | (1 << XplorMRParser.Ppm1) | (1 << XplorMRParser.Ppm2) | (1 << XplorMRParser.Cv) | (1 << XplorMRParser.Weight))) != 0):
                self.state = 541
                self.noe_annotation()
                self.state = 546
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 553
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==XplorMRParser.Or_op:
                self.state = 547
                self.match(XplorMRParser.Or_op)
                self.state = 548
                self.selection()
                self.state = 549
                self.selection()
                self.state = 555
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Predict_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Cutoff(self):
            return self.getToken(XplorMRParser.Cutoff, 0)

        def number_s(self):
            return self.getTypedRuleContext(XplorMRParser.Number_sContext,0)


        def Equ_op(self):
            return self.getToken(XplorMRParser.Equ_op, 0)

        def Cuton(self):
            return self.getToken(XplorMRParser.Cuton, 0)

        def From(self):
            return self.getToken(XplorMRParser.From, 0)

        def selection(self):
            return self.getTypedRuleContext(XplorMRParser.SelectionContext,0)


        def To(self):
            return self.getToken(XplorMRParser.To, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_predict_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPredict_statement" ):
                listener.enterPredict_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPredict_statement" ):
                listener.exitPredict_statement(self)




    def predict_statement(self):

        localctx = XplorMRParser.Predict_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_predict_statement)
        self._la = 0 # Token type
        try:
            self.state = 570
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [XplorMRParser.Cutoff]:
                self.enterOuterAlt(localctx, 1)
                self.state = 556
                self.match(XplorMRParser.Cutoff)
                self.state = 558
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 557
                    self.match(XplorMRParser.Equ_op)


                self.state = 560
                self.number_s()
                pass
            elif token in [XplorMRParser.Cuton]:
                self.enterOuterAlt(localctx, 2)
                self.state = 561
                self.match(XplorMRParser.Cuton)
                self.state = 563
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 562
                    self.match(XplorMRParser.Equ_op)


                self.state = 565
                self.number_s()
                pass
            elif token in [XplorMRParser.From]:
                self.enterOuterAlt(localctx, 3)
                self.state = 566
                self.match(XplorMRParser.From)
                self.state = 567
                self.selection()
                pass
            elif token in [XplorMRParser.To]:
                self.enterOuterAlt(localctx, 4)
                self.state = 568
                self.match(XplorMRParser.To)
                self.state = 569
                self.selection()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Noe_annotationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Peak(self):
            return self.getToken(XplorMRParser.Peak, 0)

        def number_a(self):
            return self.getTypedRuleContext(XplorMRParser.Number_aContext,0)


        def Equ_op(self):
            return self.getToken(XplorMRParser.Equ_op, 0)

        def Spectrum(self):
            return self.getToken(XplorMRParser.Spectrum, 0)

        def Weight(self):
            return self.getToken(XplorMRParser.Weight, 0)

        def Volume(self):
            return self.getToken(XplorMRParser.Volume, 0)

        def Ppm1(self):
            return self.getToken(XplorMRParser.Ppm1, 0)

        def Ppm2(self):
            return self.getToken(XplorMRParser.Ppm2, 0)

        def Cv(self):
            return self.getToken(XplorMRParser.Cv, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_noe_annotation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNoe_annotation" ):
                listener.enterNoe_annotation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNoe_annotation" ):
                listener.exitNoe_annotation(self)




    def noe_annotation(self):

        localctx = XplorMRParser.Noe_annotationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_noe_annotation)
        self._la = 0 # Token type
        try:
            self.state = 607
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [XplorMRParser.Peak]:
                self.enterOuterAlt(localctx, 1)
                self.state = 572
                self.match(XplorMRParser.Peak)
                self.state = 574
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 573
                    self.match(XplorMRParser.Equ_op)


                self.state = 576
                self.number_a()
                pass
            elif token in [XplorMRParser.Spectrum]:
                self.enterOuterAlt(localctx, 2)
                self.state = 577
                self.match(XplorMRParser.Spectrum)
                self.state = 579
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 578
                    self.match(XplorMRParser.Equ_op)


                self.state = 581
                self.number_a()
                pass
            elif token in [XplorMRParser.Weight]:
                self.enterOuterAlt(localctx, 3)
                self.state = 582
                self.match(XplorMRParser.Weight)
                self.state = 584
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 583
                    self.match(XplorMRParser.Equ_op)


                self.state = 586
                self.number_a()
                pass
            elif token in [XplorMRParser.Volume]:
                self.enterOuterAlt(localctx, 4)
                self.state = 587
                self.match(XplorMRParser.Volume)
                self.state = 589
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 588
                    self.match(XplorMRParser.Equ_op)


                self.state = 591
                self.number_a()
                pass
            elif token in [XplorMRParser.Ppm1]:
                self.enterOuterAlt(localctx, 5)
                self.state = 592
                self.match(XplorMRParser.Ppm1)
                self.state = 594
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 593
                    self.match(XplorMRParser.Equ_op)


                self.state = 596
                self.number_a()
                pass
            elif token in [XplorMRParser.Ppm2]:
                self.enterOuterAlt(localctx, 6)
                self.state = 597
                self.match(XplorMRParser.Ppm2)
                self.state = 599
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 598
                    self.match(XplorMRParser.Equ_op)


                self.state = 601
                self.number_a()
                pass
            elif token in [XplorMRParser.Cv]:
                self.enterOuterAlt(localctx, 7)
                self.state = 602
                self.match(XplorMRParser.Cv)
                self.state = 604
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 603
                    self.match(XplorMRParser.Equ_op)


                self.state = 606
                self.number_a()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Dihedral_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def dihedral_assign(self):
            return self.getTypedRuleContext(XplorMRParser.Dihedral_assignContext,0)


        def Nassign(self):
            return self.getToken(XplorMRParser.Nassign, 0)

        def Integer(self):
            return self.getToken(XplorMRParser.Integer, 0)

        def Equ_op(self):
            return self.getToken(XplorMRParser.Equ_op, 0)

        def Reset(self):
            return self.getToken(XplorMRParser.Reset, 0)

        def Scale(self):
            return self.getToken(XplorMRParser.Scale, 0)

        def number_s(self):
            return self.getTypedRuleContext(XplorMRParser.Number_sContext,0)


        def getRuleIndex(self):
            return XplorMRParser.RULE_dihedral_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDihedral_statement" ):
                listener.enterDihedral_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDihedral_statement" ):
                listener.exitDihedral_statement(self)




    def dihedral_statement(self):

        localctx = XplorMRParser.Dihedral_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_dihedral_statement)
        self._la = 0 # Token type
        try:
            self.state = 618
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [XplorMRParser.Assign]:
                self.enterOuterAlt(localctx, 1)
                self.state = 609
                self.dihedral_assign()
                pass
            elif token in [XplorMRParser.Nassign]:
                self.enterOuterAlt(localctx, 2)
                self.state = 610
                self.match(XplorMRParser.Nassign)
                self.state = 612
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 611
                    self.match(XplorMRParser.Equ_op)


                self.state = 614
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.Reset]:
                self.enterOuterAlt(localctx, 3)
                self.state = 615
                self.match(XplorMRParser.Reset)
                pass
            elif token in [XplorMRParser.Scale]:
                self.enterOuterAlt(localctx, 4)
                self.state = 616
                self.match(XplorMRParser.Scale)
                self.state = 617
                self.number_s()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Dihedral_assignContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Assign(self):
            return self.getToken(XplorMRParser.Assign, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.SelectionContext,i)


        def number(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.NumberContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.NumberContext,i)


        def Integer(self):
            return self.getToken(XplorMRParser.Integer, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_dihedral_assign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDihedral_assign" ):
                listener.enterDihedral_assign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDihedral_assign" ):
                listener.exitDihedral_assign(self)




    def dihedral_assign(self):

        localctx = XplorMRParser.Dihedral_assignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_dihedral_assign)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 620
            self.match(XplorMRParser.Assign)
            self.state = 621
            self.selection()
            self.state = 622
            self.selection()
            self.state = 623
            self.selection()
            self.state = 624
            self.selection()
            self.state = 625
            self.number()
            self.state = 626
            self.number()
            self.state = 627
            self.number()
            self.state = 628
            self.match(XplorMRParser.Integer)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Sani_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def sani_assign(self):
            return self.getTypedRuleContext(XplorMRParser.Sani_assignContext,0)


        def Classification(self):
            return self.getToken(XplorMRParser.Classification, 0)

        def Simple_name(self):
            return self.getToken(XplorMRParser.Simple_name, 0)

        def Coefficients(self):
            return self.getToken(XplorMRParser.Coefficients, 0)

        def number_s(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Number_sContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Number_sContext,i)


        def ForceConstant(self):
            return self.getToken(XplorMRParser.ForceConstant, 0)

        def Nrestraints(self):
            return self.getToken(XplorMRParser.Nrestraints, 0)

        def Integer(self):
            return self.getToken(XplorMRParser.Integer, 0)

        def Potential(self):
            return self.getToken(XplorMRParser.Potential, 0)

        def Rdc_potential(self):
            return self.getToken(XplorMRParser.Rdc_potential, 0)

        def Print(self):
            return self.getToken(XplorMRParser.Print, 0)

        def Threshold(self):
            return self.getToken(XplorMRParser.Threshold, 0)

        def Reset(self):
            return self.getToken(XplorMRParser.Reset, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_sani_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSani_statement" ):
                listener.enterSani_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSani_statement" ):
                listener.exitSani_statement(self)




    def sani_statement(self):

        localctx = XplorMRParser.Sani_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_sani_statement)
        try:
            self.state = 648
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [XplorMRParser.Assign]:
                self.enterOuterAlt(localctx, 1)
                self.state = 630
                self.sani_assign()
                pass
            elif token in [XplorMRParser.Classification]:
                self.enterOuterAlt(localctx, 2)
                self.state = 631
                self.match(XplorMRParser.Classification)
                self.state = 632
                self.match(XplorMRParser.Simple_name)
                pass
            elif token in [XplorMRParser.Coefficients]:
                self.enterOuterAlt(localctx, 3)
                self.state = 633
                self.match(XplorMRParser.Coefficients)
                self.state = 634
                self.number_s()
                self.state = 635
                self.number_s()
                self.state = 636
                self.number_s()
                pass
            elif token in [XplorMRParser.ForceConstant]:
                self.enterOuterAlt(localctx, 4)
                self.state = 638
                self.match(XplorMRParser.ForceConstant)
                self.state = 639
                self.number_s()
                pass
            elif token in [XplorMRParser.Nrestraints]:
                self.enterOuterAlt(localctx, 5)
                self.state = 640
                self.match(XplorMRParser.Nrestraints)
                self.state = 641
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.Potential]:
                self.enterOuterAlt(localctx, 6)
                self.state = 642
                self.match(XplorMRParser.Potential)
                self.state = 643
                self.match(XplorMRParser.Rdc_potential)
                pass
            elif token in [XplorMRParser.Print]:
                self.enterOuterAlt(localctx, 7)
                self.state = 644
                self.match(XplorMRParser.Print)
                self.state = 645
                self.match(XplorMRParser.Threshold)
                self.state = 646
                self.number_s()
                pass
            elif token in [XplorMRParser.Reset]:
                self.enterOuterAlt(localctx, 8)
                self.state = 647
                self.match(XplorMRParser.Reset)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Sani_assignContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Assign(self):
            return self.getToken(XplorMRParser.Assign, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.SelectionContext,i)


        def number(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.NumberContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.NumberContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_sani_assign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSani_assign" ):
                listener.enterSani_assign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSani_assign" ):
                listener.exitSani_assign(self)




    def sani_assign(self):

        localctx = XplorMRParser.Sani_assignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_sani_assign)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 650
            self.match(XplorMRParser.Assign)
            self.state = 651
            self.selection()
            self.state = 652
            self.selection()
            self.state = 653
            self.selection()
            self.state = 654
            self.selection()
            self.state = 655
            self.selection()
            self.state = 656
            self.selection()
            self.state = 657
            self.number()
            self.state = 658
            self.number()
            self.state = 660
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==XplorMRParser.Integer or _la==XplorMRParser.Real:
                self.state = 659
                self.number()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Xdip_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def xdip_assign(self):
            return self.getTypedRuleContext(XplorMRParser.Xdip_assignContext,0)


        def Classification(self):
            return self.getToken(XplorMRParser.Classification, 0)

        def Simple_name(self):
            return self.getToken(XplorMRParser.Simple_name, 0)

        def Type(self):
            return self.getToken(XplorMRParser.Type, 0)

        def Rdc_dist_fix_types(self):
            return self.getToken(XplorMRParser.Rdc_dist_fix_types, 0)

        def Scale(self):
            return self.getToken(XplorMRParser.Scale, 0)

        def number_s(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Number_sContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Number_sContext,i)


        def Sign(self):
            return self.getToken(XplorMRParser.Sign, 0)

        def Logical(self):
            return self.getToken(XplorMRParser.Logical, 0)

        def Average(self):
            return self.getToken(XplorMRParser.Average, 0)

        def Rdc_avr_methods(self):
            return self.getToken(XplorMRParser.Rdc_avr_methods, 0)

        def Coefficients(self):
            return self.getToken(XplorMRParser.Coefficients, 0)

        def ForceConstant(self):
            return self.getToken(XplorMRParser.ForceConstant, 0)

        def Nrestraints(self):
            return self.getToken(XplorMRParser.Nrestraints, 0)

        def Integer(self):
            return self.getToken(XplorMRParser.Integer, 0)

        def Potential(self):
            return self.getToken(XplorMRParser.Potential, 0)

        def Rdc_potential(self):
            return self.getToken(XplorMRParser.Rdc_potential, 0)

        def Print(self):
            return self.getToken(XplorMRParser.Print, 0)

        def Threshold(self):
            return self.getToken(XplorMRParser.Threshold, 0)

        def Reset(self):
            return self.getToken(XplorMRParser.Reset, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_xdip_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterXdip_statement" ):
                listener.enterXdip_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitXdip_statement" ):
                listener.exitXdip_statement(self)




    def xdip_statement(self):

        localctx = XplorMRParser.Xdip_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_xdip_statement)
        try:
            self.state = 688
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [XplorMRParser.Assign]:
                self.enterOuterAlt(localctx, 1)
                self.state = 662
                self.xdip_assign()
                pass
            elif token in [XplorMRParser.Classification]:
                self.enterOuterAlt(localctx, 2)
                self.state = 663
                self.match(XplorMRParser.Classification)
                self.state = 664
                self.match(XplorMRParser.Simple_name)
                pass
            elif token in [XplorMRParser.Type]:
                self.enterOuterAlt(localctx, 3)
                self.state = 665
                self.match(XplorMRParser.Type)
                self.state = 666
                self.match(XplorMRParser.Rdc_dist_fix_types)
                pass
            elif token in [XplorMRParser.Scale]:
                self.enterOuterAlt(localctx, 4)
                self.state = 667
                self.match(XplorMRParser.Scale)
                self.state = 668
                self.number_s()
                pass
            elif token in [XplorMRParser.Sign]:
                self.enterOuterAlt(localctx, 5)
                self.state = 669
                self.match(XplorMRParser.Sign)
                self.state = 670
                self.match(XplorMRParser.Logical)
                pass
            elif token in [XplorMRParser.Average]:
                self.enterOuterAlt(localctx, 6)
                self.state = 671
                self.match(XplorMRParser.Average)
                self.state = 672
                self.match(XplorMRParser.Rdc_avr_methods)
                pass
            elif token in [XplorMRParser.Coefficients]:
                self.enterOuterAlt(localctx, 7)
                self.state = 673
                self.match(XplorMRParser.Coefficients)
                self.state = 674
                self.number_s()
                self.state = 675
                self.number_s()
                self.state = 676
                self.number_s()
                pass
            elif token in [XplorMRParser.ForceConstant]:
                self.enterOuterAlt(localctx, 8)
                self.state = 678
                self.match(XplorMRParser.ForceConstant)
                self.state = 679
                self.number_s()
                pass
            elif token in [XplorMRParser.Nrestraints]:
                self.enterOuterAlt(localctx, 9)
                self.state = 680
                self.match(XplorMRParser.Nrestraints)
                self.state = 681
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.Potential]:
                self.enterOuterAlt(localctx, 10)
                self.state = 682
                self.match(XplorMRParser.Potential)
                self.state = 683
                self.match(XplorMRParser.Rdc_potential)
                pass
            elif token in [XplorMRParser.Print]:
                self.enterOuterAlt(localctx, 11)
                self.state = 684
                self.match(XplorMRParser.Print)
                self.state = 685
                self.match(XplorMRParser.Threshold)
                self.state = 686
                self.number_s()
                pass
            elif token in [XplorMRParser.Reset]:
                self.enterOuterAlt(localctx, 12)
                self.state = 687
                self.match(XplorMRParser.Reset)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Xdip_assignContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Assign(self):
            return self.getToken(XplorMRParser.Assign, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.SelectionContext,i)


        def number(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.NumberContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.NumberContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_xdip_assign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterXdip_assign" ):
                listener.enterXdip_assign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitXdip_assign" ):
                listener.exitXdip_assign(self)




    def xdip_assign(self):

        localctx = XplorMRParser.Xdip_assignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_xdip_assign)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 690
            self.match(XplorMRParser.Assign)
            self.state = 691
            self.selection()
            self.state = 692
            self.selection()
            self.state = 693
            self.selection()
            self.state = 694
            self.selection()
            self.state = 695
            self.selection()
            self.state = 696
            self.selection()
            self.state = 697
            self.number()
            self.state = 698
            self.number()
            self.state = 705
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,52,self._ctx)
            if la_ == 1:
                self.state = 699
                self.number()

            elif la_ == 2:
                self.state = 700
                self.number()
                self.state = 701
                self.number()
                self.state = 702
                self.number()
                self.state = 703
                self.number()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Vean_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def vean_assign(self):
            return self.getTypedRuleContext(XplorMRParser.Vean_assignContext,0)


        def Cv(self):
            return self.getToken(XplorMRParser.Cv, 0)

        def Integer(self):
            return self.getToken(XplorMRParser.Integer, 0)

        def Equ_op(self):
            return self.getToken(XplorMRParser.Equ_op, 0)

        def Classification(self):
            return self.getToken(XplorMRParser.Classification, 0)

        def Simple_name(self):
            return self.getToken(XplorMRParser.Simple_name, 0)

        def ForceConstant(self):
            return self.getToken(XplorMRParser.ForceConstant, 0)

        def number_s(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Number_sContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Number_sContext,i)


        def Nrestraints(self):
            return self.getToken(XplorMRParser.Nrestraints, 0)

        def Partition(self):
            return self.getToken(XplorMRParser.Partition, 0)

        def Print(self):
            return self.getToken(XplorMRParser.Print, 0)

        def Threshold(self):
            return self.getToken(XplorMRParser.Threshold, 0)

        def Reset(self):
            return self.getToken(XplorMRParser.Reset, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_vean_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVean_statement" ):
                listener.enterVean_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVean_statement" ):
                listener.exitVean_statement(self)




    def vean_statement(self):

        localctx = XplorMRParser.Vean_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_vean_statement)
        self._la = 0 # Token type
        try:
            self.state = 730
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [XplorMRParser.Assign]:
                self.enterOuterAlt(localctx, 1)
                self.state = 707
                self.vean_assign()
                pass
            elif token in [XplorMRParser.Cv]:
                self.enterOuterAlt(localctx, 2)
                self.state = 708
                self.match(XplorMRParser.Cv)
                self.state = 710
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 709
                    self.match(XplorMRParser.Equ_op)


                self.state = 712
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.Classification]:
                self.enterOuterAlt(localctx, 3)
                self.state = 713
                self.match(XplorMRParser.Classification)
                self.state = 714
                self.match(XplorMRParser.Simple_name)
                pass
            elif token in [XplorMRParser.ForceConstant]:
                self.enterOuterAlt(localctx, 4)
                self.state = 715
                self.match(XplorMRParser.ForceConstant)
                self.state = 716
                self.number_s()
                self.state = 717
                self.number_s()
                pass
            elif token in [XplorMRParser.Nrestraints]:
                self.enterOuterAlt(localctx, 5)
                self.state = 719
                self.match(XplorMRParser.Nrestraints)
                self.state = 720
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.Partition]:
                self.enterOuterAlt(localctx, 6)
                self.state = 721
                self.match(XplorMRParser.Partition)
                self.state = 723
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 722
                    self.match(XplorMRParser.Equ_op)


                self.state = 725
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.Print]:
                self.enterOuterAlt(localctx, 7)
                self.state = 726
                self.match(XplorMRParser.Print)
                self.state = 727
                self.match(XplorMRParser.Threshold)
                self.state = 728
                self.number_s()
                pass
            elif token in [XplorMRParser.Reset]:
                self.enterOuterAlt(localctx, 8)
                self.state = 729
                self.match(XplorMRParser.Reset)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Vean_assignContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Assign(self):
            return self.getToken(XplorMRParser.Assign, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.SelectionContext,i)


        def number(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.NumberContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.NumberContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_vean_assign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVean_assign" ):
                listener.enterVean_assign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVean_assign" ):
                listener.exitVean_assign(self)




    def vean_assign(self):

        localctx = XplorMRParser.Vean_assignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 68, self.RULE_vean_assign)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 732
            self.match(XplorMRParser.Assign)
            self.state = 733
            self.selection()
            self.state = 734
            self.selection()
            self.state = 735
            self.selection()
            self.state = 736
            self.selection()
            self.state = 737
            self.number()
            self.state = 738
            self.number()
            self.state = 739
            self.number()
            self.state = 740
            self.number()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Tenso_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def tenso_assign(self):
            return self.getTypedRuleContext(XplorMRParser.Tenso_assignContext,0)


        def Classification(self):
            return self.getToken(XplorMRParser.Classification, 0)

        def Simple_name(self):
            return self.getToken(XplorMRParser.Simple_name, 0)

        def Coefficients(self):
            return self.getToken(XplorMRParser.Coefficients, 0)

        def number_s(self):
            return self.getTypedRuleContext(XplorMRParser.Number_sContext,0)


        def Nrestraints(self):
            return self.getToken(XplorMRParser.Nrestraints, 0)

        def Integer(self):
            return self.getToken(XplorMRParser.Integer, 0)

        def Potential(self):
            return self.getToken(XplorMRParser.Potential, 0)

        def Rdc_potential(self):
            return self.getToken(XplorMRParser.Rdc_potential, 0)

        def Print(self):
            return self.getToken(XplorMRParser.Print, 0)

        def Threshold(self):
            return self.getToken(XplorMRParser.Threshold, 0)

        def Reset(self):
            return self.getToken(XplorMRParser.Reset, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_tenso_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTenso_statement" ):
                listener.enterTenso_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTenso_statement" ):
                listener.exitTenso_statement(self)




    def tenso_statement(self):

        localctx = XplorMRParser.Tenso_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_tenso_statement)
        try:
            self.state = 755
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [XplorMRParser.Assign]:
                self.enterOuterAlt(localctx, 1)
                self.state = 742
                self.tenso_assign()
                pass
            elif token in [XplorMRParser.Classification]:
                self.enterOuterAlt(localctx, 2)
                self.state = 743
                self.match(XplorMRParser.Classification)
                self.state = 744
                self.match(XplorMRParser.Simple_name)
                pass
            elif token in [XplorMRParser.Coefficients]:
                self.enterOuterAlt(localctx, 3)
                self.state = 745
                self.match(XplorMRParser.Coefficients)
                self.state = 746
                self.number_s()
                pass
            elif token in [XplorMRParser.Nrestraints]:
                self.enterOuterAlt(localctx, 4)
                self.state = 747
                self.match(XplorMRParser.Nrestraints)
                self.state = 748
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.Potential]:
                self.enterOuterAlt(localctx, 5)
                self.state = 749
                self.match(XplorMRParser.Potential)
                self.state = 750
                self.match(XplorMRParser.Rdc_potential)
                pass
            elif token in [XplorMRParser.Print]:
                self.enterOuterAlt(localctx, 6)
                self.state = 751
                self.match(XplorMRParser.Print)
                self.state = 752
                self.match(XplorMRParser.Threshold)
                self.state = 753
                self.number_s()
                pass
            elif token in [XplorMRParser.Reset]:
                self.enterOuterAlt(localctx, 7)
                self.state = 754
                self.match(XplorMRParser.Reset)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Tenso_assignContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Assign(self):
            return self.getToken(XplorMRParser.Assign, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.SelectionContext,i)


        def number(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.NumberContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.NumberContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_tenso_assign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTenso_assign" ):
                listener.enterTenso_assign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTenso_assign" ):
                listener.exitTenso_assign(self)




    def tenso_assign(self):

        localctx = XplorMRParser.Tenso_assignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_tenso_assign)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 757
            self.match(XplorMRParser.Assign)
            self.state = 758
            self.selection()
            self.state = 759
            self.selection()
            self.state = 760
            self.number()
            self.state = 761
            self.number()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Anis_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def anis_assign(self):
            return self.getTypedRuleContext(XplorMRParser.Anis_assignContext,0)


        def Classification(self):
            return self.getToken(XplorMRParser.Classification, 0)

        def Simple_name(self):
            return self.getToken(XplorMRParser.Simple_name, 0)

        def Coefficients(self):
            return self.getToken(XplorMRParser.Coefficients, 0)

        def number_s(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Number_sContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Number_sContext,i)


        def ForceConstant(self):
            return self.getToken(XplorMRParser.ForceConstant, 0)

        def Nrestraints(self):
            return self.getToken(XplorMRParser.Nrestraints, 0)

        def Integer(self):
            return self.getToken(XplorMRParser.Integer, 0)

        def Potential(self):
            return self.getToken(XplorMRParser.Potential, 0)

        def Rdc_potential(self):
            return self.getToken(XplorMRParser.Rdc_potential, 0)

        def Print(self):
            return self.getToken(XplorMRParser.Print, 0)

        def Threshold(self):
            return self.getToken(XplorMRParser.Threshold, 0)

        def Reset(self):
            return self.getToken(XplorMRParser.Reset, 0)

        def Type(self):
            return self.getToken(XplorMRParser.Type, 0)

        def Rdc_anis_types(self):
            return self.getToken(XplorMRParser.Rdc_anis_types, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_anis_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAnis_statement" ):
                listener.enterAnis_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAnis_statement" ):
                listener.exitAnis_statement(self)




    def anis_statement(self):

        localctx = XplorMRParser.Anis_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_anis_statement)
        try:
            self.state = 784
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [XplorMRParser.Assign]:
                self.enterOuterAlt(localctx, 1)
                self.state = 763
                self.anis_assign()
                pass
            elif token in [XplorMRParser.Classification]:
                self.enterOuterAlt(localctx, 2)
                self.state = 764
                self.match(XplorMRParser.Classification)
                self.state = 765
                self.match(XplorMRParser.Simple_name)
                pass
            elif token in [XplorMRParser.Coefficients]:
                self.enterOuterAlt(localctx, 3)
                self.state = 766
                self.match(XplorMRParser.Coefficients)
                self.state = 767
                self.number_s()
                self.state = 768
                self.number_s()
                self.state = 769
                self.number_s()
                self.state = 770
                self.number_s()
                pass
            elif token in [XplorMRParser.ForceConstant]:
                self.enterOuterAlt(localctx, 4)
                self.state = 772
                self.match(XplorMRParser.ForceConstant)
                self.state = 773
                self.number_s()
                pass
            elif token in [XplorMRParser.Nrestraints]:
                self.enterOuterAlt(localctx, 5)
                self.state = 774
                self.match(XplorMRParser.Nrestraints)
                self.state = 775
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.Potential]:
                self.enterOuterAlt(localctx, 6)
                self.state = 776
                self.match(XplorMRParser.Potential)
                self.state = 777
                self.match(XplorMRParser.Rdc_potential)
                pass
            elif token in [XplorMRParser.Print]:
                self.enterOuterAlt(localctx, 7)
                self.state = 778
                self.match(XplorMRParser.Print)
                self.state = 779
                self.match(XplorMRParser.Threshold)
                self.state = 780
                self.number_s()
                pass
            elif token in [XplorMRParser.Reset]:
                self.enterOuterAlt(localctx, 8)
                self.state = 781
                self.match(XplorMRParser.Reset)
                pass
            elif token in [XplorMRParser.Type]:
                self.enterOuterAlt(localctx, 9)
                self.state = 782
                self.match(XplorMRParser.Type)
                self.state = 783
                self.match(XplorMRParser.Rdc_anis_types)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Anis_assignContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Assign(self):
            return self.getToken(XplorMRParser.Assign, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.SelectionContext,i)


        def number(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.NumberContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.NumberContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_anis_assign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAnis_assign" ):
                listener.enterAnis_assign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAnis_assign" ):
                listener.exitAnis_assign(self)




    def anis_assign(self):

        localctx = XplorMRParser.Anis_assignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 76, self.RULE_anis_assign)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 786
            self.match(XplorMRParser.Assign)
            self.state = 787
            self.selection()
            self.state = 788
            self.selection()
            self.state = 789
            self.selection()
            self.state = 790
            self.selection()
            self.state = 791
            self.number()
            self.state = 792
            self.number()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Planar_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Group(self):
            return self.getToken(XplorMRParser.Group, 0)

        def End(self):
            return self.getToken(XplorMRParser.End, 0)

        def group_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Group_statementContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Group_statementContext,i)


        def Initialize(self):
            return self.getToken(XplorMRParser.Initialize, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_planar_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPlanar_statement" ):
                listener.enterPlanar_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPlanar_statement" ):
                listener.exitPlanar_statement(self)




    def planar_statement(self):

        localctx = XplorMRParser.Planar_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 78, self.RULE_planar_statement)
        self._la = 0 # Token type
        try:
            self.state = 803
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [XplorMRParser.Group]:
                self.enterOuterAlt(localctx, 1)
                self.state = 794
                self.match(XplorMRParser.Group)
                self.state = 798
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==XplorMRParser.Selection or _la==XplorMRParser.Weight:
                    self.state = 795
                    self.group_statement()
                    self.state = 800
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 801
                self.match(XplorMRParser.End)
                pass
            elif token in [XplorMRParser.Initialize]:
                self.enterOuterAlt(localctx, 2)
                self.state = 802
                self.match(XplorMRParser.Initialize)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Group_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Selection(self):
            return self.getToken(XplorMRParser.Selection, 0)

        def selection(self):
            return self.getTypedRuleContext(XplorMRParser.SelectionContext,0)


        def Equ_op(self):
            return self.getToken(XplorMRParser.Equ_op, 0)

        def Weight(self):
            return self.getToken(XplorMRParser.Weight, 0)

        def number_s(self):
            return self.getTypedRuleContext(XplorMRParser.Number_sContext,0)


        def getRuleIndex(self):
            return XplorMRParser.RULE_group_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGroup_statement" ):
                listener.enterGroup_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGroup_statement" ):
                listener.exitGroup_statement(self)




    def group_statement(self):

        localctx = XplorMRParser.Group_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 80, self.RULE_group_statement)
        self._la = 0 # Token type
        try:
            self.state = 815
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [XplorMRParser.Selection]:
                self.enterOuterAlt(localctx, 1)
                self.state = 805
                self.match(XplorMRParser.Selection)
                self.state = 807
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 806
                    self.match(XplorMRParser.Equ_op)


                self.state = 809
                self.selection()
                pass
            elif token in [XplorMRParser.Weight]:
                self.enterOuterAlt(localctx, 2)
                self.state = 810
                self.match(XplorMRParser.Weight)
                self.state = 812
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 811
                    self.match(XplorMRParser.Equ_op)


                self.state = 814
                self.number_s()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Antidistance_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def xadc_assign(self):
            return self.getTypedRuleContext(XplorMRParser.Xadc_assignContext,0)


        def Classification(self):
            return self.getToken(XplorMRParser.Classification, 0)

        def Simple_name(self):
            return self.getToken(XplorMRParser.Simple_name, 0)

        def Expectation(self):
            return self.getToken(XplorMRParser.Expectation, 0)

        def Integer(self):
            return self.getToken(XplorMRParser.Integer, 0)

        def number_s(self):
            return self.getTypedRuleContext(XplorMRParser.Number_sContext,0)


        def ForceConstant(self):
            return self.getToken(XplorMRParser.ForceConstant, 0)

        def Nrestraints(self):
            return self.getToken(XplorMRParser.Nrestraints, 0)

        def Print(self):
            return self.getToken(XplorMRParser.Print, 0)

        def Threshold(self):
            return self.getToken(XplorMRParser.Threshold, 0)

        def All(self):
            return self.getToken(XplorMRParser.All, 0)

        def Reset(self):
            return self.getToken(XplorMRParser.Reset, 0)

        def Size(self):
            return self.getToken(XplorMRParser.Size, 0)

        def Zero(self):
            return self.getToken(XplorMRParser.Zero, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_antidistance_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAntidistance_statement" ):
                listener.enterAntidistance_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAntidistance_statement" ):
                listener.exitAntidistance_statement(self)




    def antidistance_statement(self):

        localctx = XplorMRParser.Antidistance_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 82, self.RULE_antidistance_statement)
        try:
            self.state = 841
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [XplorMRParser.Assign]:
                self.enterOuterAlt(localctx, 1)
                self.state = 817
                self.xadc_assign()
                pass
            elif token in [XplorMRParser.Classification]:
                self.enterOuterAlt(localctx, 2)
                self.state = 818
                self.match(XplorMRParser.Classification)
                self.state = 819
                self.match(XplorMRParser.Simple_name)
                pass
            elif token in [XplorMRParser.Expectation]:
                self.enterOuterAlt(localctx, 3)
                self.state = 820
                self.match(XplorMRParser.Expectation)
                self.state = 821
                self.match(XplorMRParser.Integer)
                self.state = 822
                self.number_s()
                pass
            elif token in [XplorMRParser.ForceConstant]:
                self.enterOuterAlt(localctx, 4)
                self.state = 823
                self.match(XplorMRParser.ForceConstant)
                self.state = 824
                self.number_s()
                pass
            elif token in [XplorMRParser.Nrestraints]:
                self.enterOuterAlt(localctx, 5)
                self.state = 825
                self.match(XplorMRParser.Nrestraints)
                self.state = 826
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.Print]:
                self.enterOuterAlt(localctx, 6)
                self.state = 827
                self.match(XplorMRParser.Print)
                self.state = 828
                self.match(XplorMRParser.Threshold)
                self.state = 829
                self.number_s()
                self.state = 833
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [XplorMRParser.All]:
                    self.state = 830
                    self.match(XplorMRParser.All)
                    pass
                elif token in [XplorMRParser.Classification]:
                    self.state = 831
                    self.match(XplorMRParser.Classification)
                    self.state = 832
                    self.match(XplorMRParser.Simple_name)
                    pass
                else:
                    raise NoViableAltException(self)

                pass
            elif token in [XplorMRParser.Reset]:
                self.enterOuterAlt(localctx, 7)
                self.state = 835
                self.match(XplorMRParser.Reset)
                pass
            elif token in [XplorMRParser.Size]:
                self.enterOuterAlt(localctx, 8)
                self.state = 836
                self.match(XplorMRParser.Size)
                self.state = 837
                self.number_s()
                self.state = 838
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.Zero]:
                self.enterOuterAlt(localctx, 9)
                self.state = 840
                self.match(XplorMRParser.Zero)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Xadc_assignContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Assign(self):
            return self.getToken(XplorMRParser.Assign, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.SelectionContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_xadc_assign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterXadc_assign" ):
                listener.enterXadc_assign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitXadc_assign" ):
                listener.exitXadc_assign(self)




    def xadc_assign(self):

        localctx = XplorMRParser.Xadc_assignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 84, self.RULE_xadc_assign)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 843
            self.match(XplorMRParser.Assign)
            self.state = 844
            self.selection()
            self.state = 845
            self.selection()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Coupling_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def coup_assign(self):
            return self.getTypedRuleContext(XplorMRParser.Coup_assignContext,0)


        def Classification(self):
            return self.getToken(XplorMRParser.Classification, 0)

        def Simple_name(self):
            return self.getToken(XplorMRParser.Simple_name, 0)

        def Coefficients(self):
            return self.getToken(XplorMRParser.Coefficients, 0)

        def number_s(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Number_sContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Number_sContext,i)


        def Cv(self):
            return self.getToken(XplorMRParser.Cv, 0)

        def Integer(self):
            return self.getToken(XplorMRParser.Integer, 0)

        def Equ_op(self):
            return self.getToken(XplorMRParser.Equ_op, 0)

        def DegEnergy(self):
            return self.getToken(XplorMRParser.DegEnergy, 0)

        def ForceConstant(self):
            return self.getToken(XplorMRParser.ForceConstant, 0)

        def Nrestraints(self):
            return self.getToken(XplorMRParser.Nrestraints, 0)

        def Partition(self):
            return self.getToken(XplorMRParser.Partition, 0)

        def Potential(self):
            return self.getToken(XplorMRParser.Potential, 0)

        def Coupling_potential(self):
            return self.getToken(XplorMRParser.Coupling_potential, 0)

        def Print(self):
            return self.getToken(XplorMRParser.Print, 0)

        def Threshold(self):
            return self.getToken(XplorMRParser.Threshold, 0)

        def All(self):
            return self.getToken(XplorMRParser.All, 0)

        def Reset(self):
            return self.getToken(XplorMRParser.Reset, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_coupling_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCoupling_statement" ):
                listener.enterCoupling_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCoupling_statement" ):
                listener.exitCoupling_statement(self)




    def coupling_statement(self):

        localctx = XplorMRParser.Coupling_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 86, self.RULE_coupling_statement)
        self._la = 0 # Token type
        try:
            self.state = 886
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [XplorMRParser.Assign]:
                self.enterOuterAlt(localctx, 1)
                self.state = 847
                self.coup_assign()
                pass
            elif token in [XplorMRParser.Classification]:
                self.enterOuterAlt(localctx, 2)
                self.state = 848
                self.match(XplorMRParser.Classification)
                self.state = 849
                self.match(XplorMRParser.Simple_name)
                pass
            elif token in [XplorMRParser.Coefficients]:
                self.enterOuterAlt(localctx, 3)
                self.state = 850
                self.match(XplorMRParser.Coefficients)
                self.state = 851
                self.number_s()
                self.state = 852
                self.number_s()
                self.state = 853
                self.number_s()
                self.state = 854
                self.number_s()
                pass
            elif token in [XplorMRParser.Cv]:
                self.enterOuterAlt(localctx, 4)
                self.state = 856
                self.match(XplorMRParser.Cv)
                self.state = 858
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 857
                    self.match(XplorMRParser.Equ_op)


                self.state = 860
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.DegEnergy]:
                self.enterOuterAlt(localctx, 5)
                self.state = 861
                self.match(XplorMRParser.DegEnergy)
                self.state = 862
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.ForceConstant]:
                self.enterOuterAlt(localctx, 6)
                self.state = 863
                self.match(XplorMRParser.ForceConstant)
                self.state = 864
                self.number_s()
                self.state = 866
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Integer or _la==XplorMRParser.Real:
                    self.state = 865
                    self.number_s()


                pass
            elif token in [XplorMRParser.Nrestraints]:
                self.enterOuterAlt(localctx, 7)
                self.state = 868
                self.match(XplorMRParser.Nrestraints)
                self.state = 869
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.Partition]:
                self.enterOuterAlt(localctx, 8)
                self.state = 870
                self.match(XplorMRParser.Partition)
                self.state = 872
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 871
                    self.match(XplorMRParser.Equ_op)


                self.state = 874
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.Potential]:
                self.enterOuterAlt(localctx, 9)
                self.state = 875
                self.match(XplorMRParser.Potential)
                self.state = 876
                self.match(XplorMRParser.Coupling_potential)
                pass
            elif token in [XplorMRParser.Print]:
                self.enterOuterAlt(localctx, 10)
                self.state = 877
                self.match(XplorMRParser.Print)
                self.state = 878
                self.match(XplorMRParser.Threshold)
                self.state = 879
                self.number_s()
                self.state = 883
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [XplorMRParser.All]:
                    self.state = 880
                    self.match(XplorMRParser.All)
                    pass
                elif token in [XplorMRParser.Classification]:
                    self.state = 881
                    self.match(XplorMRParser.Classification)
                    self.state = 882
                    self.match(XplorMRParser.Simple_name)
                    pass
                else:
                    raise NoViableAltException(self)

                pass
            elif token in [XplorMRParser.Reset]:
                self.enterOuterAlt(localctx, 11)
                self.state = 885
                self.match(XplorMRParser.Reset)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Coup_assignContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Assign(self):
            return self.getToken(XplorMRParser.Assign, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.SelectionContext,i)


        def number(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.NumberContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.NumberContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_coup_assign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCoup_assign" ):
                listener.enterCoup_assign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCoup_assign" ):
                listener.exitCoup_assign(self)




    def coup_assign(self):

        localctx = XplorMRParser.Coup_assignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 88, self.RULE_coup_assign)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 888
            self.match(XplorMRParser.Assign)
            self.state = 889
            self.selection()
            self.state = 890
            self.selection()
            self.state = 891
            self.selection()
            self.state = 892
            self.selection()
            self.state = 898
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==XplorMRParser.L_paren:
                self.state = 893
                self.selection()
                self.state = 894
                self.selection()
                self.state = 895
                self.selection()
                self.state = 896
                self.selection()


            self.state = 900
            self.number()
            self.state = 901
            self.number()
            self.state = 905
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==XplorMRParser.Integer or _la==XplorMRParser.Real:
                self.state = 902
                self.number()
                self.state = 903
                self.number()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Carbon_shift_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def carbon_shift_assign(self):
            return self.getTypedRuleContext(XplorMRParser.Carbon_shift_assignContext,0)


        def Classification(self):
            return self.getToken(XplorMRParser.Classification, 0)

        def Simple_name(self):
            return self.getToken(XplorMRParser.Simple_name, 0)

        def Expectation(self):
            return self.getToken(XplorMRParser.Expectation, 0)

        def Integer(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Integer)
            else:
                return self.getToken(XplorMRParser.Integer, i)

        def number_s(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Number_sContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Number_sContext,i)


        def ForceConstant(self):
            return self.getToken(XplorMRParser.ForceConstant, 0)

        def Nrestraints(self):
            return self.getToken(XplorMRParser.Nrestraints, 0)

        def PhiStep(self):
            return self.getToken(XplorMRParser.PhiStep, 0)

        def PsiStep(self):
            return self.getToken(XplorMRParser.PsiStep, 0)

        def Potential(self):
            return self.getToken(XplorMRParser.Potential, 0)

        def Rdc_potential(self):
            return self.getToken(XplorMRParser.Rdc_potential, 0)

        def Print(self):
            return self.getToken(XplorMRParser.Print, 0)

        def Threshold(self):
            return self.getToken(XplorMRParser.Threshold, 0)

        def carbon_shift_rcoil(self):
            return self.getTypedRuleContext(XplorMRParser.Carbon_shift_rcoilContext,0)


        def Reset(self):
            return self.getToken(XplorMRParser.Reset, 0)

        def Zero(self):
            return self.getToken(XplorMRParser.Zero, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_carbon_shift_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCarbon_shift_statement" ):
                listener.enterCarbon_shift_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCarbon_shift_statement" ):
                listener.exitCarbon_shift_statement(self)




    def carbon_shift_statement(self):

        localctx = XplorMRParser.Carbon_shift_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 90, self.RULE_carbon_shift_statement)
        try:
            self.state = 933
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [XplorMRParser.Assign]:
                self.enterOuterAlt(localctx, 1)
                self.state = 907
                self.carbon_shift_assign()
                pass
            elif token in [XplorMRParser.Classification]:
                self.enterOuterAlt(localctx, 2)
                self.state = 908
                self.match(XplorMRParser.Classification)
                self.state = 909
                self.match(XplorMRParser.Simple_name)
                pass
            elif token in [XplorMRParser.Expectation]:
                self.enterOuterAlt(localctx, 3)
                self.state = 910
                self.match(XplorMRParser.Expectation)
                self.state = 911
                self.match(XplorMRParser.Integer)
                self.state = 912
                self.match(XplorMRParser.Integer)
                self.state = 913
                self.number_s()
                self.state = 914
                self.number_s()
                self.state = 915
                self.number_s()
                pass
            elif token in [XplorMRParser.ForceConstant]:
                self.enterOuterAlt(localctx, 4)
                self.state = 917
                self.match(XplorMRParser.ForceConstant)
                self.state = 918
                self.number_s()
                pass
            elif token in [XplorMRParser.Nrestraints]:
                self.enterOuterAlt(localctx, 5)
                self.state = 919
                self.match(XplorMRParser.Nrestraints)
                self.state = 920
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.PhiStep]:
                self.enterOuterAlt(localctx, 6)
                self.state = 921
                self.match(XplorMRParser.PhiStep)
                self.state = 922
                self.number_s()
                pass
            elif token in [XplorMRParser.PsiStep]:
                self.enterOuterAlt(localctx, 7)
                self.state = 923
                self.match(XplorMRParser.PsiStep)
                self.state = 924
                self.number_s()
                pass
            elif token in [XplorMRParser.Potential]:
                self.enterOuterAlt(localctx, 8)
                self.state = 925
                self.match(XplorMRParser.Potential)
                self.state = 926
                self.match(XplorMRParser.Rdc_potential)
                pass
            elif token in [XplorMRParser.Print]:
                self.enterOuterAlt(localctx, 9)
                self.state = 927
                self.match(XplorMRParser.Print)
                self.state = 928
                self.match(XplorMRParser.Threshold)
                self.state = 929
                self.number_s()
                pass
            elif token in [XplorMRParser.Rcoil]:
                self.enterOuterAlt(localctx, 10)
                self.state = 930
                self.carbon_shift_rcoil()
                pass
            elif token in [XplorMRParser.Reset]:
                self.enterOuterAlt(localctx, 11)
                self.state = 931
                self.match(XplorMRParser.Reset)
                pass
            elif token in [XplorMRParser.Zero]:
                self.enterOuterAlt(localctx, 12)
                self.state = 932
                self.match(XplorMRParser.Zero)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Carbon_shift_assignContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Assign(self):
            return self.getToken(XplorMRParser.Assign, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.SelectionContext,i)


        def number(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.NumberContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.NumberContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_carbon_shift_assign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCarbon_shift_assign" ):
                listener.enterCarbon_shift_assign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCarbon_shift_assign" ):
                listener.exitCarbon_shift_assign(self)




    def carbon_shift_assign(self):

        localctx = XplorMRParser.Carbon_shift_assignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 92, self.RULE_carbon_shift_assign)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 935
            self.match(XplorMRParser.Assign)
            self.state = 936
            self.selection()
            self.state = 937
            self.selection()
            self.state = 938
            self.selection()
            self.state = 939
            self.selection()
            self.state = 940
            self.selection()
            self.state = 941
            self.number()
            self.state = 942
            self.number()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Carbon_shift_rcoilContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Rcoil(self):
            return self.getToken(XplorMRParser.Rcoil, 0)

        def selection(self):
            return self.getTypedRuleContext(XplorMRParser.SelectionContext,0)


        def number_s(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Number_sContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Number_sContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_carbon_shift_rcoil

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCarbon_shift_rcoil" ):
                listener.enterCarbon_shift_rcoil(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCarbon_shift_rcoil" ):
                listener.exitCarbon_shift_rcoil(self)




    def carbon_shift_rcoil(self):

        localctx = XplorMRParser.Carbon_shift_rcoilContext(self, self._ctx, self.state)
        self.enterRule(localctx, 94, self.RULE_carbon_shift_rcoil)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 944
            self.match(XplorMRParser.Rcoil)
            self.state = 945
            self.selection()
            self.state = 946
            self.number_s()
            self.state = 947
            self.number_s()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Proton_shift_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def observed(self):
            return self.getTypedRuleContext(XplorMRParser.ObservedContext,0)


        def proton_shift_rcoil(self):
            return self.getTypedRuleContext(XplorMRParser.Proton_shift_rcoilContext,0)


        def proton_shift_anisotropy(self):
            return self.getTypedRuleContext(XplorMRParser.Proton_shift_anisotropyContext,0)


        def proton_shift_amides(self):
            return self.getTypedRuleContext(XplorMRParser.Proton_shift_amidesContext,0)


        def proton_shift_carbons(self):
            return self.getTypedRuleContext(XplorMRParser.Proton_shift_carbonsContext,0)


        def proton_shift_nitrogens(self):
            return self.getTypedRuleContext(XplorMRParser.Proton_shift_nitrogensContext,0)


        def proton_shift_oxygens(self):
            return self.getTypedRuleContext(XplorMRParser.Proton_shift_oxygensContext,0)


        def proton_shift_ring_atoms(self):
            return self.getTypedRuleContext(XplorMRParser.Proton_shift_ring_atomsContext,0)


        def proton_shift_alphas_and_amides(self):
            return self.getTypedRuleContext(XplorMRParser.Proton_shift_alphas_and_amidesContext,0)


        def Classification(self):
            return self.getToken(XplorMRParser.Classification, 0)

        def Simple_name(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Simple_name)
            else:
                return self.getToken(XplorMRParser.Simple_name, i)

        def Error(self):
            return self.getToken(XplorMRParser.Error, 0)

        def number_s(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Number_sContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Number_sContext,i)


        def DegEnergy(self):
            return self.getToken(XplorMRParser.DegEnergy, 0)

        def Integer(self):
            return self.getToken(XplorMRParser.Integer, 0)

        def ForceConstant(self):
            return self.getToken(XplorMRParser.ForceConstant, 0)

        def Potential(self):
            return self.getToken(XplorMRParser.Potential, 0)

        def Coupling_potential(self):
            return self.getToken(XplorMRParser.Coupling_potential, 0)

        def Print(self):
            return self.getToken(XplorMRParser.Print, 0)

        def Threshold(self):
            return self.getToken(XplorMRParser.Threshold, 0)

        def All(self):
            return self.getToken(XplorMRParser.All, 0)

        def Reset(self):
            return self.getToken(XplorMRParser.Reset, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_proton_shift_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProton_shift_statement" ):
                listener.enterProton_shift_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProton_shift_statement" ):
                listener.exitProton_shift_statement(self)




    def proton_shift_statement(self):

        localctx = XplorMRParser.Proton_shift_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 96, self.RULE_proton_shift_statement)
        self._la = 0 # Token type
        try:
            self.state = 982
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [XplorMRParser.Observed]:
                self.enterOuterAlt(localctx, 1)
                self.state = 949
                self.observed()
                pass
            elif token in [XplorMRParser.Rcoil]:
                self.enterOuterAlt(localctx, 2)
                self.state = 950
                self.proton_shift_rcoil()
                pass
            elif token in [XplorMRParser.Anisotropy]:
                self.enterOuterAlt(localctx, 3)
                self.state = 951
                self.proton_shift_anisotropy()
                pass
            elif token in [XplorMRParser.Amides]:
                self.enterOuterAlt(localctx, 4)
                self.state = 952
                self.proton_shift_amides()
                pass
            elif token in [XplorMRParser.Carbons]:
                self.enterOuterAlt(localctx, 5)
                self.state = 953
                self.proton_shift_carbons()
                pass
            elif token in [XplorMRParser.Nitrogens]:
                self.enterOuterAlt(localctx, 6)
                self.state = 954
                self.proton_shift_nitrogens()
                pass
            elif token in [XplorMRParser.Oxygens]:
                self.enterOuterAlt(localctx, 7)
                self.state = 955
                self.proton_shift_oxygens()
                pass
            elif token in [XplorMRParser.RingAtoms]:
                self.enterOuterAlt(localctx, 8)
                self.state = 956
                self.proton_shift_ring_atoms()
                pass
            elif token in [XplorMRParser.AlphasAndAmides]:
                self.enterOuterAlt(localctx, 9)
                self.state = 957
                self.proton_shift_alphas_and_amides()
                pass
            elif token in [XplorMRParser.Classification]:
                self.enterOuterAlt(localctx, 10)
                self.state = 958
                self.match(XplorMRParser.Classification)
                self.state = 959
                self.match(XplorMRParser.Simple_name)
                pass
            elif token in [XplorMRParser.Error]:
                self.enterOuterAlt(localctx, 11)
                self.state = 960
                self.match(XplorMRParser.Error)
                self.state = 961
                self.number_s()
                pass
            elif token in [XplorMRParser.DegEnergy]:
                self.enterOuterAlt(localctx, 12)
                self.state = 962
                self.match(XplorMRParser.DegEnergy)
                self.state = 963
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.ForceConstant]:
                self.enterOuterAlt(localctx, 13)
                self.state = 964
                self.match(XplorMRParser.ForceConstant)
                self.state = 965
                self.number_s()
                self.state = 967
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Integer or _la==XplorMRParser.Real:
                    self.state = 966
                    self.number_s()


                pass
            elif token in [XplorMRParser.Potential]:
                self.enterOuterAlt(localctx, 14)
                self.state = 969
                self.match(XplorMRParser.Potential)
                self.state = 970
                self.match(XplorMRParser.Coupling_potential)
                pass
            elif token in [XplorMRParser.Print]:
                self.enterOuterAlt(localctx, 15)
                self.state = 971
                self.match(XplorMRParser.Print)
                self.state = 972
                self.match(XplorMRParser.Threshold)
                self.state = 973
                self.number_s()
                self.state = 977
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [XplorMRParser.All]:
                    self.state = 974
                    self.match(XplorMRParser.All)
                    pass
                elif token in [XplorMRParser.Classification]:
                    self.state = 975
                    self.match(XplorMRParser.Classification)
                    self.state = 976
                    self.match(XplorMRParser.Simple_name)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 979
                self.match(XplorMRParser.Simple_name)
                pass
            elif token in [XplorMRParser.Reset]:
                self.enterOuterAlt(localctx, 16)
                self.state = 981
                self.match(XplorMRParser.Reset)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ObservedContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Observed(self):
            return self.getToken(XplorMRParser.Observed, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.SelectionContext,i)


        def number_s(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Number_sContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Number_sContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_observed

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterObserved" ):
                listener.enterObserved(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitObserved" ):
                listener.exitObserved(self)




    def observed(self):

        localctx = XplorMRParser.ObservedContext(self, self._ctx, self.state)
        self.enterRule(localctx, 98, self.RULE_observed)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 984
            self.match(XplorMRParser.Observed)
            self.state = 985
            self.selection()
            self.state = 987
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==XplorMRParser.L_paren:
                self.state = 986
                self.selection()


            self.state = 989
            self.number_s()
            self.state = 991
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==XplorMRParser.Integer or _la==XplorMRParser.Real:
                self.state = 990
                self.number_s()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Proton_shift_rcoilContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Rcoil(self):
            return self.getToken(XplorMRParser.Rcoil, 0)

        def selection(self):
            return self.getTypedRuleContext(XplorMRParser.SelectionContext,0)


        def number_s(self):
            return self.getTypedRuleContext(XplorMRParser.Number_sContext,0)


        def getRuleIndex(self):
            return XplorMRParser.RULE_proton_shift_rcoil

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProton_shift_rcoil" ):
                listener.enterProton_shift_rcoil(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProton_shift_rcoil" ):
                listener.exitProton_shift_rcoil(self)




    def proton_shift_rcoil(self):

        localctx = XplorMRParser.Proton_shift_rcoilContext(self, self._ctx, self.state)
        self.enterRule(localctx, 100, self.RULE_proton_shift_rcoil)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 993
            self.match(XplorMRParser.Rcoil)
            self.state = 994
            self.selection()
            self.state = 995
            self.number_s()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Proton_shift_anisotropyContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Anisotropy(self):
            return self.getToken(XplorMRParser.Anisotropy, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.SelectionContext,i)


        def Simple_name(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Simple_name)
            else:
                return self.getToken(XplorMRParser.Simple_name, i)

        def Logical(self):
            return self.getToken(XplorMRParser.Logical, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_proton_shift_anisotropy

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProton_shift_anisotropy" ):
                listener.enterProton_shift_anisotropy(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProton_shift_anisotropy" ):
                listener.exitProton_shift_anisotropy(self)




    def proton_shift_anisotropy(self):

        localctx = XplorMRParser.Proton_shift_anisotropyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 102, self.RULE_proton_shift_anisotropy)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 997
            self.match(XplorMRParser.Anisotropy)
            self.state = 998
            self.selection()
            self.state = 999
            self.selection()
            self.state = 1000
            self.selection()
            self.state = 1001
            self.match(XplorMRParser.Simple_name)
            self.state = 1003
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==XplorMRParser.Logical:
                self.state = 1002
                self.match(XplorMRParser.Logical)


            self.state = 1005
            self.match(XplorMRParser.Simple_name)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Proton_shift_amidesContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Amides(self):
            return self.getToken(XplorMRParser.Amides, 0)

        def selection(self):
            return self.getTypedRuleContext(XplorMRParser.SelectionContext,0)


        def getRuleIndex(self):
            return XplorMRParser.RULE_proton_shift_amides

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProton_shift_amides" ):
                listener.enterProton_shift_amides(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProton_shift_amides" ):
                listener.exitProton_shift_amides(self)




    def proton_shift_amides(self):

        localctx = XplorMRParser.Proton_shift_amidesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 104, self.RULE_proton_shift_amides)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1007
            self.match(XplorMRParser.Amides)
            self.state = 1008
            self.selection()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Proton_shift_carbonsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Carbons(self):
            return self.getToken(XplorMRParser.Carbons, 0)

        def selection(self):
            return self.getTypedRuleContext(XplorMRParser.SelectionContext,0)


        def getRuleIndex(self):
            return XplorMRParser.RULE_proton_shift_carbons

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProton_shift_carbons" ):
                listener.enterProton_shift_carbons(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProton_shift_carbons" ):
                listener.exitProton_shift_carbons(self)




    def proton_shift_carbons(self):

        localctx = XplorMRParser.Proton_shift_carbonsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 106, self.RULE_proton_shift_carbons)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1010
            self.match(XplorMRParser.Carbons)
            self.state = 1011
            self.selection()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Proton_shift_nitrogensContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Nitrogens(self):
            return self.getToken(XplorMRParser.Nitrogens, 0)

        def selection(self):
            return self.getTypedRuleContext(XplorMRParser.SelectionContext,0)


        def getRuleIndex(self):
            return XplorMRParser.RULE_proton_shift_nitrogens

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProton_shift_nitrogens" ):
                listener.enterProton_shift_nitrogens(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProton_shift_nitrogens" ):
                listener.exitProton_shift_nitrogens(self)




    def proton_shift_nitrogens(self):

        localctx = XplorMRParser.Proton_shift_nitrogensContext(self, self._ctx, self.state)
        self.enterRule(localctx, 108, self.RULE_proton_shift_nitrogens)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1013
            self.match(XplorMRParser.Nitrogens)
            self.state = 1014
            self.selection()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Proton_shift_oxygensContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Oxygens(self):
            return self.getToken(XplorMRParser.Oxygens, 0)

        def selection(self):
            return self.getTypedRuleContext(XplorMRParser.SelectionContext,0)


        def getRuleIndex(self):
            return XplorMRParser.RULE_proton_shift_oxygens

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProton_shift_oxygens" ):
                listener.enterProton_shift_oxygens(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProton_shift_oxygens" ):
                listener.exitProton_shift_oxygens(self)




    def proton_shift_oxygens(self):

        localctx = XplorMRParser.Proton_shift_oxygensContext(self, self._ctx, self.state)
        self.enterRule(localctx, 110, self.RULE_proton_shift_oxygens)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1016
            self.match(XplorMRParser.Oxygens)
            self.state = 1017
            self.selection()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Proton_shift_ring_atomsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RingAtoms(self):
            return self.getToken(XplorMRParser.RingAtoms, 0)

        def Simple_name(self):
            return self.getToken(XplorMRParser.Simple_name, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.SelectionContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_proton_shift_ring_atoms

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProton_shift_ring_atoms" ):
                listener.enterProton_shift_ring_atoms(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProton_shift_ring_atoms" ):
                listener.exitProton_shift_ring_atoms(self)




    def proton_shift_ring_atoms(self):

        localctx = XplorMRParser.Proton_shift_ring_atomsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 112, self.RULE_proton_shift_ring_atoms)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1019
            self.match(XplorMRParser.RingAtoms)
            self.state = 1020
            self.match(XplorMRParser.Simple_name)
            self.state = 1021
            self.selection()
            self.state = 1022
            self.selection()
            self.state = 1023
            self.selection()
            self.state = 1024
            self.selection()
            self.state = 1025
            self.selection()
            self.state = 1027
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==XplorMRParser.L_paren:
                self.state = 1026
                self.selection()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Proton_shift_alphas_and_amidesContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AlphasAndAmides(self):
            return self.getToken(XplorMRParser.AlphasAndAmides, 0)

        def selection(self):
            return self.getTypedRuleContext(XplorMRParser.SelectionContext,0)


        def getRuleIndex(self):
            return XplorMRParser.RULE_proton_shift_alphas_and_amides

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProton_shift_alphas_and_amides" ):
                listener.enterProton_shift_alphas_and_amides(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProton_shift_alphas_and_amides" ):
                listener.exitProton_shift_alphas_and_amides(self)




    def proton_shift_alphas_and_amides(self):

        localctx = XplorMRParser.Proton_shift_alphas_and_amidesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 114, self.RULE_proton_shift_alphas_and_amides)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1029
            self.match(XplorMRParser.AlphasAndAmides)
            self.state = 1030
            self.selection()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Ramachandran_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def rama_assign(self):
            return self.getTypedRuleContext(XplorMRParser.Rama_assignContext,0)


        def Classification(self):
            return self.getToken(XplorMRParser.Classification, 0)

        def Simple_name(self):
            return self.getToken(XplorMRParser.Simple_name, 0)

        def Cutoff(self):
            return self.getToken(XplorMRParser.Cutoff, 0)

        def number_s(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Number_sContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Number_sContext,i)


        def ForceConstant(self):
            return self.getToken(XplorMRParser.ForceConstant, 0)

        def Gaussian(self):
            return self.getToken(XplorMRParser.Gaussian, 0)

        def Nrestraints(self):
            return self.getToken(XplorMRParser.Nrestraints, 0)

        def Integer(self):
            return self.getToken(XplorMRParser.Integer, 0)

        def Phase(self):
            return self.getToken(XplorMRParser.Phase, 0)

        def Print(self):
            return self.getToken(XplorMRParser.Print, 0)

        def Threshold(self):
            return self.getToken(XplorMRParser.Threshold, 0)

        def All(self):
            return self.getToken(XplorMRParser.All, 0)

        def Quartic(self):
            return self.getToken(XplorMRParser.Quartic, 0)

        def Reset(self):
            return self.getToken(XplorMRParser.Reset, 0)

        def Scale(self):
            return self.getToken(XplorMRParser.Scale, 0)

        def Shape(self):
            return self.getToken(XplorMRParser.Shape, 0)

        def Gauss_or_Quart(self):
            return self.getToken(XplorMRParser.Gauss_or_Quart, 0)

        def Size(self):
            return self.getToken(XplorMRParser.Size, 0)

        def Dimensions(self):
            return self.getToken(XplorMRParser.Dimensions, 0)

        def Sort(self):
            return self.getToken(XplorMRParser.Sort, 0)

        def Zero(self):
            return self.getToken(XplorMRParser.Zero, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_ramachandran_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRamachandran_statement" ):
                listener.enterRamachandran_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRamachandran_statement" ):
                listener.exitRamachandran_statement(self)




    def ramachandran_statement(self):

        localctx = XplorMRParser.Ramachandran_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 116, self.RULE_ramachandran_statement)
        self._la = 0 # Token type
        try:
            self.state = 1134
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [XplorMRParser.Assign]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1032
                self.rama_assign()
                pass
            elif token in [XplorMRParser.Classification]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1033
                self.match(XplorMRParser.Classification)
                self.state = 1034
                self.match(XplorMRParser.Simple_name)
                pass
            elif token in [XplorMRParser.Cutoff]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1035
                self.match(XplorMRParser.Cutoff)
                self.state = 1036
                self.number_s()
                pass
            elif token in [XplorMRParser.ForceConstant]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1037
                self.match(XplorMRParser.ForceConstant)
                self.state = 1038
                self.number_s()
                pass
            elif token in [XplorMRParser.Gaussian]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1039
                self.match(XplorMRParser.Gaussian)
                self.state = 1040
                self.number_s()
                self.state = 1041
                self.number_s()
                self.state = 1042
                self.number_s()
                self.state = 1047
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,80,self._ctx)
                if la_ == 1:
                    self.state = 1043
                    self.number_s()
                    self.state = 1044
                    self.number_s()
                    self.state = 1045
                    self.number_s()


                self.state = 1053
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,81,self._ctx)
                if la_ == 1:
                    self.state = 1049
                    self.number_s()
                    self.state = 1050
                    self.number_s()
                    self.state = 1051
                    self.number_s()


                self.state = 1059
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Integer or _la==XplorMRParser.Real:
                    self.state = 1055
                    self.number_s()
                    self.state = 1056
                    self.number_s()
                    self.state = 1057
                    self.number_s()


                pass
            elif token in [XplorMRParser.Nrestraints]:
                self.enterOuterAlt(localctx, 6)
                self.state = 1061
                self.match(XplorMRParser.Nrestraints)
                self.state = 1062
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.Phase]:
                self.enterOuterAlt(localctx, 7)
                self.state = 1063
                self.match(XplorMRParser.Phase)
                self.state = 1064
                self.number_s()
                self.state = 1065
                self.number_s()
                self.state = 1066
                self.number_s()
                self.state = 1071
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,83,self._ctx)
                if la_ == 1:
                    self.state = 1067
                    self.number_s()
                    self.state = 1068
                    self.number_s()
                    self.state = 1069
                    self.number_s()


                self.state = 1077
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,84,self._ctx)
                if la_ == 1:
                    self.state = 1073
                    self.number_s()
                    self.state = 1074
                    self.number_s()
                    self.state = 1075
                    self.number_s()


                self.state = 1083
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Integer or _la==XplorMRParser.Real:
                    self.state = 1079
                    self.number_s()
                    self.state = 1080
                    self.number_s()
                    self.state = 1081
                    self.number_s()


                pass
            elif token in [XplorMRParser.Print]:
                self.enterOuterAlt(localctx, 8)
                self.state = 1085
                self.match(XplorMRParser.Print)
                self.state = 1086
                self.match(XplorMRParser.Threshold)
                self.state = 1087
                self.number_s()
                self.state = 1091
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [XplorMRParser.All]:
                    self.state = 1088
                    self.match(XplorMRParser.All)
                    pass
                elif token in [XplorMRParser.Classification]:
                    self.state = 1089
                    self.match(XplorMRParser.Classification)
                    self.state = 1090
                    self.match(XplorMRParser.Simple_name)
                    pass
                else:
                    raise NoViableAltException(self)

                pass
            elif token in [XplorMRParser.Quartic]:
                self.enterOuterAlt(localctx, 9)
                self.state = 1093
                self.match(XplorMRParser.Quartic)
                self.state = 1094
                self.number_s()
                self.state = 1095
                self.number_s()
                self.state = 1096
                self.number_s()
                self.state = 1101
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,87,self._ctx)
                if la_ == 1:
                    self.state = 1097
                    self.number_s()
                    self.state = 1098
                    self.number_s()
                    self.state = 1099
                    self.number_s()


                self.state = 1107
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,88,self._ctx)
                if la_ == 1:
                    self.state = 1103
                    self.number_s()
                    self.state = 1104
                    self.number_s()
                    self.state = 1105
                    self.number_s()


                self.state = 1113
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Integer or _la==XplorMRParser.Real:
                    self.state = 1109
                    self.number_s()
                    self.state = 1110
                    self.number_s()
                    self.state = 1111
                    self.number_s()


                pass
            elif token in [XplorMRParser.Reset]:
                self.enterOuterAlt(localctx, 10)
                self.state = 1115
                self.match(XplorMRParser.Reset)
                pass
            elif token in [XplorMRParser.Scale]:
                self.enterOuterAlt(localctx, 11)
                self.state = 1116
                self.match(XplorMRParser.Scale)
                self.state = 1117
                self.number_s()
                pass
            elif token in [XplorMRParser.Shape]:
                self.enterOuterAlt(localctx, 12)
                self.state = 1118
                self.match(XplorMRParser.Shape)
                self.state = 1119
                self.match(XplorMRParser.Gauss_or_Quart)
                pass
            elif token in [XplorMRParser.Size]:
                self.enterOuterAlt(localctx, 13)
                self.state = 1120
                self.match(XplorMRParser.Size)
                self.state = 1121
                self.match(XplorMRParser.Dimensions)
                self.state = 1122
                self.number_s()
                self.state = 1124
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,90,self._ctx)
                if la_ == 1:
                    self.state = 1123
                    self.number_s()


                self.state = 1127
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,91,self._ctx)
                if la_ == 1:
                    self.state = 1126
                    self.number_s()


                self.state = 1130
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Integer or _la==XplorMRParser.Real:
                    self.state = 1129
                    self.number_s()


                pass
            elif token in [XplorMRParser.Sort]:
                self.enterOuterAlt(localctx, 14)
                self.state = 1132
                self.match(XplorMRParser.Sort)
                pass
            elif token in [XplorMRParser.Zero]:
                self.enterOuterAlt(localctx, 15)
                self.state = 1133
                self.match(XplorMRParser.Zero)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Rama_assignContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Assign(self):
            return self.getToken(XplorMRParser.Assign, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.SelectionContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_rama_assign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRama_assign" ):
                listener.enterRama_assign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRama_assign" ):
                listener.exitRama_assign(self)




    def rama_assign(self):

        localctx = XplorMRParser.Rama_assignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 118, self.RULE_rama_assign)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1136
            self.match(XplorMRParser.Assign)
            self.state = 1137
            self.selection()
            self.state = 1138
            self.selection()
            self.state = 1139
            self.selection()
            self.state = 1140
            self.selection()
            self.state = 1146
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,94,self._ctx)
            if la_ == 1:
                self.state = 1141
                self.selection()
                self.state = 1142
                self.selection()
                self.state = 1143
                self.selection()
                self.state = 1144
                self.selection()


            self.state = 1153
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,95,self._ctx)
            if la_ == 1:
                self.state = 1148
                self.selection()
                self.state = 1149
                self.selection()
                self.state = 1150
                self.selection()
                self.state = 1151
                self.selection()


            self.state = 1160
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==XplorMRParser.L_paren:
                self.state = 1155
                self.selection()
                self.state = 1156
                self.selection()
                self.state = 1157
                self.selection()
                self.state = 1158
                self.selection()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Collapse_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def coll_assign(self):
            return self.getTypedRuleContext(XplorMRParser.Coll_assignContext,0)


        def Scale(self):
            return self.getToken(XplorMRParser.Scale, 0)

        def number_s(self):
            return self.getTypedRuleContext(XplorMRParser.Number_sContext,0)


        def Print(self):
            return self.getToken(XplorMRParser.Print, 0)

        def Reset(self):
            return self.getToken(XplorMRParser.Reset, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_collapse_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCollapse_statement" ):
                listener.enterCollapse_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCollapse_statement" ):
                listener.exitCollapse_statement(self)




    def collapse_statement(self):

        localctx = XplorMRParser.Collapse_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 120, self.RULE_collapse_statement)
        try:
            self.state = 1167
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [XplorMRParser.Assign]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1162
                self.coll_assign()
                pass
            elif token in [XplorMRParser.Scale]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1163
                self.match(XplorMRParser.Scale)
                self.state = 1164
                self.number_s()
                pass
            elif token in [XplorMRParser.Print]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1165
                self.match(XplorMRParser.Print)
                pass
            elif token in [XplorMRParser.Reset]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1166
                self.match(XplorMRParser.Reset)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Coll_assignContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Assign(self):
            return self.getToken(XplorMRParser.Assign, 0)

        def selection(self):
            return self.getTypedRuleContext(XplorMRParser.SelectionContext,0)


        def number(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.NumberContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.NumberContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_coll_assign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColl_assign" ):
                listener.enterColl_assign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColl_assign" ):
                listener.exitColl_assign(self)




    def coll_assign(self):

        localctx = XplorMRParser.Coll_assignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 122, self.RULE_coll_assign)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1169
            self.match(XplorMRParser.Assign)
            self.state = 1170
            self.selection()
            self.state = 1171
            self.number()
            self.state = 1172
            self.number()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Diffusion_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def dani_assign(self):
            return self.getTypedRuleContext(XplorMRParser.Dani_assignContext,0)


        def Classification(self):
            return self.getToken(XplorMRParser.Classification, 0)

        def Simple_name(self):
            return self.getToken(XplorMRParser.Simple_name, 0)

        def Coefficients(self):
            return self.getToken(XplorMRParser.Coefficients, 0)

        def number_s(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Number_sContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Number_sContext,i)


        def ForceConstant(self):
            return self.getToken(XplorMRParser.ForceConstant, 0)

        def Nrestraints(self):
            return self.getToken(XplorMRParser.Nrestraints, 0)

        def Integer(self):
            return self.getToken(XplorMRParser.Integer, 0)

        def Potential(self):
            return self.getToken(XplorMRParser.Potential, 0)

        def Rdc_potential(self):
            return self.getToken(XplorMRParser.Rdc_potential, 0)

        def Print(self):
            return self.getToken(XplorMRParser.Print, 0)

        def Threshold(self):
            return self.getToken(XplorMRParser.Threshold, 0)

        def Reset(self):
            return self.getToken(XplorMRParser.Reset, 0)

        def Type(self):
            return self.getToken(XplorMRParser.Type, 0)

        def Diff_anis_types(self):
            return self.getToken(XplorMRParser.Diff_anis_types, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_diffusion_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDiffusion_statement" ):
                listener.enterDiffusion_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDiffusion_statement" ):
                listener.exitDiffusion_statement(self)




    def diffusion_statement(self):

        localctx = XplorMRParser.Diffusion_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 124, self.RULE_diffusion_statement)
        try:
            self.state = 1196
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [XplorMRParser.Assign]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1174
                self.dani_assign()
                pass
            elif token in [XplorMRParser.Classification]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1175
                self.match(XplorMRParser.Classification)
                self.state = 1176
                self.match(XplorMRParser.Simple_name)
                pass
            elif token in [XplorMRParser.Coefficients]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1177
                self.match(XplorMRParser.Coefficients)
                self.state = 1178
                self.number_s()
                self.state = 1179
                self.number_s()
                self.state = 1180
                self.number_s()
                self.state = 1181
                self.number_s()
                self.state = 1182
                self.number_s()
                pass
            elif token in [XplorMRParser.ForceConstant]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1184
                self.match(XplorMRParser.ForceConstant)
                self.state = 1185
                self.number_s()
                pass
            elif token in [XplorMRParser.Nrestraints]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1186
                self.match(XplorMRParser.Nrestraints)
                self.state = 1187
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.Potential]:
                self.enterOuterAlt(localctx, 6)
                self.state = 1188
                self.match(XplorMRParser.Potential)
                self.state = 1189
                self.match(XplorMRParser.Rdc_potential)
                pass
            elif token in [XplorMRParser.Print]:
                self.enterOuterAlt(localctx, 7)
                self.state = 1190
                self.match(XplorMRParser.Print)
                self.state = 1191
                self.match(XplorMRParser.Threshold)
                self.state = 1192
                self.number_s()
                pass
            elif token in [XplorMRParser.Reset]:
                self.enterOuterAlt(localctx, 8)
                self.state = 1193
                self.match(XplorMRParser.Reset)
                pass
            elif token in [XplorMRParser.Type]:
                self.enterOuterAlt(localctx, 9)
                self.state = 1194
                self.match(XplorMRParser.Type)
                self.state = 1195
                self.match(XplorMRParser.Diff_anis_types)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Dani_assignContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Assign(self):
            return self.getToken(XplorMRParser.Assign, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.SelectionContext,i)


        def number(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.NumberContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.NumberContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_dani_assign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDani_assign" ):
                listener.enterDani_assign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDani_assign" ):
                listener.exitDani_assign(self)




    def dani_assign(self):

        localctx = XplorMRParser.Dani_assignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 126, self.RULE_dani_assign)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1198
            self.match(XplorMRParser.Assign)
            self.state = 1199
            self.selection()
            self.state = 1200
            self.selection()
            self.state = 1201
            self.selection()
            self.state = 1202
            self.selection()
            self.state = 1203
            self.selection()
            self.state = 1204
            self.selection()
            self.state = 1205
            self.number()
            self.state = 1206
            self.number()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Orientation_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def orie_assign(self):
            return self.getTypedRuleContext(XplorMRParser.Orie_assignContext,0)


        def Classification(self):
            return self.getToken(XplorMRParser.Classification, 0)

        def Simple_name(self):
            return self.getToken(XplorMRParser.Simple_name, 0)

        def Cutoff(self):
            return self.getToken(XplorMRParser.Cutoff, 0)

        def number_s(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Number_sContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Number_sContext,i)


        def Height(self):
            return self.getToken(XplorMRParser.Height, 0)

        def ForceConstant(self):
            return self.getToken(XplorMRParser.ForceConstant, 0)

        def Gaussian(self):
            return self.getToken(XplorMRParser.Gaussian, 0)

        def MaxGaussians(self):
            return self.getToken(XplorMRParser.MaxGaussians, 0)

        def Integer(self):
            return self.getToken(XplorMRParser.Integer, 0)

        def NewGaussian(self):
            return self.getToken(XplorMRParser.NewGaussian, 0)

        def Nrestraints(self):
            return self.getToken(XplorMRParser.Nrestraints, 0)

        def Print(self):
            return self.getToken(XplorMRParser.Print, 0)

        def Threshold(self):
            return self.getToken(XplorMRParser.Threshold, 0)

        def All(self):
            return self.getToken(XplorMRParser.All, 0)

        def Quartic(self):
            return self.getToken(XplorMRParser.Quartic, 0)

        def Reset(self):
            return self.getToken(XplorMRParser.Reset, 0)

        def Residue(self):
            return self.getToken(XplorMRParser.Residue, 0)

        def Size(self):
            return self.getToken(XplorMRParser.Size, 0)

        def Zero(self):
            return self.getToken(XplorMRParser.Zero, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_orientation_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOrientation_statement" ):
                listener.enterOrientation_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOrientation_statement" ):
                listener.exitOrientation_statement(self)




    def orientation_statement(self):

        localctx = XplorMRParser.Orientation_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 128, self.RULE_orientation_statement)
        try:
            self.state = 1265
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [XplorMRParser.Assign]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1208
                self.orie_assign()
                pass
            elif token in [XplorMRParser.Classification]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1209
                self.match(XplorMRParser.Classification)
                self.state = 1210
                self.match(XplorMRParser.Simple_name)
                pass
            elif token in [XplorMRParser.Cutoff]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1211
                self.match(XplorMRParser.Cutoff)
                self.state = 1212
                self.number_s()
                pass
            elif token in [XplorMRParser.Height]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1213
                self.match(XplorMRParser.Height)
                self.state = 1214
                self.number_s()
                pass
            elif token in [XplorMRParser.ForceConstant]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1215
                self.match(XplorMRParser.ForceConstant)
                self.state = 1216
                self.number_s()
                pass
            elif token in [XplorMRParser.Gaussian]:
                self.enterOuterAlt(localctx, 6)
                self.state = 1217
                self.match(XplorMRParser.Gaussian)
                self.state = 1218
                self.number_s()
                self.state = 1219
                self.number_s()
                self.state = 1220
                self.number_s()
                self.state = 1221
                self.number_s()
                self.state = 1222
                self.number_s()
                self.state = 1223
                self.number_s()
                self.state = 1224
                self.number_s()
                pass
            elif token in [XplorMRParser.MaxGaussians]:
                self.enterOuterAlt(localctx, 7)
                self.state = 1226
                self.match(XplorMRParser.MaxGaussians)
                self.state = 1227
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.NewGaussian]:
                self.enterOuterAlt(localctx, 8)
                self.state = 1228
                self.match(XplorMRParser.NewGaussian)
                self.state = 1229
                self.number_s()
                self.state = 1230
                self.number_s()
                self.state = 1231
                self.number_s()
                self.state = 1232
                self.number_s()
                self.state = 1233
                self.number_s()
                self.state = 1234
                self.number_s()
                self.state = 1235
                self.number_s()
                self.state = 1236
                self.number_s()
                pass
            elif token in [XplorMRParser.Nrestraints]:
                self.enterOuterAlt(localctx, 9)
                self.state = 1238
                self.match(XplorMRParser.Nrestraints)
                self.state = 1239
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.Print]:
                self.enterOuterAlt(localctx, 10)
                self.state = 1240
                self.match(XplorMRParser.Print)
                self.state = 1241
                self.match(XplorMRParser.Threshold)
                self.state = 1242
                self.number_s()
                self.state = 1246
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [XplorMRParser.All]:
                    self.state = 1243
                    self.match(XplorMRParser.All)
                    pass
                elif token in [XplorMRParser.Classification]:
                    self.state = 1244
                    self.match(XplorMRParser.Classification)
                    self.state = 1245
                    self.match(XplorMRParser.Simple_name)
                    pass
                else:
                    raise NoViableAltException(self)

                pass
            elif token in [XplorMRParser.Quartic]:
                self.enterOuterAlt(localctx, 11)
                self.state = 1248
                self.match(XplorMRParser.Quartic)
                self.state = 1249
                self.number_s()
                self.state = 1250
                self.number_s()
                self.state = 1251
                self.number_s()
                self.state = 1252
                self.number_s()
                self.state = 1253
                self.number_s()
                self.state = 1254
                self.number_s()
                self.state = 1255
                self.number_s()
                pass
            elif token in [XplorMRParser.Reset]:
                self.enterOuterAlt(localctx, 12)
                self.state = 1257
                self.match(XplorMRParser.Reset)
                pass
            elif token in [XplorMRParser.Residue]:
                self.enterOuterAlt(localctx, 13)
                self.state = 1258
                self.match(XplorMRParser.Residue)
                self.state = 1259
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.Size]:
                self.enterOuterAlt(localctx, 14)
                self.state = 1260
                self.match(XplorMRParser.Size)
                self.state = 1261
                self.number_s()
                self.state = 1262
                self.number_s()
                pass
            elif token in [XplorMRParser.Zero]:
                self.enterOuterAlt(localctx, 15)
                self.state = 1264
                self.match(XplorMRParser.Zero)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Orie_assignContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Assign(self):
            return self.getToken(XplorMRParser.Assign, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.SelectionContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_orie_assign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOrie_assign" ):
                listener.enterOrie_assign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOrie_assign" ):
                listener.exitOrie_assign(self)




    def orie_assign(self):

        localctx = XplorMRParser.Orie_assignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 130, self.RULE_orie_assign)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1267
            self.match(XplorMRParser.Assign)
            self.state = 1268
            self.selection()
            self.state = 1269
            self.selection()
            self.state = 1270
            self.selection()
            self.state = 1271
            self.selection()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Csa_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def csa_assign(self):
            return self.getTypedRuleContext(XplorMRParser.Csa_assignContext,0)


        def Classification(self):
            return self.getToken(XplorMRParser.Classification, 0)

        def Simple_name(self):
            return self.getToken(XplorMRParser.Simple_name, 0)

        def Scale(self):
            return self.getToken(XplorMRParser.Scale, 0)

        def number_s(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Number_sContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Number_sContext,i)


        def Type(self):
            return self.getToken(XplorMRParser.Type, 0)

        def Csa_types(self):
            return self.getToken(XplorMRParser.Csa_types, 0)

        def Coefficients(self):
            return self.getToken(XplorMRParser.Coefficients, 0)

        def Sigma(self):
            return self.getToken(XplorMRParser.Sigma, 0)

        def ForceConstant(self):
            return self.getToken(XplorMRParser.ForceConstant, 0)

        def Nrestraints(self):
            return self.getToken(XplorMRParser.Nrestraints, 0)

        def Integer(self):
            return self.getToken(XplorMRParser.Integer, 0)

        def Potential(self):
            return self.getToken(XplorMRParser.Potential, 0)

        def Rdc_potential(self):
            return self.getToken(XplorMRParser.Rdc_potential, 0)

        def Print(self):
            return self.getToken(XplorMRParser.Print, 0)

        def Threshold(self):
            return self.getToken(XplorMRParser.Threshold, 0)

        def Reset(self):
            return self.getToken(XplorMRParser.Reset, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_csa_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCsa_statement" ):
                listener.enterCsa_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCsa_statement" ):
                listener.exitCsa_statement(self)




    def csa_statement(self):

        localctx = XplorMRParser.Csa_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 132, self.RULE_csa_statement)
        try:
            self.state = 1300
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [XplorMRParser.Assign]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1273
                self.csa_assign()
                pass
            elif token in [XplorMRParser.Classification]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1274
                self.match(XplorMRParser.Classification)
                self.state = 1275
                self.match(XplorMRParser.Simple_name)
                pass
            elif token in [XplorMRParser.Scale]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1276
                self.match(XplorMRParser.Scale)
                self.state = 1277
                self.number_s()
                pass
            elif token in [XplorMRParser.Type]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1278
                self.match(XplorMRParser.Type)
                self.state = 1279
                self.match(XplorMRParser.Csa_types)
                pass
            elif token in [XplorMRParser.Coefficients]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1280
                self.match(XplorMRParser.Coefficients)
                self.state = 1281
                self.number_s()
                self.state = 1282
                self.number_s()
                self.state = 1283
                self.number_s()
                pass
            elif token in [XplorMRParser.Sigma]:
                self.enterOuterAlt(localctx, 6)
                self.state = 1285
                self.match(XplorMRParser.Sigma)
                self.state = 1286
                self.number_s()
                self.state = 1287
                self.number_s()
                self.state = 1288
                self.number_s()
                pass
            elif token in [XplorMRParser.ForceConstant]:
                self.enterOuterAlt(localctx, 7)
                self.state = 1290
                self.match(XplorMRParser.ForceConstant)
                self.state = 1291
                self.number_s()
                pass
            elif token in [XplorMRParser.Nrestraints]:
                self.enterOuterAlt(localctx, 8)
                self.state = 1292
                self.match(XplorMRParser.Nrestraints)
                self.state = 1293
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.Potential]:
                self.enterOuterAlt(localctx, 9)
                self.state = 1294
                self.match(XplorMRParser.Potential)
                self.state = 1295
                self.match(XplorMRParser.Rdc_potential)
                pass
            elif token in [XplorMRParser.Print]:
                self.enterOuterAlt(localctx, 10)
                self.state = 1296
                self.match(XplorMRParser.Print)
                self.state = 1297
                self.match(XplorMRParser.Threshold)
                self.state = 1298
                self.number_s()
                pass
            elif token in [XplorMRParser.Reset]:
                self.enterOuterAlt(localctx, 11)
                self.state = 1299
                self.match(XplorMRParser.Reset)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Csa_assignContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Assign(self):
            return self.getToken(XplorMRParser.Assign, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.SelectionContext,i)


        def number(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.NumberContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.NumberContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_csa_assign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCsa_assign" ):
                listener.enterCsa_assign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCsa_assign" ):
                listener.exitCsa_assign(self)




    def csa_assign(self):

        localctx = XplorMRParser.Csa_assignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 134, self.RULE_csa_assign)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1302
            self.match(XplorMRParser.Assign)
            self.state = 1303
            self.selection()
            self.state = 1304
            self.selection()
            self.state = 1305
            self.selection()
            self.state = 1306
            self.selection()
            self.state = 1307
            self.selection()
            self.state = 1308
            self.selection()
            self.state = 1309
            self.selection()
            self.state = 1310
            self.number()
            self.state = 1311
            self.number()
            self.state = 1312
            self.number()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pcsa_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def csa_assign(self):
            return self.getTypedRuleContext(XplorMRParser.Csa_assignContext,0)


        def Classification(self):
            return self.getToken(XplorMRParser.Classification, 0)

        def Simple_name(self):
            return self.getToken(XplorMRParser.Simple_name, 0)

        def Scale(self):
            return self.getToken(XplorMRParser.Scale, 0)

        def number_s(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Number_sContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Number_sContext,i)


        def Coefficients(self):
            return self.getToken(XplorMRParser.Coefficients, 0)

        def Sigma(self):
            return self.getToken(XplorMRParser.Sigma, 0)

        def ForceConstant(self):
            return self.getToken(XplorMRParser.ForceConstant, 0)

        def Nrestraints(self):
            return self.getToken(XplorMRParser.Nrestraints, 0)

        def Integer(self):
            return self.getToken(XplorMRParser.Integer, 0)

        def Potential(self):
            return self.getToken(XplorMRParser.Potential, 0)

        def Rdc_potential(self):
            return self.getToken(XplorMRParser.Rdc_potential, 0)

        def Print(self):
            return self.getToken(XplorMRParser.Print, 0)

        def Threshold(self):
            return self.getToken(XplorMRParser.Threshold, 0)

        def Reset(self):
            return self.getToken(XplorMRParser.Reset, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_pcsa_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPcsa_statement" ):
                listener.enterPcsa_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPcsa_statement" ):
                listener.exitPcsa_statement(self)




    def pcsa_statement(self):

        localctx = XplorMRParser.Pcsa_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 136, self.RULE_pcsa_statement)
        try:
            self.state = 1340
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [XplorMRParser.Assign]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1314
                self.csa_assign()
                pass
            elif token in [XplorMRParser.Classification]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1315
                self.match(XplorMRParser.Classification)
                self.state = 1316
                self.match(XplorMRParser.Simple_name)
                pass
            elif token in [XplorMRParser.Scale]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1317
                self.match(XplorMRParser.Scale)
                self.state = 1318
                self.number_s()
                pass
            elif token in [XplorMRParser.Coefficients]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1319
                self.match(XplorMRParser.Coefficients)
                self.state = 1320
                self.number_s()
                self.state = 1321
                self.number_s()
                self.state = 1322
                self.number_s()
                pass
            elif token in [XplorMRParser.Sigma]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1324
                self.match(XplorMRParser.Sigma)
                self.state = 1325
                self.number_s()
                self.state = 1326
                self.number_s()
                self.state = 1327
                self.number_s()
                self.state = 1328
                self.number_s()
                pass
            elif token in [XplorMRParser.ForceConstant]:
                self.enterOuterAlt(localctx, 6)
                self.state = 1330
                self.match(XplorMRParser.ForceConstant)
                self.state = 1331
                self.number_s()
                pass
            elif token in [XplorMRParser.Nrestraints]:
                self.enterOuterAlt(localctx, 7)
                self.state = 1332
                self.match(XplorMRParser.Nrestraints)
                self.state = 1333
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.Potential]:
                self.enterOuterAlt(localctx, 8)
                self.state = 1334
                self.match(XplorMRParser.Potential)
                self.state = 1335
                self.match(XplorMRParser.Rdc_potential)
                pass
            elif token in [XplorMRParser.Print]:
                self.enterOuterAlt(localctx, 9)
                self.state = 1336
                self.match(XplorMRParser.Print)
                self.state = 1337
                self.match(XplorMRParser.Threshold)
                self.state = 1338
                self.number_s()
                pass
            elif token in [XplorMRParser.Reset]:
                self.enterOuterAlt(localctx, 10)
                self.state = 1339
                self.match(XplorMRParser.Reset)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class One_bond_coupling_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def one_bond_assign(self):
            return self.getTypedRuleContext(XplorMRParser.One_bond_assignContext,0)


        def Classification(self):
            return self.getToken(XplorMRParser.Classification, 0)

        def Simple_name(self):
            return self.getToken(XplorMRParser.Simple_name, 0)

        def Coefficients(self):
            return self.getToken(XplorMRParser.Coefficients, 0)

        def number_s(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Number_sContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Number_sContext,i)


        def ForceConstant(self):
            return self.getToken(XplorMRParser.ForceConstant, 0)

        def Nrestraints(self):
            return self.getToken(XplorMRParser.Nrestraints, 0)

        def Integer(self):
            return self.getToken(XplorMRParser.Integer, 0)

        def Potential(self):
            return self.getToken(XplorMRParser.Potential, 0)

        def Rdc_potential(self):
            return self.getToken(XplorMRParser.Rdc_potential, 0)

        def Print(self):
            return self.getToken(XplorMRParser.Print, 0)

        def Threshold(self):
            return self.getToken(XplorMRParser.Threshold, 0)

        def Reset(self):
            return self.getToken(XplorMRParser.Reset, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_one_bond_coupling_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOne_bond_coupling_statement" ):
                listener.enterOne_bond_coupling_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOne_bond_coupling_statement" ):
                listener.exitOne_bond_coupling_statement(self)




    def one_bond_coupling_statement(self):

        localctx = XplorMRParser.One_bond_coupling_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 138, self.RULE_one_bond_coupling_statement)
        try:
            self.state = 1364
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [XplorMRParser.Assign]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1342
                self.one_bond_assign()
                pass
            elif token in [XplorMRParser.Classification]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1343
                self.match(XplorMRParser.Classification)
                self.state = 1344
                self.match(XplorMRParser.Simple_name)
                pass
            elif token in [XplorMRParser.Coefficients]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1345
                self.match(XplorMRParser.Coefficients)
                self.state = 1346
                self.number_s()
                self.state = 1347
                self.number_s()
                self.state = 1348
                self.number_s()
                self.state = 1349
                self.number_s()
                self.state = 1350
                self.number_s()
                self.state = 1351
                self.number_s()
                self.state = 1352
                self.number_s()
                pass
            elif token in [XplorMRParser.ForceConstant]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1354
                self.match(XplorMRParser.ForceConstant)
                self.state = 1355
                self.number_s()
                pass
            elif token in [XplorMRParser.Nrestraints]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1356
                self.match(XplorMRParser.Nrestraints)
                self.state = 1357
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.Potential]:
                self.enterOuterAlt(localctx, 6)
                self.state = 1358
                self.match(XplorMRParser.Potential)
                self.state = 1359
                self.match(XplorMRParser.Rdc_potential)
                pass
            elif token in [XplorMRParser.Print]:
                self.enterOuterAlt(localctx, 7)
                self.state = 1360
                self.match(XplorMRParser.Print)
                self.state = 1361
                self.match(XplorMRParser.Threshold)
                self.state = 1362
                self.number_s()
                pass
            elif token in [XplorMRParser.Reset]:
                self.enterOuterAlt(localctx, 8)
                self.state = 1363
                self.match(XplorMRParser.Reset)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class One_bond_assignContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Assign(self):
            return self.getToken(XplorMRParser.Assign, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.SelectionContext,i)


        def number(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.NumberContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.NumberContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_one_bond_assign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOne_bond_assign" ):
                listener.enterOne_bond_assign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOne_bond_assign" ):
                listener.exitOne_bond_assign(self)




    def one_bond_assign(self):

        localctx = XplorMRParser.One_bond_assignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 140, self.RULE_one_bond_assign)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1366
            self.match(XplorMRParser.Assign)
            self.state = 1367
            self.selection()
            self.state = 1368
            self.selection()
            self.state = 1369
            self.selection()
            self.state = 1370
            self.selection()
            self.state = 1371
            self.selection()
            self.state = 1372
            self.selection()
            self.state = 1373
            self.selection()
            self.state = 1374
            self.selection()
            self.state = 1375
            self.number()
            self.state = 1376
            self.number()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Angle_db_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def angle_db_assign(self):
            return self.getTypedRuleContext(XplorMRParser.Angle_db_assignContext,0)


        def Classification(self):
            return self.getToken(XplorMRParser.Classification, 0)

        def Simple_name(self):
            return self.getToken(XplorMRParser.Simple_name, 0)

        def DerivFlag(self):
            return self.getToken(XplorMRParser.DerivFlag, 0)

        def Expectation(self):
            return self.getToken(XplorMRParser.Expectation, 0)

        def Integer(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Integer)
            else:
                return self.getToken(XplorMRParser.Integer, i)

        def number_s(self):
            return self.getTypedRuleContext(XplorMRParser.Number_sContext,0)


        def Error(self):
            return self.getToken(XplorMRParser.Error, 0)

        def ForceConstant(self):
            return self.getToken(XplorMRParser.ForceConstant, 0)

        def Nrestraints(self):
            return self.getToken(XplorMRParser.Nrestraints, 0)

        def Potential(self):
            return self.getToken(XplorMRParser.Potential, 0)

        def Rdc_potential(self):
            return self.getToken(XplorMRParser.Rdc_potential, 0)

        def Print(self):
            return self.getToken(XplorMRParser.Print, 0)

        def Threshold(self):
            return self.getToken(XplorMRParser.Threshold, 0)

        def All(self):
            return self.getToken(XplorMRParser.All, 0)

        def Reset(self):
            return self.getToken(XplorMRParser.Reset, 0)

        def Size(self):
            return self.getToken(XplorMRParser.Size, 0)

        def Angle_dihedral(self):
            return self.getToken(XplorMRParser.Angle_dihedral, 0)

        def Zero(self):
            return self.getToken(XplorMRParser.Zero, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_angle_db_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAngle_db_statement" ):
                listener.enterAngle_db_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAngle_db_statement" ):
                listener.exitAngle_db_statement(self)




    def angle_db_statement(self):

        localctx = XplorMRParser.Angle_db_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 142, self.RULE_angle_db_statement)
        try:
            self.state = 1409
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [XplorMRParser.Assign]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1378
                self.angle_db_assign()
                pass
            elif token in [XplorMRParser.Classification]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1379
                self.match(XplorMRParser.Classification)
                self.state = 1380
                self.match(XplorMRParser.Simple_name)
                pass
            elif token in [XplorMRParser.DerivFlag]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1381
                self.match(XplorMRParser.DerivFlag)
                self.state = 1382
                self.match(XplorMRParser.Simple_name)
                pass
            elif token in [XplorMRParser.Expectation]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1383
                self.match(XplorMRParser.Expectation)
                self.state = 1384
                self.match(XplorMRParser.Integer)
                self.state = 1385
                self.match(XplorMRParser.Integer)
                self.state = 1386
                self.number_s()
                pass
            elif token in [XplorMRParser.Error]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1387
                self.match(XplorMRParser.Error)
                self.state = 1388
                self.number_s()
                pass
            elif token in [XplorMRParser.ForceConstant]:
                self.enterOuterAlt(localctx, 6)
                self.state = 1389
                self.match(XplorMRParser.ForceConstant)
                self.state = 1390
                self.number_s()
                pass
            elif token in [XplorMRParser.Nrestraints]:
                self.enterOuterAlt(localctx, 7)
                self.state = 1391
                self.match(XplorMRParser.Nrestraints)
                self.state = 1392
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.Potential]:
                self.enterOuterAlt(localctx, 8)
                self.state = 1393
                self.match(XplorMRParser.Potential)
                self.state = 1394
                self.match(XplorMRParser.Rdc_potential)
                pass
            elif token in [XplorMRParser.Print]:
                self.enterOuterAlt(localctx, 9)
                self.state = 1395
                self.match(XplorMRParser.Print)
                self.state = 1396
                self.match(XplorMRParser.Threshold)
                self.state = 1397
                self.number_s()
                self.state = 1401
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [XplorMRParser.All]:
                    self.state = 1398
                    self.match(XplorMRParser.All)
                    pass
                elif token in [XplorMRParser.Classification]:
                    self.state = 1399
                    self.match(XplorMRParser.Classification)
                    self.state = 1400
                    self.match(XplorMRParser.Simple_name)
                    pass
                else:
                    raise NoViableAltException(self)

                pass
            elif token in [XplorMRParser.Reset]:
                self.enterOuterAlt(localctx, 10)
                self.state = 1403
                self.match(XplorMRParser.Reset)
                pass
            elif token in [XplorMRParser.Size]:
                self.enterOuterAlt(localctx, 11)
                self.state = 1404
                self.match(XplorMRParser.Size)
                self.state = 1405
                self.match(XplorMRParser.Angle_dihedral)
                self.state = 1406
                self.match(XplorMRParser.Integer)
                self.state = 1407
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.Zero]:
                self.enterOuterAlt(localctx, 12)
                self.state = 1408
                self.match(XplorMRParser.Zero)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Angle_db_assignContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Assign(self):
            return self.getToken(XplorMRParser.Assign, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.SelectionContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_angle_db_assign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAngle_db_assign" ):
                listener.enterAngle_db_assign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAngle_db_assign" ):
                listener.exitAngle_db_assign(self)




    def angle_db_assign(self):

        localctx = XplorMRParser.Angle_db_assignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 144, self.RULE_angle_db_assign)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1411
            self.match(XplorMRParser.Assign)
            self.state = 1412
            self.selection()
            self.state = 1413
            self.selection()
            self.state = 1414
            self.selection()
            self.state = 1415
            self.selection()
            self.state = 1416
            self.selection()
            self.state = 1417
            self.selection()
            self.state = 1418
            self.selection()
            self.state = 1419
            self.selection()
            self.state = 1420
            self.selection()
            self.state = 1421
            self.selection()
            self.state = 1422
            self.selection()
            self.state = 1424
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==XplorMRParser.L_paren:
                self.state = 1423
                self.selection()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pre_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def pre_assign(self):
            return self.getTypedRuleContext(XplorMRParser.Pre_assignContext,0)


        def Classification(self):
            return self.getToken(XplorMRParser.Classification, 0)

        def Simple_name(self):
            return self.getToken(XplorMRParser.Simple_name, 0)

        def Equ_op(self):
            return self.getToken(XplorMRParser.Equ_op, 0)

        def ForceConstant(self):
            return self.getToken(XplorMRParser.ForceConstant, 0)

        def number_s(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Number_sContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Number_sContext,i)


        def Nrestraints(self):
            return self.getToken(XplorMRParser.Nrestraints, 0)

        def Integer(self):
            return self.getToken(XplorMRParser.Integer, 0)

        def Potential(self):
            return self.getToken(XplorMRParser.Potential, 0)

        def Rdc_potential(self):
            return self.getToken(XplorMRParser.Rdc_potential, 0)

        def Kconst(self):
            return self.getToken(XplorMRParser.Kconst, 0)

        def Omega(self):
            return self.getToken(XplorMRParser.Omega, 0)

        def Tauc(self):
            return self.getToken(XplorMRParser.Tauc, 0)

        def Print(self):
            return self.getToken(XplorMRParser.Print, 0)

        def Threshold(self):
            return self.getToken(XplorMRParser.Threshold, 0)

        def All(self):
            return self.getToken(XplorMRParser.All, 0)

        def Reset(self):
            return self.getToken(XplorMRParser.Reset, 0)

        def Debug(self):
            return self.getToken(XplorMRParser.Debug, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_pre_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPre_statement" ):
                listener.enterPre_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPre_statement" ):
                listener.exitPre_statement(self)




    def pre_statement(self):

        localctx = XplorMRParser.Pre_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 146, self.RULE_pre_statement)
        self._la = 0 # Token type
        try:
            self.state = 1479
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [XplorMRParser.Assign]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1426
                self.pre_assign()
                pass
            elif token in [XplorMRParser.Classification]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1427
                self.match(XplorMRParser.Classification)
                self.state = 1429
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 1428
                    self.match(XplorMRParser.Equ_op)


                self.state = 1431
                self.match(XplorMRParser.Simple_name)
                pass
            elif token in [XplorMRParser.ForceConstant]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1432
                self.match(XplorMRParser.ForceConstant)
                self.state = 1434
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 1433
                    self.match(XplorMRParser.Equ_op)


                self.state = 1436
                self.match(XplorMRParser.Simple_name)
                self.state = 1437
                self.number_s()
                pass
            elif token in [XplorMRParser.Nrestraints]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1438
                self.match(XplorMRParser.Nrestraints)
                self.state = 1440
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 1439
                    self.match(XplorMRParser.Equ_op)


                self.state = 1442
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.Potential]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1443
                self.match(XplorMRParser.Potential)
                self.state = 1445
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 1444
                    self.match(XplorMRParser.Equ_op)


                self.state = 1447
                self.match(XplorMRParser.Simple_name)
                self.state = 1448
                self.match(XplorMRParser.Rdc_potential)
                pass
            elif token in [XplorMRParser.Kconst]:
                self.enterOuterAlt(localctx, 6)
                self.state = 1449
                self.match(XplorMRParser.Kconst)
                self.state = 1451
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 1450
                    self.match(XplorMRParser.Equ_op)


                self.state = 1453
                self.match(XplorMRParser.Simple_name)
                self.state = 1454
                self.number_s()
                pass
            elif token in [XplorMRParser.Omega]:
                self.enterOuterAlt(localctx, 7)
                self.state = 1455
                self.match(XplorMRParser.Omega)
                self.state = 1457
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 1456
                    self.match(XplorMRParser.Equ_op)


                self.state = 1459
                self.match(XplorMRParser.Simple_name)
                self.state = 1460
                self.number_s()
                pass
            elif token in [XplorMRParser.Tauc]:
                self.enterOuterAlt(localctx, 8)
                self.state = 1461
                self.match(XplorMRParser.Tauc)
                self.state = 1463
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 1462
                    self.match(XplorMRParser.Equ_op)


                self.state = 1465
                self.match(XplorMRParser.Simple_name)
                self.state = 1466
                self.number_s()
                self.state = 1467
                self.number_s()
                pass
            elif token in [XplorMRParser.Print]:
                self.enterOuterAlt(localctx, 9)
                self.state = 1469
                self.match(XplorMRParser.Print)
                self.state = 1470
                self.match(XplorMRParser.Threshold)
                self.state = 1471
                self.number_s()
                self.state = 1475
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [XplorMRParser.All]:
                    self.state = 1472
                    self.match(XplorMRParser.All)
                    pass
                elif token in [XplorMRParser.Classification]:
                    self.state = 1473
                    self.match(XplorMRParser.Classification)
                    self.state = 1474
                    self.match(XplorMRParser.Simple_name)
                    pass
                else:
                    raise NoViableAltException(self)

                pass
            elif token in [XplorMRParser.Reset]:
                self.enterOuterAlt(localctx, 10)
                self.state = 1477
                self.match(XplorMRParser.Reset)
                pass
            elif token in [XplorMRParser.Debug]:
                self.enterOuterAlt(localctx, 11)
                self.state = 1478
                self.match(XplorMRParser.Debug)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pre_assignContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Assign(self):
            return self.getToken(XplorMRParser.Assign, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.SelectionContext,i)


        def number(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.NumberContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.NumberContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_pre_assign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPre_assign" ):
                listener.enterPre_assign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPre_assign" ):
                listener.exitPre_assign(self)




    def pre_assign(self):

        localctx = XplorMRParser.Pre_assignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 148, self.RULE_pre_assign)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1481
            self.match(XplorMRParser.Assign)
            self.state = 1482
            self.selection()
            self.state = 1483
            self.selection()
            self.state = 1484
            self.number()
            self.state = 1485
            self.number()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pcs_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def pcs_assign(self):
            return self.getTypedRuleContext(XplorMRParser.Pcs_assignContext,0)


        def Classification(self):
            return self.getToken(XplorMRParser.Classification, 0)

        def Simple_name(self):
            return self.getToken(XplorMRParser.Simple_name, 0)

        def Tolerance(self):
            return self.getToken(XplorMRParser.Tolerance, 0)

        def Integer(self):
            return self.getToken(XplorMRParser.Integer, 0)

        def Coefficients(self):
            return self.getToken(XplorMRParser.Coefficients, 0)

        def number_s(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Number_sContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Number_sContext,i)


        def ForceConstant(self):
            return self.getToken(XplorMRParser.ForceConstant, 0)

        def Nrestraints(self):
            return self.getToken(XplorMRParser.Nrestraints, 0)

        def Print(self):
            return self.getToken(XplorMRParser.Print, 0)

        def Threshold(self):
            return self.getToken(XplorMRParser.Threshold, 0)

        def All(self):
            return self.getToken(XplorMRParser.All, 0)

        def Reset(self):
            return self.getToken(XplorMRParser.Reset, 0)

        def Save(self):
            return self.getToken(XplorMRParser.Save, 0)

        def Fmed(self):
            return self.getToken(XplorMRParser.Fmed, 0)

        def ErrOn(self):
            return self.getToken(XplorMRParser.ErrOn, 0)

        def ErrOff(self):
            return self.getToken(XplorMRParser.ErrOff, 0)

        def Fon(self):
            return self.getToken(XplorMRParser.Fon, 0)

        def Foff(self):
            return self.getToken(XplorMRParser.Foff, 0)

        def Son(self):
            return self.getToken(XplorMRParser.Son, 0)

        def Soff(self):
            return self.getToken(XplorMRParser.Soff, 0)

        def Frun(self):
            return self.getToken(XplorMRParser.Frun, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_pcs_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPcs_statement" ):
                listener.enterPcs_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPcs_statement" ):
                listener.exitPcs_statement(self)




    def pcs_statement(self):

        localctx = XplorMRParser.Pcs_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 150, self.RULE_pcs_statement)
        try:
            self.state = 1523
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [XplorMRParser.Assign]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1487
                self.pcs_assign()
                pass
            elif token in [XplorMRParser.Classification]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1488
                self.match(XplorMRParser.Classification)
                self.state = 1489
                self.match(XplorMRParser.Simple_name)
                pass
            elif token in [XplorMRParser.Tolerance]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1490
                self.match(XplorMRParser.Tolerance)
                self.state = 1491
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.Coefficients]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1492
                self.match(XplorMRParser.Coefficients)
                self.state = 1493
                self.number_s()
                self.state = 1494
                self.number_s()
                pass
            elif token in [XplorMRParser.ForceConstant]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1496
                self.match(XplorMRParser.ForceConstant)
                self.state = 1497
                self.number_s()
                pass
            elif token in [XplorMRParser.Nrestraints]:
                self.enterOuterAlt(localctx, 6)
                self.state = 1498
                self.match(XplorMRParser.Nrestraints)
                self.state = 1499
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.Print]:
                self.enterOuterAlt(localctx, 7)
                self.state = 1500
                self.match(XplorMRParser.Print)
                self.state = 1501
                self.match(XplorMRParser.Threshold)
                self.state = 1502
                self.number_s()
                self.state = 1506
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [XplorMRParser.All]:
                    self.state = 1503
                    self.match(XplorMRParser.All)
                    pass
                elif token in [XplorMRParser.Classification]:
                    self.state = 1504
                    self.match(XplorMRParser.Classification)
                    self.state = 1505
                    self.match(XplorMRParser.Simple_name)
                    pass
                else:
                    raise NoViableAltException(self)

                pass
            elif token in [XplorMRParser.Reset]:
                self.enterOuterAlt(localctx, 8)
                self.state = 1508
                self.match(XplorMRParser.Reset)
                pass
            elif token in [XplorMRParser.Save]:
                self.enterOuterAlt(localctx, 9)
                self.state = 1509
                self.match(XplorMRParser.Save)
                self.state = 1510
                self.match(XplorMRParser.Simple_name)
                pass
            elif token in [XplorMRParser.Fmed]:
                self.enterOuterAlt(localctx, 10)
                self.state = 1511
                self.match(XplorMRParser.Fmed)
                self.state = 1512
                self.number_s()
                self.state = 1513
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.ErrOn]:
                self.enterOuterAlt(localctx, 11)
                self.state = 1515
                self.match(XplorMRParser.ErrOn)
                pass
            elif token in [XplorMRParser.ErrOff]:
                self.enterOuterAlt(localctx, 12)
                self.state = 1516
                self.match(XplorMRParser.ErrOff)
                pass
            elif token in [XplorMRParser.Fon]:
                self.enterOuterAlt(localctx, 13)
                self.state = 1517
                self.match(XplorMRParser.Fon)
                pass
            elif token in [XplorMRParser.Foff]:
                self.enterOuterAlt(localctx, 14)
                self.state = 1518
                self.match(XplorMRParser.Foff)
                pass
            elif token in [XplorMRParser.Son]:
                self.enterOuterAlt(localctx, 15)
                self.state = 1519
                self.match(XplorMRParser.Son)
                pass
            elif token in [XplorMRParser.Soff]:
                self.enterOuterAlt(localctx, 16)
                self.state = 1520
                self.match(XplorMRParser.Soff)
                pass
            elif token in [XplorMRParser.Frun]:
                self.enterOuterAlt(localctx, 17)
                self.state = 1521
                self.match(XplorMRParser.Frun)
                self.state = 1522
                self.match(XplorMRParser.Integer)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pcs_assignContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Assign(self):
            return self.getToken(XplorMRParser.Assign, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.SelectionContext,i)


        def number(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.NumberContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.NumberContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_pcs_assign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPcs_assign" ):
                listener.enterPcs_assign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPcs_assign" ):
                listener.exitPcs_assign(self)




    def pcs_assign(self):

        localctx = XplorMRParser.Pcs_assignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 152, self.RULE_pcs_assign)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1525
            self.match(XplorMRParser.Assign)
            self.state = 1526
            self.selection()
            self.state = 1527
            self.selection()
            self.state = 1528
            self.selection()
            self.state = 1529
            self.selection()
            self.state = 1530
            self.selection()
            self.state = 1531
            self.number()
            self.state = 1532
            self.number()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Prdc_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def prdc_assign(self):
            return self.getTypedRuleContext(XplorMRParser.Prdc_assignContext,0)


        def Classification(self):
            return self.getToken(XplorMRParser.Classification, 0)

        def Simple_name(self):
            return self.getToken(XplorMRParser.Simple_name, 0)

        def Tolerance(self):
            return self.getToken(XplorMRParser.Tolerance, 0)

        def Integer(self):
            return self.getToken(XplorMRParser.Integer, 0)

        def Coefficients(self):
            return self.getToken(XplorMRParser.Coefficients, 0)

        def number_s(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Number_sContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Number_sContext,i)


        def ForceConstant(self):
            return self.getToken(XplorMRParser.ForceConstant, 0)

        def Nrestraints(self):
            return self.getToken(XplorMRParser.Nrestraints, 0)

        def ErrOn(self):
            return self.getToken(XplorMRParser.ErrOn, 0)

        def ErrOff(self):
            return self.getToken(XplorMRParser.ErrOff, 0)

        def Fmed(self):
            return self.getToken(XplorMRParser.Fmed, 0)

        def Fon(self):
            return self.getToken(XplorMRParser.Fon, 0)

        def Foff(self):
            return self.getToken(XplorMRParser.Foff, 0)

        def Frun(self):
            return self.getToken(XplorMRParser.Frun, 0)

        def Print(self):
            return self.getToken(XplorMRParser.Print, 0)

        def Threshold(self):
            return self.getToken(XplorMRParser.Threshold, 0)

        def Reset(self):
            return self.getToken(XplorMRParser.Reset, 0)

        def Save(self):
            return self.getToken(XplorMRParser.Save, 0)

        def Son(self):
            return self.getToken(XplorMRParser.Son, 0)

        def Soff(self):
            return self.getToken(XplorMRParser.Soff, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_prdc_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrdc_statement" ):
                listener.enterPrdc_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrdc_statement" ):
                listener.exitPrdc_statement(self)




    def prdc_statement(self):

        localctx = XplorMRParser.Prdc_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 154, self.RULE_prdc_statement)
        try:
            self.state = 1560
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [XplorMRParser.Assign]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1534
                self.prdc_assign()
                pass
            elif token in [XplorMRParser.Classification]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1535
                self.match(XplorMRParser.Classification)
                self.state = 1536
                self.match(XplorMRParser.Simple_name)
                pass
            elif token in [XplorMRParser.Tolerance]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1537
                self.match(XplorMRParser.Tolerance)
                self.state = 1538
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.Coefficients]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1539
                self.match(XplorMRParser.Coefficients)
                self.state = 1540
                self.number_s()
                self.state = 1541
                self.number_s()
                pass
            elif token in [XplorMRParser.ForceConstant]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1543
                self.match(XplorMRParser.ForceConstant)
                self.state = 1544
                self.number_s()
                pass
            elif token in [XplorMRParser.Nrestraints]:
                self.enterOuterAlt(localctx, 6)
                self.state = 1545
                self.match(XplorMRParser.Nrestraints)
                self.state = 1546
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.ErrOn]:
                self.enterOuterAlt(localctx, 7)
                self.state = 1547
                self.match(XplorMRParser.ErrOn)
                pass
            elif token in [XplorMRParser.ErrOff]:
                self.enterOuterAlt(localctx, 8)
                self.state = 1548
                self.match(XplorMRParser.ErrOff)
                pass
            elif token in [XplorMRParser.Fmed]:
                self.enterOuterAlt(localctx, 9)
                self.state = 1549
                self.match(XplorMRParser.Fmed)
                pass
            elif token in [XplorMRParser.Fon]:
                self.enterOuterAlt(localctx, 10)
                self.state = 1550
                self.match(XplorMRParser.Fon)
                pass
            elif token in [XplorMRParser.Foff]:
                self.enterOuterAlt(localctx, 11)
                self.state = 1551
                self.match(XplorMRParser.Foff)
                pass
            elif token in [XplorMRParser.Frun]:
                self.enterOuterAlt(localctx, 12)
                self.state = 1552
                self.match(XplorMRParser.Frun)
                pass
            elif token in [XplorMRParser.Print]:
                self.enterOuterAlt(localctx, 13)
                self.state = 1553
                self.match(XplorMRParser.Print)
                self.state = 1554
                self.match(XplorMRParser.Threshold)
                pass
            elif token in [XplorMRParser.Reset]:
                self.enterOuterAlt(localctx, 14)
                self.state = 1555
                self.match(XplorMRParser.Reset)
                pass
            elif token in [XplorMRParser.Save]:
                self.enterOuterAlt(localctx, 15)
                self.state = 1556
                self.match(XplorMRParser.Save)
                self.state = 1557
                self.match(XplorMRParser.Simple_name)
                pass
            elif token in [XplorMRParser.Son]:
                self.enterOuterAlt(localctx, 16)
                self.state = 1558
                self.match(XplorMRParser.Son)
                pass
            elif token in [XplorMRParser.Soff]:
                self.enterOuterAlt(localctx, 17)
                self.state = 1559
                self.match(XplorMRParser.Soff)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Prdc_assignContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Assign(self):
            return self.getToken(XplorMRParser.Assign, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.SelectionContext,i)


        def number(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.NumberContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.NumberContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_prdc_assign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrdc_assign" ):
                listener.enterPrdc_assign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrdc_assign" ):
                listener.exitPrdc_assign(self)




    def prdc_assign(self):

        localctx = XplorMRParser.Prdc_assignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 156, self.RULE_prdc_assign)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1562
            self.match(XplorMRParser.Assign)
            self.state = 1563
            self.selection()
            self.state = 1564
            self.selection()
            self.state = 1565
            self.selection()
            self.state = 1566
            self.selection()
            self.state = 1567
            self.selection()
            self.state = 1568
            self.selection()
            self.state = 1569
            self.number()
            self.state = 1570
            self.number()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Porientation_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def porientation_assign(self):
            return self.getTypedRuleContext(XplorMRParser.Porientation_assignContext,0)


        def Classification(self):
            return self.getToken(XplorMRParser.Classification, 0)

        def Simple_name(self):
            return self.getToken(XplorMRParser.Simple_name, 0)

        def ForceConstant(self):
            return self.getToken(XplorMRParser.ForceConstant, 0)

        def number_s(self):
            return self.getTypedRuleContext(XplorMRParser.Number_sContext,0)


        def Nrestraints(self):
            return self.getToken(XplorMRParser.Nrestraints, 0)

        def Integer(self):
            return self.getToken(XplorMRParser.Integer, 0)

        def Print(self):
            return self.getToken(XplorMRParser.Print, 0)

        def Threshold(self):
            return self.getToken(XplorMRParser.Threshold, 0)

        def Reset(self):
            return self.getToken(XplorMRParser.Reset, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_porientation_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPorientation_statement" ):
                listener.enterPorientation_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPorientation_statement" ):
                listener.exitPorientation_statement(self)




    def porientation_statement(self):

        localctx = XplorMRParser.Porientation_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 158, self.RULE_porientation_statement)
        try:
            self.state = 1583
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [XplorMRParser.Assign]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1572
                self.porientation_assign()
                pass
            elif token in [XplorMRParser.Classification]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1573
                self.match(XplorMRParser.Classification)
                self.state = 1574
                self.match(XplorMRParser.Simple_name)
                pass
            elif token in [XplorMRParser.ForceConstant]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1575
                self.match(XplorMRParser.ForceConstant)
                self.state = 1576
                self.number_s()
                pass
            elif token in [XplorMRParser.Nrestraints]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1577
                self.match(XplorMRParser.Nrestraints)
                self.state = 1578
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.Print]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1579
                self.match(XplorMRParser.Print)
                self.state = 1580
                self.match(XplorMRParser.Threshold)
                self.state = 1581
                self.number_s()
                pass
            elif token in [XplorMRParser.Reset]:
                self.enterOuterAlt(localctx, 6)
                self.state = 1582
                self.match(XplorMRParser.Reset)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Porientation_assignContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Assign(self):
            return self.getToken(XplorMRParser.Assign, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.SelectionContext,i)


        def number(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.NumberContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.NumberContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_porientation_assign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPorientation_assign" ):
                listener.enterPorientation_assign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPorientation_assign" ):
                listener.exitPorientation_assign(self)




    def porientation_assign(self):

        localctx = XplorMRParser.Porientation_assignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 160, self.RULE_porientation_assign)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1585
            self.match(XplorMRParser.Assign)
            self.state = 1586
            self.selection()
            self.state = 1587
            self.selection()
            self.state = 1588
            self.number()
            self.state = 1589
            self.number()
            self.state = 1590
            self.number()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pccr_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def pccr_assign(self):
            return self.getTypedRuleContext(XplorMRParser.Pccr_assignContext,0)


        def Classification(self):
            return self.getToken(XplorMRParser.Classification, 0)

        def Simple_name(self):
            return self.getToken(XplorMRParser.Simple_name, 0)

        def Weip(self):
            return self.getToken(XplorMRParser.Weip, 0)

        def Integer(self):
            return self.getToken(XplorMRParser.Integer, 0)

        def Coefficients(self):
            return self.getToken(XplorMRParser.Coefficients, 0)

        def number_s(self):
            return self.getTypedRuleContext(XplorMRParser.Number_sContext,0)


        def ForceConstant(self):
            return self.getToken(XplorMRParser.ForceConstant, 0)

        def Nrestraints(self):
            return self.getToken(XplorMRParser.Nrestraints, 0)

        def Print(self):
            return self.getToken(XplorMRParser.Print, 0)

        def Threshold(self):
            return self.getToken(XplorMRParser.Threshold, 0)

        def Reset(self):
            return self.getToken(XplorMRParser.Reset, 0)

        def Frun(self):
            return self.getToken(XplorMRParser.Frun, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_pccr_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPccr_statement" ):
                listener.enterPccr_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPccr_statement" ):
                listener.exitPccr_statement(self)




    def pccr_statement(self):

        localctx = XplorMRParser.Pccr_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 162, self.RULE_pccr_statement)
        try:
            self.state = 1609
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [XplorMRParser.Assign]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1592
                self.pccr_assign()
                pass
            elif token in [XplorMRParser.Classification]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1593
                self.match(XplorMRParser.Classification)
                self.state = 1594
                self.match(XplorMRParser.Simple_name)
                pass
            elif token in [XplorMRParser.Weip]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1595
                self.match(XplorMRParser.Weip)
                self.state = 1596
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.Coefficients]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1597
                self.match(XplorMRParser.Coefficients)
                self.state = 1598
                self.number_s()
                pass
            elif token in [XplorMRParser.ForceConstant]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1599
                self.match(XplorMRParser.ForceConstant)
                self.state = 1600
                self.number_s()
                pass
            elif token in [XplorMRParser.Nrestraints]:
                self.enterOuterAlt(localctx, 6)
                self.state = 1601
                self.match(XplorMRParser.Nrestraints)
                self.state = 1602
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.Print]:
                self.enterOuterAlt(localctx, 7)
                self.state = 1603
                self.match(XplorMRParser.Print)
                self.state = 1604
                self.match(XplorMRParser.Threshold)
                self.state = 1605
                self.number_s()
                pass
            elif token in [XplorMRParser.Reset]:
                self.enterOuterAlt(localctx, 8)
                self.state = 1606
                self.match(XplorMRParser.Reset)
                pass
            elif token in [XplorMRParser.Frun]:
                self.enterOuterAlt(localctx, 9)
                self.state = 1607
                self.match(XplorMRParser.Frun)
                self.state = 1608
                self.match(XplorMRParser.Integer)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pccr_assignContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Assign(self):
            return self.getToken(XplorMRParser.Assign, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.SelectionContext,i)


        def number(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.NumberContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.NumberContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_pccr_assign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPccr_assign" ):
                listener.enterPccr_assign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPccr_assign" ):
                listener.exitPccr_assign(self)




    def pccr_assign(self):

        localctx = XplorMRParser.Pccr_assignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 164, self.RULE_pccr_assign)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1611
            self.match(XplorMRParser.Assign)
            self.state = 1612
            self.selection()
            self.state = 1613
            self.selection()
            self.state = 1614
            self.selection()
            self.state = 1615
            self.number()
            self.state = 1616
            self.number()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Hbond_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def hbond_assign(self):
            return self.getTypedRuleContext(XplorMRParser.Hbond_assignContext,0)


        def Classification(self):
            return self.getToken(XplorMRParser.Classification, 0)

        def Simple_name(self):
            return self.getToken(XplorMRParser.Simple_name, 0)

        def ForceConstant(self):
            return self.getToken(XplorMRParser.ForceConstant, 0)

        def number_s(self):
            return self.getTypedRuleContext(XplorMRParser.Number_sContext,0)


        def Nrestraints(self):
            return self.getToken(XplorMRParser.Nrestraints, 0)

        def Integer(self):
            return self.getToken(XplorMRParser.Integer, 0)

        def Print(self):
            return self.getToken(XplorMRParser.Print, 0)

        def Threshold(self):
            return self.getToken(XplorMRParser.Threshold, 0)

        def Reset(self):
            return self.getToken(XplorMRParser.Reset, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_hbond_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHbond_statement" ):
                listener.enterHbond_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHbond_statement" ):
                listener.exitHbond_statement(self)




    def hbond_statement(self):

        localctx = XplorMRParser.Hbond_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 166, self.RULE_hbond_statement)
        try:
            self.state = 1629
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [XplorMRParser.Assign]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1618
                self.hbond_assign()
                pass
            elif token in [XplorMRParser.Classification]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1619
                self.match(XplorMRParser.Classification)
                self.state = 1620
                self.match(XplorMRParser.Simple_name)
                pass
            elif token in [XplorMRParser.ForceConstant]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1621
                self.match(XplorMRParser.ForceConstant)
                self.state = 1622
                self.number_s()
                pass
            elif token in [XplorMRParser.Nrestraints]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1623
                self.match(XplorMRParser.Nrestraints)
                self.state = 1624
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.Print]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1625
                self.match(XplorMRParser.Print)
                self.state = 1626
                self.match(XplorMRParser.Threshold)
                self.state = 1627
                self.number_s()
                pass
            elif token in [XplorMRParser.Reset]:
                self.enterOuterAlt(localctx, 6)
                self.state = 1628
                self.match(XplorMRParser.Reset)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Hbond_assignContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Assign(self):
            return self.getToken(XplorMRParser.Assign, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.SelectionContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_hbond_assign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHbond_assign" ):
                listener.enterHbond_assign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHbond_assign" ):
                listener.exitHbond_assign(self)




    def hbond_assign(self):

        localctx = XplorMRParser.Hbond_assignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 168, self.RULE_hbond_assign)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1631
            self.match(XplorMRParser.Assign)
            self.state = 1632
            self.selection()
            self.state = 1633
            self.selection()
            self.state = 1634
            self.selection()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SelectionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def L_paren(self):
            return self.getToken(XplorMRParser.L_paren, 0)

        def selection_expression(self):
            return self.getTypedRuleContext(XplorMRParser.Selection_expressionContext,0)


        def R_paren(self):
            return self.getToken(XplorMRParser.R_paren, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_selection

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSelection" ):
                listener.enterSelection(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSelection" ):
                listener.exitSelection(self)




    def selection(self):

        localctx = XplorMRParser.SelectionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 170, self.RULE_selection)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1636
            self.match(XplorMRParser.L_paren)
            self.state = 1637
            self.selection_expression()
            self.state = 1638
            self.match(XplorMRParser.R_paren)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Selection_expressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def term(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.TermContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.TermContext,i)


        def Or_op(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Or_op)
            else:
                return self.getToken(XplorMRParser.Or_op, i)

        def getRuleIndex(self):
            return XplorMRParser.RULE_selection_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSelection_expression" ):
                listener.enterSelection_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSelection_expression" ):
                listener.exitSelection_expression(self)




    def selection_expression(self):

        localctx = XplorMRParser.Selection_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 172, self.RULE_selection_expression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1640
            self.term()
            self.state = 1645
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==XplorMRParser.Or_op:
                self.state = 1641
                self.match(XplorMRParser.Or_op)
                self.state = 1642
                self.term()
                self.state = 1647
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TermContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def factor(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.FactorContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.FactorContext,i)


        def And_op(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.And_op)
            else:
                return self.getToken(XplorMRParser.And_op, i)

        def getRuleIndex(self):
            return XplorMRParser.RULE_term

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTerm" ):
                listener.enterTerm(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTerm" ):
                listener.exitTerm(self)




    def term(self):

        localctx = XplorMRParser.TermContext(self, self._ctx, self.state)
        self.enterRule(localctx, 174, self.RULE_term)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1648
            self.factor(0)
            self.state = 1653
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==XplorMRParser.And_op:
                self.state = 1649
                self.match(XplorMRParser.And_op)
                self.state = 1650
                self.factor(0)
                self.state = 1655
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FactorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def L_paren(self):
            return self.getToken(XplorMRParser.L_paren, 0)

        def selection_expression(self):
            return self.getTypedRuleContext(XplorMRParser.Selection_expressionContext,0)


        def R_paren(self):
            return self.getToken(XplorMRParser.R_paren, 0)

        def All(self):
            return self.getToken(XplorMRParser.All, 0)

        def Atom(self):
            return self.getToken(XplorMRParser.Atom, 0)

        def Simple_names(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Simple_names)
            else:
                return self.getToken(XplorMRParser.Simple_names, i)

        def Simple_name(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Simple_name)
            else:
                return self.getToken(XplorMRParser.Simple_name, i)

        def Integers(self):
            return self.getToken(XplorMRParser.Integers, 0)

        def Integer(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Integer)
            else:
                return self.getToken(XplorMRParser.Integer, i)

        def Attribute(self):
            return self.getToken(XplorMRParser.Attribute, 0)

        def Attr_properties(self):
            return self.getToken(XplorMRParser.Attr_properties, 0)

        def Comparison_ops(self):
            return self.getToken(XplorMRParser.Comparison_ops, 0)

        def number_f(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Number_fContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Number_fContext,i)


        def Abs(self):
            return self.getToken(XplorMRParser.Abs, 0)

        def BondedTo(self):
            return self.getToken(XplorMRParser.BondedTo, 0)

        def factor(self):
            return self.getTypedRuleContext(XplorMRParser.FactorContext,0)


        def ByGroup(self):
            return self.getToken(XplorMRParser.ByGroup, 0)

        def ByRes(self):
            return self.getToken(XplorMRParser.ByRes, 0)

        def Chemical(self):
            return self.getToken(XplorMRParser.Chemical, 0)

        def Colon(self):
            return self.getToken(XplorMRParser.Colon, 0)

        def Hydrogen(self):
            return self.getToken(XplorMRParser.Hydrogen, 0)

        def Id(self):
            return self.getToken(XplorMRParser.Id, 0)

        def Known(self):
            return self.getToken(XplorMRParser.Known, 0)

        def Name(self):
            return self.getToken(XplorMRParser.Name, 0)

        def Not_op(self):
            return self.getToken(XplorMRParser.Not_op, 0)

        def Point(self):
            return self.getToken(XplorMRParser.Point, 0)

        def Cut(self):
            return self.getToken(XplorMRParser.Cut, 0)

        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Comma)
            else:
                return self.getToken(XplorMRParser.Comma, i)

        def Tail(self):
            return self.getToken(XplorMRParser.Tail, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.SelectionContext,i)


        def Equ_op(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Equ_op)
            else:
                return self.getToken(XplorMRParser.Equ_op, i)

        def Head(self):
            return self.getToken(XplorMRParser.Head, 0)

        def Previous(self):
            return self.getToken(XplorMRParser.Previous, 0)

        def Pseudo(self):
            return self.getToken(XplorMRParser.Pseudo, 0)

        def Residue(self):
            return self.getToken(XplorMRParser.Residue, 0)

        def Resname(self):
            return self.getToken(XplorMRParser.Resname, 0)

        def SegIdentifier(self):
            return self.getToken(XplorMRParser.SegIdentifier, 0)

        def Double_quote_string(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Double_quote_string)
            else:
                return self.getToken(XplorMRParser.Double_quote_string, i)

        def Store_1(self):
            return self.getToken(XplorMRParser.Store_1, 0)

        def Store_2(self):
            return self.getToken(XplorMRParser.Store_2, 0)

        def Store_3(self):
            return self.getToken(XplorMRParser.Store_3, 0)

        def Store_4(self):
            return self.getToken(XplorMRParser.Store_4, 0)

        def Store_5(self):
            return self.getToken(XplorMRParser.Store_5, 0)

        def Store_6(self):
            return self.getToken(XplorMRParser.Store_6, 0)

        def Store_7(self):
            return self.getToken(XplorMRParser.Store_7, 0)

        def Store_8(self):
            return self.getToken(XplorMRParser.Store_8, 0)

        def Store_9(self):
            return self.getToken(XplorMRParser.Store_9, 0)

        def Tag(self):
            return self.getToken(XplorMRParser.Tag, 0)

        def Around(self):
            return self.getToken(XplorMRParser.Around, 0)

        def Saround(self):
            return self.getToken(XplorMRParser.Saround, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_factor

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFactor" ):
                listener.enterFactor(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFactor" ):
                listener.exitFactor(self)



    def factor(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = XplorMRParser.FactorContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 176
        self.enterRecursionRule(localctx, 176, self.RULE_factor, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1783
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,142,self._ctx)
            if la_ == 1:
                self.state = 1657
                self.match(XplorMRParser.L_paren)
                self.state = 1658
                self.selection_expression()
                self.state = 1659
                self.match(XplorMRParser.R_paren)
                pass

            elif la_ == 2:
                self.state = 1661
                self.match(XplorMRParser.All)
                pass

            elif la_ == 3:
                self.state = 1662
                self.match(XplorMRParser.Atom)
                self.state = 1663
                _la = self._input.LA(1)
                if not(_la==XplorMRParser.Simple_name or _la==XplorMRParser.Simple_names):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1664
                _la = self._input.LA(1)
                if not(_la==XplorMRParser.Integer or _la==XplorMRParser.Integers):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1665
                _la = self._input.LA(1)
                if not(_la==XplorMRParser.Simple_name or _la==XplorMRParser.Simple_names):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass

            elif la_ == 4:
                self.state = 1666
                self.match(XplorMRParser.Attribute)
                self.state = 1668
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Abs:
                    self.state = 1667
                    self.match(XplorMRParser.Abs)


                self.state = 1670
                self.match(XplorMRParser.Attr_properties)
                self.state = 1671
                self.match(XplorMRParser.Comparison_ops)
                self.state = 1672
                self.number_f()
                pass

            elif la_ == 5:
                self.state = 1673
                self.match(XplorMRParser.BondedTo)
                self.state = 1674
                self.factor(27)
                pass

            elif la_ == 6:
                self.state = 1675
                self.match(XplorMRParser.ByGroup)
                self.state = 1676
                self.factor(26)
                pass

            elif la_ == 7:
                self.state = 1677
                self.match(XplorMRParser.ByRes)
                self.state = 1678
                self.factor(25)
                pass

            elif la_ == 8:
                self.state = 1679
                self.match(XplorMRParser.Chemical)
                self.state = 1686
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [XplorMRParser.Simple_names]:
                    self.state = 1680
                    self.match(XplorMRParser.Simple_names)
                    pass
                elif token in [XplorMRParser.Simple_name]:
                    self.state = 1681
                    self.match(XplorMRParser.Simple_name)
                    self.state = 1684
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,125,self._ctx)
                    if la_ == 1:
                        self.state = 1682
                        self.match(XplorMRParser.Colon)
                        self.state = 1683
                        self.match(XplorMRParser.Simple_name)


                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 9:
                self.state = 1688
                self.match(XplorMRParser.Hydrogen)
                pass

            elif la_ == 10:
                self.state = 1689
                self.match(XplorMRParser.Id)
                self.state = 1690
                self.match(XplorMRParser.Integer)
                pass

            elif la_ == 11:
                self.state = 1691
                self.match(XplorMRParser.Known)
                pass

            elif la_ == 12:
                self.state = 1692
                self.match(XplorMRParser.Name)
                self.state = 1699
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [XplorMRParser.Simple_names]:
                    self.state = 1693
                    self.match(XplorMRParser.Simple_names)
                    pass
                elif token in [XplorMRParser.Simple_name]:
                    self.state = 1694
                    self.match(XplorMRParser.Simple_name)
                    self.state = 1697
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,127,self._ctx)
                    if la_ == 1:
                        self.state = 1695
                        self.match(XplorMRParser.Colon)
                        self.state = 1696
                        self.match(XplorMRParser.Simple_name)


                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 13:
                self.state = 1701
                self.match(XplorMRParser.Not_op)
                self.state = 1702
                self.factor(19)
                pass

            elif la_ == 14:
                self.state = 1703
                self.match(XplorMRParser.Point)
                self.state = 1704
                self.match(XplorMRParser.L_paren)
                self.state = 1705
                self.number_f()
                self.state = 1707
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Comma:
                    self.state = 1706
                    self.match(XplorMRParser.Comma)


                self.state = 1709
                self.number_f()
                self.state = 1711
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Comma:
                    self.state = 1710
                    self.match(XplorMRParser.Comma)


                self.state = 1713
                self.number_f()
                self.state = 1714
                self.match(XplorMRParser.R_paren)
                self.state = 1715
                self.match(XplorMRParser.Cut)
                self.state = 1716
                self.number_f()
                pass

            elif la_ == 15:
                self.state = 1718
                self.match(XplorMRParser.Point)
                self.state = 1719
                self.match(XplorMRParser.L_paren)
                self.state = 1720
                self.match(XplorMRParser.Tail)
                self.state = 1722
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 1721
                    self.match(XplorMRParser.Equ_op)


                self.state = 1724
                self.selection()
                self.state = 1726
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Comma:
                    self.state = 1725
                    self.match(XplorMRParser.Comma)


                self.state = 1733
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Head:
                    self.state = 1728
                    self.match(XplorMRParser.Head)
                    self.state = 1730
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==XplorMRParser.Equ_op:
                        self.state = 1729
                        self.match(XplorMRParser.Equ_op)


                    self.state = 1732
                    self.selection()


                self.state = 1735
                self.match(XplorMRParser.R_paren)
                self.state = 1736
                self.match(XplorMRParser.Cut)
                self.state = 1737
                self.number_f()
                pass

            elif la_ == 16:
                self.state = 1739
                self.match(XplorMRParser.Previous)
                pass

            elif la_ == 17:
                self.state = 1740
                self.match(XplorMRParser.Pseudo)
                pass

            elif la_ == 18:
                self.state = 1741
                self.match(XplorMRParser.Residue)
                self.state = 1748
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [XplorMRParser.Integers]:
                    self.state = 1742
                    self.match(XplorMRParser.Integers)
                    pass
                elif token in [XplorMRParser.Integer]:
                    self.state = 1743
                    self.match(XplorMRParser.Integer)
                    self.state = 1746
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,135,self._ctx)
                    if la_ == 1:
                        self.state = 1744
                        self.match(XplorMRParser.Colon)
                        self.state = 1745
                        self.match(XplorMRParser.Integer)


                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 19:
                self.state = 1750
                self.match(XplorMRParser.Resname)
                self.state = 1757
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [XplorMRParser.Simple_names]:
                    self.state = 1751
                    self.match(XplorMRParser.Simple_names)
                    pass
                elif token in [XplorMRParser.Simple_name]:
                    self.state = 1752
                    self.match(XplorMRParser.Simple_name)
                    self.state = 1755
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,137,self._ctx)
                    if la_ == 1:
                        self.state = 1753
                        self.match(XplorMRParser.Colon)
                        self.state = 1754
                        self.match(XplorMRParser.Simple_name)


                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 20:
                self.state = 1759
                self.match(XplorMRParser.SegIdentifier)
                self.state = 1771
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [XplorMRParser.Simple_names]:
                    self.state = 1760
                    self.match(XplorMRParser.Simple_names)
                    pass
                elif token in [XplorMRParser.Simple_name]:
                    self.state = 1761
                    self.match(XplorMRParser.Simple_name)
                    self.state = 1764
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,139,self._ctx)
                    if la_ == 1:
                        self.state = 1762
                        self.match(XplorMRParser.Colon)
                        self.state = 1763
                        self.match(XplorMRParser.Simple_name)


                    pass
                elif token in [XplorMRParser.Double_quote_string]:
                    self.state = 1766
                    self.match(XplorMRParser.Double_quote_string)
                    self.state = 1769
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,140,self._ctx)
                    if la_ == 1:
                        self.state = 1767
                        self.match(XplorMRParser.Colon)
                        self.state = 1768
                        self.match(XplorMRParser.Double_quote_string)


                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 21:
                self.state = 1773
                self.match(XplorMRParser.Store_1)
                pass

            elif la_ == 22:
                self.state = 1774
                self.match(XplorMRParser.Store_2)
                pass

            elif la_ == 23:
                self.state = 1775
                self.match(XplorMRParser.Store_3)
                pass

            elif la_ == 24:
                self.state = 1776
                self.match(XplorMRParser.Store_4)
                pass

            elif la_ == 25:
                self.state = 1777
                self.match(XplorMRParser.Store_5)
                pass

            elif la_ == 26:
                self.state = 1778
                self.match(XplorMRParser.Store_6)
                pass

            elif la_ == 27:
                self.state = 1779
                self.match(XplorMRParser.Store_7)
                pass

            elif la_ == 28:
                self.state = 1780
                self.match(XplorMRParser.Store_8)
                pass

            elif la_ == 29:
                self.state = 1781
                self.match(XplorMRParser.Store_9)
                pass

            elif la_ == 30:
                self.state = 1782
                self.match(XplorMRParser.Tag)
                pass


            self._ctx.stop = self._input.LT(-1)
            self.state = 1793
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,144,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 1791
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,143,self._ctx)
                    if la_ == 1:
                        localctx = XplorMRParser.FactorContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_factor)
                        self.state = 1785
                        if not self.precpred(self._ctx, 30):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 30)")
                        self.state = 1786
                        self.match(XplorMRParser.Around)
                        self.state = 1787
                        self.number_f()
                        pass

                    elif la_ == 2:
                        localctx = XplorMRParser.FactorContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_factor)
                        self.state = 1788
                        if not self.precpred(self._ctx, 12):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 12)")
                        self.state = 1789
                        self.match(XplorMRParser.Saround)
                        self.state = 1790
                        self.number_f()
                        pass

             
                self.state = 1795
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,144,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class NumberContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Real(self):
            return self.getToken(XplorMRParser.Real, 0)

        def Integer(self):
            return self.getToken(XplorMRParser.Integer, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_number

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNumber" ):
                listener.enterNumber(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNumber" ):
                listener.exitNumber(self)




    def number(self):

        localctx = XplorMRParser.NumberContext(self, self._ctx, self.state)
        self.enterRule(localctx, 178, self.RULE_number)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1796
            _la = self._input.LA(1)
            if not(_la==XplorMRParser.Integer or _la==XplorMRParser.Real):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Number_fContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Real(self):
            return self.getToken(XplorMRParser.Real, 0)

        def Integer(self):
            return self.getToken(XplorMRParser.Integer, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_number_f

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNumber_f" ):
                listener.enterNumber_f(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNumber_f" ):
                listener.exitNumber_f(self)




    def number_f(self):

        localctx = XplorMRParser.Number_fContext(self, self._ctx, self.state)
        self.enterRule(localctx, 180, self.RULE_number_f)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1798
            _la = self._input.LA(1)
            if not(_la==XplorMRParser.Integer or _la==XplorMRParser.Real):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Number_sContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Real(self):
            return self.getToken(XplorMRParser.Real, 0)

        def Integer(self):
            return self.getToken(XplorMRParser.Integer, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_number_s

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNumber_s" ):
                listener.enterNumber_s(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNumber_s" ):
                listener.exitNumber_s(self)




    def number_s(self):

        localctx = XplorMRParser.Number_sContext(self, self._ctx, self.state)
        self.enterRule(localctx, 182, self.RULE_number_s)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1800
            _la = self._input.LA(1)
            if not(_la==XplorMRParser.Integer or _la==XplorMRParser.Real):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Number_aContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Real(self):
            return self.getToken(XplorMRParser.Real, 0)

        def Integer(self):
            return self.getToken(XplorMRParser.Integer, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_number_a

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNumber_a" ):
                listener.enterNumber_a(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNumber_a" ):
                listener.exitNumber_a(self)




    def number_a(self):

        localctx = XplorMRParser.Number_aContext(self, self._ctx, self.state)
        self.enterRule(localctx, 184, self.RULE_number_a)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1802
            _la = self._input.LA(1)
            if not(_la==XplorMRParser.Integer or _la==XplorMRParser.Real):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Flag_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Flags(self):
            return self.getToken(XplorMRParser.Flags, 0)

        def Include(self):
            return self.getToken(XplorMRParser.Include, 0)

        def End_flag(self):
            return self.getToken(XplorMRParser.End_flag, 0)

        def Exclude(self):
            return self.getToken(XplorMRParser.Exclude, 0)

        def Class_name(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Class_name)
            else:
                return self.getToken(XplorMRParser.Class_name, i)

        def Any_class(self):
            return self.getToken(XplorMRParser.Any_class, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_flag_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFlag_statement" ):
                listener.enterFlag_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFlag_statement" ):
                listener.exitFlag_statement(self)




    def flag_statement(self):

        localctx = XplorMRParser.Flag_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 186, self.RULE_flag_statement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1804
            self.match(XplorMRParser.Flags)
            self.state = 1815
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==XplorMRParser.Exclude:
                self.state = 1805
                self.match(XplorMRParser.Exclude)
                self.state = 1813
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [XplorMRParser.Include, XplorMRParser.Class_name]:
                    self.state = 1809
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==XplorMRParser.Class_name:
                        self.state = 1806
                        self.match(XplorMRParser.Class_name)
                        self.state = 1811
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    pass
                elif token in [XplorMRParser.Any_class]:
                    self.state = 1812
                    self.match(XplorMRParser.Any_class)
                    pass
                else:
                    raise NoViableAltException(self)



            self.state = 1817
            self.match(XplorMRParser.Include)
            self.state = 1821
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==XplorMRParser.Class_name:
                self.state = 1818
                self.match(XplorMRParser.Class_name)
                self.state = 1823
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1824
            self.match(XplorMRParser.End_flag)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx



    def sempred(self, localctx:RuleContext, ruleIndex:int, predIndex:int):
        if self._predicates == None:
            self._predicates = dict()
        self._predicates[88] = self.factor_sempred
        pred = self._predicates.get(ruleIndex, None)
        if pred is None:
            raise Exception("No predicate with index:" + str(ruleIndex))
        else:
            return pred(localctx, predIndex)

    def factor_sempred(self, localctx:FactorContext, predIndex:int):
            if predIndex == 0:
                return self.precpred(self._ctx, 30)
         

            if predIndex == 1:
                return self.precpred(self._ctx, 12)
         




