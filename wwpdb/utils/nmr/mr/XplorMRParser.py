# Generated from XplorMRParser.g4 by ANTLR 4.10.1
# encoding: utf-8
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
	from typing import TextIO
else:
	from typing.io import TextIO

def serializedATN():
    return [
        4,1,264,2096,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,
        7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,
        13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,
        20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,
        26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,
        33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,
        39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,
        46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,52,7,
        52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,2,57,7,57,2,58,7,58,2,
        59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,2,64,7,64,2,65,7,
        65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,2,71,7,71,2,
        72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,7,77,2,78,7,
        78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,2,84,7,84,2,
        85,7,85,2,86,7,86,2,87,7,87,2,88,7,88,2,89,7,89,2,90,7,90,2,91,7,
        91,2,92,7,92,2,93,7,93,2,94,7,94,2,95,7,95,2,96,7,96,2,97,7,97,2,
        98,7,98,2,99,7,99,2,100,7,100,2,101,7,101,2,102,7,102,2,103,7,103,
        1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,
        1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,
        1,0,1,0,1,0,1,0,1,0,5,0,246,8,0,10,0,12,0,249,9,0,1,0,1,0,1,1,1,
        1,5,1,255,8,1,10,1,12,1,258,9,1,1,1,1,1,1,2,3,2,263,8,2,1,2,1,2,
        5,2,267,8,2,10,2,12,2,270,9,2,1,2,1,2,1,3,1,3,5,3,276,8,3,10,3,12,
        3,279,9,3,1,3,1,3,1,3,5,3,284,8,3,10,3,12,3,287,9,3,1,3,1,3,1,3,
        5,3,292,8,3,10,3,12,3,295,9,3,1,3,1,3,1,3,5,3,300,8,3,10,3,12,3,
        303,9,3,1,3,1,3,1,3,5,3,308,8,3,10,3,12,3,311,9,3,1,3,3,3,314,8,
        3,1,4,3,4,317,8,4,1,4,1,4,5,4,321,8,4,10,4,12,4,324,9,4,1,4,1,4,
        1,5,1,5,5,5,330,8,5,10,5,12,5,333,9,5,1,5,1,5,1,6,1,6,5,6,339,8,
        6,10,6,12,6,342,9,6,1,6,1,6,1,7,1,7,5,7,348,8,7,10,7,12,7,351,9,
        7,1,7,1,7,1,8,1,8,5,8,357,8,8,10,8,12,8,360,9,8,1,8,1,8,1,9,1,9,
        5,9,366,8,9,10,9,12,9,369,9,9,1,9,1,9,1,10,1,10,5,10,375,8,10,10,
        10,12,10,378,9,10,1,10,1,10,1,11,1,11,5,11,384,8,11,10,11,12,11,
        387,9,11,1,11,1,11,1,12,1,12,5,12,393,8,12,10,12,12,12,396,9,12,
        1,12,1,12,1,13,1,13,5,13,402,8,13,10,13,12,13,405,9,13,1,13,1,13,
        1,14,1,14,5,14,411,8,14,10,14,12,14,414,9,14,1,14,1,14,1,15,1,15,
        5,15,420,8,15,10,15,12,15,423,9,15,1,15,1,15,1,16,1,16,5,16,429,
        8,16,10,16,12,16,432,9,16,1,16,1,16,1,17,1,17,5,17,438,8,17,10,17,
        12,17,441,9,17,1,17,1,17,1,18,1,18,5,18,447,8,18,10,18,12,18,450,
        9,18,1,18,1,18,1,19,1,19,5,19,456,8,19,10,19,12,19,459,9,19,1,19,
        1,19,1,20,1,20,5,20,465,8,20,10,20,12,20,468,9,20,1,20,1,20,1,21,
        1,21,5,21,474,8,21,10,21,12,21,477,9,21,1,21,1,21,1,22,1,22,5,22,
        483,8,22,10,22,12,22,486,9,22,1,22,1,22,1,23,1,23,5,23,492,8,23,
        10,23,12,23,495,9,23,1,23,1,23,1,24,1,24,1,24,1,24,1,24,1,24,1,24,
        1,24,1,24,1,24,1,24,1,24,3,24,511,8,24,1,24,1,24,1,24,1,24,1,24,
        1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,3,24,
        530,8,24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,
        3,24,543,8,24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,
        1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,3,24,
        567,8,24,1,24,3,24,570,8,24,1,25,1,25,1,25,1,25,1,25,1,25,1,25,5,
        25,579,8,25,10,25,12,25,582,9,25,1,25,1,25,1,25,1,25,5,25,588,8,
        25,10,25,12,25,591,9,25,1,26,1,26,3,26,595,8,26,1,26,1,26,1,26,3,
        26,600,8,26,1,26,1,26,1,26,1,26,1,26,3,26,607,8,26,1,27,1,27,3,27,
        611,8,27,1,27,1,27,1,27,3,27,616,8,27,1,27,1,27,1,27,3,27,621,8,
        27,1,27,1,27,1,27,3,27,626,8,27,1,27,1,27,1,27,3,27,631,8,27,1,27,
        1,27,1,27,3,27,636,8,27,1,27,1,27,1,27,3,27,641,8,27,1,27,3,27,644,
        8,27,1,28,1,28,1,28,3,28,649,8,28,1,28,1,28,1,28,1,28,3,28,655,8,
        28,1,29,1,29,1,29,1,29,1,29,1,29,1,29,1,29,1,29,1,29,1,30,1,30,1,
        30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,
        30,1,30,1,30,3,30,685,8,30,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,
        31,1,31,1,31,3,31,697,8,31,1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,
        32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,
        32,1,32,1,32,1,32,1,32,1,32,3,32,725,8,32,1,33,1,33,1,33,1,33,1,
        33,1,33,1,33,1,33,1,33,1,33,1,33,1,33,1,33,1,33,1,33,3,33,742,8,
        33,1,34,1,34,1,34,3,34,747,8,34,1,34,1,34,1,34,1,34,1,34,1,34,1,
        34,1,34,1,34,1,34,1,34,3,34,760,8,34,1,34,1,34,1,34,1,34,1,34,3,
        34,767,8,34,1,35,1,35,1,35,1,35,1,35,1,35,1,35,1,35,1,35,1,35,1,
        36,1,36,1,36,1,36,1,36,1,36,1,36,1,36,1,36,1,36,1,36,1,36,1,36,3,
        36,792,8,36,1,37,1,37,1,37,1,37,1,37,1,37,1,38,1,38,1,38,1,38,1,
        38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,
        38,1,38,1,38,1,38,3,38,821,8,38,1,39,1,39,1,39,1,39,1,39,1,39,1,
        39,1,39,1,40,1,40,5,40,833,8,40,10,40,12,40,836,9,40,1,40,1,40,3,
        40,840,8,40,1,41,1,41,3,41,844,8,41,1,41,1,41,1,41,3,41,849,8,41,
        1,41,3,41,852,8,41,1,42,1,42,1,42,1,42,1,42,1,42,1,42,1,42,1,42,
        1,42,1,42,1,42,1,42,1,42,1,42,1,42,3,42,870,8,42,1,42,1,42,1,42,
        1,42,1,42,1,42,3,42,878,8,42,1,43,1,43,1,43,1,43,1,44,1,44,1,44,
        1,44,1,44,1,44,1,44,1,44,1,44,1,44,1,44,3,44,895,8,44,1,44,1,44,
        1,44,1,44,1,44,1,44,3,44,903,8,44,1,44,1,44,1,44,1,44,3,44,909,8,
        44,1,44,1,44,1,44,1,44,1,44,1,44,1,44,1,44,1,44,3,44,920,8,44,1,
        44,3,44,923,8,44,1,45,1,45,1,45,1,45,1,45,1,45,1,45,1,45,1,45,1,
        45,3,45,935,8,45,1,45,1,45,1,45,1,45,1,45,3,45,942,8,45,1,46,1,46,
        1,46,1,46,1,46,1,46,1,46,1,46,1,46,1,46,1,46,1,46,1,46,1,46,1,46,
        1,46,1,46,1,46,1,46,1,46,1,46,1,46,1,46,1,46,1,46,1,46,3,46,970,
        8,46,1,47,1,47,1,47,1,47,1,47,1,47,1,47,1,47,1,47,1,48,1,48,1,48,
        1,48,1,48,1,49,1,49,1,49,1,49,1,49,1,49,1,49,1,49,1,49,1,49,1,49,
        1,49,1,49,1,49,1,49,1,49,1,49,1,49,3,49,1004,8,49,1,49,1,49,1,49,
        1,49,1,49,1,49,1,49,1,49,3,49,1014,8,49,1,49,1,49,1,49,3,49,1019,
        8,49,1,50,1,50,1,50,3,50,1024,8,50,1,50,1,50,3,50,1028,8,50,1,51,
        1,51,1,51,1,51,1,52,1,52,1,52,1,52,1,52,1,52,3,52,1040,8,52,1,52,
        1,52,1,53,1,53,1,53,1,54,1,54,1,54,1,55,1,55,1,55,1,56,1,56,1,56,
        1,57,1,57,1,57,1,57,1,57,1,57,1,57,1,57,3,57,1064,8,57,1,58,1,58,
        1,58,1,59,1,59,1,59,1,59,1,59,1,59,1,59,1,59,1,59,1,59,1,59,1,59,
        1,59,1,59,1,59,3,59,1084,8,59,1,59,1,59,1,59,1,59,3,59,1090,8,59,
        1,59,1,59,1,59,1,59,3,59,1096,8,59,1,59,1,59,1,59,1,59,1,59,1,59,
        1,59,1,59,1,59,1,59,3,59,1108,8,59,1,59,1,59,1,59,1,59,3,59,1114,
        8,59,1,59,1,59,1,59,1,59,3,59,1120,8,59,1,59,1,59,1,59,1,59,1,59,
        1,59,3,59,1128,8,59,1,59,1,59,1,59,1,59,1,59,1,59,1,59,1,59,3,59,
        1138,8,59,1,59,1,59,1,59,1,59,3,59,1144,8,59,1,59,1,59,1,59,1,59,
        3,59,1150,8,59,1,59,1,59,1,59,1,59,1,59,1,59,1,59,1,59,1,59,3,59,
        1161,8,59,1,59,3,59,1164,8,59,1,59,3,59,1167,8,59,1,59,1,59,3,59,
        1171,8,59,1,60,1,60,1,60,1,60,1,60,1,60,1,60,1,60,1,60,1,60,3,60,
        1183,8,60,1,60,1,60,1,60,1,60,1,60,3,60,1190,8,60,1,60,1,60,1,60,
        1,60,1,60,3,60,1197,8,60,1,61,1,61,1,61,1,61,1,61,3,61,1204,8,61,
        1,62,1,62,1,62,1,62,1,62,1,63,1,63,1,63,1,63,1,63,1,63,1,63,1,63,
        1,63,1,63,1,63,1,63,1,63,1,63,1,63,1,63,1,63,1,63,1,63,1,63,1,63,
        1,63,3,63,1233,8,63,1,64,1,64,1,64,1,64,1,64,1,64,1,64,1,64,1,64,
        1,64,1,65,1,65,1,65,1,65,1,65,1,65,1,65,1,65,1,65,1,65,1,65,1,65,
        1,65,1,65,1,65,1,65,1,65,1,65,1,65,1,65,1,65,1,65,1,65,1,65,1,65,
        1,65,1,65,1,65,1,65,1,65,1,65,1,65,1,65,1,65,1,65,1,65,1,65,1,65,
        3,65,1283,8,65,1,65,1,65,1,65,1,65,1,65,1,65,1,65,1,65,1,65,1,65,
        1,65,1,65,1,65,1,65,1,65,1,65,1,65,3,65,1302,8,65,1,66,1,66,1,66,
        1,66,1,66,1,66,1,67,1,67,1,67,1,67,1,67,1,67,1,67,1,67,1,67,1,67,
        1,67,1,67,1,67,1,67,1,67,1,67,1,67,1,67,1,67,1,67,1,67,1,67,1,67,
        1,67,1,67,1,67,1,67,3,67,1337,8,67,1,68,1,68,1,68,1,68,1,68,1,68,
        1,68,1,68,1,68,1,68,1,68,1,68,1,69,1,69,1,69,1,69,1,69,1,69,1,69,
        1,69,1,69,1,69,1,69,1,69,1,69,1,69,1,69,1,69,1,69,1,69,1,69,1,69,
        1,69,1,69,1,69,1,69,1,69,1,69,3,69,1377,8,69,1,70,1,70,1,70,1,70,
        1,70,1,70,1,70,1,70,1,70,1,70,1,70,1,70,1,70,1,70,1,70,1,70,1,70,
        1,70,1,70,1,70,1,70,1,70,3,70,1401,8,70,1,71,1,71,1,71,1,71,1,71,
        1,71,1,71,1,71,1,71,1,71,1,71,1,71,1,72,1,72,1,72,1,72,1,72,1,72,
        1,72,1,72,1,72,1,72,1,72,1,72,1,72,1,72,1,72,1,72,1,72,1,72,1,72,
        1,72,1,72,1,72,1,72,3,72,1438,8,72,1,72,1,72,1,72,1,72,1,72,1,72,
        3,72,1446,8,72,1,73,1,73,1,73,1,73,1,73,1,73,1,73,1,73,1,73,1,73,
        1,73,1,73,1,73,3,73,1461,8,73,1,74,1,74,1,74,3,74,1466,8,74,1,74,
        1,74,1,74,3,74,1471,8,74,1,74,1,74,1,74,1,74,3,74,1477,8,74,1,74,
        1,74,1,74,3,74,1482,8,74,1,74,1,74,1,74,1,74,3,74,1488,8,74,1,74,
        1,74,1,74,1,74,3,74,1494,8,74,1,74,1,74,1,74,1,74,3,74,1500,8,74,
        1,74,1,74,1,74,1,74,1,74,1,74,1,74,1,74,1,74,1,74,3,74,1512,8,74,
        1,74,1,74,3,74,1516,8,74,1,75,1,75,1,75,1,75,1,75,1,75,1,76,1,76,
        1,76,1,76,1,76,1,76,1,76,1,76,1,76,1,76,1,76,1,76,1,76,1,76,1,76,
        1,76,1,76,1,76,1,76,3,76,1543,8,76,1,76,1,76,1,76,1,76,1,76,1,76,
        1,76,1,76,1,76,1,76,1,76,1,76,1,76,1,76,1,76,3,76,1560,8,76,1,77,
        1,77,1,77,1,77,1,77,1,77,1,77,1,77,1,77,1,78,1,78,1,78,1,78,1,78,
        1,78,1,78,1,78,1,78,1,78,1,78,1,78,1,78,1,78,1,78,1,78,1,78,1,78,
        1,78,1,78,1,78,1,78,1,78,1,78,1,78,1,78,3,78,1597,8,78,1,79,1,79,
        1,79,1,79,1,79,1,79,1,79,1,79,1,79,1,79,1,80,1,80,1,80,1,80,1,80,
        1,80,1,80,1,80,1,80,1,80,1,80,3,80,1620,8,80,1,81,1,81,1,81,1,81,
        1,81,1,81,1,81,1,82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,
        1,82,1,82,1,82,1,82,1,82,1,82,1,82,3,82,1646,8,82,1,83,1,83,1,83,
        1,83,1,83,1,83,1,83,1,84,1,84,1,84,1,84,1,84,1,84,1,84,1,84,1,84,
        1,84,1,84,3,84,1666,8,84,1,85,1,85,1,85,1,85,1,85,1,86,1,86,1,86,
        3,86,1676,8,86,1,86,1,86,1,86,3,86,1681,8,86,1,86,1,86,1,86,3,86,
        1686,8,86,1,86,1,86,1,86,3,86,1691,8,86,1,86,1,86,1,86,3,86,1696,
        8,86,1,86,1,86,1,86,3,86,1701,8,86,1,86,1,86,1,86,3,86,1706,8,86,
        1,86,1,86,1,86,3,86,1711,8,86,1,86,1,86,1,86,3,86,1716,8,86,1,86,
        1,86,1,86,3,86,1721,8,86,1,86,1,86,1,86,3,86,1726,8,86,1,86,1,86,
        1,86,3,86,1731,8,86,1,86,1,86,1,86,3,86,1736,8,86,1,86,3,86,1739,
        8,86,1,87,1,87,1,87,1,87,1,88,1,88,1,88,1,88,1,89,1,89,1,89,5,89,
        1752,8,89,10,89,12,89,1755,9,89,1,90,1,90,1,90,5,90,1760,8,90,10,
        90,12,90,1763,9,90,1,91,1,91,1,91,1,91,1,91,1,91,1,91,1,91,1,91,
        1,91,1,91,1,91,3,91,1777,8,91,1,91,1,91,1,91,1,91,1,91,1,91,1,91,
        1,91,1,91,1,91,1,91,1,91,1,91,1,91,3,91,1793,8,91,3,91,1795,8,91,
        1,91,1,91,1,91,1,91,1,91,1,91,1,91,1,91,1,91,3,91,1806,8,91,3,91,
        1808,8,91,1,91,1,91,1,91,1,91,1,91,1,91,3,91,1816,8,91,1,91,1,91,
        3,91,1820,8,91,1,91,1,91,1,91,1,91,1,91,1,91,1,91,1,91,1,91,3,91,
        1831,8,91,1,91,1,91,3,91,1835,8,91,1,91,1,91,3,91,1839,8,91,1,91,
        3,91,1842,8,91,1,91,1,91,1,91,1,91,1,91,1,91,1,91,1,91,1,91,1,91,
        1,91,3,91,1855,8,91,3,91,1857,8,91,1,91,1,91,1,91,1,91,1,91,3,91,
        1864,8,91,3,91,1866,8,91,1,91,1,91,1,91,1,91,1,91,3,91,1873,8,91,
        1,91,1,91,1,91,3,91,1878,8,91,3,91,1880,8,91,1,91,1,91,1,91,1,91,
        1,91,1,91,1,91,1,91,1,91,1,91,1,91,1,91,3,91,1894,8,91,1,91,1,91,
        1,91,1,91,1,91,1,91,5,91,1902,8,91,10,91,12,91,1905,9,91,1,92,1,
        92,1,93,1,93,1,94,1,94,1,95,1,95,1,96,1,96,1,96,5,96,1918,8,96,10,
        96,12,96,1921,9,96,1,96,3,96,1924,8,96,3,96,1926,8,96,1,96,1,96,
        5,96,1930,8,96,10,96,12,96,1933,9,96,1,96,1,96,1,97,1,97,1,97,1,
        97,1,98,1,98,1,98,1,98,1,98,1,98,3,98,1947,8,98,1,99,1,99,1,99,3,
        99,1952,8,99,1,100,1,100,1,100,5,100,1957,8,100,10,100,12,100,1960,
        9,100,1,101,1,101,1,101,1,101,1,101,1,101,3,101,1968,8,101,1,102,
        1,102,1,102,1,102,1,102,1,102,1,102,1,102,1,102,1,102,1,102,1,102,
        1,102,1,102,1,102,1,102,1,102,1,102,1,102,1,102,1,102,1,102,1,102,
        1,102,1,102,1,102,1,102,1,102,1,102,1,102,1,102,1,102,1,102,1,102,
        1,102,1,102,1,102,1,102,1,102,1,102,1,102,1,102,1,102,1,102,1,102,
        1,102,1,102,1,102,1,102,1,102,1,102,1,102,1,102,1,102,1,102,1,102,
        1,102,1,102,1,102,1,102,5,102,2030,8,102,10,102,12,102,2033,9,102,
        1,102,1,102,1,102,1,102,1,102,1,102,1,102,1,102,1,102,1,102,1,102,
        1,102,5,102,2047,8,102,10,102,12,102,2050,9,102,1,102,1,102,1,102,
        1,102,1,102,1,102,1,102,1,102,1,102,1,102,1,102,1,102,1,102,1,102,
        1,102,1,102,1,102,1,102,1,102,1,102,1,102,1,102,1,102,1,102,1,102,
        1,102,1,102,1,102,1,102,1,102,1,102,1,102,1,102,1,102,1,102,1,102,
        1,102,3,102,2089,8,102,1,103,1,103,1,103,1,103,1,103,1,103,0,1,182,
        104,0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,42,
        44,46,48,50,52,54,56,58,60,62,64,66,68,70,72,74,76,78,80,82,84,86,
        88,90,92,94,96,98,100,102,104,106,108,110,112,114,116,118,120,122,
        124,126,128,130,132,134,136,138,140,142,144,146,148,150,152,154,
        156,158,160,162,164,166,168,170,172,174,176,178,180,182,184,186,
        188,190,192,194,196,198,200,202,204,206,0,7,1,0,42,43,1,0,178,179,
        2,0,174,174,180,180,2,0,174,174,176,176,1,0,164,165,1,0,220,224,
        1,0,256,262,2494,0,247,1,0,0,0,2,252,1,0,0,0,4,262,1,0,0,0,6,313,
        1,0,0,0,8,316,1,0,0,0,10,327,1,0,0,0,12,336,1,0,0,0,14,345,1,0,0,
        0,16,354,1,0,0,0,18,363,1,0,0,0,20,372,1,0,0,0,22,381,1,0,0,0,24,
        390,1,0,0,0,26,399,1,0,0,0,28,408,1,0,0,0,30,417,1,0,0,0,32,426,
        1,0,0,0,34,435,1,0,0,0,36,444,1,0,0,0,38,453,1,0,0,0,40,462,1,0,
        0,0,42,471,1,0,0,0,44,480,1,0,0,0,46,489,1,0,0,0,48,569,1,0,0,0,
        50,571,1,0,0,0,52,606,1,0,0,0,54,643,1,0,0,0,56,654,1,0,0,0,58,656,
        1,0,0,0,60,684,1,0,0,0,62,686,1,0,0,0,64,724,1,0,0,0,66,726,1,0,
        0,0,68,766,1,0,0,0,70,768,1,0,0,0,72,791,1,0,0,0,74,793,1,0,0,0,
        76,820,1,0,0,0,78,822,1,0,0,0,80,839,1,0,0,0,82,851,1,0,0,0,84,877,
        1,0,0,0,86,879,1,0,0,0,88,922,1,0,0,0,90,924,1,0,0,0,92,969,1,0,
        0,0,94,971,1,0,0,0,96,980,1,0,0,0,98,1018,1,0,0,0,100,1020,1,0,0,
        0,102,1029,1,0,0,0,104,1033,1,0,0,0,106,1043,1,0,0,0,108,1046,1,
        0,0,0,110,1049,1,0,0,0,112,1052,1,0,0,0,114,1055,1,0,0,0,116,1065,
        1,0,0,0,118,1170,1,0,0,0,120,1172,1,0,0,0,122,1203,1,0,0,0,124,1205,
        1,0,0,0,126,1232,1,0,0,0,128,1234,1,0,0,0,130,1301,1,0,0,0,132,1303,
        1,0,0,0,134,1336,1,0,0,0,136,1338,1,0,0,0,138,1376,1,0,0,0,140,1400,
        1,0,0,0,142,1402,1,0,0,0,144,1445,1,0,0,0,146,1447,1,0,0,0,148,1515,
        1,0,0,0,150,1517,1,0,0,0,152,1559,1,0,0,0,154,1561,1,0,0,0,156,1596,
        1,0,0,0,158,1598,1,0,0,0,160,1619,1,0,0,0,162,1621,1,0,0,0,164,1645,
        1,0,0,0,166,1647,1,0,0,0,168,1665,1,0,0,0,170,1667,1,0,0,0,172,1738,
        1,0,0,0,174,1740,1,0,0,0,176,1744,1,0,0,0,178,1748,1,0,0,0,180,1756,
        1,0,0,0,182,1893,1,0,0,0,184,1906,1,0,0,0,186,1908,1,0,0,0,188,1910,
        1,0,0,0,190,1912,1,0,0,0,192,1914,1,0,0,0,194,1936,1,0,0,0,196,1946,
        1,0,0,0,198,1948,1,0,0,0,200,1953,1,0,0,0,202,1967,1,0,0,0,204,2088,
        1,0,0,0,206,2090,1,0,0,0,208,246,3,2,1,0,209,246,3,4,2,0,210,246,
        3,6,3,0,211,246,3,8,4,0,212,246,3,10,5,0,213,246,3,12,6,0,214,246,
        3,14,7,0,215,246,3,16,8,0,216,246,3,18,9,0,217,246,3,20,10,0,218,
        246,3,22,11,0,219,246,3,24,12,0,220,246,3,26,13,0,221,246,3,28,14,
        0,222,246,3,30,15,0,223,246,3,32,16,0,224,246,3,34,17,0,225,246,
        3,36,18,0,226,246,3,38,19,0,227,246,3,40,20,0,228,246,3,42,21,0,
        229,246,3,44,22,0,230,246,3,46,23,0,231,246,3,192,96,0,232,246,3,
        194,97,0,233,246,3,50,25,0,234,246,3,58,29,0,235,246,3,62,31,0,236,
        246,3,80,40,0,237,246,3,170,85,0,238,246,3,174,87,0,239,246,3,90,
        45,0,240,246,3,86,43,0,241,246,3,124,62,0,242,246,3,136,68,0,243,
        246,3,150,75,0,244,246,3,154,77,0,245,208,1,0,0,0,245,209,1,0,0,
        0,245,210,1,0,0,0,245,211,1,0,0,0,245,212,1,0,0,0,245,213,1,0,0,
        0,245,214,1,0,0,0,245,215,1,0,0,0,245,216,1,0,0,0,245,217,1,0,0,
        0,245,218,1,0,0,0,245,219,1,0,0,0,245,220,1,0,0,0,245,221,1,0,0,
        0,245,222,1,0,0,0,245,223,1,0,0,0,245,224,1,0,0,0,245,225,1,0,0,
        0,245,226,1,0,0,0,245,227,1,0,0,0,245,228,1,0,0,0,245,229,1,0,0,
        0,245,230,1,0,0,0,245,231,1,0,0,0,245,232,1,0,0,0,245,233,1,0,0,
        0,245,234,1,0,0,0,245,235,1,0,0,0,245,236,1,0,0,0,245,237,1,0,0,
        0,245,238,1,0,0,0,245,239,1,0,0,0,245,240,1,0,0,0,245,241,1,0,0,
        0,245,242,1,0,0,0,245,243,1,0,0,0,245,244,1,0,0,0,246,249,1,0,0,
        0,247,245,1,0,0,0,247,248,1,0,0,0,248,250,1,0,0,0,249,247,1,0,0,
        0,250,251,5,0,0,1,251,1,1,0,0,0,252,256,5,3,0,0,253,255,3,48,24,
        0,254,253,1,0,0,0,255,258,1,0,0,0,256,254,1,0,0,0,256,257,1,0,0,
        0,257,259,1,0,0,0,258,256,1,0,0,0,259,260,5,2,0,0,260,3,1,0,0,0,
        261,263,5,36,0,0,262,261,1,0,0,0,262,263,1,0,0,0,263,264,1,0,0,0,
        264,268,5,37,0,0,265,267,3,56,28,0,266,265,1,0,0,0,267,270,1,0,0,
        0,268,266,1,0,0,0,268,269,1,0,0,0,269,271,1,0,0,0,270,268,1,0,0,
        0,271,272,5,2,0,0,272,5,1,0,0,0,273,277,5,39,0,0,274,276,3,60,30,
        0,275,274,1,0,0,0,276,279,1,0,0,0,277,275,1,0,0,0,277,278,1,0,0,
        0,278,280,1,0,0,0,279,277,1,0,0,0,280,314,5,2,0,0,281,285,7,0,0,
        0,282,284,3,64,32,0,283,282,1,0,0,0,284,287,1,0,0,0,285,283,1,0,
        0,0,285,286,1,0,0,0,286,288,1,0,0,0,287,285,1,0,0,0,288,314,5,2,
        0,0,289,293,5,47,0,0,290,292,3,68,34,0,291,290,1,0,0,0,292,295,1,
        0,0,0,293,291,1,0,0,0,293,294,1,0,0,0,294,296,1,0,0,0,295,293,1,
        0,0,0,296,314,5,2,0,0,297,301,5,50,0,0,298,300,3,72,36,0,299,298,
        1,0,0,0,300,303,1,0,0,0,301,299,1,0,0,0,301,302,1,0,0,0,302,304,
        1,0,0,0,303,301,1,0,0,0,304,314,5,2,0,0,305,309,5,51,0,0,306,308,
        3,76,38,0,307,306,1,0,0,0,308,311,1,0,0,0,309,307,1,0,0,0,309,310,
        1,0,0,0,310,312,1,0,0,0,311,309,1,0,0,0,312,314,5,2,0,0,313,273,
        1,0,0,0,313,281,1,0,0,0,313,289,1,0,0,0,313,297,1,0,0,0,313,305,
        1,0,0,0,314,7,1,0,0,0,315,317,5,36,0,0,316,315,1,0,0,0,316,317,1,
        0,0,0,317,318,1,0,0,0,318,322,5,52,0,0,319,321,3,80,40,0,320,319,
        1,0,0,0,321,324,1,0,0,0,322,320,1,0,0,0,322,323,1,0,0,0,323,325,
        1,0,0,0,324,322,1,0,0,0,325,326,5,2,0,0,326,9,1,0,0,0,327,331,5,
        57,0,0,328,330,3,84,42,0,329,328,1,0,0,0,330,333,1,0,0,0,331,329,
        1,0,0,0,331,332,1,0,0,0,332,334,1,0,0,0,333,331,1,0,0,0,334,335,
        5,2,0,0,335,11,1,0,0,0,336,340,5,61,0,0,337,339,3,88,44,0,338,337,
        1,0,0,0,339,342,1,0,0,0,340,338,1,0,0,0,340,341,1,0,0,0,341,343,
        1,0,0,0,342,340,1,0,0,0,343,344,5,2,0,0,344,13,1,0,0,0,345,349,5,
        63,0,0,346,348,3,92,46,0,347,346,1,0,0,0,348,351,1,0,0,0,349,347,
        1,0,0,0,349,350,1,0,0,0,350,352,1,0,0,0,351,349,1,0,0,0,352,353,
        5,2,0,0,353,15,1,0,0,0,354,358,5,67,0,0,355,357,3,98,49,0,356,355,
        1,0,0,0,357,360,1,0,0,0,358,356,1,0,0,0,358,359,1,0,0,0,359,361,
        1,0,0,0,360,358,1,0,0,0,361,362,5,2,0,0,362,17,1,0,0,0,363,367,5,
        75,0,0,364,366,3,118,59,0,365,364,1,0,0,0,366,369,1,0,0,0,367,365,
        1,0,0,0,367,368,1,0,0,0,368,370,1,0,0,0,369,367,1,0,0,0,370,371,
        5,2,0,0,371,19,1,0,0,0,372,376,5,82,0,0,373,375,3,122,61,0,374,373,
        1,0,0,0,375,378,1,0,0,0,376,374,1,0,0,0,376,377,1,0,0,0,377,379,
        1,0,0,0,378,376,1,0,0,0,379,380,5,2,0,0,380,21,1,0,0,0,381,385,5,
        83,0,0,382,384,3,126,63,0,383,382,1,0,0,0,384,387,1,0,0,0,385,383,
        1,0,0,0,385,386,1,0,0,0,386,388,1,0,0,0,387,385,1,0,0,0,388,389,
        5,2,0,0,389,23,1,0,0,0,390,394,5,84,0,0,391,393,3,130,65,0,392,391,
        1,0,0,0,393,396,1,0,0,0,394,392,1,0,0,0,394,395,1,0,0,0,395,397,
        1,0,0,0,396,394,1,0,0,0,397,398,5,2,0,0,398,25,1,0,0,0,399,403,5,
        88,0,0,400,402,3,134,67,0,401,400,1,0,0,0,402,405,1,0,0,0,403,401,
        1,0,0,0,403,404,1,0,0,0,404,406,1,0,0,0,405,403,1,0,0,0,406,407,
        5,2,0,0,407,27,1,0,0,0,408,412,5,90,0,0,409,411,3,138,69,0,410,409,
        1,0,0,0,411,414,1,0,0,0,412,410,1,0,0,0,412,413,1,0,0,0,413,415,
        1,0,0,0,414,412,1,0,0,0,415,416,5,2,0,0,416,29,1,0,0,0,417,421,5,
        91,0,0,418,420,3,140,70,0,419,418,1,0,0,0,420,423,1,0,0,0,421,419,
        1,0,0,0,421,422,1,0,0,0,422,424,1,0,0,0,423,421,1,0,0,0,424,425,
        5,2,0,0,425,31,1,0,0,0,426,430,5,92,0,0,427,429,3,144,72,0,428,427,
        1,0,0,0,429,432,1,0,0,0,430,428,1,0,0,0,430,431,1,0,0,0,431,433,
        1,0,0,0,432,430,1,0,0,0,433,434,5,2,0,0,434,33,1,0,0,0,435,439,5,
        95,0,0,436,438,3,148,74,0,437,436,1,0,0,0,438,441,1,0,0,0,439,437,
        1,0,0,0,439,440,1,0,0,0,440,442,1,0,0,0,441,439,1,0,0,0,442,443,
        5,2,0,0,443,35,1,0,0,0,444,448,5,100,0,0,445,447,3,152,76,0,446,
        445,1,0,0,0,447,450,1,0,0,0,448,446,1,0,0,0,448,449,1,0,0,0,449,
        451,1,0,0,0,450,448,1,0,0,0,451,452,5,2,0,0,452,37,1,0,0,0,453,457,
        5,111,0,0,454,456,3,156,78,0,455,454,1,0,0,0,456,459,1,0,0,0,457,
        455,1,0,0,0,457,458,1,0,0,0,458,460,1,0,0,0,459,457,1,0,0,0,460,
        461,5,2,0,0,461,39,1,0,0,0,462,466,5,112,0,0,463,465,3,160,80,0,
        464,463,1,0,0,0,465,468,1,0,0,0,466,464,1,0,0,0,466,467,1,0,0,0,
        467,469,1,0,0,0,468,466,1,0,0,0,469,470,5,2,0,0,470,41,1,0,0,0,471,
        475,5,113,0,0,472,474,3,164,82,0,473,472,1,0,0,0,474,477,1,0,0,0,
        475,473,1,0,0,0,475,476,1,0,0,0,476,478,1,0,0,0,477,475,1,0,0,0,
        478,479,5,2,0,0,479,43,1,0,0,0,480,484,5,115,0,0,481,483,3,168,84,
        0,482,481,1,0,0,0,483,486,1,0,0,0,484,482,1,0,0,0,484,485,1,0,0,
        0,485,487,1,0,0,0,486,484,1,0,0,0,487,488,5,2,0,0,488,45,1,0,0,0,
        489,493,5,116,0,0,490,492,3,172,86,0,491,490,1,0,0,0,492,495,1,0,
        0,0,493,491,1,0,0,0,493,494,1,0,0,0,494,496,1,0,0,0,495,493,1,0,
        0,0,496,497,5,2,0,0,497,47,1,0,0,0,498,570,3,50,25,0,499,500,5,5,
        0,0,500,501,5,178,0,0,501,570,3,188,94,0,502,503,5,6,0,0,503,504,
        5,200,0,0,504,570,5,199,0,0,505,506,5,7,0,0,506,507,5,178,0,0,507,
        570,3,188,94,0,508,510,5,8,0,0,509,511,5,184,0,0,510,509,1,0,0,0,
        510,511,1,0,0,0,511,512,1,0,0,0,512,570,3,188,94,0,513,514,5,9,0,
        0,514,570,5,178,0,0,515,516,5,10,0,0,516,570,5,178,0,0,517,518,5,
        11,0,0,518,519,5,178,0,0,519,520,5,178,0,0,520,570,3,188,94,0,521,
        522,5,12,0,0,522,523,5,178,0,0,523,570,5,174,0,0,524,525,5,13,0,
        0,525,526,5,178,0,0,526,570,5,174,0,0,527,529,5,14,0,0,528,530,5,
        184,0,0,529,528,1,0,0,0,529,530,1,0,0,0,530,531,1,0,0,0,531,570,
        5,174,0,0,532,533,5,15,0,0,533,534,5,204,0,0,534,570,5,203,0,0,535,
        536,5,16,0,0,536,537,3,52,26,0,537,538,5,2,0,0,538,570,1,0,0,0,539,
        540,5,17,0,0,540,542,5,18,0,0,541,543,5,184,0,0,542,541,1,0,0,0,
        542,543,1,0,0,0,543,544,1,0,0,0,544,570,3,188,94,0,545,570,5,19,
        0,0,546,547,5,20,0,0,547,548,5,178,0,0,548,570,3,188,94,0,549,550,
        5,21,0,0,550,551,5,178,0,0,551,570,3,188,94,0,552,553,5,22,0,0,553,
        554,5,178,0,0,554,570,3,188,94,0,555,556,5,23,0,0,556,557,5,178,
        0,0,557,570,3,188,94,0,558,559,5,24,0,0,559,560,5,178,0,0,560,570,
        3,188,94,0,561,562,5,25,0,0,562,563,5,178,0,0,563,570,3,188,94,0,
        564,566,5,26,0,0,565,567,5,184,0,0,566,565,1,0,0,0,566,567,1,0,0,
        0,567,568,1,0,0,0,568,570,3,188,94,0,569,498,1,0,0,0,569,499,1,0,
        0,0,569,502,1,0,0,0,569,505,1,0,0,0,569,508,1,0,0,0,569,513,1,0,
        0,0,569,515,1,0,0,0,569,517,1,0,0,0,569,521,1,0,0,0,569,524,1,0,
        0,0,569,527,1,0,0,0,569,532,1,0,0,0,569,535,1,0,0,0,569,539,1,0,
        0,0,569,545,1,0,0,0,569,546,1,0,0,0,569,549,1,0,0,0,569,552,1,0,
        0,0,569,555,1,0,0,0,569,558,1,0,0,0,569,561,1,0,0,0,569,564,1,0,
        0,0,570,49,1,0,0,0,571,572,5,4,0,0,572,573,3,176,88,0,573,574,3,
        176,88,0,574,575,3,184,92,0,575,576,3,184,92,0,576,580,3,184,92,
        0,577,579,3,54,27,0,578,577,1,0,0,0,579,582,1,0,0,0,580,578,1,0,
        0,0,580,581,1,0,0,0,581,589,1,0,0,0,582,580,1,0,0,0,583,584,5,169,
        0,0,584,585,3,176,88,0,585,586,3,176,88,0,586,588,1,0,0,0,587,583,
        1,0,0,0,588,591,1,0,0,0,589,587,1,0,0,0,589,590,1,0,0,0,590,51,1,
        0,0,0,591,589,1,0,0,0,592,594,5,27,0,0,593,595,5,184,0,0,594,593,
        1,0,0,0,594,595,1,0,0,0,595,596,1,0,0,0,596,607,3,188,94,0,597,599,
        5,28,0,0,598,600,5,184,0,0,599,598,1,0,0,0,599,600,1,0,0,0,600,601,
        1,0,0,0,601,607,3,188,94,0,602,603,5,29,0,0,603,607,3,176,88,0,604,
        605,5,30,0,0,605,607,3,176,88,0,606,592,1,0,0,0,606,597,1,0,0,0,
        606,602,1,0,0,0,606,604,1,0,0,0,607,53,1,0,0,0,608,610,5,31,0,0,
        609,611,5,184,0,0,610,609,1,0,0,0,610,611,1,0,0,0,611,612,1,0,0,
        0,612,644,3,190,95,0,613,615,5,32,0,0,614,616,5,184,0,0,615,614,
        1,0,0,0,615,616,1,0,0,0,616,617,1,0,0,0,617,644,3,190,95,0,618,620,
        5,56,0,0,619,621,5,184,0,0,620,619,1,0,0,0,620,621,1,0,0,0,621,622,
        1,0,0,0,622,644,3,190,95,0,623,625,5,33,0,0,624,626,5,184,0,0,625,
        624,1,0,0,0,625,626,1,0,0,0,626,627,1,0,0,0,627,644,3,190,95,0,628,
        630,5,34,0,0,629,631,5,184,0,0,630,629,1,0,0,0,630,631,1,0,0,0,631,
        632,1,0,0,0,632,644,3,190,95,0,633,635,5,35,0,0,634,636,5,184,0,
        0,635,634,1,0,0,0,635,636,1,0,0,0,636,637,1,0,0,0,637,644,3,190,
        95,0,638,640,5,48,0,0,639,641,5,184,0,0,640,639,1,0,0,0,640,641,
        1,0,0,0,641,642,1,0,0,0,642,644,3,190,95,0,643,608,1,0,0,0,643,613,
        1,0,0,0,643,618,1,0,0,0,643,623,1,0,0,0,643,628,1,0,0,0,643,633,
        1,0,0,0,643,638,1,0,0,0,644,55,1,0,0,0,645,655,3,58,29,0,646,648,
        5,38,0,0,647,649,5,184,0,0,648,647,1,0,0,0,648,649,1,0,0,0,649,650,
        1,0,0,0,650,655,5,174,0,0,651,655,5,19,0,0,652,653,5,21,0,0,653,
        655,3,188,94,0,654,645,1,0,0,0,654,646,1,0,0,0,654,651,1,0,0,0,654,
        652,1,0,0,0,655,57,1,0,0,0,656,657,5,4,0,0,657,658,3,176,88,0,658,
        659,3,176,88,0,659,660,3,176,88,0,660,661,3,176,88,0,661,662,3,184,
        92,0,662,663,3,184,92,0,663,664,3,184,92,0,664,665,5,174,0,0,665,
        59,1,0,0,0,666,685,3,62,31,0,667,668,5,9,0,0,668,685,5,178,0,0,669,
        670,5,40,0,0,670,671,3,188,94,0,671,672,3,188,94,0,672,673,3,188,
        94,0,673,685,1,0,0,0,674,675,5,41,0,0,675,685,3,188,94,0,676,677,
        5,14,0,0,677,685,5,174,0,0,678,679,5,15,0,0,679,685,5,203,0,0,680,
        681,5,17,0,0,681,682,5,18,0,0,682,685,3,188,94,0,683,685,5,19,0,
        0,684,666,1,0,0,0,684,667,1,0,0,0,684,669,1,0,0,0,684,674,1,0,0,
        0,684,676,1,0,0,0,684,678,1,0,0,0,684,680,1,0,0,0,684,683,1,0,0,
        0,685,61,1,0,0,0,686,687,5,4,0,0,687,688,3,176,88,0,688,689,3,176,
        88,0,689,690,3,176,88,0,690,691,3,176,88,0,691,692,3,176,88,0,692,
        693,3,176,88,0,693,694,3,184,92,0,694,696,3,184,92,0,695,697,3,184,
        92,0,696,695,1,0,0,0,696,697,1,0,0,0,697,63,1,0,0,0,698,725,3,66,
        33,0,699,700,5,9,0,0,700,725,5,178,0,0,701,702,5,44,0,0,702,725,
        5,206,0,0,703,704,5,21,0,0,704,725,3,188,94,0,705,706,5,45,0,0,706,
        725,5,175,0,0,707,708,5,46,0,0,708,725,5,199,0,0,709,710,5,40,0,
        0,710,711,3,188,94,0,711,712,3,188,94,0,712,713,3,188,94,0,713,725,
        1,0,0,0,714,715,5,41,0,0,715,725,3,188,94,0,716,717,5,14,0,0,717,
        725,5,174,0,0,718,719,5,15,0,0,719,725,5,203,0,0,720,721,5,17,0,
        0,721,722,5,18,0,0,722,725,3,188,94,0,723,725,5,19,0,0,724,698,1,
        0,0,0,724,699,1,0,0,0,724,701,1,0,0,0,724,703,1,0,0,0,724,705,1,
        0,0,0,724,707,1,0,0,0,724,709,1,0,0,0,724,714,1,0,0,0,724,716,1,
        0,0,0,724,718,1,0,0,0,724,720,1,0,0,0,724,723,1,0,0,0,725,65,1,0,
        0,0,726,727,5,4,0,0,727,728,3,176,88,0,728,729,3,176,88,0,729,730,
        3,176,88,0,730,731,3,176,88,0,731,732,3,176,88,0,732,733,3,176,88,
        0,733,734,3,184,92,0,734,741,3,184,92,0,735,742,3,184,92,0,736,737,
        3,184,92,0,737,738,3,184,92,0,738,739,3,184,92,0,739,740,3,184,92,
        0,740,742,1,0,0,0,741,735,1,0,0,0,741,736,1,0,0,0,741,742,1,0,0,
        0,742,67,1,0,0,0,743,767,3,70,35,0,744,746,5,48,0,0,745,747,5,184,
        0,0,746,745,1,0,0,0,746,747,1,0,0,0,747,748,1,0,0,0,748,767,5,174,
        0,0,749,750,5,9,0,0,750,767,5,178,0,0,751,752,5,41,0,0,752,753,3,
        188,94,0,753,754,3,188,94,0,754,767,1,0,0,0,755,756,5,14,0,0,756,
        767,5,174,0,0,757,759,5,49,0,0,758,760,5,184,0,0,759,758,1,0,0,0,
        759,760,1,0,0,0,760,761,1,0,0,0,761,767,5,174,0,0,762,763,5,17,0,
        0,763,764,5,18,0,0,764,767,3,188,94,0,765,767,5,19,0,0,766,743,1,
        0,0,0,766,744,1,0,0,0,766,749,1,0,0,0,766,751,1,0,0,0,766,755,1,
        0,0,0,766,757,1,0,0,0,766,762,1,0,0,0,766,765,1,0,0,0,767,69,1,0,
        0,0,768,769,5,4,0,0,769,770,3,176,88,0,770,771,3,176,88,0,771,772,
        3,176,88,0,772,773,3,176,88,0,773,774,3,184,92,0,774,775,3,184,92,
        0,775,776,3,184,92,0,776,777,3,184,92,0,777,71,1,0,0,0,778,792,3,
        74,37,0,779,780,5,9,0,0,780,792,5,178,0,0,781,782,5,40,0,0,782,792,
        3,188,94,0,783,784,5,14,0,0,784,792,5,174,0,0,785,786,5,15,0,0,786,
        792,5,203,0,0,787,788,5,17,0,0,788,789,5,18,0,0,789,792,3,188,94,
        0,790,792,5,19,0,0,791,778,1,0,0,0,791,779,1,0,0,0,791,781,1,0,0,
        0,791,783,1,0,0,0,791,785,1,0,0,0,791,787,1,0,0,0,791,790,1,0,0,
        0,792,73,1,0,0,0,793,794,5,4,0,0,794,795,3,176,88,0,795,796,3,176,
        88,0,796,797,3,184,92,0,797,798,3,184,92,0,798,75,1,0,0,0,799,821,
        3,78,39,0,800,801,5,9,0,0,801,821,5,178,0,0,802,803,5,40,0,0,803,
        804,3,188,94,0,804,805,3,188,94,0,805,806,3,188,94,0,806,807,3,188,
        94,0,807,821,1,0,0,0,808,809,5,41,0,0,809,821,3,188,94,0,810,811,
        5,14,0,0,811,821,5,174,0,0,812,813,5,15,0,0,813,821,5,203,0,0,814,
        815,5,17,0,0,815,816,5,18,0,0,816,821,3,188,94,0,817,821,5,19,0,
        0,818,819,5,44,0,0,819,821,5,207,0,0,820,799,1,0,0,0,820,800,1,0,
        0,0,820,802,1,0,0,0,820,808,1,0,0,0,820,810,1,0,0,0,820,812,1,0,
        0,0,820,814,1,0,0,0,820,817,1,0,0,0,820,818,1,0,0,0,821,77,1,0,0,
        0,822,823,5,4,0,0,823,824,3,176,88,0,824,825,3,176,88,0,825,826,
        3,176,88,0,826,827,3,176,88,0,827,828,3,184,92,0,828,829,3,184,92,
        0,829,79,1,0,0,0,830,834,5,53,0,0,831,833,3,82,41,0,832,831,1,0,
        0,0,833,836,1,0,0,0,834,832,1,0,0,0,834,835,1,0,0,0,835,837,1,0,
        0,0,836,834,1,0,0,0,837,840,5,2,0,0,838,840,5,54,0,0,839,830,1,0,
        0,0,839,838,1,0,0,0,840,81,1,0,0,0,841,843,5,55,0,0,842,844,5,184,
        0,0,843,842,1,0,0,0,843,844,1,0,0,0,844,845,1,0,0,0,845,852,3,176,
        88,0,846,848,5,56,0,0,847,849,5,184,0,0,848,847,1,0,0,0,848,849,
        1,0,0,0,849,850,1,0,0,0,850,852,3,188,94,0,851,841,1,0,0,0,851,846,
        1,0,0,0,852,83,1,0,0,0,853,878,3,86,43,0,854,855,5,9,0,0,855,878,
        5,178,0,0,856,857,5,58,0,0,857,858,5,174,0,0,858,878,3,188,94,0,
        859,860,5,41,0,0,860,878,3,188,94,0,861,862,5,14,0,0,862,878,5,174,
        0,0,863,864,5,17,0,0,864,865,5,18,0,0,865,869,3,188,94,0,866,870,
        5,133,0,0,867,868,5,9,0,0,868,870,5,178,0,0,869,866,1,0,0,0,869,
        867,1,0,0,0,870,878,1,0,0,0,871,878,5,19,0,0,872,873,5,59,0,0,873,
        874,3,188,94,0,874,875,5,174,0,0,875,878,1,0,0,0,876,878,5,60,0,
        0,877,853,1,0,0,0,877,854,1,0,0,0,877,856,1,0,0,0,877,859,1,0,0,
        0,877,861,1,0,0,0,877,863,1,0,0,0,877,871,1,0,0,0,877,872,1,0,0,
        0,877,876,1,0,0,0,878,85,1,0,0,0,879,880,5,4,0,0,880,881,3,176,88,
        0,881,882,3,176,88,0,882,87,1,0,0,0,883,923,3,90,45,0,884,885,5,
        9,0,0,885,923,5,178,0,0,886,887,5,40,0,0,887,888,3,188,94,0,888,
        889,3,188,94,0,889,890,3,188,94,0,890,891,3,188,94,0,891,923,1,0,
        0,0,892,894,5,48,0,0,893,895,5,184,0,0,894,893,1,0,0,0,894,895,1,
        0,0,0,895,896,1,0,0,0,896,923,5,174,0,0,897,898,5,62,0,0,898,923,
        5,174,0,0,899,900,5,41,0,0,900,902,3,188,94,0,901,903,3,188,94,0,
        902,901,1,0,0,0,902,903,1,0,0,0,903,923,1,0,0,0,904,905,5,14,0,0,
        905,923,5,174,0,0,906,908,5,49,0,0,907,909,5,184,0,0,908,907,1,0,
        0,0,908,909,1,0,0,0,909,910,1,0,0,0,910,923,5,174,0,0,911,912,5,
        15,0,0,912,923,5,203,0,0,913,914,5,17,0,0,914,915,5,18,0,0,915,919,
        3,188,94,0,916,920,5,133,0,0,917,918,5,9,0,0,918,920,5,178,0,0,919,
        916,1,0,0,0,919,917,1,0,0,0,920,923,1,0,0,0,921,923,5,19,0,0,922,
        883,1,0,0,0,922,884,1,0,0,0,922,886,1,0,0,0,922,892,1,0,0,0,922,
        897,1,0,0,0,922,899,1,0,0,0,922,904,1,0,0,0,922,906,1,0,0,0,922,
        911,1,0,0,0,922,913,1,0,0,0,922,921,1,0,0,0,923,89,1,0,0,0,924,925,
        5,4,0,0,925,926,3,176,88,0,926,927,3,176,88,0,927,928,3,176,88,0,
        928,934,3,176,88,0,929,930,3,176,88,0,930,931,3,176,88,0,931,932,
        3,176,88,0,932,933,3,176,88,0,933,935,1,0,0,0,934,929,1,0,0,0,934,
        935,1,0,0,0,935,936,1,0,0,0,936,937,3,184,92,0,937,941,3,184,92,
        0,938,939,3,184,92,0,939,940,3,184,92,0,940,942,1,0,0,0,941,938,
        1,0,0,0,941,942,1,0,0,0,942,91,1,0,0,0,943,970,3,94,47,0,944,945,
        5,9,0,0,945,970,5,178,0,0,946,947,5,58,0,0,947,948,5,174,0,0,948,
        949,5,174,0,0,949,950,3,188,94,0,950,951,3,188,94,0,951,952,3,188,
        94,0,952,970,1,0,0,0,953,954,5,41,0,0,954,970,3,188,94,0,955,956,
        5,14,0,0,956,970,5,174,0,0,957,958,5,64,0,0,958,970,3,188,94,0,959,
        960,5,65,0,0,960,970,3,188,94,0,961,962,5,15,0,0,962,970,5,203,0,
        0,963,964,5,17,0,0,964,965,5,18,0,0,965,970,3,188,94,0,966,970,3,
        96,48,0,967,970,5,19,0,0,968,970,5,60,0,0,969,943,1,0,0,0,969,944,
        1,0,0,0,969,946,1,0,0,0,969,953,1,0,0,0,969,955,1,0,0,0,969,957,
        1,0,0,0,969,959,1,0,0,0,969,961,1,0,0,0,969,963,1,0,0,0,969,966,
        1,0,0,0,969,967,1,0,0,0,969,968,1,0,0,0,970,93,1,0,0,0,971,972,5,
        4,0,0,972,973,3,176,88,0,973,974,3,176,88,0,974,975,3,176,88,0,975,
        976,3,176,88,0,976,977,3,176,88,0,977,978,3,184,92,0,978,979,3,184,
        92,0,979,95,1,0,0,0,980,981,5,66,0,0,981,982,3,176,88,0,982,983,
        3,188,94,0,983,984,3,188,94,0,984,97,1,0,0,0,985,1019,3,100,50,0,
        986,1019,3,102,51,0,987,1019,3,104,52,0,988,1019,3,106,53,0,989,
        1019,3,108,54,0,990,1019,3,110,55,0,991,1019,3,112,56,0,992,1019,
        3,114,57,0,993,1019,3,116,58,0,994,995,5,9,0,0,995,1019,5,178,0,
        0,996,997,5,74,0,0,997,1019,3,188,94,0,998,999,5,62,0,0,999,1019,
        5,174,0,0,1000,1001,5,41,0,0,1001,1003,3,188,94,0,1002,1004,3,188,
        94,0,1003,1002,1,0,0,0,1003,1004,1,0,0,0,1004,1019,1,0,0,0,1005,
        1006,5,15,0,0,1006,1019,5,203,0,0,1007,1008,5,17,0,0,1008,1009,5,
        18,0,0,1009,1013,3,188,94,0,1010,1014,5,133,0,0,1011,1012,5,9,0,
        0,1012,1014,5,178,0,0,1013,1010,1,0,0,0,1013,1011,1,0,0,0,1014,1015,
        1,0,0,0,1015,1016,5,178,0,0,1016,1019,1,0,0,0,1017,1019,5,19,0,0,
        1018,985,1,0,0,0,1018,986,1,0,0,0,1018,987,1,0,0,0,1018,988,1,0,
        0,0,1018,989,1,0,0,0,1018,990,1,0,0,0,1018,991,1,0,0,0,1018,992,
        1,0,0,0,1018,993,1,0,0,0,1018,994,1,0,0,0,1018,996,1,0,0,0,1018,
        998,1,0,0,0,1018,1000,1,0,0,0,1018,1005,1,0,0,0,1018,1007,1,0,0,
        0,1018,1017,1,0,0,0,1019,99,1,0,0,0,1020,1021,5,68,0,0,1021,1023,
        3,176,88,0,1022,1024,3,176,88,0,1023,1022,1,0,0,0,1023,1024,1,0,
        0,0,1024,1025,1,0,0,0,1025,1027,3,188,94,0,1026,1028,3,188,94,0,
        1027,1026,1,0,0,0,1027,1028,1,0,0,0,1028,101,1,0,0,0,1029,1030,5,
        66,0,0,1030,1031,3,176,88,0,1031,1032,3,188,94,0,1032,103,1,0,0,
        0,1033,1034,5,51,0,0,1034,1035,3,176,88,0,1035,1036,3,176,88,0,1036,
        1037,3,176,88,0,1037,1039,5,178,0,0,1038,1040,5,175,0,0,1039,1038,
        1,0,0,0,1039,1040,1,0,0,0,1040,1041,1,0,0,0,1041,1042,5,178,0,0,
        1042,105,1,0,0,0,1043,1044,5,69,0,0,1044,1045,3,176,88,0,1045,107,
        1,0,0,0,1046,1047,5,63,0,0,1047,1048,3,176,88,0,1048,109,1,0,0,0,
        1049,1050,5,70,0,0,1050,1051,3,176,88,0,1051,111,1,0,0,0,1052,1053,
        5,71,0,0,1053,1054,3,176,88,0,1054,113,1,0,0,0,1055,1056,5,72,0,
        0,1056,1057,5,178,0,0,1057,1058,3,176,88,0,1058,1059,3,176,88,0,
        1059,1060,3,176,88,0,1060,1061,3,176,88,0,1061,1063,3,176,88,0,1062,
        1064,3,176,88,0,1063,1062,1,0,0,0,1063,1064,1,0,0,0,1064,115,1,0,
        0,0,1065,1066,5,73,0,0,1066,1067,3,176,88,0,1067,117,1,0,0,0,1068,
        1171,3,120,60,0,1069,1070,5,9,0,0,1070,1171,5,178,0,0,1071,1072,
        5,27,0,0,1072,1171,3,188,94,0,1073,1074,5,41,0,0,1074,1171,3,188,
        94,0,1075,1076,5,76,0,0,1076,1077,3,188,94,0,1077,1078,3,188,94,
        0,1078,1083,3,188,94,0,1079,1080,3,188,94,0,1080,1081,3,188,94,0,
        1081,1082,3,188,94,0,1082,1084,1,0,0,0,1083,1079,1,0,0,0,1083,1084,
        1,0,0,0,1084,1089,1,0,0,0,1085,1086,3,188,94,0,1086,1087,3,188,94,
        0,1087,1088,3,188,94,0,1088,1090,1,0,0,0,1089,1085,1,0,0,0,1089,
        1090,1,0,0,0,1090,1095,1,0,0,0,1091,1092,3,188,94,0,1092,1093,3,
        188,94,0,1093,1094,3,188,94,0,1094,1096,1,0,0,0,1095,1091,1,0,0,
        0,1095,1096,1,0,0,0,1096,1171,1,0,0,0,1097,1098,5,14,0,0,1098,1171,
        5,174,0,0,1099,1100,5,77,0,0,1100,1101,3,188,94,0,1101,1102,3,188,
        94,0,1102,1107,3,188,94,0,1103,1104,3,188,94,0,1104,1105,3,188,94,
        0,1105,1106,3,188,94,0,1106,1108,1,0,0,0,1107,1103,1,0,0,0,1107,
        1108,1,0,0,0,1108,1113,1,0,0,0,1109,1110,3,188,94,0,1110,1111,3,
        188,94,0,1111,1112,3,188,94,0,1112,1114,1,0,0,0,1113,1109,1,0,0,
        0,1113,1114,1,0,0,0,1114,1119,1,0,0,0,1115,1116,3,188,94,0,1116,
        1117,3,188,94,0,1117,1118,3,188,94,0,1118,1120,1,0,0,0,1119,1115,
        1,0,0,0,1119,1120,1,0,0,0,1120,1171,1,0,0,0,1121,1122,5,17,0,0,1122,
        1123,5,18,0,0,1123,1127,3,188,94,0,1124,1128,5,133,0,0,1125,1126,
        5,9,0,0,1126,1128,5,178,0,0,1127,1124,1,0,0,0,1127,1125,1,0,0,0,
        1128,1171,1,0,0,0,1129,1130,5,78,0,0,1130,1131,3,188,94,0,1131,1132,
        3,188,94,0,1132,1137,3,188,94,0,1133,1134,3,188,94,0,1134,1135,3,
        188,94,0,1135,1136,3,188,94,0,1136,1138,1,0,0,0,1137,1133,1,0,0,
        0,1137,1138,1,0,0,0,1138,1143,1,0,0,0,1139,1140,3,188,94,0,1140,
        1141,3,188,94,0,1141,1142,3,188,94,0,1142,1144,1,0,0,0,1143,1139,
        1,0,0,0,1143,1144,1,0,0,0,1144,1149,1,0,0,0,1145,1146,3,188,94,0,
        1146,1147,3,188,94,0,1147,1148,3,188,94,0,1148,1150,1,0,0,0,1149,
        1145,1,0,0,0,1149,1150,1,0,0,0,1150,1171,1,0,0,0,1151,1171,5,19,
        0,0,1152,1153,5,21,0,0,1153,1171,3,188,94,0,1154,1155,5,79,0,0,1155,
        1171,5,210,0,0,1156,1157,5,59,0,0,1157,1158,5,81,0,0,1158,1160,3,
        188,94,0,1159,1161,3,188,94,0,1160,1159,1,0,0,0,1160,1161,1,0,0,
        0,1161,1163,1,0,0,0,1162,1164,3,188,94,0,1163,1162,1,0,0,0,1163,
        1164,1,0,0,0,1164,1166,1,0,0,0,1165,1167,3,188,94,0,1166,1165,1,
        0,0,0,1166,1167,1,0,0,0,1167,1171,1,0,0,0,1168,1171,5,80,0,0,1169,
        1171,5,60,0,0,1170,1068,1,0,0,0,1170,1069,1,0,0,0,1170,1071,1,0,
        0,0,1170,1073,1,0,0,0,1170,1075,1,0,0,0,1170,1097,1,0,0,0,1170,1099,
        1,0,0,0,1170,1121,1,0,0,0,1170,1129,1,0,0,0,1170,1151,1,0,0,0,1170,
        1152,1,0,0,0,1170,1154,1,0,0,0,1170,1156,1,0,0,0,1170,1168,1,0,0,
        0,1170,1169,1,0,0,0,1171,119,1,0,0,0,1172,1173,5,4,0,0,1173,1174,
        3,176,88,0,1174,1175,3,176,88,0,1175,1176,3,176,88,0,1176,1182,3,
        176,88,0,1177,1178,3,176,88,0,1178,1179,3,176,88,0,1179,1180,3,176,
        88,0,1180,1181,3,176,88,0,1181,1183,1,0,0,0,1182,1177,1,0,0,0,1182,
        1183,1,0,0,0,1183,1189,1,0,0,0,1184,1185,3,176,88,0,1185,1186,3,
        176,88,0,1186,1187,3,176,88,0,1187,1188,3,176,88,0,1188,1190,1,0,
        0,0,1189,1184,1,0,0,0,1189,1190,1,0,0,0,1190,1196,1,0,0,0,1191,1192,
        3,176,88,0,1192,1193,3,176,88,0,1193,1194,3,176,88,0,1194,1195,3,
        176,88,0,1195,1197,1,0,0,0,1196,1191,1,0,0,0,1196,1197,1,0,0,0,1197,
        121,1,0,0,0,1198,1204,3,124,62,0,1199,1200,5,21,0,0,1200,1204,3,
        188,94,0,1201,1204,5,17,0,0,1202,1204,5,19,0,0,1203,1198,1,0,0,0,
        1203,1199,1,0,0,0,1203,1201,1,0,0,0,1203,1202,1,0,0,0,1204,123,1,
        0,0,0,1205,1206,5,4,0,0,1206,1207,3,176,88,0,1207,1208,3,184,92,
        0,1208,1209,3,184,92,0,1209,125,1,0,0,0,1210,1233,3,128,64,0,1211,
        1212,5,9,0,0,1212,1233,5,178,0,0,1213,1214,5,40,0,0,1214,1215,3,
        188,94,0,1215,1216,3,188,94,0,1216,1217,3,188,94,0,1217,1218,3,188,
        94,0,1218,1219,3,188,94,0,1219,1233,1,0,0,0,1220,1221,5,41,0,0,1221,
        1233,3,188,94,0,1222,1223,5,14,0,0,1223,1233,5,174,0,0,1224,1225,
        5,15,0,0,1225,1233,5,203,0,0,1226,1227,5,17,0,0,1227,1228,5,18,0,
        0,1228,1233,3,188,94,0,1229,1233,5,19,0,0,1230,1231,5,44,0,0,1231,
        1233,5,207,0,0,1232,1210,1,0,0,0,1232,1211,1,0,0,0,1232,1213,1,0,
        0,0,1232,1220,1,0,0,0,1232,1222,1,0,0,0,1232,1224,1,0,0,0,1232,1226,
        1,0,0,0,1232,1229,1,0,0,0,1232,1230,1,0,0,0,1233,127,1,0,0,0,1234,
        1235,5,4,0,0,1235,1236,3,176,88,0,1236,1237,3,176,88,0,1237,1238,
        3,176,88,0,1238,1239,3,176,88,0,1239,1240,3,176,88,0,1240,1241,3,
        176,88,0,1241,1242,3,184,92,0,1242,1243,3,184,92,0,1243,129,1,0,
        0,0,1244,1302,3,132,66,0,1245,1246,5,9,0,0,1246,1302,5,178,0,0,1247,
        1248,5,27,0,0,1248,1302,3,188,94,0,1249,1250,5,85,0,0,1250,1302,
        3,188,94,0,1251,1252,5,41,0,0,1252,1302,3,188,94,0,1253,1254,5,76,
        0,0,1254,1255,3,188,94,0,1255,1256,3,188,94,0,1256,1257,3,188,94,
        0,1257,1258,3,188,94,0,1258,1259,3,188,94,0,1259,1260,3,188,94,0,
        1260,1261,3,188,94,0,1261,1302,1,0,0,0,1262,1263,5,86,0,0,1263,1302,
        5,174,0,0,1264,1265,5,87,0,0,1265,1266,3,188,94,0,1266,1267,3,188,
        94,0,1267,1268,3,188,94,0,1268,1269,3,188,94,0,1269,1270,3,188,94,
        0,1270,1271,3,188,94,0,1271,1272,3,188,94,0,1272,1273,3,188,94,0,
        1273,1302,1,0,0,0,1274,1275,5,14,0,0,1275,1302,5,174,0,0,1276,1277,
        5,17,0,0,1277,1278,5,18,0,0,1278,1282,3,188,94,0,1279,1283,5,133,
        0,0,1280,1281,5,9,0,0,1281,1283,5,178,0,0,1282,1279,1,0,0,0,1282,
        1280,1,0,0,0,1283,1302,1,0,0,0,1284,1285,5,78,0,0,1285,1286,3,188,
        94,0,1286,1287,3,188,94,0,1287,1288,3,188,94,0,1288,1289,3,188,94,
        0,1289,1290,3,188,94,0,1290,1291,3,188,94,0,1291,1292,3,188,94,0,
        1292,1302,1,0,0,0,1293,1302,5,19,0,0,1294,1295,5,149,0,0,1295,1302,
        5,174,0,0,1296,1297,5,59,0,0,1297,1298,3,188,94,0,1298,1299,3,188,
        94,0,1299,1302,1,0,0,0,1300,1302,5,60,0,0,1301,1244,1,0,0,0,1301,
        1245,1,0,0,0,1301,1247,1,0,0,0,1301,1249,1,0,0,0,1301,1251,1,0,0,
        0,1301,1253,1,0,0,0,1301,1262,1,0,0,0,1301,1264,1,0,0,0,1301,1274,
        1,0,0,0,1301,1276,1,0,0,0,1301,1284,1,0,0,0,1301,1293,1,0,0,0,1301,
        1294,1,0,0,0,1301,1296,1,0,0,0,1301,1300,1,0,0,0,1302,131,1,0,0,
        0,1303,1304,5,4,0,0,1304,1305,3,176,88,0,1305,1306,3,176,88,0,1306,
        1307,3,176,88,0,1307,1308,3,176,88,0,1308,133,1,0,0,0,1309,1337,
        3,136,68,0,1310,1311,5,9,0,0,1311,1337,5,178,0,0,1312,1313,5,21,
        0,0,1313,1337,3,188,94,0,1314,1315,5,44,0,0,1315,1337,5,208,0,0,
        1316,1317,5,40,0,0,1317,1318,3,188,94,0,1318,1319,3,188,94,0,1319,
        1320,3,188,94,0,1320,1337,1,0,0,0,1321,1322,5,89,0,0,1322,1323,3,
        188,94,0,1323,1324,3,188,94,0,1324,1325,3,188,94,0,1325,1337,1,0,
        0,0,1326,1327,5,41,0,0,1327,1337,3,188,94,0,1328,1329,5,14,0,0,1329,
        1337,5,174,0,0,1330,1331,5,15,0,0,1331,1337,5,203,0,0,1332,1333,
        5,17,0,0,1333,1334,5,18,0,0,1334,1337,3,188,94,0,1335,1337,5,19,
        0,0,1336,1309,1,0,0,0,1336,1310,1,0,0,0,1336,1312,1,0,0,0,1336,1314,
        1,0,0,0,1336,1316,1,0,0,0,1336,1321,1,0,0,0,1336,1326,1,0,0,0,1336,
        1328,1,0,0,0,1336,1330,1,0,0,0,1336,1332,1,0,0,0,1336,1335,1,0,0,
        0,1337,135,1,0,0,0,1338,1339,5,4,0,0,1339,1340,3,176,88,0,1340,1341,
        3,176,88,0,1341,1342,3,176,88,0,1342,1343,3,176,88,0,1343,1344,3,
        176,88,0,1344,1345,3,176,88,0,1345,1346,3,176,88,0,1346,1347,3,184,
        92,0,1347,1348,3,184,92,0,1348,1349,3,184,92,0,1349,137,1,0,0,0,
        1350,1377,3,136,68,0,1351,1352,5,9,0,0,1352,1377,5,178,0,0,1353,
        1354,5,21,0,0,1354,1377,3,188,94,0,1355,1356,5,40,0,0,1356,1357,
        3,188,94,0,1357,1358,3,188,94,0,1358,1359,3,188,94,0,1359,1377,1,
        0,0,0,1360,1361,5,89,0,0,1361,1362,3,188,94,0,1362,1363,3,188,94,
        0,1363,1364,3,188,94,0,1364,1365,3,188,94,0,1365,1377,1,0,0,0,1366,
        1367,5,41,0,0,1367,1377,3,188,94,0,1368,1369,5,14,0,0,1369,1377,
        5,174,0,0,1370,1371,5,15,0,0,1371,1377,5,203,0,0,1372,1373,5,17,
        0,0,1373,1374,5,18,0,0,1374,1377,3,188,94,0,1375,1377,5,19,0,0,1376,
        1350,1,0,0,0,1376,1351,1,0,0,0,1376,1353,1,0,0,0,1376,1355,1,0,0,
        0,1376,1360,1,0,0,0,1376,1366,1,0,0,0,1376,1368,1,0,0,0,1376,1370,
        1,0,0,0,1376,1372,1,0,0,0,1376,1375,1,0,0,0,1377,139,1,0,0,0,1378,
        1401,3,142,71,0,1379,1380,5,9,0,0,1380,1401,5,178,0,0,1381,1382,
        5,40,0,0,1382,1383,3,188,94,0,1383,1384,3,188,94,0,1384,1385,3,188,
        94,0,1385,1386,3,188,94,0,1386,1387,3,188,94,0,1387,1388,3,188,94,
        0,1388,1389,3,188,94,0,1389,1401,1,0,0,0,1390,1391,5,41,0,0,1391,
        1401,3,188,94,0,1392,1393,5,14,0,0,1393,1401,5,174,0,0,1394,1395,
        5,15,0,0,1395,1401,5,203,0,0,1396,1397,5,17,0,0,1397,1398,5,18,0,
        0,1398,1401,3,188,94,0,1399,1401,5,19,0,0,1400,1378,1,0,0,0,1400,
        1379,1,0,0,0,1400,1381,1,0,0,0,1400,1390,1,0,0,0,1400,1392,1,0,0,
        0,1400,1394,1,0,0,0,1400,1396,1,0,0,0,1400,1399,1,0,0,0,1401,141,
        1,0,0,0,1402,1403,5,4,0,0,1403,1404,3,176,88,0,1404,1405,3,176,88,
        0,1405,1406,3,176,88,0,1406,1407,3,176,88,0,1407,1408,3,176,88,0,
        1408,1409,3,176,88,0,1409,1410,3,176,88,0,1410,1411,3,176,88,0,1411,
        1412,3,184,92,0,1412,1413,3,184,92,0,1413,143,1,0,0,0,1414,1446,
        3,146,73,0,1415,1416,5,9,0,0,1416,1446,5,178,0,0,1417,1418,5,93,
        0,0,1418,1446,5,178,0,0,1419,1420,5,58,0,0,1420,1421,5,174,0,0,1421,
        1422,5,174,0,0,1422,1446,3,188,94,0,1423,1424,5,74,0,0,1424,1446,
        3,188,94,0,1425,1426,5,41,0,0,1426,1446,3,188,94,0,1427,1428,5,14,
        0,0,1428,1446,5,174,0,0,1429,1430,5,15,0,0,1430,1446,5,203,0,0,1431,
        1432,5,17,0,0,1432,1433,5,18,0,0,1433,1437,3,188,94,0,1434,1438,
        5,133,0,0,1435,1436,5,9,0,0,1436,1438,5,178,0,0,1437,1434,1,0,0,
        0,1437,1435,1,0,0,0,1438,1446,1,0,0,0,1439,1446,5,19,0,0,1440,1441,
        5,59,0,0,1441,1442,5,94,0,0,1442,1443,5,174,0,0,1443,1446,5,174,
        0,0,1444,1446,5,60,0,0,1445,1414,1,0,0,0,1445,1415,1,0,0,0,1445,
        1417,1,0,0,0,1445,1419,1,0,0,0,1445,1423,1,0,0,0,1445,1425,1,0,0,
        0,1445,1427,1,0,0,0,1445,1429,1,0,0,0,1445,1431,1,0,0,0,1445,1439,
        1,0,0,0,1445,1440,1,0,0,0,1445,1444,1,0,0,0,1446,145,1,0,0,0,1447,
        1448,5,4,0,0,1448,1449,3,176,88,0,1449,1450,3,176,88,0,1450,1451,
        3,176,88,0,1451,1452,3,176,88,0,1452,1453,3,176,88,0,1453,1454,3,
        176,88,0,1454,1455,3,176,88,0,1455,1456,3,176,88,0,1456,1457,3,176,
        88,0,1457,1458,3,176,88,0,1458,1460,3,176,88,0,1459,1461,3,176,88,
        0,1460,1459,1,0,0,0,1460,1461,1,0,0,0,1461,147,1,0,0,0,1462,1516,
        3,150,75,0,1463,1465,5,9,0,0,1464,1466,5,184,0,0,1465,1464,1,0,0,
        0,1465,1466,1,0,0,0,1466,1467,1,0,0,0,1467,1516,5,178,0,0,1468,1470,
        5,41,0,0,1469,1471,5,184,0,0,1470,1469,1,0,0,0,1470,1471,1,0,0,0,
        1471,1472,1,0,0,0,1472,1473,5,178,0,0,1473,1516,3,188,94,0,1474,
        1476,5,14,0,0,1475,1477,5,184,0,0,1476,1475,1,0,0,0,1476,1477,1,
        0,0,0,1477,1478,1,0,0,0,1478,1516,5,174,0,0,1479,1481,5,15,0,0,1480,
        1482,5,202,0,0,1481,1480,1,0,0,0,1481,1482,1,0,0,0,1482,1483,1,0,
        0,0,1483,1484,5,204,0,0,1484,1516,5,203,0,0,1485,1487,5,96,0,0,1486,
        1488,5,184,0,0,1487,1486,1,0,0,0,1487,1488,1,0,0,0,1488,1489,1,0,
        0,0,1489,1490,5,178,0,0,1490,1516,3,188,94,0,1491,1493,5,97,0,0,
        1492,1494,5,184,0,0,1493,1492,1,0,0,0,1493,1494,1,0,0,0,1494,1495,
        1,0,0,0,1495,1496,5,178,0,0,1496,1516,3,188,94,0,1497,1499,5,98,
        0,0,1498,1500,5,184,0,0,1499,1498,1,0,0,0,1499,1500,1,0,0,0,1500,
        1501,1,0,0,0,1501,1502,5,178,0,0,1502,1503,3,188,94,0,1503,1504,
        3,188,94,0,1504,1516,1,0,0,0,1505,1506,5,17,0,0,1506,1507,5,18,0,
        0,1507,1511,3,188,94,0,1508,1512,5,133,0,0,1509,1510,5,9,0,0,1510,
        1512,5,178,0,0,1511,1508,1,0,0,0,1511,1509,1,0,0,0,1512,1516,1,0,
        0,0,1513,1516,5,19,0,0,1514,1516,5,99,0,0,1515,1462,1,0,0,0,1515,
        1463,1,0,0,0,1515,1468,1,0,0,0,1515,1474,1,0,0,0,1515,1479,1,0,0,
        0,1515,1485,1,0,0,0,1515,1491,1,0,0,0,1515,1497,1,0,0,0,1515,1505,
        1,0,0,0,1515,1513,1,0,0,0,1515,1514,1,0,0,0,1516,149,1,0,0,0,1517,
        1518,5,4,0,0,1518,1519,3,176,88,0,1519,1520,3,176,88,0,1520,1521,
        3,184,92,0,1521,1522,3,184,92,0,1522,151,1,0,0,0,1523,1560,3,154,
        77,0,1524,1525,5,9,0,0,1525,1560,5,178,0,0,1526,1527,5,101,0,0,1527,
        1560,5,174,0,0,1528,1529,5,40,0,0,1529,1530,3,188,94,0,1530,1531,
        3,188,94,0,1531,1560,1,0,0,0,1532,1533,5,41,0,0,1533,1560,3,188,
        94,0,1534,1535,5,14,0,0,1535,1560,5,174,0,0,1536,1537,5,17,0,0,1537,
        1538,5,18,0,0,1538,1542,3,188,94,0,1539,1543,5,133,0,0,1540,1541,
        5,9,0,0,1541,1543,5,178,0,0,1542,1539,1,0,0,0,1542,1540,1,0,0,0,
        1543,1560,1,0,0,0,1544,1560,5,19,0,0,1545,1546,5,102,0,0,1546,1560,
        5,178,0,0,1547,1548,5,103,0,0,1548,1549,3,188,94,0,1549,1550,5,174,
        0,0,1550,1560,1,0,0,0,1551,1560,5,104,0,0,1552,1560,5,105,0,0,1553,
        1560,5,106,0,0,1554,1560,5,107,0,0,1555,1560,5,108,0,0,1556,1560,
        5,109,0,0,1557,1558,5,110,0,0,1558,1560,5,174,0,0,1559,1523,1,0,
        0,0,1559,1524,1,0,0,0,1559,1526,1,0,0,0,1559,1528,1,0,0,0,1559,1532,
        1,0,0,0,1559,1534,1,0,0,0,1559,1536,1,0,0,0,1559,1544,1,0,0,0,1559,
        1545,1,0,0,0,1559,1547,1,0,0,0,1559,1551,1,0,0,0,1559,1552,1,0,0,
        0,1559,1553,1,0,0,0,1559,1554,1,0,0,0,1559,1555,1,0,0,0,1559,1556,
        1,0,0,0,1559,1557,1,0,0,0,1560,153,1,0,0,0,1561,1562,5,4,0,0,1562,
        1563,3,176,88,0,1563,1564,3,176,88,0,1564,1565,3,176,88,0,1565,1566,
        3,176,88,0,1566,1567,3,176,88,0,1567,1568,3,184,92,0,1568,1569,3,
        184,92,0,1569,155,1,0,0,0,1570,1597,3,158,79,0,1571,1572,5,9,0,0,
        1572,1597,5,178,0,0,1573,1574,5,101,0,0,1574,1597,5,174,0,0,1575,
        1576,5,40,0,0,1576,1577,3,188,94,0,1577,1578,3,188,94,0,1578,1597,
        1,0,0,0,1579,1580,5,41,0,0,1580,1597,3,188,94,0,1581,1582,5,14,0,
        0,1582,1597,5,174,0,0,1583,1597,5,104,0,0,1584,1597,5,105,0,0,1585,
        1597,5,103,0,0,1586,1597,5,106,0,0,1587,1597,5,107,0,0,1588,1597,
        5,110,0,0,1589,1590,5,17,0,0,1590,1597,5,18,0,0,1591,1597,5,19,0,
        0,1592,1593,5,102,0,0,1593,1597,5,178,0,0,1594,1597,5,108,0,0,1595,
        1597,5,109,0,0,1596,1570,1,0,0,0,1596,1571,1,0,0,0,1596,1573,1,0,
        0,0,1596,1575,1,0,0,0,1596,1579,1,0,0,0,1596,1581,1,0,0,0,1596,1583,
        1,0,0,0,1596,1584,1,0,0,0,1596,1585,1,0,0,0,1596,1586,1,0,0,0,1596,
        1587,1,0,0,0,1596,1588,1,0,0,0,1596,1589,1,0,0,0,1596,1591,1,0,0,
        0,1596,1592,1,0,0,0,1596,1594,1,0,0,0,1596,1595,1,0,0,0,1597,157,
        1,0,0,0,1598,1599,5,4,0,0,1599,1600,3,176,88,0,1600,1601,3,176,88,
        0,1601,1602,3,176,88,0,1602,1603,3,176,88,0,1603,1604,3,176,88,0,
        1604,1605,3,176,88,0,1605,1606,3,184,92,0,1606,1607,3,184,92,0,1607,
        159,1,0,0,0,1608,1620,3,162,81,0,1609,1610,5,9,0,0,1610,1620,5,178,
        0,0,1611,1612,5,41,0,0,1612,1620,3,188,94,0,1613,1614,5,14,0,0,1614,
        1620,5,174,0,0,1615,1616,5,17,0,0,1616,1617,5,18,0,0,1617,1620,3,
        188,94,0,1618,1620,5,19,0,0,1619,1608,1,0,0,0,1619,1609,1,0,0,0,
        1619,1611,1,0,0,0,1619,1613,1,0,0,0,1619,1615,1,0,0,0,1619,1618,
        1,0,0,0,1620,161,1,0,0,0,1621,1622,5,4,0,0,1622,1623,3,176,88,0,
        1623,1624,3,176,88,0,1624,1625,3,184,92,0,1625,1626,3,184,92,0,1626,
        1627,3,184,92,0,1627,163,1,0,0,0,1628,1646,3,166,83,0,1629,1630,
        5,9,0,0,1630,1646,5,178,0,0,1631,1632,5,114,0,0,1632,1646,5,174,
        0,0,1633,1634,5,40,0,0,1634,1646,3,188,94,0,1635,1636,5,41,0,0,1636,
        1646,3,188,94,0,1637,1638,5,14,0,0,1638,1646,5,174,0,0,1639,1640,
        5,17,0,0,1640,1641,5,18,0,0,1641,1646,3,188,94,0,1642,1646,5,19,
        0,0,1643,1644,5,110,0,0,1644,1646,5,174,0,0,1645,1628,1,0,0,0,1645,
        1629,1,0,0,0,1645,1631,1,0,0,0,1645,1633,1,0,0,0,1645,1635,1,0,0,
        0,1645,1637,1,0,0,0,1645,1639,1,0,0,0,1645,1642,1,0,0,0,1645,1643,
        1,0,0,0,1646,165,1,0,0,0,1647,1648,5,4,0,0,1648,1649,3,176,88,0,
        1649,1650,3,176,88,0,1650,1651,3,176,88,0,1651,1652,3,184,92,0,1652,
        1653,3,184,92,0,1653,167,1,0,0,0,1654,1666,3,170,85,0,1655,1656,
        5,9,0,0,1656,1666,5,178,0,0,1657,1658,5,41,0,0,1658,1666,3,188,94,
        0,1659,1660,5,14,0,0,1660,1666,5,174,0,0,1661,1662,5,17,0,0,1662,
        1663,5,18,0,0,1663,1666,3,188,94,0,1664,1666,5,19,0,0,1665,1654,
        1,0,0,0,1665,1655,1,0,0,0,1665,1657,1,0,0,0,1665,1659,1,0,0,0,1665,
        1661,1,0,0,0,1665,1664,1,0,0,0,1666,169,1,0,0,0,1667,1668,5,4,0,
        0,1668,1669,3,176,88,0,1669,1670,3,176,88,0,1670,1671,3,176,88,0,
        1671,171,1,0,0,0,1672,1739,3,174,87,0,1673,1675,5,117,0,0,1674,1676,
        5,184,0,0,1675,1674,1,0,0,0,1675,1676,1,0,0,0,1676,1677,1,0,0,0,
        1677,1739,3,188,94,0,1678,1680,5,118,0,0,1679,1681,5,184,0,0,1680,
        1679,1,0,0,0,1680,1681,1,0,0,0,1681,1682,1,0,0,0,1682,1739,3,188,
        94,0,1683,1685,5,119,0,0,1684,1686,5,184,0,0,1685,1684,1,0,0,0,1685,
        1686,1,0,0,0,1686,1687,1,0,0,0,1687,1739,5,174,0,0,1688,1690,5,120,
        0,0,1689,1691,5,184,0,0,1690,1689,1,0,0,0,1690,1691,1,0,0,0,1691,
        1692,1,0,0,0,1692,1739,5,174,0,0,1693,1695,5,121,0,0,1694,1696,5,
        184,0,0,1695,1694,1,0,0,0,1695,1696,1,0,0,0,1696,1697,1,0,0,0,1697,
        1739,5,174,0,0,1698,1700,5,122,0,0,1699,1701,5,184,0,0,1700,1699,
        1,0,0,0,1700,1701,1,0,0,0,1701,1702,1,0,0,0,1702,1739,5,178,0,0,
        1703,1705,5,123,0,0,1704,1706,5,184,0,0,1705,1704,1,0,0,0,1705,1706,
        1,0,0,0,1706,1707,1,0,0,0,1707,1739,3,188,94,0,1708,1710,5,124,0,
        0,1709,1711,5,184,0,0,1710,1709,1,0,0,0,1710,1711,1,0,0,0,1711,1712,
        1,0,0,0,1712,1739,3,188,94,0,1713,1715,5,125,0,0,1714,1716,5,184,
        0,0,1715,1714,1,0,0,0,1715,1716,1,0,0,0,1716,1717,1,0,0,0,1717,1739,
        3,188,94,0,1718,1720,5,126,0,0,1719,1721,5,184,0,0,1720,1719,1,0,
        0,0,1720,1721,1,0,0,0,1721,1722,1,0,0,0,1722,1739,3,188,94,0,1723,
        1725,5,127,0,0,1724,1726,5,184,0,0,1725,1724,1,0,0,0,1725,1726,1,
        0,0,0,1726,1727,1,0,0,0,1727,1739,5,174,0,0,1728,1730,5,128,0,0,
        1729,1731,5,184,0,0,1730,1729,1,0,0,0,1730,1731,1,0,0,0,1731,1732,
        1,0,0,0,1732,1739,5,174,0,0,1733,1735,5,129,0,0,1734,1736,5,184,
        0,0,1735,1734,1,0,0,0,1735,1736,1,0,0,0,1736,1737,1,0,0,0,1737,1739,
        5,174,0,0,1738,1672,1,0,0,0,1738,1673,1,0,0,0,1738,1678,1,0,0,0,
        1738,1683,1,0,0,0,1738,1688,1,0,0,0,1738,1693,1,0,0,0,1738,1698,
        1,0,0,0,1738,1703,1,0,0,0,1738,1708,1,0,0,0,1738,1713,1,0,0,0,1738,
        1718,1,0,0,0,1738,1723,1,0,0,0,1738,1728,1,0,0,0,1738,1733,1,0,0,
        0,1739,173,1,0,0,0,1740,1741,5,4,0,0,1741,1742,3,176,88,0,1742,1743,
        3,176,88,0,1743,175,1,0,0,0,1744,1745,5,181,0,0,1745,1746,3,178,
        89,0,1746,1747,5,182,0,0,1747,177,1,0,0,0,1748,1753,3,180,90,0,1749,
        1750,5,169,0,0,1750,1752,3,180,90,0,1751,1749,1,0,0,0,1752,1755,
        1,0,0,0,1753,1751,1,0,0,0,1753,1754,1,0,0,0,1754,179,1,0,0,0,1755,
        1753,1,0,0,0,1756,1761,3,182,91,0,1757,1758,5,170,0,0,1758,1760,
        3,182,91,0,1759,1757,1,0,0,0,1760,1763,1,0,0,0,1761,1759,1,0,0,0,
        1761,1762,1,0,0,0,1762,181,1,0,0,0,1763,1761,1,0,0,0,1764,1765,6,
        91,-1,0,1765,1766,5,181,0,0,1766,1767,3,178,89,0,1767,1768,5,182,
        0,0,1768,1894,1,0,0,0,1769,1894,5,133,0,0,1770,1771,5,135,0,0,1771,
        1772,7,1,0,0,1772,1773,7,2,0,0,1773,1894,7,1,0,0,1774,1776,5,136,
        0,0,1775,1777,5,195,0,0,1776,1775,1,0,0,0,1776,1777,1,0,0,0,1777,
        1778,1,0,0,0,1778,1779,5,196,0,0,1779,1780,5,197,0,0,1780,1894,3,
        186,93,0,1781,1782,5,137,0,0,1782,1894,3,182,91,29,1783,1784,5,138,
        0,0,1784,1894,3,182,91,28,1785,1786,5,139,0,0,1786,1894,3,182,91,
        27,1787,1794,5,140,0,0,1788,1795,5,179,0,0,1789,1792,5,178,0,0,1790,
        1791,5,183,0,0,1791,1793,5,178,0,0,1792,1790,1,0,0,0,1792,1793,1,
        0,0,0,1793,1795,1,0,0,0,1794,1788,1,0,0,0,1794,1789,1,0,0,0,1795,
        1894,1,0,0,0,1796,1894,5,141,0,0,1797,1798,5,142,0,0,1798,1894,5,
        174,0,0,1799,1894,5,143,0,0,1800,1807,5,144,0,0,1801,1808,5,179,
        0,0,1802,1805,5,178,0,0,1803,1804,5,183,0,0,1804,1806,5,178,0,0,
        1805,1803,1,0,0,0,1805,1806,1,0,0,0,1806,1808,1,0,0,0,1807,1801,
        1,0,0,0,1807,1802,1,0,0,0,1808,1894,1,0,0,0,1809,1810,5,171,0,0,
        1810,1894,3,182,91,21,1811,1812,5,145,0,0,1812,1813,5,181,0,0,1813,
        1815,3,186,93,0,1814,1816,5,172,0,0,1815,1814,1,0,0,0,1815,1816,
        1,0,0,0,1816,1817,1,0,0,0,1817,1819,3,186,93,0,1818,1820,5,172,0,
        0,1819,1818,1,0,0,0,1819,1820,1,0,0,0,1820,1821,1,0,0,0,1821,1822,
        3,186,93,0,1822,1823,5,182,0,0,1823,1824,5,146,0,0,1824,1825,3,186,
        93,0,1825,1894,1,0,0,0,1826,1827,5,145,0,0,1827,1828,5,181,0,0,1828,
        1830,5,167,0,0,1829,1831,5,184,0,0,1830,1829,1,0,0,0,1830,1831,1,
        0,0,0,1831,1832,1,0,0,0,1832,1834,3,176,88,0,1833,1835,5,172,0,0,
        1834,1833,1,0,0,0,1834,1835,1,0,0,0,1835,1841,1,0,0,0,1836,1838,
        5,168,0,0,1837,1839,5,184,0,0,1838,1837,1,0,0,0,1838,1839,1,0,0,
        0,1839,1840,1,0,0,0,1840,1842,3,176,88,0,1841,1836,1,0,0,0,1841,
        1842,1,0,0,0,1842,1843,1,0,0,0,1843,1844,5,182,0,0,1844,1845,5,146,
        0,0,1845,1846,3,186,93,0,1846,1894,1,0,0,0,1847,1894,5,147,0,0,1848,
        1894,5,148,0,0,1849,1856,5,149,0,0,1850,1857,5,180,0,0,1851,1854,
        5,174,0,0,1852,1853,5,183,0,0,1853,1855,5,174,0,0,1854,1852,1,0,
        0,0,1854,1855,1,0,0,0,1855,1857,1,0,0,0,1856,1850,1,0,0,0,1856,1851,
        1,0,0,0,1857,1894,1,0,0,0,1858,1865,5,150,0,0,1859,1866,5,179,0,
        0,1860,1863,5,178,0,0,1861,1862,5,183,0,0,1862,1864,5,178,0,0,1863,
        1861,1,0,0,0,1863,1864,1,0,0,0,1864,1866,1,0,0,0,1865,1859,1,0,0,
        0,1865,1860,1,0,0,0,1866,1894,1,0,0,0,1867,1879,5,152,0,0,1868,1880,
        5,179,0,0,1869,1872,5,178,0,0,1870,1871,5,183,0,0,1871,1873,5,178,
        0,0,1872,1870,1,0,0,0,1872,1873,1,0,0,0,1873,1880,1,0,0,0,1874,1877,
        5,177,0,0,1875,1876,5,183,0,0,1876,1878,5,177,0,0,1877,1875,1,0,
        0,0,1877,1878,1,0,0,0,1878,1880,1,0,0,0,1879,1868,1,0,0,0,1879,1869,
        1,0,0,0,1879,1874,1,0,0,0,1880,1894,1,0,0,0,1881,1894,5,153,0,0,
        1882,1894,5,154,0,0,1883,1894,5,155,0,0,1884,1894,5,156,0,0,1885,
        1894,5,157,0,0,1886,1894,5,158,0,0,1887,1894,5,159,0,0,1888,1894,
        5,160,0,0,1889,1894,5,161,0,0,1890,1894,5,162,0,0,1891,1894,5,130,
        0,0,1892,1894,5,131,0,0,1893,1764,1,0,0,0,1893,1769,1,0,0,0,1893,
        1770,1,0,0,0,1893,1774,1,0,0,0,1893,1781,1,0,0,0,1893,1783,1,0,0,
        0,1893,1785,1,0,0,0,1893,1787,1,0,0,0,1893,1796,1,0,0,0,1893,1797,
        1,0,0,0,1893,1799,1,0,0,0,1893,1800,1,0,0,0,1893,1809,1,0,0,0,1893,
        1811,1,0,0,0,1893,1826,1,0,0,0,1893,1847,1,0,0,0,1893,1848,1,0,0,
        0,1893,1849,1,0,0,0,1893,1858,1,0,0,0,1893,1867,1,0,0,0,1893,1881,
        1,0,0,0,1893,1882,1,0,0,0,1893,1883,1,0,0,0,1893,1884,1,0,0,0,1893,
        1885,1,0,0,0,1893,1886,1,0,0,0,1893,1887,1,0,0,0,1893,1888,1,0,0,
        0,1893,1889,1,0,0,0,1893,1890,1,0,0,0,1893,1891,1,0,0,0,1893,1892,
        1,0,0,0,1894,1903,1,0,0,0,1895,1896,10,32,0,0,1896,1897,5,134,0,
        0,1897,1902,3,186,93,0,1898,1899,10,14,0,0,1899,1900,5,151,0,0,1900,
        1902,3,186,93,0,1901,1895,1,0,0,0,1901,1898,1,0,0,0,1902,1905,1,
        0,0,0,1903,1901,1,0,0,0,1903,1904,1,0,0,0,1904,183,1,0,0,0,1905,
        1903,1,0,0,0,1906,1907,7,3,0,0,1907,185,1,0,0,0,1908,1909,7,3,0,
        0,1909,187,1,0,0,0,1910,1911,7,3,0,0,1911,189,1,0,0,0,1912,1913,
        7,3,0,0,1913,191,1,0,0,0,1914,1925,5,132,0,0,1915,1923,5,212,0,0,
        1916,1918,5,215,0,0,1917,1916,1,0,0,0,1918,1921,1,0,0,0,1919,1917,
        1,0,0,0,1919,1920,1,0,0,0,1920,1924,1,0,0,0,1921,1919,1,0,0,0,1922,
        1924,5,216,0,0,1923,1919,1,0,0,0,1923,1922,1,0,0,0,1924,1926,1,0,
        0,0,1925,1915,1,0,0,0,1925,1926,1,0,0,0,1926,1927,1,0,0,0,1927,1931,
        5,213,0,0,1928,1930,5,215,0,0,1929,1928,1,0,0,0,1930,1933,1,0,0,
        0,1931,1929,1,0,0,0,1931,1932,1,0,0,0,1932,1934,1,0,0,0,1933,1931,
        1,0,0,0,1934,1935,5,214,0,0,1935,193,1,0,0,0,1936,1937,5,163,0,0,
        1937,1938,3,196,98,0,1938,1939,3,176,88,0,1939,195,1,0,0,0,1940,
        1941,7,4,0,0,1941,1942,3,198,99,0,1942,1943,5,218,0,0,1943,1947,
        1,0,0,0,1944,1945,5,166,0,0,1945,1947,3,206,103,0,1946,1940,1,0,
        0,0,1946,1944,1,0,0,0,1947,197,1,0,0,0,1948,1951,5,228,0,0,1949,
        1950,5,219,0,0,1950,1952,3,200,100,0,1951,1949,1,0,0,0,1951,1952,
        1,0,0,0,1952,199,1,0,0,0,1953,1958,3,202,101,0,1954,1955,7,5,0,0,
        1955,1957,3,200,100,0,1956,1954,1,0,0,0,1957,1960,1,0,0,0,1958,1956,
        1,0,0,0,1958,1959,1,0,0,0,1959,201,1,0,0,0,1960,1958,1,0,0,0,1961,
        1968,5,228,0,0,1962,1968,3,204,102,0,1963,1968,5,226,0,0,1964,1968,
        5,227,0,0,1965,1968,5,251,0,0,1966,1968,5,252,0,0,1967,1961,1,0,
        0,0,1967,1962,1,0,0,0,1967,1963,1,0,0,0,1967,1964,1,0,0,0,1967,1965,
        1,0,0,0,1967,1966,1,0,0,0,1968,203,1,0,0,0,1969,1970,5,229,0,0,1970,
        1971,5,253,0,0,1971,1972,3,202,101,0,1972,1973,5,218,0,0,1973,2089,
        1,0,0,0,1974,1975,5,230,0,0,1975,1976,5,253,0,0,1976,1977,3,202,
        101,0,1977,1978,5,218,0,0,1978,2089,1,0,0,0,1979,1980,5,232,0,0,
        1980,1981,5,253,0,0,1981,1982,3,202,101,0,1982,1983,5,218,0,0,1983,
        2089,1,0,0,0,1984,1985,5,233,0,0,1985,1986,5,253,0,0,1986,1987,3,
        202,101,0,1987,1988,5,218,0,0,1988,2089,1,0,0,0,1989,1990,5,234,
        0,0,1990,1991,5,253,0,0,1991,1992,3,202,101,0,1992,1993,5,218,0,
        0,1993,2089,1,0,0,0,1994,1995,5,235,0,0,1995,1996,5,253,0,0,1996,
        1997,3,202,101,0,1997,1998,5,218,0,0,1998,2089,1,0,0,0,1999,2000,
        5,236,0,0,2000,2001,5,253,0,0,2001,2002,3,202,101,0,2002,2003,5,
        218,0,0,2003,2089,1,0,0,0,2004,2005,5,237,0,0,2005,2006,5,253,0,
        0,2006,2007,3,202,101,0,2007,2008,5,218,0,0,2008,2089,1,0,0,0,2009,
        2010,5,238,0,0,2010,2011,5,253,0,0,2011,2012,3,202,101,0,2012,2013,
        5,218,0,0,2013,2089,1,0,0,0,2014,2015,5,239,0,0,2015,2016,5,253,
        0,0,2016,2017,3,202,101,0,2017,2018,5,218,0,0,2018,2089,1,0,0,0,
        2019,2020,5,240,0,0,2020,2021,5,253,0,0,2021,2022,3,202,101,0,2022,
        2023,5,218,0,0,2023,2089,1,0,0,0,2024,2025,5,241,0,0,2025,2026,5,
        253,0,0,2026,2031,3,202,101,0,2027,2028,5,225,0,0,2028,2030,3,202,
        101,0,2029,2027,1,0,0,0,2030,2033,1,0,0,0,2031,2029,1,0,0,0,2031,
        2032,1,0,0,0,2032,2034,1,0,0,0,2033,2031,1,0,0,0,2034,2035,5,218,
        0,0,2035,2089,1,0,0,0,2036,2037,5,242,0,0,2037,2038,5,253,0,0,2038,
        2039,3,202,101,0,2039,2040,5,218,0,0,2040,2089,1,0,0,0,2041,2042,
        5,243,0,0,2042,2043,5,253,0,0,2043,2048,3,202,101,0,2044,2045,5,
        225,0,0,2045,2047,3,202,101,0,2046,2044,1,0,0,0,2047,2050,1,0,0,
        0,2048,2046,1,0,0,0,2048,2049,1,0,0,0,2049,2051,1,0,0,0,2050,2048,
        1,0,0,0,2051,2052,5,218,0,0,2052,2089,1,0,0,0,2053,2054,5,244,0,
        0,2054,2055,5,253,0,0,2055,2056,3,202,101,0,2056,2057,5,225,0,0,
        2057,2058,3,202,101,0,2058,2059,5,218,0,0,2059,2089,1,0,0,0,2060,
        2061,5,245,0,0,2061,2062,5,253,0,0,2062,2063,3,202,101,0,2063,2064,
        5,218,0,0,2064,2089,1,0,0,0,2065,2066,5,246,0,0,2066,2067,5,253,
        0,0,2067,2089,5,218,0,0,2068,2069,5,247,0,0,2069,2070,5,253,0,0,
        2070,2071,3,202,101,0,2071,2072,5,218,0,0,2072,2089,1,0,0,0,2073,
        2074,5,248,0,0,2074,2075,5,253,0,0,2075,2076,3,202,101,0,2076,2077,
        5,218,0,0,2077,2089,1,0,0,0,2078,2079,5,249,0,0,2079,2080,5,253,
        0,0,2080,2081,3,202,101,0,2081,2082,5,218,0,0,2082,2089,1,0,0,0,
        2083,2084,5,250,0,0,2084,2085,5,253,0,0,2085,2086,3,202,101,0,2086,
        2087,5,218,0,0,2087,2089,1,0,0,0,2088,1969,1,0,0,0,2088,1974,1,0,
        0,0,2088,1979,1,0,0,0,2088,1984,1,0,0,0,2088,1989,1,0,0,0,2088,1994,
        1,0,0,0,2088,1999,1,0,0,0,2088,2004,1,0,0,0,2088,2009,1,0,0,0,2088,
        2014,1,0,0,0,2088,2019,1,0,0,0,2088,2024,1,0,0,0,2088,2036,1,0,0,
        0,2088,2041,1,0,0,0,2088,2053,1,0,0,0,2088,2060,1,0,0,0,2088,2065,
        1,0,0,0,2088,2068,1,0,0,0,2088,2073,1,0,0,0,2088,2078,1,0,0,0,2088,
        2083,1,0,0,0,2089,205,1,0,0,0,2090,2091,7,6,0,0,2091,2092,5,254,
        0,0,2092,2093,5,263,0,0,2093,2094,5,255,0,0,2094,207,1,0,0,0,173,
        245,247,256,262,268,277,285,293,301,309,313,316,322,331,340,349,
        358,367,376,385,394,403,412,421,430,439,448,457,466,475,484,493,
        510,529,542,566,569,580,589,594,599,606,610,615,620,625,630,635,
        640,643,648,654,684,696,724,741,746,759,766,791,820,834,839,843,
        848,851,869,877,894,902,908,919,922,934,941,969,1003,1013,1018,1023,
        1027,1039,1063,1083,1089,1095,1107,1113,1119,1127,1137,1143,1149,
        1160,1163,1166,1170,1182,1189,1196,1203,1232,1282,1301,1336,1376,
        1400,1437,1445,1460,1465,1470,1476,1481,1487,1493,1499,1511,1515,
        1542,1559,1596,1619,1645,1665,1675,1680,1685,1690,1695,1700,1705,
        1710,1715,1720,1725,1730,1735,1738,1753,1761,1776,1792,1794,1805,
        1807,1815,1819,1830,1834,1838,1841,1854,1856,1863,1865,1872,1877,
        1879,1893,1901,1903,1919,1923,1925,1931,1946,1951,1958,1967,2031,
        2048,2088
    ]

class XplorMRParser ( Parser ):

    grammarFileName = "XplorMRParser.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ "<INVALID>", "'SET'", "<INVALID>", "'NOE'", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "'BHIG'", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "'CUTOFF'", "'CUTON'", "'FROM'", "'TO'", 
                     "'PEAK'", "'SPECTRUM'", "'VOLUME'", "'PPM1'", "'PPM2'", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "'TYPE'", "<INVALID>", "<INVALID>", "<INVALID>", "'CV'", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "'XADC'", "<INVALID>", "'SIZE'", "'ZERO'", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "'RAMA'", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "'SORT'", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "'DCSA'", "<INVALID>", "'PCSA'", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "'TAUC'", "<INVALID>", "'XPCS'", "'TOLL'", 
                     "'SAVE'", "'FMED'", "'ERRON'", "'ERROFF'", "'FON'", 
                     "'FOFF'", "'SON'", "'SOFF'", "'FRUN'", "<INVALID>", 
                     "<INVALID>", "'XCCR'", "'WEIP'", "'HBDA'", "'HBDB'", 
                     "'KDIR'", "'KLIN'", "'NSEG'", "'NMIN'", "'NMAX'", "'SEGM'", 
                     "'OHCUT'", "<INVALID>", "<INVALID>", "<INVALID>", "'UPDFRQ'", 
                     "'PRNFRQ'", "'FREEMODE'", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "'ALL'", "<INVALID>", "'ATOM'", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "'ID'", "<INVALID>", "'NAME'", "<INVALID>", 
                     "'CUT'", "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "'STORE1'", "'STORE2'", "'STORE3'", 
                     "'STORE4'", "'STORE5'", "'STORE6'", "'STORE7'", "'STORE8'", 
                     "'STORE9'", "'TAG'", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "'SHOW'", "'TAIL'", "'HEAD'", "'OR'", "'AND'", "'NOT'", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "':'", "<INVALID>", 
                     "'<'", "'>'", "'<='", "'>='", "'#'", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "'+'", "'-'", "<INVALID>", "'/'", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "'ACOS'", "'ASIN'", "'COS'", "'DECODE'", "'ENCODE'", 
                     "'EXP'", "'GAUSS'", "'HEAVY'", "'INT'", "'LOG10'", 
                     "'LOG'", "<INVALID>", "'MAXW'", "<INVALID>", "'MOD'", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "'SIN'", "'SQRT'", 
                     "'TAN'", "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "'RMS'", "'SUM'" ]

    symbolicNames = [ "<INVALID>", "Set", "End", "Noe", "Assign", "Asymptote", 
                      "Averaging", "Bhig", "Ceiling", "Classification", 
                      "CountViol", "Distribute", "Monomers", "Ncount", "Nrestraints", 
                      "Potential", "Predict", "Print", "Threshold", "Reset", 
                      "Rswitch", "Scale", "SoExponent", "SqConstant", "SqExponent", 
                      "SqOffset", "Temperature", "Cutoff", "Cuton", "From", 
                      "To", "Peak", "Spectrum", "Volume", "Ppm1", "Ppm2", 
                      "Restraints", "Dihedral", "Nassign", "Sanisotropy", 
                      "Coefficients", "ForceConstant", "Xdipolar", "Dipolar", 
                      "Type", "Sign", "Average", "VectorAngle", "Cv", "Partition", 
                      "Tensor", "Anisotropy", "Planar", "Group", "Initialize", 
                      "Selection", "Weight", "Xadc", "Expectation", "Size", 
                      "Zero", "Coupling", "DegEnergy", "Carbon", "PhiStep", 
                      "PsiStep", "Rcoil", "Proton", "Observed", "Amides", 
                      "Nitrogens", "Oxygens", "RingAtoms", "AlphasAndAmides", 
                      "Error", "Ramachandran", "Gaussian", "Phase", "Quartic", 
                      "Shape", "Sort", "Dimensions", "Collapse", "Danisotropy", 
                      "Orient", "Height", "MaxGaussians", "NewGaussian", 
                      "Dcsa", "Sigma", "Pcsa", "OneBond", "AngleDb", "DerivFlag", 
                      "Angle_or_Dihedral", "Paramagnetic", "Kconst", "Omega", 
                      "Tauc", "Debug", "Xpcs", "Tolerance", "Save", "Fmed", 
                      "ErrOn", "ErrOff", "Fon", "Foff", "Son", "Soff", "Frun", 
                      "Xrdcoupling", "Xangle", "Xccr", "Weip", "Hbda", "Hbdb", 
                      "Kdir", "Klin", "Nseg", "Nmin", "Nmax", "Segm", "Ohcut", 
                      "Coh1cut", "Coh2cut", "Ohncut", "Updfrq", "Prnfrq", 
                      "Freemode", "Donor", "Acceptor", "Flags", "All", "Around", 
                      "Atom", "Attribute", "BondedTo", "ByGroup", "ByRes", 
                      "Chemical", "Hydrogen", "Id", "Known", "Name", "Point", 
                      "Cut", "Previous", "Pseudo", "Residue", "Resname", 
                      "Saround", "SegIdentifier", "Store_1", "Store_2", 
                      "Store_3", "Store_4", "Store_5", "Store_6", "Store_7", 
                      "Store_8", "Store_9", "Tag", "Vector", "Do_Lp", "Identify_Lp", 
                      "Show", "Tail", "Head", "Or_op", "And_op", "Not_op", 
                      "Comma", "Complex", "Integer", "Logical", "Real", 
                      "Double_quote_string", "Simple_name", "Simple_names", 
                      "Integers", "L_paren", "R_paren", "Colon", "Equ_op", 
                      "Lt_op", "Gt_op", "Leq_op", "Geq_op", "Neq_op", "SPACE", 
                      "COMMENT", "SECTION_COMMENT", "LINE_COMMENT", "SET_VARIABLE", 
                      "Abs", "Attr_properties", "Comparison_ops", "SPACE_ATTR", 
                      "Averaging_methods", "Simple_name_A", "SPACE_AVER", 
                      "Equ_op_P", "Potential_types", "Simple_name_P", "SPACE_POTE", 
                      "Rdc_dist_fix_types", "Rdc_or_Diff_anis_types", "Csa_types", 
                      "SPACE_TYPE", "Gauss_or_Quart", "SPACE_SHAP", "Exclude", 
                      "Include", "End_F", "Class_name", "Any_class", "SPACE_FLAG", 
                      "R_paren_VE", "Equ_op_VE", "Add_op_VE", "Sub_op_VE", 
                      "Mul_op_VE", "Div_op_VE", "Exp_op_VE", "Comma_VE", 
                      "Integer_VE", "Real_VE", "Atom_properties_VE", "Abs_VE", 
                      "Acos_VE", "Asin_VE", "Cos_VE", "Decode_VE", "Encode_VE", 
                      "Exp_VE", "Gauss_VE", "Heavy_VE", "Int_VE", "Log10_VE", 
                      "Log_VE", "Max_VE", "Maxw_VE", "Min_VE", "Mod_VE", 
                      "Norm_VE", "Random_VE", "Sign_VE", "Sin_VE", "Sqrt_VE", 
                      "Tan_VE", "Simple_name_VE", "Double_quote_string_VE", 
                      "L_paren_VF", "L_paren_VS", "R_paren_VS", "Average_VS", 
                      "Element_VS", "Max_VS", "Min_VS", "Norm_VS", "Rms_VS", 
                      "Sum_VS", "Atom_properties_VS", "SPACE_VS" ]

    RULE_xplor_nih_mr = 0
    RULE_distance_restraint = 1
    RULE_dihedral_angle_restraint = 2
    RULE_rdc_restraint = 3
    RULE_planar_restraint = 4
    RULE_antidistance_restraint = 5
    RULE_coupling_restraint = 6
    RULE_carbon_shift_restraint = 7
    RULE_proton_shift_restraint = 8
    RULE_dihedral_angle_db_restraint = 9
    RULE_radius_of_gyration_restraint = 10
    RULE_diffusion_anisotropy_restraint = 11
    RULE_orientation_db_restraint = 12
    RULE_csa_restraint = 13
    RULE_pcsa_restraint = 14
    RULE_one_bond_coupling_restraint = 15
    RULE_angle_db_restraint = 16
    RULE_pre_restraint = 17
    RULE_pcs_restraint = 18
    RULE_prdc_restraint = 19
    RULE_porientation_restraint = 20
    RULE_pccr_restraint = 21
    RULE_hbond_restraint = 22
    RULE_hbond_db_restraint = 23
    RULE_noe_statement = 24
    RULE_noe_assign = 25
    RULE_predict_statement = 26
    RULE_noe_annotation = 27
    RULE_dihedral_statement = 28
    RULE_dihedral_assign = 29
    RULE_sani_statement = 30
    RULE_sani_assign = 31
    RULE_xdip_statement = 32
    RULE_xdip_assign = 33
    RULE_vean_statement = 34
    RULE_vean_assign = 35
    RULE_tenso_statement = 36
    RULE_tenso_assign = 37
    RULE_anis_statement = 38
    RULE_anis_assign = 39
    RULE_planar_statement = 40
    RULE_group_statement = 41
    RULE_antidistance_statement = 42
    RULE_xadc_assign = 43
    RULE_coupling_statement = 44
    RULE_coup_assign = 45
    RULE_carbon_shift_statement = 46
    RULE_carbon_shift_assign = 47
    RULE_carbon_shift_rcoil = 48
    RULE_proton_shift_statement = 49
    RULE_observed = 50
    RULE_proton_shift_rcoil = 51
    RULE_proton_shift_anisotropy = 52
    RULE_proton_shift_amides = 53
    RULE_proton_shift_carbons = 54
    RULE_proton_shift_nitrogens = 55
    RULE_proton_shift_oxygens = 56
    RULE_proton_shift_ring_atoms = 57
    RULE_proton_shift_alphas_and_amides = 58
    RULE_ramachandran_statement = 59
    RULE_rama_assign = 60
    RULE_collapse_statement = 61
    RULE_coll_assign = 62
    RULE_diffusion_statement = 63
    RULE_dani_assign = 64
    RULE_orientation_statement = 65
    RULE_orie_assign = 66
    RULE_csa_statement = 67
    RULE_csa_assign = 68
    RULE_pcsa_statement = 69
    RULE_one_bond_coupling_statement = 70
    RULE_one_bond_assign = 71
    RULE_angle_db_statement = 72
    RULE_angle_db_assign = 73
    RULE_pre_statement = 74
    RULE_pre_assign = 75
    RULE_pcs_statement = 76
    RULE_pcs_assign = 77
    RULE_prdc_statement = 78
    RULE_prdc_assign = 79
    RULE_porientation_statement = 80
    RULE_porientation_assign = 81
    RULE_pccr_statement = 82
    RULE_pccr_assign = 83
    RULE_hbond_statement = 84
    RULE_hbond_assign = 85
    RULE_hbond_db_statement = 86
    RULE_hbond_db_assign = 87
    RULE_selection = 88
    RULE_selection_expression = 89
    RULE_term = 90
    RULE_factor = 91
    RULE_number = 92
    RULE_number_f = 93
    RULE_number_s = 94
    RULE_number_a = 95
    RULE_flag_statement = 96
    RULE_vector_statement = 97
    RULE_vector_mode = 98
    RULE_vector_expression = 99
    RULE_vector_operation = 100
    RULE_vflc = 101
    RULE_vector_func_call = 102
    RULE_vector_show_property = 103

    ruleNames =  [ "xplor_nih_mr", "distance_restraint", "dihedral_angle_restraint", 
                   "rdc_restraint", "planar_restraint", "antidistance_restraint", 
                   "coupling_restraint", "carbon_shift_restraint", "proton_shift_restraint", 
                   "dihedral_angle_db_restraint", "radius_of_gyration_restraint", 
                   "diffusion_anisotropy_restraint", "orientation_db_restraint", 
                   "csa_restraint", "pcsa_restraint", "one_bond_coupling_restraint", 
                   "angle_db_restraint", "pre_restraint", "pcs_restraint", 
                   "prdc_restraint", "porientation_restraint", "pccr_restraint", 
                   "hbond_restraint", "hbond_db_restraint", "noe_statement", 
                   "noe_assign", "predict_statement", "noe_annotation", 
                   "dihedral_statement", "dihedral_assign", "sani_statement", 
                   "sani_assign", "xdip_statement", "xdip_assign", "vean_statement", 
                   "vean_assign", "tenso_statement", "tenso_assign", "anis_statement", 
                   "anis_assign", "planar_statement", "group_statement", 
                   "antidistance_statement", "xadc_assign", "coupling_statement", 
                   "coup_assign", "carbon_shift_statement", "carbon_shift_assign", 
                   "carbon_shift_rcoil", "proton_shift_statement", "observed", 
                   "proton_shift_rcoil", "proton_shift_anisotropy", "proton_shift_amides", 
                   "proton_shift_carbons", "proton_shift_nitrogens", "proton_shift_oxygens", 
                   "proton_shift_ring_atoms", "proton_shift_alphas_and_amides", 
                   "ramachandran_statement", "rama_assign", "collapse_statement", 
                   "coll_assign", "diffusion_statement", "dani_assign", 
                   "orientation_statement", "orie_assign", "csa_statement", 
                   "csa_assign", "pcsa_statement", "one_bond_coupling_statement", 
                   "one_bond_assign", "angle_db_statement", "angle_db_assign", 
                   "pre_statement", "pre_assign", "pcs_statement", "pcs_assign", 
                   "prdc_statement", "prdc_assign", "porientation_statement", 
                   "porientation_assign", "pccr_statement", "pccr_assign", 
                   "hbond_statement", "hbond_assign", "hbond_db_statement", 
                   "hbond_db_assign", "selection", "selection_expression", 
                   "term", "factor", "number", "number_f", "number_s", "number_a", 
                   "flag_statement", "vector_statement", "vector_mode", 
                   "vector_expression", "vector_operation", "vflc", "vector_func_call", 
                   "vector_show_property" ]

    EOF = Token.EOF
    Set=1
    End=2
    Noe=3
    Assign=4
    Asymptote=5
    Averaging=6
    Bhig=7
    Ceiling=8
    Classification=9
    CountViol=10
    Distribute=11
    Monomers=12
    Ncount=13
    Nrestraints=14
    Potential=15
    Predict=16
    Print=17
    Threshold=18
    Reset=19
    Rswitch=20
    Scale=21
    SoExponent=22
    SqConstant=23
    SqExponent=24
    SqOffset=25
    Temperature=26
    Cutoff=27
    Cuton=28
    From=29
    To=30
    Peak=31
    Spectrum=32
    Volume=33
    Ppm1=34
    Ppm2=35
    Restraints=36
    Dihedral=37
    Nassign=38
    Sanisotropy=39
    Coefficients=40
    ForceConstant=41
    Xdipolar=42
    Dipolar=43
    Type=44
    Sign=45
    Average=46
    VectorAngle=47
    Cv=48
    Partition=49
    Tensor=50
    Anisotropy=51
    Planar=52
    Group=53
    Initialize=54
    Selection=55
    Weight=56
    Xadc=57
    Expectation=58
    Size=59
    Zero=60
    Coupling=61
    DegEnergy=62
    Carbon=63
    PhiStep=64
    PsiStep=65
    Rcoil=66
    Proton=67
    Observed=68
    Amides=69
    Nitrogens=70
    Oxygens=71
    RingAtoms=72
    AlphasAndAmides=73
    Error=74
    Ramachandran=75
    Gaussian=76
    Phase=77
    Quartic=78
    Shape=79
    Sort=80
    Dimensions=81
    Collapse=82
    Danisotropy=83
    Orient=84
    Height=85
    MaxGaussians=86
    NewGaussian=87
    Dcsa=88
    Sigma=89
    Pcsa=90
    OneBond=91
    AngleDb=92
    DerivFlag=93
    Angle_or_Dihedral=94
    Paramagnetic=95
    Kconst=96
    Omega=97
    Tauc=98
    Debug=99
    Xpcs=100
    Tolerance=101
    Save=102
    Fmed=103
    ErrOn=104
    ErrOff=105
    Fon=106
    Foff=107
    Son=108
    Soff=109
    Frun=110
    Xrdcoupling=111
    Xangle=112
    Xccr=113
    Weip=114
    Hbda=115
    Hbdb=116
    Kdir=117
    Klin=118
    Nseg=119
    Nmin=120
    Nmax=121
    Segm=122
    Ohcut=123
    Coh1cut=124
    Coh2cut=125
    Ohncut=126
    Updfrq=127
    Prnfrq=128
    Freemode=129
    Donor=130
    Acceptor=131
    Flags=132
    All=133
    Around=134
    Atom=135
    Attribute=136
    BondedTo=137
    ByGroup=138
    ByRes=139
    Chemical=140
    Hydrogen=141
    Id=142
    Known=143
    Name=144
    Point=145
    Cut=146
    Previous=147
    Pseudo=148
    Residue=149
    Resname=150
    Saround=151
    SegIdentifier=152
    Store_1=153
    Store_2=154
    Store_3=155
    Store_4=156
    Store_5=157
    Store_6=158
    Store_7=159
    Store_8=160
    Store_9=161
    Tag=162
    Vector=163
    Do_Lp=164
    Identify_Lp=165
    Show=166
    Tail=167
    Head=168
    Or_op=169
    And_op=170
    Not_op=171
    Comma=172
    Complex=173
    Integer=174
    Logical=175
    Real=176
    Double_quote_string=177
    Simple_name=178
    Simple_names=179
    Integers=180
    L_paren=181
    R_paren=182
    Colon=183
    Equ_op=184
    Lt_op=185
    Gt_op=186
    Leq_op=187
    Geq_op=188
    Neq_op=189
    SPACE=190
    COMMENT=191
    SECTION_COMMENT=192
    LINE_COMMENT=193
    SET_VARIABLE=194
    Abs=195
    Attr_properties=196
    Comparison_ops=197
    SPACE_ATTR=198
    Averaging_methods=199
    Simple_name_A=200
    SPACE_AVER=201
    Equ_op_P=202
    Potential_types=203
    Simple_name_P=204
    SPACE_POTE=205
    Rdc_dist_fix_types=206
    Rdc_or_Diff_anis_types=207
    Csa_types=208
    SPACE_TYPE=209
    Gauss_or_Quart=210
    SPACE_SHAP=211
    Exclude=212
    Include=213
    End_F=214
    Class_name=215
    Any_class=216
    SPACE_FLAG=217
    R_paren_VE=218
    Equ_op_VE=219
    Add_op_VE=220
    Sub_op_VE=221
    Mul_op_VE=222
    Div_op_VE=223
    Exp_op_VE=224
    Comma_VE=225
    Integer_VE=226
    Real_VE=227
    Atom_properties_VE=228
    Abs_VE=229
    Acos_VE=230
    Asin_VE=231
    Cos_VE=232
    Decode_VE=233
    Encode_VE=234
    Exp_VE=235
    Gauss_VE=236
    Heavy_VE=237
    Int_VE=238
    Log10_VE=239
    Log_VE=240
    Max_VE=241
    Maxw_VE=242
    Min_VE=243
    Mod_VE=244
    Norm_VE=245
    Random_VE=246
    Sign_VE=247
    Sin_VE=248
    Sqrt_VE=249
    Tan_VE=250
    Simple_name_VE=251
    Double_quote_string_VE=252
    L_paren_VF=253
    L_paren_VS=254
    R_paren_VS=255
    Average_VS=256
    Element_VS=257
    Max_VS=258
    Min_VS=259
    Norm_VS=260
    Rms_VS=261
    Sum_VS=262
    Atom_properties_VS=263
    SPACE_VS=264

    def __init__(self, input:TokenStream, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.10.1")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None




    class Xplor_nih_mrContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EOF(self):
            return self.getToken(XplorMRParser.EOF, 0)

        def distance_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Distance_restraintContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Distance_restraintContext,i)


        def dihedral_angle_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Dihedral_angle_restraintContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Dihedral_angle_restraintContext,i)


        def rdc_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Rdc_restraintContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Rdc_restraintContext,i)


        def planar_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Planar_restraintContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Planar_restraintContext,i)


        def antidistance_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Antidistance_restraintContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Antidistance_restraintContext,i)


        def coupling_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Coupling_restraintContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Coupling_restraintContext,i)


        def carbon_shift_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Carbon_shift_restraintContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Carbon_shift_restraintContext,i)


        def proton_shift_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Proton_shift_restraintContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Proton_shift_restraintContext,i)


        def dihedral_angle_db_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Dihedral_angle_db_restraintContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Dihedral_angle_db_restraintContext,i)


        def radius_of_gyration_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Radius_of_gyration_restraintContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Radius_of_gyration_restraintContext,i)


        def diffusion_anisotropy_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Diffusion_anisotropy_restraintContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Diffusion_anisotropy_restraintContext,i)


        def orientation_db_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Orientation_db_restraintContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Orientation_db_restraintContext,i)


        def csa_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Csa_restraintContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Csa_restraintContext,i)


        def pcsa_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Pcsa_restraintContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Pcsa_restraintContext,i)


        def one_bond_coupling_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.One_bond_coupling_restraintContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.One_bond_coupling_restraintContext,i)


        def angle_db_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Angle_db_restraintContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Angle_db_restraintContext,i)


        def pre_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Pre_restraintContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Pre_restraintContext,i)


        def pcs_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Pcs_restraintContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Pcs_restraintContext,i)


        def prdc_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Prdc_restraintContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Prdc_restraintContext,i)


        def porientation_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Porientation_restraintContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Porientation_restraintContext,i)


        def pccr_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Pccr_restraintContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Pccr_restraintContext,i)


        def hbond_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Hbond_restraintContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Hbond_restraintContext,i)


        def hbond_db_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Hbond_db_restraintContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Hbond_db_restraintContext,i)


        def flag_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Flag_statementContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Flag_statementContext,i)


        def vector_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Vector_statementContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Vector_statementContext,i)


        def noe_assign(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Noe_assignContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Noe_assignContext,i)


        def dihedral_assign(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Dihedral_assignContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Dihedral_assignContext,i)


        def sani_assign(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Sani_assignContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Sani_assignContext,i)


        def planar_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Planar_statementContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Planar_statementContext,i)


        def hbond_assign(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Hbond_assignContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Hbond_assignContext,i)


        def hbond_db_assign(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Hbond_db_assignContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Hbond_db_assignContext,i)


        def coup_assign(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Coup_assignContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Coup_assignContext,i)


        def xadc_assign(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Xadc_assignContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Xadc_assignContext,i)


        def coll_assign(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Coll_assignContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Coll_assignContext,i)


        def csa_assign(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Csa_assignContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Csa_assignContext,i)


        def pre_assign(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Pre_assignContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Pre_assignContext,i)


        def pcs_assign(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Pcs_assignContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Pcs_assignContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_xplor_nih_mr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterXplor_nih_mr" ):
                listener.enterXplor_nih_mr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitXplor_nih_mr" ):
                listener.exitXplor_nih_mr(self)




    def xplor_nih_mr(self):

        localctx = XplorMRParser.Xplor_nih_mrContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_xplor_nih_mr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 247
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << XplorMRParser.Noe) | (1 << XplorMRParser.Assign) | (1 << XplorMRParser.Restraints) | (1 << XplorMRParser.Dihedral) | (1 << XplorMRParser.Sanisotropy) | (1 << XplorMRParser.Xdipolar) | (1 << XplorMRParser.Dipolar) | (1 << XplorMRParser.VectorAngle) | (1 << XplorMRParser.Tensor) | (1 << XplorMRParser.Anisotropy) | (1 << XplorMRParser.Planar) | (1 << XplorMRParser.Group) | (1 << XplorMRParser.Initialize) | (1 << XplorMRParser.Xadc) | (1 << XplorMRParser.Coupling) | (1 << XplorMRParser.Carbon))) != 0) or ((((_la - 67)) & ~0x3f) == 0 and ((1 << (_la - 67)) & ((1 << (XplorMRParser.Proton - 67)) | (1 << (XplorMRParser.Ramachandran - 67)) | (1 << (XplorMRParser.Collapse - 67)) | (1 << (XplorMRParser.Danisotropy - 67)) | (1 << (XplorMRParser.Orient - 67)) | (1 << (XplorMRParser.Dcsa - 67)) | (1 << (XplorMRParser.Pcsa - 67)) | (1 << (XplorMRParser.OneBond - 67)) | (1 << (XplorMRParser.AngleDb - 67)) | (1 << (XplorMRParser.Paramagnetic - 67)) | (1 << (XplorMRParser.Xpcs - 67)) | (1 << (XplorMRParser.Xrdcoupling - 67)) | (1 << (XplorMRParser.Xangle - 67)) | (1 << (XplorMRParser.Xccr - 67)) | (1 << (XplorMRParser.Hbda - 67)) | (1 << (XplorMRParser.Hbdb - 67)))) != 0) or _la==XplorMRParser.Flags or _la==XplorMRParser.Vector:
                self.state = 245
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,0,self._ctx)
                if la_ == 1:
                    self.state = 208
                    self.distance_restraint()
                    pass

                elif la_ == 2:
                    self.state = 209
                    self.dihedral_angle_restraint()
                    pass

                elif la_ == 3:
                    self.state = 210
                    self.rdc_restraint()
                    pass

                elif la_ == 4:
                    self.state = 211
                    self.planar_restraint()
                    pass

                elif la_ == 5:
                    self.state = 212
                    self.antidistance_restraint()
                    pass

                elif la_ == 6:
                    self.state = 213
                    self.coupling_restraint()
                    pass

                elif la_ == 7:
                    self.state = 214
                    self.carbon_shift_restraint()
                    pass

                elif la_ == 8:
                    self.state = 215
                    self.proton_shift_restraint()
                    pass

                elif la_ == 9:
                    self.state = 216
                    self.dihedral_angle_db_restraint()
                    pass

                elif la_ == 10:
                    self.state = 217
                    self.radius_of_gyration_restraint()
                    pass

                elif la_ == 11:
                    self.state = 218
                    self.diffusion_anisotropy_restraint()
                    pass

                elif la_ == 12:
                    self.state = 219
                    self.orientation_db_restraint()
                    pass

                elif la_ == 13:
                    self.state = 220
                    self.csa_restraint()
                    pass

                elif la_ == 14:
                    self.state = 221
                    self.pcsa_restraint()
                    pass

                elif la_ == 15:
                    self.state = 222
                    self.one_bond_coupling_restraint()
                    pass

                elif la_ == 16:
                    self.state = 223
                    self.angle_db_restraint()
                    pass

                elif la_ == 17:
                    self.state = 224
                    self.pre_restraint()
                    pass

                elif la_ == 18:
                    self.state = 225
                    self.pcs_restraint()
                    pass

                elif la_ == 19:
                    self.state = 226
                    self.prdc_restraint()
                    pass

                elif la_ == 20:
                    self.state = 227
                    self.porientation_restraint()
                    pass

                elif la_ == 21:
                    self.state = 228
                    self.pccr_restraint()
                    pass

                elif la_ == 22:
                    self.state = 229
                    self.hbond_restraint()
                    pass

                elif la_ == 23:
                    self.state = 230
                    self.hbond_db_restraint()
                    pass

                elif la_ == 24:
                    self.state = 231
                    self.flag_statement()
                    pass

                elif la_ == 25:
                    self.state = 232
                    self.vector_statement()
                    pass

                elif la_ == 26:
                    self.state = 233
                    self.noe_assign()
                    pass

                elif la_ == 27:
                    self.state = 234
                    self.dihedral_assign()
                    pass

                elif la_ == 28:
                    self.state = 235
                    self.sani_assign()
                    pass

                elif la_ == 29:
                    self.state = 236
                    self.planar_statement()
                    pass

                elif la_ == 30:
                    self.state = 237
                    self.hbond_assign()
                    pass

                elif la_ == 31:
                    self.state = 238
                    self.hbond_db_assign()
                    pass

                elif la_ == 32:
                    self.state = 239
                    self.coup_assign()
                    pass

                elif la_ == 33:
                    self.state = 240
                    self.xadc_assign()
                    pass

                elif la_ == 34:
                    self.state = 241
                    self.coll_assign()
                    pass

                elif la_ == 35:
                    self.state = 242
                    self.csa_assign()
                    pass

                elif la_ == 36:
                    self.state = 243
                    self.pre_assign()
                    pass

                elif la_ == 37:
                    self.state = 244
                    self.pcs_assign()
                    pass


                self.state = 249
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 250
            self.match(XplorMRParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Distance_restraintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Noe(self):
            return self.getToken(XplorMRParser.Noe, 0)

        def End(self):
            return self.getToken(XplorMRParser.End, 0)

        def noe_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Noe_statementContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Noe_statementContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_distance_restraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDistance_restraint" ):
                listener.enterDistance_restraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDistance_restraint" ):
                listener.exitDistance_restraint(self)




    def distance_restraint(self):

        localctx = XplorMRParser.Distance_restraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_distance_restraint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 252
            self.match(XplorMRParser.Noe)
            self.state = 256
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << XplorMRParser.Assign) | (1 << XplorMRParser.Asymptote) | (1 << XplorMRParser.Averaging) | (1 << XplorMRParser.Bhig) | (1 << XplorMRParser.Ceiling) | (1 << XplorMRParser.Classification) | (1 << XplorMRParser.CountViol) | (1 << XplorMRParser.Distribute) | (1 << XplorMRParser.Monomers) | (1 << XplorMRParser.Ncount) | (1 << XplorMRParser.Nrestraints) | (1 << XplorMRParser.Potential) | (1 << XplorMRParser.Predict) | (1 << XplorMRParser.Print) | (1 << XplorMRParser.Reset) | (1 << XplorMRParser.Rswitch) | (1 << XplorMRParser.Scale) | (1 << XplorMRParser.SoExponent) | (1 << XplorMRParser.SqConstant) | (1 << XplorMRParser.SqExponent) | (1 << XplorMRParser.SqOffset) | (1 << XplorMRParser.Temperature))) != 0):
                self.state = 253
                self.noe_statement()
                self.state = 258
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 259
            self.match(XplorMRParser.End)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Dihedral_angle_restraintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Dihedral(self):
            return self.getToken(XplorMRParser.Dihedral, 0)

        def End(self):
            return self.getToken(XplorMRParser.End, 0)

        def Restraints(self):
            return self.getToken(XplorMRParser.Restraints, 0)

        def dihedral_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Dihedral_statementContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Dihedral_statementContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_dihedral_angle_restraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDihedral_angle_restraint" ):
                listener.enterDihedral_angle_restraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDihedral_angle_restraint" ):
                listener.exitDihedral_angle_restraint(self)




    def dihedral_angle_restraint(self):

        localctx = XplorMRParser.Dihedral_angle_restraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_dihedral_angle_restraint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 262
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==XplorMRParser.Restraints:
                self.state = 261
                self.match(XplorMRParser.Restraints)


            self.state = 264
            self.match(XplorMRParser.Dihedral)
            self.state = 268
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << XplorMRParser.Assign) | (1 << XplorMRParser.Reset) | (1 << XplorMRParser.Scale) | (1 << XplorMRParser.Nassign))) != 0):
                self.state = 265
                self.dihedral_statement()
                self.state = 270
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 271
            self.match(XplorMRParser.End)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Rdc_restraintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Sanisotropy(self):
            return self.getToken(XplorMRParser.Sanisotropy, 0)

        def End(self):
            return self.getToken(XplorMRParser.End, 0)

        def sani_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Sani_statementContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Sani_statementContext,i)


        def Xdipolar(self):
            return self.getToken(XplorMRParser.Xdipolar, 0)

        def Dipolar(self):
            return self.getToken(XplorMRParser.Dipolar, 0)

        def xdip_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Xdip_statementContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Xdip_statementContext,i)


        def VectorAngle(self):
            return self.getToken(XplorMRParser.VectorAngle, 0)

        def vean_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Vean_statementContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Vean_statementContext,i)


        def Tensor(self):
            return self.getToken(XplorMRParser.Tensor, 0)

        def tenso_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Tenso_statementContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Tenso_statementContext,i)


        def Anisotropy(self):
            return self.getToken(XplorMRParser.Anisotropy, 0)

        def anis_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Anis_statementContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Anis_statementContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_rdc_restraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRdc_restraint" ):
                listener.enterRdc_restraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRdc_restraint" ):
                listener.exitRdc_restraint(self)




    def rdc_restraint(self):

        localctx = XplorMRParser.Rdc_restraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_rdc_restraint)
        self._la = 0 # Token type
        try:
            self.state = 313
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [XplorMRParser.Sanisotropy]:
                self.enterOuterAlt(localctx, 1)
                self.state = 273
                self.match(XplorMRParser.Sanisotropy)
                self.state = 277
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << XplorMRParser.Assign) | (1 << XplorMRParser.Classification) | (1 << XplorMRParser.Nrestraints) | (1 << XplorMRParser.Potential) | (1 << XplorMRParser.Print) | (1 << XplorMRParser.Reset) | (1 << XplorMRParser.Coefficients) | (1 << XplorMRParser.ForceConstant))) != 0):
                    self.state = 274
                    self.sani_statement()
                    self.state = 279
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 280
                self.match(XplorMRParser.End)
                pass
            elif token in [XplorMRParser.Xdipolar, XplorMRParser.Dipolar]:
                self.enterOuterAlt(localctx, 2)
                self.state = 281
                _la = self._input.LA(1)
                if not(_la==XplorMRParser.Xdipolar or _la==XplorMRParser.Dipolar):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 285
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << XplorMRParser.Assign) | (1 << XplorMRParser.Classification) | (1 << XplorMRParser.Nrestraints) | (1 << XplorMRParser.Potential) | (1 << XplorMRParser.Print) | (1 << XplorMRParser.Reset) | (1 << XplorMRParser.Scale) | (1 << XplorMRParser.Coefficients) | (1 << XplorMRParser.ForceConstant) | (1 << XplorMRParser.Type) | (1 << XplorMRParser.Sign) | (1 << XplorMRParser.Average))) != 0):
                    self.state = 282
                    self.xdip_statement()
                    self.state = 287
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 288
                self.match(XplorMRParser.End)
                pass
            elif token in [XplorMRParser.VectorAngle]:
                self.enterOuterAlt(localctx, 3)
                self.state = 289
                self.match(XplorMRParser.VectorAngle)
                self.state = 293
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << XplorMRParser.Assign) | (1 << XplorMRParser.Classification) | (1 << XplorMRParser.Nrestraints) | (1 << XplorMRParser.Print) | (1 << XplorMRParser.Reset) | (1 << XplorMRParser.ForceConstant) | (1 << XplorMRParser.Cv) | (1 << XplorMRParser.Partition))) != 0):
                    self.state = 290
                    self.vean_statement()
                    self.state = 295
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 296
                self.match(XplorMRParser.End)
                pass
            elif token in [XplorMRParser.Tensor]:
                self.enterOuterAlt(localctx, 4)
                self.state = 297
                self.match(XplorMRParser.Tensor)
                self.state = 301
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << XplorMRParser.Assign) | (1 << XplorMRParser.Classification) | (1 << XplorMRParser.Nrestraints) | (1 << XplorMRParser.Potential) | (1 << XplorMRParser.Print) | (1 << XplorMRParser.Reset) | (1 << XplorMRParser.Coefficients))) != 0):
                    self.state = 298
                    self.tenso_statement()
                    self.state = 303
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 304
                self.match(XplorMRParser.End)
                pass
            elif token in [XplorMRParser.Anisotropy]:
                self.enterOuterAlt(localctx, 5)
                self.state = 305
                self.match(XplorMRParser.Anisotropy)
                self.state = 309
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << XplorMRParser.Assign) | (1 << XplorMRParser.Classification) | (1 << XplorMRParser.Nrestraints) | (1 << XplorMRParser.Potential) | (1 << XplorMRParser.Print) | (1 << XplorMRParser.Reset) | (1 << XplorMRParser.Coefficients) | (1 << XplorMRParser.ForceConstant) | (1 << XplorMRParser.Type))) != 0):
                    self.state = 306
                    self.anis_statement()
                    self.state = 311
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 312
                self.match(XplorMRParser.End)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Planar_restraintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Planar(self):
            return self.getToken(XplorMRParser.Planar, 0)

        def End(self):
            return self.getToken(XplorMRParser.End, 0)

        def Restraints(self):
            return self.getToken(XplorMRParser.Restraints, 0)

        def planar_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Planar_statementContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Planar_statementContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_planar_restraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPlanar_restraint" ):
                listener.enterPlanar_restraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPlanar_restraint" ):
                listener.exitPlanar_restraint(self)




    def planar_restraint(self):

        localctx = XplorMRParser.Planar_restraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_planar_restraint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 316
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==XplorMRParser.Restraints:
                self.state = 315
                self.match(XplorMRParser.Restraints)


            self.state = 318
            self.match(XplorMRParser.Planar)
            self.state = 322
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==XplorMRParser.Group or _la==XplorMRParser.Initialize:
                self.state = 319
                self.planar_statement()
                self.state = 324
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 325
            self.match(XplorMRParser.End)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Antidistance_restraintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Xadc(self):
            return self.getToken(XplorMRParser.Xadc, 0)

        def End(self):
            return self.getToken(XplorMRParser.End, 0)

        def antidistance_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Antidistance_statementContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Antidistance_statementContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_antidistance_restraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAntidistance_restraint" ):
                listener.enterAntidistance_restraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAntidistance_restraint" ):
                listener.exitAntidistance_restraint(self)




    def antidistance_restraint(self):

        localctx = XplorMRParser.Antidistance_restraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_antidistance_restraint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 327
            self.match(XplorMRParser.Xadc)
            self.state = 331
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << XplorMRParser.Assign) | (1 << XplorMRParser.Classification) | (1 << XplorMRParser.Nrestraints) | (1 << XplorMRParser.Print) | (1 << XplorMRParser.Reset) | (1 << XplorMRParser.ForceConstant) | (1 << XplorMRParser.Expectation) | (1 << XplorMRParser.Size) | (1 << XplorMRParser.Zero))) != 0):
                self.state = 328
                self.antidistance_statement()
                self.state = 333
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 334
            self.match(XplorMRParser.End)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Coupling_restraintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Coupling(self):
            return self.getToken(XplorMRParser.Coupling, 0)

        def End(self):
            return self.getToken(XplorMRParser.End, 0)

        def coupling_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Coupling_statementContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Coupling_statementContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_coupling_restraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCoupling_restraint" ):
                listener.enterCoupling_restraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCoupling_restraint" ):
                listener.exitCoupling_restraint(self)




    def coupling_restraint(self):

        localctx = XplorMRParser.Coupling_restraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_coupling_restraint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 336
            self.match(XplorMRParser.Coupling)
            self.state = 340
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << XplorMRParser.Assign) | (1 << XplorMRParser.Classification) | (1 << XplorMRParser.Nrestraints) | (1 << XplorMRParser.Potential) | (1 << XplorMRParser.Print) | (1 << XplorMRParser.Reset) | (1 << XplorMRParser.Coefficients) | (1 << XplorMRParser.ForceConstant) | (1 << XplorMRParser.Cv) | (1 << XplorMRParser.Partition) | (1 << XplorMRParser.DegEnergy))) != 0):
                self.state = 337
                self.coupling_statement()
                self.state = 342
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 343
            self.match(XplorMRParser.End)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Carbon_shift_restraintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Carbon(self):
            return self.getToken(XplorMRParser.Carbon, 0)

        def End(self):
            return self.getToken(XplorMRParser.End, 0)

        def carbon_shift_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Carbon_shift_statementContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Carbon_shift_statementContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_carbon_shift_restraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCarbon_shift_restraint" ):
                listener.enterCarbon_shift_restraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCarbon_shift_restraint" ):
                listener.exitCarbon_shift_restraint(self)




    def carbon_shift_restraint(self):

        localctx = XplorMRParser.Carbon_shift_restraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_carbon_shift_restraint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 345
            self.match(XplorMRParser.Carbon)
            self.state = 349
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((((_la - 4)) & ~0x3f) == 0 and ((1 << (_la - 4)) & ((1 << (XplorMRParser.Assign - 4)) | (1 << (XplorMRParser.Classification - 4)) | (1 << (XplorMRParser.Nrestraints - 4)) | (1 << (XplorMRParser.Potential - 4)) | (1 << (XplorMRParser.Print - 4)) | (1 << (XplorMRParser.Reset - 4)) | (1 << (XplorMRParser.ForceConstant - 4)) | (1 << (XplorMRParser.Expectation - 4)) | (1 << (XplorMRParser.Zero - 4)) | (1 << (XplorMRParser.PhiStep - 4)) | (1 << (XplorMRParser.PsiStep - 4)) | (1 << (XplorMRParser.Rcoil - 4)))) != 0):
                self.state = 346
                self.carbon_shift_statement()
                self.state = 351
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 352
            self.match(XplorMRParser.End)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Proton_shift_restraintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Proton(self):
            return self.getToken(XplorMRParser.Proton, 0)

        def End(self):
            return self.getToken(XplorMRParser.End, 0)

        def proton_shift_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Proton_shift_statementContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Proton_shift_statementContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_proton_shift_restraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProton_shift_restraint" ):
                listener.enterProton_shift_restraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProton_shift_restraint" ):
                listener.exitProton_shift_restraint(self)




    def proton_shift_restraint(self):

        localctx = XplorMRParser.Proton_shift_restraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_proton_shift_restraint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 354
            self.match(XplorMRParser.Proton)
            self.state = 358
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << XplorMRParser.Classification) | (1 << XplorMRParser.Potential) | (1 << XplorMRParser.Print) | (1 << XplorMRParser.Reset) | (1 << XplorMRParser.ForceConstant) | (1 << XplorMRParser.Anisotropy) | (1 << XplorMRParser.DegEnergy) | (1 << XplorMRParser.Carbon))) != 0) or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & ((1 << (XplorMRParser.Rcoil - 66)) | (1 << (XplorMRParser.Observed - 66)) | (1 << (XplorMRParser.Amides - 66)) | (1 << (XplorMRParser.Nitrogens - 66)) | (1 << (XplorMRParser.Oxygens - 66)) | (1 << (XplorMRParser.RingAtoms - 66)) | (1 << (XplorMRParser.AlphasAndAmides - 66)) | (1 << (XplorMRParser.Error - 66)))) != 0):
                self.state = 355
                self.proton_shift_statement()
                self.state = 360
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 361
            self.match(XplorMRParser.End)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Dihedral_angle_db_restraintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Ramachandran(self):
            return self.getToken(XplorMRParser.Ramachandran, 0)

        def End(self):
            return self.getToken(XplorMRParser.End, 0)

        def ramachandran_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Ramachandran_statementContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Ramachandran_statementContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_dihedral_angle_db_restraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDihedral_angle_db_restraint" ):
                listener.enterDihedral_angle_db_restraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDihedral_angle_db_restraint" ):
                listener.exitDihedral_angle_db_restraint(self)




    def dihedral_angle_db_restraint(self):

        localctx = XplorMRParser.Dihedral_angle_db_restraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_dihedral_angle_db_restraint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 363
            self.match(XplorMRParser.Ramachandran)
            self.state = 367
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << XplorMRParser.Assign) | (1 << XplorMRParser.Classification) | (1 << XplorMRParser.Nrestraints) | (1 << XplorMRParser.Print) | (1 << XplorMRParser.Reset) | (1 << XplorMRParser.Scale) | (1 << XplorMRParser.Cutoff) | (1 << XplorMRParser.ForceConstant) | (1 << XplorMRParser.Size) | (1 << XplorMRParser.Zero))) != 0) or ((((_la - 76)) & ~0x3f) == 0 and ((1 << (_la - 76)) & ((1 << (XplorMRParser.Gaussian - 76)) | (1 << (XplorMRParser.Phase - 76)) | (1 << (XplorMRParser.Quartic - 76)) | (1 << (XplorMRParser.Shape - 76)) | (1 << (XplorMRParser.Sort - 76)))) != 0):
                self.state = 364
                self.ramachandran_statement()
                self.state = 369
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 370
            self.match(XplorMRParser.End)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Radius_of_gyration_restraintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Collapse(self):
            return self.getToken(XplorMRParser.Collapse, 0)

        def End(self):
            return self.getToken(XplorMRParser.End, 0)

        def collapse_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Collapse_statementContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Collapse_statementContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_radius_of_gyration_restraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRadius_of_gyration_restraint" ):
                listener.enterRadius_of_gyration_restraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRadius_of_gyration_restraint" ):
                listener.exitRadius_of_gyration_restraint(self)




    def radius_of_gyration_restraint(self):

        localctx = XplorMRParser.Radius_of_gyration_restraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_radius_of_gyration_restraint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 372
            self.match(XplorMRParser.Collapse)
            self.state = 376
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << XplorMRParser.Assign) | (1 << XplorMRParser.Print) | (1 << XplorMRParser.Reset) | (1 << XplorMRParser.Scale))) != 0):
                self.state = 373
                self.collapse_statement()
                self.state = 378
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 379
            self.match(XplorMRParser.End)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Diffusion_anisotropy_restraintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Danisotropy(self):
            return self.getToken(XplorMRParser.Danisotropy, 0)

        def End(self):
            return self.getToken(XplorMRParser.End, 0)

        def diffusion_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Diffusion_statementContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Diffusion_statementContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_diffusion_anisotropy_restraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDiffusion_anisotropy_restraint" ):
                listener.enterDiffusion_anisotropy_restraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDiffusion_anisotropy_restraint" ):
                listener.exitDiffusion_anisotropy_restraint(self)




    def diffusion_anisotropy_restraint(self):

        localctx = XplorMRParser.Diffusion_anisotropy_restraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_diffusion_anisotropy_restraint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 381
            self.match(XplorMRParser.Danisotropy)
            self.state = 385
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << XplorMRParser.Assign) | (1 << XplorMRParser.Classification) | (1 << XplorMRParser.Nrestraints) | (1 << XplorMRParser.Potential) | (1 << XplorMRParser.Print) | (1 << XplorMRParser.Reset) | (1 << XplorMRParser.Coefficients) | (1 << XplorMRParser.ForceConstant) | (1 << XplorMRParser.Type))) != 0):
                self.state = 382
                self.diffusion_statement()
                self.state = 387
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 388
            self.match(XplorMRParser.End)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Orientation_db_restraintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Orient(self):
            return self.getToken(XplorMRParser.Orient, 0)

        def End(self):
            return self.getToken(XplorMRParser.End, 0)

        def orientation_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Orientation_statementContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Orientation_statementContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_orientation_db_restraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOrientation_db_restraint" ):
                listener.enterOrientation_db_restraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOrientation_db_restraint" ):
                listener.exitOrientation_db_restraint(self)




    def orientation_db_restraint(self):

        localctx = XplorMRParser.Orientation_db_restraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_orientation_db_restraint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 390
            self.match(XplorMRParser.Orient)
            self.state = 394
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << XplorMRParser.Assign) | (1 << XplorMRParser.Classification) | (1 << XplorMRParser.Nrestraints) | (1 << XplorMRParser.Print) | (1 << XplorMRParser.Reset) | (1 << XplorMRParser.Cutoff) | (1 << XplorMRParser.ForceConstant) | (1 << XplorMRParser.Size) | (1 << XplorMRParser.Zero))) != 0) or ((((_la - 76)) & ~0x3f) == 0 and ((1 << (_la - 76)) & ((1 << (XplorMRParser.Gaussian - 76)) | (1 << (XplorMRParser.Quartic - 76)) | (1 << (XplorMRParser.Height - 76)) | (1 << (XplorMRParser.MaxGaussians - 76)) | (1 << (XplorMRParser.NewGaussian - 76)))) != 0) or _la==XplorMRParser.Residue:
                self.state = 391
                self.orientation_statement()
                self.state = 396
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 397
            self.match(XplorMRParser.End)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Csa_restraintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Dcsa(self):
            return self.getToken(XplorMRParser.Dcsa, 0)

        def End(self):
            return self.getToken(XplorMRParser.End, 0)

        def csa_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Csa_statementContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Csa_statementContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_csa_restraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCsa_restraint" ):
                listener.enterCsa_restraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCsa_restraint" ):
                listener.exitCsa_restraint(self)




    def csa_restraint(self):

        localctx = XplorMRParser.Csa_restraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_csa_restraint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 399
            self.match(XplorMRParser.Dcsa)
            self.state = 403
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << XplorMRParser.Assign) | (1 << XplorMRParser.Classification) | (1 << XplorMRParser.Nrestraints) | (1 << XplorMRParser.Potential) | (1 << XplorMRParser.Print) | (1 << XplorMRParser.Reset) | (1 << XplorMRParser.Scale) | (1 << XplorMRParser.Coefficients) | (1 << XplorMRParser.ForceConstant) | (1 << XplorMRParser.Type))) != 0) or _la==XplorMRParser.Sigma:
                self.state = 400
                self.csa_statement()
                self.state = 405
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 406
            self.match(XplorMRParser.End)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pcsa_restraintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Pcsa(self):
            return self.getToken(XplorMRParser.Pcsa, 0)

        def End(self):
            return self.getToken(XplorMRParser.End, 0)

        def pcsa_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Pcsa_statementContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Pcsa_statementContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_pcsa_restraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPcsa_restraint" ):
                listener.enterPcsa_restraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPcsa_restraint" ):
                listener.exitPcsa_restraint(self)




    def pcsa_restraint(self):

        localctx = XplorMRParser.Pcsa_restraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_pcsa_restraint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 408
            self.match(XplorMRParser.Pcsa)
            self.state = 412
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << XplorMRParser.Assign) | (1 << XplorMRParser.Classification) | (1 << XplorMRParser.Nrestraints) | (1 << XplorMRParser.Potential) | (1 << XplorMRParser.Print) | (1 << XplorMRParser.Reset) | (1 << XplorMRParser.Scale) | (1 << XplorMRParser.Coefficients) | (1 << XplorMRParser.ForceConstant))) != 0) or _la==XplorMRParser.Sigma:
                self.state = 409
                self.pcsa_statement()
                self.state = 414
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 415
            self.match(XplorMRParser.End)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class One_bond_coupling_restraintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OneBond(self):
            return self.getToken(XplorMRParser.OneBond, 0)

        def End(self):
            return self.getToken(XplorMRParser.End, 0)

        def one_bond_coupling_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.One_bond_coupling_statementContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.One_bond_coupling_statementContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_one_bond_coupling_restraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOne_bond_coupling_restraint" ):
                listener.enterOne_bond_coupling_restraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOne_bond_coupling_restraint" ):
                listener.exitOne_bond_coupling_restraint(self)




    def one_bond_coupling_restraint(self):

        localctx = XplorMRParser.One_bond_coupling_restraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_one_bond_coupling_restraint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 417
            self.match(XplorMRParser.OneBond)
            self.state = 421
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << XplorMRParser.Assign) | (1 << XplorMRParser.Classification) | (1 << XplorMRParser.Nrestraints) | (1 << XplorMRParser.Potential) | (1 << XplorMRParser.Print) | (1 << XplorMRParser.Reset) | (1 << XplorMRParser.Coefficients) | (1 << XplorMRParser.ForceConstant))) != 0):
                self.state = 418
                self.one_bond_coupling_statement()
                self.state = 423
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 424
            self.match(XplorMRParser.End)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Angle_db_restraintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AngleDb(self):
            return self.getToken(XplorMRParser.AngleDb, 0)

        def End(self):
            return self.getToken(XplorMRParser.End, 0)

        def angle_db_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Angle_db_statementContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Angle_db_statementContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_angle_db_restraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAngle_db_restraint" ):
                listener.enterAngle_db_restraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAngle_db_restraint" ):
                listener.exitAngle_db_restraint(self)




    def angle_db_restraint(self):

        localctx = XplorMRParser.Angle_db_restraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_angle_db_restraint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 426
            self.match(XplorMRParser.AngleDb)
            self.state = 430
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << XplorMRParser.Assign) | (1 << XplorMRParser.Classification) | (1 << XplorMRParser.Nrestraints) | (1 << XplorMRParser.Potential) | (1 << XplorMRParser.Print) | (1 << XplorMRParser.Reset) | (1 << XplorMRParser.ForceConstant) | (1 << XplorMRParser.Expectation) | (1 << XplorMRParser.Size) | (1 << XplorMRParser.Zero))) != 0) or _la==XplorMRParser.Error or _la==XplorMRParser.DerivFlag:
                self.state = 427
                self.angle_db_statement()
                self.state = 432
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 433
            self.match(XplorMRParser.End)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pre_restraintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Paramagnetic(self):
            return self.getToken(XplorMRParser.Paramagnetic, 0)

        def End(self):
            return self.getToken(XplorMRParser.End, 0)

        def pre_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Pre_statementContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Pre_statementContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_pre_restraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPre_restraint" ):
                listener.enterPre_restraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPre_restraint" ):
                listener.exitPre_restraint(self)




    def pre_restraint(self):

        localctx = XplorMRParser.Pre_restraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_pre_restraint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 435
            self.match(XplorMRParser.Paramagnetic)
            self.state = 439
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << XplorMRParser.Assign) | (1 << XplorMRParser.Classification) | (1 << XplorMRParser.Nrestraints) | (1 << XplorMRParser.Potential) | (1 << XplorMRParser.Print) | (1 << XplorMRParser.Reset) | (1 << XplorMRParser.ForceConstant))) != 0) or ((((_la - 96)) & ~0x3f) == 0 and ((1 << (_la - 96)) & ((1 << (XplorMRParser.Kconst - 96)) | (1 << (XplorMRParser.Omega - 96)) | (1 << (XplorMRParser.Tauc - 96)) | (1 << (XplorMRParser.Debug - 96)))) != 0):
                self.state = 436
                self.pre_statement()
                self.state = 441
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 442
            self.match(XplorMRParser.End)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pcs_restraintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Xpcs(self):
            return self.getToken(XplorMRParser.Xpcs, 0)

        def End(self):
            return self.getToken(XplorMRParser.End, 0)

        def pcs_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Pcs_statementContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Pcs_statementContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_pcs_restraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPcs_restraint" ):
                listener.enterPcs_restraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPcs_restraint" ):
                listener.exitPcs_restraint(self)




    def pcs_restraint(self):

        localctx = XplorMRParser.Pcs_restraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_pcs_restraint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 444
            self.match(XplorMRParser.Xpcs)
            self.state = 448
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << XplorMRParser.Assign) | (1 << XplorMRParser.Classification) | (1 << XplorMRParser.Nrestraints) | (1 << XplorMRParser.Print) | (1 << XplorMRParser.Reset) | (1 << XplorMRParser.Coefficients) | (1 << XplorMRParser.ForceConstant))) != 0) or ((((_la - 101)) & ~0x3f) == 0 and ((1 << (_la - 101)) & ((1 << (XplorMRParser.Tolerance - 101)) | (1 << (XplorMRParser.Save - 101)) | (1 << (XplorMRParser.Fmed - 101)) | (1 << (XplorMRParser.ErrOn - 101)) | (1 << (XplorMRParser.ErrOff - 101)) | (1 << (XplorMRParser.Fon - 101)) | (1 << (XplorMRParser.Foff - 101)) | (1 << (XplorMRParser.Son - 101)) | (1 << (XplorMRParser.Soff - 101)) | (1 << (XplorMRParser.Frun - 101)))) != 0):
                self.state = 445
                self.pcs_statement()
                self.state = 450
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 451
            self.match(XplorMRParser.End)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Prdc_restraintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Xrdcoupling(self):
            return self.getToken(XplorMRParser.Xrdcoupling, 0)

        def End(self):
            return self.getToken(XplorMRParser.End, 0)

        def prdc_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Prdc_statementContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Prdc_statementContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_prdc_restraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrdc_restraint" ):
                listener.enterPrdc_restraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrdc_restraint" ):
                listener.exitPrdc_restraint(self)




    def prdc_restraint(self):

        localctx = XplorMRParser.Prdc_restraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_prdc_restraint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 453
            self.match(XplorMRParser.Xrdcoupling)
            self.state = 457
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << XplorMRParser.Assign) | (1 << XplorMRParser.Classification) | (1 << XplorMRParser.Nrestraints) | (1 << XplorMRParser.Print) | (1 << XplorMRParser.Reset) | (1 << XplorMRParser.Coefficients) | (1 << XplorMRParser.ForceConstant))) != 0) or ((((_la - 101)) & ~0x3f) == 0 and ((1 << (_la - 101)) & ((1 << (XplorMRParser.Tolerance - 101)) | (1 << (XplorMRParser.Save - 101)) | (1 << (XplorMRParser.Fmed - 101)) | (1 << (XplorMRParser.ErrOn - 101)) | (1 << (XplorMRParser.ErrOff - 101)) | (1 << (XplorMRParser.Fon - 101)) | (1 << (XplorMRParser.Foff - 101)) | (1 << (XplorMRParser.Son - 101)) | (1 << (XplorMRParser.Soff - 101)) | (1 << (XplorMRParser.Frun - 101)))) != 0):
                self.state = 454
                self.prdc_statement()
                self.state = 459
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 460
            self.match(XplorMRParser.End)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Porientation_restraintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Xangle(self):
            return self.getToken(XplorMRParser.Xangle, 0)

        def End(self):
            return self.getToken(XplorMRParser.End, 0)

        def porientation_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Porientation_statementContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Porientation_statementContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_porientation_restraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPorientation_restraint" ):
                listener.enterPorientation_restraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPorientation_restraint" ):
                listener.exitPorientation_restraint(self)




    def porientation_restraint(self):

        localctx = XplorMRParser.Porientation_restraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_porientation_restraint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 462
            self.match(XplorMRParser.Xangle)
            self.state = 466
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << XplorMRParser.Assign) | (1 << XplorMRParser.Classification) | (1 << XplorMRParser.Nrestraints) | (1 << XplorMRParser.Print) | (1 << XplorMRParser.Reset) | (1 << XplorMRParser.ForceConstant))) != 0):
                self.state = 463
                self.porientation_statement()
                self.state = 468
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 469
            self.match(XplorMRParser.End)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pccr_restraintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Xccr(self):
            return self.getToken(XplorMRParser.Xccr, 0)

        def End(self):
            return self.getToken(XplorMRParser.End, 0)

        def pccr_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Pccr_statementContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Pccr_statementContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_pccr_restraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPccr_restraint" ):
                listener.enterPccr_restraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPccr_restraint" ):
                listener.exitPccr_restraint(self)




    def pccr_restraint(self):

        localctx = XplorMRParser.Pccr_restraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_pccr_restraint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 471
            self.match(XplorMRParser.Xccr)
            self.state = 475
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << XplorMRParser.Assign) | (1 << XplorMRParser.Classification) | (1 << XplorMRParser.Nrestraints) | (1 << XplorMRParser.Print) | (1 << XplorMRParser.Reset) | (1 << XplorMRParser.Coefficients) | (1 << XplorMRParser.ForceConstant))) != 0) or _la==XplorMRParser.Frun or _la==XplorMRParser.Weip:
                self.state = 472
                self.pccr_statement()
                self.state = 477
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 478
            self.match(XplorMRParser.End)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Hbond_restraintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Hbda(self):
            return self.getToken(XplorMRParser.Hbda, 0)

        def End(self):
            return self.getToken(XplorMRParser.End, 0)

        def hbond_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Hbond_statementContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Hbond_statementContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_hbond_restraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHbond_restraint" ):
                listener.enterHbond_restraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHbond_restraint" ):
                listener.exitHbond_restraint(self)




    def hbond_restraint(self):

        localctx = XplorMRParser.Hbond_restraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_hbond_restraint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 480
            self.match(XplorMRParser.Hbda)
            self.state = 484
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << XplorMRParser.Assign) | (1 << XplorMRParser.Classification) | (1 << XplorMRParser.Nrestraints) | (1 << XplorMRParser.Print) | (1 << XplorMRParser.Reset) | (1 << XplorMRParser.ForceConstant))) != 0):
                self.state = 481
                self.hbond_statement()
                self.state = 486
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 487
            self.match(XplorMRParser.End)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Hbond_db_restraintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Hbdb(self):
            return self.getToken(XplorMRParser.Hbdb, 0)

        def End(self):
            return self.getToken(XplorMRParser.End, 0)

        def hbond_db_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Hbond_db_statementContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Hbond_db_statementContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_hbond_db_restraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHbond_db_restraint" ):
                listener.enterHbond_db_restraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHbond_db_restraint" ):
                listener.exitHbond_db_restraint(self)




    def hbond_db_restraint(self):

        localctx = XplorMRParser.Hbond_db_restraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_hbond_db_restraint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 489
            self.match(XplorMRParser.Hbdb)
            self.state = 493
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==XplorMRParser.Assign or ((((_la - 117)) & ~0x3f) == 0 and ((1 << (_la - 117)) & ((1 << (XplorMRParser.Kdir - 117)) | (1 << (XplorMRParser.Klin - 117)) | (1 << (XplorMRParser.Nseg - 117)) | (1 << (XplorMRParser.Nmin - 117)) | (1 << (XplorMRParser.Nmax - 117)) | (1 << (XplorMRParser.Segm - 117)) | (1 << (XplorMRParser.Ohcut - 117)) | (1 << (XplorMRParser.Coh1cut - 117)) | (1 << (XplorMRParser.Coh2cut - 117)) | (1 << (XplorMRParser.Ohncut - 117)) | (1 << (XplorMRParser.Updfrq - 117)) | (1 << (XplorMRParser.Prnfrq - 117)) | (1 << (XplorMRParser.Freemode - 117)))) != 0):
                self.state = 490
                self.hbond_db_statement()
                self.state = 495
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 496
            self.match(XplorMRParser.End)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Noe_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def noe_assign(self):
            return self.getTypedRuleContext(XplorMRParser.Noe_assignContext,0)


        def Asymptote(self):
            return self.getToken(XplorMRParser.Asymptote, 0)

        def Simple_name(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Simple_name)
            else:
                return self.getToken(XplorMRParser.Simple_name, i)

        def number_s(self):
            return self.getTypedRuleContext(XplorMRParser.Number_sContext,0)


        def Averaging(self):
            return self.getToken(XplorMRParser.Averaging, 0)

        def Simple_name_A(self):
            return self.getToken(XplorMRParser.Simple_name_A, 0)

        def Averaging_methods(self):
            return self.getToken(XplorMRParser.Averaging_methods, 0)

        def Bhig(self):
            return self.getToken(XplorMRParser.Bhig, 0)

        def Ceiling(self):
            return self.getToken(XplorMRParser.Ceiling, 0)

        def Equ_op(self):
            return self.getToken(XplorMRParser.Equ_op, 0)

        def Classification(self):
            return self.getToken(XplorMRParser.Classification, 0)

        def CountViol(self):
            return self.getToken(XplorMRParser.CountViol, 0)

        def Distribute(self):
            return self.getToken(XplorMRParser.Distribute, 0)

        def Monomers(self):
            return self.getToken(XplorMRParser.Monomers, 0)

        def Integer(self):
            return self.getToken(XplorMRParser.Integer, 0)

        def Ncount(self):
            return self.getToken(XplorMRParser.Ncount, 0)

        def Nrestraints(self):
            return self.getToken(XplorMRParser.Nrestraints, 0)

        def Potential(self):
            return self.getToken(XplorMRParser.Potential, 0)

        def Simple_name_P(self):
            return self.getToken(XplorMRParser.Simple_name_P, 0)

        def Potential_types(self):
            return self.getToken(XplorMRParser.Potential_types, 0)

        def Predict(self):
            return self.getToken(XplorMRParser.Predict, 0)

        def predict_statement(self):
            return self.getTypedRuleContext(XplorMRParser.Predict_statementContext,0)


        def End(self):
            return self.getToken(XplorMRParser.End, 0)

        def Print(self):
            return self.getToken(XplorMRParser.Print, 0)

        def Threshold(self):
            return self.getToken(XplorMRParser.Threshold, 0)

        def Reset(self):
            return self.getToken(XplorMRParser.Reset, 0)

        def Rswitch(self):
            return self.getToken(XplorMRParser.Rswitch, 0)

        def Scale(self):
            return self.getToken(XplorMRParser.Scale, 0)

        def SoExponent(self):
            return self.getToken(XplorMRParser.SoExponent, 0)

        def SqConstant(self):
            return self.getToken(XplorMRParser.SqConstant, 0)

        def SqExponent(self):
            return self.getToken(XplorMRParser.SqExponent, 0)

        def SqOffset(self):
            return self.getToken(XplorMRParser.SqOffset, 0)

        def Temperature(self):
            return self.getToken(XplorMRParser.Temperature, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_noe_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNoe_statement" ):
                listener.enterNoe_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNoe_statement" ):
                listener.exitNoe_statement(self)




    def noe_statement(self):

        localctx = XplorMRParser.Noe_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_noe_statement)
        self._la = 0 # Token type
        try:
            self.state = 569
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [XplorMRParser.Assign]:
                self.enterOuterAlt(localctx, 1)
                self.state = 498
                self.noe_assign()
                pass
            elif token in [XplorMRParser.Asymptote]:
                self.enterOuterAlt(localctx, 2)
                self.state = 499
                self.match(XplorMRParser.Asymptote)
                self.state = 500
                self.match(XplorMRParser.Simple_name)
                self.state = 501
                self.number_s()
                pass
            elif token in [XplorMRParser.Averaging]:
                self.enterOuterAlt(localctx, 3)
                self.state = 502
                self.match(XplorMRParser.Averaging)
                self.state = 503
                self.match(XplorMRParser.Simple_name_A)
                self.state = 504
                self.match(XplorMRParser.Averaging_methods)
                pass
            elif token in [XplorMRParser.Bhig]:
                self.enterOuterAlt(localctx, 4)
                self.state = 505
                self.match(XplorMRParser.Bhig)
                self.state = 506
                self.match(XplorMRParser.Simple_name)
                self.state = 507
                self.number_s()
                pass
            elif token in [XplorMRParser.Ceiling]:
                self.enterOuterAlt(localctx, 5)
                self.state = 508
                self.match(XplorMRParser.Ceiling)
                self.state = 510
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 509
                    self.match(XplorMRParser.Equ_op)


                self.state = 512
                self.number_s()
                pass
            elif token in [XplorMRParser.Classification]:
                self.enterOuterAlt(localctx, 6)
                self.state = 513
                self.match(XplorMRParser.Classification)
                self.state = 514
                self.match(XplorMRParser.Simple_name)
                pass
            elif token in [XplorMRParser.CountViol]:
                self.enterOuterAlt(localctx, 7)
                self.state = 515
                self.match(XplorMRParser.CountViol)
                self.state = 516
                self.match(XplorMRParser.Simple_name)
                pass
            elif token in [XplorMRParser.Distribute]:
                self.enterOuterAlt(localctx, 8)
                self.state = 517
                self.match(XplorMRParser.Distribute)
                self.state = 518
                self.match(XplorMRParser.Simple_name)
                self.state = 519
                self.match(XplorMRParser.Simple_name)
                self.state = 520
                self.number_s()
                pass
            elif token in [XplorMRParser.Monomers]:
                self.enterOuterAlt(localctx, 9)
                self.state = 521
                self.match(XplorMRParser.Monomers)
                self.state = 522
                self.match(XplorMRParser.Simple_name)
                self.state = 523
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.Ncount]:
                self.enterOuterAlt(localctx, 10)
                self.state = 524
                self.match(XplorMRParser.Ncount)
                self.state = 525
                self.match(XplorMRParser.Simple_name)
                self.state = 526
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.Nrestraints]:
                self.enterOuterAlt(localctx, 11)
                self.state = 527
                self.match(XplorMRParser.Nrestraints)
                self.state = 529
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 528
                    self.match(XplorMRParser.Equ_op)


                self.state = 531
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.Potential]:
                self.enterOuterAlt(localctx, 12)
                self.state = 532
                self.match(XplorMRParser.Potential)
                self.state = 533
                self.match(XplorMRParser.Simple_name_P)
                self.state = 534
                self.match(XplorMRParser.Potential_types)
                pass
            elif token in [XplorMRParser.Predict]:
                self.enterOuterAlt(localctx, 13)
                self.state = 535
                self.match(XplorMRParser.Predict)
                self.state = 536
                self.predict_statement()
                self.state = 537
                self.match(XplorMRParser.End)
                pass
            elif token in [XplorMRParser.Print]:
                self.enterOuterAlt(localctx, 14)
                self.state = 539
                self.match(XplorMRParser.Print)
                self.state = 540
                self.match(XplorMRParser.Threshold)
                self.state = 542
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 541
                    self.match(XplorMRParser.Equ_op)


                self.state = 544
                self.number_s()
                pass
            elif token in [XplorMRParser.Reset]:
                self.enterOuterAlt(localctx, 15)
                self.state = 545
                self.match(XplorMRParser.Reset)
                pass
            elif token in [XplorMRParser.Rswitch]:
                self.enterOuterAlt(localctx, 16)
                self.state = 546
                self.match(XplorMRParser.Rswitch)
                self.state = 547
                self.match(XplorMRParser.Simple_name)
                self.state = 548
                self.number_s()
                pass
            elif token in [XplorMRParser.Scale]:
                self.enterOuterAlt(localctx, 17)
                self.state = 549
                self.match(XplorMRParser.Scale)
                self.state = 550
                self.match(XplorMRParser.Simple_name)
                self.state = 551
                self.number_s()
                pass
            elif token in [XplorMRParser.SoExponent]:
                self.enterOuterAlt(localctx, 18)
                self.state = 552
                self.match(XplorMRParser.SoExponent)
                self.state = 553
                self.match(XplorMRParser.Simple_name)
                self.state = 554
                self.number_s()
                pass
            elif token in [XplorMRParser.SqConstant]:
                self.enterOuterAlt(localctx, 19)
                self.state = 555
                self.match(XplorMRParser.SqConstant)
                self.state = 556
                self.match(XplorMRParser.Simple_name)
                self.state = 557
                self.number_s()
                pass
            elif token in [XplorMRParser.SqExponent]:
                self.enterOuterAlt(localctx, 20)
                self.state = 558
                self.match(XplorMRParser.SqExponent)
                self.state = 559
                self.match(XplorMRParser.Simple_name)
                self.state = 560
                self.number_s()
                pass
            elif token in [XplorMRParser.SqOffset]:
                self.enterOuterAlt(localctx, 21)
                self.state = 561
                self.match(XplorMRParser.SqOffset)
                self.state = 562
                self.match(XplorMRParser.Simple_name)
                self.state = 563
                self.number_s()
                pass
            elif token in [XplorMRParser.Temperature]:
                self.enterOuterAlt(localctx, 22)
                self.state = 564
                self.match(XplorMRParser.Temperature)
                self.state = 566
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 565
                    self.match(XplorMRParser.Equ_op)


                self.state = 568
                self.number_s()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Noe_assignContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Assign(self):
            return self.getToken(XplorMRParser.Assign, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.SelectionContext,i)


        def number(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.NumberContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.NumberContext,i)


        def noe_annotation(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Noe_annotationContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Noe_annotationContext,i)


        def Or_op(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Or_op)
            else:
                return self.getToken(XplorMRParser.Or_op, i)

        def getRuleIndex(self):
            return XplorMRParser.RULE_noe_assign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNoe_assign" ):
                listener.enterNoe_assign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNoe_assign" ):
                listener.exitNoe_assign(self)




    def noe_assign(self):

        localctx = XplorMRParser.Noe_assignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_noe_assign)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 571
            self.match(XplorMRParser.Assign)
            self.state = 572
            self.selection()
            self.state = 573
            self.selection()
            self.state = 574
            self.number()
            self.state = 575
            self.number()
            self.state = 576
            self.number()
            self.state = 580
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << XplorMRParser.Peak) | (1 << XplorMRParser.Spectrum) | (1 << XplorMRParser.Volume) | (1 << XplorMRParser.Ppm1) | (1 << XplorMRParser.Ppm2) | (1 << XplorMRParser.Cv) | (1 << XplorMRParser.Weight))) != 0):
                self.state = 577
                self.noe_annotation()
                self.state = 582
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 589
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==XplorMRParser.Or_op:
                self.state = 583
                self.match(XplorMRParser.Or_op)
                self.state = 584
                self.selection()
                self.state = 585
                self.selection()
                self.state = 591
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Predict_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Cutoff(self):
            return self.getToken(XplorMRParser.Cutoff, 0)

        def number_s(self):
            return self.getTypedRuleContext(XplorMRParser.Number_sContext,0)


        def Equ_op(self):
            return self.getToken(XplorMRParser.Equ_op, 0)

        def Cuton(self):
            return self.getToken(XplorMRParser.Cuton, 0)

        def From(self):
            return self.getToken(XplorMRParser.From, 0)

        def selection(self):
            return self.getTypedRuleContext(XplorMRParser.SelectionContext,0)


        def To(self):
            return self.getToken(XplorMRParser.To, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_predict_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPredict_statement" ):
                listener.enterPredict_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPredict_statement" ):
                listener.exitPredict_statement(self)




    def predict_statement(self):

        localctx = XplorMRParser.Predict_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_predict_statement)
        self._la = 0 # Token type
        try:
            self.state = 606
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [XplorMRParser.Cutoff]:
                self.enterOuterAlt(localctx, 1)
                self.state = 592
                self.match(XplorMRParser.Cutoff)
                self.state = 594
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 593
                    self.match(XplorMRParser.Equ_op)


                self.state = 596
                self.number_s()
                pass
            elif token in [XplorMRParser.Cuton]:
                self.enterOuterAlt(localctx, 2)
                self.state = 597
                self.match(XplorMRParser.Cuton)
                self.state = 599
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 598
                    self.match(XplorMRParser.Equ_op)


                self.state = 601
                self.number_s()
                pass
            elif token in [XplorMRParser.From]:
                self.enterOuterAlt(localctx, 3)
                self.state = 602
                self.match(XplorMRParser.From)
                self.state = 603
                self.selection()
                pass
            elif token in [XplorMRParser.To]:
                self.enterOuterAlt(localctx, 4)
                self.state = 604
                self.match(XplorMRParser.To)
                self.state = 605
                self.selection()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Noe_annotationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Peak(self):
            return self.getToken(XplorMRParser.Peak, 0)

        def number_a(self):
            return self.getTypedRuleContext(XplorMRParser.Number_aContext,0)


        def Equ_op(self):
            return self.getToken(XplorMRParser.Equ_op, 0)

        def Spectrum(self):
            return self.getToken(XplorMRParser.Spectrum, 0)

        def Weight(self):
            return self.getToken(XplorMRParser.Weight, 0)

        def Volume(self):
            return self.getToken(XplorMRParser.Volume, 0)

        def Ppm1(self):
            return self.getToken(XplorMRParser.Ppm1, 0)

        def Ppm2(self):
            return self.getToken(XplorMRParser.Ppm2, 0)

        def Cv(self):
            return self.getToken(XplorMRParser.Cv, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_noe_annotation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNoe_annotation" ):
                listener.enterNoe_annotation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNoe_annotation" ):
                listener.exitNoe_annotation(self)




    def noe_annotation(self):

        localctx = XplorMRParser.Noe_annotationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_noe_annotation)
        self._la = 0 # Token type
        try:
            self.state = 643
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [XplorMRParser.Peak]:
                self.enterOuterAlt(localctx, 1)
                self.state = 608
                self.match(XplorMRParser.Peak)
                self.state = 610
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 609
                    self.match(XplorMRParser.Equ_op)


                self.state = 612
                self.number_a()
                pass
            elif token in [XplorMRParser.Spectrum]:
                self.enterOuterAlt(localctx, 2)
                self.state = 613
                self.match(XplorMRParser.Spectrum)
                self.state = 615
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 614
                    self.match(XplorMRParser.Equ_op)


                self.state = 617
                self.number_a()
                pass
            elif token in [XplorMRParser.Weight]:
                self.enterOuterAlt(localctx, 3)
                self.state = 618
                self.match(XplorMRParser.Weight)
                self.state = 620
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 619
                    self.match(XplorMRParser.Equ_op)


                self.state = 622
                self.number_a()
                pass
            elif token in [XplorMRParser.Volume]:
                self.enterOuterAlt(localctx, 4)
                self.state = 623
                self.match(XplorMRParser.Volume)
                self.state = 625
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 624
                    self.match(XplorMRParser.Equ_op)


                self.state = 627
                self.number_a()
                pass
            elif token in [XplorMRParser.Ppm1]:
                self.enterOuterAlt(localctx, 5)
                self.state = 628
                self.match(XplorMRParser.Ppm1)
                self.state = 630
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 629
                    self.match(XplorMRParser.Equ_op)


                self.state = 632
                self.number_a()
                pass
            elif token in [XplorMRParser.Ppm2]:
                self.enterOuterAlt(localctx, 6)
                self.state = 633
                self.match(XplorMRParser.Ppm2)
                self.state = 635
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 634
                    self.match(XplorMRParser.Equ_op)


                self.state = 637
                self.number_a()
                pass
            elif token in [XplorMRParser.Cv]:
                self.enterOuterAlt(localctx, 7)
                self.state = 638
                self.match(XplorMRParser.Cv)
                self.state = 640
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 639
                    self.match(XplorMRParser.Equ_op)


                self.state = 642
                self.number_a()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Dihedral_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def dihedral_assign(self):
            return self.getTypedRuleContext(XplorMRParser.Dihedral_assignContext,0)


        def Nassign(self):
            return self.getToken(XplorMRParser.Nassign, 0)

        def Integer(self):
            return self.getToken(XplorMRParser.Integer, 0)

        def Equ_op(self):
            return self.getToken(XplorMRParser.Equ_op, 0)

        def Reset(self):
            return self.getToken(XplorMRParser.Reset, 0)

        def Scale(self):
            return self.getToken(XplorMRParser.Scale, 0)

        def number_s(self):
            return self.getTypedRuleContext(XplorMRParser.Number_sContext,0)


        def getRuleIndex(self):
            return XplorMRParser.RULE_dihedral_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDihedral_statement" ):
                listener.enterDihedral_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDihedral_statement" ):
                listener.exitDihedral_statement(self)




    def dihedral_statement(self):

        localctx = XplorMRParser.Dihedral_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_dihedral_statement)
        self._la = 0 # Token type
        try:
            self.state = 654
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [XplorMRParser.Assign]:
                self.enterOuterAlt(localctx, 1)
                self.state = 645
                self.dihedral_assign()
                pass
            elif token in [XplorMRParser.Nassign]:
                self.enterOuterAlt(localctx, 2)
                self.state = 646
                self.match(XplorMRParser.Nassign)
                self.state = 648
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 647
                    self.match(XplorMRParser.Equ_op)


                self.state = 650
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.Reset]:
                self.enterOuterAlt(localctx, 3)
                self.state = 651
                self.match(XplorMRParser.Reset)
                pass
            elif token in [XplorMRParser.Scale]:
                self.enterOuterAlt(localctx, 4)
                self.state = 652
                self.match(XplorMRParser.Scale)
                self.state = 653
                self.number_s()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Dihedral_assignContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Assign(self):
            return self.getToken(XplorMRParser.Assign, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.SelectionContext,i)


        def number(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.NumberContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.NumberContext,i)


        def Integer(self):
            return self.getToken(XplorMRParser.Integer, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_dihedral_assign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDihedral_assign" ):
                listener.enterDihedral_assign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDihedral_assign" ):
                listener.exitDihedral_assign(self)




    def dihedral_assign(self):

        localctx = XplorMRParser.Dihedral_assignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_dihedral_assign)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 656
            self.match(XplorMRParser.Assign)
            self.state = 657
            self.selection()
            self.state = 658
            self.selection()
            self.state = 659
            self.selection()
            self.state = 660
            self.selection()
            self.state = 661
            self.number()
            self.state = 662
            self.number()
            self.state = 663
            self.number()
            self.state = 664
            self.match(XplorMRParser.Integer)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Sani_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def sani_assign(self):
            return self.getTypedRuleContext(XplorMRParser.Sani_assignContext,0)


        def Classification(self):
            return self.getToken(XplorMRParser.Classification, 0)

        def Simple_name(self):
            return self.getToken(XplorMRParser.Simple_name, 0)

        def Coefficients(self):
            return self.getToken(XplorMRParser.Coefficients, 0)

        def number_s(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Number_sContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Number_sContext,i)


        def ForceConstant(self):
            return self.getToken(XplorMRParser.ForceConstant, 0)

        def Nrestraints(self):
            return self.getToken(XplorMRParser.Nrestraints, 0)

        def Integer(self):
            return self.getToken(XplorMRParser.Integer, 0)

        def Potential(self):
            return self.getToken(XplorMRParser.Potential, 0)

        def Potential_types(self):
            return self.getToken(XplorMRParser.Potential_types, 0)

        def Print(self):
            return self.getToken(XplorMRParser.Print, 0)

        def Threshold(self):
            return self.getToken(XplorMRParser.Threshold, 0)

        def Reset(self):
            return self.getToken(XplorMRParser.Reset, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_sani_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSani_statement" ):
                listener.enterSani_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSani_statement" ):
                listener.exitSani_statement(self)




    def sani_statement(self):

        localctx = XplorMRParser.Sani_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_sani_statement)
        try:
            self.state = 684
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [XplorMRParser.Assign]:
                self.enterOuterAlt(localctx, 1)
                self.state = 666
                self.sani_assign()
                pass
            elif token in [XplorMRParser.Classification]:
                self.enterOuterAlt(localctx, 2)
                self.state = 667
                self.match(XplorMRParser.Classification)
                self.state = 668
                self.match(XplorMRParser.Simple_name)
                pass
            elif token in [XplorMRParser.Coefficients]:
                self.enterOuterAlt(localctx, 3)
                self.state = 669
                self.match(XplorMRParser.Coefficients)
                self.state = 670
                self.number_s()
                self.state = 671
                self.number_s()
                self.state = 672
                self.number_s()
                pass
            elif token in [XplorMRParser.ForceConstant]:
                self.enterOuterAlt(localctx, 4)
                self.state = 674
                self.match(XplorMRParser.ForceConstant)
                self.state = 675
                self.number_s()
                pass
            elif token in [XplorMRParser.Nrestraints]:
                self.enterOuterAlt(localctx, 5)
                self.state = 676
                self.match(XplorMRParser.Nrestraints)
                self.state = 677
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.Potential]:
                self.enterOuterAlt(localctx, 6)
                self.state = 678
                self.match(XplorMRParser.Potential)
                self.state = 679
                self.match(XplorMRParser.Potential_types)
                pass
            elif token in [XplorMRParser.Print]:
                self.enterOuterAlt(localctx, 7)
                self.state = 680
                self.match(XplorMRParser.Print)
                self.state = 681
                self.match(XplorMRParser.Threshold)
                self.state = 682
                self.number_s()
                pass
            elif token in [XplorMRParser.Reset]:
                self.enterOuterAlt(localctx, 8)
                self.state = 683
                self.match(XplorMRParser.Reset)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Sani_assignContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Assign(self):
            return self.getToken(XplorMRParser.Assign, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.SelectionContext,i)


        def number(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.NumberContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.NumberContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_sani_assign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSani_assign" ):
                listener.enterSani_assign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSani_assign" ):
                listener.exitSani_assign(self)




    def sani_assign(self):

        localctx = XplorMRParser.Sani_assignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_sani_assign)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 686
            self.match(XplorMRParser.Assign)
            self.state = 687
            self.selection()
            self.state = 688
            self.selection()
            self.state = 689
            self.selection()
            self.state = 690
            self.selection()
            self.state = 691
            self.selection()
            self.state = 692
            self.selection()
            self.state = 693
            self.number()
            self.state = 694
            self.number()
            self.state = 696
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==XplorMRParser.Integer or _la==XplorMRParser.Real:
                self.state = 695
                self.number()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Xdip_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def xdip_assign(self):
            return self.getTypedRuleContext(XplorMRParser.Xdip_assignContext,0)


        def Classification(self):
            return self.getToken(XplorMRParser.Classification, 0)

        def Simple_name(self):
            return self.getToken(XplorMRParser.Simple_name, 0)

        def Type(self):
            return self.getToken(XplorMRParser.Type, 0)

        def Rdc_dist_fix_types(self):
            return self.getToken(XplorMRParser.Rdc_dist_fix_types, 0)

        def Scale(self):
            return self.getToken(XplorMRParser.Scale, 0)

        def number_s(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Number_sContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Number_sContext,i)


        def Sign(self):
            return self.getToken(XplorMRParser.Sign, 0)

        def Logical(self):
            return self.getToken(XplorMRParser.Logical, 0)

        def Average(self):
            return self.getToken(XplorMRParser.Average, 0)

        def Averaging_methods(self):
            return self.getToken(XplorMRParser.Averaging_methods, 0)

        def Coefficients(self):
            return self.getToken(XplorMRParser.Coefficients, 0)

        def ForceConstant(self):
            return self.getToken(XplorMRParser.ForceConstant, 0)

        def Nrestraints(self):
            return self.getToken(XplorMRParser.Nrestraints, 0)

        def Integer(self):
            return self.getToken(XplorMRParser.Integer, 0)

        def Potential(self):
            return self.getToken(XplorMRParser.Potential, 0)

        def Potential_types(self):
            return self.getToken(XplorMRParser.Potential_types, 0)

        def Print(self):
            return self.getToken(XplorMRParser.Print, 0)

        def Threshold(self):
            return self.getToken(XplorMRParser.Threshold, 0)

        def Reset(self):
            return self.getToken(XplorMRParser.Reset, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_xdip_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterXdip_statement" ):
                listener.enterXdip_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitXdip_statement" ):
                listener.exitXdip_statement(self)




    def xdip_statement(self):

        localctx = XplorMRParser.Xdip_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_xdip_statement)
        try:
            self.state = 724
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [XplorMRParser.Assign]:
                self.enterOuterAlt(localctx, 1)
                self.state = 698
                self.xdip_assign()
                pass
            elif token in [XplorMRParser.Classification]:
                self.enterOuterAlt(localctx, 2)
                self.state = 699
                self.match(XplorMRParser.Classification)
                self.state = 700
                self.match(XplorMRParser.Simple_name)
                pass
            elif token in [XplorMRParser.Type]:
                self.enterOuterAlt(localctx, 3)
                self.state = 701
                self.match(XplorMRParser.Type)
                self.state = 702
                self.match(XplorMRParser.Rdc_dist_fix_types)
                pass
            elif token in [XplorMRParser.Scale]:
                self.enterOuterAlt(localctx, 4)
                self.state = 703
                self.match(XplorMRParser.Scale)
                self.state = 704
                self.number_s()
                pass
            elif token in [XplorMRParser.Sign]:
                self.enterOuterAlt(localctx, 5)
                self.state = 705
                self.match(XplorMRParser.Sign)
                self.state = 706
                self.match(XplorMRParser.Logical)
                pass
            elif token in [XplorMRParser.Average]:
                self.enterOuterAlt(localctx, 6)
                self.state = 707
                self.match(XplorMRParser.Average)
                self.state = 708
                self.match(XplorMRParser.Averaging_methods)
                pass
            elif token in [XplorMRParser.Coefficients]:
                self.enterOuterAlt(localctx, 7)
                self.state = 709
                self.match(XplorMRParser.Coefficients)
                self.state = 710
                self.number_s()
                self.state = 711
                self.number_s()
                self.state = 712
                self.number_s()
                pass
            elif token in [XplorMRParser.ForceConstant]:
                self.enterOuterAlt(localctx, 8)
                self.state = 714
                self.match(XplorMRParser.ForceConstant)
                self.state = 715
                self.number_s()
                pass
            elif token in [XplorMRParser.Nrestraints]:
                self.enterOuterAlt(localctx, 9)
                self.state = 716
                self.match(XplorMRParser.Nrestraints)
                self.state = 717
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.Potential]:
                self.enterOuterAlt(localctx, 10)
                self.state = 718
                self.match(XplorMRParser.Potential)
                self.state = 719
                self.match(XplorMRParser.Potential_types)
                pass
            elif token in [XplorMRParser.Print]:
                self.enterOuterAlt(localctx, 11)
                self.state = 720
                self.match(XplorMRParser.Print)
                self.state = 721
                self.match(XplorMRParser.Threshold)
                self.state = 722
                self.number_s()
                pass
            elif token in [XplorMRParser.Reset]:
                self.enterOuterAlt(localctx, 12)
                self.state = 723
                self.match(XplorMRParser.Reset)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Xdip_assignContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Assign(self):
            return self.getToken(XplorMRParser.Assign, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.SelectionContext,i)


        def number(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.NumberContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.NumberContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_xdip_assign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterXdip_assign" ):
                listener.enterXdip_assign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitXdip_assign" ):
                listener.exitXdip_assign(self)




    def xdip_assign(self):

        localctx = XplorMRParser.Xdip_assignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_xdip_assign)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 726
            self.match(XplorMRParser.Assign)
            self.state = 727
            self.selection()
            self.state = 728
            self.selection()
            self.state = 729
            self.selection()
            self.state = 730
            self.selection()
            self.state = 731
            self.selection()
            self.state = 732
            self.selection()
            self.state = 733
            self.number()
            self.state = 734
            self.number()
            self.state = 741
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,55,self._ctx)
            if la_ == 1:
                self.state = 735
                self.number()

            elif la_ == 2:
                self.state = 736
                self.number()
                self.state = 737
                self.number()
                self.state = 738
                self.number()
                self.state = 739
                self.number()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Vean_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def vean_assign(self):
            return self.getTypedRuleContext(XplorMRParser.Vean_assignContext,0)


        def Cv(self):
            return self.getToken(XplorMRParser.Cv, 0)

        def Integer(self):
            return self.getToken(XplorMRParser.Integer, 0)

        def Equ_op(self):
            return self.getToken(XplorMRParser.Equ_op, 0)

        def Classification(self):
            return self.getToken(XplorMRParser.Classification, 0)

        def Simple_name(self):
            return self.getToken(XplorMRParser.Simple_name, 0)

        def ForceConstant(self):
            return self.getToken(XplorMRParser.ForceConstant, 0)

        def number_s(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Number_sContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Number_sContext,i)


        def Nrestraints(self):
            return self.getToken(XplorMRParser.Nrestraints, 0)

        def Partition(self):
            return self.getToken(XplorMRParser.Partition, 0)

        def Print(self):
            return self.getToken(XplorMRParser.Print, 0)

        def Threshold(self):
            return self.getToken(XplorMRParser.Threshold, 0)

        def Reset(self):
            return self.getToken(XplorMRParser.Reset, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_vean_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVean_statement" ):
                listener.enterVean_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVean_statement" ):
                listener.exitVean_statement(self)




    def vean_statement(self):

        localctx = XplorMRParser.Vean_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 68, self.RULE_vean_statement)
        self._la = 0 # Token type
        try:
            self.state = 766
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [XplorMRParser.Assign]:
                self.enterOuterAlt(localctx, 1)
                self.state = 743
                self.vean_assign()
                pass
            elif token in [XplorMRParser.Cv]:
                self.enterOuterAlt(localctx, 2)
                self.state = 744
                self.match(XplorMRParser.Cv)
                self.state = 746
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 745
                    self.match(XplorMRParser.Equ_op)


                self.state = 748
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.Classification]:
                self.enterOuterAlt(localctx, 3)
                self.state = 749
                self.match(XplorMRParser.Classification)
                self.state = 750
                self.match(XplorMRParser.Simple_name)
                pass
            elif token in [XplorMRParser.ForceConstant]:
                self.enterOuterAlt(localctx, 4)
                self.state = 751
                self.match(XplorMRParser.ForceConstant)
                self.state = 752
                self.number_s()
                self.state = 753
                self.number_s()
                pass
            elif token in [XplorMRParser.Nrestraints]:
                self.enterOuterAlt(localctx, 5)
                self.state = 755
                self.match(XplorMRParser.Nrestraints)
                self.state = 756
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.Partition]:
                self.enterOuterAlt(localctx, 6)
                self.state = 757
                self.match(XplorMRParser.Partition)
                self.state = 759
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 758
                    self.match(XplorMRParser.Equ_op)


                self.state = 761
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.Print]:
                self.enterOuterAlt(localctx, 7)
                self.state = 762
                self.match(XplorMRParser.Print)
                self.state = 763
                self.match(XplorMRParser.Threshold)
                self.state = 764
                self.number_s()
                pass
            elif token in [XplorMRParser.Reset]:
                self.enterOuterAlt(localctx, 8)
                self.state = 765
                self.match(XplorMRParser.Reset)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Vean_assignContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Assign(self):
            return self.getToken(XplorMRParser.Assign, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.SelectionContext,i)


        def number(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.NumberContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.NumberContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_vean_assign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVean_assign" ):
                listener.enterVean_assign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVean_assign" ):
                listener.exitVean_assign(self)




    def vean_assign(self):

        localctx = XplorMRParser.Vean_assignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_vean_assign)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 768
            self.match(XplorMRParser.Assign)
            self.state = 769
            self.selection()
            self.state = 770
            self.selection()
            self.state = 771
            self.selection()
            self.state = 772
            self.selection()
            self.state = 773
            self.number()
            self.state = 774
            self.number()
            self.state = 775
            self.number()
            self.state = 776
            self.number()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Tenso_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def tenso_assign(self):
            return self.getTypedRuleContext(XplorMRParser.Tenso_assignContext,0)


        def Classification(self):
            return self.getToken(XplorMRParser.Classification, 0)

        def Simple_name(self):
            return self.getToken(XplorMRParser.Simple_name, 0)

        def Coefficients(self):
            return self.getToken(XplorMRParser.Coefficients, 0)

        def number_s(self):
            return self.getTypedRuleContext(XplorMRParser.Number_sContext,0)


        def Nrestraints(self):
            return self.getToken(XplorMRParser.Nrestraints, 0)

        def Integer(self):
            return self.getToken(XplorMRParser.Integer, 0)

        def Potential(self):
            return self.getToken(XplorMRParser.Potential, 0)

        def Potential_types(self):
            return self.getToken(XplorMRParser.Potential_types, 0)

        def Print(self):
            return self.getToken(XplorMRParser.Print, 0)

        def Threshold(self):
            return self.getToken(XplorMRParser.Threshold, 0)

        def Reset(self):
            return self.getToken(XplorMRParser.Reset, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_tenso_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTenso_statement" ):
                listener.enterTenso_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTenso_statement" ):
                listener.exitTenso_statement(self)




    def tenso_statement(self):

        localctx = XplorMRParser.Tenso_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_tenso_statement)
        try:
            self.state = 791
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [XplorMRParser.Assign]:
                self.enterOuterAlt(localctx, 1)
                self.state = 778
                self.tenso_assign()
                pass
            elif token in [XplorMRParser.Classification]:
                self.enterOuterAlt(localctx, 2)
                self.state = 779
                self.match(XplorMRParser.Classification)
                self.state = 780
                self.match(XplorMRParser.Simple_name)
                pass
            elif token in [XplorMRParser.Coefficients]:
                self.enterOuterAlt(localctx, 3)
                self.state = 781
                self.match(XplorMRParser.Coefficients)
                self.state = 782
                self.number_s()
                pass
            elif token in [XplorMRParser.Nrestraints]:
                self.enterOuterAlt(localctx, 4)
                self.state = 783
                self.match(XplorMRParser.Nrestraints)
                self.state = 784
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.Potential]:
                self.enterOuterAlt(localctx, 5)
                self.state = 785
                self.match(XplorMRParser.Potential)
                self.state = 786
                self.match(XplorMRParser.Potential_types)
                pass
            elif token in [XplorMRParser.Print]:
                self.enterOuterAlt(localctx, 6)
                self.state = 787
                self.match(XplorMRParser.Print)
                self.state = 788
                self.match(XplorMRParser.Threshold)
                self.state = 789
                self.number_s()
                pass
            elif token in [XplorMRParser.Reset]:
                self.enterOuterAlt(localctx, 7)
                self.state = 790
                self.match(XplorMRParser.Reset)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Tenso_assignContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Assign(self):
            return self.getToken(XplorMRParser.Assign, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.SelectionContext,i)


        def number(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.NumberContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.NumberContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_tenso_assign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTenso_assign" ):
                listener.enterTenso_assign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTenso_assign" ):
                listener.exitTenso_assign(self)




    def tenso_assign(self):

        localctx = XplorMRParser.Tenso_assignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_tenso_assign)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 793
            self.match(XplorMRParser.Assign)
            self.state = 794
            self.selection()
            self.state = 795
            self.selection()
            self.state = 796
            self.number()
            self.state = 797
            self.number()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Anis_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def anis_assign(self):
            return self.getTypedRuleContext(XplorMRParser.Anis_assignContext,0)


        def Classification(self):
            return self.getToken(XplorMRParser.Classification, 0)

        def Simple_name(self):
            return self.getToken(XplorMRParser.Simple_name, 0)

        def Coefficients(self):
            return self.getToken(XplorMRParser.Coefficients, 0)

        def number_s(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Number_sContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Number_sContext,i)


        def ForceConstant(self):
            return self.getToken(XplorMRParser.ForceConstant, 0)

        def Nrestraints(self):
            return self.getToken(XplorMRParser.Nrestraints, 0)

        def Integer(self):
            return self.getToken(XplorMRParser.Integer, 0)

        def Potential(self):
            return self.getToken(XplorMRParser.Potential, 0)

        def Potential_types(self):
            return self.getToken(XplorMRParser.Potential_types, 0)

        def Print(self):
            return self.getToken(XplorMRParser.Print, 0)

        def Threshold(self):
            return self.getToken(XplorMRParser.Threshold, 0)

        def Reset(self):
            return self.getToken(XplorMRParser.Reset, 0)

        def Type(self):
            return self.getToken(XplorMRParser.Type, 0)

        def Rdc_or_Diff_anis_types(self):
            return self.getToken(XplorMRParser.Rdc_or_Diff_anis_types, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_anis_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAnis_statement" ):
                listener.enterAnis_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAnis_statement" ):
                listener.exitAnis_statement(self)




    def anis_statement(self):

        localctx = XplorMRParser.Anis_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 76, self.RULE_anis_statement)
        try:
            self.state = 820
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [XplorMRParser.Assign]:
                self.enterOuterAlt(localctx, 1)
                self.state = 799
                self.anis_assign()
                pass
            elif token in [XplorMRParser.Classification]:
                self.enterOuterAlt(localctx, 2)
                self.state = 800
                self.match(XplorMRParser.Classification)
                self.state = 801
                self.match(XplorMRParser.Simple_name)
                pass
            elif token in [XplorMRParser.Coefficients]:
                self.enterOuterAlt(localctx, 3)
                self.state = 802
                self.match(XplorMRParser.Coefficients)
                self.state = 803
                self.number_s()
                self.state = 804
                self.number_s()
                self.state = 805
                self.number_s()
                self.state = 806
                self.number_s()
                pass
            elif token in [XplorMRParser.ForceConstant]:
                self.enterOuterAlt(localctx, 4)
                self.state = 808
                self.match(XplorMRParser.ForceConstant)
                self.state = 809
                self.number_s()
                pass
            elif token in [XplorMRParser.Nrestraints]:
                self.enterOuterAlt(localctx, 5)
                self.state = 810
                self.match(XplorMRParser.Nrestraints)
                self.state = 811
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.Potential]:
                self.enterOuterAlt(localctx, 6)
                self.state = 812
                self.match(XplorMRParser.Potential)
                self.state = 813
                self.match(XplorMRParser.Potential_types)
                pass
            elif token in [XplorMRParser.Print]:
                self.enterOuterAlt(localctx, 7)
                self.state = 814
                self.match(XplorMRParser.Print)
                self.state = 815
                self.match(XplorMRParser.Threshold)
                self.state = 816
                self.number_s()
                pass
            elif token in [XplorMRParser.Reset]:
                self.enterOuterAlt(localctx, 8)
                self.state = 817
                self.match(XplorMRParser.Reset)
                pass
            elif token in [XplorMRParser.Type]:
                self.enterOuterAlt(localctx, 9)
                self.state = 818
                self.match(XplorMRParser.Type)
                self.state = 819
                self.match(XplorMRParser.Rdc_or_Diff_anis_types)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Anis_assignContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Assign(self):
            return self.getToken(XplorMRParser.Assign, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.SelectionContext,i)


        def number(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.NumberContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.NumberContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_anis_assign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAnis_assign" ):
                listener.enterAnis_assign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAnis_assign" ):
                listener.exitAnis_assign(self)




    def anis_assign(self):

        localctx = XplorMRParser.Anis_assignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 78, self.RULE_anis_assign)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 822
            self.match(XplorMRParser.Assign)
            self.state = 823
            self.selection()
            self.state = 824
            self.selection()
            self.state = 825
            self.selection()
            self.state = 826
            self.selection()
            self.state = 827
            self.number()
            self.state = 828
            self.number()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Planar_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Group(self):
            return self.getToken(XplorMRParser.Group, 0)

        def End(self):
            return self.getToken(XplorMRParser.End, 0)

        def group_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Group_statementContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Group_statementContext,i)


        def Initialize(self):
            return self.getToken(XplorMRParser.Initialize, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_planar_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPlanar_statement" ):
                listener.enterPlanar_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPlanar_statement" ):
                listener.exitPlanar_statement(self)




    def planar_statement(self):

        localctx = XplorMRParser.Planar_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 80, self.RULE_planar_statement)
        self._la = 0 # Token type
        try:
            self.state = 839
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [XplorMRParser.Group]:
                self.enterOuterAlt(localctx, 1)
                self.state = 830
                self.match(XplorMRParser.Group)
                self.state = 834
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==XplorMRParser.Selection or _la==XplorMRParser.Weight:
                    self.state = 831
                    self.group_statement()
                    self.state = 836
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 837
                self.match(XplorMRParser.End)
                pass
            elif token in [XplorMRParser.Initialize]:
                self.enterOuterAlt(localctx, 2)
                self.state = 838
                self.match(XplorMRParser.Initialize)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Group_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Selection(self):
            return self.getToken(XplorMRParser.Selection, 0)

        def selection(self):
            return self.getTypedRuleContext(XplorMRParser.SelectionContext,0)


        def Equ_op(self):
            return self.getToken(XplorMRParser.Equ_op, 0)

        def Weight(self):
            return self.getToken(XplorMRParser.Weight, 0)

        def number_s(self):
            return self.getTypedRuleContext(XplorMRParser.Number_sContext,0)


        def getRuleIndex(self):
            return XplorMRParser.RULE_group_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGroup_statement" ):
                listener.enterGroup_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGroup_statement" ):
                listener.exitGroup_statement(self)




    def group_statement(self):

        localctx = XplorMRParser.Group_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 82, self.RULE_group_statement)
        self._la = 0 # Token type
        try:
            self.state = 851
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [XplorMRParser.Selection]:
                self.enterOuterAlt(localctx, 1)
                self.state = 841
                self.match(XplorMRParser.Selection)
                self.state = 843
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 842
                    self.match(XplorMRParser.Equ_op)


                self.state = 845
                self.selection()
                pass
            elif token in [XplorMRParser.Weight]:
                self.enterOuterAlt(localctx, 2)
                self.state = 846
                self.match(XplorMRParser.Weight)
                self.state = 848
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 847
                    self.match(XplorMRParser.Equ_op)


                self.state = 850
                self.number_s()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Antidistance_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def xadc_assign(self):
            return self.getTypedRuleContext(XplorMRParser.Xadc_assignContext,0)


        def Classification(self):
            return self.getToken(XplorMRParser.Classification, 0)

        def Simple_name(self):
            return self.getToken(XplorMRParser.Simple_name, 0)

        def Expectation(self):
            return self.getToken(XplorMRParser.Expectation, 0)

        def Integer(self):
            return self.getToken(XplorMRParser.Integer, 0)

        def number_s(self):
            return self.getTypedRuleContext(XplorMRParser.Number_sContext,0)


        def ForceConstant(self):
            return self.getToken(XplorMRParser.ForceConstant, 0)

        def Nrestraints(self):
            return self.getToken(XplorMRParser.Nrestraints, 0)

        def Print(self):
            return self.getToken(XplorMRParser.Print, 0)

        def Threshold(self):
            return self.getToken(XplorMRParser.Threshold, 0)

        def All(self):
            return self.getToken(XplorMRParser.All, 0)

        def Reset(self):
            return self.getToken(XplorMRParser.Reset, 0)

        def Size(self):
            return self.getToken(XplorMRParser.Size, 0)

        def Zero(self):
            return self.getToken(XplorMRParser.Zero, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_antidistance_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAntidistance_statement" ):
                listener.enterAntidistance_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAntidistance_statement" ):
                listener.exitAntidistance_statement(self)




    def antidistance_statement(self):

        localctx = XplorMRParser.Antidistance_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 84, self.RULE_antidistance_statement)
        try:
            self.state = 877
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [XplorMRParser.Assign]:
                self.enterOuterAlt(localctx, 1)
                self.state = 853
                self.xadc_assign()
                pass
            elif token in [XplorMRParser.Classification]:
                self.enterOuterAlt(localctx, 2)
                self.state = 854
                self.match(XplorMRParser.Classification)
                self.state = 855
                self.match(XplorMRParser.Simple_name)
                pass
            elif token in [XplorMRParser.Expectation]:
                self.enterOuterAlt(localctx, 3)
                self.state = 856
                self.match(XplorMRParser.Expectation)
                self.state = 857
                self.match(XplorMRParser.Integer)
                self.state = 858
                self.number_s()
                pass
            elif token in [XplorMRParser.ForceConstant]:
                self.enterOuterAlt(localctx, 4)
                self.state = 859
                self.match(XplorMRParser.ForceConstant)
                self.state = 860
                self.number_s()
                pass
            elif token in [XplorMRParser.Nrestraints]:
                self.enterOuterAlt(localctx, 5)
                self.state = 861
                self.match(XplorMRParser.Nrestraints)
                self.state = 862
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.Print]:
                self.enterOuterAlt(localctx, 6)
                self.state = 863
                self.match(XplorMRParser.Print)
                self.state = 864
                self.match(XplorMRParser.Threshold)
                self.state = 865
                self.number_s()
                self.state = 869
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [XplorMRParser.All]:
                    self.state = 866
                    self.match(XplorMRParser.All)
                    pass
                elif token in [XplorMRParser.Classification]:
                    self.state = 867
                    self.match(XplorMRParser.Classification)
                    self.state = 868
                    self.match(XplorMRParser.Simple_name)
                    pass
                else:
                    raise NoViableAltException(self)

                pass
            elif token in [XplorMRParser.Reset]:
                self.enterOuterAlt(localctx, 7)
                self.state = 871
                self.match(XplorMRParser.Reset)
                pass
            elif token in [XplorMRParser.Size]:
                self.enterOuterAlt(localctx, 8)
                self.state = 872
                self.match(XplorMRParser.Size)
                self.state = 873
                self.number_s()
                self.state = 874
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.Zero]:
                self.enterOuterAlt(localctx, 9)
                self.state = 876
                self.match(XplorMRParser.Zero)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Xadc_assignContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Assign(self):
            return self.getToken(XplorMRParser.Assign, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.SelectionContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_xadc_assign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterXadc_assign" ):
                listener.enterXadc_assign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitXadc_assign" ):
                listener.exitXadc_assign(self)




    def xadc_assign(self):

        localctx = XplorMRParser.Xadc_assignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 86, self.RULE_xadc_assign)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 879
            self.match(XplorMRParser.Assign)
            self.state = 880
            self.selection()
            self.state = 881
            self.selection()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Coupling_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def coup_assign(self):
            return self.getTypedRuleContext(XplorMRParser.Coup_assignContext,0)


        def Classification(self):
            return self.getToken(XplorMRParser.Classification, 0)

        def Simple_name(self):
            return self.getToken(XplorMRParser.Simple_name, 0)

        def Coefficients(self):
            return self.getToken(XplorMRParser.Coefficients, 0)

        def number_s(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Number_sContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Number_sContext,i)


        def Cv(self):
            return self.getToken(XplorMRParser.Cv, 0)

        def Integer(self):
            return self.getToken(XplorMRParser.Integer, 0)

        def Equ_op(self):
            return self.getToken(XplorMRParser.Equ_op, 0)

        def DegEnergy(self):
            return self.getToken(XplorMRParser.DegEnergy, 0)

        def ForceConstant(self):
            return self.getToken(XplorMRParser.ForceConstant, 0)

        def Nrestraints(self):
            return self.getToken(XplorMRParser.Nrestraints, 0)

        def Partition(self):
            return self.getToken(XplorMRParser.Partition, 0)

        def Potential(self):
            return self.getToken(XplorMRParser.Potential, 0)

        def Potential_types(self):
            return self.getToken(XplorMRParser.Potential_types, 0)

        def Print(self):
            return self.getToken(XplorMRParser.Print, 0)

        def Threshold(self):
            return self.getToken(XplorMRParser.Threshold, 0)

        def All(self):
            return self.getToken(XplorMRParser.All, 0)

        def Reset(self):
            return self.getToken(XplorMRParser.Reset, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_coupling_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCoupling_statement" ):
                listener.enterCoupling_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCoupling_statement" ):
                listener.exitCoupling_statement(self)




    def coupling_statement(self):

        localctx = XplorMRParser.Coupling_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 88, self.RULE_coupling_statement)
        self._la = 0 # Token type
        try:
            self.state = 922
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [XplorMRParser.Assign]:
                self.enterOuterAlt(localctx, 1)
                self.state = 883
                self.coup_assign()
                pass
            elif token in [XplorMRParser.Classification]:
                self.enterOuterAlt(localctx, 2)
                self.state = 884
                self.match(XplorMRParser.Classification)
                self.state = 885
                self.match(XplorMRParser.Simple_name)
                pass
            elif token in [XplorMRParser.Coefficients]:
                self.enterOuterAlt(localctx, 3)
                self.state = 886
                self.match(XplorMRParser.Coefficients)
                self.state = 887
                self.number_s()
                self.state = 888
                self.number_s()
                self.state = 889
                self.number_s()
                self.state = 890
                self.number_s()
                pass
            elif token in [XplorMRParser.Cv]:
                self.enterOuterAlt(localctx, 4)
                self.state = 892
                self.match(XplorMRParser.Cv)
                self.state = 894
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 893
                    self.match(XplorMRParser.Equ_op)


                self.state = 896
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.DegEnergy]:
                self.enterOuterAlt(localctx, 5)
                self.state = 897
                self.match(XplorMRParser.DegEnergy)
                self.state = 898
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.ForceConstant]:
                self.enterOuterAlt(localctx, 6)
                self.state = 899
                self.match(XplorMRParser.ForceConstant)
                self.state = 900
                self.number_s()
                self.state = 902
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Integer or _la==XplorMRParser.Real:
                    self.state = 901
                    self.number_s()


                pass
            elif token in [XplorMRParser.Nrestraints]:
                self.enterOuterAlt(localctx, 7)
                self.state = 904
                self.match(XplorMRParser.Nrestraints)
                self.state = 905
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.Partition]:
                self.enterOuterAlt(localctx, 8)
                self.state = 906
                self.match(XplorMRParser.Partition)
                self.state = 908
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 907
                    self.match(XplorMRParser.Equ_op)


                self.state = 910
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.Potential]:
                self.enterOuterAlt(localctx, 9)
                self.state = 911
                self.match(XplorMRParser.Potential)
                self.state = 912
                self.match(XplorMRParser.Potential_types)
                pass
            elif token in [XplorMRParser.Print]:
                self.enterOuterAlt(localctx, 10)
                self.state = 913
                self.match(XplorMRParser.Print)
                self.state = 914
                self.match(XplorMRParser.Threshold)
                self.state = 915
                self.number_s()
                self.state = 919
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [XplorMRParser.All]:
                    self.state = 916
                    self.match(XplorMRParser.All)
                    pass
                elif token in [XplorMRParser.Classification]:
                    self.state = 917
                    self.match(XplorMRParser.Classification)
                    self.state = 918
                    self.match(XplorMRParser.Simple_name)
                    pass
                else:
                    raise NoViableAltException(self)

                pass
            elif token in [XplorMRParser.Reset]:
                self.enterOuterAlt(localctx, 11)
                self.state = 921
                self.match(XplorMRParser.Reset)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Coup_assignContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Assign(self):
            return self.getToken(XplorMRParser.Assign, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.SelectionContext,i)


        def number(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.NumberContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.NumberContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_coup_assign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCoup_assign" ):
                listener.enterCoup_assign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCoup_assign" ):
                listener.exitCoup_assign(self)




    def coup_assign(self):

        localctx = XplorMRParser.Coup_assignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 90, self.RULE_coup_assign)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 924
            self.match(XplorMRParser.Assign)
            self.state = 925
            self.selection()
            self.state = 926
            self.selection()
            self.state = 927
            self.selection()
            self.state = 928
            self.selection()
            self.state = 934
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==XplorMRParser.L_paren:
                self.state = 929
                self.selection()
                self.state = 930
                self.selection()
                self.state = 931
                self.selection()
                self.state = 932
                self.selection()


            self.state = 936
            self.number()
            self.state = 937
            self.number()
            self.state = 941
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==XplorMRParser.Integer or _la==XplorMRParser.Real:
                self.state = 938
                self.number()
                self.state = 939
                self.number()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Carbon_shift_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def carbon_shift_assign(self):
            return self.getTypedRuleContext(XplorMRParser.Carbon_shift_assignContext,0)


        def Classification(self):
            return self.getToken(XplorMRParser.Classification, 0)

        def Simple_name(self):
            return self.getToken(XplorMRParser.Simple_name, 0)

        def Expectation(self):
            return self.getToken(XplorMRParser.Expectation, 0)

        def Integer(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Integer)
            else:
                return self.getToken(XplorMRParser.Integer, i)

        def number_s(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Number_sContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Number_sContext,i)


        def ForceConstant(self):
            return self.getToken(XplorMRParser.ForceConstant, 0)

        def Nrestraints(self):
            return self.getToken(XplorMRParser.Nrestraints, 0)

        def PhiStep(self):
            return self.getToken(XplorMRParser.PhiStep, 0)

        def PsiStep(self):
            return self.getToken(XplorMRParser.PsiStep, 0)

        def Potential(self):
            return self.getToken(XplorMRParser.Potential, 0)

        def Potential_types(self):
            return self.getToken(XplorMRParser.Potential_types, 0)

        def Print(self):
            return self.getToken(XplorMRParser.Print, 0)

        def Threshold(self):
            return self.getToken(XplorMRParser.Threshold, 0)

        def carbon_shift_rcoil(self):
            return self.getTypedRuleContext(XplorMRParser.Carbon_shift_rcoilContext,0)


        def Reset(self):
            return self.getToken(XplorMRParser.Reset, 0)

        def Zero(self):
            return self.getToken(XplorMRParser.Zero, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_carbon_shift_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCarbon_shift_statement" ):
                listener.enterCarbon_shift_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCarbon_shift_statement" ):
                listener.exitCarbon_shift_statement(self)




    def carbon_shift_statement(self):

        localctx = XplorMRParser.Carbon_shift_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 92, self.RULE_carbon_shift_statement)
        try:
            self.state = 969
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [XplorMRParser.Assign]:
                self.enterOuterAlt(localctx, 1)
                self.state = 943
                self.carbon_shift_assign()
                pass
            elif token in [XplorMRParser.Classification]:
                self.enterOuterAlt(localctx, 2)
                self.state = 944
                self.match(XplorMRParser.Classification)
                self.state = 945
                self.match(XplorMRParser.Simple_name)
                pass
            elif token in [XplorMRParser.Expectation]:
                self.enterOuterAlt(localctx, 3)
                self.state = 946
                self.match(XplorMRParser.Expectation)
                self.state = 947
                self.match(XplorMRParser.Integer)
                self.state = 948
                self.match(XplorMRParser.Integer)
                self.state = 949
                self.number_s()
                self.state = 950
                self.number_s()
                self.state = 951
                self.number_s()
                pass
            elif token in [XplorMRParser.ForceConstant]:
                self.enterOuterAlt(localctx, 4)
                self.state = 953
                self.match(XplorMRParser.ForceConstant)
                self.state = 954
                self.number_s()
                pass
            elif token in [XplorMRParser.Nrestraints]:
                self.enterOuterAlt(localctx, 5)
                self.state = 955
                self.match(XplorMRParser.Nrestraints)
                self.state = 956
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.PhiStep]:
                self.enterOuterAlt(localctx, 6)
                self.state = 957
                self.match(XplorMRParser.PhiStep)
                self.state = 958
                self.number_s()
                pass
            elif token in [XplorMRParser.PsiStep]:
                self.enterOuterAlt(localctx, 7)
                self.state = 959
                self.match(XplorMRParser.PsiStep)
                self.state = 960
                self.number_s()
                pass
            elif token in [XplorMRParser.Potential]:
                self.enterOuterAlt(localctx, 8)
                self.state = 961
                self.match(XplorMRParser.Potential)
                self.state = 962
                self.match(XplorMRParser.Potential_types)
                pass
            elif token in [XplorMRParser.Print]:
                self.enterOuterAlt(localctx, 9)
                self.state = 963
                self.match(XplorMRParser.Print)
                self.state = 964
                self.match(XplorMRParser.Threshold)
                self.state = 965
                self.number_s()
                pass
            elif token in [XplorMRParser.Rcoil]:
                self.enterOuterAlt(localctx, 10)
                self.state = 966
                self.carbon_shift_rcoil()
                pass
            elif token in [XplorMRParser.Reset]:
                self.enterOuterAlt(localctx, 11)
                self.state = 967
                self.match(XplorMRParser.Reset)
                pass
            elif token in [XplorMRParser.Zero]:
                self.enterOuterAlt(localctx, 12)
                self.state = 968
                self.match(XplorMRParser.Zero)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Carbon_shift_assignContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Assign(self):
            return self.getToken(XplorMRParser.Assign, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.SelectionContext,i)


        def number(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.NumberContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.NumberContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_carbon_shift_assign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCarbon_shift_assign" ):
                listener.enterCarbon_shift_assign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCarbon_shift_assign" ):
                listener.exitCarbon_shift_assign(self)




    def carbon_shift_assign(self):

        localctx = XplorMRParser.Carbon_shift_assignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 94, self.RULE_carbon_shift_assign)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 971
            self.match(XplorMRParser.Assign)
            self.state = 972
            self.selection()
            self.state = 973
            self.selection()
            self.state = 974
            self.selection()
            self.state = 975
            self.selection()
            self.state = 976
            self.selection()
            self.state = 977
            self.number()
            self.state = 978
            self.number()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Carbon_shift_rcoilContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Rcoil(self):
            return self.getToken(XplorMRParser.Rcoil, 0)

        def selection(self):
            return self.getTypedRuleContext(XplorMRParser.SelectionContext,0)


        def number_s(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Number_sContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Number_sContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_carbon_shift_rcoil

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCarbon_shift_rcoil" ):
                listener.enterCarbon_shift_rcoil(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCarbon_shift_rcoil" ):
                listener.exitCarbon_shift_rcoil(self)




    def carbon_shift_rcoil(self):

        localctx = XplorMRParser.Carbon_shift_rcoilContext(self, self._ctx, self.state)
        self.enterRule(localctx, 96, self.RULE_carbon_shift_rcoil)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 980
            self.match(XplorMRParser.Rcoil)
            self.state = 981
            self.selection()
            self.state = 982
            self.number_s()
            self.state = 983
            self.number_s()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Proton_shift_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def observed(self):
            return self.getTypedRuleContext(XplorMRParser.ObservedContext,0)


        def proton_shift_rcoil(self):
            return self.getTypedRuleContext(XplorMRParser.Proton_shift_rcoilContext,0)


        def proton_shift_anisotropy(self):
            return self.getTypedRuleContext(XplorMRParser.Proton_shift_anisotropyContext,0)


        def proton_shift_amides(self):
            return self.getTypedRuleContext(XplorMRParser.Proton_shift_amidesContext,0)


        def proton_shift_carbons(self):
            return self.getTypedRuleContext(XplorMRParser.Proton_shift_carbonsContext,0)


        def proton_shift_nitrogens(self):
            return self.getTypedRuleContext(XplorMRParser.Proton_shift_nitrogensContext,0)


        def proton_shift_oxygens(self):
            return self.getTypedRuleContext(XplorMRParser.Proton_shift_oxygensContext,0)


        def proton_shift_ring_atoms(self):
            return self.getTypedRuleContext(XplorMRParser.Proton_shift_ring_atomsContext,0)


        def proton_shift_alphas_and_amides(self):
            return self.getTypedRuleContext(XplorMRParser.Proton_shift_alphas_and_amidesContext,0)


        def Classification(self):
            return self.getToken(XplorMRParser.Classification, 0)

        def Simple_name(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Simple_name)
            else:
                return self.getToken(XplorMRParser.Simple_name, i)

        def Error(self):
            return self.getToken(XplorMRParser.Error, 0)

        def number_s(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Number_sContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Number_sContext,i)


        def DegEnergy(self):
            return self.getToken(XplorMRParser.DegEnergy, 0)

        def Integer(self):
            return self.getToken(XplorMRParser.Integer, 0)

        def ForceConstant(self):
            return self.getToken(XplorMRParser.ForceConstant, 0)

        def Potential(self):
            return self.getToken(XplorMRParser.Potential, 0)

        def Potential_types(self):
            return self.getToken(XplorMRParser.Potential_types, 0)

        def Print(self):
            return self.getToken(XplorMRParser.Print, 0)

        def Threshold(self):
            return self.getToken(XplorMRParser.Threshold, 0)

        def All(self):
            return self.getToken(XplorMRParser.All, 0)

        def Reset(self):
            return self.getToken(XplorMRParser.Reset, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_proton_shift_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProton_shift_statement" ):
                listener.enterProton_shift_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProton_shift_statement" ):
                listener.exitProton_shift_statement(self)




    def proton_shift_statement(self):

        localctx = XplorMRParser.Proton_shift_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 98, self.RULE_proton_shift_statement)
        self._la = 0 # Token type
        try:
            self.state = 1018
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [XplorMRParser.Observed]:
                self.enterOuterAlt(localctx, 1)
                self.state = 985
                self.observed()
                pass
            elif token in [XplorMRParser.Rcoil]:
                self.enterOuterAlt(localctx, 2)
                self.state = 986
                self.proton_shift_rcoil()
                pass
            elif token in [XplorMRParser.Anisotropy]:
                self.enterOuterAlt(localctx, 3)
                self.state = 987
                self.proton_shift_anisotropy()
                pass
            elif token in [XplorMRParser.Amides]:
                self.enterOuterAlt(localctx, 4)
                self.state = 988
                self.proton_shift_amides()
                pass
            elif token in [XplorMRParser.Carbon]:
                self.enterOuterAlt(localctx, 5)
                self.state = 989
                self.proton_shift_carbons()
                pass
            elif token in [XplorMRParser.Nitrogens]:
                self.enterOuterAlt(localctx, 6)
                self.state = 990
                self.proton_shift_nitrogens()
                pass
            elif token in [XplorMRParser.Oxygens]:
                self.enterOuterAlt(localctx, 7)
                self.state = 991
                self.proton_shift_oxygens()
                pass
            elif token in [XplorMRParser.RingAtoms]:
                self.enterOuterAlt(localctx, 8)
                self.state = 992
                self.proton_shift_ring_atoms()
                pass
            elif token in [XplorMRParser.AlphasAndAmides]:
                self.enterOuterAlt(localctx, 9)
                self.state = 993
                self.proton_shift_alphas_and_amides()
                pass
            elif token in [XplorMRParser.Classification]:
                self.enterOuterAlt(localctx, 10)
                self.state = 994
                self.match(XplorMRParser.Classification)
                self.state = 995
                self.match(XplorMRParser.Simple_name)
                pass
            elif token in [XplorMRParser.Error]:
                self.enterOuterAlt(localctx, 11)
                self.state = 996
                self.match(XplorMRParser.Error)
                self.state = 997
                self.number_s()
                pass
            elif token in [XplorMRParser.DegEnergy]:
                self.enterOuterAlt(localctx, 12)
                self.state = 998
                self.match(XplorMRParser.DegEnergy)
                self.state = 999
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.ForceConstant]:
                self.enterOuterAlt(localctx, 13)
                self.state = 1000
                self.match(XplorMRParser.ForceConstant)
                self.state = 1001
                self.number_s()
                self.state = 1003
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Integer or _la==XplorMRParser.Real:
                    self.state = 1002
                    self.number_s()


                pass
            elif token in [XplorMRParser.Potential]:
                self.enterOuterAlt(localctx, 14)
                self.state = 1005
                self.match(XplorMRParser.Potential)
                self.state = 1006
                self.match(XplorMRParser.Potential_types)
                pass
            elif token in [XplorMRParser.Print]:
                self.enterOuterAlt(localctx, 15)
                self.state = 1007
                self.match(XplorMRParser.Print)
                self.state = 1008
                self.match(XplorMRParser.Threshold)
                self.state = 1009
                self.number_s()
                self.state = 1013
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [XplorMRParser.All]:
                    self.state = 1010
                    self.match(XplorMRParser.All)
                    pass
                elif token in [XplorMRParser.Classification]:
                    self.state = 1011
                    self.match(XplorMRParser.Classification)
                    self.state = 1012
                    self.match(XplorMRParser.Simple_name)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 1015
                self.match(XplorMRParser.Simple_name)
                pass
            elif token in [XplorMRParser.Reset]:
                self.enterOuterAlt(localctx, 16)
                self.state = 1017
                self.match(XplorMRParser.Reset)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ObservedContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Observed(self):
            return self.getToken(XplorMRParser.Observed, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.SelectionContext,i)


        def number_s(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Number_sContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Number_sContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_observed

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterObserved" ):
                listener.enterObserved(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitObserved" ):
                listener.exitObserved(self)




    def observed(self):

        localctx = XplorMRParser.ObservedContext(self, self._ctx, self.state)
        self.enterRule(localctx, 100, self.RULE_observed)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1020
            self.match(XplorMRParser.Observed)
            self.state = 1021
            self.selection()
            self.state = 1023
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==XplorMRParser.L_paren:
                self.state = 1022
                self.selection()


            self.state = 1025
            self.number_s()
            self.state = 1027
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==XplorMRParser.Integer or _la==XplorMRParser.Real:
                self.state = 1026
                self.number_s()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Proton_shift_rcoilContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Rcoil(self):
            return self.getToken(XplorMRParser.Rcoil, 0)

        def selection(self):
            return self.getTypedRuleContext(XplorMRParser.SelectionContext,0)


        def number_s(self):
            return self.getTypedRuleContext(XplorMRParser.Number_sContext,0)


        def getRuleIndex(self):
            return XplorMRParser.RULE_proton_shift_rcoil

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProton_shift_rcoil" ):
                listener.enterProton_shift_rcoil(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProton_shift_rcoil" ):
                listener.exitProton_shift_rcoil(self)




    def proton_shift_rcoil(self):

        localctx = XplorMRParser.Proton_shift_rcoilContext(self, self._ctx, self.state)
        self.enterRule(localctx, 102, self.RULE_proton_shift_rcoil)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1029
            self.match(XplorMRParser.Rcoil)
            self.state = 1030
            self.selection()
            self.state = 1031
            self.number_s()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Proton_shift_anisotropyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Anisotropy(self):
            return self.getToken(XplorMRParser.Anisotropy, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.SelectionContext,i)


        def Simple_name(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Simple_name)
            else:
                return self.getToken(XplorMRParser.Simple_name, i)

        def Logical(self):
            return self.getToken(XplorMRParser.Logical, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_proton_shift_anisotropy

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProton_shift_anisotropy" ):
                listener.enterProton_shift_anisotropy(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProton_shift_anisotropy" ):
                listener.exitProton_shift_anisotropy(self)




    def proton_shift_anisotropy(self):

        localctx = XplorMRParser.Proton_shift_anisotropyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 104, self.RULE_proton_shift_anisotropy)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1033
            self.match(XplorMRParser.Anisotropy)
            self.state = 1034
            self.selection()
            self.state = 1035
            self.selection()
            self.state = 1036
            self.selection()
            self.state = 1037
            self.match(XplorMRParser.Simple_name)
            self.state = 1039
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==XplorMRParser.Logical:
                self.state = 1038
                self.match(XplorMRParser.Logical)


            self.state = 1041
            self.match(XplorMRParser.Simple_name)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Proton_shift_amidesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Amides(self):
            return self.getToken(XplorMRParser.Amides, 0)

        def selection(self):
            return self.getTypedRuleContext(XplorMRParser.SelectionContext,0)


        def getRuleIndex(self):
            return XplorMRParser.RULE_proton_shift_amides

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProton_shift_amides" ):
                listener.enterProton_shift_amides(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProton_shift_amides" ):
                listener.exitProton_shift_amides(self)




    def proton_shift_amides(self):

        localctx = XplorMRParser.Proton_shift_amidesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 106, self.RULE_proton_shift_amides)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1043
            self.match(XplorMRParser.Amides)
            self.state = 1044
            self.selection()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Proton_shift_carbonsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Carbon(self):
            return self.getToken(XplorMRParser.Carbon, 0)

        def selection(self):
            return self.getTypedRuleContext(XplorMRParser.SelectionContext,0)


        def getRuleIndex(self):
            return XplorMRParser.RULE_proton_shift_carbons

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProton_shift_carbons" ):
                listener.enterProton_shift_carbons(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProton_shift_carbons" ):
                listener.exitProton_shift_carbons(self)




    def proton_shift_carbons(self):

        localctx = XplorMRParser.Proton_shift_carbonsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 108, self.RULE_proton_shift_carbons)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1046
            self.match(XplorMRParser.Carbon)
            self.state = 1047
            self.selection()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Proton_shift_nitrogensContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Nitrogens(self):
            return self.getToken(XplorMRParser.Nitrogens, 0)

        def selection(self):
            return self.getTypedRuleContext(XplorMRParser.SelectionContext,0)


        def getRuleIndex(self):
            return XplorMRParser.RULE_proton_shift_nitrogens

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProton_shift_nitrogens" ):
                listener.enterProton_shift_nitrogens(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProton_shift_nitrogens" ):
                listener.exitProton_shift_nitrogens(self)




    def proton_shift_nitrogens(self):

        localctx = XplorMRParser.Proton_shift_nitrogensContext(self, self._ctx, self.state)
        self.enterRule(localctx, 110, self.RULE_proton_shift_nitrogens)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1049
            self.match(XplorMRParser.Nitrogens)
            self.state = 1050
            self.selection()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Proton_shift_oxygensContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Oxygens(self):
            return self.getToken(XplorMRParser.Oxygens, 0)

        def selection(self):
            return self.getTypedRuleContext(XplorMRParser.SelectionContext,0)


        def getRuleIndex(self):
            return XplorMRParser.RULE_proton_shift_oxygens

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProton_shift_oxygens" ):
                listener.enterProton_shift_oxygens(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProton_shift_oxygens" ):
                listener.exitProton_shift_oxygens(self)




    def proton_shift_oxygens(self):

        localctx = XplorMRParser.Proton_shift_oxygensContext(self, self._ctx, self.state)
        self.enterRule(localctx, 112, self.RULE_proton_shift_oxygens)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1052
            self.match(XplorMRParser.Oxygens)
            self.state = 1053
            self.selection()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Proton_shift_ring_atomsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RingAtoms(self):
            return self.getToken(XplorMRParser.RingAtoms, 0)

        def Simple_name(self):
            return self.getToken(XplorMRParser.Simple_name, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.SelectionContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_proton_shift_ring_atoms

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProton_shift_ring_atoms" ):
                listener.enterProton_shift_ring_atoms(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProton_shift_ring_atoms" ):
                listener.exitProton_shift_ring_atoms(self)




    def proton_shift_ring_atoms(self):

        localctx = XplorMRParser.Proton_shift_ring_atomsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 114, self.RULE_proton_shift_ring_atoms)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1055
            self.match(XplorMRParser.RingAtoms)
            self.state = 1056
            self.match(XplorMRParser.Simple_name)
            self.state = 1057
            self.selection()
            self.state = 1058
            self.selection()
            self.state = 1059
            self.selection()
            self.state = 1060
            self.selection()
            self.state = 1061
            self.selection()
            self.state = 1063
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==XplorMRParser.L_paren:
                self.state = 1062
                self.selection()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Proton_shift_alphas_and_amidesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AlphasAndAmides(self):
            return self.getToken(XplorMRParser.AlphasAndAmides, 0)

        def selection(self):
            return self.getTypedRuleContext(XplorMRParser.SelectionContext,0)


        def getRuleIndex(self):
            return XplorMRParser.RULE_proton_shift_alphas_and_amides

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProton_shift_alphas_and_amides" ):
                listener.enterProton_shift_alphas_and_amides(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProton_shift_alphas_and_amides" ):
                listener.exitProton_shift_alphas_and_amides(self)




    def proton_shift_alphas_and_amides(self):

        localctx = XplorMRParser.Proton_shift_alphas_and_amidesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 116, self.RULE_proton_shift_alphas_and_amides)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1065
            self.match(XplorMRParser.AlphasAndAmides)
            self.state = 1066
            self.selection()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Ramachandran_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def rama_assign(self):
            return self.getTypedRuleContext(XplorMRParser.Rama_assignContext,0)


        def Classification(self):
            return self.getToken(XplorMRParser.Classification, 0)

        def Simple_name(self):
            return self.getToken(XplorMRParser.Simple_name, 0)

        def Cutoff(self):
            return self.getToken(XplorMRParser.Cutoff, 0)

        def number_s(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Number_sContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Number_sContext,i)


        def ForceConstant(self):
            return self.getToken(XplorMRParser.ForceConstant, 0)

        def Gaussian(self):
            return self.getToken(XplorMRParser.Gaussian, 0)

        def Nrestraints(self):
            return self.getToken(XplorMRParser.Nrestraints, 0)

        def Integer(self):
            return self.getToken(XplorMRParser.Integer, 0)

        def Phase(self):
            return self.getToken(XplorMRParser.Phase, 0)

        def Print(self):
            return self.getToken(XplorMRParser.Print, 0)

        def Threshold(self):
            return self.getToken(XplorMRParser.Threshold, 0)

        def All(self):
            return self.getToken(XplorMRParser.All, 0)

        def Quartic(self):
            return self.getToken(XplorMRParser.Quartic, 0)

        def Reset(self):
            return self.getToken(XplorMRParser.Reset, 0)

        def Scale(self):
            return self.getToken(XplorMRParser.Scale, 0)

        def Shape(self):
            return self.getToken(XplorMRParser.Shape, 0)

        def Gauss_or_Quart(self):
            return self.getToken(XplorMRParser.Gauss_or_Quart, 0)

        def Size(self):
            return self.getToken(XplorMRParser.Size, 0)

        def Dimensions(self):
            return self.getToken(XplorMRParser.Dimensions, 0)

        def Sort(self):
            return self.getToken(XplorMRParser.Sort, 0)

        def Zero(self):
            return self.getToken(XplorMRParser.Zero, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_ramachandran_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRamachandran_statement" ):
                listener.enterRamachandran_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRamachandran_statement" ):
                listener.exitRamachandran_statement(self)




    def ramachandran_statement(self):

        localctx = XplorMRParser.Ramachandran_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 118, self.RULE_ramachandran_statement)
        self._la = 0 # Token type
        try:
            self.state = 1170
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [XplorMRParser.Assign]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1068
                self.rama_assign()
                pass
            elif token in [XplorMRParser.Classification]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1069
                self.match(XplorMRParser.Classification)
                self.state = 1070
                self.match(XplorMRParser.Simple_name)
                pass
            elif token in [XplorMRParser.Cutoff]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1071
                self.match(XplorMRParser.Cutoff)
                self.state = 1072
                self.number_s()
                pass
            elif token in [XplorMRParser.ForceConstant]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1073
                self.match(XplorMRParser.ForceConstant)
                self.state = 1074
                self.number_s()
                pass
            elif token in [XplorMRParser.Gaussian]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1075
                self.match(XplorMRParser.Gaussian)
                self.state = 1076
                self.number_s()
                self.state = 1077
                self.number_s()
                self.state = 1078
                self.number_s()
                self.state = 1083
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,83,self._ctx)
                if la_ == 1:
                    self.state = 1079
                    self.number_s()
                    self.state = 1080
                    self.number_s()
                    self.state = 1081
                    self.number_s()


                self.state = 1089
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,84,self._ctx)
                if la_ == 1:
                    self.state = 1085
                    self.number_s()
                    self.state = 1086
                    self.number_s()
                    self.state = 1087
                    self.number_s()


                self.state = 1095
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Integer or _la==XplorMRParser.Real:
                    self.state = 1091
                    self.number_s()
                    self.state = 1092
                    self.number_s()
                    self.state = 1093
                    self.number_s()


                pass
            elif token in [XplorMRParser.Nrestraints]:
                self.enterOuterAlt(localctx, 6)
                self.state = 1097
                self.match(XplorMRParser.Nrestraints)
                self.state = 1098
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.Phase]:
                self.enterOuterAlt(localctx, 7)
                self.state = 1099
                self.match(XplorMRParser.Phase)
                self.state = 1100
                self.number_s()
                self.state = 1101
                self.number_s()
                self.state = 1102
                self.number_s()
                self.state = 1107
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,86,self._ctx)
                if la_ == 1:
                    self.state = 1103
                    self.number_s()
                    self.state = 1104
                    self.number_s()
                    self.state = 1105
                    self.number_s()


                self.state = 1113
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,87,self._ctx)
                if la_ == 1:
                    self.state = 1109
                    self.number_s()
                    self.state = 1110
                    self.number_s()
                    self.state = 1111
                    self.number_s()


                self.state = 1119
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Integer or _la==XplorMRParser.Real:
                    self.state = 1115
                    self.number_s()
                    self.state = 1116
                    self.number_s()
                    self.state = 1117
                    self.number_s()


                pass
            elif token in [XplorMRParser.Print]:
                self.enterOuterAlt(localctx, 8)
                self.state = 1121
                self.match(XplorMRParser.Print)
                self.state = 1122
                self.match(XplorMRParser.Threshold)
                self.state = 1123
                self.number_s()
                self.state = 1127
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [XplorMRParser.All]:
                    self.state = 1124
                    self.match(XplorMRParser.All)
                    pass
                elif token in [XplorMRParser.Classification]:
                    self.state = 1125
                    self.match(XplorMRParser.Classification)
                    self.state = 1126
                    self.match(XplorMRParser.Simple_name)
                    pass
                else:
                    raise NoViableAltException(self)

                pass
            elif token in [XplorMRParser.Quartic]:
                self.enterOuterAlt(localctx, 9)
                self.state = 1129
                self.match(XplorMRParser.Quartic)
                self.state = 1130
                self.number_s()
                self.state = 1131
                self.number_s()
                self.state = 1132
                self.number_s()
                self.state = 1137
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,90,self._ctx)
                if la_ == 1:
                    self.state = 1133
                    self.number_s()
                    self.state = 1134
                    self.number_s()
                    self.state = 1135
                    self.number_s()


                self.state = 1143
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,91,self._ctx)
                if la_ == 1:
                    self.state = 1139
                    self.number_s()
                    self.state = 1140
                    self.number_s()
                    self.state = 1141
                    self.number_s()


                self.state = 1149
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Integer or _la==XplorMRParser.Real:
                    self.state = 1145
                    self.number_s()
                    self.state = 1146
                    self.number_s()
                    self.state = 1147
                    self.number_s()


                pass
            elif token in [XplorMRParser.Reset]:
                self.enterOuterAlt(localctx, 10)
                self.state = 1151
                self.match(XplorMRParser.Reset)
                pass
            elif token in [XplorMRParser.Scale]:
                self.enterOuterAlt(localctx, 11)
                self.state = 1152
                self.match(XplorMRParser.Scale)
                self.state = 1153
                self.number_s()
                pass
            elif token in [XplorMRParser.Shape]:
                self.enterOuterAlt(localctx, 12)
                self.state = 1154
                self.match(XplorMRParser.Shape)
                self.state = 1155
                self.match(XplorMRParser.Gauss_or_Quart)
                pass
            elif token in [XplorMRParser.Size]:
                self.enterOuterAlt(localctx, 13)
                self.state = 1156
                self.match(XplorMRParser.Size)
                self.state = 1157
                self.match(XplorMRParser.Dimensions)
                self.state = 1158
                self.number_s()
                self.state = 1160
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,93,self._ctx)
                if la_ == 1:
                    self.state = 1159
                    self.number_s()


                self.state = 1163
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,94,self._ctx)
                if la_ == 1:
                    self.state = 1162
                    self.number_s()


                self.state = 1166
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Integer or _la==XplorMRParser.Real:
                    self.state = 1165
                    self.number_s()


                pass
            elif token in [XplorMRParser.Sort]:
                self.enterOuterAlt(localctx, 14)
                self.state = 1168
                self.match(XplorMRParser.Sort)
                pass
            elif token in [XplorMRParser.Zero]:
                self.enterOuterAlt(localctx, 15)
                self.state = 1169
                self.match(XplorMRParser.Zero)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Rama_assignContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Assign(self):
            return self.getToken(XplorMRParser.Assign, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.SelectionContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_rama_assign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRama_assign" ):
                listener.enterRama_assign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRama_assign" ):
                listener.exitRama_assign(self)




    def rama_assign(self):

        localctx = XplorMRParser.Rama_assignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 120, self.RULE_rama_assign)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1172
            self.match(XplorMRParser.Assign)
            self.state = 1173
            self.selection()
            self.state = 1174
            self.selection()
            self.state = 1175
            self.selection()
            self.state = 1176
            self.selection()
            self.state = 1182
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,97,self._ctx)
            if la_ == 1:
                self.state = 1177
                self.selection()
                self.state = 1178
                self.selection()
                self.state = 1179
                self.selection()
                self.state = 1180
                self.selection()


            self.state = 1189
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,98,self._ctx)
            if la_ == 1:
                self.state = 1184
                self.selection()
                self.state = 1185
                self.selection()
                self.state = 1186
                self.selection()
                self.state = 1187
                self.selection()


            self.state = 1196
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==XplorMRParser.L_paren:
                self.state = 1191
                self.selection()
                self.state = 1192
                self.selection()
                self.state = 1193
                self.selection()
                self.state = 1194
                self.selection()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Collapse_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def coll_assign(self):
            return self.getTypedRuleContext(XplorMRParser.Coll_assignContext,0)


        def Scale(self):
            return self.getToken(XplorMRParser.Scale, 0)

        def number_s(self):
            return self.getTypedRuleContext(XplorMRParser.Number_sContext,0)


        def Print(self):
            return self.getToken(XplorMRParser.Print, 0)

        def Reset(self):
            return self.getToken(XplorMRParser.Reset, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_collapse_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCollapse_statement" ):
                listener.enterCollapse_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCollapse_statement" ):
                listener.exitCollapse_statement(self)




    def collapse_statement(self):

        localctx = XplorMRParser.Collapse_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 122, self.RULE_collapse_statement)
        try:
            self.state = 1203
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [XplorMRParser.Assign]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1198
                self.coll_assign()
                pass
            elif token in [XplorMRParser.Scale]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1199
                self.match(XplorMRParser.Scale)
                self.state = 1200
                self.number_s()
                pass
            elif token in [XplorMRParser.Print]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1201
                self.match(XplorMRParser.Print)
                pass
            elif token in [XplorMRParser.Reset]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1202
                self.match(XplorMRParser.Reset)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Coll_assignContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Assign(self):
            return self.getToken(XplorMRParser.Assign, 0)

        def selection(self):
            return self.getTypedRuleContext(XplorMRParser.SelectionContext,0)


        def number(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.NumberContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.NumberContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_coll_assign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColl_assign" ):
                listener.enterColl_assign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColl_assign" ):
                listener.exitColl_assign(self)




    def coll_assign(self):

        localctx = XplorMRParser.Coll_assignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 124, self.RULE_coll_assign)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1205
            self.match(XplorMRParser.Assign)
            self.state = 1206
            self.selection()
            self.state = 1207
            self.number()
            self.state = 1208
            self.number()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Diffusion_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def dani_assign(self):
            return self.getTypedRuleContext(XplorMRParser.Dani_assignContext,0)


        def Classification(self):
            return self.getToken(XplorMRParser.Classification, 0)

        def Simple_name(self):
            return self.getToken(XplorMRParser.Simple_name, 0)

        def Coefficients(self):
            return self.getToken(XplorMRParser.Coefficients, 0)

        def number_s(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Number_sContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Number_sContext,i)


        def ForceConstant(self):
            return self.getToken(XplorMRParser.ForceConstant, 0)

        def Nrestraints(self):
            return self.getToken(XplorMRParser.Nrestraints, 0)

        def Integer(self):
            return self.getToken(XplorMRParser.Integer, 0)

        def Potential(self):
            return self.getToken(XplorMRParser.Potential, 0)

        def Potential_types(self):
            return self.getToken(XplorMRParser.Potential_types, 0)

        def Print(self):
            return self.getToken(XplorMRParser.Print, 0)

        def Threshold(self):
            return self.getToken(XplorMRParser.Threshold, 0)

        def Reset(self):
            return self.getToken(XplorMRParser.Reset, 0)

        def Type(self):
            return self.getToken(XplorMRParser.Type, 0)

        def Rdc_or_Diff_anis_types(self):
            return self.getToken(XplorMRParser.Rdc_or_Diff_anis_types, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_diffusion_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDiffusion_statement" ):
                listener.enterDiffusion_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDiffusion_statement" ):
                listener.exitDiffusion_statement(self)




    def diffusion_statement(self):

        localctx = XplorMRParser.Diffusion_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 126, self.RULE_diffusion_statement)
        try:
            self.state = 1232
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [XplorMRParser.Assign]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1210
                self.dani_assign()
                pass
            elif token in [XplorMRParser.Classification]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1211
                self.match(XplorMRParser.Classification)
                self.state = 1212
                self.match(XplorMRParser.Simple_name)
                pass
            elif token in [XplorMRParser.Coefficients]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1213
                self.match(XplorMRParser.Coefficients)
                self.state = 1214
                self.number_s()
                self.state = 1215
                self.number_s()
                self.state = 1216
                self.number_s()
                self.state = 1217
                self.number_s()
                self.state = 1218
                self.number_s()
                pass
            elif token in [XplorMRParser.ForceConstant]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1220
                self.match(XplorMRParser.ForceConstant)
                self.state = 1221
                self.number_s()
                pass
            elif token in [XplorMRParser.Nrestraints]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1222
                self.match(XplorMRParser.Nrestraints)
                self.state = 1223
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.Potential]:
                self.enterOuterAlt(localctx, 6)
                self.state = 1224
                self.match(XplorMRParser.Potential)
                self.state = 1225
                self.match(XplorMRParser.Potential_types)
                pass
            elif token in [XplorMRParser.Print]:
                self.enterOuterAlt(localctx, 7)
                self.state = 1226
                self.match(XplorMRParser.Print)
                self.state = 1227
                self.match(XplorMRParser.Threshold)
                self.state = 1228
                self.number_s()
                pass
            elif token in [XplorMRParser.Reset]:
                self.enterOuterAlt(localctx, 8)
                self.state = 1229
                self.match(XplorMRParser.Reset)
                pass
            elif token in [XplorMRParser.Type]:
                self.enterOuterAlt(localctx, 9)
                self.state = 1230
                self.match(XplorMRParser.Type)
                self.state = 1231
                self.match(XplorMRParser.Rdc_or_Diff_anis_types)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Dani_assignContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Assign(self):
            return self.getToken(XplorMRParser.Assign, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.SelectionContext,i)


        def number(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.NumberContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.NumberContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_dani_assign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDani_assign" ):
                listener.enterDani_assign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDani_assign" ):
                listener.exitDani_assign(self)




    def dani_assign(self):

        localctx = XplorMRParser.Dani_assignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 128, self.RULE_dani_assign)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1234
            self.match(XplorMRParser.Assign)
            self.state = 1235
            self.selection()
            self.state = 1236
            self.selection()
            self.state = 1237
            self.selection()
            self.state = 1238
            self.selection()
            self.state = 1239
            self.selection()
            self.state = 1240
            self.selection()
            self.state = 1241
            self.number()
            self.state = 1242
            self.number()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Orientation_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def orie_assign(self):
            return self.getTypedRuleContext(XplorMRParser.Orie_assignContext,0)


        def Classification(self):
            return self.getToken(XplorMRParser.Classification, 0)

        def Simple_name(self):
            return self.getToken(XplorMRParser.Simple_name, 0)

        def Cutoff(self):
            return self.getToken(XplorMRParser.Cutoff, 0)

        def number_s(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Number_sContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Number_sContext,i)


        def Height(self):
            return self.getToken(XplorMRParser.Height, 0)

        def ForceConstant(self):
            return self.getToken(XplorMRParser.ForceConstant, 0)

        def Gaussian(self):
            return self.getToken(XplorMRParser.Gaussian, 0)

        def MaxGaussians(self):
            return self.getToken(XplorMRParser.MaxGaussians, 0)

        def Integer(self):
            return self.getToken(XplorMRParser.Integer, 0)

        def NewGaussian(self):
            return self.getToken(XplorMRParser.NewGaussian, 0)

        def Nrestraints(self):
            return self.getToken(XplorMRParser.Nrestraints, 0)

        def Print(self):
            return self.getToken(XplorMRParser.Print, 0)

        def Threshold(self):
            return self.getToken(XplorMRParser.Threshold, 0)

        def All(self):
            return self.getToken(XplorMRParser.All, 0)

        def Quartic(self):
            return self.getToken(XplorMRParser.Quartic, 0)

        def Reset(self):
            return self.getToken(XplorMRParser.Reset, 0)

        def Residue(self):
            return self.getToken(XplorMRParser.Residue, 0)

        def Size(self):
            return self.getToken(XplorMRParser.Size, 0)

        def Zero(self):
            return self.getToken(XplorMRParser.Zero, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_orientation_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOrientation_statement" ):
                listener.enterOrientation_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOrientation_statement" ):
                listener.exitOrientation_statement(self)




    def orientation_statement(self):

        localctx = XplorMRParser.Orientation_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 130, self.RULE_orientation_statement)
        try:
            self.state = 1301
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [XplorMRParser.Assign]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1244
                self.orie_assign()
                pass
            elif token in [XplorMRParser.Classification]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1245
                self.match(XplorMRParser.Classification)
                self.state = 1246
                self.match(XplorMRParser.Simple_name)
                pass
            elif token in [XplorMRParser.Cutoff]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1247
                self.match(XplorMRParser.Cutoff)
                self.state = 1248
                self.number_s()
                pass
            elif token in [XplorMRParser.Height]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1249
                self.match(XplorMRParser.Height)
                self.state = 1250
                self.number_s()
                pass
            elif token in [XplorMRParser.ForceConstant]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1251
                self.match(XplorMRParser.ForceConstant)
                self.state = 1252
                self.number_s()
                pass
            elif token in [XplorMRParser.Gaussian]:
                self.enterOuterAlt(localctx, 6)
                self.state = 1253
                self.match(XplorMRParser.Gaussian)
                self.state = 1254
                self.number_s()
                self.state = 1255
                self.number_s()
                self.state = 1256
                self.number_s()
                self.state = 1257
                self.number_s()
                self.state = 1258
                self.number_s()
                self.state = 1259
                self.number_s()
                self.state = 1260
                self.number_s()
                pass
            elif token in [XplorMRParser.MaxGaussians]:
                self.enterOuterAlt(localctx, 7)
                self.state = 1262
                self.match(XplorMRParser.MaxGaussians)
                self.state = 1263
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.NewGaussian]:
                self.enterOuterAlt(localctx, 8)
                self.state = 1264
                self.match(XplorMRParser.NewGaussian)
                self.state = 1265
                self.number_s()
                self.state = 1266
                self.number_s()
                self.state = 1267
                self.number_s()
                self.state = 1268
                self.number_s()
                self.state = 1269
                self.number_s()
                self.state = 1270
                self.number_s()
                self.state = 1271
                self.number_s()
                self.state = 1272
                self.number_s()
                pass
            elif token in [XplorMRParser.Nrestraints]:
                self.enterOuterAlt(localctx, 9)
                self.state = 1274
                self.match(XplorMRParser.Nrestraints)
                self.state = 1275
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.Print]:
                self.enterOuterAlt(localctx, 10)
                self.state = 1276
                self.match(XplorMRParser.Print)
                self.state = 1277
                self.match(XplorMRParser.Threshold)
                self.state = 1278
                self.number_s()
                self.state = 1282
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [XplorMRParser.All]:
                    self.state = 1279
                    self.match(XplorMRParser.All)
                    pass
                elif token in [XplorMRParser.Classification]:
                    self.state = 1280
                    self.match(XplorMRParser.Classification)
                    self.state = 1281
                    self.match(XplorMRParser.Simple_name)
                    pass
                else:
                    raise NoViableAltException(self)

                pass
            elif token in [XplorMRParser.Quartic]:
                self.enterOuterAlt(localctx, 11)
                self.state = 1284
                self.match(XplorMRParser.Quartic)
                self.state = 1285
                self.number_s()
                self.state = 1286
                self.number_s()
                self.state = 1287
                self.number_s()
                self.state = 1288
                self.number_s()
                self.state = 1289
                self.number_s()
                self.state = 1290
                self.number_s()
                self.state = 1291
                self.number_s()
                pass
            elif token in [XplorMRParser.Reset]:
                self.enterOuterAlt(localctx, 12)
                self.state = 1293
                self.match(XplorMRParser.Reset)
                pass
            elif token in [XplorMRParser.Residue]:
                self.enterOuterAlt(localctx, 13)
                self.state = 1294
                self.match(XplorMRParser.Residue)
                self.state = 1295
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.Size]:
                self.enterOuterAlt(localctx, 14)
                self.state = 1296
                self.match(XplorMRParser.Size)
                self.state = 1297
                self.number_s()
                self.state = 1298
                self.number_s()
                pass
            elif token in [XplorMRParser.Zero]:
                self.enterOuterAlt(localctx, 15)
                self.state = 1300
                self.match(XplorMRParser.Zero)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Orie_assignContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Assign(self):
            return self.getToken(XplorMRParser.Assign, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.SelectionContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_orie_assign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOrie_assign" ):
                listener.enterOrie_assign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOrie_assign" ):
                listener.exitOrie_assign(self)




    def orie_assign(self):

        localctx = XplorMRParser.Orie_assignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 132, self.RULE_orie_assign)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1303
            self.match(XplorMRParser.Assign)
            self.state = 1304
            self.selection()
            self.state = 1305
            self.selection()
            self.state = 1306
            self.selection()
            self.state = 1307
            self.selection()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Csa_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def csa_assign(self):
            return self.getTypedRuleContext(XplorMRParser.Csa_assignContext,0)


        def Classification(self):
            return self.getToken(XplorMRParser.Classification, 0)

        def Simple_name(self):
            return self.getToken(XplorMRParser.Simple_name, 0)

        def Scale(self):
            return self.getToken(XplorMRParser.Scale, 0)

        def number_s(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Number_sContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Number_sContext,i)


        def Type(self):
            return self.getToken(XplorMRParser.Type, 0)

        def Csa_types(self):
            return self.getToken(XplorMRParser.Csa_types, 0)

        def Coefficients(self):
            return self.getToken(XplorMRParser.Coefficients, 0)

        def Sigma(self):
            return self.getToken(XplorMRParser.Sigma, 0)

        def ForceConstant(self):
            return self.getToken(XplorMRParser.ForceConstant, 0)

        def Nrestraints(self):
            return self.getToken(XplorMRParser.Nrestraints, 0)

        def Integer(self):
            return self.getToken(XplorMRParser.Integer, 0)

        def Potential(self):
            return self.getToken(XplorMRParser.Potential, 0)

        def Potential_types(self):
            return self.getToken(XplorMRParser.Potential_types, 0)

        def Print(self):
            return self.getToken(XplorMRParser.Print, 0)

        def Threshold(self):
            return self.getToken(XplorMRParser.Threshold, 0)

        def Reset(self):
            return self.getToken(XplorMRParser.Reset, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_csa_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCsa_statement" ):
                listener.enterCsa_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCsa_statement" ):
                listener.exitCsa_statement(self)




    def csa_statement(self):

        localctx = XplorMRParser.Csa_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 134, self.RULE_csa_statement)
        try:
            self.state = 1336
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [XplorMRParser.Assign]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1309
                self.csa_assign()
                pass
            elif token in [XplorMRParser.Classification]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1310
                self.match(XplorMRParser.Classification)
                self.state = 1311
                self.match(XplorMRParser.Simple_name)
                pass
            elif token in [XplorMRParser.Scale]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1312
                self.match(XplorMRParser.Scale)
                self.state = 1313
                self.number_s()
                pass
            elif token in [XplorMRParser.Type]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1314
                self.match(XplorMRParser.Type)
                self.state = 1315
                self.match(XplorMRParser.Csa_types)
                pass
            elif token in [XplorMRParser.Coefficients]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1316
                self.match(XplorMRParser.Coefficients)
                self.state = 1317
                self.number_s()
                self.state = 1318
                self.number_s()
                self.state = 1319
                self.number_s()
                pass
            elif token in [XplorMRParser.Sigma]:
                self.enterOuterAlt(localctx, 6)
                self.state = 1321
                self.match(XplorMRParser.Sigma)
                self.state = 1322
                self.number_s()
                self.state = 1323
                self.number_s()
                self.state = 1324
                self.number_s()
                pass
            elif token in [XplorMRParser.ForceConstant]:
                self.enterOuterAlt(localctx, 7)
                self.state = 1326
                self.match(XplorMRParser.ForceConstant)
                self.state = 1327
                self.number_s()
                pass
            elif token in [XplorMRParser.Nrestraints]:
                self.enterOuterAlt(localctx, 8)
                self.state = 1328
                self.match(XplorMRParser.Nrestraints)
                self.state = 1329
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.Potential]:
                self.enterOuterAlt(localctx, 9)
                self.state = 1330
                self.match(XplorMRParser.Potential)
                self.state = 1331
                self.match(XplorMRParser.Potential_types)
                pass
            elif token in [XplorMRParser.Print]:
                self.enterOuterAlt(localctx, 10)
                self.state = 1332
                self.match(XplorMRParser.Print)
                self.state = 1333
                self.match(XplorMRParser.Threshold)
                self.state = 1334
                self.number_s()
                pass
            elif token in [XplorMRParser.Reset]:
                self.enterOuterAlt(localctx, 11)
                self.state = 1335
                self.match(XplorMRParser.Reset)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Csa_assignContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Assign(self):
            return self.getToken(XplorMRParser.Assign, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.SelectionContext,i)


        def number(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.NumberContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.NumberContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_csa_assign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCsa_assign" ):
                listener.enterCsa_assign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCsa_assign" ):
                listener.exitCsa_assign(self)




    def csa_assign(self):

        localctx = XplorMRParser.Csa_assignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 136, self.RULE_csa_assign)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1338
            self.match(XplorMRParser.Assign)
            self.state = 1339
            self.selection()
            self.state = 1340
            self.selection()
            self.state = 1341
            self.selection()
            self.state = 1342
            self.selection()
            self.state = 1343
            self.selection()
            self.state = 1344
            self.selection()
            self.state = 1345
            self.selection()
            self.state = 1346
            self.number()
            self.state = 1347
            self.number()
            self.state = 1348
            self.number()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pcsa_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def csa_assign(self):
            return self.getTypedRuleContext(XplorMRParser.Csa_assignContext,0)


        def Classification(self):
            return self.getToken(XplorMRParser.Classification, 0)

        def Simple_name(self):
            return self.getToken(XplorMRParser.Simple_name, 0)

        def Scale(self):
            return self.getToken(XplorMRParser.Scale, 0)

        def number_s(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Number_sContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Number_sContext,i)


        def Coefficients(self):
            return self.getToken(XplorMRParser.Coefficients, 0)

        def Sigma(self):
            return self.getToken(XplorMRParser.Sigma, 0)

        def ForceConstant(self):
            return self.getToken(XplorMRParser.ForceConstant, 0)

        def Nrestraints(self):
            return self.getToken(XplorMRParser.Nrestraints, 0)

        def Integer(self):
            return self.getToken(XplorMRParser.Integer, 0)

        def Potential(self):
            return self.getToken(XplorMRParser.Potential, 0)

        def Potential_types(self):
            return self.getToken(XplorMRParser.Potential_types, 0)

        def Print(self):
            return self.getToken(XplorMRParser.Print, 0)

        def Threshold(self):
            return self.getToken(XplorMRParser.Threshold, 0)

        def Reset(self):
            return self.getToken(XplorMRParser.Reset, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_pcsa_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPcsa_statement" ):
                listener.enterPcsa_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPcsa_statement" ):
                listener.exitPcsa_statement(self)




    def pcsa_statement(self):

        localctx = XplorMRParser.Pcsa_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 138, self.RULE_pcsa_statement)
        try:
            self.state = 1376
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [XplorMRParser.Assign]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1350
                self.csa_assign()
                pass
            elif token in [XplorMRParser.Classification]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1351
                self.match(XplorMRParser.Classification)
                self.state = 1352
                self.match(XplorMRParser.Simple_name)
                pass
            elif token in [XplorMRParser.Scale]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1353
                self.match(XplorMRParser.Scale)
                self.state = 1354
                self.number_s()
                pass
            elif token in [XplorMRParser.Coefficients]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1355
                self.match(XplorMRParser.Coefficients)
                self.state = 1356
                self.number_s()
                self.state = 1357
                self.number_s()
                self.state = 1358
                self.number_s()
                pass
            elif token in [XplorMRParser.Sigma]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1360
                self.match(XplorMRParser.Sigma)
                self.state = 1361
                self.number_s()
                self.state = 1362
                self.number_s()
                self.state = 1363
                self.number_s()
                self.state = 1364
                self.number_s()
                pass
            elif token in [XplorMRParser.ForceConstant]:
                self.enterOuterAlt(localctx, 6)
                self.state = 1366
                self.match(XplorMRParser.ForceConstant)
                self.state = 1367
                self.number_s()
                pass
            elif token in [XplorMRParser.Nrestraints]:
                self.enterOuterAlt(localctx, 7)
                self.state = 1368
                self.match(XplorMRParser.Nrestraints)
                self.state = 1369
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.Potential]:
                self.enterOuterAlt(localctx, 8)
                self.state = 1370
                self.match(XplorMRParser.Potential)
                self.state = 1371
                self.match(XplorMRParser.Potential_types)
                pass
            elif token in [XplorMRParser.Print]:
                self.enterOuterAlt(localctx, 9)
                self.state = 1372
                self.match(XplorMRParser.Print)
                self.state = 1373
                self.match(XplorMRParser.Threshold)
                self.state = 1374
                self.number_s()
                pass
            elif token in [XplorMRParser.Reset]:
                self.enterOuterAlt(localctx, 10)
                self.state = 1375
                self.match(XplorMRParser.Reset)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class One_bond_coupling_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def one_bond_assign(self):
            return self.getTypedRuleContext(XplorMRParser.One_bond_assignContext,0)


        def Classification(self):
            return self.getToken(XplorMRParser.Classification, 0)

        def Simple_name(self):
            return self.getToken(XplorMRParser.Simple_name, 0)

        def Coefficients(self):
            return self.getToken(XplorMRParser.Coefficients, 0)

        def number_s(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Number_sContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Number_sContext,i)


        def ForceConstant(self):
            return self.getToken(XplorMRParser.ForceConstant, 0)

        def Nrestraints(self):
            return self.getToken(XplorMRParser.Nrestraints, 0)

        def Integer(self):
            return self.getToken(XplorMRParser.Integer, 0)

        def Potential(self):
            return self.getToken(XplorMRParser.Potential, 0)

        def Potential_types(self):
            return self.getToken(XplorMRParser.Potential_types, 0)

        def Print(self):
            return self.getToken(XplorMRParser.Print, 0)

        def Threshold(self):
            return self.getToken(XplorMRParser.Threshold, 0)

        def Reset(self):
            return self.getToken(XplorMRParser.Reset, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_one_bond_coupling_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOne_bond_coupling_statement" ):
                listener.enterOne_bond_coupling_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOne_bond_coupling_statement" ):
                listener.exitOne_bond_coupling_statement(self)




    def one_bond_coupling_statement(self):

        localctx = XplorMRParser.One_bond_coupling_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 140, self.RULE_one_bond_coupling_statement)
        try:
            self.state = 1400
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [XplorMRParser.Assign]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1378
                self.one_bond_assign()
                pass
            elif token in [XplorMRParser.Classification]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1379
                self.match(XplorMRParser.Classification)
                self.state = 1380
                self.match(XplorMRParser.Simple_name)
                pass
            elif token in [XplorMRParser.Coefficients]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1381
                self.match(XplorMRParser.Coefficients)
                self.state = 1382
                self.number_s()
                self.state = 1383
                self.number_s()
                self.state = 1384
                self.number_s()
                self.state = 1385
                self.number_s()
                self.state = 1386
                self.number_s()
                self.state = 1387
                self.number_s()
                self.state = 1388
                self.number_s()
                pass
            elif token in [XplorMRParser.ForceConstant]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1390
                self.match(XplorMRParser.ForceConstant)
                self.state = 1391
                self.number_s()
                pass
            elif token in [XplorMRParser.Nrestraints]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1392
                self.match(XplorMRParser.Nrestraints)
                self.state = 1393
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.Potential]:
                self.enterOuterAlt(localctx, 6)
                self.state = 1394
                self.match(XplorMRParser.Potential)
                self.state = 1395
                self.match(XplorMRParser.Potential_types)
                pass
            elif token in [XplorMRParser.Print]:
                self.enterOuterAlt(localctx, 7)
                self.state = 1396
                self.match(XplorMRParser.Print)
                self.state = 1397
                self.match(XplorMRParser.Threshold)
                self.state = 1398
                self.number_s()
                pass
            elif token in [XplorMRParser.Reset]:
                self.enterOuterAlt(localctx, 8)
                self.state = 1399
                self.match(XplorMRParser.Reset)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class One_bond_assignContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Assign(self):
            return self.getToken(XplorMRParser.Assign, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.SelectionContext,i)


        def number(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.NumberContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.NumberContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_one_bond_assign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOne_bond_assign" ):
                listener.enterOne_bond_assign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOne_bond_assign" ):
                listener.exitOne_bond_assign(self)




    def one_bond_assign(self):

        localctx = XplorMRParser.One_bond_assignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 142, self.RULE_one_bond_assign)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1402
            self.match(XplorMRParser.Assign)
            self.state = 1403
            self.selection()
            self.state = 1404
            self.selection()
            self.state = 1405
            self.selection()
            self.state = 1406
            self.selection()
            self.state = 1407
            self.selection()
            self.state = 1408
            self.selection()
            self.state = 1409
            self.selection()
            self.state = 1410
            self.selection()
            self.state = 1411
            self.number()
            self.state = 1412
            self.number()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Angle_db_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def angle_db_assign(self):
            return self.getTypedRuleContext(XplorMRParser.Angle_db_assignContext,0)


        def Classification(self):
            return self.getToken(XplorMRParser.Classification, 0)

        def Simple_name(self):
            return self.getToken(XplorMRParser.Simple_name, 0)

        def DerivFlag(self):
            return self.getToken(XplorMRParser.DerivFlag, 0)

        def Expectation(self):
            return self.getToken(XplorMRParser.Expectation, 0)

        def Integer(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Integer)
            else:
                return self.getToken(XplorMRParser.Integer, i)

        def number_s(self):
            return self.getTypedRuleContext(XplorMRParser.Number_sContext,0)


        def Error(self):
            return self.getToken(XplorMRParser.Error, 0)

        def ForceConstant(self):
            return self.getToken(XplorMRParser.ForceConstant, 0)

        def Nrestraints(self):
            return self.getToken(XplorMRParser.Nrestraints, 0)

        def Potential(self):
            return self.getToken(XplorMRParser.Potential, 0)

        def Potential_types(self):
            return self.getToken(XplorMRParser.Potential_types, 0)

        def Print(self):
            return self.getToken(XplorMRParser.Print, 0)

        def Threshold(self):
            return self.getToken(XplorMRParser.Threshold, 0)

        def All(self):
            return self.getToken(XplorMRParser.All, 0)

        def Reset(self):
            return self.getToken(XplorMRParser.Reset, 0)

        def Size(self):
            return self.getToken(XplorMRParser.Size, 0)

        def Angle_or_Dihedral(self):
            return self.getToken(XplorMRParser.Angle_or_Dihedral, 0)

        def Zero(self):
            return self.getToken(XplorMRParser.Zero, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_angle_db_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAngle_db_statement" ):
                listener.enterAngle_db_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAngle_db_statement" ):
                listener.exitAngle_db_statement(self)




    def angle_db_statement(self):

        localctx = XplorMRParser.Angle_db_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 144, self.RULE_angle_db_statement)
        try:
            self.state = 1445
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [XplorMRParser.Assign]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1414
                self.angle_db_assign()
                pass
            elif token in [XplorMRParser.Classification]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1415
                self.match(XplorMRParser.Classification)
                self.state = 1416
                self.match(XplorMRParser.Simple_name)
                pass
            elif token in [XplorMRParser.DerivFlag]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1417
                self.match(XplorMRParser.DerivFlag)
                self.state = 1418
                self.match(XplorMRParser.Simple_name)
                pass
            elif token in [XplorMRParser.Expectation]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1419
                self.match(XplorMRParser.Expectation)
                self.state = 1420
                self.match(XplorMRParser.Integer)
                self.state = 1421
                self.match(XplorMRParser.Integer)
                self.state = 1422
                self.number_s()
                pass
            elif token in [XplorMRParser.Error]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1423
                self.match(XplorMRParser.Error)
                self.state = 1424
                self.number_s()
                pass
            elif token in [XplorMRParser.ForceConstant]:
                self.enterOuterAlt(localctx, 6)
                self.state = 1425
                self.match(XplorMRParser.ForceConstant)
                self.state = 1426
                self.number_s()
                pass
            elif token in [XplorMRParser.Nrestraints]:
                self.enterOuterAlt(localctx, 7)
                self.state = 1427
                self.match(XplorMRParser.Nrestraints)
                self.state = 1428
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.Potential]:
                self.enterOuterAlt(localctx, 8)
                self.state = 1429
                self.match(XplorMRParser.Potential)
                self.state = 1430
                self.match(XplorMRParser.Potential_types)
                pass
            elif token in [XplorMRParser.Print]:
                self.enterOuterAlt(localctx, 9)
                self.state = 1431
                self.match(XplorMRParser.Print)
                self.state = 1432
                self.match(XplorMRParser.Threshold)
                self.state = 1433
                self.number_s()
                self.state = 1437
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [XplorMRParser.All]:
                    self.state = 1434
                    self.match(XplorMRParser.All)
                    pass
                elif token in [XplorMRParser.Classification]:
                    self.state = 1435
                    self.match(XplorMRParser.Classification)
                    self.state = 1436
                    self.match(XplorMRParser.Simple_name)
                    pass
                else:
                    raise NoViableAltException(self)

                pass
            elif token in [XplorMRParser.Reset]:
                self.enterOuterAlt(localctx, 10)
                self.state = 1439
                self.match(XplorMRParser.Reset)
                pass
            elif token in [XplorMRParser.Size]:
                self.enterOuterAlt(localctx, 11)
                self.state = 1440
                self.match(XplorMRParser.Size)
                self.state = 1441
                self.match(XplorMRParser.Angle_or_Dihedral)
                self.state = 1442
                self.match(XplorMRParser.Integer)
                self.state = 1443
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.Zero]:
                self.enterOuterAlt(localctx, 12)
                self.state = 1444
                self.match(XplorMRParser.Zero)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Angle_db_assignContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Assign(self):
            return self.getToken(XplorMRParser.Assign, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.SelectionContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_angle_db_assign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAngle_db_assign" ):
                listener.enterAngle_db_assign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAngle_db_assign" ):
                listener.exitAngle_db_assign(self)




    def angle_db_assign(self):

        localctx = XplorMRParser.Angle_db_assignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 146, self.RULE_angle_db_assign)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1447
            self.match(XplorMRParser.Assign)
            self.state = 1448
            self.selection()
            self.state = 1449
            self.selection()
            self.state = 1450
            self.selection()
            self.state = 1451
            self.selection()
            self.state = 1452
            self.selection()
            self.state = 1453
            self.selection()
            self.state = 1454
            self.selection()
            self.state = 1455
            self.selection()
            self.state = 1456
            self.selection()
            self.state = 1457
            self.selection()
            self.state = 1458
            self.selection()
            self.state = 1460
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==XplorMRParser.L_paren:
                self.state = 1459
                self.selection()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pre_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def pre_assign(self):
            return self.getTypedRuleContext(XplorMRParser.Pre_assignContext,0)


        def Classification(self):
            return self.getToken(XplorMRParser.Classification, 0)

        def Simple_name(self):
            return self.getToken(XplorMRParser.Simple_name, 0)

        def Equ_op(self):
            return self.getToken(XplorMRParser.Equ_op, 0)

        def ForceConstant(self):
            return self.getToken(XplorMRParser.ForceConstant, 0)

        def number_s(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Number_sContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Number_sContext,i)


        def Nrestraints(self):
            return self.getToken(XplorMRParser.Nrestraints, 0)

        def Integer(self):
            return self.getToken(XplorMRParser.Integer, 0)

        def Potential(self):
            return self.getToken(XplorMRParser.Potential, 0)

        def Simple_name_P(self):
            return self.getToken(XplorMRParser.Simple_name_P, 0)

        def Potential_types(self):
            return self.getToken(XplorMRParser.Potential_types, 0)

        def Equ_op_P(self):
            return self.getToken(XplorMRParser.Equ_op_P, 0)

        def Kconst(self):
            return self.getToken(XplorMRParser.Kconst, 0)

        def Omega(self):
            return self.getToken(XplorMRParser.Omega, 0)

        def Tauc(self):
            return self.getToken(XplorMRParser.Tauc, 0)

        def Print(self):
            return self.getToken(XplorMRParser.Print, 0)

        def Threshold(self):
            return self.getToken(XplorMRParser.Threshold, 0)

        def All(self):
            return self.getToken(XplorMRParser.All, 0)

        def Reset(self):
            return self.getToken(XplorMRParser.Reset, 0)

        def Debug(self):
            return self.getToken(XplorMRParser.Debug, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_pre_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPre_statement" ):
                listener.enterPre_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPre_statement" ):
                listener.exitPre_statement(self)




    def pre_statement(self):

        localctx = XplorMRParser.Pre_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 148, self.RULE_pre_statement)
        self._la = 0 # Token type
        try:
            self.state = 1515
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [XplorMRParser.Assign]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1462
                self.pre_assign()
                pass
            elif token in [XplorMRParser.Classification]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1463
                self.match(XplorMRParser.Classification)
                self.state = 1465
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 1464
                    self.match(XplorMRParser.Equ_op)


                self.state = 1467
                self.match(XplorMRParser.Simple_name)
                pass
            elif token in [XplorMRParser.ForceConstant]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1468
                self.match(XplorMRParser.ForceConstant)
                self.state = 1470
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 1469
                    self.match(XplorMRParser.Equ_op)


                self.state = 1472
                self.match(XplorMRParser.Simple_name)
                self.state = 1473
                self.number_s()
                pass
            elif token in [XplorMRParser.Nrestraints]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1474
                self.match(XplorMRParser.Nrestraints)
                self.state = 1476
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 1475
                    self.match(XplorMRParser.Equ_op)


                self.state = 1478
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.Potential]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1479
                self.match(XplorMRParser.Potential)
                self.state = 1481
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op_P:
                    self.state = 1480
                    self.match(XplorMRParser.Equ_op_P)


                self.state = 1483
                self.match(XplorMRParser.Simple_name_P)
                self.state = 1484
                self.match(XplorMRParser.Potential_types)
                pass
            elif token in [XplorMRParser.Kconst]:
                self.enterOuterAlt(localctx, 6)
                self.state = 1485
                self.match(XplorMRParser.Kconst)
                self.state = 1487
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 1486
                    self.match(XplorMRParser.Equ_op)


                self.state = 1489
                self.match(XplorMRParser.Simple_name)
                self.state = 1490
                self.number_s()
                pass
            elif token in [XplorMRParser.Omega]:
                self.enterOuterAlt(localctx, 7)
                self.state = 1491
                self.match(XplorMRParser.Omega)
                self.state = 1493
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 1492
                    self.match(XplorMRParser.Equ_op)


                self.state = 1495
                self.match(XplorMRParser.Simple_name)
                self.state = 1496
                self.number_s()
                pass
            elif token in [XplorMRParser.Tauc]:
                self.enterOuterAlt(localctx, 8)
                self.state = 1497
                self.match(XplorMRParser.Tauc)
                self.state = 1499
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 1498
                    self.match(XplorMRParser.Equ_op)


                self.state = 1501
                self.match(XplorMRParser.Simple_name)
                self.state = 1502
                self.number_s()
                self.state = 1503
                self.number_s()
                pass
            elif token in [XplorMRParser.Print]:
                self.enterOuterAlt(localctx, 9)
                self.state = 1505
                self.match(XplorMRParser.Print)
                self.state = 1506
                self.match(XplorMRParser.Threshold)
                self.state = 1507
                self.number_s()
                self.state = 1511
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [XplorMRParser.All]:
                    self.state = 1508
                    self.match(XplorMRParser.All)
                    pass
                elif token in [XplorMRParser.Classification]:
                    self.state = 1509
                    self.match(XplorMRParser.Classification)
                    self.state = 1510
                    self.match(XplorMRParser.Simple_name)
                    pass
                else:
                    raise NoViableAltException(self)

                pass
            elif token in [XplorMRParser.Reset]:
                self.enterOuterAlt(localctx, 10)
                self.state = 1513
                self.match(XplorMRParser.Reset)
                pass
            elif token in [XplorMRParser.Debug]:
                self.enterOuterAlt(localctx, 11)
                self.state = 1514
                self.match(XplorMRParser.Debug)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pre_assignContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Assign(self):
            return self.getToken(XplorMRParser.Assign, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.SelectionContext,i)


        def number(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.NumberContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.NumberContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_pre_assign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPre_assign" ):
                listener.enterPre_assign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPre_assign" ):
                listener.exitPre_assign(self)




    def pre_assign(self):

        localctx = XplorMRParser.Pre_assignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 150, self.RULE_pre_assign)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1517
            self.match(XplorMRParser.Assign)
            self.state = 1518
            self.selection()
            self.state = 1519
            self.selection()
            self.state = 1520
            self.number()
            self.state = 1521
            self.number()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pcs_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def pcs_assign(self):
            return self.getTypedRuleContext(XplorMRParser.Pcs_assignContext,0)


        def Classification(self):
            return self.getToken(XplorMRParser.Classification, 0)

        def Simple_name(self):
            return self.getToken(XplorMRParser.Simple_name, 0)

        def Tolerance(self):
            return self.getToken(XplorMRParser.Tolerance, 0)

        def Integer(self):
            return self.getToken(XplorMRParser.Integer, 0)

        def Coefficients(self):
            return self.getToken(XplorMRParser.Coefficients, 0)

        def number_s(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Number_sContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Number_sContext,i)


        def ForceConstant(self):
            return self.getToken(XplorMRParser.ForceConstant, 0)

        def Nrestraints(self):
            return self.getToken(XplorMRParser.Nrestraints, 0)

        def Print(self):
            return self.getToken(XplorMRParser.Print, 0)

        def Threshold(self):
            return self.getToken(XplorMRParser.Threshold, 0)

        def All(self):
            return self.getToken(XplorMRParser.All, 0)

        def Reset(self):
            return self.getToken(XplorMRParser.Reset, 0)

        def Save(self):
            return self.getToken(XplorMRParser.Save, 0)

        def Fmed(self):
            return self.getToken(XplorMRParser.Fmed, 0)

        def ErrOn(self):
            return self.getToken(XplorMRParser.ErrOn, 0)

        def ErrOff(self):
            return self.getToken(XplorMRParser.ErrOff, 0)

        def Fon(self):
            return self.getToken(XplorMRParser.Fon, 0)

        def Foff(self):
            return self.getToken(XplorMRParser.Foff, 0)

        def Son(self):
            return self.getToken(XplorMRParser.Son, 0)

        def Soff(self):
            return self.getToken(XplorMRParser.Soff, 0)

        def Frun(self):
            return self.getToken(XplorMRParser.Frun, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_pcs_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPcs_statement" ):
                listener.enterPcs_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPcs_statement" ):
                listener.exitPcs_statement(self)




    def pcs_statement(self):

        localctx = XplorMRParser.Pcs_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 152, self.RULE_pcs_statement)
        try:
            self.state = 1559
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [XplorMRParser.Assign]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1523
                self.pcs_assign()
                pass
            elif token in [XplorMRParser.Classification]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1524
                self.match(XplorMRParser.Classification)
                self.state = 1525
                self.match(XplorMRParser.Simple_name)
                pass
            elif token in [XplorMRParser.Tolerance]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1526
                self.match(XplorMRParser.Tolerance)
                self.state = 1527
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.Coefficients]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1528
                self.match(XplorMRParser.Coefficients)
                self.state = 1529
                self.number_s()
                self.state = 1530
                self.number_s()
                pass
            elif token in [XplorMRParser.ForceConstant]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1532
                self.match(XplorMRParser.ForceConstant)
                self.state = 1533
                self.number_s()
                pass
            elif token in [XplorMRParser.Nrestraints]:
                self.enterOuterAlt(localctx, 6)
                self.state = 1534
                self.match(XplorMRParser.Nrestraints)
                self.state = 1535
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.Print]:
                self.enterOuterAlt(localctx, 7)
                self.state = 1536
                self.match(XplorMRParser.Print)
                self.state = 1537
                self.match(XplorMRParser.Threshold)
                self.state = 1538
                self.number_s()
                self.state = 1542
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [XplorMRParser.All]:
                    self.state = 1539
                    self.match(XplorMRParser.All)
                    pass
                elif token in [XplorMRParser.Classification]:
                    self.state = 1540
                    self.match(XplorMRParser.Classification)
                    self.state = 1541
                    self.match(XplorMRParser.Simple_name)
                    pass
                else:
                    raise NoViableAltException(self)

                pass
            elif token in [XplorMRParser.Reset]:
                self.enterOuterAlt(localctx, 8)
                self.state = 1544
                self.match(XplorMRParser.Reset)
                pass
            elif token in [XplorMRParser.Save]:
                self.enterOuterAlt(localctx, 9)
                self.state = 1545
                self.match(XplorMRParser.Save)
                self.state = 1546
                self.match(XplorMRParser.Simple_name)
                pass
            elif token in [XplorMRParser.Fmed]:
                self.enterOuterAlt(localctx, 10)
                self.state = 1547
                self.match(XplorMRParser.Fmed)
                self.state = 1548
                self.number_s()
                self.state = 1549
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.ErrOn]:
                self.enterOuterAlt(localctx, 11)
                self.state = 1551
                self.match(XplorMRParser.ErrOn)
                pass
            elif token in [XplorMRParser.ErrOff]:
                self.enterOuterAlt(localctx, 12)
                self.state = 1552
                self.match(XplorMRParser.ErrOff)
                pass
            elif token in [XplorMRParser.Fon]:
                self.enterOuterAlt(localctx, 13)
                self.state = 1553
                self.match(XplorMRParser.Fon)
                pass
            elif token in [XplorMRParser.Foff]:
                self.enterOuterAlt(localctx, 14)
                self.state = 1554
                self.match(XplorMRParser.Foff)
                pass
            elif token in [XplorMRParser.Son]:
                self.enterOuterAlt(localctx, 15)
                self.state = 1555
                self.match(XplorMRParser.Son)
                pass
            elif token in [XplorMRParser.Soff]:
                self.enterOuterAlt(localctx, 16)
                self.state = 1556
                self.match(XplorMRParser.Soff)
                pass
            elif token in [XplorMRParser.Frun]:
                self.enterOuterAlt(localctx, 17)
                self.state = 1557
                self.match(XplorMRParser.Frun)
                self.state = 1558
                self.match(XplorMRParser.Integer)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pcs_assignContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Assign(self):
            return self.getToken(XplorMRParser.Assign, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.SelectionContext,i)


        def number(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.NumberContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.NumberContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_pcs_assign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPcs_assign" ):
                listener.enterPcs_assign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPcs_assign" ):
                listener.exitPcs_assign(self)




    def pcs_assign(self):

        localctx = XplorMRParser.Pcs_assignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 154, self.RULE_pcs_assign)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1561
            self.match(XplorMRParser.Assign)
            self.state = 1562
            self.selection()
            self.state = 1563
            self.selection()
            self.state = 1564
            self.selection()
            self.state = 1565
            self.selection()
            self.state = 1566
            self.selection()
            self.state = 1567
            self.number()
            self.state = 1568
            self.number()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Prdc_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def prdc_assign(self):
            return self.getTypedRuleContext(XplorMRParser.Prdc_assignContext,0)


        def Classification(self):
            return self.getToken(XplorMRParser.Classification, 0)

        def Simple_name(self):
            return self.getToken(XplorMRParser.Simple_name, 0)

        def Tolerance(self):
            return self.getToken(XplorMRParser.Tolerance, 0)

        def Integer(self):
            return self.getToken(XplorMRParser.Integer, 0)

        def Coefficients(self):
            return self.getToken(XplorMRParser.Coefficients, 0)

        def number_s(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Number_sContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Number_sContext,i)


        def ForceConstant(self):
            return self.getToken(XplorMRParser.ForceConstant, 0)

        def Nrestraints(self):
            return self.getToken(XplorMRParser.Nrestraints, 0)

        def ErrOn(self):
            return self.getToken(XplorMRParser.ErrOn, 0)

        def ErrOff(self):
            return self.getToken(XplorMRParser.ErrOff, 0)

        def Fmed(self):
            return self.getToken(XplorMRParser.Fmed, 0)

        def Fon(self):
            return self.getToken(XplorMRParser.Fon, 0)

        def Foff(self):
            return self.getToken(XplorMRParser.Foff, 0)

        def Frun(self):
            return self.getToken(XplorMRParser.Frun, 0)

        def Print(self):
            return self.getToken(XplorMRParser.Print, 0)

        def Threshold(self):
            return self.getToken(XplorMRParser.Threshold, 0)

        def Reset(self):
            return self.getToken(XplorMRParser.Reset, 0)

        def Save(self):
            return self.getToken(XplorMRParser.Save, 0)

        def Son(self):
            return self.getToken(XplorMRParser.Son, 0)

        def Soff(self):
            return self.getToken(XplorMRParser.Soff, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_prdc_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrdc_statement" ):
                listener.enterPrdc_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrdc_statement" ):
                listener.exitPrdc_statement(self)




    def prdc_statement(self):

        localctx = XplorMRParser.Prdc_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 156, self.RULE_prdc_statement)
        try:
            self.state = 1596
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [XplorMRParser.Assign]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1570
                self.prdc_assign()
                pass
            elif token in [XplorMRParser.Classification]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1571
                self.match(XplorMRParser.Classification)
                self.state = 1572
                self.match(XplorMRParser.Simple_name)
                pass
            elif token in [XplorMRParser.Tolerance]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1573
                self.match(XplorMRParser.Tolerance)
                self.state = 1574
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.Coefficients]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1575
                self.match(XplorMRParser.Coefficients)
                self.state = 1576
                self.number_s()
                self.state = 1577
                self.number_s()
                pass
            elif token in [XplorMRParser.ForceConstant]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1579
                self.match(XplorMRParser.ForceConstant)
                self.state = 1580
                self.number_s()
                pass
            elif token in [XplorMRParser.Nrestraints]:
                self.enterOuterAlt(localctx, 6)
                self.state = 1581
                self.match(XplorMRParser.Nrestraints)
                self.state = 1582
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.ErrOn]:
                self.enterOuterAlt(localctx, 7)
                self.state = 1583
                self.match(XplorMRParser.ErrOn)
                pass
            elif token in [XplorMRParser.ErrOff]:
                self.enterOuterAlt(localctx, 8)
                self.state = 1584
                self.match(XplorMRParser.ErrOff)
                pass
            elif token in [XplorMRParser.Fmed]:
                self.enterOuterAlt(localctx, 9)
                self.state = 1585
                self.match(XplorMRParser.Fmed)
                pass
            elif token in [XplorMRParser.Fon]:
                self.enterOuterAlt(localctx, 10)
                self.state = 1586
                self.match(XplorMRParser.Fon)
                pass
            elif token in [XplorMRParser.Foff]:
                self.enterOuterAlt(localctx, 11)
                self.state = 1587
                self.match(XplorMRParser.Foff)
                pass
            elif token in [XplorMRParser.Frun]:
                self.enterOuterAlt(localctx, 12)
                self.state = 1588
                self.match(XplorMRParser.Frun)
                pass
            elif token in [XplorMRParser.Print]:
                self.enterOuterAlt(localctx, 13)
                self.state = 1589
                self.match(XplorMRParser.Print)
                self.state = 1590
                self.match(XplorMRParser.Threshold)
                pass
            elif token in [XplorMRParser.Reset]:
                self.enterOuterAlt(localctx, 14)
                self.state = 1591
                self.match(XplorMRParser.Reset)
                pass
            elif token in [XplorMRParser.Save]:
                self.enterOuterAlt(localctx, 15)
                self.state = 1592
                self.match(XplorMRParser.Save)
                self.state = 1593
                self.match(XplorMRParser.Simple_name)
                pass
            elif token in [XplorMRParser.Son]:
                self.enterOuterAlt(localctx, 16)
                self.state = 1594
                self.match(XplorMRParser.Son)
                pass
            elif token in [XplorMRParser.Soff]:
                self.enterOuterAlt(localctx, 17)
                self.state = 1595
                self.match(XplorMRParser.Soff)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Prdc_assignContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Assign(self):
            return self.getToken(XplorMRParser.Assign, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.SelectionContext,i)


        def number(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.NumberContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.NumberContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_prdc_assign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrdc_assign" ):
                listener.enterPrdc_assign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrdc_assign" ):
                listener.exitPrdc_assign(self)




    def prdc_assign(self):

        localctx = XplorMRParser.Prdc_assignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 158, self.RULE_prdc_assign)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1598
            self.match(XplorMRParser.Assign)
            self.state = 1599
            self.selection()
            self.state = 1600
            self.selection()
            self.state = 1601
            self.selection()
            self.state = 1602
            self.selection()
            self.state = 1603
            self.selection()
            self.state = 1604
            self.selection()
            self.state = 1605
            self.number()
            self.state = 1606
            self.number()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Porientation_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def porientation_assign(self):
            return self.getTypedRuleContext(XplorMRParser.Porientation_assignContext,0)


        def Classification(self):
            return self.getToken(XplorMRParser.Classification, 0)

        def Simple_name(self):
            return self.getToken(XplorMRParser.Simple_name, 0)

        def ForceConstant(self):
            return self.getToken(XplorMRParser.ForceConstant, 0)

        def number_s(self):
            return self.getTypedRuleContext(XplorMRParser.Number_sContext,0)


        def Nrestraints(self):
            return self.getToken(XplorMRParser.Nrestraints, 0)

        def Integer(self):
            return self.getToken(XplorMRParser.Integer, 0)

        def Print(self):
            return self.getToken(XplorMRParser.Print, 0)

        def Threshold(self):
            return self.getToken(XplorMRParser.Threshold, 0)

        def Reset(self):
            return self.getToken(XplorMRParser.Reset, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_porientation_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPorientation_statement" ):
                listener.enterPorientation_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPorientation_statement" ):
                listener.exitPorientation_statement(self)




    def porientation_statement(self):

        localctx = XplorMRParser.Porientation_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 160, self.RULE_porientation_statement)
        try:
            self.state = 1619
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [XplorMRParser.Assign]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1608
                self.porientation_assign()
                pass
            elif token in [XplorMRParser.Classification]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1609
                self.match(XplorMRParser.Classification)
                self.state = 1610
                self.match(XplorMRParser.Simple_name)
                pass
            elif token in [XplorMRParser.ForceConstant]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1611
                self.match(XplorMRParser.ForceConstant)
                self.state = 1612
                self.number_s()
                pass
            elif token in [XplorMRParser.Nrestraints]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1613
                self.match(XplorMRParser.Nrestraints)
                self.state = 1614
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.Print]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1615
                self.match(XplorMRParser.Print)
                self.state = 1616
                self.match(XplorMRParser.Threshold)
                self.state = 1617
                self.number_s()
                pass
            elif token in [XplorMRParser.Reset]:
                self.enterOuterAlt(localctx, 6)
                self.state = 1618
                self.match(XplorMRParser.Reset)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Porientation_assignContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Assign(self):
            return self.getToken(XplorMRParser.Assign, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.SelectionContext,i)


        def number(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.NumberContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.NumberContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_porientation_assign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPorientation_assign" ):
                listener.enterPorientation_assign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPorientation_assign" ):
                listener.exitPorientation_assign(self)




    def porientation_assign(self):

        localctx = XplorMRParser.Porientation_assignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 162, self.RULE_porientation_assign)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1621
            self.match(XplorMRParser.Assign)
            self.state = 1622
            self.selection()
            self.state = 1623
            self.selection()
            self.state = 1624
            self.number()
            self.state = 1625
            self.number()
            self.state = 1626
            self.number()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pccr_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def pccr_assign(self):
            return self.getTypedRuleContext(XplorMRParser.Pccr_assignContext,0)


        def Classification(self):
            return self.getToken(XplorMRParser.Classification, 0)

        def Simple_name(self):
            return self.getToken(XplorMRParser.Simple_name, 0)

        def Weip(self):
            return self.getToken(XplorMRParser.Weip, 0)

        def Integer(self):
            return self.getToken(XplorMRParser.Integer, 0)

        def Coefficients(self):
            return self.getToken(XplorMRParser.Coefficients, 0)

        def number_s(self):
            return self.getTypedRuleContext(XplorMRParser.Number_sContext,0)


        def ForceConstant(self):
            return self.getToken(XplorMRParser.ForceConstant, 0)

        def Nrestraints(self):
            return self.getToken(XplorMRParser.Nrestraints, 0)

        def Print(self):
            return self.getToken(XplorMRParser.Print, 0)

        def Threshold(self):
            return self.getToken(XplorMRParser.Threshold, 0)

        def Reset(self):
            return self.getToken(XplorMRParser.Reset, 0)

        def Frun(self):
            return self.getToken(XplorMRParser.Frun, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_pccr_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPccr_statement" ):
                listener.enterPccr_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPccr_statement" ):
                listener.exitPccr_statement(self)




    def pccr_statement(self):

        localctx = XplorMRParser.Pccr_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 164, self.RULE_pccr_statement)
        try:
            self.state = 1645
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [XplorMRParser.Assign]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1628
                self.pccr_assign()
                pass
            elif token in [XplorMRParser.Classification]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1629
                self.match(XplorMRParser.Classification)
                self.state = 1630
                self.match(XplorMRParser.Simple_name)
                pass
            elif token in [XplorMRParser.Weip]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1631
                self.match(XplorMRParser.Weip)
                self.state = 1632
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.Coefficients]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1633
                self.match(XplorMRParser.Coefficients)
                self.state = 1634
                self.number_s()
                pass
            elif token in [XplorMRParser.ForceConstant]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1635
                self.match(XplorMRParser.ForceConstant)
                self.state = 1636
                self.number_s()
                pass
            elif token in [XplorMRParser.Nrestraints]:
                self.enterOuterAlt(localctx, 6)
                self.state = 1637
                self.match(XplorMRParser.Nrestraints)
                self.state = 1638
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.Print]:
                self.enterOuterAlt(localctx, 7)
                self.state = 1639
                self.match(XplorMRParser.Print)
                self.state = 1640
                self.match(XplorMRParser.Threshold)
                self.state = 1641
                self.number_s()
                pass
            elif token in [XplorMRParser.Reset]:
                self.enterOuterAlt(localctx, 8)
                self.state = 1642
                self.match(XplorMRParser.Reset)
                pass
            elif token in [XplorMRParser.Frun]:
                self.enterOuterAlt(localctx, 9)
                self.state = 1643
                self.match(XplorMRParser.Frun)
                self.state = 1644
                self.match(XplorMRParser.Integer)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pccr_assignContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Assign(self):
            return self.getToken(XplorMRParser.Assign, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.SelectionContext,i)


        def number(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.NumberContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.NumberContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_pccr_assign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPccr_assign" ):
                listener.enterPccr_assign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPccr_assign" ):
                listener.exitPccr_assign(self)




    def pccr_assign(self):

        localctx = XplorMRParser.Pccr_assignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 166, self.RULE_pccr_assign)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1647
            self.match(XplorMRParser.Assign)
            self.state = 1648
            self.selection()
            self.state = 1649
            self.selection()
            self.state = 1650
            self.selection()
            self.state = 1651
            self.number()
            self.state = 1652
            self.number()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Hbond_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def hbond_assign(self):
            return self.getTypedRuleContext(XplorMRParser.Hbond_assignContext,0)


        def Classification(self):
            return self.getToken(XplorMRParser.Classification, 0)

        def Simple_name(self):
            return self.getToken(XplorMRParser.Simple_name, 0)

        def ForceConstant(self):
            return self.getToken(XplorMRParser.ForceConstant, 0)

        def number_s(self):
            return self.getTypedRuleContext(XplorMRParser.Number_sContext,0)


        def Nrestraints(self):
            return self.getToken(XplorMRParser.Nrestraints, 0)

        def Integer(self):
            return self.getToken(XplorMRParser.Integer, 0)

        def Print(self):
            return self.getToken(XplorMRParser.Print, 0)

        def Threshold(self):
            return self.getToken(XplorMRParser.Threshold, 0)

        def Reset(self):
            return self.getToken(XplorMRParser.Reset, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_hbond_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHbond_statement" ):
                listener.enterHbond_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHbond_statement" ):
                listener.exitHbond_statement(self)




    def hbond_statement(self):

        localctx = XplorMRParser.Hbond_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 168, self.RULE_hbond_statement)
        try:
            self.state = 1665
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [XplorMRParser.Assign]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1654
                self.hbond_assign()
                pass
            elif token in [XplorMRParser.Classification]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1655
                self.match(XplorMRParser.Classification)
                self.state = 1656
                self.match(XplorMRParser.Simple_name)
                pass
            elif token in [XplorMRParser.ForceConstant]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1657
                self.match(XplorMRParser.ForceConstant)
                self.state = 1658
                self.number_s()
                pass
            elif token in [XplorMRParser.Nrestraints]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1659
                self.match(XplorMRParser.Nrestraints)
                self.state = 1660
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.Print]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1661
                self.match(XplorMRParser.Print)
                self.state = 1662
                self.match(XplorMRParser.Threshold)
                self.state = 1663
                self.number_s()
                pass
            elif token in [XplorMRParser.Reset]:
                self.enterOuterAlt(localctx, 6)
                self.state = 1664
                self.match(XplorMRParser.Reset)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Hbond_assignContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Assign(self):
            return self.getToken(XplorMRParser.Assign, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.SelectionContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_hbond_assign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHbond_assign" ):
                listener.enterHbond_assign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHbond_assign" ):
                listener.exitHbond_assign(self)




    def hbond_assign(self):

        localctx = XplorMRParser.Hbond_assignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 170, self.RULE_hbond_assign)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1667
            self.match(XplorMRParser.Assign)
            self.state = 1668
            self.selection()
            self.state = 1669
            self.selection()
            self.state = 1670
            self.selection()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Hbond_db_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def hbond_db_assign(self):
            return self.getTypedRuleContext(XplorMRParser.Hbond_db_assignContext,0)


        def Kdir(self):
            return self.getToken(XplorMRParser.Kdir, 0)

        def number_s(self):
            return self.getTypedRuleContext(XplorMRParser.Number_sContext,0)


        def Equ_op(self):
            return self.getToken(XplorMRParser.Equ_op, 0)

        def Klin(self):
            return self.getToken(XplorMRParser.Klin, 0)

        def Nseg(self):
            return self.getToken(XplorMRParser.Nseg, 0)

        def Integer(self):
            return self.getToken(XplorMRParser.Integer, 0)

        def Nmin(self):
            return self.getToken(XplorMRParser.Nmin, 0)

        def Nmax(self):
            return self.getToken(XplorMRParser.Nmax, 0)

        def Segm(self):
            return self.getToken(XplorMRParser.Segm, 0)

        def Simple_name(self):
            return self.getToken(XplorMRParser.Simple_name, 0)

        def Ohcut(self):
            return self.getToken(XplorMRParser.Ohcut, 0)

        def Coh1cut(self):
            return self.getToken(XplorMRParser.Coh1cut, 0)

        def Coh2cut(self):
            return self.getToken(XplorMRParser.Coh2cut, 0)

        def Ohncut(self):
            return self.getToken(XplorMRParser.Ohncut, 0)

        def Updfrq(self):
            return self.getToken(XplorMRParser.Updfrq, 0)

        def Prnfrq(self):
            return self.getToken(XplorMRParser.Prnfrq, 0)

        def Freemode(self):
            return self.getToken(XplorMRParser.Freemode, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_hbond_db_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHbond_db_statement" ):
                listener.enterHbond_db_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHbond_db_statement" ):
                listener.exitHbond_db_statement(self)




    def hbond_db_statement(self):

        localctx = XplorMRParser.Hbond_db_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 172, self.RULE_hbond_db_statement)
        self._la = 0 # Token type
        try:
            self.state = 1738
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [XplorMRParser.Assign]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1672
                self.hbond_db_assign()
                pass
            elif token in [XplorMRParser.Kdir]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1673
                self.match(XplorMRParser.Kdir)
                self.state = 1675
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 1674
                    self.match(XplorMRParser.Equ_op)


                self.state = 1677
                self.number_s()
                pass
            elif token in [XplorMRParser.Klin]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1678
                self.match(XplorMRParser.Klin)
                self.state = 1680
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 1679
                    self.match(XplorMRParser.Equ_op)


                self.state = 1682
                self.number_s()
                pass
            elif token in [XplorMRParser.Nseg]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1683
                self.match(XplorMRParser.Nseg)
                self.state = 1685
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 1684
                    self.match(XplorMRParser.Equ_op)


                self.state = 1687
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.Nmin]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1688
                self.match(XplorMRParser.Nmin)
                self.state = 1690
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 1689
                    self.match(XplorMRParser.Equ_op)


                self.state = 1692
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.Nmax]:
                self.enterOuterAlt(localctx, 6)
                self.state = 1693
                self.match(XplorMRParser.Nmax)
                self.state = 1695
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 1694
                    self.match(XplorMRParser.Equ_op)


                self.state = 1697
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.Segm]:
                self.enterOuterAlt(localctx, 7)
                self.state = 1698
                self.match(XplorMRParser.Segm)
                self.state = 1700
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 1699
                    self.match(XplorMRParser.Equ_op)


                self.state = 1702
                self.match(XplorMRParser.Simple_name)
                pass
            elif token in [XplorMRParser.Ohcut]:
                self.enterOuterAlt(localctx, 8)
                self.state = 1703
                self.match(XplorMRParser.Ohcut)
                self.state = 1705
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 1704
                    self.match(XplorMRParser.Equ_op)


                self.state = 1707
                self.number_s()
                pass
            elif token in [XplorMRParser.Coh1cut]:
                self.enterOuterAlt(localctx, 9)
                self.state = 1708
                self.match(XplorMRParser.Coh1cut)
                self.state = 1710
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 1709
                    self.match(XplorMRParser.Equ_op)


                self.state = 1712
                self.number_s()
                pass
            elif token in [XplorMRParser.Coh2cut]:
                self.enterOuterAlt(localctx, 10)
                self.state = 1713
                self.match(XplorMRParser.Coh2cut)
                self.state = 1715
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 1714
                    self.match(XplorMRParser.Equ_op)


                self.state = 1717
                self.number_s()
                pass
            elif token in [XplorMRParser.Ohncut]:
                self.enterOuterAlt(localctx, 11)
                self.state = 1718
                self.match(XplorMRParser.Ohncut)
                self.state = 1720
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 1719
                    self.match(XplorMRParser.Equ_op)


                self.state = 1722
                self.number_s()
                pass
            elif token in [XplorMRParser.Updfrq]:
                self.enterOuterAlt(localctx, 12)
                self.state = 1723
                self.match(XplorMRParser.Updfrq)
                self.state = 1725
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 1724
                    self.match(XplorMRParser.Equ_op)


                self.state = 1727
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.Prnfrq]:
                self.enterOuterAlt(localctx, 13)
                self.state = 1728
                self.match(XplorMRParser.Prnfrq)
                self.state = 1730
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 1729
                    self.match(XplorMRParser.Equ_op)


                self.state = 1732
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.Freemode]:
                self.enterOuterAlt(localctx, 14)
                self.state = 1733
                self.match(XplorMRParser.Freemode)
                self.state = 1735
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 1734
                    self.match(XplorMRParser.Equ_op)


                self.state = 1737
                self.match(XplorMRParser.Integer)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Hbond_db_assignContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Assign(self):
            return self.getToken(XplorMRParser.Assign, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.SelectionContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_hbond_db_assign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHbond_db_assign" ):
                listener.enterHbond_db_assign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHbond_db_assign" ):
                listener.exitHbond_db_assign(self)




    def hbond_db_assign(self):

        localctx = XplorMRParser.Hbond_db_assignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 174, self.RULE_hbond_db_assign)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1740
            self.match(XplorMRParser.Assign)
            self.state = 1741
            self.selection()
            self.state = 1742
            self.selection()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SelectionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def L_paren(self):
            return self.getToken(XplorMRParser.L_paren, 0)

        def selection_expression(self):
            return self.getTypedRuleContext(XplorMRParser.Selection_expressionContext,0)


        def R_paren(self):
            return self.getToken(XplorMRParser.R_paren, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_selection

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSelection" ):
                listener.enterSelection(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSelection" ):
                listener.exitSelection(self)




    def selection(self):

        localctx = XplorMRParser.SelectionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 176, self.RULE_selection)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1744
            self.match(XplorMRParser.L_paren)
            self.state = 1745
            self.selection_expression()
            self.state = 1746
            self.match(XplorMRParser.R_paren)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Selection_expressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def term(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.TermContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.TermContext,i)


        def Or_op(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Or_op)
            else:
                return self.getToken(XplorMRParser.Or_op, i)

        def getRuleIndex(self):
            return XplorMRParser.RULE_selection_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSelection_expression" ):
                listener.enterSelection_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSelection_expression" ):
                listener.exitSelection_expression(self)




    def selection_expression(self):

        localctx = XplorMRParser.Selection_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 178, self.RULE_selection_expression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1748
            self.term()
            self.state = 1753
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==XplorMRParser.Or_op:
                self.state = 1749
                self.match(XplorMRParser.Or_op)
                self.state = 1750
                self.term()
                self.state = 1755
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TermContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def factor(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.FactorContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.FactorContext,i)


        def And_op(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.And_op)
            else:
                return self.getToken(XplorMRParser.And_op, i)

        def getRuleIndex(self):
            return XplorMRParser.RULE_term

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTerm" ):
                listener.enterTerm(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTerm" ):
                listener.exitTerm(self)




    def term(self):

        localctx = XplorMRParser.TermContext(self, self._ctx, self.state)
        self.enterRule(localctx, 180, self.RULE_term)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1756
            self.factor(0)
            self.state = 1761
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==XplorMRParser.And_op:
                self.state = 1757
                self.match(XplorMRParser.And_op)
                self.state = 1758
                self.factor(0)
                self.state = 1763
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FactorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def L_paren(self):
            return self.getToken(XplorMRParser.L_paren, 0)

        def selection_expression(self):
            return self.getTypedRuleContext(XplorMRParser.Selection_expressionContext,0)


        def R_paren(self):
            return self.getToken(XplorMRParser.R_paren, 0)

        def All(self):
            return self.getToken(XplorMRParser.All, 0)

        def Atom(self):
            return self.getToken(XplorMRParser.Atom, 0)

        def Simple_names(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Simple_names)
            else:
                return self.getToken(XplorMRParser.Simple_names, i)

        def Simple_name(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Simple_name)
            else:
                return self.getToken(XplorMRParser.Simple_name, i)

        def Integers(self):
            return self.getToken(XplorMRParser.Integers, 0)

        def Integer(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Integer)
            else:
                return self.getToken(XplorMRParser.Integer, i)

        def Attribute(self):
            return self.getToken(XplorMRParser.Attribute, 0)

        def Attr_properties(self):
            return self.getToken(XplorMRParser.Attr_properties, 0)

        def Comparison_ops(self):
            return self.getToken(XplorMRParser.Comparison_ops, 0)

        def number_f(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Number_fContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Number_fContext,i)


        def Abs(self):
            return self.getToken(XplorMRParser.Abs, 0)

        def BondedTo(self):
            return self.getToken(XplorMRParser.BondedTo, 0)

        def factor(self):
            return self.getTypedRuleContext(XplorMRParser.FactorContext,0)


        def ByGroup(self):
            return self.getToken(XplorMRParser.ByGroup, 0)

        def ByRes(self):
            return self.getToken(XplorMRParser.ByRes, 0)

        def Chemical(self):
            return self.getToken(XplorMRParser.Chemical, 0)

        def Colon(self):
            return self.getToken(XplorMRParser.Colon, 0)

        def Hydrogen(self):
            return self.getToken(XplorMRParser.Hydrogen, 0)

        def Id(self):
            return self.getToken(XplorMRParser.Id, 0)

        def Known(self):
            return self.getToken(XplorMRParser.Known, 0)

        def Name(self):
            return self.getToken(XplorMRParser.Name, 0)

        def Not_op(self):
            return self.getToken(XplorMRParser.Not_op, 0)

        def Point(self):
            return self.getToken(XplorMRParser.Point, 0)

        def Cut(self):
            return self.getToken(XplorMRParser.Cut, 0)

        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Comma)
            else:
                return self.getToken(XplorMRParser.Comma, i)

        def Tail(self):
            return self.getToken(XplorMRParser.Tail, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.SelectionContext,i)


        def Equ_op(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Equ_op)
            else:
                return self.getToken(XplorMRParser.Equ_op, i)

        def Head(self):
            return self.getToken(XplorMRParser.Head, 0)

        def Previous(self):
            return self.getToken(XplorMRParser.Previous, 0)

        def Pseudo(self):
            return self.getToken(XplorMRParser.Pseudo, 0)

        def Residue(self):
            return self.getToken(XplorMRParser.Residue, 0)

        def Resname(self):
            return self.getToken(XplorMRParser.Resname, 0)

        def SegIdentifier(self):
            return self.getToken(XplorMRParser.SegIdentifier, 0)

        def Double_quote_string(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Double_quote_string)
            else:
                return self.getToken(XplorMRParser.Double_quote_string, i)

        def Store_1(self):
            return self.getToken(XplorMRParser.Store_1, 0)

        def Store_2(self):
            return self.getToken(XplorMRParser.Store_2, 0)

        def Store_3(self):
            return self.getToken(XplorMRParser.Store_3, 0)

        def Store_4(self):
            return self.getToken(XplorMRParser.Store_4, 0)

        def Store_5(self):
            return self.getToken(XplorMRParser.Store_5, 0)

        def Store_6(self):
            return self.getToken(XplorMRParser.Store_6, 0)

        def Store_7(self):
            return self.getToken(XplorMRParser.Store_7, 0)

        def Store_8(self):
            return self.getToken(XplorMRParser.Store_8, 0)

        def Store_9(self):
            return self.getToken(XplorMRParser.Store_9, 0)

        def Tag(self):
            return self.getToken(XplorMRParser.Tag, 0)

        def Donor(self):
            return self.getToken(XplorMRParser.Donor, 0)

        def Acceptor(self):
            return self.getToken(XplorMRParser.Acceptor, 0)

        def Around(self):
            return self.getToken(XplorMRParser.Around, 0)

        def Saround(self):
            return self.getToken(XplorMRParser.Saround, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_factor

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFactor" ):
                listener.enterFactor(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFactor" ):
                listener.exitFactor(self)



    def factor(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = XplorMRParser.FactorContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 182
        self.enterRecursionRule(localctx, 182, self.RULE_factor, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1893
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,159,self._ctx)
            if la_ == 1:
                self.state = 1765
                self.match(XplorMRParser.L_paren)
                self.state = 1766
                self.selection_expression()
                self.state = 1767
                self.match(XplorMRParser.R_paren)
                pass

            elif la_ == 2:
                self.state = 1769
                self.match(XplorMRParser.All)
                pass

            elif la_ == 3:
                self.state = 1770
                self.match(XplorMRParser.Atom)
                self.state = 1771
                _la = self._input.LA(1)
                if not(_la==XplorMRParser.Simple_name or _la==XplorMRParser.Simple_names):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1772
                _la = self._input.LA(1)
                if not(_la==XplorMRParser.Integer or _la==XplorMRParser.Integers):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1773
                _la = self._input.LA(1)
                if not(_la==XplorMRParser.Simple_name or _la==XplorMRParser.Simple_names):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass

            elif la_ == 4:
                self.state = 1774
                self.match(XplorMRParser.Attribute)
                self.state = 1776
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Abs:
                    self.state = 1775
                    self.match(XplorMRParser.Abs)


                self.state = 1778
                self.match(XplorMRParser.Attr_properties)
                self.state = 1779
                self.match(XplorMRParser.Comparison_ops)
                self.state = 1780
                self.number_f()
                pass

            elif la_ == 5:
                self.state = 1781
                self.match(XplorMRParser.BondedTo)
                self.state = 1782
                self.factor(29)
                pass

            elif la_ == 6:
                self.state = 1783
                self.match(XplorMRParser.ByGroup)
                self.state = 1784
                self.factor(28)
                pass

            elif la_ == 7:
                self.state = 1785
                self.match(XplorMRParser.ByRes)
                self.state = 1786
                self.factor(27)
                pass

            elif la_ == 8:
                self.state = 1787
                self.match(XplorMRParser.Chemical)
                self.state = 1794
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [XplorMRParser.Simple_names]:
                    self.state = 1788
                    self.match(XplorMRParser.Simple_names)
                    pass
                elif token in [XplorMRParser.Simple_name]:
                    self.state = 1789
                    self.match(XplorMRParser.Simple_name)
                    self.state = 1792
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,142,self._ctx)
                    if la_ == 1:
                        self.state = 1790
                        self.match(XplorMRParser.Colon)
                        self.state = 1791
                        self.match(XplorMRParser.Simple_name)


                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 9:
                self.state = 1796
                self.match(XplorMRParser.Hydrogen)
                pass

            elif la_ == 10:
                self.state = 1797
                self.match(XplorMRParser.Id)
                self.state = 1798
                self.match(XplorMRParser.Integer)
                pass

            elif la_ == 11:
                self.state = 1799
                self.match(XplorMRParser.Known)
                pass

            elif la_ == 12:
                self.state = 1800
                self.match(XplorMRParser.Name)
                self.state = 1807
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [XplorMRParser.Simple_names]:
                    self.state = 1801
                    self.match(XplorMRParser.Simple_names)
                    pass
                elif token in [XplorMRParser.Simple_name]:
                    self.state = 1802
                    self.match(XplorMRParser.Simple_name)
                    self.state = 1805
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,144,self._ctx)
                    if la_ == 1:
                        self.state = 1803
                        self.match(XplorMRParser.Colon)
                        self.state = 1804
                        self.match(XplorMRParser.Simple_name)


                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 13:
                self.state = 1809
                self.match(XplorMRParser.Not_op)
                self.state = 1810
                self.factor(21)
                pass

            elif la_ == 14:
                self.state = 1811
                self.match(XplorMRParser.Point)
                self.state = 1812
                self.match(XplorMRParser.L_paren)
                self.state = 1813
                self.number_f()
                self.state = 1815
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Comma:
                    self.state = 1814
                    self.match(XplorMRParser.Comma)


                self.state = 1817
                self.number_f()
                self.state = 1819
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Comma:
                    self.state = 1818
                    self.match(XplorMRParser.Comma)


                self.state = 1821
                self.number_f()
                self.state = 1822
                self.match(XplorMRParser.R_paren)
                self.state = 1823
                self.match(XplorMRParser.Cut)
                self.state = 1824
                self.number_f()
                pass

            elif la_ == 15:
                self.state = 1826
                self.match(XplorMRParser.Point)
                self.state = 1827
                self.match(XplorMRParser.L_paren)
                self.state = 1828
                self.match(XplorMRParser.Tail)
                self.state = 1830
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 1829
                    self.match(XplorMRParser.Equ_op)


                self.state = 1832
                self.selection()
                self.state = 1834
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Comma:
                    self.state = 1833
                    self.match(XplorMRParser.Comma)


                self.state = 1841
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Head:
                    self.state = 1836
                    self.match(XplorMRParser.Head)
                    self.state = 1838
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==XplorMRParser.Equ_op:
                        self.state = 1837
                        self.match(XplorMRParser.Equ_op)


                    self.state = 1840
                    self.selection()


                self.state = 1843
                self.match(XplorMRParser.R_paren)
                self.state = 1844
                self.match(XplorMRParser.Cut)
                self.state = 1845
                self.number_f()
                pass

            elif la_ == 16:
                self.state = 1847
                self.match(XplorMRParser.Previous)
                pass

            elif la_ == 17:
                self.state = 1848
                self.match(XplorMRParser.Pseudo)
                pass

            elif la_ == 18:
                self.state = 1849
                self.match(XplorMRParser.Residue)
                self.state = 1856
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [XplorMRParser.Integers]:
                    self.state = 1850
                    self.match(XplorMRParser.Integers)
                    pass
                elif token in [XplorMRParser.Integer]:
                    self.state = 1851
                    self.match(XplorMRParser.Integer)
                    self.state = 1854
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,152,self._ctx)
                    if la_ == 1:
                        self.state = 1852
                        self.match(XplorMRParser.Colon)
                        self.state = 1853
                        self.match(XplorMRParser.Integer)


                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 19:
                self.state = 1858
                self.match(XplorMRParser.Resname)
                self.state = 1865
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [XplorMRParser.Simple_names]:
                    self.state = 1859
                    self.match(XplorMRParser.Simple_names)
                    pass
                elif token in [XplorMRParser.Simple_name]:
                    self.state = 1860
                    self.match(XplorMRParser.Simple_name)
                    self.state = 1863
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,154,self._ctx)
                    if la_ == 1:
                        self.state = 1861
                        self.match(XplorMRParser.Colon)
                        self.state = 1862
                        self.match(XplorMRParser.Simple_name)


                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 20:
                self.state = 1867
                self.match(XplorMRParser.SegIdentifier)
                self.state = 1879
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [XplorMRParser.Simple_names]:
                    self.state = 1868
                    self.match(XplorMRParser.Simple_names)
                    pass
                elif token in [XplorMRParser.Simple_name]:
                    self.state = 1869
                    self.match(XplorMRParser.Simple_name)
                    self.state = 1872
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,156,self._ctx)
                    if la_ == 1:
                        self.state = 1870
                        self.match(XplorMRParser.Colon)
                        self.state = 1871
                        self.match(XplorMRParser.Simple_name)


                    pass
                elif token in [XplorMRParser.Double_quote_string]:
                    self.state = 1874
                    self.match(XplorMRParser.Double_quote_string)
                    self.state = 1877
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,157,self._ctx)
                    if la_ == 1:
                        self.state = 1875
                        self.match(XplorMRParser.Colon)
                        self.state = 1876
                        self.match(XplorMRParser.Double_quote_string)


                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 21:
                self.state = 1881
                self.match(XplorMRParser.Store_1)
                pass

            elif la_ == 22:
                self.state = 1882
                self.match(XplorMRParser.Store_2)
                pass

            elif la_ == 23:
                self.state = 1883
                self.match(XplorMRParser.Store_3)
                pass

            elif la_ == 24:
                self.state = 1884
                self.match(XplorMRParser.Store_4)
                pass

            elif la_ == 25:
                self.state = 1885
                self.match(XplorMRParser.Store_5)
                pass

            elif la_ == 26:
                self.state = 1886
                self.match(XplorMRParser.Store_6)
                pass

            elif la_ == 27:
                self.state = 1887
                self.match(XplorMRParser.Store_7)
                pass

            elif la_ == 28:
                self.state = 1888
                self.match(XplorMRParser.Store_8)
                pass

            elif la_ == 29:
                self.state = 1889
                self.match(XplorMRParser.Store_9)
                pass

            elif la_ == 30:
                self.state = 1890
                self.match(XplorMRParser.Tag)
                pass

            elif la_ == 31:
                self.state = 1891
                self.match(XplorMRParser.Donor)
                pass

            elif la_ == 32:
                self.state = 1892
                self.match(XplorMRParser.Acceptor)
                pass


            self._ctx.stop = self._input.LT(-1)
            self.state = 1903
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,161,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 1901
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,160,self._ctx)
                    if la_ == 1:
                        localctx = XplorMRParser.FactorContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_factor)
                        self.state = 1895
                        if not self.precpred(self._ctx, 32):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 32)")
                        self.state = 1896
                        self.match(XplorMRParser.Around)
                        self.state = 1897
                        self.number_f()
                        pass

                    elif la_ == 2:
                        localctx = XplorMRParser.FactorContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_factor)
                        self.state = 1898
                        if not self.precpred(self._ctx, 14):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 14)")
                        self.state = 1899
                        self.match(XplorMRParser.Saround)
                        self.state = 1900
                        self.number_f()
                        pass

             
                self.state = 1905
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,161,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class NumberContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Real(self):
            return self.getToken(XplorMRParser.Real, 0)

        def Integer(self):
            return self.getToken(XplorMRParser.Integer, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_number

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNumber" ):
                listener.enterNumber(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNumber" ):
                listener.exitNumber(self)




    def number(self):

        localctx = XplorMRParser.NumberContext(self, self._ctx, self.state)
        self.enterRule(localctx, 184, self.RULE_number)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1906
            _la = self._input.LA(1)
            if not(_la==XplorMRParser.Integer or _la==XplorMRParser.Real):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Number_fContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Real(self):
            return self.getToken(XplorMRParser.Real, 0)

        def Integer(self):
            return self.getToken(XplorMRParser.Integer, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_number_f

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNumber_f" ):
                listener.enterNumber_f(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNumber_f" ):
                listener.exitNumber_f(self)




    def number_f(self):

        localctx = XplorMRParser.Number_fContext(self, self._ctx, self.state)
        self.enterRule(localctx, 186, self.RULE_number_f)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1908
            _la = self._input.LA(1)
            if not(_la==XplorMRParser.Integer or _la==XplorMRParser.Real):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Number_sContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Real(self):
            return self.getToken(XplorMRParser.Real, 0)

        def Integer(self):
            return self.getToken(XplorMRParser.Integer, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_number_s

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNumber_s" ):
                listener.enterNumber_s(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNumber_s" ):
                listener.exitNumber_s(self)




    def number_s(self):

        localctx = XplorMRParser.Number_sContext(self, self._ctx, self.state)
        self.enterRule(localctx, 188, self.RULE_number_s)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1910
            _la = self._input.LA(1)
            if not(_la==XplorMRParser.Integer or _la==XplorMRParser.Real):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Number_aContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Real(self):
            return self.getToken(XplorMRParser.Real, 0)

        def Integer(self):
            return self.getToken(XplorMRParser.Integer, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_number_a

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNumber_a" ):
                listener.enterNumber_a(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNumber_a" ):
                listener.exitNumber_a(self)




    def number_a(self):

        localctx = XplorMRParser.Number_aContext(self, self._ctx, self.state)
        self.enterRule(localctx, 190, self.RULE_number_a)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1912
            _la = self._input.LA(1)
            if not(_la==XplorMRParser.Integer or _la==XplorMRParser.Real):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Flag_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Flags(self):
            return self.getToken(XplorMRParser.Flags, 0)

        def Include(self):
            return self.getToken(XplorMRParser.Include, 0)

        def End_F(self):
            return self.getToken(XplorMRParser.End_F, 0)

        def Exclude(self):
            return self.getToken(XplorMRParser.Exclude, 0)

        def Class_name(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Class_name)
            else:
                return self.getToken(XplorMRParser.Class_name, i)

        def Any_class(self):
            return self.getToken(XplorMRParser.Any_class, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_flag_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFlag_statement" ):
                listener.enterFlag_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFlag_statement" ):
                listener.exitFlag_statement(self)




    def flag_statement(self):

        localctx = XplorMRParser.Flag_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 192, self.RULE_flag_statement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1914
            self.match(XplorMRParser.Flags)
            self.state = 1925
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==XplorMRParser.Exclude:
                self.state = 1915
                self.match(XplorMRParser.Exclude)
                self.state = 1923
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [XplorMRParser.Include, XplorMRParser.Class_name]:
                    self.state = 1919
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==XplorMRParser.Class_name:
                        self.state = 1916
                        self.match(XplorMRParser.Class_name)
                        self.state = 1921
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    pass
                elif token in [XplorMRParser.Any_class]:
                    self.state = 1922
                    self.match(XplorMRParser.Any_class)
                    pass
                else:
                    raise NoViableAltException(self)



            self.state = 1927
            self.match(XplorMRParser.Include)
            self.state = 1931
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==XplorMRParser.Class_name:
                self.state = 1928
                self.match(XplorMRParser.Class_name)
                self.state = 1933
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1934
            self.match(XplorMRParser.End_F)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Vector_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Vector(self):
            return self.getToken(XplorMRParser.Vector, 0)

        def vector_mode(self):
            return self.getTypedRuleContext(XplorMRParser.Vector_modeContext,0)


        def selection(self):
            return self.getTypedRuleContext(XplorMRParser.SelectionContext,0)


        def getRuleIndex(self):
            return XplorMRParser.RULE_vector_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVector_statement" ):
                listener.enterVector_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVector_statement" ):
                listener.exitVector_statement(self)




    def vector_statement(self):

        localctx = XplorMRParser.Vector_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 194, self.RULE_vector_statement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1936
            self.match(XplorMRParser.Vector)
            self.state = 1937
            self.vector_mode()
            self.state = 1938
            self.selection()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Vector_modeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def vector_expression(self):
            return self.getTypedRuleContext(XplorMRParser.Vector_expressionContext,0)


        def R_paren_VE(self):
            return self.getToken(XplorMRParser.R_paren_VE, 0)

        def Do_Lp(self):
            return self.getToken(XplorMRParser.Do_Lp, 0)

        def Identify_Lp(self):
            return self.getToken(XplorMRParser.Identify_Lp, 0)

        def Show(self):
            return self.getToken(XplorMRParser.Show, 0)

        def vector_show_property(self):
            return self.getTypedRuleContext(XplorMRParser.Vector_show_propertyContext,0)


        def getRuleIndex(self):
            return XplorMRParser.RULE_vector_mode

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVector_mode" ):
                listener.enterVector_mode(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVector_mode" ):
                listener.exitVector_mode(self)




    def vector_mode(self):

        localctx = XplorMRParser.Vector_modeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 196, self.RULE_vector_mode)
        self._la = 0 # Token type
        try:
            self.state = 1946
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [XplorMRParser.Do_Lp, XplorMRParser.Identify_Lp]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1940
                _la = self._input.LA(1)
                if not(_la==XplorMRParser.Do_Lp or _la==XplorMRParser.Identify_Lp):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1941
                self.vector_expression()
                self.state = 1942
                self.match(XplorMRParser.R_paren_VE)
                pass
            elif token in [XplorMRParser.Show]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1944
                self.match(XplorMRParser.Show)
                self.state = 1945
                self.vector_show_property()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Vector_expressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Atom_properties_VE(self):
            return self.getToken(XplorMRParser.Atom_properties_VE, 0)

        def Equ_op_VE(self):
            return self.getToken(XplorMRParser.Equ_op_VE, 0)

        def vector_operation(self):
            return self.getTypedRuleContext(XplorMRParser.Vector_operationContext,0)


        def getRuleIndex(self):
            return XplorMRParser.RULE_vector_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVector_expression" ):
                listener.enterVector_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVector_expression" ):
                listener.exitVector_expression(self)




    def vector_expression(self):

        localctx = XplorMRParser.Vector_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 198, self.RULE_vector_expression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1948
            self.match(XplorMRParser.Atom_properties_VE)
            self.state = 1951
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==XplorMRParser.Equ_op_VE:
                self.state = 1949
                self.match(XplorMRParser.Equ_op_VE)
                self.state = 1950
                self.vector_operation()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Vector_operationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def vflc(self):
            return self.getTypedRuleContext(XplorMRParser.VflcContext,0)


        def vector_operation(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Vector_operationContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Vector_operationContext,i)


        def Add_op_VE(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Add_op_VE)
            else:
                return self.getToken(XplorMRParser.Add_op_VE, i)

        def Sub_op_VE(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Sub_op_VE)
            else:
                return self.getToken(XplorMRParser.Sub_op_VE, i)

        def Mul_op_VE(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Mul_op_VE)
            else:
                return self.getToken(XplorMRParser.Mul_op_VE, i)

        def Div_op_VE(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Div_op_VE)
            else:
                return self.getToken(XplorMRParser.Div_op_VE, i)

        def Exp_op_VE(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Exp_op_VE)
            else:
                return self.getToken(XplorMRParser.Exp_op_VE, i)

        def getRuleIndex(self):
            return XplorMRParser.RULE_vector_operation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVector_operation" ):
                listener.enterVector_operation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVector_operation" ):
                listener.exitVector_operation(self)




    def vector_operation(self):

        localctx = XplorMRParser.Vector_operationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 200, self.RULE_vector_operation)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1953
            self.vflc()
            self.state = 1958
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,168,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1954
                    _la = self._input.LA(1)
                    if not(((((_la - 220)) & ~0x3f) == 0 and ((1 << (_la - 220)) & ((1 << (XplorMRParser.Add_op_VE - 220)) | (1 << (XplorMRParser.Sub_op_VE - 220)) | (1 << (XplorMRParser.Mul_op_VE - 220)) | (1 << (XplorMRParser.Div_op_VE - 220)) | (1 << (XplorMRParser.Exp_op_VE - 220)))) != 0)):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 1955
                    self.vector_operation() 
                self.state = 1960
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,168,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VflcContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Atom_properties_VE(self):
            return self.getToken(XplorMRParser.Atom_properties_VE, 0)

        def vector_func_call(self):
            return self.getTypedRuleContext(XplorMRParser.Vector_func_callContext,0)


        def Integer_VE(self):
            return self.getToken(XplorMRParser.Integer_VE, 0)

        def Real_VE(self):
            return self.getToken(XplorMRParser.Real_VE, 0)

        def Simple_name_VE(self):
            return self.getToken(XplorMRParser.Simple_name_VE, 0)

        def Double_quote_string_VE(self):
            return self.getToken(XplorMRParser.Double_quote_string_VE, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_vflc

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVflc" ):
                listener.enterVflc(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVflc" ):
                listener.exitVflc(self)




    def vflc(self):

        localctx = XplorMRParser.VflcContext(self, self._ctx, self.state)
        self.enterRule(localctx, 202, self.RULE_vflc)
        try:
            self.state = 1967
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [XplorMRParser.Atom_properties_VE]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1961
                self.match(XplorMRParser.Atom_properties_VE)
                pass
            elif token in [XplorMRParser.Abs_VE, XplorMRParser.Acos_VE, XplorMRParser.Cos_VE, XplorMRParser.Decode_VE, XplorMRParser.Encode_VE, XplorMRParser.Exp_VE, XplorMRParser.Gauss_VE, XplorMRParser.Heavy_VE, XplorMRParser.Int_VE, XplorMRParser.Log10_VE, XplorMRParser.Log_VE, XplorMRParser.Max_VE, XplorMRParser.Maxw_VE, XplorMRParser.Min_VE, XplorMRParser.Mod_VE, XplorMRParser.Norm_VE, XplorMRParser.Random_VE, XplorMRParser.Sign_VE, XplorMRParser.Sin_VE, XplorMRParser.Sqrt_VE, XplorMRParser.Tan_VE]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1962
                self.vector_func_call()
                pass
            elif token in [XplorMRParser.Integer_VE]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1963
                self.match(XplorMRParser.Integer_VE)
                pass
            elif token in [XplorMRParser.Real_VE]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1964
                self.match(XplorMRParser.Real_VE)
                pass
            elif token in [XplorMRParser.Simple_name_VE]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1965
                self.match(XplorMRParser.Simple_name_VE)
                pass
            elif token in [XplorMRParser.Double_quote_string_VE]:
                self.enterOuterAlt(localctx, 6)
                self.state = 1966
                self.match(XplorMRParser.Double_quote_string_VE)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Vector_func_callContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Abs_VE(self):
            return self.getToken(XplorMRParser.Abs_VE, 0)

        def L_paren_VF(self):
            return self.getToken(XplorMRParser.L_paren_VF, 0)

        def vflc(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.VflcContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.VflcContext,i)


        def R_paren_VE(self):
            return self.getToken(XplorMRParser.R_paren_VE, 0)

        def Acos_VE(self):
            return self.getToken(XplorMRParser.Acos_VE, 0)

        def Cos_VE(self):
            return self.getToken(XplorMRParser.Cos_VE, 0)

        def Decode_VE(self):
            return self.getToken(XplorMRParser.Decode_VE, 0)

        def Encode_VE(self):
            return self.getToken(XplorMRParser.Encode_VE, 0)

        def Exp_VE(self):
            return self.getToken(XplorMRParser.Exp_VE, 0)

        def Gauss_VE(self):
            return self.getToken(XplorMRParser.Gauss_VE, 0)

        def Heavy_VE(self):
            return self.getToken(XplorMRParser.Heavy_VE, 0)

        def Int_VE(self):
            return self.getToken(XplorMRParser.Int_VE, 0)

        def Log10_VE(self):
            return self.getToken(XplorMRParser.Log10_VE, 0)

        def Log_VE(self):
            return self.getToken(XplorMRParser.Log_VE, 0)

        def Max_VE(self):
            return self.getToken(XplorMRParser.Max_VE, 0)

        def Comma_VE(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Comma_VE)
            else:
                return self.getToken(XplorMRParser.Comma_VE, i)

        def Maxw_VE(self):
            return self.getToken(XplorMRParser.Maxw_VE, 0)

        def Min_VE(self):
            return self.getToken(XplorMRParser.Min_VE, 0)

        def Mod_VE(self):
            return self.getToken(XplorMRParser.Mod_VE, 0)

        def Norm_VE(self):
            return self.getToken(XplorMRParser.Norm_VE, 0)

        def Random_VE(self):
            return self.getToken(XplorMRParser.Random_VE, 0)

        def Sign_VE(self):
            return self.getToken(XplorMRParser.Sign_VE, 0)

        def Sin_VE(self):
            return self.getToken(XplorMRParser.Sin_VE, 0)

        def Sqrt_VE(self):
            return self.getToken(XplorMRParser.Sqrt_VE, 0)

        def Tan_VE(self):
            return self.getToken(XplorMRParser.Tan_VE, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_vector_func_call

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVector_func_call" ):
                listener.enterVector_func_call(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVector_func_call" ):
                listener.exitVector_func_call(self)




    def vector_func_call(self):

        localctx = XplorMRParser.Vector_func_callContext(self, self._ctx, self.state)
        self.enterRule(localctx, 204, self.RULE_vector_func_call)
        self._la = 0 # Token type
        try:
            self.state = 2088
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [XplorMRParser.Abs_VE]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1969
                self.match(XplorMRParser.Abs_VE)
                self.state = 1970
                self.match(XplorMRParser.L_paren_VF)
                self.state = 1971
                self.vflc()
                self.state = 1972
                self.match(XplorMRParser.R_paren_VE)
                pass
            elif token in [XplorMRParser.Acos_VE]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1974
                self.match(XplorMRParser.Acos_VE)
                self.state = 1975
                self.match(XplorMRParser.L_paren_VF)
                self.state = 1976
                self.vflc()
                self.state = 1977
                self.match(XplorMRParser.R_paren_VE)
                pass
            elif token in [XplorMRParser.Cos_VE]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1979
                self.match(XplorMRParser.Cos_VE)
                self.state = 1980
                self.match(XplorMRParser.L_paren_VF)
                self.state = 1981
                self.vflc()
                self.state = 1982
                self.match(XplorMRParser.R_paren_VE)
                pass
            elif token in [XplorMRParser.Decode_VE]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1984
                self.match(XplorMRParser.Decode_VE)
                self.state = 1985
                self.match(XplorMRParser.L_paren_VF)
                self.state = 1986
                self.vflc()
                self.state = 1987
                self.match(XplorMRParser.R_paren_VE)
                pass
            elif token in [XplorMRParser.Encode_VE]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1989
                self.match(XplorMRParser.Encode_VE)
                self.state = 1990
                self.match(XplorMRParser.L_paren_VF)
                self.state = 1991
                self.vflc()
                self.state = 1992
                self.match(XplorMRParser.R_paren_VE)
                pass
            elif token in [XplorMRParser.Exp_VE]:
                self.enterOuterAlt(localctx, 6)
                self.state = 1994
                self.match(XplorMRParser.Exp_VE)
                self.state = 1995
                self.match(XplorMRParser.L_paren_VF)
                self.state = 1996
                self.vflc()
                self.state = 1997
                self.match(XplorMRParser.R_paren_VE)
                pass
            elif token in [XplorMRParser.Gauss_VE]:
                self.enterOuterAlt(localctx, 7)
                self.state = 1999
                self.match(XplorMRParser.Gauss_VE)
                self.state = 2000
                self.match(XplorMRParser.L_paren_VF)
                self.state = 2001
                self.vflc()
                self.state = 2002
                self.match(XplorMRParser.R_paren_VE)
                pass
            elif token in [XplorMRParser.Heavy_VE]:
                self.enterOuterAlt(localctx, 8)
                self.state = 2004
                self.match(XplorMRParser.Heavy_VE)
                self.state = 2005
                self.match(XplorMRParser.L_paren_VF)
                self.state = 2006
                self.vflc()
                self.state = 2007
                self.match(XplorMRParser.R_paren_VE)
                pass
            elif token in [XplorMRParser.Int_VE]:
                self.enterOuterAlt(localctx, 9)
                self.state = 2009
                self.match(XplorMRParser.Int_VE)
                self.state = 2010
                self.match(XplorMRParser.L_paren_VF)
                self.state = 2011
                self.vflc()
                self.state = 2012
                self.match(XplorMRParser.R_paren_VE)
                pass
            elif token in [XplorMRParser.Log10_VE]:
                self.enterOuterAlt(localctx, 10)
                self.state = 2014
                self.match(XplorMRParser.Log10_VE)
                self.state = 2015
                self.match(XplorMRParser.L_paren_VF)
                self.state = 2016
                self.vflc()
                self.state = 2017
                self.match(XplorMRParser.R_paren_VE)
                pass
            elif token in [XplorMRParser.Log_VE]:
                self.enterOuterAlt(localctx, 11)
                self.state = 2019
                self.match(XplorMRParser.Log_VE)
                self.state = 2020
                self.match(XplorMRParser.L_paren_VF)
                self.state = 2021
                self.vflc()
                self.state = 2022
                self.match(XplorMRParser.R_paren_VE)
                pass
            elif token in [XplorMRParser.Max_VE]:
                self.enterOuterAlt(localctx, 12)
                self.state = 2024
                self.match(XplorMRParser.Max_VE)
                self.state = 2025
                self.match(XplorMRParser.L_paren_VF)
                self.state = 2026
                self.vflc()
                self.state = 2031
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==XplorMRParser.Comma_VE:
                    self.state = 2027
                    self.match(XplorMRParser.Comma_VE)
                    self.state = 2028
                    self.vflc()
                    self.state = 2033
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 2034
                self.match(XplorMRParser.R_paren_VE)
                pass
            elif token in [XplorMRParser.Maxw_VE]:
                self.enterOuterAlt(localctx, 13)
                self.state = 2036
                self.match(XplorMRParser.Maxw_VE)
                self.state = 2037
                self.match(XplorMRParser.L_paren_VF)
                self.state = 2038
                self.vflc()
                self.state = 2039
                self.match(XplorMRParser.R_paren_VE)
                pass
            elif token in [XplorMRParser.Min_VE]:
                self.enterOuterAlt(localctx, 14)
                self.state = 2041
                self.match(XplorMRParser.Min_VE)
                self.state = 2042
                self.match(XplorMRParser.L_paren_VF)
                self.state = 2043
                self.vflc()
                self.state = 2048
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==XplorMRParser.Comma_VE:
                    self.state = 2044
                    self.match(XplorMRParser.Comma_VE)
                    self.state = 2045
                    self.vflc()
                    self.state = 2050
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 2051
                self.match(XplorMRParser.R_paren_VE)
                pass
            elif token in [XplorMRParser.Mod_VE]:
                self.enterOuterAlt(localctx, 15)
                self.state = 2053
                self.match(XplorMRParser.Mod_VE)
                self.state = 2054
                self.match(XplorMRParser.L_paren_VF)
                self.state = 2055
                self.vflc()
                self.state = 2056
                self.match(XplorMRParser.Comma_VE)
                self.state = 2057
                self.vflc()
                self.state = 2058
                self.match(XplorMRParser.R_paren_VE)
                pass
            elif token in [XplorMRParser.Norm_VE]:
                self.enterOuterAlt(localctx, 16)
                self.state = 2060
                self.match(XplorMRParser.Norm_VE)
                self.state = 2061
                self.match(XplorMRParser.L_paren_VF)
                self.state = 2062
                self.vflc()
                self.state = 2063
                self.match(XplorMRParser.R_paren_VE)
                pass
            elif token in [XplorMRParser.Random_VE]:
                self.enterOuterAlt(localctx, 17)
                self.state = 2065
                self.match(XplorMRParser.Random_VE)
                self.state = 2066
                self.match(XplorMRParser.L_paren_VF)
                self.state = 2067
                self.match(XplorMRParser.R_paren_VE)
                pass
            elif token in [XplorMRParser.Sign_VE]:
                self.enterOuterAlt(localctx, 18)
                self.state = 2068
                self.match(XplorMRParser.Sign_VE)
                self.state = 2069
                self.match(XplorMRParser.L_paren_VF)
                self.state = 2070
                self.vflc()
                self.state = 2071
                self.match(XplorMRParser.R_paren_VE)
                pass
            elif token in [XplorMRParser.Sin_VE]:
                self.enterOuterAlt(localctx, 19)
                self.state = 2073
                self.match(XplorMRParser.Sin_VE)
                self.state = 2074
                self.match(XplorMRParser.L_paren_VF)
                self.state = 2075
                self.vflc()
                self.state = 2076
                self.match(XplorMRParser.R_paren_VE)
                pass
            elif token in [XplorMRParser.Sqrt_VE]:
                self.enterOuterAlt(localctx, 20)
                self.state = 2078
                self.match(XplorMRParser.Sqrt_VE)
                self.state = 2079
                self.match(XplorMRParser.L_paren_VF)
                self.state = 2080
                self.vflc()
                self.state = 2081
                self.match(XplorMRParser.R_paren_VE)
                pass
            elif token in [XplorMRParser.Tan_VE]:
                self.enterOuterAlt(localctx, 21)
                self.state = 2083
                self.match(XplorMRParser.Tan_VE)
                self.state = 2084
                self.match(XplorMRParser.L_paren_VF)
                self.state = 2085
                self.vflc()
                self.state = 2086
                self.match(XplorMRParser.R_paren_VE)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Vector_show_propertyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def L_paren_VS(self):
            return self.getToken(XplorMRParser.L_paren_VS, 0)

        def Atom_properties_VS(self):
            return self.getToken(XplorMRParser.Atom_properties_VS, 0)

        def R_paren_VS(self):
            return self.getToken(XplorMRParser.R_paren_VS, 0)

        def Average_VS(self):
            return self.getToken(XplorMRParser.Average_VS, 0)

        def Element_VS(self):
            return self.getToken(XplorMRParser.Element_VS, 0)

        def Max_VS(self):
            return self.getToken(XplorMRParser.Max_VS, 0)

        def Min_VS(self):
            return self.getToken(XplorMRParser.Min_VS, 0)

        def Norm_VS(self):
            return self.getToken(XplorMRParser.Norm_VS, 0)

        def Rms_VS(self):
            return self.getToken(XplorMRParser.Rms_VS, 0)

        def Sum_VS(self):
            return self.getToken(XplorMRParser.Sum_VS, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_vector_show_property

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVector_show_property" ):
                listener.enterVector_show_property(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVector_show_property" ):
                listener.exitVector_show_property(self)




    def vector_show_property(self):

        localctx = XplorMRParser.Vector_show_propertyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 206, self.RULE_vector_show_property)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2090
            _la = self._input.LA(1)
            if not(((((_la - 256)) & ~0x3f) == 0 and ((1 << (_la - 256)) & ((1 << (XplorMRParser.Average_VS - 256)) | (1 << (XplorMRParser.Element_VS - 256)) | (1 << (XplorMRParser.Max_VS - 256)) | (1 << (XplorMRParser.Min_VS - 256)) | (1 << (XplorMRParser.Norm_VS - 256)) | (1 << (XplorMRParser.Rms_VS - 256)) | (1 << (XplorMRParser.Sum_VS - 256)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 2091
            self.match(XplorMRParser.L_paren_VS)
            self.state = 2092
            self.match(XplorMRParser.Atom_properties_VS)
            self.state = 2093
            self.match(XplorMRParser.R_paren_VS)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx



    def sempred(self, localctx:RuleContext, ruleIndex:int, predIndex:int):
        if self._predicates == None:
            self._predicates = dict()
        self._predicates[91] = self.factor_sempred
        pred = self._predicates.get(ruleIndex, None)
        if pred is None:
            raise Exception("No predicate with index:" + str(ruleIndex))
        else:
            return pred(localctx, predIndex)

    def factor_sempred(self, localctx:FactorContext, predIndex:int):
            if predIndex == 0:
                return self.precpred(self._ctx, 32)
         

            if predIndex == 1:
                return self.precpred(self._ctx, 14)
         




