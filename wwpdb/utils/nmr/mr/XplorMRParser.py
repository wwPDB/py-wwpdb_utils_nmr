# Generated from XplorMRParser.g4 by ANTLR 4.9
# encoding: utf-8
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
	from typing import TextIO
else:
	from typing.io import TextIO


def serializedATN():
    with StringIO() as buf:
        buf.write("\3\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964\3\u00b8")
        buf.write("\u0754\4\2\t\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7\t\7")
        buf.write("\4\b\t\b\4\t\t\t\4\n\t\n\4\13\t\13\4\f\t\f\4\r\t\r\4\16")
        buf.write("\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22\t\22\4\23\t\23")
        buf.write("\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30\t\30\4\31")
        buf.write("\t\31\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t\35\4\36\t\36")
        buf.write("\4\37\t\37\4 \t \4!\t!\4\"\t\"\4#\t#\4$\t$\4%\t%\4&\t")
        buf.write("&\4\'\t\'\4(\t(\4)\t)\4*\t*\4+\t+\4,\t,\4-\t-\4.\t.\4")
        buf.write("/\t/\4\60\t\60\4\61\t\61\4\62\t\62\4\63\t\63\4\64\t\64")
        buf.write("\4\65\t\65\4\66\t\66\4\67\t\67\48\t8\49\t9\4:\t:\4;\t")
        buf.write(";\4<\t<\4=\t=\4>\t>\4?\t?\4@\t@\4A\tA\4B\tB\4C\tC\4D\t")
        buf.write("D\4E\tE\4F\tF\4G\tG\4H\tH\4I\tI\4J\tJ\4K\tK\4L\tL\4M\t")
        buf.write("M\4N\tN\4O\tO\4P\tP\4Q\tQ\4R\tR\4S\tS\4T\tT\4U\tU\4V\t")
        buf.write("V\4W\tW\4X\tX\3\2\7\2\u00b2\n\2\f\2\16\2\u00b5\13\2\3")
        buf.write("\2\7\2\u00b8\n\2\f\2\16\2\u00bb\13\2\3\2\7\2\u00be\n\2")
        buf.write("\f\2\16\2\u00c1\13\2\3\2\7\2\u00c4\n\2\f\2\16\2\u00c7")
        buf.write("\13\2\3\2\7\2\u00ca\n\2\f\2\16\2\u00cd\13\2\3\2\7\2\u00d0")
        buf.write("\n\2\f\2\16\2\u00d3\13\2\3\2\7\2\u00d6\n\2\f\2\16\2\u00d9")
        buf.write("\13\2\3\2\7\2\u00dc\n\2\f\2\16\2\u00df\13\2\3\2\7\2\u00e2")
        buf.write("\n\2\f\2\16\2\u00e5\13\2\3\2\7\2\u00e8\n\2\f\2\16\2\u00eb")
        buf.write("\13\2\3\2\7\2\u00ee\n\2\f\2\16\2\u00f1\13\2\3\2\7\2\u00f4")
        buf.write("\n\2\f\2\16\2\u00f7\13\2\3\2\7\2\u00fa\n\2\f\2\16\2\u00fd")
        buf.write("\13\2\3\2\7\2\u0100\n\2\f\2\16\2\u0103\13\2\3\2\7\2\u0106")
        buf.write("\n\2\f\2\16\2\u0109\13\2\3\2\7\2\u010c\n\2\f\2\16\2\u010f")
        buf.write("\13\2\3\2\7\2\u0112\n\2\f\2\16\2\u0115\13\2\3\2\7\2\u0118")
        buf.write("\n\2\f\2\16\2\u011b\13\2\3\2\7\2\u011e\n\2\f\2\16\2\u0121")
        buf.write("\13\2\3\2\7\2\u0124\n\2\f\2\16\2\u0127\13\2\3\2\7\2\u012a")
        buf.write("\n\2\f\2\16\2\u012d\13\2\3\2\7\2\u0130\n\2\f\2\16\2\u0133")
        buf.write("\13\2\3\2\7\2\u0136\n\2\f\2\16\2\u0139\13\2\3\2\7\2\u013c")
        buf.write("\n\2\f\2\16\2\u013f\13\2\3\2\7\2\u0142\n\2\f\2\16\2\u0145")
        buf.write("\13\2\3\2\7\2\u0148\n\2\f\2\16\2\u014b\13\2\3\2\7\2\u014e")
        buf.write("\n\2\f\2\16\2\u0151\13\2\3\2\3\2\3\3\3\3\3\3\3\3\3\3\3")
        buf.write("\3\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\5\3\5\3\5\3\5\3\5\3\5")
        buf.write("\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3")
        buf.write("\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\5\5\u0180\n")
        buf.write("\5\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\7\3\7\3\7\3\7\3\7\3\7")
        buf.write("\3\b\3\b\3\b\3\b\3\b\3\b\3\t\3\t\3\t\3\t\3\t\3\t\3\n\3")
        buf.write("\n\3\n\3\n\3\n\3\n\3\13\3\13\3\13\3\13\3\13\3\13\3\f\3")
        buf.write("\f\3\f\3\f\3\f\3\f\3\r\3\r\3\r\3\r\3\r\3\r\3\16\3\16\3")
        buf.write("\16\3\16\3\16\3\16\3\17\3\17\3\17\3\17\3\17\3\17\3\20")
        buf.write("\3\20\3\20\3\20\3\20\3\20\3\21\3\21\3\21\3\21\3\21\3\21")
        buf.write("\3\22\3\22\3\22\3\22\3\22\3\22\3\23\3\23\3\23\3\23\3\23")
        buf.write("\3\23\3\24\3\24\3\24\3\24\3\24\3\24\3\25\3\25\3\25\3\25")
        buf.write("\3\25\3\25\3\26\3\26\3\26\3\26\3\26\3\26\3\27\3\27\3\27")
        buf.write("\3\27\3\27\3\27\3\30\3\30\3\30\3\30\3\30\3\30\3\31\7\31")
        buf.write("\u01f6\n\31\f\31\16\31\u01f9\13\31\3\31\3\31\3\31\3\31")
        buf.write("\3\31\3\31\3\31\3\31\3\31\3\31\3\31\3\31\3\31\3\31\3\31")
        buf.write("\3\31\3\31\3\31\3\31\3\31\3\31\3\31\3\31\3\31\3\31\3\31")
        buf.write("\3\31\3\31\3\31\3\31\3\31\3\31\3\31\3\31\3\31\3\31\3\31")
        buf.write("\3\31\3\31\3\31\3\31\5\31\u0224\n\31\3\31\3\31\3\31\3")
        buf.write("\31\3\31\3\31\3\31\3\31\3\31\3\31\3\31\3\31\3\31\3\31")
        buf.write("\3\31\3\31\3\31\3\31\3\31\3\31\3\31\3\31\3\31\5\31\u023d")
        buf.write("\n\31\3\32\3\32\3\32\3\32\3\32\3\32\3\32\3\32\3\32\3\32")
        buf.write("\7\32\u0249\n\32\f\32\16\32\u024c\13\32\3\33\3\33\3\33")
        buf.write("\3\33\3\33\3\33\3\33\3\33\3\33\3\33\5\33\u0258\n\33\3")
        buf.write("\34\7\34\u025b\n\34\f\34\16\34\u025e\13\34\3\34\3\34\3")
        buf.write("\34\3\34\3\34\3\34\5\34\u0266\n\34\3\35\3\35\3\35\3\35")
        buf.write("\3\35\3\35\3\35\3\35\3\35\3\35\3\36\7\36\u0273\n\36\f")
        buf.write("\36\16\36\u0276\13\36\3\36\3\36\3\36\3\36\3\36\3\36\3")
        buf.write("\36\3\36\3\36\3\36\3\36\3\36\3\36\3\36\3\36\3\36\5\36")
        buf.write("\u0288\n\36\3\37\3\37\3\37\3\37\3\37\3\37\3\37\3\37\3")
        buf.write("\37\3\37\3 \7 \u0295\n \f \16 \u0298\13 \3 \3 \3 \3 \3")
        buf.write(" \3 \3 \3 \3 \3 \3 \3 \3 \3 \3 \3 \3 \3 \3 \3 \3 \3 \3")
        buf.write(" \3 \5 \u02b2\n \3!\3!\3!\3!\3!\3!\3!\3!\3!\3!\3!\3!\3")
        buf.write("!\5!\u02c1\n!\3\"\7\"\u02c4\n\"\f\"\16\"\u02c7\13\"\3")
        buf.write("\"\3\"\3\"\3\"\3\"\3\"\3\"\3\"\3\"\3\"\3\"\3\"\3\"\3\"")
        buf.write("\3\"\3\"\3\"\5\"\u02da\n\"\3#\3#\3#\3#\3#\3#\3#\3#\3#")
        buf.write("\3#\3$\7$\u02e7\n$\f$\16$\u02ea\13$\3$\3$\3$\3$\3$\3$")
        buf.write("\3$\3$\3$\3$\3$\3$\5$\u02f8\n$\3%\3%\3%\3%\3%\3%\3&\7")
        buf.write("&\u0301\n&\f&\16&\u0304\13&\3&\3&\3&\3&\3&\3&\3&\3&\3")
        buf.write("&\3&\3&\3&\3&\3&\3&\3&\3&\3&\3&\5&\u0319\n&\3\'\3\'\3")
        buf.write("\'\3\'\3\'\3\'\3\'\3\'\3(\3(\3(\3(\3(\3(\5(\u0329\n(\3")
        buf.write(")\3)\3)\3)\3)\3)\5)\u0331\n)\3*\7*\u0334\n*\f*\16*\u0337")
        buf.write("\13*\3*\3*\3*\3*\3*\3*\3*\3*\3*\3*\3*\3*\3*\3*\3*\5*\u0348")
        buf.write("\n*\3*\3*\3*\3*\3*\5*\u034f\n*\3+\3+\3+\3+\3,\7,\u0356")
        buf.write("\n,\f,\16,\u0359\13,\3,\3,\3,\3,\3,\3,\3,\3,\3,\3,\3,")
        buf.write("\3,\3,\3,\3,\5,\u036a\n,\3,\3,\3,\3,\3,\3,\3,\3,\3,\3")
        buf.write(",\3,\3,\3,\5,\u0379\n,\3,\5,\u037c\n,\3-\3-\3-\3-\3-\3")
        buf.write("-\3-\3-\3-\3-\5-\u0388\n-\3-\3-\3-\3-\5-\u038e\n-\3.\7")
        buf.write(".\u0391\n.\f.\16.\u0394\13.\3.\3.\3.\3.\3.\3.\3.\3.\3")
        buf.write(".\3.\3.\3.\3.\3.\3.\3.\3.\3.\3.\3.\3.\3.\7.\u03ac\n.\f")
        buf.write(".\16.\u03af\13.\3.\3.\5.\u03b3\n.\3/\3/\3/\3/\3/\3/\3")
        buf.write("/\3/\3/\3\60\3\60\3\60\3\60\3\60\3\61\7\61\u03c4\n\61")
        buf.write("\f\61\16\61\u03c7\13\61\3\61\7\61\u03ca\n\61\f\61\16\61")
        buf.write("\u03cd\13\61\3\61\7\61\u03d0\n\61\f\61\16\61\u03d3\13")
        buf.write("\61\3\61\7\61\u03d6\n\61\f\61\16\61\u03d9\13\61\3\61\7")
        buf.write("\61\u03dc\n\61\f\61\16\61\u03df\13\61\3\61\7\61\u03e2")
        buf.write("\n\61\f\61\16\61\u03e5\13\61\3\61\7\61\u03e8\n\61\f\61")
        buf.write("\16\61\u03eb\13\61\3\61\7\61\u03ee\n\61\f\61\16\61\u03f1")
        buf.write("\13\61\3\61\7\61\u03f4\n\61\f\61\16\61\u03f7\13\61\3\61")
        buf.write("\3\61\3\61\3\61\3\61\3\61\3\61\3\61\3\61\5\61\u0402\n")
        buf.write("\61\3\61\3\61\3\61\3\61\3\61\3\61\3\61\3\61\5\61\u040c")
        buf.write("\n\61\3\61\3\61\5\61\u0410\n\61\3\62\3\62\3\62\5\62\u0415")
        buf.write("\n\62\3\62\3\62\5\62\u0419\n\62\3\63\3\63\3\63\3\63\3")
        buf.write("\64\3\64\3\64\3\64\3\64\3\64\5\64\u0425\n\64\3\64\3\64")
        buf.write("\3\65\3\65\3\65\3\66\3\66\3\66\3\67\3\67\3\67\38\38\3")
        buf.write("8\39\39\39\39\39\39\39\39\59\u043d\n9\3:\3:\3:\3;\7;\u0443")
        buf.write("\n;\f;\16;\u0446\13;\3;\3;\3;\3;\3;\3;\3;\3;\3;\3;\3;")
        buf.write("\3;\3;\5;\u0455\n;\3;\3;\3;\5;\u045a\n;\3;\3;\3;\5;\u045f")
        buf.write("\n;\3;\3;\3;\3;\3;\3;\3;\3;\3;\5;\u046a\n;\3;\3;\3;\5")
        buf.write(";\u046f\n;\3;\3;\3;\5;\u0474\n;\3;\3;\3;\3;\3;\3;\5;\u047c")
        buf.write("\n;\3;\3;\3;\3;\3;\3;\3;\5;\u0485\n;\3;\3;\3;\5;\u048a")
        buf.write("\n;\3;\3;\3;\5;\u048f\n;\3;\3;\3;\3;\3;\3;\3;\3;\3;\5")
        buf.write(";\u049a\n;\3;\5;\u049d\n;\3;\5;\u04a0\n;\3;\3;\5;\u04a4")
        buf.write("\n;\3<\3<\3<\3<\3<\3<\3<\3<\3<\3<\5<\u04b0\n<\3<\3<\3")
        buf.write("<\3<\3<\5<\u04b7\n<\3<\3<\3<\3<\3<\5<\u04be\n<\3=\3=\3")
        buf.write("=\3=\3=\3=\3=\3=\3=\5=\u04c9\n=\3>\7>\u04cc\n>\f>\16>")
        buf.write("\u04cf\13>\3>\3>\3>\3>\3>\3>\3>\3>\3>\3>\3>\3>\3>\3>\3")
        buf.write(">\3>\3>\3>\3>\3>\5>\u04e5\n>\3?\3?\3?\3?\3?\3?\3?\3?\3")
        buf.write("?\3?\3@\7@\u04f2\n@\f@\16@\u04f5\13@\3@\3@\3@\3@\3@\3")
        buf.write("@\3@\3@\3@\3@\3@\3@\3@\3@\3@\3@\3@\3@\3@\3@\3@\3@\3@\3")
        buf.write("@\3@\3@\3@\3@\3@\3@\3@\3@\3@\3@\3@\5@\u051a\n@\3@\3@\3")
        buf.write("@\3@\3@\3@\3@\3@\3@\3@\3@\3@\3@\3@\3@\5@\u052b\n@\3A\3")
        buf.write("A\3A\3A\3A\3A\3B\7B\u0534\nB\fB\16B\u0537\13B\3B\3B\3")
        buf.write("B\3B\3B\3B\3B\3B\3B\3B\3B\3B\3B\3B\3B\3B\3B\3B\3B\3B\3")
        buf.write("B\3B\3B\3B\5B\u0551\nB\3C\3C\3C\3C\3C\3C\3C\3C\3C\3C\3")
        buf.write("C\3C\3D\7D\u0560\nD\fD\16D\u0563\13D\3D\3D\3D\3D\3D\3")
        buf.write("D\3D\3D\3D\3D\3D\3D\3D\3D\3D\3D\3D\3D\3D\3D\3D\3D\3D\5")
        buf.write("D\u057c\nD\3E\7E\u057f\nE\fE\16E\u0582\13E\3E\3E\3E\3")
        buf.write("E\3E\3E\3E\3E\3E\3E\3E\3E\3E\3E\3E\3E\3E\3E\3E\3E\5E\u0598")
        buf.write("\nE\3F\3F\3F\3F\3F\3F\3F\3F\3F\3F\3F\3F\3G\7G\u05a7\n")
        buf.write("G\fG\16G\u05aa\13G\3G\3G\3G\3G\3G\3G\3G\3G\3G\3G\3G\3")
        buf.write("G\3G\3G\3G\3G\3G\3G\3G\3G\3G\3G\5G\u05c2\nG\3G\3G\3G\3")
        buf.write("G\3G\3G\5G\u05ca\nG\3H\3H\3H\3H\3H\3H\3H\3H\3H\3H\3H\3")
        buf.write("H\3H\5H\u05d9\nH\3I\7I\u05dc\nI\fI\16I\u05df\13I\3I\3")
        buf.write("I\3I\3I\3I\3I\3I\3I\3I\3I\3I\3I\3I\3I\3I\3I\3I\3I\3I\3")
        buf.write("I\3I\3I\3I\3I\3I\3I\3I\3I\3I\3I\3I\3I\3I\5I\u0602\nI\3")
        buf.write("I\3I\5I\u0606\nI\3J\3J\3J\3J\3J\3J\3K\7K\u060f\nK\fK\16")
        buf.write("K\u0612\13K\3K\3K\3K\3K\3K\3K\3K\3K\3K\3K\3K\3K\3K\3K")
        buf.write("\3K\3K\3K\5K\u0625\nK\3K\3K\3K\3K\3K\3K\3K\3K\3K\3K\3")
        buf.write("K\3K\3K\3K\5K\u0635\nK\3L\3L\3L\3L\3L\3L\3L\3L\3L\3M\7")
        buf.write("M\u0641\nM\fM\16M\u0644\13M\3M\3M\3M\3M\3M\3M\3M\3M\3")
        buf.write("M\3M\3M\3M\3M\3M\3M\3M\3M\3M\3M\3M\3M\3M\3M\3M\5M\u065e")
        buf.write("\nM\3N\3N\3N\3N\3N\3N\3N\3N\3N\3N\3O\7O\u066b\nO\fO\16")
        buf.write("O\u066e\13O\3O\3O\3O\3O\3O\3O\3O\3O\3O\3O\5O\u067a\nO")
        buf.write("\3P\3P\3P\3P\3P\3P\3P\3Q\7Q\u0684\nQ\fQ\16Q\u0687\13Q")
        buf.write("\3Q\3Q\3Q\3Q\3Q\3Q\3Q\3Q\3Q\3Q\3Q\3Q\3Q\3Q\3Q\3Q\5Q\u0699")
        buf.write("\nQ\3R\3R\3R\3R\3R\3R\3R\3S\7S\u06a3\nS\fS\16S\u06a6\13")
        buf.write("S\3S\3S\3S\3S\3S\3S\3S\3S\3S\3S\5S\u06b2\nS\3T\3T\3T\3")
        buf.write("T\3T\3U\3U\3U\3U\3V\3V\3V\7V\u06c0\nV\fV\16V\u06c3\13")
        buf.write("V\3W\3W\3W\7W\u06c8\nW\fW\16W\u06cb\13W\3X\3X\3X\3X\3")
        buf.write("X\3X\3X\3X\3X\3X\3X\3X\5X\u06d9\nX\3X\3X\3X\3X\3X\3X\3")
        buf.write("X\3X\3X\3X\3X\3X\3X\3X\5X\u06e9\nX\5X\u06eb\nX\3X\3X\3")
        buf.write("X\3X\3X\3X\3X\3X\3X\5X\u06f6\nX\5X\u06f8\nX\3X\3X\3X\3")
        buf.write("X\3X\3X\5X\u0700\nX\3X\3X\5X\u0704\nX\3X\3X\3X\3X\3X\3")
        buf.write("X\3X\3X\3X\3X\5X\u0710\nX\3X\3X\3X\5X\u0715\nX\3X\3X\3")
        buf.write("X\3X\3X\3X\3X\3X\3X\3X\3X\5X\u0722\nX\5X\u0724\nX\3X\3")
        buf.write("X\3X\3X\3X\5X\u072b\nX\5X\u072d\nX\3X\3X\3X\3X\3X\5X\u0734")
        buf.write("\nX\3X\3X\3X\5X\u0739\nX\5X\u073b\nX\3X\3X\3X\3X\3X\3")
        buf.write("X\3X\3X\3X\3X\5X\u0747\nX\3X\3X\3X\3X\3X\3X\7X\u074f\n")
        buf.write("X\fX\16X\u0752\13X\3X\2\3\u00aeY\2\4\6\b\n\f\16\20\22")
        buf.write("\24\26\30\32\34\36 \"$&(*,.\60\62\64\668:<>@BDFHJLNPR")
        buf.write("TVXZ\\^`bdfhjlnprtvxz|~\u0080\u0082\u0084\u0086\u0088")
        buf.write("\u008a\u008c\u008e\u0090\u0092\u0094\u0096\u0098\u009a")
        buf.write("\u009c\u009e\u00a0\u00a2\u00a4\u00a6\u00a8\u00aa\u00ac")
        buf.write("\u00ae\2\5\3\2)*\3\2\u00a5\u00a6\4\2\u00a1\u00a1\u00a7")
        buf.write("\u00a7\2\u0889\2\u00b3\3\2\2\2\4\u0154\3\2\2\2\6\u015a")
        buf.write("\3\2\2\2\b\u017f\3\2\2\2\n\u0181\3\2\2\2\f\u0188\3\2\2")
        buf.write("\2\16\u018e\3\2\2\2\20\u0194\3\2\2\2\22\u019a\3\2\2\2")
        buf.write("\24\u01a0\3\2\2\2\26\u01a6\3\2\2\2\30\u01ac\3\2\2\2\32")
        buf.write("\u01b2\3\2\2\2\34\u01b8\3\2\2\2\36\u01be\3\2\2\2 \u01c4")
        buf.write("\3\2\2\2\"\u01ca\3\2\2\2$\u01d0\3\2\2\2&\u01d6\3\2\2\2")
        buf.write("(\u01dc\3\2\2\2*\u01e2\3\2\2\2,\u01e8\3\2\2\2.\u01ee\3")
        buf.write("\2\2\2\60\u023c\3\2\2\2\62\u023e\3\2\2\2\64\u0257\3\2")
        buf.write("\2\2\66\u0265\3\2\2\28\u0267\3\2\2\2:\u0287\3\2\2\2<\u0289")
        buf.write("\3\2\2\2>\u02b1\3\2\2\2@\u02b3\3\2\2\2B\u02d9\3\2\2\2")
        buf.write("D\u02db\3\2\2\2F\u02f7\3\2\2\2H\u02f9\3\2\2\2J\u0318\3")
        buf.write("\2\2\2L\u031a\3\2\2\2N\u0328\3\2\2\2P\u0330\3\2\2\2R\u034e")
        buf.write("\3\2\2\2T\u0350\3\2\2\2V\u037b\3\2\2\2X\u037d\3\2\2\2")
        buf.write("Z\u03b2\3\2\2\2\\\u03b4\3\2\2\2^\u03bd\3\2\2\2`\u040f")
        buf.write("\3\2\2\2b\u0411\3\2\2\2d\u041a\3\2\2\2f\u041e\3\2\2\2")
        buf.write("h\u0428\3\2\2\2j\u042b\3\2\2\2l\u042e\3\2\2\2n\u0431\3")
        buf.write("\2\2\2p\u0434\3\2\2\2r\u043e\3\2\2\2t\u04a3\3\2\2\2v\u04a5")
        buf.write("\3\2\2\2x\u04c8\3\2\2\2z\u04e4\3\2\2\2|\u04e6\3\2\2\2")
        buf.write("~\u052a\3\2\2\2\u0080\u052c\3\2\2\2\u0082\u0550\3\2\2")
        buf.write("\2\u0084\u0552\3\2\2\2\u0086\u057b\3\2\2\2\u0088\u0597")
        buf.write("\3\2\2\2\u008a\u0599\3\2\2\2\u008c\u05c9\3\2\2\2\u008e")
        buf.write("\u05cb\3\2\2\2\u0090\u0605\3\2\2\2\u0092\u0607\3\2\2\2")
        buf.write("\u0094\u0634\3\2\2\2\u0096\u0636\3\2\2\2\u0098\u065d\3")
        buf.write("\2\2\2\u009a\u065f\3\2\2\2\u009c\u0679\3\2\2\2\u009e\u067b")
        buf.write("\3\2\2\2\u00a0\u0698\3\2\2\2\u00a2\u069a\3\2\2\2\u00a4")
        buf.write("\u06b1\3\2\2\2\u00a6\u06b3\3\2\2\2\u00a8\u06b8\3\2\2\2")
        buf.write("\u00aa\u06bc\3\2\2\2\u00ac\u06c4\3\2\2\2\u00ae\u0746\3")
        buf.write("\2\2\2\u00b0\u00b2\5\4\3\2\u00b1\u00b0\3\2\2\2\u00b2\u00b5")
        buf.write("\3\2\2\2\u00b3\u00b1\3\2\2\2\u00b3\u00b4\3\2\2\2\u00b4")
        buf.write("\u00b9\3\2\2\2\u00b5\u00b3\3\2\2\2\u00b6\u00b8\5\6\4\2")
        buf.write("\u00b7\u00b6\3\2\2\2\u00b8\u00bb\3\2\2\2\u00b9\u00b7\3")
        buf.write("\2\2\2\u00b9\u00ba\3\2\2\2\u00ba\u00bf\3\2\2\2\u00bb\u00b9")
        buf.write("\3\2\2\2\u00bc\u00be\5\b\5\2\u00bd\u00bc\3\2\2\2\u00be")
        buf.write("\u00c1\3\2\2\2\u00bf\u00bd\3\2\2\2\u00bf\u00c0\3\2\2\2")
        buf.write("\u00c0\u00c5\3\2\2\2\u00c1\u00bf\3\2\2\2\u00c2\u00c4\5")
        buf.write("\n\6\2\u00c3\u00c2\3\2\2\2\u00c4\u00c7\3\2\2\2\u00c5\u00c3")
        buf.write("\3\2\2\2\u00c5\u00c6\3\2\2\2\u00c6\u00cb\3\2\2\2\u00c7")
        buf.write("\u00c5\3\2\2\2\u00c8\u00ca\5\f\7\2\u00c9\u00c8\3\2\2\2")
        buf.write("\u00ca\u00cd\3\2\2\2\u00cb\u00c9\3\2\2\2\u00cb\u00cc\3")
        buf.write("\2\2\2\u00cc\u00d1\3\2\2\2\u00cd\u00cb\3\2\2\2\u00ce\u00d0")
        buf.write("\5\16\b\2\u00cf\u00ce\3\2\2\2\u00d0\u00d3\3\2\2\2\u00d1")
        buf.write("\u00cf\3\2\2\2\u00d1\u00d2\3\2\2\2\u00d2\u00d7\3\2\2\2")
        buf.write("\u00d3\u00d1\3\2\2\2\u00d4\u00d6\5\20\t\2\u00d5\u00d4")
        buf.write("\3\2\2\2\u00d6\u00d9\3\2\2\2\u00d7\u00d5\3\2\2\2\u00d7")
        buf.write("\u00d8\3\2\2\2\u00d8\u00dd\3\2\2\2\u00d9\u00d7\3\2\2\2")
        buf.write("\u00da\u00dc\5\22\n\2\u00db\u00da\3\2\2\2\u00dc\u00df")
        buf.write("\3\2\2\2\u00dd\u00db\3\2\2\2\u00dd\u00de\3\2\2\2\u00de")
        buf.write("\u00e3\3\2\2\2\u00df\u00dd\3\2\2\2\u00e0\u00e2\5\24\13")
        buf.write("\2\u00e1\u00e0\3\2\2\2\u00e2\u00e5\3\2\2\2\u00e3\u00e1")
        buf.write("\3\2\2\2\u00e3\u00e4\3\2\2\2\u00e4\u00e9\3\2\2\2\u00e5")
        buf.write("\u00e3\3\2\2\2\u00e6\u00e8\5\26\f\2\u00e7\u00e6\3\2\2")
        buf.write("\2\u00e8\u00eb\3\2\2\2\u00e9\u00e7\3\2\2\2\u00e9\u00ea")
        buf.write("\3\2\2\2\u00ea\u00ef\3\2\2\2\u00eb\u00e9\3\2\2\2\u00ec")
        buf.write("\u00ee\5\30\r\2\u00ed\u00ec\3\2\2\2\u00ee\u00f1\3\2\2")
        buf.write("\2\u00ef\u00ed\3\2\2\2\u00ef\u00f0\3\2\2\2\u00f0\u00f5")
        buf.write("\3\2\2\2\u00f1\u00ef\3\2\2\2\u00f2\u00f4\5\32\16\2\u00f3")
        buf.write("\u00f2\3\2\2\2\u00f4\u00f7\3\2\2\2\u00f5\u00f3\3\2\2\2")
        buf.write("\u00f5\u00f6\3\2\2\2\u00f6\u00fb\3\2\2\2\u00f7\u00f5\3")
        buf.write("\2\2\2\u00f8\u00fa\5\34\17\2\u00f9\u00f8\3\2\2\2\u00fa")
        buf.write("\u00fd\3\2\2\2\u00fb\u00f9\3\2\2\2\u00fb\u00fc\3\2\2\2")
        buf.write("\u00fc\u0101\3\2\2\2\u00fd\u00fb\3\2\2\2\u00fe\u0100\5")
        buf.write("\36\20\2\u00ff\u00fe\3\2\2\2\u0100\u0103\3\2\2\2\u0101")
        buf.write("\u00ff\3\2\2\2\u0101\u0102\3\2\2\2\u0102\u0107\3\2\2\2")
        buf.write("\u0103\u0101\3\2\2\2\u0104\u0106\5 \21\2\u0105\u0104\3")
        buf.write("\2\2\2\u0106\u0109\3\2\2\2\u0107\u0105\3\2\2\2\u0107\u0108")
        buf.write("\3\2\2\2\u0108\u010d\3\2\2\2\u0109\u0107\3\2\2\2\u010a")
        buf.write("\u010c\5\"\22\2\u010b\u010a\3\2\2\2\u010c\u010f\3\2\2")
        buf.write("\2\u010d\u010b\3\2\2\2\u010d\u010e\3\2\2\2\u010e\u0113")
        buf.write("\3\2\2\2\u010f\u010d\3\2\2\2\u0110\u0112\5$\23\2\u0111")
        buf.write("\u0110\3\2\2\2\u0112\u0115\3\2\2\2\u0113\u0111\3\2\2\2")
        buf.write("\u0113\u0114\3\2\2\2\u0114\u0119\3\2\2\2\u0115\u0113\3")
        buf.write("\2\2\2\u0116\u0118\5&\24\2\u0117\u0116\3\2\2\2\u0118\u011b")
        buf.write("\3\2\2\2\u0119\u0117\3\2\2\2\u0119\u011a\3\2\2\2\u011a")
        buf.write("\u011f\3\2\2\2\u011b\u0119\3\2\2\2\u011c\u011e\5(\25\2")
        buf.write("\u011d\u011c\3\2\2\2\u011e\u0121\3\2\2\2\u011f\u011d\3")
        buf.write("\2\2\2\u011f\u0120\3\2\2\2\u0120\u0125\3\2\2\2\u0121\u011f")
        buf.write("\3\2\2\2\u0122\u0124\5*\26\2\u0123\u0122\3\2\2\2\u0124")
        buf.write("\u0127\3\2\2\2\u0125\u0123\3\2\2\2\u0125\u0126\3\2\2\2")
        buf.write("\u0126\u012b\3\2\2\2\u0127\u0125\3\2\2\2\u0128\u012a\5")
        buf.write(",\27\2\u0129\u0128\3\2\2\2\u012a\u012d\3\2\2\2\u012b\u0129")
        buf.write("\3\2\2\2\u012b\u012c\3\2\2\2\u012c\u0131\3\2\2\2\u012d")
        buf.write("\u012b\3\2\2\2\u012e\u0130\5.\30\2\u012f\u012e\3\2\2\2")
        buf.write("\u0130\u0133\3\2\2\2\u0131\u012f\3\2\2\2\u0131\u0132\3")
        buf.write("\2\2\2\u0132\u0137\3\2\2\2\u0133\u0131\3\2\2\2\u0134\u0136")
        buf.write("\5\62\32\2\u0135\u0134\3\2\2\2\u0136\u0139\3\2\2\2\u0137")
        buf.write("\u0135\3\2\2\2\u0137\u0138\3\2\2\2\u0138\u013d\3\2\2\2")
        buf.write("\u0139\u0137\3\2\2\2\u013a\u013c\58\35\2\u013b\u013a\3")
        buf.write("\2\2\2\u013c\u013f\3\2\2\2\u013d\u013b\3\2\2\2\u013d\u013e")
        buf.write("\3\2\2\2\u013e\u0143\3\2\2\2\u013f\u013d\3\2\2\2\u0140")
        buf.write("\u0142\5<\37\2\u0141\u0140\3\2\2\2\u0142\u0145\3\2\2\2")
        buf.write("\u0143\u0141\3\2\2\2\u0143\u0144\3\2\2\2\u0144\u0149\3")
        buf.write("\2\2\2\u0145\u0143\3\2\2\2\u0146\u0148\5N(\2\u0147\u0146")
        buf.write("\3\2\2\2\u0148\u014b\3\2\2\2\u0149\u0147\3\2\2\2\u0149")
        buf.write("\u014a\3\2\2\2\u014a\u014f\3\2\2\2\u014b\u0149\3\2\2\2")
        buf.write("\u014c\u014e\5\u00a6T\2\u014d\u014c\3\2\2\2\u014e\u0151")
        buf.write("\3\2\2\2\u014f\u014d\3\2\2\2\u014f\u0150\3\2\2\2\u0150")
        buf.write("\u0152\3\2\2\2\u0151\u014f\3\2\2\2\u0152\u0153\7\2\2\3")
        buf.write("\u0153\3\3\2\2\2\u0154\u0155\7\4\2\2\u0155\u0156\7\u00aa")
        buf.write("\2\2\u0156\u0157\5\60\31\2\u0157\u0158\7\u00ab\2\2\u0158")
        buf.write("\u0159\7\3\2\2\u0159\5\3\2\2\2\u015a\u015b\7\"\2\2\u015b")
        buf.write("\u015c\7#\2\2\u015c\u015d\7\u00aa\2\2\u015d\u015e\5\66")
        buf.write("\34\2\u015e\u015f\7\u00ab\2\2\u015f\u0160\7\3\2\2\u0160")
        buf.write("\7\3\2\2\2\u0161\u0162\7%\2\2\u0162\u0163\7\u00aa\2\2")
        buf.write("\u0163\u0164\5:\36\2\u0164\u0165\7\u00ab\2\2\u0165\u0166")
        buf.write("\7\3\2\2\u0166\u0180\3\2\2\2\u0167\u0168\t\2\2\2\u0168")
        buf.write("\u0169\7\u00aa\2\2\u0169\u016a\5> \2\u016a\u016b\7\u00ab")
        buf.write("\2\2\u016b\u016c\7\3\2\2\u016c\u0180\3\2\2\2\u016d\u016e")
        buf.write("\7\60\2\2\u016e\u016f\7\u00aa\2\2\u016f\u0170\5B\"\2\u0170")
        buf.write("\u0171\7\u00ab\2\2\u0171\u0172\7\3\2\2\u0172\u0180\3\2")
        buf.write("\2\2\u0173\u0174\7\63\2\2\u0174\u0175\7\u00aa\2\2\u0175")
        buf.write("\u0176\5F$\2\u0176\u0177\7\u00ab\2\2\u0177\u0178\7\3\2")
        buf.write("\2\u0178\u0180\3\2\2\2\u0179\u017a\7\64\2\2\u017a\u017b")
        buf.write("\7\u00aa\2\2\u017b\u017c\5J&\2\u017c\u017d\7\u00ab\2\2")
        buf.write("\u017d\u017e\7\3\2\2\u017e\u0180\3\2\2\2\u017f\u0161\3")
        buf.write("\2\2\2\u017f\u0167\3\2\2\2\u017f\u016d\3\2\2\2\u017f\u0173")
        buf.write("\3\2\2\2\u017f\u0179\3\2\2\2\u0180\t\3\2\2\2\u0181\u0182")
        buf.write("\7\"\2\2\u0182\u0183\7\66\2\2\u0183\u0184\7\u00aa\2\2")
        buf.write("\u0184\u0185\5N(\2\u0185\u0186\7\u00ab\2\2\u0186\u0187")
        buf.write("\7\3\2\2\u0187\13\3\2\2\2\u0188\u0189\7;\2\2\u0189\u018a")
        buf.write("\7\u00aa\2\2\u018a\u018b\5R*\2\u018b\u018c\7\u00ab\2\2")
        buf.write("\u018c\u018d\7\3\2\2\u018d\r\3\2\2\2\u018e\u018f\7?\2")
        buf.write("\2\u018f\u0190\7\u00aa\2\2\u0190\u0191\5V,\2\u0191\u0192")
        buf.write("\7\u00ab\2\2\u0192\u0193\7\3\2\2\u0193\17\3\2\2\2\u0194")
        buf.write("\u0195\7B\2\2\u0195\u0196\7\u00aa\2\2\u0196\u0197\5Z.")
        buf.write("\2\u0197\u0198\7\u00ab\2\2\u0198\u0199\7\3\2\2\u0199\21")
        buf.write("\3\2\2\2\u019a\u019b\7F\2\2\u019b\u019c\7\u00aa\2\2\u019c")
        buf.write("\u019d\5`\61\2\u019d\u019e\7\u00ab\2\2\u019e\u019f\7\3")
        buf.write("\2\2\u019f\23\3\2\2\2\u01a0\u01a1\7P\2\2\u01a1\u01a2\7")
        buf.write("\u00aa\2\2\u01a2\u01a3\5t;\2\u01a3\u01a4\7\u00ab\2\2\u01a4")
        buf.write("\u01a5\7\3\2\2\u01a5\25\3\2\2\2\u01a6\u01a7\7X\2\2\u01a7")
        buf.write("\u01a8\7\u00aa\2\2\u01a8\u01a9\5x=\2\u01a9\u01aa\7\u00ab")
        buf.write("\2\2\u01aa\u01ab\7\3\2\2\u01ab\27\3\2\2\2\u01ac\u01ad")
        buf.write("\7Y\2\2\u01ad\u01ae\7\u00aa\2\2\u01ae\u01af\5z>\2\u01af")
        buf.write("\u01b0\7\u00ab\2\2\u01b0\u01b1\7\3\2\2\u01b1\31\3\2\2")
        buf.write("\2\u01b2\u01b3\7[\2\2\u01b3\u01b4\7\u00aa\2\2\u01b4\u01b5")
        buf.write("\5~@\2\u01b5\u01b6\7\u00ab\2\2\u01b6\u01b7\7\3\2\2\u01b7")
        buf.write("\33\3\2\2\2\u01b8\u01b9\7_\2\2\u01b9\u01ba\7\u00aa\2\2")
        buf.write("\u01ba\u01bb\5\u0082B\2\u01bb\u01bc\7\u00ab\2\2\u01bc")
        buf.write("\u01bd\7\3\2\2\u01bd\35\3\2\2\2\u01be\u01bf\7b\2\2\u01bf")
        buf.write("\u01c0\7\u00aa\2\2\u01c0\u01c1\5\u0086D\2\u01c1\u01c2")
        buf.write("\7\u00ab\2\2\u01c2\u01c3\7\3\2\2\u01c3\37\3\2\2\2\u01c4")
        buf.write("\u01c5\7c\2\2\u01c5\u01c6\7\u00aa\2\2\u01c6\u01c7\5\u0088")
        buf.write("E\2\u01c7\u01c8\7\u00ab\2\2\u01c8\u01c9\7\3\2\2\u01c9")
        buf.write("!\3\2\2\2\u01ca\u01cb\7d\2\2\u01cb\u01cc\7\u00aa\2\2\u01cc")
        buf.write("\u01cd\5\u008cG\2\u01cd\u01ce\7\u00ab\2\2\u01ce\u01cf")
        buf.write("\7\3\2\2\u01cf#\3\2\2\2\u01d0\u01d1\7g\2\2\u01d1\u01d2")
        buf.write("\7\u00aa\2\2\u01d2\u01d3\5\u0090I\2\u01d3\u01d4\7\u00ab")
        buf.write("\2\2\u01d4\u01d5\7\3\2\2\u01d5%\3\2\2\2\u01d6\u01d7\7")
        buf.write("l\2\2\u01d7\u01d8\7\u00aa\2\2\u01d8\u01d9\5\u0094K\2\u01d9")
        buf.write("\u01da\7\u00ab\2\2\u01da\u01db\7\3\2\2\u01db\'\3\2\2\2")
        buf.write("\u01dc\u01dd\7w\2\2\u01dd\u01de\7\u00aa\2\2\u01de\u01df")
        buf.write("\5\u0098M\2\u01df\u01e0\7\u00ab\2\2\u01e0\u01e1\7\3\2")
        buf.write("\2\u01e1)\3\2\2\2\u01e2\u01e3\7x\2\2\u01e3\u01e4\7\u00aa")
        buf.write("\2\2\u01e4\u01e5\5\u009cO\2\u01e5\u01e6\7\u00ab\2\2\u01e6")
        buf.write("\u01e7\7\3\2\2\u01e7+\3\2\2\2\u01e8\u01e9\7y\2\2\u01e9")
        buf.write("\u01ea\7\u00aa\2\2\u01ea\u01eb\5\u00a0Q\2\u01eb\u01ec")
        buf.write("\7\u00ab\2\2\u01ec\u01ed\7\3\2\2\u01ed-\3\2\2\2\u01ee")
        buf.write("\u01ef\7{\2\2\u01ef\u01f0\7\u00aa\2\2\u01f0\u01f1\5\u00a4")
        buf.write("S\2\u01f1\u01f2\7\u00ab\2\2\u01f2\u01f3\7\3\2\2\u01f3")
        buf.write("/\3\2\2\2\u01f4\u01f6\5\62\32\2\u01f5\u01f4\3\2\2\2\u01f6")
        buf.write("\u01f9\3\2\2\2\u01f7\u01f5\3\2\2\2\u01f7\u01f8\3\2\2\2")
        buf.write("\u01f8\u023d\3\2\2\2\u01f9\u01f7\3\2\2\2\u01fa\u01fb\7")
        buf.write("\6\2\2\u01fb\u01fc\7\u00a6\2\2\u01fc\u023d\7\u00a3\2\2")
        buf.write("\u01fd\u01fe\7\7\2\2\u01fe\u01ff\7\u00a6\2\2\u01ff\u023d")
        buf.write("\7\34\2\2\u0200\u0201\7\b\2\2\u0201\u0202\7\u00a6\2\2")
        buf.write("\u0202\u023d\7\u00a3\2\2\u0203\u0204\7\t\2\2\u0204\u0205")
        buf.write("\7\u00ad\2\2\u0205\u023d\7\u00a3\2\2\u0206\u0207\7\n\2")
        buf.write("\2\u0207\u023d\7\u00a5\2\2\u0208\u0209\7\13\2\2\u0209")
        buf.write("\u023d\7\u00a5\2\2\u020a\u020b\7\f\2\2\u020b\u020c\7\u00a5")
        buf.write("\2\2\u020c\u020d\7\u00a5\2\2\u020d\u023d\7\u00a3\2\2\u020e")
        buf.write("\u020f\7\r\2\2\u020f\u0210\7\u00a6\2\2\u0210\u023d\7\u00a1")
        buf.write("\2\2\u0211\u0212\7\16\2\2\u0212\u0213\7\u00a6\2\2\u0213")
        buf.write("\u023d\7\u00a1\2\2\u0214\u0215\7\17\2\2\u0215\u0216\7")
        buf.write("\u00ad\2\2\u0216\u023d\7\u00a1\2\2\u0217\u0218\7\20\2")
        buf.write("\2\u0218\u0219\7\u00a6\2\2\u0219\u023d\7\35\2\2\u021a")
        buf.write("\u021b\7\21\2\2\u021b\u021c\7\u00aa\2\2\u021c\u021d\5")
        buf.write("\64\33\2\u021d\u021e\7\u00ab\2\2\u021e\u021f\7\3\2\2\u021f")
        buf.write("\u023d\3\2\2\2\u0220\u0221\7\22\2\2\u0221\u0223\7\23\2")
        buf.write("\2\u0222\u0224\7\u00ad\2\2\u0223\u0222\3\2\2\2\u0223\u0224")
        buf.write("\3\2\2\2\u0224\u0225\3\2\2\2\u0225\u023d\7\u00a3\2\2\u0226")
        buf.write("\u023d\7\24\2\2\u0227\u0228\7\25\2\2\u0228\u0229\7\u00a6")
        buf.write("\2\2\u0229\u023d\7\u00a3\2\2\u022a\u022b\7\26\2\2\u022b")
        buf.write("\u022c\7\u00a6\2\2\u022c\u023d\7\u00a3\2\2\u022d\u022e")
        buf.write("\7\27\2\2\u022e\u022f\7\u00a6\2\2\u022f\u023d\7\u00a3")
        buf.write("\2\2\u0230\u0231\7\30\2\2\u0231\u0232\7\u00a6\2\2\u0232")
        buf.write("\u023d\7\u00a3\2\2\u0233\u0234\7\31\2\2\u0234\u0235\7")
        buf.write("\u00a6\2\2\u0235\u023d\7\u00a3\2\2\u0236\u0237\7\32\2")
        buf.write("\2\u0237\u0238\7\u00a6\2\2\u0238\u023d\7\u00a3\2\2\u0239")
        buf.write("\u023a\7\33\2\2\u023a\u023b\7\u00ad\2\2\u023b\u023d\7")
        buf.write("\u00a3\2\2\u023c\u01f7\3\2\2\2\u023c\u01fa\3\2\2\2\u023c")
        buf.write("\u01fd\3\2\2\2\u023c\u0200\3\2\2\2\u023c\u0203\3\2\2\2")
        buf.write("\u023c\u0206\3\2\2\2\u023c\u0208\3\2\2\2\u023c\u020a\3")
        buf.write("\2\2\2\u023c\u020e\3\2\2\2\u023c\u0211\3\2\2\2\u023c\u0214")
        buf.write("\3\2\2\2\u023c\u0217\3\2\2\2\u023c\u021a\3\2\2\2\u023c")
        buf.write("\u0220\3\2\2\2\u023c\u0226\3\2\2\2\u023c\u0227\3\2\2\2")
        buf.write("\u023c\u022a\3\2\2\2\u023c\u022d\3\2\2\2\u023c\u0230\3")
        buf.write("\2\2\2\u023c\u0233\3\2\2\2\u023c\u0236\3\2\2\2\u023c\u0239")
        buf.write("\3\2\2\2\u023d\61\3\2\2\2\u023e\u023f\7\5\2\2\u023f\u0240")
        buf.write("\5\u00a8U\2\u0240\u0241\5\u00a8U\2\u0241\u0242\7\u00a3")
        buf.write("\2\2\u0242\u0243\7\u00a3\2\2\u0243\u024a\7\u00a3\2\2\u0244")
        buf.write("\u0245\7\u009c\2\2\u0245\u0246\5\u00a8U\2\u0246\u0247")
        buf.write("\5\u00a8U\2\u0247\u0249\3\2\2\2\u0248\u0244\3\2\2\2\u0249")
        buf.write("\u024c\3\2\2\2\u024a\u0248\3\2\2\2\u024a\u024b\3\2\2\2")
        buf.write("\u024b\63\3\2\2\2\u024c\u024a\3\2\2\2\u024d\u024e\7\36")
        buf.write("\2\2\u024e\u024f\7\u00ad\2\2\u024f\u0258\7\u00a3\2\2\u0250")
        buf.write("\u0251\7\37\2\2\u0251\u0252\7\u00ad\2\2\u0252\u0258\7")
        buf.write("\u00a3\2\2\u0253\u0254\7 \2\2\u0254\u0258\5\u00a8U\2\u0255")
        buf.write("\u0256\7!\2\2\u0256\u0258\5\u00a8U\2\u0257\u024d\3\2\2")
        buf.write("\2\u0257\u0250\3\2\2\2\u0257\u0253\3\2\2\2\u0257\u0255")
        buf.write("\3\2\2\2\u0258\65\3\2\2\2\u0259\u025b\58\35\2\u025a\u0259")
        buf.write("\3\2\2\2\u025b\u025e\3\2\2\2\u025c\u025a\3\2\2\2\u025c")
        buf.write("\u025d\3\2\2\2\u025d\u0266\3\2\2\2\u025e\u025c\3\2\2\2")
        buf.write("\u025f\u0260\7$\2\2\u0260\u0261\7\u00ad\2\2\u0261\u0266")
        buf.write("\7\u00a1\2\2\u0262\u0266\7\24\2\2\u0263\u0264\7\26\2\2")
        buf.write("\u0264\u0266\7\u00a3\2\2\u0265\u025c\3\2\2\2\u0265\u025f")
        buf.write("\3\2\2\2\u0265\u0262\3\2\2\2\u0265\u0263\3\2\2\2\u0266")
        buf.write("\67\3\2\2\2\u0267\u0268\7\5\2\2\u0268\u0269\5\u00a8U\2")
        buf.write("\u0269\u026a\5\u00a8U\2\u026a\u026b\5\u00a8U\2\u026b\u026c")
        buf.write("\5\u00a8U\2\u026c\u026d\7\u00a3\2\2\u026d\u026e\7\u00a3")
        buf.write("\2\2\u026e\u026f\7\u00a3\2\2\u026f\u0270\7\u00a1\2\2\u0270")
        buf.write("9\3\2\2\2\u0271\u0273\5<\37\2\u0272\u0271\3\2\2\2\u0273")
        buf.write("\u0276\3\2\2\2\u0274\u0272\3\2\2\2\u0274\u0275\3\2\2\2")
        buf.write("\u0275\u0288\3\2\2\2\u0276\u0274\3\2\2\2\u0277\u0278\7")
        buf.write("\n\2\2\u0278\u0288\7\u00a5\2\2\u0279\u027a\7&\2\2\u027a")
        buf.write("\u027b\7\u00a3\2\2\u027b\u027c\7\u00a3\2\2\u027c\u0288")
        buf.write("\7\u00a3\2\2\u027d\u027e\7\'\2\2\u027e\u0288\7\u00a3\2")
        buf.write("\2\u027f\u0280\7\17\2\2\u0280\u0288\7\u00a1\2\2\u0281")
        buf.write("\u0282\7\20\2\2\u0282\u0288\7(\2\2\u0283\u0284\7\22\2")
        buf.write("\2\u0284\u0285\7\23\2\2\u0285\u0288\7\u00a3\2\2\u0286")
        buf.write("\u0288\7\24\2\2\u0287\u0274\3\2\2\2\u0287\u0277\3\2\2")
        buf.write("\2\u0287\u0279\3\2\2\2\u0287\u027d\3\2\2\2\u0287\u027f")
        buf.write("\3\2\2\2\u0287\u0281\3\2\2\2\u0287\u0283\3\2\2\2\u0287")
        buf.write("\u0286\3\2\2\2\u0288;\3\2\2\2\u0289\u028a\7\5\2\2\u028a")
        buf.write("\u028b\5\u00a8U\2\u028b\u028c\5\u00a8U\2\u028c\u028d\5")
        buf.write("\u00a8U\2\u028d\u028e\5\u00a8U\2\u028e\u028f\5\u00a8U")
        buf.write("\2\u028f\u0290\5\u00a8U\2\u0290\u0291\7\u00a3\2\2\u0291")
        buf.write("\u0292\7\u00a3\2\2\u0292=\3\2\2\2\u0293\u0295\5@!\2\u0294")
        buf.write("\u0293\3\2\2\2\u0295\u0298\3\2\2\2\u0296\u0294\3\2\2\2")
        buf.write("\u0296\u0297\3\2\2\2\u0297\u02b2\3\2\2\2\u0298\u0296\3")
        buf.write("\2\2\2\u0299\u029a\7\n\2\2\u029a\u02b2\7\u00a5\2\2\u029b")
        buf.write("\u029c\7+\2\2\u029c\u02b2\7.\2\2\u029d\u029e\7\26\2\2")
        buf.write("\u029e\u02b2\7\u00a3\2\2\u029f\u02a0\7,\2\2\u02a0\u02b2")
        buf.write("\7\u00a2\2\2\u02a1\u02a2\7-\2\2\u02a2\u02b2\7/\2\2\u02a3")
        buf.write("\u02a4\7&\2\2\u02a4\u02a5\7\u00a3\2\2\u02a5\u02a6\7\u00a3")
        buf.write("\2\2\u02a6\u02b2\7\u00a3\2\2\u02a7\u02a8\7\'\2\2\u02a8")
        buf.write("\u02b2\7\u00a3\2\2\u02a9\u02aa\7\17\2\2\u02aa\u02b2\7")
        buf.write("\u00a1\2\2\u02ab\u02ac\7\20\2\2\u02ac\u02b2\7(\2\2\u02ad")
        buf.write("\u02ae\7\22\2\2\u02ae\u02af\7\23\2\2\u02af\u02b2\7\u00a3")
        buf.write("\2\2\u02b0\u02b2\7\24\2\2\u02b1\u0296\3\2\2\2\u02b1\u0299")
        buf.write("\3\2\2\2\u02b1\u029b\3\2\2\2\u02b1\u029d\3\2\2\2\u02b1")
        buf.write("\u029f\3\2\2\2\u02b1\u02a1\3\2\2\2\u02b1\u02a3\3\2\2\2")
        buf.write("\u02b1\u02a7\3\2\2\2\u02b1\u02a9\3\2\2\2\u02b1\u02ab\3")
        buf.write("\2\2\2\u02b1\u02ad\3\2\2\2\u02b1\u02b0\3\2\2\2\u02b2?")
        buf.write("\3\2\2\2\u02b3\u02b4\7\5\2\2\u02b4\u02b5\5\u00a8U\2\u02b5")
        buf.write("\u02b6\5\u00a8U\2\u02b6\u02b7\5\u00a8U\2\u02b7\u02b8\5")
        buf.write("\u00a8U\2\u02b8\u02b9\5\u00a8U\2\u02b9\u02ba\5\u00a8U")
        buf.write("\2\u02ba\u02bb\7\u00a3\2\2\u02bb\u02bc\7\u00a3\2\2\u02bc")
        buf.write("\u02c0\7\u00a3\2\2\u02bd\u02be\7\u00a3\2\2\u02be\u02bf")
        buf.write("\7\u00a3\2\2\u02bf\u02c1\7\u00a3\2\2\u02c0\u02bd\3\2\2")
        buf.write("\2\u02c0\u02c1\3\2\2\2\u02c1A\3\2\2\2\u02c2\u02c4\5D#")
        buf.write("\2\u02c3\u02c2\3\2\2\2\u02c4\u02c7\3\2\2\2\u02c5\u02c3")
        buf.write("\3\2\2\2\u02c5\u02c6\3\2\2\2\u02c6\u02da\3\2\2\2\u02c7")
        buf.write("\u02c5\3\2\2\2\u02c8\u02c9\7\61\2\2\u02c9\u02ca\7\u00ad")
        buf.write("\2\2\u02ca\u02da\7\u00a1\2\2\u02cb\u02cc\7\n\2\2\u02cc")
        buf.write("\u02da\7\u00a5\2\2\u02cd\u02ce\7\'\2\2\u02ce\u02cf\7\u00a3")
        buf.write("\2\2\u02cf\u02da\7\u00a3\2\2\u02d0\u02d1\7\17\2\2\u02d1")
        buf.write("\u02da\7\u00a1\2\2\u02d2\u02d3\7\62\2\2\u02d3\u02d4\7")
        buf.write("\u00ad\2\2\u02d4\u02da\7\u00a1\2\2\u02d5\u02d6\7\22\2")
        buf.write("\2\u02d6\u02d7\7\23\2\2\u02d7\u02da\7\u00a3\2\2\u02d8")
        buf.write("\u02da\7\24\2\2\u02d9\u02c5\3\2\2\2\u02d9\u02c8\3\2\2")
        buf.write("\2\u02d9\u02cb\3\2\2\2\u02d9\u02cd\3\2\2\2\u02d9\u02d0")
        buf.write("\3\2\2\2\u02d9\u02d2\3\2\2\2\u02d9\u02d5\3\2\2\2\u02d9")
        buf.write("\u02d8\3\2\2\2\u02daC\3\2\2\2\u02db\u02dc\7\5\2\2\u02dc")
        buf.write("\u02dd\5\u00a8U\2\u02dd\u02de\5\u00a8U\2\u02de\u02df\5")
        buf.write("\u00a8U\2\u02df\u02e0\5\u00a8U\2\u02e0\u02e1\7\u00a3\2")
        buf.write("\2\u02e1\u02e2\7\u00a3\2\2\u02e2\u02e3\7\u00a3\2\2\u02e3")
        buf.write("\u02e4\7\u00a3\2\2\u02e4E\3\2\2\2\u02e5\u02e7\5H%\2\u02e6")
        buf.write("\u02e5\3\2\2\2\u02e7\u02ea\3\2\2\2\u02e8\u02e6\3\2\2\2")
        buf.write("\u02e8\u02e9\3\2\2\2\u02e9\u02f8\3\2\2\2\u02ea\u02e8\3")
        buf.write("\2\2\2\u02eb\u02ec\7\n\2\2\u02ec\u02f8\7\u00a5\2\2\u02ed")
        buf.write("\u02ee\7&\2\2\u02ee\u02f8\7\u00a3\2\2\u02ef\u02f0\7\17")
        buf.write("\2\2\u02f0\u02f8\7\u00a1\2\2\u02f1\u02f2\7\20\2\2\u02f2")
        buf.write("\u02f8\7(\2\2\u02f3\u02f4\7\22\2\2\u02f4\u02f5\7\23\2")
        buf.write("\2\u02f5\u02f8\7\u00a3\2\2\u02f6\u02f8\7\24\2\2\u02f7")
        buf.write("\u02e8\3\2\2\2\u02f7\u02eb\3\2\2\2\u02f7\u02ed\3\2\2\2")
        buf.write("\u02f7\u02ef\3\2\2\2\u02f7\u02f1\3\2\2\2\u02f7\u02f3\3")
        buf.write("\2\2\2\u02f7\u02f6\3\2\2\2\u02f8G\3\2\2\2\u02f9\u02fa")
        buf.write("\7\5\2\2\u02fa\u02fb\5\u00a8U\2\u02fb\u02fc\5\u00a8U\2")
        buf.write("\u02fc\u02fd\7\u00a3\2\2\u02fd\u02fe\7\u00a3\2\2\u02fe")
        buf.write("I\3\2\2\2\u02ff\u0301\5L\'\2\u0300\u02ff\3\2\2\2\u0301")
        buf.write("\u0304\3\2\2\2\u0302\u0300\3\2\2\2\u0302\u0303\3\2\2\2")
        buf.write("\u0303\u0319\3\2\2\2\u0304\u0302\3\2\2\2\u0305\u0306\7")
        buf.write("\n\2\2\u0306\u0319\7\u00a5\2\2\u0307\u0308\7&\2\2\u0308")
        buf.write("\u0309\7\u00a3\2\2\u0309\u030a\7\u00a3\2\2\u030a\u030b")
        buf.write("\7\u00a3\2\2\u030b\u0319\7\u00a3\2\2\u030c\u030d\7\'\2")
        buf.write("\2\u030d\u0319\7\u00a3\2\2\u030e\u030f\7\17\2\2\u030f")
        buf.write("\u0319\7\u00a1\2\2\u0310\u0311\7\20\2\2\u0311\u0319\7")
        buf.write("(\2\2\u0312\u0313\7\22\2\2\u0313\u0314\7\23\2\2\u0314")
        buf.write("\u0319\7\u00a3\2\2\u0315\u0319\7\24\2\2\u0316\u0317\7")
        buf.write("+\2\2\u0317\u0319\7\65\2\2\u0318\u0302\3\2\2\2\u0318\u0305")
        buf.write("\3\2\2\2\u0318\u0307\3\2\2\2\u0318\u030c\3\2\2\2\u0318")
        buf.write("\u030e\3\2\2\2\u0318\u0310\3\2\2\2\u0318\u0312\3\2\2\2")
        buf.write("\u0318\u0315\3\2\2\2\u0318\u0316\3\2\2\2\u0319K\3\2\2")
        buf.write("\2\u031a\u031b\7\5\2\2\u031b\u031c\5\u00a8U\2\u031c\u031d")
        buf.write("\5\u00a8U\2\u031d\u031e\5\u00a8U\2\u031e\u031f\5\u00a8")
        buf.write("U\2\u031f\u0320\7\u00a3\2\2\u0320\u0321\7\u00a3\2\2\u0321")
        buf.write("M\3\2\2\2\u0322\u0323\7\67\2\2\u0323\u0324\7\u00aa\2\2")
        buf.write("\u0324\u0325\5P)\2\u0325\u0326\7\u00ab\2\2\u0326\u0329")
        buf.write("\3\2\2\2\u0327\u0329\78\2\2\u0328\u0322\3\2\2\2\u0328")
        buf.write("\u0327\3\2\2\2\u0329O\3\2\2\2\u032a\u032b\79\2\2\u032b")
        buf.write("\u032c\7\u00ad\2\2\u032c\u0331\5\u00a8U\2\u032d\u032e")
        buf.write("\7:\2\2\u032e\u032f\7\u00ad\2\2\u032f\u0331\7\u00a3\2")
        buf.write("\2\u0330\u032a\3\2\2\2\u0330\u032d\3\2\2\2\u0331Q\3\2")
        buf.write("\2\2\u0332\u0334\5T+\2\u0333\u0332\3\2\2\2\u0334\u0337")
        buf.write("\3\2\2\2\u0335\u0333\3\2\2\2\u0335\u0336\3\2\2\2\u0336")
        buf.write("\u034f\3\2\2\2\u0337\u0335\3\2\2\2\u0338\u0339\7\n\2\2")
        buf.write("\u0339\u034f\7\u00a5\2\2\u033a\u033b\7<\2\2\u033b\u033c")
        buf.write("\7\u00a1\2\2\u033c\u034f\7\u00a3\2\2\u033d\u033e\7\'\2")
        buf.write("\2\u033e\u034f\7\u00a3\2\2\u033f\u0340\7\17\2\2\u0340")
        buf.write("\u034f\7\u00a1\2\2\u0341\u0342\7\22\2\2\u0342\u0343\7")
        buf.write("\23\2\2\u0343\u0347\7\u00a3\2\2\u0344\u0348\7|\2\2\u0345")
        buf.write("\u0346\7\n\2\2\u0346\u0348\7\u00a5\2\2\u0347\u0344\3\2")
        buf.write("\2\2\u0347\u0345\3\2\2\2\u0348\u034f\3\2\2\2\u0349\u034f")
        buf.write("\7\24\2\2\u034a\u034b\7=\2\2\u034b\u034c\7\u00a3\2\2\u034c")
        buf.write("\u034f\7\u00a1\2\2\u034d\u034f\7>\2\2\u034e\u0335\3\2")
        buf.write("\2\2\u034e\u0338\3\2\2\2\u034e\u033a\3\2\2\2\u034e\u033d")
        buf.write("\3\2\2\2\u034e\u033f\3\2\2\2\u034e\u0341\3\2\2\2\u034e")
        buf.write("\u0349\3\2\2\2\u034e\u034a\3\2\2\2\u034e\u034d\3\2\2\2")
        buf.write("\u034fS\3\2\2\2\u0350\u0351\7\5\2\2\u0351\u0352\5\u00a8")
        buf.write("U\2\u0352\u0353\5\u00a8U\2\u0353U\3\2\2\2\u0354\u0356")
        buf.write("\5X-\2\u0355\u0354\3\2\2\2\u0356\u0359\3\2\2\2\u0357\u0355")
        buf.write("\3\2\2\2\u0357\u0358\3\2\2\2\u0358\u037c\3\2\2\2\u0359")
        buf.write("\u0357\3\2\2\2\u035a\u035b\7\n\2\2\u035b\u037c\7\u00a5")
        buf.write("\2\2\u035c\u035d\7&\2\2\u035d\u035e\7\u00a3\2\2\u035e")
        buf.write("\u035f\7\u00a3\2\2\u035f\u0360\7\u00a3\2\2\u0360\u037c")
        buf.write("\7\u00a3\2\2\u0361\u0362\7\61\2\2\u0362\u0363\7\u00ad")
        buf.write("\2\2\u0363\u037c\7\u00a1\2\2\u0364\u0365\7@\2\2\u0365")
        buf.write("\u037c\7\u00a1\2\2\u0366\u0367\7\'\2\2\u0367\u0369\7\u00a3")
        buf.write("\2\2\u0368\u036a\7\u00a3\2\2\u0369\u0368\3\2\2\2\u0369")
        buf.write("\u036a\3\2\2\2\u036a\u037c\3\2\2\2\u036b\u036c\7\17\2")
        buf.write("\2\u036c\u037c\7\u00a1\2\2\u036d\u036e\7\62\2\2\u036e")
        buf.write("\u036f\7\u00ad\2\2\u036f\u037c\7\u00a1\2\2\u0370\u0371")
        buf.write("\7\20\2\2\u0371\u037c\7A\2\2\u0372\u0373\7\22\2\2\u0373")
        buf.write("\u0374\7\23\2\2\u0374\u0378\7\u00a3\2\2\u0375\u0379\7")
        buf.write("|\2\2\u0376\u0377\7\n\2\2\u0377\u0379\7\u00a5\2\2\u0378")
        buf.write("\u0375\3\2\2\2\u0378\u0376\3\2\2\2\u0379\u037c\3\2\2\2")
        buf.write("\u037a\u037c\7\24\2\2\u037b\u0357\3\2\2\2\u037b\u035a")
        buf.write("\3\2\2\2\u037b\u035c\3\2\2\2\u037b\u0361\3\2\2\2\u037b")
        buf.write("\u0364\3\2\2\2\u037b\u0366\3\2\2\2\u037b\u036b\3\2\2\2")
        buf.write("\u037b\u036d\3\2\2\2\u037b\u0370\3\2\2\2\u037b\u0372\3")
        buf.write("\2\2\2\u037b\u037a\3\2\2\2\u037cW\3\2\2\2\u037d\u037e")
        buf.write("\7\5\2\2\u037e\u037f\5\u00a8U\2\u037f\u0380\5\u00a8U\2")
        buf.write("\u0380\u0381\5\u00a8U\2\u0381\u0387\5\u00a8U\2\u0382\u0383")
        buf.write("\5\u00a8U\2\u0383\u0384\5\u00a8U\2\u0384\u0385\5\u00a8")
        buf.write("U\2\u0385\u0386\5\u00a8U\2\u0386\u0388\3\2\2\2\u0387\u0382")
        buf.write("\3\2\2\2\u0387\u0388\3\2\2\2\u0388\u0389\3\2\2\2\u0389")
        buf.write("\u038a\7\u00a3\2\2\u038a\u038d\7\u00a3\2\2\u038b\u038c")
        buf.write("\7\u00a3\2\2\u038c\u038e\7\u00a3\2\2\u038d\u038b\3\2\2")
        buf.write("\2\u038d\u038e\3\2\2\2\u038eY\3\2\2\2\u038f\u0391\5\\")
        buf.write("/\2\u0390\u038f\3\2\2\2\u0391\u0394\3\2\2\2\u0392\u0390")
        buf.write("\3\2\2\2\u0392\u0393\3\2\2\2\u0393\u03b3\3\2\2\2\u0394")
        buf.write("\u0392\3\2\2\2\u0395\u0396\7\n\2\2\u0396\u03b3\7\u00a5")
        buf.write("\2\2\u0397\u0398\7<\2\2\u0398\u0399\7\u00a1\2\2\u0399")
        buf.write("\u039a\7\u00a1\2\2\u039a\u039b\7\u00a3\2\2\u039b\u039c")
        buf.write("\7\u00a3\2\2\u039c\u03b3\7\u00a3\2\2\u039d\u039e\7\'\2")
        buf.write("\2\u039e\u03b3\7\u00a3\2\2\u039f\u03a0\7\17\2\2\u03a0")
        buf.write("\u03b3\7\u00a1\2\2\u03a1\u03a2\7C\2\2\u03a2\u03b3\7\u00a3")
        buf.write("\2\2\u03a3\u03a4\7D\2\2\u03a4\u03b3\7\u00a3\2\2\u03a5")
        buf.write("\u03a6\7\20\2\2\u03a6\u03b3\7A\2\2\u03a7\u03a8\7\22\2")
        buf.write("\2\u03a8\u03a9\7\23\2\2\u03a9\u03b3\7\u00a3\2\2\u03aa")
        buf.write("\u03ac\5^\60\2\u03ab\u03aa\3\2\2\2\u03ac\u03af\3\2\2\2")
        buf.write("\u03ad\u03ab\3\2\2\2\u03ad\u03ae\3\2\2\2\u03ae\u03b3\3")
        buf.write("\2\2\2\u03af\u03ad\3\2\2\2\u03b0\u03b3\7\24\2\2\u03b1")
        buf.write("\u03b3\7>\2\2\u03b2\u0392\3\2\2\2\u03b2\u0395\3\2\2\2")
        buf.write("\u03b2\u0397\3\2\2\2\u03b2\u039d\3\2\2\2\u03b2\u039f\3")
        buf.write("\2\2\2\u03b2\u03a1\3\2\2\2\u03b2\u03a3\3\2\2\2\u03b2\u03a5")
        buf.write("\3\2\2\2\u03b2\u03a7\3\2\2\2\u03b2\u03ad\3\2\2\2\u03b2")
        buf.write("\u03b0\3\2\2\2\u03b2\u03b1\3\2\2\2\u03b3[\3\2\2\2\u03b4")
        buf.write("\u03b5\7\5\2\2\u03b5\u03b6\5\u00a8U\2\u03b6\u03b7\5\u00a8")
        buf.write("U\2\u03b7\u03b8\5\u00a8U\2\u03b8\u03b9\5\u00a8U\2\u03b9")
        buf.write("\u03ba\5\u00a8U\2\u03ba\u03bb\7\u00a3\2\2\u03bb\u03bc")
        buf.write("\7\u00a3\2\2\u03bc]\3\2\2\2\u03bd\u03be\7E\2\2\u03be\u03bf")
        buf.write("\5\u00a8U\2\u03bf\u03c0\7\u00a3\2\2\u03c0\u03c1\7\u00a3")
        buf.write("\2\2\u03c1_\3\2\2\2\u03c2\u03c4\5b\62\2\u03c3\u03c2\3")
        buf.write("\2\2\2\u03c4\u03c7\3\2\2\2\u03c5\u03c3\3\2\2\2\u03c5\u03c6")
        buf.write("\3\2\2\2\u03c6\u0410\3\2\2\2\u03c7\u03c5\3\2\2\2\u03c8")
        buf.write("\u03ca\5d\63\2\u03c9\u03c8\3\2\2\2\u03ca\u03cd\3\2\2\2")
        buf.write("\u03cb\u03c9\3\2\2\2\u03cb\u03cc\3\2\2\2\u03cc\u0410\3")
        buf.write("\2\2\2\u03cd\u03cb\3\2\2\2\u03ce\u03d0\5f\64\2\u03cf\u03ce")
        buf.write("\3\2\2\2\u03d0\u03d3\3\2\2\2\u03d1\u03cf\3\2\2\2\u03d1")
        buf.write("\u03d2\3\2\2\2\u03d2\u0410\3\2\2\2\u03d3\u03d1\3\2\2\2")
        buf.write("\u03d4\u03d6\5h\65\2\u03d5\u03d4\3\2\2\2\u03d6\u03d9\3")
        buf.write("\2\2\2\u03d7\u03d5\3\2\2\2\u03d7\u03d8\3\2\2\2\u03d8\u0410")
        buf.write("\3\2\2\2\u03d9\u03d7\3\2\2\2\u03da\u03dc\5j\66\2\u03db")
        buf.write("\u03da\3\2\2\2\u03dc\u03df\3\2\2\2\u03dd\u03db\3\2\2\2")
        buf.write("\u03dd\u03de\3\2\2\2\u03de\u0410\3\2\2\2\u03df\u03dd\3")
        buf.write("\2\2\2\u03e0\u03e2\5l\67\2\u03e1\u03e0\3\2\2\2\u03e2\u03e5")
        buf.write("\3\2\2\2\u03e3\u03e1\3\2\2\2\u03e3\u03e4\3\2\2\2\u03e4")
        buf.write("\u0410\3\2\2\2\u03e5\u03e3\3\2\2\2\u03e6\u03e8\5n8\2\u03e7")
        buf.write("\u03e6\3\2\2\2\u03e8\u03eb\3\2\2\2\u03e9\u03e7\3\2\2\2")
        buf.write("\u03e9\u03ea\3\2\2\2\u03ea\u0410\3\2\2\2\u03eb\u03e9\3")
        buf.write("\2\2\2\u03ec\u03ee\5p9\2\u03ed\u03ec\3\2\2\2\u03ee\u03f1")
        buf.write("\3\2\2\2\u03ef\u03ed\3\2\2\2\u03ef\u03f0\3\2\2\2\u03f0")
        buf.write("\u0410\3\2\2\2\u03f1\u03ef\3\2\2\2\u03f2\u03f4\5r:\2\u03f3")
        buf.write("\u03f2\3\2\2\2\u03f4\u03f7\3\2\2\2\u03f5\u03f3\3\2\2\2")
        buf.write("\u03f5\u03f6\3\2\2\2\u03f6\u0410\3\2\2\2\u03f7\u03f5\3")
        buf.write("\2\2\2\u03f8\u03f9\7\n\2\2\u03f9\u0410\7\u00a5\2\2\u03fa")
        buf.write("\u03fb\7N\2\2\u03fb\u0410\7\u00a3\2\2\u03fc\u03fd\7@\2")
        buf.write("\2\u03fd\u0410\7\u00a1\2\2\u03fe\u03ff\7\'\2\2\u03ff\u0401")
        buf.write("\7\u00a3\2\2\u0400\u0402\7\u00a3\2\2\u0401\u0400\3\2\2")
        buf.write("\2\u0401\u0402\3\2\2\2\u0402\u0410\3\2\2\2\u0403\u0404")
        buf.write("\7\20\2\2\u0404\u0410\7A\2\2\u0405\u0406\7\22\2\2\u0406")
        buf.write("\u0407\7\23\2\2\u0407\u040b\7\u00a3\2\2\u0408\u040c\7")
        buf.write("|\2\2\u0409\u040a\7\n\2\2\u040a\u040c\7\u00a5\2\2\u040b")
        buf.write("\u0408\3\2\2\2\u040b\u0409\3\2\2\2\u040c\u040d\3\2\2\2")
        buf.write("\u040d\u0410\7\u00a5\2\2\u040e\u0410\7\24\2\2\u040f\u03c5")
        buf.write("\3\2\2\2\u040f\u03cb\3\2\2\2\u040f\u03d1\3\2\2\2\u040f")
        buf.write("\u03d7\3\2\2\2\u040f\u03dd\3\2\2\2\u040f\u03e3\3\2\2\2")
        buf.write("\u040f\u03e9\3\2\2\2\u040f\u03ef\3\2\2\2\u040f\u03f5\3")
        buf.write("\2\2\2\u040f\u03f8\3\2\2\2\u040f\u03fa\3\2\2\2\u040f\u03fc")
        buf.write("\3\2\2\2\u040f\u03fe\3\2\2\2\u040f\u0403\3\2\2\2\u040f")
        buf.write("\u0405\3\2\2\2\u040f\u040e\3\2\2\2\u0410a\3\2\2\2\u0411")
        buf.write("\u0412\7G\2\2\u0412\u0414\5\u00a8U\2\u0413\u0415\5\u00a8")
        buf.write("U\2\u0414\u0413\3\2\2\2\u0414\u0415\3\2\2\2\u0415\u0416")
        buf.write("\3\2\2\2\u0416\u0418\7\u00a3\2\2\u0417\u0419\7\u00a3\2")
        buf.write("\2\u0418\u0417\3\2\2\2\u0418\u0419\3\2\2\2\u0419c\3\2")
        buf.write("\2\2\u041a\u041b\7E\2\2\u041b\u041c\5\u00a8U\2\u041c\u041d")
        buf.write("\7\u00a3\2\2\u041de\3\2\2\2\u041e\u041f\7\64\2\2\u041f")
        buf.write("\u0420\5\u00a8U\2\u0420\u0421\5\u00a8U\2\u0421\u0422\5")
        buf.write("\u00a8U\2\u0422\u0424\7\u00a5\2\2\u0423\u0425\7\u00a2")
        buf.write("\2\2\u0424\u0423\3\2\2\2\u0424\u0425\3\2\2\2\u0425\u0426")
        buf.write("\3\2\2\2\u0426\u0427\7\u00a5\2\2\u0427g\3\2\2\2\u0428")
        buf.write("\u0429\7H\2\2\u0429\u042a\5\u00a8U\2\u042ai\3\2\2\2\u042b")
        buf.write("\u042c\7I\2\2\u042c\u042d\5\u00a8U\2\u042dk\3\2\2\2\u042e")
        buf.write("\u042f\7J\2\2\u042f\u0430\5\u00a8U\2\u0430m\3\2\2\2\u0431")
        buf.write("\u0432\7K\2\2\u0432\u0433\5\u00a8U\2\u0433o\3\2\2\2\u0434")
        buf.write("\u0435\7L\2\2\u0435\u0436\7\u00a5\2\2\u0436\u0437\5\u00a8")
        buf.write("U\2\u0437\u0438\5\u00a8U\2\u0438\u0439\5\u00a8U\2\u0439")
        buf.write("\u043a\5\u00a8U\2\u043a\u043c\5\u00a8U\2\u043b\u043d\5")
        buf.write("\u00a8U\2\u043c\u043b\3\2\2\2\u043c\u043d\3\2\2\2\u043d")
        buf.write("q\3\2\2\2\u043e\u043f\7M\2\2\u043f\u0440\5\u00a8U\2\u0440")
        buf.write("s\3\2\2\2\u0441\u0443\5v<\2\u0442\u0441\3\2\2\2\u0443")
        buf.write("\u0446\3\2\2\2\u0444\u0442\3\2\2\2\u0444\u0445\3\2\2\2")
        buf.write("\u0445\u04a4\3\2\2\2\u0446\u0444\3\2\2\2\u0447\u0448\7")
        buf.write("\n\2\2\u0448\u04a4\7\u00a5\2\2\u0449\u044a\7\36\2\2\u044a")
        buf.write("\u04a4\7\u00a3\2\2\u044b\u044c\7\'\2\2\u044c\u04a4\7\u00a3")
        buf.write("\2\2\u044d\u044e\7Q\2\2\u044e\u044f\7\u00a3\2\2\u044f")
        buf.write("\u0450\7\u00a3\2\2\u0450\u0454\7\u00a3\2\2\u0451\u0452")
        buf.write("\7\u00a3\2\2\u0452\u0453\7\u00a3\2\2\u0453\u0455\7\u00a3")
        buf.write("\2\2\u0454\u0451\3\2\2\2\u0454\u0455\3\2\2\2\u0455\u0459")
        buf.write("\3\2\2\2\u0456\u0457\7\u00a3\2\2\u0457\u0458\7\u00a3\2")
        buf.write("\2\u0458\u045a\7\u00a3\2\2\u0459\u0456\3\2\2\2\u0459\u045a")
        buf.write("\3\2\2\2\u045a\u045e\3\2\2\2\u045b\u045c\7\u00a3\2\2\u045c")
        buf.write("\u045d\7\u00a3\2\2\u045d\u045f\7\u00a3\2\2\u045e\u045b")
        buf.write("\3\2\2\2\u045e\u045f\3\2\2\2\u045f\u04a4\3\2\2\2\u0460")
        buf.write("\u0461\7\17\2\2\u0461\u04a4\7\u00a1\2\2\u0462\u0463\7")
        buf.write("R\2\2\u0463\u0464\7\u00a3\2\2\u0464\u0465\7\u00a3\2\2")
        buf.write("\u0465\u0469\7\u00a3\2\2\u0466\u0467\7\u00a3\2\2\u0467")
        buf.write("\u0468\7\u00a3\2\2\u0468\u046a\7\u00a3\2\2\u0469\u0466")
        buf.write("\3\2\2\2\u0469\u046a\3\2\2\2\u046a\u046e\3\2\2\2\u046b")
        buf.write("\u046c\7\u00a3\2\2\u046c\u046d\7\u00a3\2\2\u046d\u046f")
        buf.write("\7\u00a3\2\2\u046e\u046b\3\2\2\2\u046e\u046f\3\2\2\2\u046f")
        buf.write("\u0473\3\2\2\2\u0470\u0471\7\u00a3\2\2\u0471\u0472\7\u00a3")
        buf.write("\2\2\u0472\u0474\7\u00a3\2\2\u0473\u0470\3\2\2\2\u0473")
        buf.write("\u0474\3\2\2\2\u0474\u04a4\3\2\2\2\u0475\u0476\7\22\2")
        buf.write("\2\u0476\u0477\7\23\2\2\u0477\u047b\7\u00a3\2\2\u0478")
        buf.write("\u047c\7|\2\2\u0479\u047a\7\n\2\2\u047a\u047c\7\u00a5")
        buf.write("\2\2\u047b\u0478\3\2\2\2\u047b\u0479\3\2\2\2\u047c\u04a4")
        buf.write("\3\2\2\2\u047d\u047e\7S\2\2\u047e\u047f\7\u00a3\2\2\u047f")
        buf.write("\u0480\7\u00a3\2\2\u0480\u0484\7\u00a3\2\2\u0481\u0482")
        buf.write("\7\u00a3\2\2\u0482\u0483\7\u00a3\2\2\u0483\u0485\7\u00a3")
        buf.write("\2\2\u0484\u0481\3\2\2\2\u0484\u0485\3\2\2\2\u0485\u0489")
        buf.write("\3\2\2\2\u0486\u0487\7\u00a3\2\2\u0487\u0488\7\u00a3\2")
        buf.write("\2\u0488\u048a\7\u00a3\2\2\u0489\u0486\3\2\2\2\u0489\u048a")
        buf.write("\3\2\2\2\u048a\u048e\3\2\2\2\u048b\u048c\7\u00a3\2\2\u048c")
        buf.write("\u048d\7\u00a3\2\2\u048d\u048f\7\u00a3\2\2\u048e\u048b")
        buf.write("\3\2\2\2\u048e\u048f\3\2\2\2\u048f\u04a4\3\2\2\2\u0490")
        buf.write("\u04a4\7\24\2\2\u0491\u0492\7\26\2\2\u0492\u04a4\7\u00a3")
        buf.write("\2\2\u0493\u0494\7T\2\2\u0494\u04a4\7V\2\2\u0495\u0496")
        buf.write("\7=\2\2\u0496\u0497\7W\2\2\u0497\u0499\7\u00a3\2\2\u0498")
        buf.write("\u049a\7\u00a3\2\2\u0499\u0498\3\2\2\2\u0499\u049a\3\2")
        buf.write("\2\2\u049a\u049c\3\2\2\2\u049b\u049d\7\u00a3\2\2\u049c")
        buf.write("\u049b\3\2\2\2\u049c\u049d\3\2\2\2\u049d\u049f\3\2\2\2")
        buf.write("\u049e\u04a0\7\u00a3\2\2\u049f\u049e\3\2\2\2\u049f\u04a0")
        buf.write("\3\2\2\2\u04a0\u04a4\3\2\2\2\u04a1\u04a4\7U\2\2\u04a2")
        buf.write("\u04a4\7>\2\2\u04a3\u0444\3\2\2\2\u04a3\u0447\3\2\2\2")
        buf.write("\u04a3\u0449\3\2\2\2\u04a3\u044b\3\2\2\2\u04a3\u044d\3")
        buf.write("\2\2\2\u04a3\u0460\3\2\2\2\u04a3\u0462\3\2\2\2\u04a3\u0475")
        buf.write("\3\2\2\2\u04a3\u047d\3\2\2\2\u04a3\u0490\3\2\2\2\u04a3")
        buf.write("\u0491\3\2\2\2\u04a3\u0493\3\2\2\2\u04a3\u0495\3\2\2\2")
        buf.write("\u04a3\u04a1\3\2\2\2\u04a3\u04a2\3\2\2\2\u04a4u\3\2\2")
        buf.write("\2\u04a5\u04a6\7\5\2\2\u04a6\u04a7\5\u00a8U\2\u04a7\u04a8")
        buf.write("\5\u00a8U\2\u04a8\u04a9\5\u00a8U\2\u04a9\u04af\5\u00a8")
        buf.write("U\2\u04aa\u04ab\5\u00a8U\2\u04ab\u04ac\5\u00a8U\2\u04ac")
        buf.write("\u04ad\5\u00a8U\2\u04ad\u04ae\5\u00a8U\2\u04ae\u04b0\3")
        buf.write("\2\2\2\u04af\u04aa\3\2\2\2\u04af\u04b0\3\2\2\2\u04b0\u04b6")
        buf.write("\3\2\2\2\u04b1\u04b2\5\u00a8U\2\u04b2\u04b3\5\u00a8U\2")
        buf.write("\u04b3\u04b4\5\u00a8U\2\u04b4\u04b5\5\u00a8U\2\u04b5\u04b7")
        buf.write("\3\2\2\2\u04b6\u04b1\3\2\2\2\u04b6\u04b7\3\2\2\2\u04b7")
        buf.write("\u04bd\3\2\2\2\u04b8\u04b9\5\u00a8U\2\u04b9\u04ba\5\u00a8")
        buf.write("U\2\u04ba\u04bb\5\u00a8U\2\u04bb\u04bc\5\u00a8U\2\u04bc")
        buf.write("\u04be\3\2\2\2\u04bd\u04b8\3\2\2\2\u04bd\u04be\3\2\2\2")
        buf.write("\u04bew\3\2\2\2\u04bf\u04c0\7\26\2\2\u04c0\u04c9\7\u00a3")
        buf.write("\2\2\u04c1\u04c2\7\5\2\2\u04c2\u04c3\5\u00a8U\2\u04c3")
        buf.write("\u04c4\7\u00a3\2\2\u04c4\u04c5\7\u00a3\2\2\u04c5\u04c9")
        buf.write("\3\2\2\2\u04c6\u04c9\7\22\2\2\u04c7\u04c9\7\24\2\2\u04c8")
        buf.write("\u04bf\3\2\2\2\u04c8\u04c1\3\2\2\2\u04c8\u04c6\3\2\2\2")
        buf.write("\u04c8\u04c7\3\2\2\2\u04c9y\3\2\2\2\u04ca\u04cc\5|?\2")
        buf.write("\u04cb\u04ca\3\2\2\2\u04cc\u04cf\3\2\2\2\u04cd\u04cb\3")
        buf.write("\2\2\2\u04cd\u04ce\3\2\2\2\u04ce\u04e5\3\2\2\2\u04cf\u04cd")
        buf.write("\3\2\2\2\u04d0\u04d1\7\n\2\2\u04d1\u04e5\7\u00a5\2\2\u04d2")
        buf.write("\u04d3\7&\2\2\u04d3\u04d4\7\u00a3\2\2\u04d4\u04d5\7\u00a3")
        buf.write("\2\2\u04d5\u04d6\7\u00a3\2\2\u04d6\u04d7\7\u00a3\2\2\u04d7")
        buf.write("\u04e5\7\u00a3\2\2\u04d8\u04d9\7\'\2\2\u04d9\u04e5\7\u00a3")
        buf.write("\2\2\u04da\u04db\7\17\2\2\u04db\u04e5\7\u00a1\2\2\u04dc")
        buf.write("\u04dd\7\20\2\2\u04dd\u04e5\7(\2\2\u04de\u04df\7\22\2")
        buf.write("\2\u04df\u04e0\7\23\2\2\u04e0\u04e5\7\u00a3\2\2\u04e1")
        buf.write("\u04e5\7\24\2\2\u04e2\u04e3\7+\2\2\u04e3\u04e5\7Z\2\2")
        buf.write("\u04e4\u04cd\3\2\2\2\u04e4\u04d0\3\2\2\2\u04e4\u04d2\3")
        buf.write("\2\2\2\u04e4\u04d8\3\2\2\2\u04e4\u04da\3\2\2\2\u04e4\u04dc")
        buf.write("\3\2\2\2\u04e4\u04de\3\2\2\2\u04e4\u04e1\3\2\2\2\u04e4")
        buf.write("\u04e2\3\2\2\2\u04e5{\3\2\2\2\u04e6\u04e7\7\5\2\2\u04e7")
        buf.write("\u04e8\5\u00a8U\2\u04e8\u04e9\5\u00a8U\2\u04e9\u04ea\5")
        buf.write("\u00a8U\2\u04ea\u04eb\5\u00a8U\2\u04eb\u04ec\5\u00a8U")
        buf.write("\2\u04ec\u04ed\5\u00a8U\2\u04ed\u04ee\7\u00a3\2\2\u04ee")
        buf.write("\u04ef\7\u00a3\2\2\u04ef}\3\2\2\2\u04f0\u04f2\5\u0080")
        buf.write("A\2\u04f1\u04f0\3\2\2\2\u04f2\u04f5\3\2\2\2\u04f3\u04f1")
        buf.write("\3\2\2\2\u04f3\u04f4\3\2\2\2\u04f4\u052b\3\2\2\2\u04f5")
        buf.write("\u04f3\3\2\2\2\u04f6\u04f7\7\n\2\2\u04f7\u052b\7\u00a5")
        buf.write("\2\2\u04f8\u04f9\7\36\2\2\u04f9\u052b\7\u00a3\2\2\u04fa")
        buf.write("\u04fb\7\\\2\2\u04fb\u052b\7\u00a3\2\2\u04fc\u04fd\7\'")
        buf.write("\2\2\u04fd\u052b\7\u00a3\2\2\u04fe\u04ff\7Q\2\2\u04ff")
        buf.write("\u0500\7\u00a3\2\2\u0500\u0501\7\u00a3\2\2\u0501\u0502")
        buf.write("\7\u00a3\2\2\u0502\u0503\7\u00a3\2\2\u0503\u0504\7\u00a3")
        buf.write("\2\2\u0504\u0505\7\u00a3\2\2\u0505\u052b\7\u00a3\2\2\u0506")
        buf.write("\u0507\7]\2\2\u0507\u052b\7\u00a1\2\2\u0508\u0509\7^\2")
        buf.write("\2\u0509\u050a\7\u00a3\2\2\u050a\u050b\7\u00a3\2\2\u050b")
        buf.write("\u050c\7\u00a3\2\2\u050c\u050d\7\u00a3\2\2\u050d\u050e")
        buf.write("\7\u00a3\2\2\u050e\u050f\7\u00a3\2\2\u050f\u0510\7\u00a3")
        buf.write("\2\2\u0510\u052b\7\u00a3\2\2\u0511\u0512\7\17\2\2\u0512")
        buf.write("\u052b\7\u00a1\2\2\u0513\u0514\7\22\2\2\u0514\u0515\7")
        buf.write("\23\2\2\u0515\u0519\7\u00a3\2\2\u0516\u051a\7|\2\2\u0517")
        buf.write("\u0518\7\n\2\2\u0518\u051a\7\u00a5\2\2\u0519\u0516\3\2")
        buf.write("\2\2\u0519\u0517\3\2\2\2\u051a\u052b\3\2\2\2\u051b\u051c")
        buf.write("\7S\2\2\u051c\u051d\7\u00a3\2\2\u051d\u051e\7\u00a3\2")
        buf.write("\2\u051e\u051f\7\u00a3\2\2\u051f\u0520\7\u00a3\2\2\u0520")
        buf.write("\u0521\7\u00a3\2\2\u0521\u0522\7\u00a3\2\2\u0522\u052b")
        buf.write("\7\u00a3\2\2\u0523\u052b\7\24\2\2\u0524\u0525\7\u008c")
        buf.write("\2\2\u0525\u052b\7\u00a1\2\2\u0526\u0527\7=\2\2\u0527")
        buf.write("\u0528\7\u00a3\2\2\u0528\u052b\7\u00a3\2\2\u0529\u052b")
        buf.write("\7>\2\2\u052a\u04f3\3\2\2\2\u052a\u04f6\3\2\2\2\u052a")
        buf.write("\u04f8\3\2\2\2\u052a\u04fa\3\2\2\2\u052a\u04fc\3\2\2\2")
        buf.write("\u052a\u04fe\3\2\2\2\u052a\u0506\3\2\2\2\u052a\u0508\3")
        buf.write("\2\2\2\u052a\u0511\3\2\2\2\u052a\u0513\3\2\2\2\u052a\u051b")
        buf.write("\3\2\2\2\u052a\u0523\3\2\2\2\u052a\u0524\3\2\2\2\u052a")
        buf.write("\u0526\3\2\2\2\u052a\u0529\3\2\2\2\u052b\177\3\2\2\2\u052c")
        buf.write("\u052d\7\5\2\2\u052d\u052e\5\u00a8U\2\u052e\u052f\5\u00a8")
        buf.write("U\2\u052f\u0530\5\u00a8U\2\u0530\u0531\5\u00a8U\2\u0531")
        buf.write("\u0081\3\2\2\2\u0532\u0534\5\u0084C\2\u0533\u0532\3\2")
        buf.write("\2\2\u0534\u0537\3\2\2\2\u0535\u0533\3\2\2\2\u0535\u0536")
        buf.write("\3\2\2\2\u0536\u0551\3\2\2\2\u0537\u0535\3\2\2\2\u0538")
        buf.write("\u0539\7\n\2\2\u0539\u0551\7\u00a5\2\2\u053a\u053b\7\26")
        buf.write("\2\2\u053b\u0551\7\u00a3\2\2\u053c\u053d\7+\2\2\u053d")
        buf.write("\u0551\7a\2\2\u053e\u053f\7&\2\2\u053f\u0540\7\u00a3\2")
        buf.write("\2\u0540\u0541\7\u00a3\2\2\u0541\u0551\7\u00a3\2\2\u0542")
        buf.write("\u0543\7`\2\2\u0543\u0544\7\u00a3\2\2\u0544\u0545\7\u00a3")
        buf.write("\2\2\u0545\u0551\7\u00a3\2\2\u0546\u0547\7\'\2\2\u0547")
        buf.write("\u0551\7\u00a3\2\2\u0548\u0549\7\17\2\2\u0549\u0551\7")
        buf.write("\u00a1\2\2\u054a\u054b\7\20\2\2\u054b\u0551\7(\2\2\u054c")
        buf.write("\u054d\7\22\2\2\u054d\u054e\7\23\2\2\u054e\u0551\7\u00a3")
        buf.write("\2\2\u054f\u0551\7\24\2\2\u0550\u0535\3\2\2\2\u0550\u0538")
        buf.write("\3\2\2\2\u0550\u053a\3\2\2\2\u0550\u053c\3\2\2\2\u0550")
        buf.write("\u053e\3\2\2\2\u0550\u0542\3\2\2\2\u0550\u0546\3\2\2\2")
        buf.write("\u0550\u0548\3\2\2\2\u0550\u054a\3\2\2\2\u0550\u054c\3")
        buf.write("\2\2\2\u0550\u054f\3\2\2\2\u0551\u0083\3\2\2\2\u0552\u0553")
        buf.write("\7\5\2\2\u0553\u0554\5\u00a8U\2\u0554\u0555\5\u00a8U\2")
        buf.write("\u0555\u0556\5\u00a8U\2\u0556\u0557\5\u00a8U\2\u0557\u0558")
        buf.write("\5\u00a8U\2\u0558\u0559\5\u00a8U\2\u0559\u055a\5\u00a8")
        buf.write("U\2\u055a\u055b\7\u00a3\2\2\u055b\u055c\7\u00a3\2\2\u055c")
        buf.write("\u055d\7\u00a3\2\2\u055d\u0085\3\2\2\2\u055e\u0560\5\u0084")
        buf.write("C\2\u055f\u055e\3\2\2\2\u0560\u0563\3\2\2\2\u0561\u055f")
        buf.write("\3\2\2\2\u0561\u0562\3\2\2\2\u0562\u057c\3\2\2\2\u0563")
        buf.write("\u0561\3\2\2\2\u0564\u0565\7\n\2\2\u0565\u057c\7\u00a5")
        buf.write("\2\2\u0566\u0567\7\26\2\2\u0567\u057c\7\u00a3\2\2\u0568")
        buf.write("\u0569\7&\2\2\u0569\u056a\7\u00a3\2\2\u056a\u056b\7\u00a3")
        buf.write("\2\2\u056b\u057c\7\u00a3\2\2\u056c\u056d\7`\2\2\u056d")
        buf.write("\u056e\7\u00a3\2\2\u056e\u056f\7\u00a3\2\2\u056f\u0570")
        buf.write("\7\u00a3\2\2\u0570\u057c\7\u00a3\2\2\u0571\u0572\7\'\2")
        buf.write("\2\u0572\u057c\7\u00a3\2\2\u0573\u0574\7\17\2\2\u0574")
        buf.write("\u057c\7\u00a1\2\2\u0575\u0576\7\20\2\2\u0576\u057c\7")
        buf.write("(\2\2\u0577\u0578\7\22\2\2\u0578\u0579\7\23\2\2\u0579")
        buf.write("\u057c\7\u00a3\2\2\u057a\u057c\7\24\2\2\u057b\u0561\3")
        buf.write("\2\2\2\u057b\u0564\3\2\2\2\u057b\u0566\3\2\2\2\u057b\u0568")
        buf.write("\3\2\2\2\u057b\u056c\3\2\2\2\u057b\u0571\3\2\2\2\u057b")
        buf.write("\u0573\3\2\2\2\u057b\u0575\3\2\2\2\u057b\u0577\3\2\2\2")
        buf.write("\u057b\u057a\3\2\2\2\u057c\u0087\3\2\2\2\u057d\u057f\5")
        buf.write("\u008aF\2\u057e\u057d\3\2\2\2\u057f\u0582\3\2\2\2\u0580")
        buf.write("\u057e\3\2\2\2\u0580\u0581\3\2\2\2\u0581\u0598\3\2\2\2")
        buf.write("\u0582\u0580\3\2\2\2\u0583\u0584\7\n\2\2\u0584\u0598\7")
        buf.write("\u00a5\2\2\u0585\u0586\7&\2\2\u0586\u0587\7\u00a3\2\2")
        buf.write("\u0587\u0588\7\u00a3\2\2\u0588\u0589\7\u00a3\2\2\u0589")
        buf.write("\u058a\7\u00a3\2\2\u058a\u058b\7\u00a3\2\2\u058b\u058c")
        buf.write("\7\u00a3\2\2\u058c\u0598\7\u00a3\2\2\u058d\u058e\7\'\2")
        buf.write("\2\u058e\u0598\7\u00a3\2\2\u058f\u0590\7\17\2\2\u0590")
        buf.write("\u0598\7\u00a1\2\2\u0591\u0592\7\20\2\2\u0592\u0598\7")
        buf.write("(\2\2\u0593\u0594\7\22\2\2\u0594\u0595\7\23\2\2\u0595")
        buf.write("\u0598\7\u00a3\2\2\u0596\u0598\7\24\2\2\u0597\u0580\3")
        buf.write("\2\2\2\u0597\u0583\3\2\2\2\u0597\u0585\3\2\2\2\u0597\u058d")
        buf.write("\3\2\2\2\u0597\u058f\3\2\2\2\u0597\u0591\3\2\2\2\u0597")
        buf.write("\u0593\3\2\2\2\u0597\u0596\3\2\2\2\u0598\u0089\3\2\2\2")
        buf.write("\u0599\u059a\7\5\2\2\u059a\u059b\5\u00a8U\2\u059b\u059c")
        buf.write("\5\u00a8U\2\u059c\u059d\5\u00a8U\2\u059d\u059e\5\u00a8")
        buf.write("U\2\u059e\u059f\5\u00a8U\2\u059f\u05a0\5\u00a8U\2\u05a0")
        buf.write("\u05a1\5\u00a8U\2\u05a1\u05a2\5\u00a8U\2\u05a2\u05a3\7")
        buf.write("\u00a3\2\2\u05a3\u05a4\7\u00a3\2\2\u05a4\u008b\3\2\2\2")
        buf.write("\u05a5\u05a7\5\u008eH\2\u05a6\u05a5\3\2\2\2\u05a7\u05aa")
        buf.write("\3\2\2\2\u05a8\u05a6\3\2\2\2\u05a8\u05a9\3\2\2\2\u05a9")
        buf.write("\u05ca\3\2\2\2\u05aa\u05a8\3\2\2\2\u05ab\u05ac\7\n\2\2")
        buf.write("\u05ac\u05ca\7\u00a5\2\2\u05ad\u05ae\7e\2\2\u05ae\u05ca")
        buf.write("\7\u00a5\2\2\u05af\u05b0\7<\2\2\u05b0\u05b1\7\u00a1\2")
        buf.write("\2\u05b1\u05b2\7\u00a1\2\2\u05b2\u05ca\7\u00a3\2\2\u05b3")
        buf.write("\u05b4\7N\2\2\u05b4\u05ca\7\u00a3\2\2\u05b5\u05b6\7\'")
        buf.write("\2\2\u05b6\u05ca\7\u00a3\2\2\u05b7\u05b8\7\17\2\2\u05b8")
        buf.write("\u05ca\7\u00a1\2\2\u05b9\u05ba\7\20\2\2\u05ba\u05ca\7")
        buf.write("(\2\2\u05bb\u05bc\7\22\2\2\u05bc\u05bd\7\23\2\2\u05bd")
        buf.write("\u05c1\7\u00a3\2\2\u05be\u05c2\7|\2\2\u05bf\u05c0\7\n")
        buf.write("\2\2\u05c0\u05c2\7\u00a5\2\2\u05c1\u05be\3\2\2\2\u05c1")
        buf.write("\u05bf\3\2\2\2\u05c2\u05ca\3\2\2\2\u05c3\u05ca\7\24\2")
        buf.write("\2\u05c4\u05c5\7=\2\2\u05c5\u05c6\7f\2\2\u05c6\u05c7\7")
        buf.write("\u00a1\2\2\u05c7\u05ca\7\u00a1\2\2\u05c8\u05ca\7>\2\2")
        buf.write("\u05c9\u05a8\3\2\2\2\u05c9\u05ab\3\2\2\2\u05c9\u05ad\3")
        buf.write("\2\2\2\u05c9\u05af\3\2\2\2\u05c9\u05b3\3\2\2\2\u05c9\u05b5")
        buf.write("\3\2\2\2\u05c9\u05b7\3\2\2\2\u05c9\u05b9\3\2\2\2\u05c9")
        buf.write("\u05bb\3\2\2\2\u05c9\u05c3\3\2\2\2\u05c9\u05c4\3\2\2\2")
        buf.write("\u05c9\u05c8\3\2\2\2\u05ca\u008d\3\2\2\2\u05cb\u05cc\7")
        buf.write("\5\2\2\u05cc\u05cd\5\u00a8U\2\u05cd\u05ce\5\u00a8U\2\u05ce")
        buf.write("\u05cf\5\u00a8U\2\u05cf\u05d0\5\u00a8U\2\u05d0\u05d1\5")
        buf.write("\u00a8U\2\u05d1\u05d2\5\u00a8U\2\u05d2\u05d3\5\u00a8U")
        buf.write("\2\u05d3\u05d4\5\u00a8U\2\u05d4\u05d5\5\u00a8U\2\u05d5")
        buf.write("\u05d6\5\u00a8U\2\u05d6\u05d8\5\u00a8U\2\u05d7\u05d9\5")
        buf.write("\u00a8U\2\u05d8\u05d7\3\2\2\2\u05d8\u05d9\3\2\2\2\u05d9")
        buf.write("\u008f\3\2\2\2\u05da\u05dc\5\u0092J\2\u05db\u05da\3\2")
        buf.write("\2\2\u05dc\u05df\3\2\2\2\u05dd\u05db\3\2\2\2\u05dd\u05de")
        buf.write("\3\2\2\2\u05de\u0606\3\2\2\2\u05df\u05dd\3\2\2\2\u05e0")
        buf.write("\u05e1\7\n\2\2\u05e1\u05e2\7\u00ad\2\2\u05e2\u0606\7\u00a5")
        buf.write("\2\2\u05e3\u05e4\7\'\2\2\u05e4\u05e5\7\u00ad\2\2\u05e5")
        buf.write("\u05e6\7\u00a5\2\2\u05e6\u0606\7\u00a3\2\2\u05e7\u05e8")
        buf.write("\7\17\2\2\u05e8\u05e9\7\u00ad\2\2\u05e9\u0606\7\u00a1")
        buf.write("\2\2\u05ea\u05eb\7\20\2\2\u05eb\u05ec\7\u00ad\2\2\u05ec")
        buf.write("\u05ed\7\u00a5\2\2\u05ed\u0606\7(\2\2\u05ee\u05ef\7h\2")
        buf.write("\2\u05ef\u05f0\7\u00ad\2\2\u05f0\u05f1\7\u00a5\2\2\u05f1")
        buf.write("\u0606\7\u00a3\2\2\u05f2\u05f3\7i\2\2\u05f3\u05f4\7\u00ad")
        buf.write("\2\2\u05f4\u05f5\7\u00a5\2\2\u05f5\u0606\7\u00a3\2\2\u05f6")
        buf.write("\u05f7\7j\2\2\u05f7\u05f8\7\u00ad\2\2\u05f8\u05f9\7\u00a5")
        buf.write("\2\2\u05f9\u05fa\7\u00a3\2\2\u05fa\u0606\7\u00a3\2\2\u05fb")
        buf.write("\u05fc\7\22\2\2\u05fc\u05fd\7\23\2\2\u05fd\u0601\7\u00a3")
        buf.write("\2\2\u05fe\u0602\7|\2\2\u05ff\u0600\7\n\2\2\u0600\u0602")
        buf.write("\7\u00a5\2\2\u0601\u05fe\3\2\2\2\u0601\u05ff\3\2\2\2\u0602")
        buf.write("\u0606\3\2\2\2\u0603\u0606\7\24\2\2\u0604\u0606\7k\2\2")
        buf.write("\u0605\u05dd\3\2\2\2\u0605\u05e0\3\2\2\2\u0605\u05e3\3")
        buf.write("\2\2\2\u0605\u05e7\3\2\2\2\u0605\u05ea\3\2\2\2\u0605\u05ee")
        buf.write("\3\2\2\2\u0605\u05f2\3\2\2\2\u0605\u05f6\3\2\2\2\u0605")
        buf.write("\u05fb\3\2\2\2\u0605\u0603\3\2\2\2\u0605\u0604\3\2\2\2")
        buf.write("\u0606\u0091\3\2\2\2\u0607\u0608\7\5\2\2\u0608\u0609\5")
        buf.write("\u00a8U\2\u0609\u060a\5\u00a8U\2\u060a\u060b\7\u00a3\2")
        buf.write("\2\u060b\u060c\7\u00a3\2\2\u060c\u0093\3\2\2\2\u060d\u060f")
        buf.write("\5\u0096L\2\u060e\u060d\3\2\2\2\u060f\u0612\3\2\2\2\u0610")
        buf.write("\u060e\3\2\2\2\u0610\u0611\3\2\2\2\u0611\u0635\3\2\2\2")
        buf.write("\u0612\u0610\3\2\2\2\u0613\u0614\7\n\2\2\u0614\u0635\7")
        buf.write("\u00a5\2\2\u0615\u0616\7m\2\2\u0616\u0635\7\u00a1\2\2")
        buf.write("\u0617\u0618\7&\2\2\u0618\u0619\7\u00a3\2\2\u0619\u0635")
        buf.write("\7\u00a3\2\2\u061a\u061b\7\'\2\2\u061b\u0635\7\u00a3\2")
        buf.write("\2\u061c\u061d\7\17\2\2\u061d\u0635\7\u00a1\2\2\u061e")
        buf.write("\u061f\7\22\2\2\u061f\u0620\7\23\2\2\u0620\u0624\7\u00a3")
        buf.write("\2\2\u0621\u0625\7|\2\2\u0622\u0623\7\n\2\2\u0623\u0625")
        buf.write("\7\u00a5\2\2\u0624\u0621\3\2\2\2\u0624\u0622\3\2\2\2\u0625")
        buf.write("\u0635\3\2\2\2\u0626\u0635\7\24\2\2\u0627\u0628\7n\2\2")
        buf.write("\u0628\u0635\7\u00a5\2\2\u0629\u062a\7o\2\2\u062a\u062b")
        buf.write("\7\u00a3\2\2\u062b\u0635\7\u00a1\2\2\u062c\u0635\7p\2")
        buf.write("\2\u062d\u0635\7q\2\2\u062e\u0635\7r\2\2\u062f\u0635\7")
        buf.write("s\2\2\u0630\u0635\7t\2\2\u0631\u0635\7u\2\2\u0632\u0633")
        buf.write("\7v\2\2\u0633\u0635\7\u00a1\2\2\u0634\u0610\3\2\2\2\u0634")
        buf.write("\u0613\3\2\2\2\u0634\u0615\3\2\2\2\u0634\u0617\3\2\2\2")
        buf.write("\u0634\u061a\3\2\2\2\u0634\u061c\3\2\2\2\u0634\u061e\3")
        buf.write("\2\2\2\u0634\u0626\3\2\2\2\u0634\u0627\3\2\2\2\u0634\u0629")
        buf.write("\3\2\2\2\u0634\u062c\3\2\2\2\u0634\u062d\3\2\2\2\u0634")
        buf.write("\u062e\3\2\2\2\u0634\u062f\3\2\2\2\u0634\u0630\3\2\2\2")
        buf.write("\u0634\u0631\3\2\2\2\u0634\u0632\3\2\2\2\u0635\u0095\3")
        buf.write("\2\2\2\u0636\u0637\7\5\2\2\u0637\u0638\5\u00a8U\2\u0638")
        buf.write("\u0639\5\u00a8U\2\u0639\u063a\5\u00a8U\2\u063a\u063b\5")
        buf.write("\u00a8U\2\u063b\u063c\5\u00a8U\2\u063c\u063d\7\u00a3\2")
        buf.write("\2\u063d\u063e\7\u00a3\2\2\u063e\u0097\3\2\2\2\u063f\u0641")
        buf.write("\5\u009aN\2\u0640\u063f\3\2\2\2\u0641\u0644\3\2\2\2\u0642")
        buf.write("\u0640\3\2\2\2\u0642\u0643\3\2\2\2\u0643\u065e\3\2\2\2")
        buf.write("\u0644\u0642\3\2\2\2\u0645\u0646\7\n\2\2\u0646\u065e\7")
        buf.write("\u00a5\2\2\u0647\u0648\7m\2\2\u0648\u065e\7\u00a1\2\2")
        buf.write("\u0649\u064a\7&\2\2\u064a\u064b\7\u00a3\2\2\u064b\u065e")
        buf.write("\7\u00a3\2\2\u064c\u064d\7\'\2\2\u064d\u065e\7\u00a3\2")
        buf.write("\2\u064e\u064f\7\17\2\2\u064f\u065e\7\u00a1\2\2\u0650")
        buf.write("\u065e\7p\2\2\u0651\u065e\7q\2\2\u0652\u065e\7o\2\2\u0653")
        buf.write("\u065e\7r\2\2\u0654\u065e\7s\2\2\u0655\u065e\7v\2\2\u0656")
        buf.write("\u0657\7\22\2\2\u0657\u065e\7\23\2\2\u0658\u065e\7\24")
        buf.write("\2\2\u0659\u065a\7n\2\2\u065a\u065e\7\u00a5\2\2\u065b")
        buf.write("\u065e\7t\2\2\u065c\u065e\7u\2\2\u065d\u0642\3\2\2\2\u065d")
        buf.write("\u0645\3\2\2\2\u065d\u0647\3\2\2\2\u065d\u0649\3\2\2\2")
        buf.write("\u065d\u064c\3\2\2\2\u065d\u064e\3\2\2\2\u065d\u0650\3")
        buf.write("\2\2\2\u065d\u0651\3\2\2\2\u065d\u0652\3\2\2\2\u065d\u0653")
        buf.write("\3\2\2\2\u065d\u0654\3\2\2\2\u065d\u0655\3\2\2\2\u065d")
        buf.write("\u0656\3\2\2\2\u065d\u0658\3\2\2\2\u065d\u0659\3\2\2\2")
        buf.write("\u065d\u065b\3\2\2\2\u065d\u065c\3\2\2\2\u065e\u0099\3")
        buf.write("\2\2\2\u065f\u0660\7\5\2\2\u0660\u0661\5\u00a8U\2\u0661")
        buf.write("\u0662\5\u00a8U\2\u0662\u0663\5\u00a8U\2\u0663\u0664\5")
        buf.write("\u00a8U\2\u0664\u0665\5\u00a8U\2\u0665\u0666\5\u00a8U")
        buf.write("\2\u0666\u0667\7\u00a3\2\2\u0667\u0668\7\u00a3\2\2\u0668")
        buf.write("\u009b\3\2\2\2\u0669\u066b\5\u009eP\2\u066a\u0669\3\2")
        buf.write("\2\2\u066b\u066e\3\2\2\2\u066c\u066a\3\2\2\2\u066c\u066d")
        buf.write("\3\2\2\2\u066d\u067a\3\2\2\2\u066e\u066c\3\2\2\2\u066f")
        buf.write("\u0670\7\n\2\2\u0670\u067a\7\u00a5\2\2\u0671\u0672\7\'")
        buf.write("\2\2\u0672\u067a\7\u00a3\2\2\u0673\u0674\7\17\2\2\u0674")
        buf.write("\u067a\7\u00a1\2\2\u0675\u0676\7\22\2\2\u0676\u0677\7")
        buf.write("\23\2\2\u0677\u067a\7\u00a3\2\2\u0678\u067a\7\24\2\2\u0679")
        buf.write("\u066c\3\2\2\2\u0679\u066f\3\2\2\2\u0679\u0671\3\2\2\2")
        buf.write("\u0679\u0673\3\2\2\2\u0679\u0675\3\2\2\2\u0679\u0678\3")
        buf.write("\2\2\2\u067a\u009d\3\2\2\2\u067b\u067c\7\5\2\2\u067c\u067d")
        buf.write("\5\u00a8U\2\u067d\u067e\5\u00a8U\2\u067e\u067f\7\u00a3")
        buf.write("\2\2\u067f\u0680\7\u00a3\2\2\u0680\u0681\7\u00a3\2\2\u0681")
        buf.write("\u009f\3\2\2\2\u0682\u0684\5\u00a2R\2\u0683\u0682\3\2")
        buf.write("\2\2\u0684\u0687\3\2\2\2\u0685\u0683\3\2\2\2\u0685\u0686")
        buf.write("\3\2\2\2\u0686\u0699\3\2\2\2\u0687\u0685\3\2\2\2\u0688")
        buf.write("\u0689\7\n\2\2\u0689\u0699\7\u00a5\2\2\u068a\u068b\7z")
        buf.write("\2\2\u068b\u0699\7\u00a1\2\2\u068c\u068d\7&\2\2\u068d")
        buf.write("\u0699\7\u00a3\2\2\u068e\u068f\7\'\2\2\u068f\u0699\7\u00a3")
        buf.write("\2\2\u0690\u0691\7\17\2\2\u0691\u0699\7\u00a1\2\2\u0692")
        buf.write("\u0693\7\22\2\2\u0693\u0694\7\23\2\2\u0694\u0699\7\u00a3")
        buf.write("\2\2\u0695\u0699\7\24\2\2\u0696\u0697\7v\2\2\u0697\u0699")
        buf.write("\7\u00a1\2\2\u0698\u0685\3\2\2\2\u0698\u0688\3\2\2\2\u0698")
        buf.write("\u068a\3\2\2\2\u0698\u068c\3\2\2\2\u0698\u068e\3\2\2\2")
        buf.write("\u0698\u0690\3\2\2\2\u0698\u0692\3\2\2\2\u0698\u0695\3")
        buf.write("\2\2\2\u0698\u0696\3\2\2\2\u0699\u00a1\3\2\2\2\u069a\u069b")
        buf.write("\7\5\2\2\u069b\u069c\5\u00a8U\2\u069c\u069d\5\u00a8U\2")
        buf.write("\u069d\u069e\5\u00a8U\2\u069e\u069f\7\u00a3\2\2\u069f")
        buf.write("\u06a0\7\u00a3\2\2\u06a0\u00a3\3\2\2\2\u06a1\u06a3\5\u00a6")
        buf.write("T\2\u06a2\u06a1\3\2\2\2\u06a3\u06a6\3\2\2\2\u06a4\u06a2")
        buf.write("\3\2\2\2\u06a4\u06a5\3\2\2\2\u06a5\u06b2\3\2\2\2\u06a6")
        buf.write("\u06a4\3\2\2\2\u06a7\u06a8\7\n\2\2\u06a8\u06b2\7\u00a5")
        buf.write("\2\2\u06a9\u06aa\7\'\2\2\u06aa\u06b2\7\u00a3\2\2\u06ab")
        buf.write("\u06ac\7\17\2\2\u06ac\u06b2\7\u00a1\2\2\u06ad\u06ae\7")
        buf.write("\22\2\2\u06ae\u06af\7\23\2\2\u06af\u06b2\7\u00a3\2\2\u06b0")
        buf.write("\u06b2\7\24\2\2\u06b1\u06a4\3\2\2\2\u06b1\u06a7\3\2\2")
        buf.write("\2\u06b1\u06a9\3\2\2\2\u06b1\u06ab\3\2\2\2\u06b1\u06ad")
        buf.write("\3\2\2\2\u06b1\u06b0\3\2\2\2\u06b2\u00a5\3\2\2\2\u06b3")
        buf.write("\u06b4\7\5\2\2\u06b4\u06b5\5\u00a8U\2\u06b5\u06b6\5\u00a8")
        buf.write("U\2\u06b6\u06b7\5\u00a8U\2\u06b7\u00a7\3\2\2\2\u06b8\u06b9")
        buf.write("\7\u00a8\2\2\u06b9\u06ba\5\u00aaV\2\u06ba\u06bb\7\u00a9")
        buf.write("\2\2\u06bb\u00a9\3\2\2\2\u06bc\u06c1\5\u00acW\2\u06bd")
        buf.write("\u06be\7\u009c\2\2\u06be\u06c0\5\u00acW\2\u06bf\u06bd")
        buf.write("\3\2\2\2\u06c0\u06c3\3\2\2\2\u06c1\u06bf\3\2\2\2\u06c1")
        buf.write("\u06c2\3\2\2\2\u06c2\u00ab\3\2\2\2\u06c3\u06c1\3\2\2\2")
        buf.write("\u06c4\u06c9\5\u00aeX\2\u06c5\u06c6\7\u009d\2\2\u06c6")
        buf.write("\u06c8\5\u00aeX\2\u06c7\u06c5\3\2\2\2\u06c8\u06cb\3\2")
        buf.write("\2\2\u06c9\u06c7\3\2\2\2\u06c9\u06ca\3\2\2\2\u06ca\u00ad")
        buf.write("\3\2\2\2\u06cb\u06c9\3\2\2\2\u06cc\u06cd\bX\1\2\u06cd")
        buf.write("\u06ce\7\u00a8\2\2\u06ce\u06cf\5\u00aaV\2\u06cf\u06d0")
        buf.write("\7\u00a9\2\2\u06d0\u0747\3\2\2\2\u06d1\u0747\7|\2\2\u06d2")
        buf.write("\u06d3\7~\2\2\u06d3\u06d4\t\3\2\2\u06d4\u06d5\t\4\2\2")
        buf.write("\u06d5\u0747\t\3\2\2\u06d6\u06d8\7\177\2\2\u06d7\u06d9")
        buf.write("\7\u00b6\2\2\u06d8\u06d7\3\2\2\2\u06d8\u06d9\3\2\2\2\u06d9")
        buf.write("\u06da\3\2\2\2\u06da\u06db\7\u00b7\2\2\u06db\u06dc\7\u00b8")
        buf.write("\2\2\u06dc\u0747\7\u00a3\2\2\u06dd\u06de\7\u0080\2\2\u06de")
        buf.write("\u0747\5\u00aeX\35\u06df\u06e0\7\u0081\2\2\u06e0\u0747")
        buf.write("\5\u00aeX\34\u06e1\u06e2\7\u0082\2\2\u06e2\u0747\5\u00ae")
        buf.write("X\33\u06e3\u06ea\7\u0083\2\2\u06e4\u06eb\7\u00a6\2\2\u06e5")
        buf.write("\u06e8\7\u00a5\2\2\u06e6\u06e7\7\u00ac\2\2\u06e7\u06e9")
        buf.write("\7\u00a5\2\2\u06e8\u06e6\3\2\2\2\u06e8\u06e9\3\2\2\2\u06e9")
        buf.write("\u06eb\3\2\2\2\u06ea\u06e4\3\2\2\2\u06ea\u06e5\3\2\2\2")
        buf.write("\u06eb\u0747\3\2\2\2\u06ec\u0747\7\u0084\2\2\u06ed\u06ee")
        buf.write("\7\u0085\2\2\u06ee\u0747\7\u00a1\2\2\u06ef\u0747\7\u0086")
        buf.write("\2\2\u06f0\u06f7\7\u0087\2\2\u06f1\u06f8\7\u00a6\2\2\u06f2")
        buf.write("\u06f5\7\u00a5\2\2\u06f3\u06f4\7\u00ac\2\2\u06f4\u06f6")
        buf.write("\7\u00a5\2\2\u06f5\u06f3\3\2\2\2\u06f5\u06f6\3\2\2\2\u06f6")
        buf.write("\u06f8\3\2\2\2\u06f7\u06f1\3\2\2\2\u06f7\u06f2\3\2\2\2")
        buf.write("\u06f8\u0747\3\2\2\2\u06f9\u06fa\7\u009e\2\2\u06fa\u0747")
        buf.write("\5\u00aeX\25\u06fb\u06fc\7\u0088\2\2\u06fc\u06fd\7\u00a8")
        buf.write("\2\2\u06fd\u06ff\7\u00a3\2\2\u06fe\u0700\7\u009f\2\2\u06ff")
        buf.write("\u06fe\3\2\2\2\u06ff\u0700\3\2\2\2\u0700\u0701\3\2\2\2")
        buf.write("\u0701\u0703\7\u00a3\2\2\u0702\u0704\7\u009f\2\2\u0703")
        buf.write("\u0702\3\2\2\2\u0703\u0704\3\2\2\2\u0704\u0705\3\2\2\2")
        buf.write("\u0705\u0706\7\u00a3\2\2\u0706\u0707\7\u00a9\2\2\u0707")
        buf.write("\u0708\7\u0089\2\2\u0708\u0747\7\u00a3\2\2\u0709\u070a")
        buf.write("\7\u0088\2\2\u070a\u070b\7\u00a8\2\2\u070b\u070c\7\u009a")
        buf.write("\2\2\u070c\u070d\7\u00ad\2\2\u070d\u070f\5\u00a8U\2\u070e")
        buf.write("\u0710\7\u009f\2\2\u070f\u070e\3\2\2\2\u070f\u0710\3\2")
        buf.write("\2\2\u0710\u0714\3\2\2\2\u0711\u0712\7\u009b\2\2\u0712")
        buf.write("\u0713\7\u00ad\2\2\u0713\u0715\5\u00a8U\2\u0714\u0711")
        buf.write("\3\2\2\2\u0714\u0715\3\2\2\2\u0715\u0716\3\2\2\2\u0716")
        buf.write("\u0717\7\u00a9\2\2\u0717\u0718\7\u0089\2\2\u0718\u0719")
        buf.write("\7\u00a3\2\2\u0719\u0747\3\2\2\2\u071a\u0747\7\u008a\2")
        buf.write("\2\u071b\u0747\7\u008b\2\2\u071c\u0723\7\u008c\2\2\u071d")
        buf.write("\u0724\7\u00a7\2\2\u071e\u0721\7\u00a1\2\2\u071f\u0720")
        buf.write("\7\u00ac\2\2\u0720\u0722\7\u00a1\2\2\u0721\u071f\3\2\2")
        buf.write("\2\u0721\u0722\3\2\2\2\u0722\u0724\3\2\2\2\u0723\u071d")
        buf.write("\3\2\2\2\u0723\u071e\3\2\2\2\u0724\u0747\3\2\2\2\u0725")
        buf.write("\u072c\7\u008d\2\2\u0726\u072d\7\u00a6\2\2\u0727\u072a")
        buf.write("\7\u00a5\2\2\u0728\u0729\7\u00ac\2\2\u0729\u072b\7\u00a5")
        buf.write("\2\2\u072a\u0728\3\2\2\2\u072a\u072b\3\2\2\2\u072b\u072d")
        buf.write("\3\2\2\2\u072c\u0726\3\2\2\2\u072c\u0727\3\2\2\2\u072d")
        buf.write("\u0747\3\2\2\2\u072e\u073a\7\u008f\2\2\u072f\u073b\7\u00a6")
        buf.write("\2\2\u0730\u0733\7\u00a5\2\2\u0731\u0732\7\u00ac\2\2\u0732")
        buf.write("\u0734\7\u00a5\2\2\u0733\u0731\3\2\2\2\u0733\u0734\3\2")
        buf.write("\2\2\u0734\u073b\3\2\2\2\u0735\u0738\7\u00a4\2\2\u0736")
        buf.write("\u0737\7\u00ac\2\2\u0737\u0739\7\u00a4\2\2\u0738\u0736")
        buf.write("\3\2\2\2\u0738\u0739\3\2\2\2\u0739\u073b\3\2\2\2\u073a")
        buf.write("\u072f\3\2\2\2\u073a\u0730\3\2\2\2\u073a\u0735\3\2\2\2")
        buf.write("\u073b\u0747\3\2\2\2\u073c\u0747\7\u0090\2\2\u073d\u0747")
        buf.write("\7\u0091\2\2\u073e\u0747\7\u0092\2\2\u073f\u0747\7\u0093")
        buf.write("\2\2\u0740\u0747\7\u0094\2\2\u0741\u0747\7\u0095\2\2\u0742")
        buf.write("\u0747\7\u0096\2\2\u0743\u0747\7\u0097\2\2\u0744\u0747")
        buf.write("\7\u0098\2\2\u0745\u0747\7\u0099\2\2\u0746\u06cc\3\2\2")
        buf.write("\2\u0746\u06d1\3\2\2\2\u0746\u06d2\3\2\2\2\u0746\u06d6")
        buf.write("\3\2\2\2\u0746\u06dd\3\2\2\2\u0746\u06df\3\2\2\2\u0746")
        buf.write("\u06e1\3\2\2\2\u0746\u06e3\3\2\2\2\u0746\u06ec\3\2\2\2")
        buf.write("\u0746\u06ed\3\2\2\2\u0746\u06ef\3\2\2\2\u0746\u06f0\3")
        buf.write("\2\2\2\u0746\u06f9\3\2\2\2\u0746\u06fb\3\2\2\2\u0746\u0709")
        buf.write("\3\2\2\2\u0746\u071a\3\2\2\2\u0746\u071b\3\2\2\2\u0746")
        buf.write("\u071c\3\2\2\2\u0746\u0725\3\2\2\2\u0746\u072e\3\2\2\2")
        buf.write("\u0746\u073c\3\2\2\2\u0746\u073d\3\2\2\2\u0746\u073e\3")
        buf.write("\2\2\2\u0746\u073f\3\2\2\2\u0746\u0740\3\2\2\2\u0746\u0741")
        buf.write("\3\2\2\2\u0746\u0742\3\2\2\2\u0746\u0743\3\2\2\2\u0746")
        buf.write("\u0744\3\2\2\2\u0746\u0745\3\2\2\2\u0747\u0750\3\2\2\2")
        buf.write("\u0748\u0749\f \2\2\u0749\u074a\7}\2\2\u074a\u074f\7\u00a3")
        buf.write("\2\2\u074b\u074c\f\16\2\2\u074c\u074d\7\u008e\2\2\u074d")
        buf.write("\u074f\7\u00a3\2\2\u074e\u0748\3\2\2\2\u074e\u074b\3\2")
        buf.write("\2\2\u074f\u0752\3\2\2\2\u0750\u074e\3\2\2\2\u0750\u0751")
        buf.write("\3\2\2\2\u0751\u00af\3\2\2\2\u0752\u0750\3\2\2\2\u0093")
        buf.write("\u00b3\u00b9\u00bf\u00c5\u00cb\u00d1\u00d7\u00dd\u00e3")
        buf.write("\u00e9\u00ef\u00f5\u00fb\u0101\u0107\u010d\u0113\u0119")
        buf.write("\u011f\u0125\u012b\u0131\u0137\u013d\u0143\u0149\u014f")
        buf.write("\u017f\u01f7\u0223\u023c\u024a\u0257\u025c\u0265\u0274")
        buf.write("\u0287\u0296\u02b1\u02c0\u02c5\u02d9\u02e8\u02f7\u0302")
        buf.write("\u0318\u0328\u0330\u0335\u0347\u034e\u0357\u0369\u0378")
        buf.write("\u037b\u0387\u038d\u0392\u03ad\u03b2\u03c5\u03cb\u03d1")
        buf.write("\u03d7\u03dd\u03e3\u03e9\u03ef\u03f5\u0401\u040b\u040f")
        buf.write("\u0414\u0418\u0424\u043c\u0444\u0454\u0459\u045e\u0469")
        buf.write("\u046e\u0473\u047b\u0484\u0489\u048e\u0499\u049c\u049f")
        buf.write("\u04a3\u04af\u04b6\u04bd\u04c8\u04cd\u04e4\u04f3\u0519")
        buf.write("\u052a\u0535\u0550\u0561\u057b\u0580\u0597\u05a8\u05c1")
        buf.write("\u05c9\u05d8\u05dd\u0601\u0605\u0610\u0624\u0634\u0642")
        buf.write("\u065d\u066c\u0679\u0685\u0698\u06a4\u06b1\u06c1\u06c9")
        buf.write("\u06d8\u06e8\u06ea\u06f5\u06f7\u06ff\u0703\u070f\u0714")
        buf.write("\u0721\u0723\u072a\u072c\u0733\u0738\u073a\u0746\u074e")
        buf.write("\u0750")
        return buf.getvalue()


class XplorMRParser ( Parser ):

    grammarFileName = "XplorMRParser.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "','", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "'('", "')'", "'{'", "'}'", "':'", "'='", 
                     "'<'", "'>'", "'<='", "'>='", "'#'" ]

    symbolicNames = [ "<INVALID>", "End", "Noe", "Assign", "Asymptote", 
                      "Averaging", "Bhig", "Ceiling", "Classification", 
                      "CountViol", "Distribute", "Monomers", "Ncount", "Nrestraints", 
                      "Potential", "Predict", "Print", "Threshold", "Reset", 
                      "Rswitch", "Scale", "SoExponent", "SqConstant", "SqExponent", 
                      "SqOffset", "Temperature", "Noe_avr_methods", "Noe_potential", 
                      "Cutoff", "Cuton", "From", "To", "Restraints", "Dihedral", 
                      "Nassign", "Sanisotropy", "Coefficients", "ForceConstant", 
                      "Rdc_potential", "Xdipolar", "Dipolar", "Type", "Sign", 
                      "Average", "Rdc_dist_fix_types", "Rdc_avr_methods", 
                      "VectorAngle", "Cv", "Partition", "Tensor", "Anisotropy", 
                      "Rdc_anis_types", "Planar", "Group", "Initialize", 
                      "Selection", "Weight", "Xadc", "Expectation", "Size", 
                      "Zero", "Coupling", "DegEnergy", "Coupling_potential", 
                      "Carbon", "PhiStep", "PsiStep", "Rcoil", "Proton", 
                      "Observed", "Amides", "Carbons", "Nitrogens", "Oxygens", 
                      "RingAtoms", "AlphasAndAmides", "Error", "Rmsd_or_Not", 
                      "Ramachandran", "Gaussian", "Phase", "Quartic", "Shape", 
                      "Sort", "Gauss_or_Quart", "Dimensions", "Collapse", 
                      "Danisotropy", "Diff_anis_types", "Orient", "Height", 
                      "MaxGaussians", "NewGaussian", "Dcsa", "Sigma", "Csa_types", 
                      "Pcsa", "OneBond", "AngleDb", "DerivFlag", "Angle_dihedral", 
                      "Paramagnetic", "Kconst", "Omega", "Tauc", "Debug", 
                      "Xpcs", "Tolerance", "Save", "Fmed", "ErrOn", "ErrOff", 
                      "Fon", "Foff", "Son", "Soff", "Frun", "Xrdcoupling", 
                      "Xangle", "Xccr", "Weip", "Hbda", "All", "Around", 
                      "Atom", "Attribute", "BondedTo", "ByGroup", "ByRes", 
                      "Chemical", "Hydrogen", "Id", "Known", "Name", "Point", 
                      "Cut", "Previous", "Pseudo", "Residue", "Resname", 
                      "Saround", "SegIdentifier", "Store_1", "Store_2", 
                      "Store_3", "Store_4", "Store_5", "Store_6", "Store_7", 
                      "Store_8", "Store_9", "Tag", "Tail", "Head", "Or_op", 
                      "And_op", "Not_op", "Comma", "Complex", "Integer", 
                      "Logical", "Real", "Double_quote_string", "Simple_name", 
                      "Simple_names", "Integers", "L_paren", "R_paren", 
                      "L_brace", "R_brace", "Colon", "Equ_op", "Lt_op", 
                      "Gt_op", "Leq_op", "Geq_op", "Neq_op", "SPACE", "COMMENT", 
                      "LINE_COMMENT", "Abs", "Attr_properties", "Comparison_ops" ]

    RULE_xplor_nih_mr = 0
    RULE_distance_restraint = 1
    RULE_dihedral_angle_restraint = 2
    RULE_rdc_restraint = 3
    RULE_planar_restraint = 4
    RULE_antidistance_restraint = 5
    RULE_coupling_restraint = 6
    RULE_carbon_shift_restraint = 7
    RULE_proton_shift_restraint = 8
    RULE_dihedral_angle_db_restraint = 9
    RULE_radius_of_gyration_restraint = 10
    RULE_diffusion_anisotropy_restraint = 11
    RULE_orientation_db_restraint = 12
    RULE_csa_restraint = 13
    RULE_pcsa_restraint = 14
    RULE_one_bond_coupling_restraint = 15
    RULE_angle_db_restraint = 16
    RULE_pre_restraint = 17
    RULE_pcs_restraint = 18
    RULE_prdc_restraint = 19
    RULE_porientation_restraint = 20
    RULE_pccr_restraint = 21
    RULE_hbond_restraint = 22
    RULE_noe_statement = 23
    RULE_noe_assign = 24
    RULE_predict_statement = 25
    RULE_dihedral_statement = 26
    RULE_dihedral_assign = 27
    RULE_sani_statement = 28
    RULE_sani_assign = 29
    RULE_xdip_statement = 30
    RULE_xdip_assign = 31
    RULE_vean_statement = 32
    RULE_vean_assign = 33
    RULE_tens_statement = 34
    RULE_tens_assign = 35
    RULE_anis_statement = 36
    RULE_anis_assign = 37
    RULE_planar_statement = 38
    RULE_group_statement = 39
    RULE_antidistance_statement = 40
    RULE_xadc_assign = 41
    RULE_coupling_statement = 42
    RULE_coup_assign = 43
    RULE_carbon_shift_statement = 44
    RULE_carbon_shift_assign = 45
    RULE_carbon_shift_rcoil = 46
    RULE_proton_shift_statement = 47
    RULE_observed = 48
    RULE_proton_shift_rcoil = 49
    RULE_proton_shift_anisotropy = 50
    RULE_proton_shift_amides = 51
    RULE_proton_shift_carbons = 52
    RULE_proton_shift_nitrogens = 53
    RULE_proton_shift_oxygens = 54
    RULE_proton_shift_ring_atoms = 55
    RULE_proton_shift_alphas_and_amides = 56
    RULE_ramachandran_statement = 57
    RULE_rama_assign = 58
    RULE_collapse_statement = 59
    RULE_diffusion_statement = 60
    RULE_dani_assign = 61
    RULE_orientation_statement = 62
    RULE_orie_assign = 63
    RULE_csa_statement = 64
    RULE_csa_assign = 65
    RULE_pcsa_statement = 66
    RULE_one_bond_coupling_statement = 67
    RULE_one_bond_assign = 68
    RULE_angle_db_statement = 69
    RULE_angle_db_assign = 70
    RULE_pre_statement = 71
    RULE_pre_assign = 72
    RULE_pcs_statement = 73
    RULE_pcs_assign = 74
    RULE_prdc_statement = 75
    RULE_prdc_assign = 76
    RULE_porientation_statement = 77
    RULE_porientation_assign = 78
    RULE_pccr_statement = 79
    RULE_pccr_assign = 80
    RULE_hbond_statement = 81
    RULE_hbond_assign = 82
    RULE_selection = 83
    RULE_selection_expression = 84
    RULE_term = 85
    RULE_factor = 86

    ruleNames =  [ "xplor_nih_mr", "distance_restraint", "dihedral_angle_restraint", 
                   "rdc_restraint", "planar_restraint", "antidistance_restraint", 
                   "coupling_restraint", "carbon_shift_restraint", "proton_shift_restraint", 
                   "dihedral_angle_db_restraint", "radius_of_gyration_restraint", 
                   "diffusion_anisotropy_restraint", "orientation_db_restraint", 
                   "csa_restraint", "pcsa_restraint", "one_bond_coupling_restraint", 
                   "angle_db_restraint", "pre_restraint", "pcs_restraint", 
                   "prdc_restraint", "porientation_restraint", "pccr_restraint", 
                   "hbond_restraint", "noe_statement", "noe_assign", "predict_statement", 
                   "dihedral_statement", "dihedral_assign", "sani_statement", 
                   "sani_assign", "xdip_statement", "xdip_assign", "vean_statement", 
                   "vean_assign", "tens_statement", "tens_assign", "anis_statement", 
                   "anis_assign", "planar_statement", "group_statement", 
                   "antidistance_statement", "xadc_assign", "coupling_statement", 
                   "coup_assign", "carbon_shift_statement", "carbon_shift_assign", 
                   "carbon_shift_rcoil", "proton_shift_statement", "observed", 
                   "proton_shift_rcoil", "proton_shift_anisotropy", "proton_shift_amides", 
                   "proton_shift_carbons", "proton_shift_nitrogens", "proton_shift_oxygens", 
                   "proton_shift_ring_atoms", "proton_shift_alphas_and_amides", 
                   "ramachandran_statement", "rama_assign", "collapse_statement", 
                   "diffusion_statement", "dani_assign", "orientation_statement", 
                   "orie_assign", "csa_statement", "csa_assign", "pcsa_statement", 
                   "one_bond_coupling_statement", "one_bond_assign", "angle_db_statement", 
                   "angle_db_assign", "pre_statement", "pre_assign", "pcs_statement", 
                   "pcs_assign", "prdc_statement", "prdc_assign", "porientation_statement", 
                   "porientation_assign", "pccr_statement", "pccr_assign", 
                   "hbond_statement", "hbond_assign", "selection", "selection_expression", 
                   "term", "factor" ]

    EOF = Token.EOF
    End=1
    Noe=2
    Assign=3
    Asymptote=4
    Averaging=5
    Bhig=6
    Ceiling=7
    Classification=8
    CountViol=9
    Distribute=10
    Monomers=11
    Ncount=12
    Nrestraints=13
    Potential=14
    Predict=15
    Print=16
    Threshold=17
    Reset=18
    Rswitch=19
    Scale=20
    SoExponent=21
    SqConstant=22
    SqExponent=23
    SqOffset=24
    Temperature=25
    Noe_avr_methods=26
    Noe_potential=27
    Cutoff=28
    Cuton=29
    From=30
    To=31
    Restraints=32
    Dihedral=33
    Nassign=34
    Sanisotropy=35
    Coefficients=36
    ForceConstant=37
    Rdc_potential=38
    Xdipolar=39
    Dipolar=40
    Type=41
    Sign=42
    Average=43
    Rdc_dist_fix_types=44
    Rdc_avr_methods=45
    VectorAngle=46
    Cv=47
    Partition=48
    Tensor=49
    Anisotropy=50
    Rdc_anis_types=51
    Planar=52
    Group=53
    Initialize=54
    Selection=55
    Weight=56
    Xadc=57
    Expectation=58
    Size=59
    Zero=60
    Coupling=61
    DegEnergy=62
    Coupling_potential=63
    Carbon=64
    PhiStep=65
    PsiStep=66
    Rcoil=67
    Proton=68
    Observed=69
    Amides=70
    Carbons=71
    Nitrogens=72
    Oxygens=73
    RingAtoms=74
    AlphasAndAmides=75
    Error=76
    Rmsd_or_Not=77
    Ramachandran=78
    Gaussian=79
    Phase=80
    Quartic=81
    Shape=82
    Sort=83
    Gauss_or_Quart=84
    Dimensions=85
    Collapse=86
    Danisotropy=87
    Diff_anis_types=88
    Orient=89
    Height=90
    MaxGaussians=91
    NewGaussian=92
    Dcsa=93
    Sigma=94
    Csa_types=95
    Pcsa=96
    OneBond=97
    AngleDb=98
    DerivFlag=99
    Angle_dihedral=100
    Paramagnetic=101
    Kconst=102
    Omega=103
    Tauc=104
    Debug=105
    Xpcs=106
    Tolerance=107
    Save=108
    Fmed=109
    ErrOn=110
    ErrOff=111
    Fon=112
    Foff=113
    Son=114
    Soff=115
    Frun=116
    Xrdcoupling=117
    Xangle=118
    Xccr=119
    Weip=120
    Hbda=121
    All=122
    Around=123
    Atom=124
    Attribute=125
    BondedTo=126
    ByGroup=127
    ByRes=128
    Chemical=129
    Hydrogen=130
    Id=131
    Known=132
    Name=133
    Point=134
    Cut=135
    Previous=136
    Pseudo=137
    Residue=138
    Resname=139
    Saround=140
    SegIdentifier=141
    Store_1=142
    Store_2=143
    Store_3=144
    Store_4=145
    Store_5=146
    Store_6=147
    Store_7=148
    Store_8=149
    Store_9=150
    Tag=151
    Tail=152
    Head=153
    Or_op=154
    And_op=155
    Not_op=156
    Comma=157
    Complex=158
    Integer=159
    Logical=160
    Real=161
    Double_quote_string=162
    Simple_name=163
    Simple_names=164
    Integers=165
    L_paren=166
    R_paren=167
    L_brace=168
    R_brace=169
    Colon=170
    Equ_op=171
    Lt_op=172
    Gt_op=173
    Leq_op=174
    Geq_op=175
    Neq_op=176
    SPACE=177
    COMMENT=178
    LINE_COMMENT=179
    Abs=180
    Attr_properties=181
    Comparison_ops=182

    def __init__(self, input:TokenStream, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.9")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None




    class Xplor_nih_mrContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EOF(self):
            return self.getToken(XplorMRParser.EOF, 0)

        def distance_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Distance_restraintContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Distance_restraintContext,i)


        def dihedral_angle_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Dihedral_angle_restraintContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Dihedral_angle_restraintContext,i)


        def rdc_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Rdc_restraintContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Rdc_restraintContext,i)


        def planar_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Planar_restraintContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Planar_restraintContext,i)


        def antidistance_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Antidistance_restraintContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Antidistance_restraintContext,i)


        def coupling_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Coupling_restraintContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Coupling_restraintContext,i)


        def carbon_shift_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Carbon_shift_restraintContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Carbon_shift_restraintContext,i)


        def proton_shift_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Proton_shift_restraintContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Proton_shift_restraintContext,i)


        def dihedral_angle_db_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Dihedral_angle_db_restraintContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Dihedral_angle_db_restraintContext,i)


        def radius_of_gyration_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Radius_of_gyration_restraintContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Radius_of_gyration_restraintContext,i)


        def diffusion_anisotropy_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Diffusion_anisotropy_restraintContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Diffusion_anisotropy_restraintContext,i)


        def orientation_db_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Orientation_db_restraintContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Orientation_db_restraintContext,i)


        def csa_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Csa_restraintContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Csa_restraintContext,i)


        def pcsa_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Pcsa_restraintContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Pcsa_restraintContext,i)


        def one_bond_coupling_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.One_bond_coupling_restraintContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.One_bond_coupling_restraintContext,i)


        def angle_db_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Angle_db_restraintContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Angle_db_restraintContext,i)


        def pre_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Pre_restraintContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Pre_restraintContext,i)


        def pcs_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Pcs_restraintContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Pcs_restraintContext,i)


        def prdc_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Prdc_restraintContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Prdc_restraintContext,i)


        def porientation_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Porientation_restraintContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Porientation_restraintContext,i)


        def pccr_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Pccr_restraintContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Pccr_restraintContext,i)


        def hbond_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Hbond_restraintContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Hbond_restraintContext,i)


        def noe_assign(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Noe_assignContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Noe_assignContext,i)


        def dihedral_assign(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Dihedral_assignContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Dihedral_assignContext,i)


        def sani_assign(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Sani_assignContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Sani_assignContext,i)


        def planar_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Planar_statementContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Planar_statementContext,i)


        def hbond_assign(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Hbond_assignContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Hbond_assignContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_xplor_nih_mr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterXplor_nih_mr" ):
                listener.enterXplor_nih_mr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitXplor_nih_mr" ):
                listener.exitXplor_nih_mr(self)




    def xplor_nih_mr(self):

        localctx = XplorMRParser.Xplor_nih_mrContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_xplor_nih_mr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 177
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==XplorMRParser.Noe:
                self.state = 174
                self.distance_restraint()
                self.state = 179
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 183
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,1,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 180
                    self.dihedral_angle_restraint() 
                self.state = 185
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,1,self._ctx)

            self.state = 189
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << XplorMRParser.Sanisotropy) | (1 << XplorMRParser.Xdipolar) | (1 << XplorMRParser.Dipolar) | (1 << XplorMRParser.VectorAngle) | (1 << XplorMRParser.Tensor) | (1 << XplorMRParser.Anisotropy))) != 0):
                self.state = 186
                self.rdc_restraint()
                self.state = 191
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 195
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==XplorMRParser.Restraints:
                self.state = 192
                self.planar_restraint()
                self.state = 197
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 201
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==XplorMRParser.Xadc:
                self.state = 198
                self.antidistance_restraint()
                self.state = 203
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 207
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==XplorMRParser.Coupling:
                self.state = 204
                self.coupling_restraint()
                self.state = 209
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 213
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==XplorMRParser.Carbon:
                self.state = 210
                self.carbon_shift_restraint()
                self.state = 215
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 219
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==XplorMRParser.Proton:
                self.state = 216
                self.proton_shift_restraint()
                self.state = 221
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 225
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==XplorMRParser.Ramachandran:
                self.state = 222
                self.dihedral_angle_db_restraint()
                self.state = 227
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 231
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==XplorMRParser.Collapse:
                self.state = 228
                self.radius_of_gyration_restraint()
                self.state = 233
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 237
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==XplorMRParser.Danisotropy:
                self.state = 234
                self.diffusion_anisotropy_restraint()
                self.state = 239
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 243
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==XplorMRParser.Orient:
                self.state = 240
                self.orientation_db_restraint()
                self.state = 245
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 249
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==XplorMRParser.Dcsa:
                self.state = 246
                self.csa_restraint()
                self.state = 251
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 255
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==XplorMRParser.Pcsa:
                self.state = 252
                self.pcsa_restraint()
                self.state = 257
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 261
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==XplorMRParser.OneBond:
                self.state = 258
                self.one_bond_coupling_restraint()
                self.state = 263
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 267
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==XplorMRParser.AngleDb:
                self.state = 264
                self.angle_db_restraint()
                self.state = 269
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 273
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==XplorMRParser.Paramagnetic:
                self.state = 270
                self.pre_restraint()
                self.state = 275
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 279
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==XplorMRParser.Xpcs:
                self.state = 276
                self.pcs_restraint()
                self.state = 281
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 285
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==XplorMRParser.Xrdcoupling:
                self.state = 282
                self.prdc_restraint()
                self.state = 287
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 291
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==XplorMRParser.Xangle:
                self.state = 288
                self.porientation_restraint()
                self.state = 293
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 297
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==XplorMRParser.Xccr:
                self.state = 294
                self.pccr_restraint()
                self.state = 299
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 303
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==XplorMRParser.Hbda:
                self.state = 300
                self.hbond_restraint()
                self.state = 305
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 309
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,22,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 306
                    self.noe_assign() 
                self.state = 311
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,22,self._ctx)

            self.state = 315
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,23,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 312
                    self.dihedral_assign() 
                self.state = 317
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,23,self._ctx)

            self.state = 321
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,24,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 318
                    self.sani_assign() 
                self.state = 323
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,24,self._ctx)

            self.state = 327
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==XplorMRParser.Group or _la==XplorMRParser.Initialize:
                self.state = 324
                self.planar_statement()
                self.state = 329
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 333
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==XplorMRParser.Assign:
                self.state = 330
                self.hbond_assign()
                self.state = 335
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 336
            self.match(XplorMRParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Distance_restraintContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Noe(self):
            return self.getToken(XplorMRParser.Noe, 0)

        def L_brace(self):
            return self.getToken(XplorMRParser.L_brace, 0)

        def noe_statement(self):
            return self.getTypedRuleContext(XplorMRParser.Noe_statementContext,0)


        def R_brace(self):
            return self.getToken(XplorMRParser.R_brace, 0)

        def End(self):
            return self.getToken(XplorMRParser.End, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_distance_restraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDistance_restraint" ):
                listener.enterDistance_restraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDistance_restraint" ):
                listener.exitDistance_restraint(self)




    def distance_restraint(self):

        localctx = XplorMRParser.Distance_restraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_distance_restraint)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 338
            self.match(XplorMRParser.Noe)
            self.state = 339
            self.match(XplorMRParser.L_brace)
            self.state = 340
            self.noe_statement()
            self.state = 341
            self.match(XplorMRParser.R_brace)
            self.state = 342
            self.match(XplorMRParser.End)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Dihedral_angle_restraintContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Restraints(self):
            return self.getToken(XplorMRParser.Restraints, 0)

        def Dihedral(self):
            return self.getToken(XplorMRParser.Dihedral, 0)

        def L_brace(self):
            return self.getToken(XplorMRParser.L_brace, 0)

        def dihedral_statement(self):
            return self.getTypedRuleContext(XplorMRParser.Dihedral_statementContext,0)


        def R_brace(self):
            return self.getToken(XplorMRParser.R_brace, 0)

        def End(self):
            return self.getToken(XplorMRParser.End, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_dihedral_angle_restraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDihedral_angle_restraint" ):
                listener.enterDihedral_angle_restraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDihedral_angle_restraint" ):
                listener.exitDihedral_angle_restraint(self)




    def dihedral_angle_restraint(self):

        localctx = XplorMRParser.Dihedral_angle_restraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_dihedral_angle_restraint)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 344
            self.match(XplorMRParser.Restraints)
            self.state = 345
            self.match(XplorMRParser.Dihedral)
            self.state = 346
            self.match(XplorMRParser.L_brace)
            self.state = 347
            self.dihedral_statement()
            self.state = 348
            self.match(XplorMRParser.R_brace)
            self.state = 349
            self.match(XplorMRParser.End)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Rdc_restraintContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Sanisotropy(self):
            return self.getToken(XplorMRParser.Sanisotropy, 0)

        def L_brace(self):
            return self.getToken(XplorMRParser.L_brace, 0)

        def sani_statement(self):
            return self.getTypedRuleContext(XplorMRParser.Sani_statementContext,0)


        def R_brace(self):
            return self.getToken(XplorMRParser.R_brace, 0)

        def End(self):
            return self.getToken(XplorMRParser.End, 0)

        def xdip_statement(self):
            return self.getTypedRuleContext(XplorMRParser.Xdip_statementContext,0)


        def Xdipolar(self):
            return self.getToken(XplorMRParser.Xdipolar, 0)

        def Dipolar(self):
            return self.getToken(XplorMRParser.Dipolar, 0)

        def VectorAngle(self):
            return self.getToken(XplorMRParser.VectorAngle, 0)

        def vean_statement(self):
            return self.getTypedRuleContext(XplorMRParser.Vean_statementContext,0)


        def Tensor(self):
            return self.getToken(XplorMRParser.Tensor, 0)

        def tens_statement(self):
            return self.getTypedRuleContext(XplorMRParser.Tens_statementContext,0)


        def Anisotropy(self):
            return self.getToken(XplorMRParser.Anisotropy, 0)

        def anis_statement(self):
            return self.getTypedRuleContext(XplorMRParser.Anis_statementContext,0)


        def getRuleIndex(self):
            return XplorMRParser.RULE_rdc_restraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRdc_restraint" ):
                listener.enterRdc_restraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRdc_restraint" ):
                listener.exitRdc_restraint(self)




    def rdc_restraint(self):

        localctx = XplorMRParser.Rdc_restraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_rdc_restraint)
        self._la = 0 # Token type
        try:
            self.state = 381
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [XplorMRParser.Sanisotropy]:
                self.enterOuterAlt(localctx, 1)
                self.state = 351
                self.match(XplorMRParser.Sanisotropy)
                self.state = 352
                self.match(XplorMRParser.L_brace)
                self.state = 353
                self.sani_statement()
                self.state = 354
                self.match(XplorMRParser.R_brace)
                self.state = 355
                self.match(XplorMRParser.End)
                pass
            elif token in [XplorMRParser.Xdipolar, XplorMRParser.Dipolar]:
                self.enterOuterAlt(localctx, 2)
                self.state = 357
                _la = self._input.LA(1)
                if not(_la==XplorMRParser.Xdipolar or _la==XplorMRParser.Dipolar):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 358
                self.match(XplorMRParser.L_brace)
                self.state = 359
                self.xdip_statement()
                self.state = 360
                self.match(XplorMRParser.R_brace)
                self.state = 361
                self.match(XplorMRParser.End)
                pass
            elif token in [XplorMRParser.VectorAngle]:
                self.enterOuterAlt(localctx, 3)
                self.state = 363
                self.match(XplorMRParser.VectorAngle)
                self.state = 364
                self.match(XplorMRParser.L_brace)
                self.state = 365
                self.vean_statement()
                self.state = 366
                self.match(XplorMRParser.R_brace)
                self.state = 367
                self.match(XplorMRParser.End)
                pass
            elif token in [XplorMRParser.Tensor]:
                self.enterOuterAlt(localctx, 4)
                self.state = 369
                self.match(XplorMRParser.Tensor)
                self.state = 370
                self.match(XplorMRParser.L_brace)
                self.state = 371
                self.tens_statement()
                self.state = 372
                self.match(XplorMRParser.R_brace)
                self.state = 373
                self.match(XplorMRParser.End)
                pass
            elif token in [XplorMRParser.Anisotropy]:
                self.enterOuterAlt(localctx, 5)
                self.state = 375
                self.match(XplorMRParser.Anisotropy)
                self.state = 376
                self.match(XplorMRParser.L_brace)
                self.state = 377
                self.anis_statement()
                self.state = 378
                self.match(XplorMRParser.R_brace)
                self.state = 379
                self.match(XplorMRParser.End)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Planar_restraintContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Restraints(self):
            return self.getToken(XplorMRParser.Restraints, 0)

        def Planar(self):
            return self.getToken(XplorMRParser.Planar, 0)

        def L_brace(self):
            return self.getToken(XplorMRParser.L_brace, 0)

        def planar_statement(self):
            return self.getTypedRuleContext(XplorMRParser.Planar_statementContext,0)


        def R_brace(self):
            return self.getToken(XplorMRParser.R_brace, 0)

        def End(self):
            return self.getToken(XplorMRParser.End, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_planar_restraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPlanar_restraint" ):
                listener.enterPlanar_restraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPlanar_restraint" ):
                listener.exitPlanar_restraint(self)




    def planar_restraint(self):

        localctx = XplorMRParser.Planar_restraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_planar_restraint)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 383
            self.match(XplorMRParser.Restraints)
            self.state = 384
            self.match(XplorMRParser.Planar)
            self.state = 385
            self.match(XplorMRParser.L_brace)
            self.state = 386
            self.planar_statement()
            self.state = 387
            self.match(XplorMRParser.R_brace)
            self.state = 388
            self.match(XplorMRParser.End)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Antidistance_restraintContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Xadc(self):
            return self.getToken(XplorMRParser.Xadc, 0)

        def L_brace(self):
            return self.getToken(XplorMRParser.L_brace, 0)

        def antidistance_statement(self):
            return self.getTypedRuleContext(XplorMRParser.Antidistance_statementContext,0)


        def R_brace(self):
            return self.getToken(XplorMRParser.R_brace, 0)

        def End(self):
            return self.getToken(XplorMRParser.End, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_antidistance_restraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAntidistance_restraint" ):
                listener.enterAntidistance_restraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAntidistance_restraint" ):
                listener.exitAntidistance_restraint(self)




    def antidistance_restraint(self):

        localctx = XplorMRParser.Antidistance_restraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_antidistance_restraint)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 390
            self.match(XplorMRParser.Xadc)
            self.state = 391
            self.match(XplorMRParser.L_brace)
            self.state = 392
            self.antidistance_statement()
            self.state = 393
            self.match(XplorMRParser.R_brace)
            self.state = 394
            self.match(XplorMRParser.End)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Coupling_restraintContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Coupling(self):
            return self.getToken(XplorMRParser.Coupling, 0)

        def L_brace(self):
            return self.getToken(XplorMRParser.L_brace, 0)

        def coupling_statement(self):
            return self.getTypedRuleContext(XplorMRParser.Coupling_statementContext,0)


        def R_brace(self):
            return self.getToken(XplorMRParser.R_brace, 0)

        def End(self):
            return self.getToken(XplorMRParser.End, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_coupling_restraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCoupling_restraint" ):
                listener.enterCoupling_restraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCoupling_restraint" ):
                listener.exitCoupling_restraint(self)




    def coupling_restraint(self):

        localctx = XplorMRParser.Coupling_restraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_coupling_restraint)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 396
            self.match(XplorMRParser.Coupling)
            self.state = 397
            self.match(XplorMRParser.L_brace)
            self.state = 398
            self.coupling_statement()
            self.state = 399
            self.match(XplorMRParser.R_brace)
            self.state = 400
            self.match(XplorMRParser.End)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Carbon_shift_restraintContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Carbon(self):
            return self.getToken(XplorMRParser.Carbon, 0)

        def L_brace(self):
            return self.getToken(XplorMRParser.L_brace, 0)

        def carbon_shift_statement(self):
            return self.getTypedRuleContext(XplorMRParser.Carbon_shift_statementContext,0)


        def R_brace(self):
            return self.getToken(XplorMRParser.R_brace, 0)

        def End(self):
            return self.getToken(XplorMRParser.End, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_carbon_shift_restraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCarbon_shift_restraint" ):
                listener.enterCarbon_shift_restraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCarbon_shift_restraint" ):
                listener.exitCarbon_shift_restraint(self)




    def carbon_shift_restraint(self):

        localctx = XplorMRParser.Carbon_shift_restraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_carbon_shift_restraint)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 402
            self.match(XplorMRParser.Carbon)
            self.state = 403
            self.match(XplorMRParser.L_brace)
            self.state = 404
            self.carbon_shift_statement()
            self.state = 405
            self.match(XplorMRParser.R_brace)
            self.state = 406
            self.match(XplorMRParser.End)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Proton_shift_restraintContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Proton(self):
            return self.getToken(XplorMRParser.Proton, 0)

        def L_brace(self):
            return self.getToken(XplorMRParser.L_brace, 0)

        def proton_shift_statement(self):
            return self.getTypedRuleContext(XplorMRParser.Proton_shift_statementContext,0)


        def R_brace(self):
            return self.getToken(XplorMRParser.R_brace, 0)

        def End(self):
            return self.getToken(XplorMRParser.End, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_proton_shift_restraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProton_shift_restraint" ):
                listener.enterProton_shift_restraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProton_shift_restraint" ):
                listener.exitProton_shift_restraint(self)




    def proton_shift_restraint(self):

        localctx = XplorMRParser.Proton_shift_restraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_proton_shift_restraint)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 408
            self.match(XplorMRParser.Proton)
            self.state = 409
            self.match(XplorMRParser.L_brace)
            self.state = 410
            self.proton_shift_statement()
            self.state = 411
            self.match(XplorMRParser.R_brace)
            self.state = 412
            self.match(XplorMRParser.End)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Dihedral_angle_db_restraintContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Ramachandran(self):
            return self.getToken(XplorMRParser.Ramachandran, 0)

        def L_brace(self):
            return self.getToken(XplorMRParser.L_brace, 0)

        def ramachandran_statement(self):
            return self.getTypedRuleContext(XplorMRParser.Ramachandran_statementContext,0)


        def R_brace(self):
            return self.getToken(XplorMRParser.R_brace, 0)

        def End(self):
            return self.getToken(XplorMRParser.End, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_dihedral_angle_db_restraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDihedral_angle_db_restraint" ):
                listener.enterDihedral_angle_db_restraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDihedral_angle_db_restraint" ):
                listener.exitDihedral_angle_db_restraint(self)




    def dihedral_angle_db_restraint(self):

        localctx = XplorMRParser.Dihedral_angle_db_restraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_dihedral_angle_db_restraint)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 414
            self.match(XplorMRParser.Ramachandran)
            self.state = 415
            self.match(XplorMRParser.L_brace)
            self.state = 416
            self.ramachandran_statement()
            self.state = 417
            self.match(XplorMRParser.R_brace)
            self.state = 418
            self.match(XplorMRParser.End)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Radius_of_gyration_restraintContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Collapse(self):
            return self.getToken(XplorMRParser.Collapse, 0)

        def L_brace(self):
            return self.getToken(XplorMRParser.L_brace, 0)

        def collapse_statement(self):
            return self.getTypedRuleContext(XplorMRParser.Collapse_statementContext,0)


        def R_brace(self):
            return self.getToken(XplorMRParser.R_brace, 0)

        def End(self):
            return self.getToken(XplorMRParser.End, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_radius_of_gyration_restraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRadius_of_gyration_restraint" ):
                listener.enterRadius_of_gyration_restraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRadius_of_gyration_restraint" ):
                listener.exitRadius_of_gyration_restraint(self)




    def radius_of_gyration_restraint(self):

        localctx = XplorMRParser.Radius_of_gyration_restraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_radius_of_gyration_restraint)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 420
            self.match(XplorMRParser.Collapse)
            self.state = 421
            self.match(XplorMRParser.L_brace)
            self.state = 422
            self.collapse_statement()
            self.state = 423
            self.match(XplorMRParser.R_brace)
            self.state = 424
            self.match(XplorMRParser.End)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Diffusion_anisotropy_restraintContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Danisotropy(self):
            return self.getToken(XplorMRParser.Danisotropy, 0)

        def L_brace(self):
            return self.getToken(XplorMRParser.L_brace, 0)

        def diffusion_statement(self):
            return self.getTypedRuleContext(XplorMRParser.Diffusion_statementContext,0)


        def R_brace(self):
            return self.getToken(XplorMRParser.R_brace, 0)

        def End(self):
            return self.getToken(XplorMRParser.End, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_diffusion_anisotropy_restraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDiffusion_anisotropy_restraint" ):
                listener.enterDiffusion_anisotropy_restraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDiffusion_anisotropy_restraint" ):
                listener.exitDiffusion_anisotropy_restraint(self)




    def diffusion_anisotropy_restraint(self):

        localctx = XplorMRParser.Diffusion_anisotropy_restraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_diffusion_anisotropy_restraint)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 426
            self.match(XplorMRParser.Danisotropy)
            self.state = 427
            self.match(XplorMRParser.L_brace)
            self.state = 428
            self.diffusion_statement()
            self.state = 429
            self.match(XplorMRParser.R_brace)
            self.state = 430
            self.match(XplorMRParser.End)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Orientation_db_restraintContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Orient(self):
            return self.getToken(XplorMRParser.Orient, 0)

        def L_brace(self):
            return self.getToken(XplorMRParser.L_brace, 0)

        def orientation_statement(self):
            return self.getTypedRuleContext(XplorMRParser.Orientation_statementContext,0)


        def R_brace(self):
            return self.getToken(XplorMRParser.R_brace, 0)

        def End(self):
            return self.getToken(XplorMRParser.End, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_orientation_db_restraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOrientation_db_restraint" ):
                listener.enterOrientation_db_restraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOrientation_db_restraint" ):
                listener.exitOrientation_db_restraint(self)




    def orientation_db_restraint(self):

        localctx = XplorMRParser.Orientation_db_restraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_orientation_db_restraint)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 432
            self.match(XplorMRParser.Orient)
            self.state = 433
            self.match(XplorMRParser.L_brace)
            self.state = 434
            self.orientation_statement()
            self.state = 435
            self.match(XplorMRParser.R_brace)
            self.state = 436
            self.match(XplorMRParser.End)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Csa_restraintContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Dcsa(self):
            return self.getToken(XplorMRParser.Dcsa, 0)

        def L_brace(self):
            return self.getToken(XplorMRParser.L_brace, 0)

        def csa_statement(self):
            return self.getTypedRuleContext(XplorMRParser.Csa_statementContext,0)


        def R_brace(self):
            return self.getToken(XplorMRParser.R_brace, 0)

        def End(self):
            return self.getToken(XplorMRParser.End, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_csa_restraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCsa_restraint" ):
                listener.enterCsa_restraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCsa_restraint" ):
                listener.exitCsa_restraint(self)




    def csa_restraint(self):

        localctx = XplorMRParser.Csa_restraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_csa_restraint)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 438
            self.match(XplorMRParser.Dcsa)
            self.state = 439
            self.match(XplorMRParser.L_brace)
            self.state = 440
            self.csa_statement()
            self.state = 441
            self.match(XplorMRParser.R_brace)
            self.state = 442
            self.match(XplorMRParser.End)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pcsa_restraintContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Pcsa(self):
            return self.getToken(XplorMRParser.Pcsa, 0)

        def L_brace(self):
            return self.getToken(XplorMRParser.L_brace, 0)

        def pcsa_statement(self):
            return self.getTypedRuleContext(XplorMRParser.Pcsa_statementContext,0)


        def R_brace(self):
            return self.getToken(XplorMRParser.R_brace, 0)

        def End(self):
            return self.getToken(XplorMRParser.End, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_pcsa_restraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPcsa_restraint" ):
                listener.enterPcsa_restraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPcsa_restraint" ):
                listener.exitPcsa_restraint(self)




    def pcsa_restraint(self):

        localctx = XplorMRParser.Pcsa_restraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_pcsa_restraint)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 444
            self.match(XplorMRParser.Pcsa)
            self.state = 445
            self.match(XplorMRParser.L_brace)
            self.state = 446
            self.pcsa_statement()
            self.state = 447
            self.match(XplorMRParser.R_brace)
            self.state = 448
            self.match(XplorMRParser.End)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class One_bond_coupling_restraintContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OneBond(self):
            return self.getToken(XplorMRParser.OneBond, 0)

        def L_brace(self):
            return self.getToken(XplorMRParser.L_brace, 0)

        def one_bond_coupling_statement(self):
            return self.getTypedRuleContext(XplorMRParser.One_bond_coupling_statementContext,0)


        def R_brace(self):
            return self.getToken(XplorMRParser.R_brace, 0)

        def End(self):
            return self.getToken(XplorMRParser.End, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_one_bond_coupling_restraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOne_bond_coupling_restraint" ):
                listener.enterOne_bond_coupling_restraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOne_bond_coupling_restraint" ):
                listener.exitOne_bond_coupling_restraint(self)




    def one_bond_coupling_restraint(self):

        localctx = XplorMRParser.One_bond_coupling_restraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_one_bond_coupling_restraint)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 450
            self.match(XplorMRParser.OneBond)
            self.state = 451
            self.match(XplorMRParser.L_brace)
            self.state = 452
            self.one_bond_coupling_statement()
            self.state = 453
            self.match(XplorMRParser.R_brace)
            self.state = 454
            self.match(XplorMRParser.End)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Angle_db_restraintContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AngleDb(self):
            return self.getToken(XplorMRParser.AngleDb, 0)

        def L_brace(self):
            return self.getToken(XplorMRParser.L_brace, 0)

        def angle_db_statement(self):
            return self.getTypedRuleContext(XplorMRParser.Angle_db_statementContext,0)


        def R_brace(self):
            return self.getToken(XplorMRParser.R_brace, 0)

        def End(self):
            return self.getToken(XplorMRParser.End, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_angle_db_restraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAngle_db_restraint" ):
                listener.enterAngle_db_restraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAngle_db_restraint" ):
                listener.exitAngle_db_restraint(self)




    def angle_db_restraint(self):

        localctx = XplorMRParser.Angle_db_restraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_angle_db_restraint)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 456
            self.match(XplorMRParser.AngleDb)
            self.state = 457
            self.match(XplorMRParser.L_brace)
            self.state = 458
            self.angle_db_statement()
            self.state = 459
            self.match(XplorMRParser.R_brace)
            self.state = 460
            self.match(XplorMRParser.End)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pre_restraintContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Paramagnetic(self):
            return self.getToken(XplorMRParser.Paramagnetic, 0)

        def L_brace(self):
            return self.getToken(XplorMRParser.L_brace, 0)

        def pre_statement(self):
            return self.getTypedRuleContext(XplorMRParser.Pre_statementContext,0)


        def R_brace(self):
            return self.getToken(XplorMRParser.R_brace, 0)

        def End(self):
            return self.getToken(XplorMRParser.End, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_pre_restraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPre_restraint" ):
                listener.enterPre_restraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPre_restraint" ):
                listener.exitPre_restraint(self)




    def pre_restraint(self):

        localctx = XplorMRParser.Pre_restraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_pre_restraint)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 462
            self.match(XplorMRParser.Paramagnetic)
            self.state = 463
            self.match(XplorMRParser.L_brace)
            self.state = 464
            self.pre_statement()
            self.state = 465
            self.match(XplorMRParser.R_brace)
            self.state = 466
            self.match(XplorMRParser.End)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pcs_restraintContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Xpcs(self):
            return self.getToken(XplorMRParser.Xpcs, 0)

        def L_brace(self):
            return self.getToken(XplorMRParser.L_brace, 0)

        def pcs_statement(self):
            return self.getTypedRuleContext(XplorMRParser.Pcs_statementContext,0)


        def R_brace(self):
            return self.getToken(XplorMRParser.R_brace, 0)

        def End(self):
            return self.getToken(XplorMRParser.End, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_pcs_restraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPcs_restraint" ):
                listener.enterPcs_restraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPcs_restraint" ):
                listener.exitPcs_restraint(self)




    def pcs_restraint(self):

        localctx = XplorMRParser.Pcs_restraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_pcs_restraint)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 468
            self.match(XplorMRParser.Xpcs)
            self.state = 469
            self.match(XplorMRParser.L_brace)
            self.state = 470
            self.pcs_statement()
            self.state = 471
            self.match(XplorMRParser.R_brace)
            self.state = 472
            self.match(XplorMRParser.End)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Prdc_restraintContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Xrdcoupling(self):
            return self.getToken(XplorMRParser.Xrdcoupling, 0)

        def L_brace(self):
            return self.getToken(XplorMRParser.L_brace, 0)

        def prdc_statement(self):
            return self.getTypedRuleContext(XplorMRParser.Prdc_statementContext,0)


        def R_brace(self):
            return self.getToken(XplorMRParser.R_brace, 0)

        def End(self):
            return self.getToken(XplorMRParser.End, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_prdc_restraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrdc_restraint" ):
                listener.enterPrdc_restraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrdc_restraint" ):
                listener.exitPrdc_restraint(self)




    def prdc_restraint(self):

        localctx = XplorMRParser.Prdc_restraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_prdc_restraint)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 474
            self.match(XplorMRParser.Xrdcoupling)
            self.state = 475
            self.match(XplorMRParser.L_brace)
            self.state = 476
            self.prdc_statement()
            self.state = 477
            self.match(XplorMRParser.R_brace)
            self.state = 478
            self.match(XplorMRParser.End)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Porientation_restraintContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Xangle(self):
            return self.getToken(XplorMRParser.Xangle, 0)

        def L_brace(self):
            return self.getToken(XplorMRParser.L_brace, 0)

        def porientation_statement(self):
            return self.getTypedRuleContext(XplorMRParser.Porientation_statementContext,0)


        def R_brace(self):
            return self.getToken(XplorMRParser.R_brace, 0)

        def End(self):
            return self.getToken(XplorMRParser.End, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_porientation_restraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPorientation_restraint" ):
                listener.enterPorientation_restraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPorientation_restraint" ):
                listener.exitPorientation_restraint(self)




    def porientation_restraint(self):

        localctx = XplorMRParser.Porientation_restraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_porientation_restraint)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 480
            self.match(XplorMRParser.Xangle)
            self.state = 481
            self.match(XplorMRParser.L_brace)
            self.state = 482
            self.porientation_statement()
            self.state = 483
            self.match(XplorMRParser.R_brace)
            self.state = 484
            self.match(XplorMRParser.End)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pccr_restraintContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Xccr(self):
            return self.getToken(XplorMRParser.Xccr, 0)

        def L_brace(self):
            return self.getToken(XplorMRParser.L_brace, 0)

        def pccr_statement(self):
            return self.getTypedRuleContext(XplorMRParser.Pccr_statementContext,0)


        def R_brace(self):
            return self.getToken(XplorMRParser.R_brace, 0)

        def End(self):
            return self.getToken(XplorMRParser.End, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_pccr_restraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPccr_restraint" ):
                listener.enterPccr_restraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPccr_restraint" ):
                listener.exitPccr_restraint(self)




    def pccr_restraint(self):

        localctx = XplorMRParser.Pccr_restraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_pccr_restraint)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 486
            self.match(XplorMRParser.Xccr)
            self.state = 487
            self.match(XplorMRParser.L_brace)
            self.state = 488
            self.pccr_statement()
            self.state = 489
            self.match(XplorMRParser.R_brace)
            self.state = 490
            self.match(XplorMRParser.End)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Hbond_restraintContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Hbda(self):
            return self.getToken(XplorMRParser.Hbda, 0)

        def L_brace(self):
            return self.getToken(XplorMRParser.L_brace, 0)

        def hbond_statement(self):
            return self.getTypedRuleContext(XplorMRParser.Hbond_statementContext,0)


        def R_brace(self):
            return self.getToken(XplorMRParser.R_brace, 0)

        def End(self):
            return self.getToken(XplorMRParser.End, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_hbond_restraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHbond_restraint" ):
                listener.enterHbond_restraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHbond_restraint" ):
                listener.exitHbond_restraint(self)




    def hbond_restraint(self):

        localctx = XplorMRParser.Hbond_restraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_hbond_restraint)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 492
            self.match(XplorMRParser.Hbda)
            self.state = 493
            self.match(XplorMRParser.L_brace)
            self.state = 494
            self.hbond_statement()
            self.state = 495
            self.match(XplorMRParser.R_brace)
            self.state = 496
            self.match(XplorMRParser.End)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Noe_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def noe_assign(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Noe_assignContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Noe_assignContext,i)


        def Asymptote(self):
            return self.getToken(XplorMRParser.Asymptote, 0)

        def Simple_names(self):
            return self.getToken(XplorMRParser.Simple_names, 0)

        def Real(self):
            return self.getToken(XplorMRParser.Real, 0)

        def Averaging(self):
            return self.getToken(XplorMRParser.Averaging, 0)

        def Noe_avr_methods(self):
            return self.getToken(XplorMRParser.Noe_avr_methods, 0)

        def Bhig(self):
            return self.getToken(XplorMRParser.Bhig, 0)

        def Ceiling(self):
            return self.getToken(XplorMRParser.Ceiling, 0)

        def Equ_op(self):
            return self.getToken(XplorMRParser.Equ_op, 0)

        def Classification(self):
            return self.getToken(XplorMRParser.Classification, 0)

        def Simple_name(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Simple_name)
            else:
                return self.getToken(XplorMRParser.Simple_name, i)

        def CountViol(self):
            return self.getToken(XplorMRParser.CountViol, 0)

        def Distribute(self):
            return self.getToken(XplorMRParser.Distribute, 0)

        def Monomers(self):
            return self.getToken(XplorMRParser.Monomers, 0)

        def Integer(self):
            return self.getToken(XplorMRParser.Integer, 0)

        def Ncount(self):
            return self.getToken(XplorMRParser.Ncount, 0)

        def Nrestraints(self):
            return self.getToken(XplorMRParser.Nrestraints, 0)

        def Potential(self):
            return self.getToken(XplorMRParser.Potential, 0)

        def Noe_potential(self):
            return self.getToken(XplorMRParser.Noe_potential, 0)

        def Predict(self):
            return self.getToken(XplorMRParser.Predict, 0)

        def L_brace(self):
            return self.getToken(XplorMRParser.L_brace, 0)

        def predict_statement(self):
            return self.getTypedRuleContext(XplorMRParser.Predict_statementContext,0)


        def R_brace(self):
            return self.getToken(XplorMRParser.R_brace, 0)

        def End(self):
            return self.getToken(XplorMRParser.End, 0)

        def Print(self):
            return self.getToken(XplorMRParser.Print, 0)

        def Threshold(self):
            return self.getToken(XplorMRParser.Threshold, 0)

        def Reset(self):
            return self.getToken(XplorMRParser.Reset, 0)

        def Rswitch(self):
            return self.getToken(XplorMRParser.Rswitch, 0)

        def Scale(self):
            return self.getToken(XplorMRParser.Scale, 0)

        def SoExponent(self):
            return self.getToken(XplorMRParser.SoExponent, 0)

        def SqConstant(self):
            return self.getToken(XplorMRParser.SqConstant, 0)

        def SqExponent(self):
            return self.getToken(XplorMRParser.SqExponent, 0)

        def SqOffset(self):
            return self.getToken(XplorMRParser.SqOffset, 0)

        def Temperature(self):
            return self.getToken(XplorMRParser.Temperature, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_noe_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNoe_statement" ):
                listener.enterNoe_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNoe_statement" ):
                listener.exitNoe_statement(self)




    def noe_statement(self):

        localctx = XplorMRParser.Noe_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_noe_statement)
        self._la = 0 # Token type
        try:
            self.state = 570
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [XplorMRParser.Assign, XplorMRParser.R_brace]:
                self.enterOuterAlt(localctx, 1)
                self.state = 501
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==XplorMRParser.Assign:
                    self.state = 498
                    self.noe_assign()
                    self.state = 503
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass
            elif token in [XplorMRParser.Asymptote]:
                self.enterOuterAlt(localctx, 2)
                self.state = 504
                self.match(XplorMRParser.Asymptote)
                self.state = 505
                self.match(XplorMRParser.Simple_names)
                self.state = 506
                self.match(XplorMRParser.Real)
                pass
            elif token in [XplorMRParser.Averaging]:
                self.enterOuterAlt(localctx, 3)
                self.state = 507
                self.match(XplorMRParser.Averaging)
                self.state = 508
                self.match(XplorMRParser.Simple_names)
                self.state = 509
                self.match(XplorMRParser.Noe_avr_methods)
                pass
            elif token in [XplorMRParser.Bhig]:
                self.enterOuterAlt(localctx, 4)
                self.state = 510
                self.match(XplorMRParser.Bhig)
                self.state = 511
                self.match(XplorMRParser.Simple_names)
                self.state = 512
                self.match(XplorMRParser.Real)
                pass
            elif token in [XplorMRParser.Ceiling]:
                self.enterOuterAlt(localctx, 5)
                self.state = 513
                self.match(XplorMRParser.Ceiling)
                self.state = 514
                self.match(XplorMRParser.Equ_op)
                self.state = 515
                self.match(XplorMRParser.Real)
                pass
            elif token in [XplorMRParser.Classification]:
                self.enterOuterAlt(localctx, 6)
                self.state = 516
                self.match(XplorMRParser.Classification)
                self.state = 517
                self.match(XplorMRParser.Simple_name)
                pass
            elif token in [XplorMRParser.CountViol]:
                self.enterOuterAlt(localctx, 7)
                self.state = 518
                self.match(XplorMRParser.CountViol)
                self.state = 519
                self.match(XplorMRParser.Simple_name)
                pass
            elif token in [XplorMRParser.Distribute]:
                self.enterOuterAlt(localctx, 8)
                self.state = 520
                self.match(XplorMRParser.Distribute)
                self.state = 521
                self.match(XplorMRParser.Simple_name)
                self.state = 522
                self.match(XplorMRParser.Simple_name)
                self.state = 523
                self.match(XplorMRParser.Real)
                pass
            elif token in [XplorMRParser.Monomers]:
                self.enterOuterAlt(localctx, 9)
                self.state = 524
                self.match(XplorMRParser.Monomers)
                self.state = 525
                self.match(XplorMRParser.Simple_names)
                self.state = 526
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.Ncount]:
                self.enterOuterAlt(localctx, 10)
                self.state = 527
                self.match(XplorMRParser.Ncount)
                self.state = 528
                self.match(XplorMRParser.Simple_names)
                self.state = 529
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.Nrestraints]:
                self.enterOuterAlt(localctx, 11)
                self.state = 530
                self.match(XplorMRParser.Nrestraints)
                self.state = 531
                self.match(XplorMRParser.Equ_op)
                self.state = 532
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.Potential]:
                self.enterOuterAlt(localctx, 12)
                self.state = 533
                self.match(XplorMRParser.Potential)
                self.state = 534
                self.match(XplorMRParser.Simple_names)
                self.state = 535
                self.match(XplorMRParser.Noe_potential)
                pass
            elif token in [XplorMRParser.Predict]:
                self.enterOuterAlt(localctx, 13)
                self.state = 536
                self.match(XplorMRParser.Predict)
                self.state = 537
                self.match(XplorMRParser.L_brace)
                self.state = 538
                self.predict_statement()
                self.state = 539
                self.match(XplorMRParser.R_brace)
                self.state = 540
                self.match(XplorMRParser.End)
                pass
            elif token in [XplorMRParser.Print]:
                self.enterOuterAlt(localctx, 14)
                self.state = 542
                self.match(XplorMRParser.Print)
                self.state = 543
                self.match(XplorMRParser.Threshold)
                self.state = 545
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 544
                    self.match(XplorMRParser.Equ_op)


                self.state = 547
                self.match(XplorMRParser.Real)
                pass
            elif token in [XplorMRParser.Reset]:
                self.enterOuterAlt(localctx, 15)
                self.state = 548
                self.match(XplorMRParser.Reset)
                pass
            elif token in [XplorMRParser.Rswitch]:
                self.enterOuterAlt(localctx, 16)
                self.state = 549
                self.match(XplorMRParser.Rswitch)
                self.state = 550
                self.match(XplorMRParser.Simple_names)
                self.state = 551
                self.match(XplorMRParser.Real)
                pass
            elif token in [XplorMRParser.Scale]:
                self.enterOuterAlt(localctx, 17)
                self.state = 552
                self.match(XplorMRParser.Scale)
                self.state = 553
                self.match(XplorMRParser.Simple_names)
                self.state = 554
                self.match(XplorMRParser.Real)
                pass
            elif token in [XplorMRParser.SoExponent]:
                self.enterOuterAlt(localctx, 18)
                self.state = 555
                self.match(XplorMRParser.SoExponent)
                self.state = 556
                self.match(XplorMRParser.Simple_names)
                self.state = 557
                self.match(XplorMRParser.Real)
                pass
            elif token in [XplorMRParser.SqConstant]:
                self.enterOuterAlt(localctx, 19)
                self.state = 558
                self.match(XplorMRParser.SqConstant)
                self.state = 559
                self.match(XplorMRParser.Simple_names)
                self.state = 560
                self.match(XplorMRParser.Real)
                pass
            elif token in [XplorMRParser.SqExponent]:
                self.enterOuterAlt(localctx, 20)
                self.state = 561
                self.match(XplorMRParser.SqExponent)
                self.state = 562
                self.match(XplorMRParser.Simple_names)
                self.state = 563
                self.match(XplorMRParser.Real)
                pass
            elif token in [XplorMRParser.SqOffset]:
                self.enterOuterAlt(localctx, 21)
                self.state = 564
                self.match(XplorMRParser.SqOffset)
                self.state = 565
                self.match(XplorMRParser.Simple_names)
                self.state = 566
                self.match(XplorMRParser.Real)
                pass
            elif token in [XplorMRParser.Temperature]:
                self.enterOuterAlt(localctx, 22)
                self.state = 567
                self.match(XplorMRParser.Temperature)
                self.state = 568
                self.match(XplorMRParser.Equ_op)
                self.state = 569
                self.match(XplorMRParser.Real)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Noe_assignContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Assign(self):
            return self.getToken(XplorMRParser.Assign, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.SelectionContext,i)


        def Real(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Real)
            else:
                return self.getToken(XplorMRParser.Real, i)

        def Or_op(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Or_op)
            else:
                return self.getToken(XplorMRParser.Or_op, i)

        def getRuleIndex(self):
            return XplorMRParser.RULE_noe_assign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNoe_assign" ):
                listener.enterNoe_assign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNoe_assign" ):
                listener.exitNoe_assign(self)




    def noe_assign(self):

        localctx = XplorMRParser.Noe_assignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_noe_assign)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 572
            self.match(XplorMRParser.Assign)
            self.state = 573
            self.selection()
            self.state = 574
            self.selection()
            self.state = 575
            self.match(XplorMRParser.Real)
            self.state = 576
            self.match(XplorMRParser.Real)
            self.state = 577
            self.match(XplorMRParser.Real)
            self.state = 584
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==XplorMRParser.Or_op:
                self.state = 578
                self.match(XplorMRParser.Or_op)
                self.state = 579
                self.selection()
                self.state = 580
                self.selection()
                self.state = 586
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Predict_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Cutoff(self):
            return self.getToken(XplorMRParser.Cutoff, 0)

        def Equ_op(self):
            return self.getToken(XplorMRParser.Equ_op, 0)

        def Real(self):
            return self.getToken(XplorMRParser.Real, 0)

        def Cuton(self):
            return self.getToken(XplorMRParser.Cuton, 0)

        def From(self):
            return self.getToken(XplorMRParser.From, 0)

        def selection(self):
            return self.getTypedRuleContext(XplorMRParser.SelectionContext,0)


        def To(self):
            return self.getToken(XplorMRParser.To, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_predict_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPredict_statement" ):
                listener.enterPredict_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPredict_statement" ):
                listener.exitPredict_statement(self)




    def predict_statement(self):

        localctx = XplorMRParser.Predict_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_predict_statement)
        try:
            self.state = 597
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [XplorMRParser.Cutoff]:
                self.enterOuterAlt(localctx, 1)
                self.state = 587
                self.match(XplorMRParser.Cutoff)
                self.state = 588
                self.match(XplorMRParser.Equ_op)
                self.state = 589
                self.match(XplorMRParser.Real)
                pass
            elif token in [XplorMRParser.Cuton]:
                self.enterOuterAlt(localctx, 2)
                self.state = 590
                self.match(XplorMRParser.Cuton)
                self.state = 591
                self.match(XplorMRParser.Equ_op)
                self.state = 592
                self.match(XplorMRParser.Real)
                pass
            elif token in [XplorMRParser.From]:
                self.enterOuterAlt(localctx, 3)
                self.state = 593
                self.match(XplorMRParser.From)
                self.state = 594
                self.selection()
                pass
            elif token in [XplorMRParser.To]:
                self.enterOuterAlt(localctx, 4)
                self.state = 595
                self.match(XplorMRParser.To)
                self.state = 596
                self.selection()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Dihedral_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def dihedral_assign(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Dihedral_assignContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Dihedral_assignContext,i)


        def Nassign(self):
            return self.getToken(XplorMRParser.Nassign, 0)

        def Equ_op(self):
            return self.getToken(XplorMRParser.Equ_op, 0)

        def Integer(self):
            return self.getToken(XplorMRParser.Integer, 0)

        def Reset(self):
            return self.getToken(XplorMRParser.Reset, 0)

        def Scale(self):
            return self.getToken(XplorMRParser.Scale, 0)

        def Real(self):
            return self.getToken(XplorMRParser.Real, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_dihedral_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDihedral_statement" ):
                listener.enterDihedral_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDihedral_statement" ):
                listener.exitDihedral_statement(self)




    def dihedral_statement(self):

        localctx = XplorMRParser.Dihedral_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_dihedral_statement)
        self._la = 0 # Token type
        try:
            self.state = 611
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [XplorMRParser.Assign, XplorMRParser.R_brace]:
                self.enterOuterAlt(localctx, 1)
                self.state = 602
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==XplorMRParser.Assign:
                    self.state = 599
                    self.dihedral_assign()
                    self.state = 604
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass
            elif token in [XplorMRParser.Nassign]:
                self.enterOuterAlt(localctx, 2)
                self.state = 605
                self.match(XplorMRParser.Nassign)
                self.state = 606
                self.match(XplorMRParser.Equ_op)
                self.state = 607
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.Reset]:
                self.enterOuterAlt(localctx, 3)
                self.state = 608
                self.match(XplorMRParser.Reset)
                pass
            elif token in [XplorMRParser.Scale]:
                self.enterOuterAlt(localctx, 4)
                self.state = 609
                self.match(XplorMRParser.Scale)
                self.state = 610
                self.match(XplorMRParser.Real)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Dihedral_assignContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Assign(self):
            return self.getToken(XplorMRParser.Assign, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.SelectionContext,i)


        def Real(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Real)
            else:
                return self.getToken(XplorMRParser.Real, i)

        def Integer(self):
            return self.getToken(XplorMRParser.Integer, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_dihedral_assign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDihedral_assign" ):
                listener.enterDihedral_assign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDihedral_assign" ):
                listener.exitDihedral_assign(self)




    def dihedral_assign(self):

        localctx = XplorMRParser.Dihedral_assignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_dihedral_assign)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 613
            self.match(XplorMRParser.Assign)
            self.state = 614
            self.selection()
            self.state = 615
            self.selection()
            self.state = 616
            self.selection()
            self.state = 617
            self.selection()
            self.state = 618
            self.match(XplorMRParser.Real)
            self.state = 619
            self.match(XplorMRParser.Real)
            self.state = 620
            self.match(XplorMRParser.Real)
            self.state = 621
            self.match(XplorMRParser.Integer)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Sani_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def sani_assign(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Sani_assignContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Sani_assignContext,i)


        def Classification(self):
            return self.getToken(XplorMRParser.Classification, 0)

        def Simple_name(self):
            return self.getToken(XplorMRParser.Simple_name, 0)

        def Coefficients(self):
            return self.getToken(XplorMRParser.Coefficients, 0)

        def Real(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Real)
            else:
                return self.getToken(XplorMRParser.Real, i)

        def ForceConstant(self):
            return self.getToken(XplorMRParser.ForceConstant, 0)

        def Nrestraints(self):
            return self.getToken(XplorMRParser.Nrestraints, 0)

        def Integer(self):
            return self.getToken(XplorMRParser.Integer, 0)

        def Potential(self):
            return self.getToken(XplorMRParser.Potential, 0)

        def Rdc_potential(self):
            return self.getToken(XplorMRParser.Rdc_potential, 0)

        def Print(self):
            return self.getToken(XplorMRParser.Print, 0)

        def Threshold(self):
            return self.getToken(XplorMRParser.Threshold, 0)

        def Reset(self):
            return self.getToken(XplorMRParser.Reset, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_sani_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSani_statement" ):
                listener.enterSani_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSani_statement" ):
                listener.exitSani_statement(self)




    def sani_statement(self):

        localctx = XplorMRParser.Sani_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_sani_statement)
        self._la = 0 # Token type
        try:
            self.state = 645
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [XplorMRParser.Assign, XplorMRParser.R_brace]:
                self.enterOuterAlt(localctx, 1)
                self.state = 626
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==XplorMRParser.Assign:
                    self.state = 623
                    self.sani_assign()
                    self.state = 628
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass
            elif token in [XplorMRParser.Classification]:
                self.enterOuterAlt(localctx, 2)
                self.state = 629
                self.match(XplorMRParser.Classification)
                self.state = 630
                self.match(XplorMRParser.Simple_name)
                pass
            elif token in [XplorMRParser.Coefficients]:
                self.enterOuterAlt(localctx, 3)
                self.state = 631
                self.match(XplorMRParser.Coefficients)
                self.state = 632
                self.match(XplorMRParser.Real)
                self.state = 633
                self.match(XplorMRParser.Real)
                self.state = 634
                self.match(XplorMRParser.Real)
                pass
            elif token in [XplorMRParser.ForceConstant]:
                self.enterOuterAlt(localctx, 4)
                self.state = 635
                self.match(XplorMRParser.ForceConstant)
                self.state = 636
                self.match(XplorMRParser.Real)
                pass
            elif token in [XplorMRParser.Nrestraints]:
                self.enterOuterAlt(localctx, 5)
                self.state = 637
                self.match(XplorMRParser.Nrestraints)
                self.state = 638
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.Potential]:
                self.enterOuterAlt(localctx, 6)
                self.state = 639
                self.match(XplorMRParser.Potential)
                self.state = 640
                self.match(XplorMRParser.Rdc_potential)
                pass
            elif token in [XplorMRParser.Print]:
                self.enterOuterAlt(localctx, 7)
                self.state = 641
                self.match(XplorMRParser.Print)
                self.state = 642
                self.match(XplorMRParser.Threshold)
                self.state = 643
                self.match(XplorMRParser.Real)
                pass
            elif token in [XplorMRParser.Reset]:
                self.enterOuterAlt(localctx, 8)
                self.state = 644
                self.match(XplorMRParser.Reset)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Sani_assignContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Assign(self):
            return self.getToken(XplorMRParser.Assign, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.SelectionContext,i)


        def Real(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Real)
            else:
                return self.getToken(XplorMRParser.Real, i)

        def getRuleIndex(self):
            return XplorMRParser.RULE_sani_assign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSani_assign" ):
                listener.enterSani_assign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSani_assign" ):
                listener.exitSani_assign(self)




    def sani_assign(self):

        localctx = XplorMRParser.Sani_assignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_sani_assign)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 647
            self.match(XplorMRParser.Assign)
            self.state = 648
            self.selection()
            self.state = 649
            self.selection()
            self.state = 650
            self.selection()
            self.state = 651
            self.selection()
            self.state = 652
            self.selection()
            self.state = 653
            self.selection()
            self.state = 654
            self.match(XplorMRParser.Real)
            self.state = 655
            self.match(XplorMRParser.Real)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Xdip_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def xdip_assign(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Xdip_assignContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Xdip_assignContext,i)


        def Classification(self):
            return self.getToken(XplorMRParser.Classification, 0)

        def Simple_name(self):
            return self.getToken(XplorMRParser.Simple_name, 0)

        def Type(self):
            return self.getToken(XplorMRParser.Type, 0)

        def Rdc_dist_fix_types(self):
            return self.getToken(XplorMRParser.Rdc_dist_fix_types, 0)

        def Scale(self):
            return self.getToken(XplorMRParser.Scale, 0)

        def Real(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Real)
            else:
                return self.getToken(XplorMRParser.Real, i)

        def Sign(self):
            return self.getToken(XplorMRParser.Sign, 0)

        def Logical(self):
            return self.getToken(XplorMRParser.Logical, 0)

        def Average(self):
            return self.getToken(XplorMRParser.Average, 0)

        def Rdc_avr_methods(self):
            return self.getToken(XplorMRParser.Rdc_avr_methods, 0)

        def Coefficients(self):
            return self.getToken(XplorMRParser.Coefficients, 0)

        def ForceConstant(self):
            return self.getToken(XplorMRParser.ForceConstant, 0)

        def Nrestraints(self):
            return self.getToken(XplorMRParser.Nrestraints, 0)

        def Integer(self):
            return self.getToken(XplorMRParser.Integer, 0)

        def Potential(self):
            return self.getToken(XplorMRParser.Potential, 0)

        def Rdc_potential(self):
            return self.getToken(XplorMRParser.Rdc_potential, 0)

        def Print(self):
            return self.getToken(XplorMRParser.Print, 0)

        def Threshold(self):
            return self.getToken(XplorMRParser.Threshold, 0)

        def Reset(self):
            return self.getToken(XplorMRParser.Reset, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_xdip_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterXdip_statement" ):
                listener.enterXdip_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitXdip_statement" ):
                listener.exitXdip_statement(self)




    def xdip_statement(self):

        localctx = XplorMRParser.Xdip_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_xdip_statement)
        self._la = 0 # Token type
        try:
            self.state = 687
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [XplorMRParser.Assign, XplorMRParser.R_brace]:
                self.enterOuterAlt(localctx, 1)
                self.state = 660
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==XplorMRParser.Assign:
                    self.state = 657
                    self.xdip_assign()
                    self.state = 662
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass
            elif token in [XplorMRParser.Classification]:
                self.enterOuterAlt(localctx, 2)
                self.state = 663
                self.match(XplorMRParser.Classification)
                self.state = 664
                self.match(XplorMRParser.Simple_name)
                pass
            elif token in [XplorMRParser.Type]:
                self.enterOuterAlt(localctx, 3)
                self.state = 665
                self.match(XplorMRParser.Type)
                self.state = 666
                self.match(XplorMRParser.Rdc_dist_fix_types)
                pass
            elif token in [XplorMRParser.Scale]:
                self.enterOuterAlt(localctx, 4)
                self.state = 667
                self.match(XplorMRParser.Scale)
                self.state = 668
                self.match(XplorMRParser.Real)
                pass
            elif token in [XplorMRParser.Sign]:
                self.enterOuterAlt(localctx, 5)
                self.state = 669
                self.match(XplorMRParser.Sign)
                self.state = 670
                self.match(XplorMRParser.Logical)
                pass
            elif token in [XplorMRParser.Average]:
                self.enterOuterAlt(localctx, 6)
                self.state = 671
                self.match(XplorMRParser.Average)
                self.state = 672
                self.match(XplorMRParser.Rdc_avr_methods)
                pass
            elif token in [XplorMRParser.Coefficients]:
                self.enterOuterAlt(localctx, 7)
                self.state = 673
                self.match(XplorMRParser.Coefficients)
                self.state = 674
                self.match(XplorMRParser.Real)
                self.state = 675
                self.match(XplorMRParser.Real)
                self.state = 676
                self.match(XplorMRParser.Real)
                pass
            elif token in [XplorMRParser.ForceConstant]:
                self.enterOuterAlt(localctx, 8)
                self.state = 677
                self.match(XplorMRParser.ForceConstant)
                self.state = 678
                self.match(XplorMRParser.Real)
                pass
            elif token in [XplorMRParser.Nrestraints]:
                self.enterOuterAlt(localctx, 9)
                self.state = 679
                self.match(XplorMRParser.Nrestraints)
                self.state = 680
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.Potential]:
                self.enterOuterAlt(localctx, 10)
                self.state = 681
                self.match(XplorMRParser.Potential)
                self.state = 682
                self.match(XplorMRParser.Rdc_potential)
                pass
            elif token in [XplorMRParser.Print]:
                self.enterOuterAlt(localctx, 11)
                self.state = 683
                self.match(XplorMRParser.Print)
                self.state = 684
                self.match(XplorMRParser.Threshold)
                self.state = 685
                self.match(XplorMRParser.Real)
                pass
            elif token in [XplorMRParser.Reset]:
                self.enterOuterAlt(localctx, 12)
                self.state = 686
                self.match(XplorMRParser.Reset)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Xdip_assignContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Assign(self):
            return self.getToken(XplorMRParser.Assign, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.SelectionContext,i)


        def Real(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Real)
            else:
                return self.getToken(XplorMRParser.Real, i)

        def getRuleIndex(self):
            return XplorMRParser.RULE_xdip_assign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterXdip_assign" ):
                listener.enterXdip_assign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitXdip_assign" ):
                listener.exitXdip_assign(self)




    def xdip_assign(self):

        localctx = XplorMRParser.Xdip_assignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_xdip_assign)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 689
            self.match(XplorMRParser.Assign)
            self.state = 690
            self.selection()
            self.state = 691
            self.selection()
            self.state = 692
            self.selection()
            self.state = 693
            self.selection()
            self.state = 694
            self.selection()
            self.state = 695
            self.selection()
            self.state = 696
            self.match(XplorMRParser.Real)
            self.state = 697
            self.match(XplorMRParser.Real)
            self.state = 698
            self.match(XplorMRParser.Real)
            self.state = 702
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==XplorMRParser.Real:
                self.state = 699
                self.match(XplorMRParser.Real)
                self.state = 700
                self.match(XplorMRParser.Real)
                self.state = 701
                self.match(XplorMRParser.Real)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Vean_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def vean_assign(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Vean_assignContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Vean_assignContext,i)


        def Cv(self):
            return self.getToken(XplorMRParser.Cv, 0)

        def Equ_op(self):
            return self.getToken(XplorMRParser.Equ_op, 0)

        def Integer(self):
            return self.getToken(XplorMRParser.Integer, 0)

        def Classification(self):
            return self.getToken(XplorMRParser.Classification, 0)

        def Simple_name(self):
            return self.getToken(XplorMRParser.Simple_name, 0)

        def ForceConstant(self):
            return self.getToken(XplorMRParser.ForceConstant, 0)

        def Real(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Real)
            else:
                return self.getToken(XplorMRParser.Real, i)

        def Nrestraints(self):
            return self.getToken(XplorMRParser.Nrestraints, 0)

        def Partition(self):
            return self.getToken(XplorMRParser.Partition, 0)

        def Print(self):
            return self.getToken(XplorMRParser.Print, 0)

        def Threshold(self):
            return self.getToken(XplorMRParser.Threshold, 0)

        def Reset(self):
            return self.getToken(XplorMRParser.Reset, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_vean_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVean_statement" ):
                listener.enterVean_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVean_statement" ):
                listener.exitVean_statement(self)




    def vean_statement(self):

        localctx = XplorMRParser.Vean_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_vean_statement)
        self._la = 0 # Token type
        try:
            self.state = 727
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [XplorMRParser.Assign, XplorMRParser.R_brace]:
                self.enterOuterAlt(localctx, 1)
                self.state = 707
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==XplorMRParser.Assign:
                    self.state = 704
                    self.vean_assign()
                    self.state = 709
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass
            elif token in [XplorMRParser.Cv]:
                self.enterOuterAlt(localctx, 2)
                self.state = 710
                self.match(XplorMRParser.Cv)
                self.state = 711
                self.match(XplorMRParser.Equ_op)
                self.state = 712
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.Classification]:
                self.enterOuterAlt(localctx, 3)
                self.state = 713
                self.match(XplorMRParser.Classification)
                self.state = 714
                self.match(XplorMRParser.Simple_name)
                pass
            elif token in [XplorMRParser.ForceConstant]:
                self.enterOuterAlt(localctx, 4)
                self.state = 715
                self.match(XplorMRParser.ForceConstant)
                self.state = 716
                self.match(XplorMRParser.Real)
                self.state = 717
                self.match(XplorMRParser.Real)
                pass
            elif token in [XplorMRParser.Nrestraints]:
                self.enterOuterAlt(localctx, 5)
                self.state = 718
                self.match(XplorMRParser.Nrestraints)
                self.state = 719
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.Partition]:
                self.enterOuterAlt(localctx, 6)
                self.state = 720
                self.match(XplorMRParser.Partition)
                self.state = 721
                self.match(XplorMRParser.Equ_op)
                self.state = 722
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.Print]:
                self.enterOuterAlt(localctx, 7)
                self.state = 723
                self.match(XplorMRParser.Print)
                self.state = 724
                self.match(XplorMRParser.Threshold)
                self.state = 725
                self.match(XplorMRParser.Real)
                pass
            elif token in [XplorMRParser.Reset]:
                self.enterOuterAlt(localctx, 8)
                self.state = 726
                self.match(XplorMRParser.Reset)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Vean_assignContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Assign(self):
            return self.getToken(XplorMRParser.Assign, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.SelectionContext,i)


        def Real(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Real)
            else:
                return self.getToken(XplorMRParser.Real, i)

        def getRuleIndex(self):
            return XplorMRParser.RULE_vean_assign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVean_assign" ):
                listener.enterVean_assign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVean_assign" ):
                listener.exitVean_assign(self)




    def vean_assign(self):

        localctx = XplorMRParser.Vean_assignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_vean_assign)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 729
            self.match(XplorMRParser.Assign)
            self.state = 730
            self.selection()
            self.state = 731
            self.selection()
            self.state = 732
            self.selection()
            self.state = 733
            self.selection()
            self.state = 734
            self.match(XplorMRParser.Real)
            self.state = 735
            self.match(XplorMRParser.Real)
            self.state = 736
            self.match(XplorMRParser.Real)
            self.state = 737
            self.match(XplorMRParser.Real)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Tens_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def tens_assign(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Tens_assignContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Tens_assignContext,i)


        def Classification(self):
            return self.getToken(XplorMRParser.Classification, 0)

        def Simple_name(self):
            return self.getToken(XplorMRParser.Simple_name, 0)

        def Coefficients(self):
            return self.getToken(XplorMRParser.Coefficients, 0)

        def Real(self):
            return self.getToken(XplorMRParser.Real, 0)

        def Nrestraints(self):
            return self.getToken(XplorMRParser.Nrestraints, 0)

        def Integer(self):
            return self.getToken(XplorMRParser.Integer, 0)

        def Potential(self):
            return self.getToken(XplorMRParser.Potential, 0)

        def Rdc_potential(self):
            return self.getToken(XplorMRParser.Rdc_potential, 0)

        def Print(self):
            return self.getToken(XplorMRParser.Print, 0)

        def Threshold(self):
            return self.getToken(XplorMRParser.Threshold, 0)

        def Reset(self):
            return self.getToken(XplorMRParser.Reset, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_tens_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTens_statement" ):
                listener.enterTens_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTens_statement" ):
                listener.exitTens_statement(self)




    def tens_statement(self):

        localctx = XplorMRParser.Tens_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 68, self.RULE_tens_statement)
        self._la = 0 # Token type
        try:
            self.state = 757
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [XplorMRParser.Assign, XplorMRParser.R_brace]:
                self.enterOuterAlt(localctx, 1)
                self.state = 742
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==XplorMRParser.Assign:
                    self.state = 739
                    self.tens_assign()
                    self.state = 744
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass
            elif token in [XplorMRParser.Classification]:
                self.enterOuterAlt(localctx, 2)
                self.state = 745
                self.match(XplorMRParser.Classification)
                self.state = 746
                self.match(XplorMRParser.Simple_name)
                pass
            elif token in [XplorMRParser.Coefficients]:
                self.enterOuterAlt(localctx, 3)
                self.state = 747
                self.match(XplorMRParser.Coefficients)
                self.state = 748
                self.match(XplorMRParser.Real)
                pass
            elif token in [XplorMRParser.Nrestraints]:
                self.enterOuterAlt(localctx, 4)
                self.state = 749
                self.match(XplorMRParser.Nrestraints)
                self.state = 750
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.Potential]:
                self.enterOuterAlt(localctx, 5)
                self.state = 751
                self.match(XplorMRParser.Potential)
                self.state = 752
                self.match(XplorMRParser.Rdc_potential)
                pass
            elif token in [XplorMRParser.Print]:
                self.enterOuterAlt(localctx, 6)
                self.state = 753
                self.match(XplorMRParser.Print)
                self.state = 754
                self.match(XplorMRParser.Threshold)
                self.state = 755
                self.match(XplorMRParser.Real)
                pass
            elif token in [XplorMRParser.Reset]:
                self.enterOuterAlt(localctx, 7)
                self.state = 756
                self.match(XplorMRParser.Reset)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Tens_assignContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Assign(self):
            return self.getToken(XplorMRParser.Assign, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.SelectionContext,i)


        def Real(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Real)
            else:
                return self.getToken(XplorMRParser.Real, i)

        def getRuleIndex(self):
            return XplorMRParser.RULE_tens_assign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTens_assign" ):
                listener.enterTens_assign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTens_assign" ):
                listener.exitTens_assign(self)




    def tens_assign(self):

        localctx = XplorMRParser.Tens_assignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_tens_assign)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 759
            self.match(XplorMRParser.Assign)
            self.state = 760
            self.selection()
            self.state = 761
            self.selection()
            self.state = 762
            self.match(XplorMRParser.Real)
            self.state = 763
            self.match(XplorMRParser.Real)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Anis_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def anis_assign(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Anis_assignContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Anis_assignContext,i)


        def Classification(self):
            return self.getToken(XplorMRParser.Classification, 0)

        def Simple_name(self):
            return self.getToken(XplorMRParser.Simple_name, 0)

        def Coefficients(self):
            return self.getToken(XplorMRParser.Coefficients, 0)

        def Real(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Real)
            else:
                return self.getToken(XplorMRParser.Real, i)

        def ForceConstant(self):
            return self.getToken(XplorMRParser.ForceConstant, 0)

        def Nrestraints(self):
            return self.getToken(XplorMRParser.Nrestraints, 0)

        def Integer(self):
            return self.getToken(XplorMRParser.Integer, 0)

        def Potential(self):
            return self.getToken(XplorMRParser.Potential, 0)

        def Rdc_potential(self):
            return self.getToken(XplorMRParser.Rdc_potential, 0)

        def Print(self):
            return self.getToken(XplorMRParser.Print, 0)

        def Threshold(self):
            return self.getToken(XplorMRParser.Threshold, 0)

        def Reset(self):
            return self.getToken(XplorMRParser.Reset, 0)

        def Type(self):
            return self.getToken(XplorMRParser.Type, 0)

        def Rdc_anis_types(self):
            return self.getToken(XplorMRParser.Rdc_anis_types, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_anis_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAnis_statement" ):
                listener.enterAnis_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAnis_statement" ):
                listener.exitAnis_statement(self)




    def anis_statement(self):

        localctx = XplorMRParser.Anis_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_anis_statement)
        self._la = 0 # Token type
        try:
            self.state = 790
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [XplorMRParser.Assign, XplorMRParser.R_brace]:
                self.enterOuterAlt(localctx, 1)
                self.state = 768
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==XplorMRParser.Assign:
                    self.state = 765
                    self.anis_assign()
                    self.state = 770
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass
            elif token in [XplorMRParser.Classification]:
                self.enterOuterAlt(localctx, 2)
                self.state = 771
                self.match(XplorMRParser.Classification)
                self.state = 772
                self.match(XplorMRParser.Simple_name)
                pass
            elif token in [XplorMRParser.Coefficients]:
                self.enterOuterAlt(localctx, 3)
                self.state = 773
                self.match(XplorMRParser.Coefficients)
                self.state = 774
                self.match(XplorMRParser.Real)
                self.state = 775
                self.match(XplorMRParser.Real)
                self.state = 776
                self.match(XplorMRParser.Real)
                self.state = 777
                self.match(XplorMRParser.Real)
                pass
            elif token in [XplorMRParser.ForceConstant]:
                self.enterOuterAlt(localctx, 4)
                self.state = 778
                self.match(XplorMRParser.ForceConstant)
                self.state = 779
                self.match(XplorMRParser.Real)
                pass
            elif token in [XplorMRParser.Nrestraints]:
                self.enterOuterAlt(localctx, 5)
                self.state = 780
                self.match(XplorMRParser.Nrestraints)
                self.state = 781
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.Potential]:
                self.enterOuterAlt(localctx, 6)
                self.state = 782
                self.match(XplorMRParser.Potential)
                self.state = 783
                self.match(XplorMRParser.Rdc_potential)
                pass
            elif token in [XplorMRParser.Print]:
                self.enterOuterAlt(localctx, 7)
                self.state = 784
                self.match(XplorMRParser.Print)
                self.state = 785
                self.match(XplorMRParser.Threshold)
                self.state = 786
                self.match(XplorMRParser.Real)
                pass
            elif token in [XplorMRParser.Reset]:
                self.enterOuterAlt(localctx, 8)
                self.state = 787
                self.match(XplorMRParser.Reset)
                pass
            elif token in [XplorMRParser.Type]:
                self.enterOuterAlt(localctx, 9)
                self.state = 788
                self.match(XplorMRParser.Type)
                self.state = 789
                self.match(XplorMRParser.Rdc_anis_types)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Anis_assignContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Assign(self):
            return self.getToken(XplorMRParser.Assign, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.SelectionContext,i)


        def Real(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Real)
            else:
                return self.getToken(XplorMRParser.Real, i)

        def getRuleIndex(self):
            return XplorMRParser.RULE_anis_assign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAnis_assign" ):
                listener.enterAnis_assign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAnis_assign" ):
                listener.exitAnis_assign(self)




    def anis_assign(self):

        localctx = XplorMRParser.Anis_assignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_anis_assign)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 792
            self.match(XplorMRParser.Assign)
            self.state = 793
            self.selection()
            self.state = 794
            self.selection()
            self.state = 795
            self.selection()
            self.state = 796
            self.selection()
            self.state = 797
            self.match(XplorMRParser.Real)
            self.state = 798
            self.match(XplorMRParser.Real)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Planar_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Group(self):
            return self.getToken(XplorMRParser.Group, 0)

        def L_brace(self):
            return self.getToken(XplorMRParser.L_brace, 0)

        def group_statement(self):
            return self.getTypedRuleContext(XplorMRParser.Group_statementContext,0)


        def R_brace(self):
            return self.getToken(XplorMRParser.R_brace, 0)

        def Initialize(self):
            return self.getToken(XplorMRParser.Initialize, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_planar_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPlanar_statement" ):
                listener.enterPlanar_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPlanar_statement" ):
                listener.exitPlanar_statement(self)




    def planar_statement(self):

        localctx = XplorMRParser.Planar_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 76, self.RULE_planar_statement)
        try:
            self.state = 806
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [XplorMRParser.Group]:
                self.enterOuterAlt(localctx, 1)
                self.state = 800
                self.match(XplorMRParser.Group)
                self.state = 801
                self.match(XplorMRParser.L_brace)
                self.state = 802
                self.group_statement()
                self.state = 803
                self.match(XplorMRParser.R_brace)
                pass
            elif token in [XplorMRParser.Initialize]:
                self.enterOuterAlt(localctx, 2)
                self.state = 805
                self.match(XplorMRParser.Initialize)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Group_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Selection(self):
            return self.getToken(XplorMRParser.Selection, 0)

        def Equ_op(self):
            return self.getToken(XplorMRParser.Equ_op, 0)

        def selection(self):
            return self.getTypedRuleContext(XplorMRParser.SelectionContext,0)


        def Weight(self):
            return self.getToken(XplorMRParser.Weight, 0)

        def Real(self):
            return self.getToken(XplorMRParser.Real, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_group_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGroup_statement" ):
                listener.enterGroup_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGroup_statement" ):
                listener.exitGroup_statement(self)




    def group_statement(self):

        localctx = XplorMRParser.Group_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 78, self.RULE_group_statement)
        try:
            self.state = 814
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [XplorMRParser.Selection]:
                self.enterOuterAlt(localctx, 1)
                self.state = 808
                self.match(XplorMRParser.Selection)
                self.state = 809
                self.match(XplorMRParser.Equ_op)
                self.state = 810
                self.selection()
                pass
            elif token in [XplorMRParser.Weight]:
                self.enterOuterAlt(localctx, 2)
                self.state = 811
                self.match(XplorMRParser.Weight)
                self.state = 812
                self.match(XplorMRParser.Equ_op)
                self.state = 813
                self.match(XplorMRParser.Real)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Antidistance_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def xadc_assign(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Xadc_assignContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Xadc_assignContext,i)


        def Classification(self):
            return self.getToken(XplorMRParser.Classification, 0)

        def Simple_name(self):
            return self.getToken(XplorMRParser.Simple_name, 0)

        def Expectation(self):
            return self.getToken(XplorMRParser.Expectation, 0)

        def Integer(self):
            return self.getToken(XplorMRParser.Integer, 0)

        def Real(self):
            return self.getToken(XplorMRParser.Real, 0)

        def ForceConstant(self):
            return self.getToken(XplorMRParser.ForceConstant, 0)

        def Nrestraints(self):
            return self.getToken(XplorMRParser.Nrestraints, 0)

        def Print(self):
            return self.getToken(XplorMRParser.Print, 0)

        def Threshold(self):
            return self.getToken(XplorMRParser.Threshold, 0)

        def All(self):
            return self.getToken(XplorMRParser.All, 0)

        def Reset(self):
            return self.getToken(XplorMRParser.Reset, 0)

        def Size(self):
            return self.getToken(XplorMRParser.Size, 0)

        def Zero(self):
            return self.getToken(XplorMRParser.Zero, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_antidistance_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAntidistance_statement" ):
                listener.enterAntidistance_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAntidistance_statement" ):
                listener.exitAntidistance_statement(self)




    def antidistance_statement(self):

        localctx = XplorMRParser.Antidistance_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 80, self.RULE_antidistance_statement)
        self._la = 0 # Token type
        try:
            self.state = 844
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [XplorMRParser.Assign, XplorMRParser.R_brace]:
                self.enterOuterAlt(localctx, 1)
                self.state = 819
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==XplorMRParser.Assign:
                    self.state = 816
                    self.xadc_assign()
                    self.state = 821
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass
            elif token in [XplorMRParser.Classification]:
                self.enterOuterAlt(localctx, 2)
                self.state = 822
                self.match(XplorMRParser.Classification)
                self.state = 823
                self.match(XplorMRParser.Simple_name)
                pass
            elif token in [XplorMRParser.Expectation]:
                self.enterOuterAlt(localctx, 3)
                self.state = 824
                self.match(XplorMRParser.Expectation)
                self.state = 825
                self.match(XplorMRParser.Integer)
                self.state = 826
                self.match(XplorMRParser.Real)
                pass
            elif token in [XplorMRParser.ForceConstant]:
                self.enterOuterAlt(localctx, 4)
                self.state = 827
                self.match(XplorMRParser.ForceConstant)
                self.state = 828
                self.match(XplorMRParser.Real)
                pass
            elif token in [XplorMRParser.Nrestraints]:
                self.enterOuterAlt(localctx, 5)
                self.state = 829
                self.match(XplorMRParser.Nrestraints)
                self.state = 830
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.Print]:
                self.enterOuterAlt(localctx, 6)
                self.state = 831
                self.match(XplorMRParser.Print)
                self.state = 832
                self.match(XplorMRParser.Threshold)
                self.state = 833
                self.match(XplorMRParser.Real)
                self.state = 837
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [XplorMRParser.All]:
                    self.state = 834
                    self.match(XplorMRParser.All)
                    pass
                elif token in [XplorMRParser.Classification]:
                    self.state = 835
                    self.match(XplorMRParser.Classification)
                    self.state = 836
                    self.match(XplorMRParser.Simple_name)
                    pass
                else:
                    raise NoViableAltException(self)

                pass
            elif token in [XplorMRParser.Reset]:
                self.enterOuterAlt(localctx, 7)
                self.state = 839
                self.match(XplorMRParser.Reset)
                pass
            elif token in [XplorMRParser.Size]:
                self.enterOuterAlt(localctx, 8)
                self.state = 840
                self.match(XplorMRParser.Size)
                self.state = 841
                self.match(XplorMRParser.Real)
                self.state = 842
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.Zero]:
                self.enterOuterAlt(localctx, 9)
                self.state = 843
                self.match(XplorMRParser.Zero)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Xadc_assignContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Assign(self):
            return self.getToken(XplorMRParser.Assign, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.SelectionContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_xadc_assign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterXadc_assign" ):
                listener.enterXadc_assign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitXadc_assign" ):
                listener.exitXadc_assign(self)




    def xadc_assign(self):

        localctx = XplorMRParser.Xadc_assignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 82, self.RULE_xadc_assign)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 846
            self.match(XplorMRParser.Assign)
            self.state = 847
            self.selection()
            self.state = 848
            self.selection()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Coupling_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def coup_assign(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Coup_assignContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Coup_assignContext,i)


        def Classification(self):
            return self.getToken(XplorMRParser.Classification, 0)

        def Simple_name(self):
            return self.getToken(XplorMRParser.Simple_name, 0)

        def Coefficients(self):
            return self.getToken(XplorMRParser.Coefficients, 0)

        def Real(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Real)
            else:
                return self.getToken(XplorMRParser.Real, i)

        def Cv(self):
            return self.getToken(XplorMRParser.Cv, 0)

        def Equ_op(self):
            return self.getToken(XplorMRParser.Equ_op, 0)

        def Integer(self):
            return self.getToken(XplorMRParser.Integer, 0)

        def DegEnergy(self):
            return self.getToken(XplorMRParser.DegEnergy, 0)

        def ForceConstant(self):
            return self.getToken(XplorMRParser.ForceConstant, 0)

        def Nrestraints(self):
            return self.getToken(XplorMRParser.Nrestraints, 0)

        def Partition(self):
            return self.getToken(XplorMRParser.Partition, 0)

        def Potential(self):
            return self.getToken(XplorMRParser.Potential, 0)

        def Coupling_potential(self):
            return self.getToken(XplorMRParser.Coupling_potential, 0)

        def Print(self):
            return self.getToken(XplorMRParser.Print, 0)

        def Threshold(self):
            return self.getToken(XplorMRParser.Threshold, 0)

        def All(self):
            return self.getToken(XplorMRParser.All, 0)

        def Reset(self):
            return self.getToken(XplorMRParser.Reset, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_coupling_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCoupling_statement" ):
                listener.enterCoupling_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCoupling_statement" ):
                listener.exitCoupling_statement(self)




    def coupling_statement(self):

        localctx = XplorMRParser.Coupling_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 84, self.RULE_coupling_statement)
        self._la = 0 # Token type
        try:
            self.state = 889
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [XplorMRParser.Assign, XplorMRParser.R_brace]:
                self.enterOuterAlt(localctx, 1)
                self.state = 853
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==XplorMRParser.Assign:
                    self.state = 850
                    self.coup_assign()
                    self.state = 855
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass
            elif token in [XplorMRParser.Classification]:
                self.enterOuterAlt(localctx, 2)
                self.state = 856
                self.match(XplorMRParser.Classification)
                self.state = 857
                self.match(XplorMRParser.Simple_name)
                pass
            elif token in [XplorMRParser.Coefficients]:
                self.enterOuterAlt(localctx, 3)
                self.state = 858
                self.match(XplorMRParser.Coefficients)
                self.state = 859
                self.match(XplorMRParser.Real)
                self.state = 860
                self.match(XplorMRParser.Real)
                self.state = 861
                self.match(XplorMRParser.Real)
                self.state = 862
                self.match(XplorMRParser.Real)
                pass
            elif token in [XplorMRParser.Cv]:
                self.enterOuterAlt(localctx, 4)
                self.state = 863
                self.match(XplorMRParser.Cv)
                self.state = 864
                self.match(XplorMRParser.Equ_op)
                self.state = 865
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.DegEnergy]:
                self.enterOuterAlt(localctx, 5)
                self.state = 866
                self.match(XplorMRParser.DegEnergy)
                self.state = 867
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.ForceConstant]:
                self.enterOuterAlt(localctx, 6)
                self.state = 868
                self.match(XplorMRParser.ForceConstant)
                self.state = 869
                self.match(XplorMRParser.Real)
                self.state = 871
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Real:
                    self.state = 870
                    self.match(XplorMRParser.Real)


                pass
            elif token in [XplorMRParser.Nrestraints]:
                self.enterOuterAlt(localctx, 7)
                self.state = 873
                self.match(XplorMRParser.Nrestraints)
                self.state = 874
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.Partition]:
                self.enterOuterAlt(localctx, 8)
                self.state = 875
                self.match(XplorMRParser.Partition)
                self.state = 876
                self.match(XplorMRParser.Equ_op)
                self.state = 877
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.Potential]:
                self.enterOuterAlt(localctx, 9)
                self.state = 878
                self.match(XplorMRParser.Potential)
                self.state = 879
                self.match(XplorMRParser.Coupling_potential)
                pass
            elif token in [XplorMRParser.Print]:
                self.enterOuterAlt(localctx, 10)
                self.state = 880
                self.match(XplorMRParser.Print)
                self.state = 881
                self.match(XplorMRParser.Threshold)
                self.state = 882
                self.match(XplorMRParser.Real)
                self.state = 886
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [XplorMRParser.All]:
                    self.state = 883
                    self.match(XplorMRParser.All)
                    pass
                elif token in [XplorMRParser.Classification]:
                    self.state = 884
                    self.match(XplorMRParser.Classification)
                    self.state = 885
                    self.match(XplorMRParser.Simple_name)
                    pass
                else:
                    raise NoViableAltException(self)

                pass
            elif token in [XplorMRParser.Reset]:
                self.enterOuterAlt(localctx, 11)
                self.state = 888
                self.match(XplorMRParser.Reset)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Coup_assignContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Assign(self):
            return self.getToken(XplorMRParser.Assign, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.SelectionContext,i)


        def Real(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Real)
            else:
                return self.getToken(XplorMRParser.Real, i)

        def getRuleIndex(self):
            return XplorMRParser.RULE_coup_assign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCoup_assign" ):
                listener.enterCoup_assign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCoup_assign" ):
                listener.exitCoup_assign(self)




    def coup_assign(self):

        localctx = XplorMRParser.Coup_assignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 86, self.RULE_coup_assign)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 891
            self.match(XplorMRParser.Assign)
            self.state = 892
            self.selection()
            self.state = 893
            self.selection()
            self.state = 894
            self.selection()
            self.state = 895
            self.selection()
            self.state = 901
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==XplorMRParser.L_paren:
                self.state = 896
                self.selection()
                self.state = 897
                self.selection()
                self.state = 898
                self.selection()
                self.state = 899
                self.selection()


            self.state = 903
            self.match(XplorMRParser.Real)
            self.state = 904
            self.match(XplorMRParser.Real)
            self.state = 907
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==XplorMRParser.Real:
                self.state = 905
                self.match(XplorMRParser.Real)
                self.state = 906
                self.match(XplorMRParser.Real)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Carbon_shift_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def carbon_shift_assign(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Carbon_shift_assignContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Carbon_shift_assignContext,i)


        def Classification(self):
            return self.getToken(XplorMRParser.Classification, 0)

        def Simple_name(self):
            return self.getToken(XplorMRParser.Simple_name, 0)

        def Expectation(self):
            return self.getToken(XplorMRParser.Expectation, 0)

        def Integer(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Integer)
            else:
                return self.getToken(XplorMRParser.Integer, i)

        def Real(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Real)
            else:
                return self.getToken(XplorMRParser.Real, i)

        def ForceConstant(self):
            return self.getToken(XplorMRParser.ForceConstant, 0)

        def Nrestraints(self):
            return self.getToken(XplorMRParser.Nrestraints, 0)

        def PhiStep(self):
            return self.getToken(XplorMRParser.PhiStep, 0)

        def PsiStep(self):
            return self.getToken(XplorMRParser.PsiStep, 0)

        def Potential(self):
            return self.getToken(XplorMRParser.Potential, 0)

        def Coupling_potential(self):
            return self.getToken(XplorMRParser.Coupling_potential, 0)

        def Print(self):
            return self.getToken(XplorMRParser.Print, 0)

        def Threshold(self):
            return self.getToken(XplorMRParser.Threshold, 0)

        def carbon_shift_rcoil(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Carbon_shift_rcoilContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Carbon_shift_rcoilContext,i)


        def Reset(self):
            return self.getToken(XplorMRParser.Reset, 0)

        def Zero(self):
            return self.getToken(XplorMRParser.Zero, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_carbon_shift_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCarbon_shift_statement" ):
                listener.enterCarbon_shift_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCarbon_shift_statement" ):
                listener.exitCarbon_shift_statement(self)




    def carbon_shift_statement(self):

        localctx = XplorMRParser.Carbon_shift_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 88, self.RULE_carbon_shift_statement)
        self._la = 0 # Token type
        try:
            self.state = 944
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,59,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 912
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==XplorMRParser.Assign:
                    self.state = 909
                    self.carbon_shift_assign()
                    self.state = 914
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 915
                self.match(XplorMRParser.Classification)
                self.state = 916
                self.match(XplorMRParser.Simple_name)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 917
                self.match(XplorMRParser.Expectation)
                self.state = 918
                self.match(XplorMRParser.Integer)
                self.state = 919
                self.match(XplorMRParser.Integer)
                self.state = 920
                self.match(XplorMRParser.Real)
                self.state = 921
                self.match(XplorMRParser.Real)
                self.state = 922
                self.match(XplorMRParser.Real)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 923
                self.match(XplorMRParser.ForceConstant)
                self.state = 924
                self.match(XplorMRParser.Real)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 925
                self.match(XplorMRParser.Nrestraints)
                self.state = 926
                self.match(XplorMRParser.Integer)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 927
                self.match(XplorMRParser.PhiStep)
                self.state = 928
                self.match(XplorMRParser.Real)
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 929
                self.match(XplorMRParser.PsiStep)
                self.state = 930
                self.match(XplorMRParser.Real)
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 931
                self.match(XplorMRParser.Potential)
                self.state = 932
                self.match(XplorMRParser.Coupling_potential)
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 933
                self.match(XplorMRParser.Print)
                self.state = 934
                self.match(XplorMRParser.Threshold)
                self.state = 935
                self.match(XplorMRParser.Real)
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 939
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==XplorMRParser.Rcoil:
                    self.state = 936
                    self.carbon_shift_rcoil()
                    self.state = 941
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 942
                self.match(XplorMRParser.Reset)
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 943
                self.match(XplorMRParser.Zero)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Carbon_shift_assignContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Assign(self):
            return self.getToken(XplorMRParser.Assign, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.SelectionContext,i)


        def Real(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Real)
            else:
                return self.getToken(XplorMRParser.Real, i)

        def getRuleIndex(self):
            return XplorMRParser.RULE_carbon_shift_assign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCarbon_shift_assign" ):
                listener.enterCarbon_shift_assign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCarbon_shift_assign" ):
                listener.exitCarbon_shift_assign(self)




    def carbon_shift_assign(self):

        localctx = XplorMRParser.Carbon_shift_assignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 90, self.RULE_carbon_shift_assign)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 946
            self.match(XplorMRParser.Assign)
            self.state = 947
            self.selection()
            self.state = 948
            self.selection()
            self.state = 949
            self.selection()
            self.state = 950
            self.selection()
            self.state = 951
            self.selection()
            self.state = 952
            self.match(XplorMRParser.Real)
            self.state = 953
            self.match(XplorMRParser.Real)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Carbon_shift_rcoilContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Rcoil(self):
            return self.getToken(XplorMRParser.Rcoil, 0)

        def selection(self):
            return self.getTypedRuleContext(XplorMRParser.SelectionContext,0)


        def Real(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Real)
            else:
                return self.getToken(XplorMRParser.Real, i)

        def getRuleIndex(self):
            return XplorMRParser.RULE_carbon_shift_rcoil

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCarbon_shift_rcoil" ):
                listener.enterCarbon_shift_rcoil(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCarbon_shift_rcoil" ):
                listener.exitCarbon_shift_rcoil(self)




    def carbon_shift_rcoil(self):

        localctx = XplorMRParser.Carbon_shift_rcoilContext(self, self._ctx, self.state)
        self.enterRule(localctx, 92, self.RULE_carbon_shift_rcoil)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 955
            self.match(XplorMRParser.Rcoil)
            self.state = 956
            self.selection()
            self.state = 957
            self.match(XplorMRParser.Real)
            self.state = 958
            self.match(XplorMRParser.Real)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Proton_shift_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def observed(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.ObservedContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.ObservedContext,i)


        def proton_shift_rcoil(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Proton_shift_rcoilContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Proton_shift_rcoilContext,i)


        def proton_shift_anisotropy(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Proton_shift_anisotropyContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Proton_shift_anisotropyContext,i)


        def proton_shift_amides(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Proton_shift_amidesContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Proton_shift_amidesContext,i)


        def proton_shift_carbons(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Proton_shift_carbonsContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Proton_shift_carbonsContext,i)


        def proton_shift_nitrogens(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Proton_shift_nitrogensContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Proton_shift_nitrogensContext,i)


        def proton_shift_oxygens(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Proton_shift_oxygensContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Proton_shift_oxygensContext,i)


        def proton_shift_ring_atoms(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Proton_shift_ring_atomsContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Proton_shift_ring_atomsContext,i)


        def proton_shift_alphas_and_amides(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Proton_shift_alphas_and_amidesContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Proton_shift_alphas_and_amidesContext,i)


        def Classification(self):
            return self.getToken(XplorMRParser.Classification, 0)

        def Simple_name(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Simple_name)
            else:
                return self.getToken(XplorMRParser.Simple_name, i)

        def Error(self):
            return self.getToken(XplorMRParser.Error, 0)

        def Real(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Real)
            else:
                return self.getToken(XplorMRParser.Real, i)

        def DegEnergy(self):
            return self.getToken(XplorMRParser.DegEnergy, 0)

        def Integer(self):
            return self.getToken(XplorMRParser.Integer, 0)

        def ForceConstant(self):
            return self.getToken(XplorMRParser.ForceConstant, 0)

        def Potential(self):
            return self.getToken(XplorMRParser.Potential, 0)

        def Coupling_potential(self):
            return self.getToken(XplorMRParser.Coupling_potential, 0)

        def Print(self):
            return self.getToken(XplorMRParser.Print, 0)

        def Threshold(self):
            return self.getToken(XplorMRParser.Threshold, 0)

        def All(self):
            return self.getToken(XplorMRParser.All, 0)

        def Reset(self):
            return self.getToken(XplorMRParser.Reset, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_proton_shift_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProton_shift_statement" ):
                listener.enterProton_shift_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProton_shift_statement" ):
                listener.exitProton_shift_statement(self)




    def proton_shift_statement(self):

        localctx = XplorMRParser.Proton_shift_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 94, self.RULE_proton_shift_statement)
        self._la = 0 # Token type
        try:
            self.state = 1037
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,71,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 963
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==XplorMRParser.Observed:
                    self.state = 960
                    self.observed()
                    self.state = 965
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 969
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==XplorMRParser.Rcoil:
                    self.state = 966
                    self.proton_shift_rcoil()
                    self.state = 971
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 975
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==XplorMRParser.Anisotropy:
                    self.state = 972
                    self.proton_shift_anisotropy()
                    self.state = 977
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 981
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==XplorMRParser.Amides:
                    self.state = 978
                    self.proton_shift_amides()
                    self.state = 983
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 987
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==XplorMRParser.Carbons:
                    self.state = 984
                    self.proton_shift_carbons()
                    self.state = 989
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 993
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==XplorMRParser.Nitrogens:
                    self.state = 990
                    self.proton_shift_nitrogens()
                    self.state = 995
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 999
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==XplorMRParser.Oxygens:
                    self.state = 996
                    self.proton_shift_oxygens()
                    self.state = 1001
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 1005
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==XplorMRParser.RingAtoms:
                    self.state = 1002
                    self.proton_shift_ring_atoms()
                    self.state = 1007
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 1011
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==XplorMRParser.AlphasAndAmides:
                    self.state = 1008
                    self.proton_shift_alphas_and_amides()
                    self.state = 1013
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 1014
                self.match(XplorMRParser.Classification)
                self.state = 1015
                self.match(XplorMRParser.Simple_name)
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 1016
                self.match(XplorMRParser.Error)
                self.state = 1017
                self.match(XplorMRParser.Real)
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 1018
                self.match(XplorMRParser.DegEnergy)
                self.state = 1019
                self.match(XplorMRParser.Integer)
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 1020
                self.match(XplorMRParser.ForceConstant)
                self.state = 1021
                self.match(XplorMRParser.Real)
                self.state = 1023
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Real:
                    self.state = 1022
                    self.match(XplorMRParser.Real)


                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 1025
                self.match(XplorMRParser.Potential)
                self.state = 1026
                self.match(XplorMRParser.Coupling_potential)
                pass

            elif la_ == 15:
                self.enterOuterAlt(localctx, 15)
                self.state = 1027
                self.match(XplorMRParser.Print)
                self.state = 1028
                self.match(XplorMRParser.Threshold)
                self.state = 1029
                self.match(XplorMRParser.Real)
                self.state = 1033
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [XplorMRParser.All]:
                    self.state = 1030
                    self.match(XplorMRParser.All)
                    pass
                elif token in [XplorMRParser.Classification]:
                    self.state = 1031
                    self.match(XplorMRParser.Classification)
                    self.state = 1032
                    self.match(XplorMRParser.Simple_name)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 1035
                self.match(XplorMRParser.Simple_name)
                pass

            elif la_ == 16:
                self.enterOuterAlt(localctx, 16)
                self.state = 1036
                self.match(XplorMRParser.Reset)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ObservedContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Observed(self):
            return self.getToken(XplorMRParser.Observed, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.SelectionContext,i)


        def Real(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Real)
            else:
                return self.getToken(XplorMRParser.Real, i)

        def getRuleIndex(self):
            return XplorMRParser.RULE_observed

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterObserved" ):
                listener.enterObserved(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitObserved" ):
                listener.exitObserved(self)




    def observed(self):

        localctx = XplorMRParser.ObservedContext(self, self._ctx, self.state)
        self.enterRule(localctx, 96, self.RULE_observed)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1039
            self.match(XplorMRParser.Observed)
            self.state = 1040
            self.selection()
            self.state = 1042
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==XplorMRParser.L_paren:
                self.state = 1041
                self.selection()


            self.state = 1044
            self.match(XplorMRParser.Real)
            self.state = 1046
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==XplorMRParser.Real:
                self.state = 1045
                self.match(XplorMRParser.Real)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Proton_shift_rcoilContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Rcoil(self):
            return self.getToken(XplorMRParser.Rcoil, 0)

        def selection(self):
            return self.getTypedRuleContext(XplorMRParser.SelectionContext,0)


        def Real(self):
            return self.getToken(XplorMRParser.Real, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_proton_shift_rcoil

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProton_shift_rcoil" ):
                listener.enterProton_shift_rcoil(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProton_shift_rcoil" ):
                listener.exitProton_shift_rcoil(self)




    def proton_shift_rcoil(self):

        localctx = XplorMRParser.Proton_shift_rcoilContext(self, self._ctx, self.state)
        self.enterRule(localctx, 98, self.RULE_proton_shift_rcoil)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1048
            self.match(XplorMRParser.Rcoil)
            self.state = 1049
            self.selection()
            self.state = 1050
            self.match(XplorMRParser.Real)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Proton_shift_anisotropyContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Anisotropy(self):
            return self.getToken(XplorMRParser.Anisotropy, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.SelectionContext,i)


        def Simple_name(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Simple_name)
            else:
                return self.getToken(XplorMRParser.Simple_name, i)

        def Logical(self):
            return self.getToken(XplorMRParser.Logical, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_proton_shift_anisotropy

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProton_shift_anisotropy" ):
                listener.enterProton_shift_anisotropy(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProton_shift_anisotropy" ):
                listener.exitProton_shift_anisotropy(self)




    def proton_shift_anisotropy(self):

        localctx = XplorMRParser.Proton_shift_anisotropyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 100, self.RULE_proton_shift_anisotropy)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1052
            self.match(XplorMRParser.Anisotropy)
            self.state = 1053
            self.selection()
            self.state = 1054
            self.selection()
            self.state = 1055
            self.selection()
            self.state = 1056
            self.match(XplorMRParser.Simple_name)
            self.state = 1058
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==XplorMRParser.Logical:
                self.state = 1057
                self.match(XplorMRParser.Logical)


            self.state = 1060
            self.match(XplorMRParser.Simple_name)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Proton_shift_amidesContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Amides(self):
            return self.getToken(XplorMRParser.Amides, 0)

        def selection(self):
            return self.getTypedRuleContext(XplorMRParser.SelectionContext,0)


        def getRuleIndex(self):
            return XplorMRParser.RULE_proton_shift_amides

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProton_shift_amides" ):
                listener.enterProton_shift_amides(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProton_shift_amides" ):
                listener.exitProton_shift_amides(self)




    def proton_shift_amides(self):

        localctx = XplorMRParser.Proton_shift_amidesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 102, self.RULE_proton_shift_amides)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1062
            self.match(XplorMRParser.Amides)
            self.state = 1063
            self.selection()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Proton_shift_carbonsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Carbons(self):
            return self.getToken(XplorMRParser.Carbons, 0)

        def selection(self):
            return self.getTypedRuleContext(XplorMRParser.SelectionContext,0)


        def getRuleIndex(self):
            return XplorMRParser.RULE_proton_shift_carbons

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProton_shift_carbons" ):
                listener.enterProton_shift_carbons(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProton_shift_carbons" ):
                listener.exitProton_shift_carbons(self)




    def proton_shift_carbons(self):

        localctx = XplorMRParser.Proton_shift_carbonsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 104, self.RULE_proton_shift_carbons)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1065
            self.match(XplorMRParser.Carbons)
            self.state = 1066
            self.selection()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Proton_shift_nitrogensContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Nitrogens(self):
            return self.getToken(XplorMRParser.Nitrogens, 0)

        def selection(self):
            return self.getTypedRuleContext(XplorMRParser.SelectionContext,0)


        def getRuleIndex(self):
            return XplorMRParser.RULE_proton_shift_nitrogens

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProton_shift_nitrogens" ):
                listener.enterProton_shift_nitrogens(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProton_shift_nitrogens" ):
                listener.exitProton_shift_nitrogens(self)




    def proton_shift_nitrogens(self):

        localctx = XplorMRParser.Proton_shift_nitrogensContext(self, self._ctx, self.state)
        self.enterRule(localctx, 106, self.RULE_proton_shift_nitrogens)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1068
            self.match(XplorMRParser.Nitrogens)
            self.state = 1069
            self.selection()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Proton_shift_oxygensContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Oxygens(self):
            return self.getToken(XplorMRParser.Oxygens, 0)

        def selection(self):
            return self.getTypedRuleContext(XplorMRParser.SelectionContext,0)


        def getRuleIndex(self):
            return XplorMRParser.RULE_proton_shift_oxygens

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProton_shift_oxygens" ):
                listener.enterProton_shift_oxygens(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProton_shift_oxygens" ):
                listener.exitProton_shift_oxygens(self)




    def proton_shift_oxygens(self):

        localctx = XplorMRParser.Proton_shift_oxygensContext(self, self._ctx, self.state)
        self.enterRule(localctx, 108, self.RULE_proton_shift_oxygens)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1071
            self.match(XplorMRParser.Oxygens)
            self.state = 1072
            self.selection()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Proton_shift_ring_atomsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RingAtoms(self):
            return self.getToken(XplorMRParser.RingAtoms, 0)

        def Simple_name(self):
            return self.getToken(XplorMRParser.Simple_name, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.SelectionContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_proton_shift_ring_atoms

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProton_shift_ring_atoms" ):
                listener.enterProton_shift_ring_atoms(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProton_shift_ring_atoms" ):
                listener.exitProton_shift_ring_atoms(self)




    def proton_shift_ring_atoms(self):

        localctx = XplorMRParser.Proton_shift_ring_atomsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 110, self.RULE_proton_shift_ring_atoms)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1074
            self.match(XplorMRParser.RingAtoms)
            self.state = 1075
            self.match(XplorMRParser.Simple_name)
            self.state = 1076
            self.selection()
            self.state = 1077
            self.selection()
            self.state = 1078
            self.selection()
            self.state = 1079
            self.selection()
            self.state = 1080
            self.selection()
            self.state = 1082
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==XplorMRParser.L_paren:
                self.state = 1081
                self.selection()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Proton_shift_alphas_and_amidesContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AlphasAndAmides(self):
            return self.getToken(XplorMRParser.AlphasAndAmides, 0)

        def selection(self):
            return self.getTypedRuleContext(XplorMRParser.SelectionContext,0)


        def getRuleIndex(self):
            return XplorMRParser.RULE_proton_shift_alphas_and_amides

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProton_shift_alphas_and_amides" ):
                listener.enterProton_shift_alphas_and_amides(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProton_shift_alphas_and_amides" ):
                listener.exitProton_shift_alphas_and_amides(self)




    def proton_shift_alphas_and_amides(self):

        localctx = XplorMRParser.Proton_shift_alphas_and_amidesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 112, self.RULE_proton_shift_alphas_and_amides)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1084
            self.match(XplorMRParser.AlphasAndAmides)
            self.state = 1085
            self.selection()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Ramachandran_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def rama_assign(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Rama_assignContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Rama_assignContext,i)


        def Classification(self):
            return self.getToken(XplorMRParser.Classification, 0)

        def Simple_name(self):
            return self.getToken(XplorMRParser.Simple_name, 0)

        def Cutoff(self):
            return self.getToken(XplorMRParser.Cutoff, 0)

        def Real(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Real)
            else:
                return self.getToken(XplorMRParser.Real, i)

        def ForceConstant(self):
            return self.getToken(XplorMRParser.ForceConstant, 0)

        def Gaussian(self):
            return self.getToken(XplorMRParser.Gaussian, 0)

        def Nrestraints(self):
            return self.getToken(XplorMRParser.Nrestraints, 0)

        def Integer(self):
            return self.getToken(XplorMRParser.Integer, 0)

        def Phase(self):
            return self.getToken(XplorMRParser.Phase, 0)

        def Print(self):
            return self.getToken(XplorMRParser.Print, 0)

        def Threshold(self):
            return self.getToken(XplorMRParser.Threshold, 0)

        def All(self):
            return self.getToken(XplorMRParser.All, 0)

        def Quartic(self):
            return self.getToken(XplorMRParser.Quartic, 0)

        def Reset(self):
            return self.getToken(XplorMRParser.Reset, 0)

        def Scale(self):
            return self.getToken(XplorMRParser.Scale, 0)

        def Shape(self):
            return self.getToken(XplorMRParser.Shape, 0)

        def Gauss_or_Quart(self):
            return self.getToken(XplorMRParser.Gauss_or_Quart, 0)

        def Size(self):
            return self.getToken(XplorMRParser.Size, 0)

        def Dimensions(self):
            return self.getToken(XplorMRParser.Dimensions, 0)

        def Sort(self):
            return self.getToken(XplorMRParser.Sort, 0)

        def Zero(self):
            return self.getToken(XplorMRParser.Zero, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_ramachandran_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRamachandran_statement" ):
                listener.enterRamachandran_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRamachandran_statement" ):
                listener.exitRamachandran_statement(self)




    def ramachandran_statement(self):

        localctx = XplorMRParser.Ramachandran_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 114, self.RULE_ramachandran_statement)
        self._la = 0 # Token type
        try:
            self.state = 1185
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [XplorMRParser.Assign, XplorMRParser.R_brace]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1090
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==XplorMRParser.Assign:
                    self.state = 1087
                    self.rama_assign()
                    self.state = 1092
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass
            elif token in [XplorMRParser.Classification]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1093
                self.match(XplorMRParser.Classification)
                self.state = 1094
                self.match(XplorMRParser.Simple_name)
                pass
            elif token in [XplorMRParser.Cutoff]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1095
                self.match(XplorMRParser.Cutoff)
                self.state = 1096
                self.match(XplorMRParser.Real)
                pass
            elif token in [XplorMRParser.ForceConstant]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1097
                self.match(XplorMRParser.ForceConstant)
                self.state = 1098
                self.match(XplorMRParser.Real)
                pass
            elif token in [XplorMRParser.Gaussian]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1099
                self.match(XplorMRParser.Gaussian)
                self.state = 1100
                self.match(XplorMRParser.Real)
                self.state = 1101
                self.match(XplorMRParser.Real)
                self.state = 1102
                self.match(XplorMRParser.Real)
                self.state = 1106
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,77,self._ctx)
                if la_ == 1:
                    self.state = 1103
                    self.match(XplorMRParser.Real)
                    self.state = 1104
                    self.match(XplorMRParser.Real)
                    self.state = 1105
                    self.match(XplorMRParser.Real)


                self.state = 1111
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,78,self._ctx)
                if la_ == 1:
                    self.state = 1108
                    self.match(XplorMRParser.Real)
                    self.state = 1109
                    self.match(XplorMRParser.Real)
                    self.state = 1110
                    self.match(XplorMRParser.Real)


                self.state = 1116
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Real:
                    self.state = 1113
                    self.match(XplorMRParser.Real)
                    self.state = 1114
                    self.match(XplorMRParser.Real)
                    self.state = 1115
                    self.match(XplorMRParser.Real)


                pass
            elif token in [XplorMRParser.Nrestraints]:
                self.enterOuterAlt(localctx, 6)
                self.state = 1118
                self.match(XplorMRParser.Nrestraints)
                self.state = 1119
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.Phase]:
                self.enterOuterAlt(localctx, 7)
                self.state = 1120
                self.match(XplorMRParser.Phase)
                self.state = 1121
                self.match(XplorMRParser.Real)
                self.state = 1122
                self.match(XplorMRParser.Real)
                self.state = 1123
                self.match(XplorMRParser.Real)
                self.state = 1127
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,80,self._ctx)
                if la_ == 1:
                    self.state = 1124
                    self.match(XplorMRParser.Real)
                    self.state = 1125
                    self.match(XplorMRParser.Real)
                    self.state = 1126
                    self.match(XplorMRParser.Real)


                self.state = 1132
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,81,self._ctx)
                if la_ == 1:
                    self.state = 1129
                    self.match(XplorMRParser.Real)
                    self.state = 1130
                    self.match(XplorMRParser.Real)
                    self.state = 1131
                    self.match(XplorMRParser.Real)


                self.state = 1137
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Real:
                    self.state = 1134
                    self.match(XplorMRParser.Real)
                    self.state = 1135
                    self.match(XplorMRParser.Real)
                    self.state = 1136
                    self.match(XplorMRParser.Real)


                pass
            elif token in [XplorMRParser.Print]:
                self.enterOuterAlt(localctx, 8)
                self.state = 1139
                self.match(XplorMRParser.Print)
                self.state = 1140
                self.match(XplorMRParser.Threshold)
                self.state = 1141
                self.match(XplorMRParser.Real)
                self.state = 1145
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [XplorMRParser.All]:
                    self.state = 1142
                    self.match(XplorMRParser.All)
                    pass
                elif token in [XplorMRParser.Classification]:
                    self.state = 1143
                    self.match(XplorMRParser.Classification)
                    self.state = 1144
                    self.match(XplorMRParser.Simple_name)
                    pass
                else:
                    raise NoViableAltException(self)

                pass
            elif token in [XplorMRParser.Quartic]:
                self.enterOuterAlt(localctx, 9)
                self.state = 1147
                self.match(XplorMRParser.Quartic)
                self.state = 1148
                self.match(XplorMRParser.Real)
                self.state = 1149
                self.match(XplorMRParser.Real)
                self.state = 1150
                self.match(XplorMRParser.Real)
                self.state = 1154
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,84,self._ctx)
                if la_ == 1:
                    self.state = 1151
                    self.match(XplorMRParser.Real)
                    self.state = 1152
                    self.match(XplorMRParser.Real)
                    self.state = 1153
                    self.match(XplorMRParser.Real)


                self.state = 1159
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,85,self._ctx)
                if la_ == 1:
                    self.state = 1156
                    self.match(XplorMRParser.Real)
                    self.state = 1157
                    self.match(XplorMRParser.Real)
                    self.state = 1158
                    self.match(XplorMRParser.Real)


                self.state = 1164
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Real:
                    self.state = 1161
                    self.match(XplorMRParser.Real)
                    self.state = 1162
                    self.match(XplorMRParser.Real)
                    self.state = 1163
                    self.match(XplorMRParser.Real)


                pass
            elif token in [XplorMRParser.Reset]:
                self.enterOuterAlt(localctx, 10)
                self.state = 1166
                self.match(XplorMRParser.Reset)
                pass
            elif token in [XplorMRParser.Scale]:
                self.enterOuterAlt(localctx, 11)
                self.state = 1167
                self.match(XplorMRParser.Scale)
                self.state = 1168
                self.match(XplorMRParser.Real)
                pass
            elif token in [XplorMRParser.Shape]:
                self.enterOuterAlt(localctx, 12)
                self.state = 1169
                self.match(XplorMRParser.Shape)
                self.state = 1170
                self.match(XplorMRParser.Gauss_or_Quart)
                pass
            elif token in [XplorMRParser.Size]:
                self.enterOuterAlt(localctx, 13)
                self.state = 1171
                self.match(XplorMRParser.Size)
                self.state = 1172
                self.match(XplorMRParser.Dimensions)
                self.state = 1173
                self.match(XplorMRParser.Real)
                self.state = 1175
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,87,self._ctx)
                if la_ == 1:
                    self.state = 1174
                    self.match(XplorMRParser.Real)


                self.state = 1178
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,88,self._ctx)
                if la_ == 1:
                    self.state = 1177
                    self.match(XplorMRParser.Real)


                self.state = 1181
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Real:
                    self.state = 1180
                    self.match(XplorMRParser.Real)


                pass
            elif token in [XplorMRParser.Sort]:
                self.enterOuterAlt(localctx, 14)
                self.state = 1183
                self.match(XplorMRParser.Sort)
                pass
            elif token in [XplorMRParser.Zero]:
                self.enterOuterAlt(localctx, 15)
                self.state = 1184
                self.match(XplorMRParser.Zero)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Rama_assignContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Assign(self):
            return self.getToken(XplorMRParser.Assign, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.SelectionContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_rama_assign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRama_assign" ):
                listener.enterRama_assign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRama_assign" ):
                listener.exitRama_assign(self)




    def rama_assign(self):

        localctx = XplorMRParser.Rama_assignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 116, self.RULE_rama_assign)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1187
            self.match(XplorMRParser.Assign)
            self.state = 1188
            self.selection()
            self.state = 1189
            self.selection()
            self.state = 1190
            self.selection()
            self.state = 1191
            self.selection()
            self.state = 1197
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,91,self._ctx)
            if la_ == 1:
                self.state = 1192
                self.selection()
                self.state = 1193
                self.selection()
                self.state = 1194
                self.selection()
                self.state = 1195
                self.selection()


            self.state = 1204
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,92,self._ctx)
            if la_ == 1:
                self.state = 1199
                self.selection()
                self.state = 1200
                self.selection()
                self.state = 1201
                self.selection()
                self.state = 1202
                self.selection()


            self.state = 1211
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==XplorMRParser.L_paren:
                self.state = 1206
                self.selection()
                self.state = 1207
                self.selection()
                self.state = 1208
                self.selection()
                self.state = 1209
                self.selection()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Collapse_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Scale(self):
            return self.getToken(XplorMRParser.Scale, 0)

        def Real(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Real)
            else:
                return self.getToken(XplorMRParser.Real, i)

        def Assign(self):
            return self.getToken(XplorMRParser.Assign, 0)

        def selection(self):
            return self.getTypedRuleContext(XplorMRParser.SelectionContext,0)


        def Print(self):
            return self.getToken(XplorMRParser.Print, 0)

        def Reset(self):
            return self.getToken(XplorMRParser.Reset, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_collapse_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCollapse_statement" ):
                listener.enterCollapse_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCollapse_statement" ):
                listener.exitCollapse_statement(self)




    def collapse_statement(self):

        localctx = XplorMRParser.Collapse_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 118, self.RULE_collapse_statement)
        try:
            self.state = 1222
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [XplorMRParser.Scale]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1213
                self.match(XplorMRParser.Scale)
                self.state = 1214
                self.match(XplorMRParser.Real)
                pass
            elif token in [XplorMRParser.Assign]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1215
                self.match(XplorMRParser.Assign)
                self.state = 1216
                self.selection()
                self.state = 1217
                self.match(XplorMRParser.Real)
                self.state = 1218
                self.match(XplorMRParser.Real)
                pass
            elif token in [XplorMRParser.Print]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1220
                self.match(XplorMRParser.Print)
                pass
            elif token in [XplorMRParser.Reset]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1221
                self.match(XplorMRParser.Reset)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Diffusion_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def dani_assign(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Dani_assignContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Dani_assignContext,i)


        def Classification(self):
            return self.getToken(XplorMRParser.Classification, 0)

        def Simple_name(self):
            return self.getToken(XplorMRParser.Simple_name, 0)

        def Coefficients(self):
            return self.getToken(XplorMRParser.Coefficients, 0)

        def Real(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Real)
            else:
                return self.getToken(XplorMRParser.Real, i)

        def ForceConstant(self):
            return self.getToken(XplorMRParser.ForceConstant, 0)

        def Nrestraints(self):
            return self.getToken(XplorMRParser.Nrestraints, 0)

        def Integer(self):
            return self.getToken(XplorMRParser.Integer, 0)

        def Potential(self):
            return self.getToken(XplorMRParser.Potential, 0)

        def Rdc_potential(self):
            return self.getToken(XplorMRParser.Rdc_potential, 0)

        def Print(self):
            return self.getToken(XplorMRParser.Print, 0)

        def Threshold(self):
            return self.getToken(XplorMRParser.Threshold, 0)

        def Reset(self):
            return self.getToken(XplorMRParser.Reset, 0)

        def Type(self):
            return self.getToken(XplorMRParser.Type, 0)

        def Diff_anis_types(self):
            return self.getToken(XplorMRParser.Diff_anis_types, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_diffusion_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDiffusion_statement" ):
                listener.enterDiffusion_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDiffusion_statement" ):
                listener.exitDiffusion_statement(self)




    def diffusion_statement(self):

        localctx = XplorMRParser.Diffusion_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 120, self.RULE_diffusion_statement)
        self._la = 0 # Token type
        try:
            self.state = 1250
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [XplorMRParser.Assign, XplorMRParser.R_brace]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1227
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==XplorMRParser.Assign:
                    self.state = 1224
                    self.dani_assign()
                    self.state = 1229
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass
            elif token in [XplorMRParser.Classification]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1230
                self.match(XplorMRParser.Classification)
                self.state = 1231
                self.match(XplorMRParser.Simple_name)
                pass
            elif token in [XplorMRParser.Coefficients]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1232
                self.match(XplorMRParser.Coefficients)
                self.state = 1233
                self.match(XplorMRParser.Real)
                self.state = 1234
                self.match(XplorMRParser.Real)
                self.state = 1235
                self.match(XplorMRParser.Real)
                self.state = 1236
                self.match(XplorMRParser.Real)
                self.state = 1237
                self.match(XplorMRParser.Real)
                pass
            elif token in [XplorMRParser.ForceConstant]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1238
                self.match(XplorMRParser.ForceConstant)
                self.state = 1239
                self.match(XplorMRParser.Real)
                pass
            elif token in [XplorMRParser.Nrestraints]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1240
                self.match(XplorMRParser.Nrestraints)
                self.state = 1241
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.Potential]:
                self.enterOuterAlt(localctx, 6)
                self.state = 1242
                self.match(XplorMRParser.Potential)
                self.state = 1243
                self.match(XplorMRParser.Rdc_potential)
                pass
            elif token in [XplorMRParser.Print]:
                self.enterOuterAlt(localctx, 7)
                self.state = 1244
                self.match(XplorMRParser.Print)
                self.state = 1245
                self.match(XplorMRParser.Threshold)
                self.state = 1246
                self.match(XplorMRParser.Real)
                pass
            elif token in [XplorMRParser.Reset]:
                self.enterOuterAlt(localctx, 8)
                self.state = 1247
                self.match(XplorMRParser.Reset)
                pass
            elif token in [XplorMRParser.Type]:
                self.enterOuterAlt(localctx, 9)
                self.state = 1248
                self.match(XplorMRParser.Type)
                self.state = 1249
                self.match(XplorMRParser.Diff_anis_types)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Dani_assignContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Assign(self):
            return self.getToken(XplorMRParser.Assign, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.SelectionContext,i)


        def Real(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Real)
            else:
                return self.getToken(XplorMRParser.Real, i)

        def getRuleIndex(self):
            return XplorMRParser.RULE_dani_assign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDani_assign" ):
                listener.enterDani_assign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDani_assign" ):
                listener.exitDani_assign(self)




    def dani_assign(self):

        localctx = XplorMRParser.Dani_assignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 122, self.RULE_dani_assign)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1252
            self.match(XplorMRParser.Assign)
            self.state = 1253
            self.selection()
            self.state = 1254
            self.selection()
            self.state = 1255
            self.selection()
            self.state = 1256
            self.selection()
            self.state = 1257
            self.selection()
            self.state = 1258
            self.selection()
            self.state = 1259
            self.match(XplorMRParser.Real)
            self.state = 1260
            self.match(XplorMRParser.Real)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Orientation_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def orie_assign(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Orie_assignContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Orie_assignContext,i)


        def Classification(self):
            return self.getToken(XplorMRParser.Classification, 0)

        def Simple_name(self):
            return self.getToken(XplorMRParser.Simple_name, 0)

        def Cutoff(self):
            return self.getToken(XplorMRParser.Cutoff, 0)

        def Real(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Real)
            else:
                return self.getToken(XplorMRParser.Real, i)

        def Height(self):
            return self.getToken(XplorMRParser.Height, 0)

        def ForceConstant(self):
            return self.getToken(XplorMRParser.ForceConstant, 0)

        def Gaussian(self):
            return self.getToken(XplorMRParser.Gaussian, 0)

        def MaxGaussians(self):
            return self.getToken(XplorMRParser.MaxGaussians, 0)

        def Integer(self):
            return self.getToken(XplorMRParser.Integer, 0)

        def NewGaussian(self):
            return self.getToken(XplorMRParser.NewGaussian, 0)

        def Nrestraints(self):
            return self.getToken(XplorMRParser.Nrestraints, 0)

        def Print(self):
            return self.getToken(XplorMRParser.Print, 0)

        def Threshold(self):
            return self.getToken(XplorMRParser.Threshold, 0)

        def All(self):
            return self.getToken(XplorMRParser.All, 0)

        def Quartic(self):
            return self.getToken(XplorMRParser.Quartic, 0)

        def Reset(self):
            return self.getToken(XplorMRParser.Reset, 0)

        def Residue(self):
            return self.getToken(XplorMRParser.Residue, 0)

        def Size(self):
            return self.getToken(XplorMRParser.Size, 0)

        def Zero(self):
            return self.getToken(XplorMRParser.Zero, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_orientation_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOrientation_statement" ):
                listener.enterOrientation_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOrientation_statement" ):
                listener.exitOrientation_statement(self)




    def orientation_statement(self):

        localctx = XplorMRParser.Orientation_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 124, self.RULE_orientation_statement)
        self._la = 0 # Token type
        try:
            self.state = 1320
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [XplorMRParser.Assign, XplorMRParser.R_brace]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1265
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==XplorMRParser.Assign:
                    self.state = 1262
                    self.orie_assign()
                    self.state = 1267
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass
            elif token in [XplorMRParser.Classification]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1268
                self.match(XplorMRParser.Classification)
                self.state = 1269
                self.match(XplorMRParser.Simple_name)
                pass
            elif token in [XplorMRParser.Cutoff]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1270
                self.match(XplorMRParser.Cutoff)
                self.state = 1271
                self.match(XplorMRParser.Real)
                pass
            elif token in [XplorMRParser.Height]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1272
                self.match(XplorMRParser.Height)
                self.state = 1273
                self.match(XplorMRParser.Real)
                pass
            elif token in [XplorMRParser.ForceConstant]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1274
                self.match(XplorMRParser.ForceConstant)
                self.state = 1275
                self.match(XplorMRParser.Real)
                pass
            elif token in [XplorMRParser.Gaussian]:
                self.enterOuterAlt(localctx, 6)
                self.state = 1276
                self.match(XplorMRParser.Gaussian)
                self.state = 1277
                self.match(XplorMRParser.Real)
                self.state = 1278
                self.match(XplorMRParser.Real)
                self.state = 1279
                self.match(XplorMRParser.Real)
                self.state = 1280
                self.match(XplorMRParser.Real)
                self.state = 1281
                self.match(XplorMRParser.Real)
                self.state = 1282
                self.match(XplorMRParser.Real)
                self.state = 1283
                self.match(XplorMRParser.Real)
                pass
            elif token in [XplorMRParser.MaxGaussians]:
                self.enterOuterAlt(localctx, 7)
                self.state = 1284
                self.match(XplorMRParser.MaxGaussians)
                self.state = 1285
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.NewGaussian]:
                self.enterOuterAlt(localctx, 8)
                self.state = 1286
                self.match(XplorMRParser.NewGaussian)
                self.state = 1287
                self.match(XplorMRParser.Real)
                self.state = 1288
                self.match(XplorMRParser.Real)
                self.state = 1289
                self.match(XplorMRParser.Real)
                self.state = 1290
                self.match(XplorMRParser.Real)
                self.state = 1291
                self.match(XplorMRParser.Real)
                self.state = 1292
                self.match(XplorMRParser.Real)
                self.state = 1293
                self.match(XplorMRParser.Real)
                self.state = 1294
                self.match(XplorMRParser.Real)
                pass
            elif token in [XplorMRParser.Nrestraints]:
                self.enterOuterAlt(localctx, 9)
                self.state = 1295
                self.match(XplorMRParser.Nrestraints)
                self.state = 1296
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.Print]:
                self.enterOuterAlt(localctx, 10)
                self.state = 1297
                self.match(XplorMRParser.Print)
                self.state = 1298
                self.match(XplorMRParser.Threshold)
                self.state = 1299
                self.match(XplorMRParser.Real)
                self.state = 1303
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [XplorMRParser.All]:
                    self.state = 1300
                    self.match(XplorMRParser.All)
                    pass
                elif token in [XplorMRParser.Classification]:
                    self.state = 1301
                    self.match(XplorMRParser.Classification)
                    self.state = 1302
                    self.match(XplorMRParser.Simple_name)
                    pass
                else:
                    raise NoViableAltException(self)

                pass
            elif token in [XplorMRParser.Quartic]:
                self.enterOuterAlt(localctx, 11)
                self.state = 1305
                self.match(XplorMRParser.Quartic)
                self.state = 1306
                self.match(XplorMRParser.Real)
                self.state = 1307
                self.match(XplorMRParser.Real)
                self.state = 1308
                self.match(XplorMRParser.Real)
                self.state = 1309
                self.match(XplorMRParser.Real)
                self.state = 1310
                self.match(XplorMRParser.Real)
                self.state = 1311
                self.match(XplorMRParser.Real)
                self.state = 1312
                self.match(XplorMRParser.Real)
                pass
            elif token in [XplorMRParser.Reset]:
                self.enterOuterAlt(localctx, 12)
                self.state = 1313
                self.match(XplorMRParser.Reset)
                pass
            elif token in [XplorMRParser.Residue]:
                self.enterOuterAlt(localctx, 13)
                self.state = 1314
                self.match(XplorMRParser.Residue)
                self.state = 1315
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.Size]:
                self.enterOuterAlt(localctx, 14)
                self.state = 1316
                self.match(XplorMRParser.Size)
                self.state = 1317
                self.match(XplorMRParser.Real)
                self.state = 1318
                self.match(XplorMRParser.Real)
                pass
            elif token in [XplorMRParser.Zero]:
                self.enterOuterAlt(localctx, 15)
                self.state = 1319
                self.match(XplorMRParser.Zero)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Orie_assignContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Assign(self):
            return self.getToken(XplorMRParser.Assign, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.SelectionContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_orie_assign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOrie_assign" ):
                listener.enterOrie_assign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOrie_assign" ):
                listener.exitOrie_assign(self)




    def orie_assign(self):

        localctx = XplorMRParser.Orie_assignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 126, self.RULE_orie_assign)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1322
            self.match(XplorMRParser.Assign)
            self.state = 1323
            self.selection()
            self.state = 1324
            self.selection()
            self.state = 1325
            self.selection()
            self.state = 1326
            self.selection()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Csa_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def csa_assign(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Csa_assignContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Csa_assignContext,i)


        def Classification(self):
            return self.getToken(XplorMRParser.Classification, 0)

        def Simple_name(self):
            return self.getToken(XplorMRParser.Simple_name, 0)

        def Scale(self):
            return self.getToken(XplorMRParser.Scale, 0)

        def Real(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Real)
            else:
                return self.getToken(XplorMRParser.Real, i)

        def Type(self):
            return self.getToken(XplorMRParser.Type, 0)

        def Csa_types(self):
            return self.getToken(XplorMRParser.Csa_types, 0)

        def Coefficients(self):
            return self.getToken(XplorMRParser.Coefficients, 0)

        def Sigma(self):
            return self.getToken(XplorMRParser.Sigma, 0)

        def ForceConstant(self):
            return self.getToken(XplorMRParser.ForceConstant, 0)

        def Nrestraints(self):
            return self.getToken(XplorMRParser.Nrestraints, 0)

        def Integer(self):
            return self.getToken(XplorMRParser.Integer, 0)

        def Potential(self):
            return self.getToken(XplorMRParser.Potential, 0)

        def Rdc_potential(self):
            return self.getToken(XplorMRParser.Rdc_potential, 0)

        def Print(self):
            return self.getToken(XplorMRParser.Print, 0)

        def Threshold(self):
            return self.getToken(XplorMRParser.Threshold, 0)

        def Reset(self):
            return self.getToken(XplorMRParser.Reset, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_csa_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCsa_statement" ):
                listener.enterCsa_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCsa_statement" ):
                listener.exitCsa_statement(self)




    def csa_statement(self):

        localctx = XplorMRParser.Csa_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 128, self.RULE_csa_statement)
        self._la = 0 # Token type
        try:
            self.state = 1358
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [XplorMRParser.Assign, XplorMRParser.R_brace]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1331
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==XplorMRParser.Assign:
                    self.state = 1328
                    self.csa_assign()
                    self.state = 1333
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass
            elif token in [XplorMRParser.Classification]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1334
                self.match(XplorMRParser.Classification)
                self.state = 1335
                self.match(XplorMRParser.Simple_name)
                pass
            elif token in [XplorMRParser.Scale]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1336
                self.match(XplorMRParser.Scale)
                self.state = 1337
                self.match(XplorMRParser.Real)
                pass
            elif token in [XplorMRParser.Type]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1338
                self.match(XplorMRParser.Type)
                self.state = 1339
                self.match(XplorMRParser.Csa_types)
                pass
            elif token in [XplorMRParser.Coefficients]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1340
                self.match(XplorMRParser.Coefficients)
                self.state = 1341
                self.match(XplorMRParser.Real)
                self.state = 1342
                self.match(XplorMRParser.Real)
                self.state = 1343
                self.match(XplorMRParser.Real)
                pass
            elif token in [XplorMRParser.Sigma]:
                self.enterOuterAlt(localctx, 6)
                self.state = 1344
                self.match(XplorMRParser.Sigma)
                self.state = 1345
                self.match(XplorMRParser.Real)
                self.state = 1346
                self.match(XplorMRParser.Real)
                self.state = 1347
                self.match(XplorMRParser.Real)
                pass
            elif token in [XplorMRParser.ForceConstant]:
                self.enterOuterAlt(localctx, 7)
                self.state = 1348
                self.match(XplorMRParser.ForceConstant)
                self.state = 1349
                self.match(XplorMRParser.Real)
                pass
            elif token in [XplorMRParser.Nrestraints]:
                self.enterOuterAlt(localctx, 8)
                self.state = 1350
                self.match(XplorMRParser.Nrestraints)
                self.state = 1351
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.Potential]:
                self.enterOuterAlt(localctx, 9)
                self.state = 1352
                self.match(XplorMRParser.Potential)
                self.state = 1353
                self.match(XplorMRParser.Rdc_potential)
                pass
            elif token in [XplorMRParser.Print]:
                self.enterOuterAlt(localctx, 10)
                self.state = 1354
                self.match(XplorMRParser.Print)
                self.state = 1355
                self.match(XplorMRParser.Threshold)
                self.state = 1356
                self.match(XplorMRParser.Real)
                pass
            elif token in [XplorMRParser.Reset]:
                self.enterOuterAlt(localctx, 11)
                self.state = 1357
                self.match(XplorMRParser.Reset)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Csa_assignContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Assign(self):
            return self.getToken(XplorMRParser.Assign, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.SelectionContext,i)


        def Real(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Real)
            else:
                return self.getToken(XplorMRParser.Real, i)

        def getRuleIndex(self):
            return XplorMRParser.RULE_csa_assign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCsa_assign" ):
                listener.enterCsa_assign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCsa_assign" ):
                listener.exitCsa_assign(self)




    def csa_assign(self):

        localctx = XplorMRParser.Csa_assignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 130, self.RULE_csa_assign)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1360
            self.match(XplorMRParser.Assign)
            self.state = 1361
            self.selection()
            self.state = 1362
            self.selection()
            self.state = 1363
            self.selection()
            self.state = 1364
            self.selection()
            self.state = 1365
            self.selection()
            self.state = 1366
            self.selection()
            self.state = 1367
            self.selection()
            self.state = 1368
            self.match(XplorMRParser.Real)
            self.state = 1369
            self.match(XplorMRParser.Real)
            self.state = 1370
            self.match(XplorMRParser.Real)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pcsa_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def csa_assign(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Csa_assignContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Csa_assignContext,i)


        def Classification(self):
            return self.getToken(XplorMRParser.Classification, 0)

        def Simple_name(self):
            return self.getToken(XplorMRParser.Simple_name, 0)

        def Scale(self):
            return self.getToken(XplorMRParser.Scale, 0)

        def Real(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Real)
            else:
                return self.getToken(XplorMRParser.Real, i)

        def Coefficients(self):
            return self.getToken(XplorMRParser.Coefficients, 0)

        def Sigma(self):
            return self.getToken(XplorMRParser.Sigma, 0)

        def ForceConstant(self):
            return self.getToken(XplorMRParser.ForceConstant, 0)

        def Nrestraints(self):
            return self.getToken(XplorMRParser.Nrestraints, 0)

        def Integer(self):
            return self.getToken(XplorMRParser.Integer, 0)

        def Potential(self):
            return self.getToken(XplorMRParser.Potential, 0)

        def Rdc_potential(self):
            return self.getToken(XplorMRParser.Rdc_potential, 0)

        def Print(self):
            return self.getToken(XplorMRParser.Print, 0)

        def Threshold(self):
            return self.getToken(XplorMRParser.Threshold, 0)

        def Reset(self):
            return self.getToken(XplorMRParser.Reset, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_pcsa_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPcsa_statement" ):
                listener.enterPcsa_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPcsa_statement" ):
                listener.exitPcsa_statement(self)




    def pcsa_statement(self):

        localctx = XplorMRParser.Pcsa_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 132, self.RULE_pcsa_statement)
        self._la = 0 # Token type
        try:
            self.state = 1401
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [XplorMRParser.Assign, XplorMRParser.R_brace]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1375
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==XplorMRParser.Assign:
                    self.state = 1372
                    self.csa_assign()
                    self.state = 1377
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass
            elif token in [XplorMRParser.Classification]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1378
                self.match(XplorMRParser.Classification)
                self.state = 1379
                self.match(XplorMRParser.Simple_name)
                pass
            elif token in [XplorMRParser.Scale]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1380
                self.match(XplorMRParser.Scale)
                self.state = 1381
                self.match(XplorMRParser.Real)
                pass
            elif token in [XplorMRParser.Coefficients]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1382
                self.match(XplorMRParser.Coefficients)
                self.state = 1383
                self.match(XplorMRParser.Real)
                self.state = 1384
                self.match(XplorMRParser.Real)
                self.state = 1385
                self.match(XplorMRParser.Real)
                pass
            elif token in [XplorMRParser.Sigma]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1386
                self.match(XplorMRParser.Sigma)
                self.state = 1387
                self.match(XplorMRParser.Real)
                self.state = 1388
                self.match(XplorMRParser.Real)
                self.state = 1389
                self.match(XplorMRParser.Real)
                self.state = 1390
                self.match(XplorMRParser.Real)
                pass
            elif token in [XplorMRParser.ForceConstant]:
                self.enterOuterAlt(localctx, 6)
                self.state = 1391
                self.match(XplorMRParser.ForceConstant)
                self.state = 1392
                self.match(XplorMRParser.Real)
                pass
            elif token in [XplorMRParser.Nrestraints]:
                self.enterOuterAlt(localctx, 7)
                self.state = 1393
                self.match(XplorMRParser.Nrestraints)
                self.state = 1394
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.Potential]:
                self.enterOuterAlt(localctx, 8)
                self.state = 1395
                self.match(XplorMRParser.Potential)
                self.state = 1396
                self.match(XplorMRParser.Rdc_potential)
                pass
            elif token in [XplorMRParser.Print]:
                self.enterOuterAlt(localctx, 9)
                self.state = 1397
                self.match(XplorMRParser.Print)
                self.state = 1398
                self.match(XplorMRParser.Threshold)
                self.state = 1399
                self.match(XplorMRParser.Real)
                pass
            elif token in [XplorMRParser.Reset]:
                self.enterOuterAlt(localctx, 10)
                self.state = 1400
                self.match(XplorMRParser.Reset)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class One_bond_coupling_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def one_bond_assign(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.One_bond_assignContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.One_bond_assignContext,i)


        def Classification(self):
            return self.getToken(XplorMRParser.Classification, 0)

        def Simple_name(self):
            return self.getToken(XplorMRParser.Simple_name, 0)

        def Coefficients(self):
            return self.getToken(XplorMRParser.Coefficients, 0)

        def Real(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Real)
            else:
                return self.getToken(XplorMRParser.Real, i)

        def ForceConstant(self):
            return self.getToken(XplorMRParser.ForceConstant, 0)

        def Nrestraints(self):
            return self.getToken(XplorMRParser.Nrestraints, 0)

        def Integer(self):
            return self.getToken(XplorMRParser.Integer, 0)

        def Potential(self):
            return self.getToken(XplorMRParser.Potential, 0)

        def Rdc_potential(self):
            return self.getToken(XplorMRParser.Rdc_potential, 0)

        def Print(self):
            return self.getToken(XplorMRParser.Print, 0)

        def Threshold(self):
            return self.getToken(XplorMRParser.Threshold, 0)

        def Reset(self):
            return self.getToken(XplorMRParser.Reset, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_one_bond_coupling_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOne_bond_coupling_statement" ):
                listener.enterOne_bond_coupling_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOne_bond_coupling_statement" ):
                listener.exitOne_bond_coupling_statement(self)




    def one_bond_coupling_statement(self):

        localctx = XplorMRParser.One_bond_coupling_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 134, self.RULE_one_bond_coupling_statement)
        self._la = 0 # Token type
        try:
            self.state = 1429
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [XplorMRParser.Assign, XplorMRParser.R_brace]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1406
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==XplorMRParser.Assign:
                    self.state = 1403
                    self.one_bond_assign()
                    self.state = 1408
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass
            elif token in [XplorMRParser.Classification]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1409
                self.match(XplorMRParser.Classification)
                self.state = 1410
                self.match(XplorMRParser.Simple_name)
                pass
            elif token in [XplorMRParser.Coefficients]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1411
                self.match(XplorMRParser.Coefficients)
                self.state = 1412
                self.match(XplorMRParser.Real)
                self.state = 1413
                self.match(XplorMRParser.Real)
                self.state = 1414
                self.match(XplorMRParser.Real)
                self.state = 1415
                self.match(XplorMRParser.Real)
                self.state = 1416
                self.match(XplorMRParser.Real)
                self.state = 1417
                self.match(XplorMRParser.Real)
                self.state = 1418
                self.match(XplorMRParser.Real)
                pass
            elif token in [XplorMRParser.ForceConstant]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1419
                self.match(XplorMRParser.ForceConstant)
                self.state = 1420
                self.match(XplorMRParser.Real)
                pass
            elif token in [XplorMRParser.Nrestraints]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1421
                self.match(XplorMRParser.Nrestraints)
                self.state = 1422
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.Potential]:
                self.enterOuterAlt(localctx, 6)
                self.state = 1423
                self.match(XplorMRParser.Potential)
                self.state = 1424
                self.match(XplorMRParser.Rdc_potential)
                pass
            elif token in [XplorMRParser.Print]:
                self.enterOuterAlt(localctx, 7)
                self.state = 1425
                self.match(XplorMRParser.Print)
                self.state = 1426
                self.match(XplorMRParser.Threshold)
                self.state = 1427
                self.match(XplorMRParser.Real)
                pass
            elif token in [XplorMRParser.Reset]:
                self.enterOuterAlt(localctx, 8)
                self.state = 1428
                self.match(XplorMRParser.Reset)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class One_bond_assignContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Assign(self):
            return self.getToken(XplorMRParser.Assign, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.SelectionContext,i)


        def Real(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Real)
            else:
                return self.getToken(XplorMRParser.Real, i)

        def getRuleIndex(self):
            return XplorMRParser.RULE_one_bond_assign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOne_bond_assign" ):
                listener.enterOne_bond_assign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOne_bond_assign" ):
                listener.exitOne_bond_assign(self)




    def one_bond_assign(self):

        localctx = XplorMRParser.One_bond_assignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 136, self.RULE_one_bond_assign)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1431
            self.match(XplorMRParser.Assign)
            self.state = 1432
            self.selection()
            self.state = 1433
            self.selection()
            self.state = 1434
            self.selection()
            self.state = 1435
            self.selection()
            self.state = 1436
            self.selection()
            self.state = 1437
            self.selection()
            self.state = 1438
            self.selection()
            self.state = 1439
            self.selection()
            self.state = 1440
            self.match(XplorMRParser.Real)
            self.state = 1441
            self.match(XplorMRParser.Real)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Angle_db_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def angle_db_assign(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Angle_db_assignContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Angle_db_assignContext,i)


        def Classification(self):
            return self.getToken(XplorMRParser.Classification, 0)

        def Simple_name(self):
            return self.getToken(XplorMRParser.Simple_name, 0)

        def DerivFlag(self):
            return self.getToken(XplorMRParser.DerivFlag, 0)

        def Expectation(self):
            return self.getToken(XplorMRParser.Expectation, 0)

        def Integer(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Integer)
            else:
                return self.getToken(XplorMRParser.Integer, i)

        def Real(self):
            return self.getToken(XplorMRParser.Real, 0)

        def Error(self):
            return self.getToken(XplorMRParser.Error, 0)

        def ForceConstant(self):
            return self.getToken(XplorMRParser.ForceConstant, 0)

        def Nrestraints(self):
            return self.getToken(XplorMRParser.Nrestraints, 0)

        def Potential(self):
            return self.getToken(XplorMRParser.Potential, 0)

        def Rdc_potential(self):
            return self.getToken(XplorMRParser.Rdc_potential, 0)

        def Print(self):
            return self.getToken(XplorMRParser.Print, 0)

        def Threshold(self):
            return self.getToken(XplorMRParser.Threshold, 0)

        def All(self):
            return self.getToken(XplorMRParser.All, 0)

        def Reset(self):
            return self.getToken(XplorMRParser.Reset, 0)

        def Size(self):
            return self.getToken(XplorMRParser.Size, 0)

        def Angle_dihedral(self):
            return self.getToken(XplorMRParser.Angle_dihedral, 0)

        def Zero(self):
            return self.getToken(XplorMRParser.Zero, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_angle_db_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAngle_db_statement" ):
                listener.enterAngle_db_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAngle_db_statement" ):
                listener.exitAngle_db_statement(self)




    def angle_db_statement(self):

        localctx = XplorMRParser.Angle_db_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 138, self.RULE_angle_db_statement)
        self._la = 0 # Token type
        try:
            self.state = 1479
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [XplorMRParser.Assign, XplorMRParser.R_brace]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1446
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==XplorMRParser.Assign:
                    self.state = 1443
                    self.angle_db_assign()
                    self.state = 1448
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass
            elif token in [XplorMRParser.Classification]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1449
                self.match(XplorMRParser.Classification)
                self.state = 1450
                self.match(XplorMRParser.Simple_name)
                pass
            elif token in [XplorMRParser.DerivFlag]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1451
                self.match(XplorMRParser.DerivFlag)
                self.state = 1452
                self.match(XplorMRParser.Simple_name)
                pass
            elif token in [XplorMRParser.Expectation]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1453
                self.match(XplorMRParser.Expectation)
                self.state = 1454
                self.match(XplorMRParser.Integer)
                self.state = 1455
                self.match(XplorMRParser.Integer)
                self.state = 1456
                self.match(XplorMRParser.Real)
                pass
            elif token in [XplorMRParser.Error]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1457
                self.match(XplorMRParser.Error)
                self.state = 1458
                self.match(XplorMRParser.Real)
                pass
            elif token in [XplorMRParser.ForceConstant]:
                self.enterOuterAlt(localctx, 6)
                self.state = 1459
                self.match(XplorMRParser.ForceConstant)
                self.state = 1460
                self.match(XplorMRParser.Real)
                pass
            elif token in [XplorMRParser.Nrestraints]:
                self.enterOuterAlt(localctx, 7)
                self.state = 1461
                self.match(XplorMRParser.Nrestraints)
                self.state = 1462
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.Potential]:
                self.enterOuterAlt(localctx, 8)
                self.state = 1463
                self.match(XplorMRParser.Potential)
                self.state = 1464
                self.match(XplorMRParser.Rdc_potential)
                pass
            elif token in [XplorMRParser.Print]:
                self.enterOuterAlt(localctx, 9)
                self.state = 1465
                self.match(XplorMRParser.Print)
                self.state = 1466
                self.match(XplorMRParser.Threshold)
                self.state = 1467
                self.match(XplorMRParser.Real)
                self.state = 1471
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [XplorMRParser.All]:
                    self.state = 1468
                    self.match(XplorMRParser.All)
                    pass
                elif token in [XplorMRParser.Classification]:
                    self.state = 1469
                    self.match(XplorMRParser.Classification)
                    self.state = 1470
                    self.match(XplorMRParser.Simple_name)
                    pass
                else:
                    raise NoViableAltException(self)

                pass
            elif token in [XplorMRParser.Reset]:
                self.enterOuterAlt(localctx, 10)
                self.state = 1473
                self.match(XplorMRParser.Reset)
                pass
            elif token in [XplorMRParser.Size]:
                self.enterOuterAlt(localctx, 11)
                self.state = 1474
                self.match(XplorMRParser.Size)
                self.state = 1475
                self.match(XplorMRParser.Angle_dihedral)
                self.state = 1476
                self.match(XplorMRParser.Integer)
                self.state = 1477
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.Zero]:
                self.enterOuterAlt(localctx, 12)
                self.state = 1478
                self.match(XplorMRParser.Zero)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Angle_db_assignContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Assign(self):
            return self.getToken(XplorMRParser.Assign, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.SelectionContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_angle_db_assign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAngle_db_assign" ):
                listener.enterAngle_db_assign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAngle_db_assign" ):
                listener.exitAngle_db_assign(self)




    def angle_db_assign(self):

        localctx = XplorMRParser.Angle_db_assignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 140, self.RULE_angle_db_assign)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1481
            self.match(XplorMRParser.Assign)
            self.state = 1482
            self.selection()
            self.state = 1483
            self.selection()
            self.state = 1484
            self.selection()
            self.state = 1485
            self.selection()
            self.state = 1486
            self.selection()
            self.state = 1487
            self.selection()
            self.state = 1488
            self.selection()
            self.state = 1489
            self.selection()
            self.state = 1490
            self.selection()
            self.state = 1491
            self.selection()
            self.state = 1492
            self.selection()
            self.state = 1494
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==XplorMRParser.L_paren:
                self.state = 1493
                self.selection()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pre_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def pre_assign(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Pre_assignContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Pre_assignContext,i)


        def Classification(self):
            return self.getToken(XplorMRParser.Classification, 0)

        def Equ_op(self):
            return self.getToken(XplorMRParser.Equ_op, 0)

        def Simple_name(self):
            return self.getToken(XplorMRParser.Simple_name, 0)

        def ForceConstant(self):
            return self.getToken(XplorMRParser.ForceConstant, 0)

        def Real(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Real)
            else:
                return self.getToken(XplorMRParser.Real, i)

        def Nrestraints(self):
            return self.getToken(XplorMRParser.Nrestraints, 0)

        def Integer(self):
            return self.getToken(XplorMRParser.Integer, 0)

        def Potential(self):
            return self.getToken(XplorMRParser.Potential, 0)

        def Rdc_potential(self):
            return self.getToken(XplorMRParser.Rdc_potential, 0)

        def Kconst(self):
            return self.getToken(XplorMRParser.Kconst, 0)

        def Omega(self):
            return self.getToken(XplorMRParser.Omega, 0)

        def Tauc(self):
            return self.getToken(XplorMRParser.Tauc, 0)

        def Print(self):
            return self.getToken(XplorMRParser.Print, 0)

        def Threshold(self):
            return self.getToken(XplorMRParser.Threshold, 0)

        def All(self):
            return self.getToken(XplorMRParser.All, 0)

        def Reset(self):
            return self.getToken(XplorMRParser.Reset, 0)

        def Debug(self):
            return self.getToken(XplorMRParser.Debug, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_pre_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPre_statement" ):
                listener.enterPre_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPre_statement" ):
                listener.exitPre_statement(self)




    def pre_statement(self):

        localctx = XplorMRParser.Pre_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 142, self.RULE_pre_statement)
        self._la = 0 # Token type
        try:
            self.state = 1539
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [XplorMRParser.Assign, XplorMRParser.R_brace]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1499
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==XplorMRParser.Assign:
                    self.state = 1496
                    self.pre_assign()
                    self.state = 1501
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass
            elif token in [XplorMRParser.Classification]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1502
                self.match(XplorMRParser.Classification)
                self.state = 1503
                self.match(XplorMRParser.Equ_op)
                self.state = 1504
                self.match(XplorMRParser.Simple_name)
                pass
            elif token in [XplorMRParser.ForceConstant]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1505
                self.match(XplorMRParser.ForceConstant)
                self.state = 1506
                self.match(XplorMRParser.Equ_op)
                self.state = 1507
                self.match(XplorMRParser.Simple_name)
                self.state = 1508
                self.match(XplorMRParser.Real)
                pass
            elif token in [XplorMRParser.Nrestraints]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1509
                self.match(XplorMRParser.Nrestraints)
                self.state = 1510
                self.match(XplorMRParser.Equ_op)
                self.state = 1511
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.Potential]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1512
                self.match(XplorMRParser.Potential)
                self.state = 1513
                self.match(XplorMRParser.Equ_op)
                self.state = 1514
                self.match(XplorMRParser.Simple_name)
                self.state = 1515
                self.match(XplorMRParser.Rdc_potential)
                pass
            elif token in [XplorMRParser.Kconst]:
                self.enterOuterAlt(localctx, 6)
                self.state = 1516
                self.match(XplorMRParser.Kconst)
                self.state = 1517
                self.match(XplorMRParser.Equ_op)
                self.state = 1518
                self.match(XplorMRParser.Simple_name)
                self.state = 1519
                self.match(XplorMRParser.Real)
                pass
            elif token in [XplorMRParser.Omega]:
                self.enterOuterAlt(localctx, 7)
                self.state = 1520
                self.match(XplorMRParser.Omega)
                self.state = 1521
                self.match(XplorMRParser.Equ_op)
                self.state = 1522
                self.match(XplorMRParser.Simple_name)
                self.state = 1523
                self.match(XplorMRParser.Real)
                pass
            elif token in [XplorMRParser.Tauc]:
                self.enterOuterAlt(localctx, 8)
                self.state = 1524
                self.match(XplorMRParser.Tauc)
                self.state = 1525
                self.match(XplorMRParser.Equ_op)
                self.state = 1526
                self.match(XplorMRParser.Simple_name)
                self.state = 1527
                self.match(XplorMRParser.Real)
                self.state = 1528
                self.match(XplorMRParser.Real)
                pass
            elif token in [XplorMRParser.Print]:
                self.enterOuterAlt(localctx, 9)
                self.state = 1529
                self.match(XplorMRParser.Print)
                self.state = 1530
                self.match(XplorMRParser.Threshold)
                self.state = 1531
                self.match(XplorMRParser.Real)
                self.state = 1535
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [XplorMRParser.All]:
                    self.state = 1532
                    self.match(XplorMRParser.All)
                    pass
                elif token in [XplorMRParser.Classification]:
                    self.state = 1533
                    self.match(XplorMRParser.Classification)
                    self.state = 1534
                    self.match(XplorMRParser.Simple_name)
                    pass
                else:
                    raise NoViableAltException(self)

                pass
            elif token in [XplorMRParser.Reset]:
                self.enterOuterAlt(localctx, 10)
                self.state = 1537
                self.match(XplorMRParser.Reset)
                pass
            elif token in [XplorMRParser.Debug]:
                self.enterOuterAlt(localctx, 11)
                self.state = 1538
                self.match(XplorMRParser.Debug)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pre_assignContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Assign(self):
            return self.getToken(XplorMRParser.Assign, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.SelectionContext,i)


        def Real(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Real)
            else:
                return self.getToken(XplorMRParser.Real, i)

        def getRuleIndex(self):
            return XplorMRParser.RULE_pre_assign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPre_assign" ):
                listener.enterPre_assign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPre_assign" ):
                listener.exitPre_assign(self)




    def pre_assign(self):

        localctx = XplorMRParser.Pre_assignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 144, self.RULE_pre_assign)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1541
            self.match(XplorMRParser.Assign)
            self.state = 1542
            self.selection()
            self.state = 1543
            self.selection()
            self.state = 1544
            self.match(XplorMRParser.Real)
            self.state = 1545
            self.match(XplorMRParser.Real)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pcs_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def pcs_assign(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Pcs_assignContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Pcs_assignContext,i)


        def Classification(self):
            return self.getToken(XplorMRParser.Classification, 0)

        def Simple_name(self):
            return self.getToken(XplorMRParser.Simple_name, 0)

        def Tolerance(self):
            return self.getToken(XplorMRParser.Tolerance, 0)

        def Integer(self):
            return self.getToken(XplorMRParser.Integer, 0)

        def Coefficients(self):
            return self.getToken(XplorMRParser.Coefficients, 0)

        def Real(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Real)
            else:
                return self.getToken(XplorMRParser.Real, i)

        def ForceConstant(self):
            return self.getToken(XplorMRParser.ForceConstant, 0)

        def Nrestraints(self):
            return self.getToken(XplorMRParser.Nrestraints, 0)

        def Print(self):
            return self.getToken(XplorMRParser.Print, 0)

        def Threshold(self):
            return self.getToken(XplorMRParser.Threshold, 0)

        def All(self):
            return self.getToken(XplorMRParser.All, 0)

        def Reset(self):
            return self.getToken(XplorMRParser.Reset, 0)

        def Save(self):
            return self.getToken(XplorMRParser.Save, 0)

        def Fmed(self):
            return self.getToken(XplorMRParser.Fmed, 0)

        def ErrOn(self):
            return self.getToken(XplorMRParser.ErrOn, 0)

        def ErrOff(self):
            return self.getToken(XplorMRParser.ErrOff, 0)

        def Fon(self):
            return self.getToken(XplorMRParser.Fon, 0)

        def Foff(self):
            return self.getToken(XplorMRParser.Foff, 0)

        def Son(self):
            return self.getToken(XplorMRParser.Son, 0)

        def Soff(self):
            return self.getToken(XplorMRParser.Soff, 0)

        def Frun(self):
            return self.getToken(XplorMRParser.Frun, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_pcs_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPcs_statement" ):
                listener.enterPcs_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPcs_statement" ):
                listener.exitPcs_statement(self)




    def pcs_statement(self):

        localctx = XplorMRParser.Pcs_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 146, self.RULE_pcs_statement)
        self._la = 0 # Token type
        try:
            self.state = 1586
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [XplorMRParser.Assign, XplorMRParser.R_brace]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1550
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==XplorMRParser.Assign:
                    self.state = 1547
                    self.pcs_assign()
                    self.state = 1552
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass
            elif token in [XplorMRParser.Classification]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1553
                self.match(XplorMRParser.Classification)
                self.state = 1554
                self.match(XplorMRParser.Simple_name)
                pass
            elif token in [XplorMRParser.Tolerance]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1555
                self.match(XplorMRParser.Tolerance)
                self.state = 1556
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.Coefficients]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1557
                self.match(XplorMRParser.Coefficients)
                self.state = 1558
                self.match(XplorMRParser.Real)
                self.state = 1559
                self.match(XplorMRParser.Real)
                pass
            elif token in [XplorMRParser.ForceConstant]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1560
                self.match(XplorMRParser.ForceConstant)
                self.state = 1561
                self.match(XplorMRParser.Real)
                pass
            elif token in [XplorMRParser.Nrestraints]:
                self.enterOuterAlt(localctx, 6)
                self.state = 1562
                self.match(XplorMRParser.Nrestraints)
                self.state = 1563
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.Print]:
                self.enterOuterAlt(localctx, 7)
                self.state = 1564
                self.match(XplorMRParser.Print)
                self.state = 1565
                self.match(XplorMRParser.Threshold)
                self.state = 1566
                self.match(XplorMRParser.Real)
                self.state = 1570
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [XplorMRParser.All]:
                    self.state = 1567
                    self.match(XplorMRParser.All)
                    pass
                elif token in [XplorMRParser.Classification]:
                    self.state = 1568
                    self.match(XplorMRParser.Classification)
                    self.state = 1569
                    self.match(XplorMRParser.Simple_name)
                    pass
                else:
                    raise NoViableAltException(self)

                pass
            elif token in [XplorMRParser.Reset]:
                self.enterOuterAlt(localctx, 8)
                self.state = 1572
                self.match(XplorMRParser.Reset)
                pass
            elif token in [XplorMRParser.Save]:
                self.enterOuterAlt(localctx, 9)
                self.state = 1573
                self.match(XplorMRParser.Save)
                self.state = 1574
                self.match(XplorMRParser.Simple_name)
                pass
            elif token in [XplorMRParser.Fmed]:
                self.enterOuterAlt(localctx, 10)
                self.state = 1575
                self.match(XplorMRParser.Fmed)
                self.state = 1576
                self.match(XplorMRParser.Real)
                self.state = 1577
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.ErrOn]:
                self.enterOuterAlt(localctx, 11)
                self.state = 1578
                self.match(XplorMRParser.ErrOn)
                pass
            elif token in [XplorMRParser.ErrOff]:
                self.enterOuterAlt(localctx, 12)
                self.state = 1579
                self.match(XplorMRParser.ErrOff)
                pass
            elif token in [XplorMRParser.Fon]:
                self.enterOuterAlt(localctx, 13)
                self.state = 1580
                self.match(XplorMRParser.Fon)
                pass
            elif token in [XplorMRParser.Foff]:
                self.enterOuterAlt(localctx, 14)
                self.state = 1581
                self.match(XplorMRParser.Foff)
                pass
            elif token in [XplorMRParser.Son]:
                self.enterOuterAlt(localctx, 15)
                self.state = 1582
                self.match(XplorMRParser.Son)
                pass
            elif token in [XplorMRParser.Soff]:
                self.enterOuterAlt(localctx, 16)
                self.state = 1583
                self.match(XplorMRParser.Soff)
                pass
            elif token in [XplorMRParser.Frun]:
                self.enterOuterAlt(localctx, 17)
                self.state = 1584
                self.match(XplorMRParser.Frun)
                self.state = 1585
                self.match(XplorMRParser.Integer)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pcs_assignContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Assign(self):
            return self.getToken(XplorMRParser.Assign, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.SelectionContext,i)


        def Real(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Real)
            else:
                return self.getToken(XplorMRParser.Real, i)

        def getRuleIndex(self):
            return XplorMRParser.RULE_pcs_assign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPcs_assign" ):
                listener.enterPcs_assign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPcs_assign" ):
                listener.exitPcs_assign(self)




    def pcs_assign(self):

        localctx = XplorMRParser.Pcs_assignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 148, self.RULE_pcs_assign)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1588
            self.match(XplorMRParser.Assign)
            self.state = 1589
            self.selection()
            self.state = 1590
            self.selection()
            self.state = 1591
            self.selection()
            self.state = 1592
            self.selection()
            self.state = 1593
            self.selection()
            self.state = 1594
            self.match(XplorMRParser.Real)
            self.state = 1595
            self.match(XplorMRParser.Real)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Prdc_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def prdc_assign(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Prdc_assignContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Prdc_assignContext,i)


        def Classification(self):
            return self.getToken(XplorMRParser.Classification, 0)

        def Simple_name(self):
            return self.getToken(XplorMRParser.Simple_name, 0)

        def Tolerance(self):
            return self.getToken(XplorMRParser.Tolerance, 0)

        def Integer(self):
            return self.getToken(XplorMRParser.Integer, 0)

        def Coefficients(self):
            return self.getToken(XplorMRParser.Coefficients, 0)

        def Real(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Real)
            else:
                return self.getToken(XplorMRParser.Real, i)

        def ForceConstant(self):
            return self.getToken(XplorMRParser.ForceConstant, 0)

        def Nrestraints(self):
            return self.getToken(XplorMRParser.Nrestraints, 0)

        def ErrOn(self):
            return self.getToken(XplorMRParser.ErrOn, 0)

        def ErrOff(self):
            return self.getToken(XplorMRParser.ErrOff, 0)

        def Fmed(self):
            return self.getToken(XplorMRParser.Fmed, 0)

        def Fon(self):
            return self.getToken(XplorMRParser.Fon, 0)

        def Foff(self):
            return self.getToken(XplorMRParser.Foff, 0)

        def Frun(self):
            return self.getToken(XplorMRParser.Frun, 0)

        def Print(self):
            return self.getToken(XplorMRParser.Print, 0)

        def Threshold(self):
            return self.getToken(XplorMRParser.Threshold, 0)

        def Reset(self):
            return self.getToken(XplorMRParser.Reset, 0)

        def Save(self):
            return self.getToken(XplorMRParser.Save, 0)

        def Son(self):
            return self.getToken(XplorMRParser.Son, 0)

        def Soff(self):
            return self.getToken(XplorMRParser.Soff, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_prdc_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrdc_statement" ):
                listener.enterPrdc_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrdc_statement" ):
                listener.exitPrdc_statement(self)




    def prdc_statement(self):

        localctx = XplorMRParser.Prdc_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 150, self.RULE_prdc_statement)
        self._la = 0 # Token type
        try:
            self.state = 1627
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [XplorMRParser.Assign, XplorMRParser.R_brace]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1600
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==XplorMRParser.Assign:
                    self.state = 1597
                    self.prdc_assign()
                    self.state = 1602
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass
            elif token in [XplorMRParser.Classification]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1603
                self.match(XplorMRParser.Classification)
                self.state = 1604
                self.match(XplorMRParser.Simple_name)
                pass
            elif token in [XplorMRParser.Tolerance]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1605
                self.match(XplorMRParser.Tolerance)
                self.state = 1606
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.Coefficients]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1607
                self.match(XplorMRParser.Coefficients)
                self.state = 1608
                self.match(XplorMRParser.Real)
                self.state = 1609
                self.match(XplorMRParser.Real)
                pass
            elif token in [XplorMRParser.ForceConstant]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1610
                self.match(XplorMRParser.ForceConstant)
                self.state = 1611
                self.match(XplorMRParser.Real)
                pass
            elif token in [XplorMRParser.Nrestraints]:
                self.enterOuterAlt(localctx, 6)
                self.state = 1612
                self.match(XplorMRParser.Nrestraints)
                self.state = 1613
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.ErrOn]:
                self.enterOuterAlt(localctx, 7)
                self.state = 1614
                self.match(XplorMRParser.ErrOn)
                pass
            elif token in [XplorMRParser.ErrOff]:
                self.enterOuterAlt(localctx, 8)
                self.state = 1615
                self.match(XplorMRParser.ErrOff)
                pass
            elif token in [XplorMRParser.Fmed]:
                self.enterOuterAlt(localctx, 9)
                self.state = 1616
                self.match(XplorMRParser.Fmed)
                pass
            elif token in [XplorMRParser.Fon]:
                self.enterOuterAlt(localctx, 10)
                self.state = 1617
                self.match(XplorMRParser.Fon)
                pass
            elif token in [XplorMRParser.Foff]:
                self.enterOuterAlt(localctx, 11)
                self.state = 1618
                self.match(XplorMRParser.Foff)
                pass
            elif token in [XplorMRParser.Frun]:
                self.enterOuterAlt(localctx, 12)
                self.state = 1619
                self.match(XplorMRParser.Frun)
                pass
            elif token in [XplorMRParser.Print]:
                self.enterOuterAlt(localctx, 13)
                self.state = 1620
                self.match(XplorMRParser.Print)
                self.state = 1621
                self.match(XplorMRParser.Threshold)
                pass
            elif token in [XplorMRParser.Reset]:
                self.enterOuterAlt(localctx, 14)
                self.state = 1622
                self.match(XplorMRParser.Reset)
                pass
            elif token in [XplorMRParser.Save]:
                self.enterOuterAlt(localctx, 15)
                self.state = 1623
                self.match(XplorMRParser.Save)
                self.state = 1624
                self.match(XplorMRParser.Simple_name)
                pass
            elif token in [XplorMRParser.Son]:
                self.enterOuterAlt(localctx, 16)
                self.state = 1625
                self.match(XplorMRParser.Son)
                pass
            elif token in [XplorMRParser.Soff]:
                self.enterOuterAlt(localctx, 17)
                self.state = 1626
                self.match(XplorMRParser.Soff)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Prdc_assignContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Assign(self):
            return self.getToken(XplorMRParser.Assign, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.SelectionContext,i)


        def Real(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Real)
            else:
                return self.getToken(XplorMRParser.Real, i)

        def getRuleIndex(self):
            return XplorMRParser.RULE_prdc_assign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrdc_assign" ):
                listener.enterPrdc_assign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrdc_assign" ):
                listener.exitPrdc_assign(self)




    def prdc_assign(self):

        localctx = XplorMRParser.Prdc_assignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 152, self.RULE_prdc_assign)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1629
            self.match(XplorMRParser.Assign)
            self.state = 1630
            self.selection()
            self.state = 1631
            self.selection()
            self.state = 1632
            self.selection()
            self.state = 1633
            self.selection()
            self.state = 1634
            self.selection()
            self.state = 1635
            self.selection()
            self.state = 1636
            self.match(XplorMRParser.Real)
            self.state = 1637
            self.match(XplorMRParser.Real)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Porientation_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def porientation_assign(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Porientation_assignContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Porientation_assignContext,i)


        def Classification(self):
            return self.getToken(XplorMRParser.Classification, 0)

        def Simple_name(self):
            return self.getToken(XplorMRParser.Simple_name, 0)

        def ForceConstant(self):
            return self.getToken(XplorMRParser.ForceConstant, 0)

        def Real(self):
            return self.getToken(XplorMRParser.Real, 0)

        def Nrestraints(self):
            return self.getToken(XplorMRParser.Nrestraints, 0)

        def Integer(self):
            return self.getToken(XplorMRParser.Integer, 0)

        def Print(self):
            return self.getToken(XplorMRParser.Print, 0)

        def Threshold(self):
            return self.getToken(XplorMRParser.Threshold, 0)

        def Reset(self):
            return self.getToken(XplorMRParser.Reset, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_porientation_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPorientation_statement" ):
                listener.enterPorientation_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPorientation_statement" ):
                listener.exitPorientation_statement(self)




    def porientation_statement(self):

        localctx = XplorMRParser.Porientation_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 154, self.RULE_porientation_statement)
        self._la = 0 # Token type
        try:
            self.state = 1655
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [XplorMRParser.Assign, XplorMRParser.R_brace]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1642
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==XplorMRParser.Assign:
                    self.state = 1639
                    self.porientation_assign()
                    self.state = 1644
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass
            elif token in [XplorMRParser.Classification]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1645
                self.match(XplorMRParser.Classification)
                self.state = 1646
                self.match(XplorMRParser.Simple_name)
                pass
            elif token in [XplorMRParser.ForceConstant]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1647
                self.match(XplorMRParser.ForceConstant)
                self.state = 1648
                self.match(XplorMRParser.Real)
                pass
            elif token in [XplorMRParser.Nrestraints]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1649
                self.match(XplorMRParser.Nrestraints)
                self.state = 1650
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.Print]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1651
                self.match(XplorMRParser.Print)
                self.state = 1652
                self.match(XplorMRParser.Threshold)
                self.state = 1653
                self.match(XplorMRParser.Real)
                pass
            elif token in [XplorMRParser.Reset]:
                self.enterOuterAlt(localctx, 6)
                self.state = 1654
                self.match(XplorMRParser.Reset)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Porientation_assignContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Assign(self):
            return self.getToken(XplorMRParser.Assign, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.SelectionContext,i)


        def Real(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Real)
            else:
                return self.getToken(XplorMRParser.Real, i)

        def getRuleIndex(self):
            return XplorMRParser.RULE_porientation_assign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPorientation_assign" ):
                listener.enterPorientation_assign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPorientation_assign" ):
                listener.exitPorientation_assign(self)




    def porientation_assign(self):

        localctx = XplorMRParser.Porientation_assignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 156, self.RULE_porientation_assign)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1657
            self.match(XplorMRParser.Assign)
            self.state = 1658
            self.selection()
            self.state = 1659
            self.selection()
            self.state = 1660
            self.match(XplorMRParser.Real)
            self.state = 1661
            self.match(XplorMRParser.Real)
            self.state = 1662
            self.match(XplorMRParser.Real)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pccr_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def pccr_assign(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Pccr_assignContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Pccr_assignContext,i)


        def Classification(self):
            return self.getToken(XplorMRParser.Classification, 0)

        def Simple_name(self):
            return self.getToken(XplorMRParser.Simple_name, 0)

        def Weip(self):
            return self.getToken(XplorMRParser.Weip, 0)

        def Integer(self):
            return self.getToken(XplorMRParser.Integer, 0)

        def Coefficients(self):
            return self.getToken(XplorMRParser.Coefficients, 0)

        def Real(self):
            return self.getToken(XplorMRParser.Real, 0)

        def ForceConstant(self):
            return self.getToken(XplorMRParser.ForceConstant, 0)

        def Nrestraints(self):
            return self.getToken(XplorMRParser.Nrestraints, 0)

        def Print(self):
            return self.getToken(XplorMRParser.Print, 0)

        def Threshold(self):
            return self.getToken(XplorMRParser.Threshold, 0)

        def Reset(self):
            return self.getToken(XplorMRParser.Reset, 0)

        def Frun(self):
            return self.getToken(XplorMRParser.Frun, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_pccr_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPccr_statement" ):
                listener.enterPccr_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPccr_statement" ):
                listener.exitPccr_statement(self)




    def pccr_statement(self):

        localctx = XplorMRParser.Pccr_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 158, self.RULE_pccr_statement)
        self._la = 0 # Token type
        try:
            self.state = 1686
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [XplorMRParser.Assign, XplorMRParser.R_brace]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1667
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==XplorMRParser.Assign:
                    self.state = 1664
                    self.pccr_assign()
                    self.state = 1669
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass
            elif token in [XplorMRParser.Classification]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1670
                self.match(XplorMRParser.Classification)
                self.state = 1671
                self.match(XplorMRParser.Simple_name)
                pass
            elif token in [XplorMRParser.Weip]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1672
                self.match(XplorMRParser.Weip)
                self.state = 1673
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.Coefficients]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1674
                self.match(XplorMRParser.Coefficients)
                self.state = 1675
                self.match(XplorMRParser.Real)
                pass
            elif token in [XplorMRParser.ForceConstant]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1676
                self.match(XplorMRParser.ForceConstant)
                self.state = 1677
                self.match(XplorMRParser.Real)
                pass
            elif token in [XplorMRParser.Nrestraints]:
                self.enterOuterAlt(localctx, 6)
                self.state = 1678
                self.match(XplorMRParser.Nrestraints)
                self.state = 1679
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.Print]:
                self.enterOuterAlt(localctx, 7)
                self.state = 1680
                self.match(XplorMRParser.Print)
                self.state = 1681
                self.match(XplorMRParser.Threshold)
                self.state = 1682
                self.match(XplorMRParser.Real)
                pass
            elif token in [XplorMRParser.Reset]:
                self.enterOuterAlt(localctx, 8)
                self.state = 1683
                self.match(XplorMRParser.Reset)
                pass
            elif token in [XplorMRParser.Frun]:
                self.enterOuterAlt(localctx, 9)
                self.state = 1684
                self.match(XplorMRParser.Frun)
                self.state = 1685
                self.match(XplorMRParser.Integer)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pccr_assignContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Assign(self):
            return self.getToken(XplorMRParser.Assign, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.SelectionContext,i)


        def Real(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Real)
            else:
                return self.getToken(XplorMRParser.Real, i)

        def getRuleIndex(self):
            return XplorMRParser.RULE_pccr_assign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPccr_assign" ):
                listener.enterPccr_assign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPccr_assign" ):
                listener.exitPccr_assign(self)




    def pccr_assign(self):

        localctx = XplorMRParser.Pccr_assignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 160, self.RULE_pccr_assign)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1688
            self.match(XplorMRParser.Assign)
            self.state = 1689
            self.selection()
            self.state = 1690
            self.selection()
            self.state = 1691
            self.selection()
            self.state = 1692
            self.match(XplorMRParser.Real)
            self.state = 1693
            self.match(XplorMRParser.Real)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Hbond_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def hbond_assign(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Hbond_assignContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Hbond_assignContext,i)


        def Classification(self):
            return self.getToken(XplorMRParser.Classification, 0)

        def Simple_name(self):
            return self.getToken(XplorMRParser.Simple_name, 0)

        def ForceConstant(self):
            return self.getToken(XplorMRParser.ForceConstant, 0)

        def Real(self):
            return self.getToken(XplorMRParser.Real, 0)

        def Nrestraints(self):
            return self.getToken(XplorMRParser.Nrestraints, 0)

        def Integer(self):
            return self.getToken(XplorMRParser.Integer, 0)

        def Print(self):
            return self.getToken(XplorMRParser.Print, 0)

        def Threshold(self):
            return self.getToken(XplorMRParser.Threshold, 0)

        def Reset(self):
            return self.getToken(XplorMRParser.Reset, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_hbond_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHbond_statement" ):
                listener.enterHbond_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHbond_statement" ):
                listener.exitHbond_statement(self)




    def hbond_statement(self):

        localctx = XplorMRParser.Hbond_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 162, self.RULE_hbond_statement)
        self._la = 0 # Token type
        try:
            self.state = 1711
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [XplorMRParser.Assign, XplorMRParser.R_brace]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1698
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==XplorMRParser.Assign:
                    self.state = 1695
                    self.hbond_assign()
                    self.state = 1700
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass
            elif token in [XplorMRParser.Classification]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1701
                self.match(XplorMRParser.Classification)
                self.state = 1702
                self.match(XplorMRParser.Simple_name)
                pass
            elif token in [XplorMRParser.ForceConstant]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1703
                self.match(XplorMRParser.ForceConstant)
                self.state = 1704
                self.match(XplorMRParser.Real)
                pass
            elif token in [XplorMRParser.Nrestraints]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1705
                self.match(XplorMRParser.Nrestraints)
                self.state = 1706
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.Print]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1707
                self.match(XplorMRParser.Print)
                self.state = 1708
                self.match(XplorMRParser.Threshold)
                self.state = 1709
                self.match(XplorMRParser.Real)
                pass
            elif token in [XplorMRParser.Reset]:
                self.enterOuterAlt(localctx, 6)
                self.state = 1710
                self.match(XplorMRParser.Reset)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Hbond_assignContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Assign(self):
            return self.getToken(XplorMRParser.Assign, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.SelectionContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_hbond_assign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHbond_assign" ):
                listener.enterHbond_assign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHbond_assign" ):
                listener.exitHbond_assign(self)




    def hbond_assign(self):

        localctx = XplorMRParser.Hbond_assignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 164, self.RULE_hbond_assign)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1713
            self.match(XplorMRParser.Assign)
            self.state = 1714
            self.selection()
            self.state = 1715
            self.selection()
            self.state = 1716
            self.selection()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SelectionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def L_paren(self):
            return self.getToken(XplorMRParser.L_paren, 0)

        def selection_expression(self):
            return self.getTypedRuleContext(XplorMRParser.Selection_expressionContext,0)


        def R_paren(self):
            return self.getToken(XplorMRParser.R_paren, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_selection

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSelection" ):
                listener.enterSelection(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSelection" ):
                listener.exitSelection(self)




    def selection(self):

        localctx = XplorMRParser.SelectionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 166, self.RULE_selection)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1718
            self.match(XplorMRParser.L_paren)
            self.state = 1719
            self.selection_expression()
            self.state = 1720
            self.match(XplorMRParser.R_paren)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Selection_expressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def term(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.TermContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.TermContext,i)


        def Or_op(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Or_op)
            else:
                return self.getToken(XplorMRParser.Or_op, i)

        def getRuleIndex(self):
            return XplorMRParser.RULE_selection_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSelection_expression" ):
                listener.enterSelection_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSelection_expression" ):
                listener.exitSelection_expression(self)




    def selection_expression(self):

        localctx = XplorMRParser.Selection_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 168, self.RULE_selection_expression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1722
            self.term()
            self.state = 1727
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==XplorMRParser.Or_op:
                self.state = 1723
                self.match(XplorMRParser.Or_op)
                self.state = 1724
                self.term()
                self.state = 1729
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TermContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def factor(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.FactorContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.FactorContext,i)


        def And_op(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.And_op)
            else:
                return self.getToken(XplorMRParser.And_op, i)

        def getRuleIndex(self):
            return XplorMRParser.RULE_term

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTerm" ):
                listener.enterTerm(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTerm" ):
                listener.exitTerm(self)




    def term(self):

        localctx = XplorMRParser.TermContext(self, self._ctx, self.state)
        self.enterRule(localctx, 170, self.RULE_term)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1730
            self.factor(0)
            self.state = 1735
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==XplorMRParser.And_op:
                self.state = 1731
                self.match(XplorMRParser.And_op)
                self.state = 1732
                self.factor(0)
                self.state = 1737
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FactorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def L_paren(self):
            return self.getToken(XplorMRParser.L_paren, 0)

        def selection_expression(self):
            return self.getTypedRuleContext(XplorMRParser.Selection_expressionContext,0)


        def R_paren(self):
            return self.getToken(XplorMRParser.R_paren, 0)

        def All(self):
            return self.getToken(XplorMRParser.All, 0)

        def Atom(self):
            return self.getToken(XplorMRParser.Atom, 0)

        def Simple_names(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Simple_names)
            else:
                return self.getToken(XplorMRParser.Simple_names, i)

        def Simple_name(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Simple_name)
            else:
                return self.getToken(XplorMRParser.Simple_name, i)

        def Integers(self):
            return self.getToken(XplorMRParser.Integers, 0)

        def Integer(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Integer)
            else:
                return self.getToken(XplorMRParser.Integer, i)

        def Attribute(self):
            return self.getToken(XplorMRParser.Attribute, 0)

        def Attr_properties(self):
            return self.getToken(XplorMRParser.Attr_properties, 0)

        def Comparison_ops(self):
            return self.getToken(XplorMRParser.Comparison_ops, 0)

        def Real(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Real)
            else:
                return self.getToken(XplorMRParser.Real, i)

        def Abs(self):
            return self.getToken(XplorMRParser.Abs, 0)

        def BondedTo(self):
            return self.getToken(XplorMRParser.BondedTo, 0)

        def factor(self):
            return self.getTypedRuleContext(XplorMRParser.FactorContext,0)


        def ByGroup(self):
            return self.getToken(XplorMRParser.ByGroup, 0)

        def ByRes(self):
            return self.getToken(XplorMRParser.ByRes, 0)

        def Chemical(self):
            return self.getToken(XplorMRParser.Chemical, 0)

        def Colon(self):
            return self.getToken(XplorMRParser.Colon, 0)

        def Hydrogen(self):
            return self.getToken(XplorMRParser.Hydrogen, 0)

        def Id(self):
            return self.getToken(XplorMRParser.Id, 0)

        def Known(self):
            return self.getToken(XplorMRParser.Known, 0)

        def Name(self):
            return self.getToken(XplorMRParser.Name, 0)

        def Not_op(self):
            return self.getToken(XplorMRParser.Not_op, 0)

        def Point(self):
            return self.getToken(XplorMRParser.Point, 0)

        def Cut(self):
            return self.getToken(XplorMRParser.Cut, 0)

        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Comma)
            else:
                return self.getToken(XplorMRParser.Comma, i)

        def Tail(self):
            return self.getToken(XplorMRParser.Tail, 0)

        def Equ_op(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Equ_op)
            else:
                return self.getToken(XplorMRParser.Equ_op, i)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.SelectionContext,i)


        def Head(self):
            return self.getToken(XplorMRParser.Head, 0)

        def Previous(self):
            return self.getToken(XplorMRParser.Previous, 0)

        def Pseudo(self):
            return self.getToken(XplorMRParser.Pseudo, 0)

        def Residue(self):
            return self.getToken(XplorMRParser.Residue, 0)

        def Resname(self):
            return self.getToken(XplorMRParser.Resname, 0)

        def SegIdentifier(self):
            return self.getToken(XplorMRParser.SegIdentifier, 0)

        def Double_quote_string(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Double_quote_string)
            else:
                return self.getToken(XplorMRParser.Double_quote_string, i)

        def Store_1(self):
            return self.getToken(XplorMRParser.Store_1, 0)

        def Store_2(self):
            return self.getToken(XplorMRParser.Store_2, 0)

        def Store_3(self):
            return self.getToken(XplorMRParser.Store_3, 0)

        def Store_4(self):
            return self.getToken(XplorMRParser.Store_4, 0)

        def Store_5(self):
            return self.getToken(XplorMRParser.Store_5, 0)

        def Store_6(self):
            return self.getToken(XplorMRParser.Store_6, 0)

        def Store_7(self):
            return self.getToken(XplorMRParser.Store_7, 0)

        def Store_8(self):
            return self.getToken(XplorMRParser.Store_8, 0)

        def Store_9(self):
            return self.getToken(XplorMRParser.Store_9, 0)

        def Tag(self):
            return self.getToken(XplorMRParser.Tag, 0)

        def Around(self):
            return self.getToken(XplorMRParser.Around, 0)

        def Saround(self):
            return self.getToken(XplorMRParser.Saround, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_factor

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFactor" ):
                listener.enterFactor(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFactor" ):
                listener.exitFactor(self)



    def factor(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = XplorMRParser.FactorContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 172
        self.enterRecursionRule(localctx, 172, self.RULE_factor, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1860
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,142,self._ctx)
            if la_ == 1:
                self.state = 1739
                self.match(XplorMRParser.L_paren)
                self.state = 1740
                self.selection_expression()
                self.state = 1741
                self.match(XplorMRParser.R_paren)
                pass

            elif la_ == 2:
                self.state = 1743
                self.match(XplorMRParser.All)
                pass

            elif la_ == 3:
                self.state = 1744
                self.match(XplorMRParser.Atom)
                self.state = 1745
                _la = self._input.LA(1)
                if not(_la==XplorMRParser.Simple_name or _la==XplorMRParser.Simple_names):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1746
                _la = self._input.LA(1)
                if not(_la==XplorMRParser.Integer or _la==XplorMRParser.Integers):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1747
                _la = self._input.LA(1)
                if not(_la==XplorMRParser.Simple_name or _la==XplorMRParser.Simple_names):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass

            elif la_ == 4:
                self.state = 1748
                self.match(XplorMRParser.Attribute)
                self.state = 1750
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Abs:
                    self.state = 1749
                    self.match(XplorMRParser.Abs)


                self.state = 1752
                self.match(XplorMRParser.Attr_properties)
                self.state = 1753
                self.match(XplorMRParser.Comparison_ops)
                self.state = 1754
                self.match(XplorMRParser.Real)
                pass

            elif la_ == 5:
                self.state = 1755
                self.match(XplorMRParser.BondedTo)
                self.state = 1756
                self.factor(27)
                pass

            elif la_ == 6:
                self.state = 1757
                self.match(XplorMRParser.ByGroup)
                self.state = 1758
                self.factor(26)
                pass

            elif la_ == 7:
                self.state = 1759
                self.match(XplorMRParser.ByRes)
                self.state = 1760
                self.factor(25)
                pass

            elif la_ == 8:
                self.state = 1761
                self.match(XplorMRParser.Chemical)
                self.state = 1768
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [XplorMRParser.Simple_names]:
                    self.state = 1762
                    self.match(XplorMRParser.Simple_names)
                    pass
                elif token in [XplorMRParser.Simple_name]:
                    self.state = 1763
                    self.match(XplorMRParser.Simple_name)
                    self.state = 1766
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,127,self._ctx)
                    if la_ == 1:
                        self.state = 1764
                        self.match(XplorMRParser.Colon)
                        self.state = 1765
                        self.match(XplorMRParser.Simple_name)


                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 9:
                self.state = 1770
                self.match(XplorMRParser.Hydrogen)
                pass

            elif la_ == 10:
                self.state = 1771
                self.match(XplorMRParser.Id)
                self.state = 1772
                self.match(XplorMRParser.Integer)
                pass

            elif la_ == 11:
                self.state = 1773
                self.match(XplorMRParser.Known)
                pass

            elif la_ == 12:
                self.state = 1774
                self.match(XplorMRParser.Name)
                self.state = 1781
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [XplorMRParser.Simple_names]:
                    self.state = 1775
                    self.match(XplorMRParser.Simple_names)
                    pass
                elif token in [XplorMRParser.Simple_name]:
                    self.state = 1776
                    self.match(XplorMRParser.Simple_name)
                    self.state = 1779
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,129,self._ctx)
                    if la_ == 1:
                        self.state = 1777
                        self.match(XplorMRParser.Colon)
                        self.state = 1778
                        self.match(XplorMRParser.Simple_name)


                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 13:
                self.state = 1783
                self.match(XplorMRParser.Not_op)
                self.state = 1784
                self.factor(19)
                pass

            elif la_ == 14:
                self.state = 1785
                self.match(XplorMRParser.Point)
                self.state = 1786
                self.match(XplorMRParser.L_paren)
                self.state = 1787
                self.match(XplorMRParser.Real)
                self.state = 1789
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Comma:
                    self.state = 1788
                    self.match(XplorMRParser.Comma)


                self.state = 1791
                self.match(XplorMRParser.Real)
                self.state = 1793
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Comma:
                    self.state = 1792
                    self.match(XplorMRParser.Comma)


                self.state = 1795
                self.match(XplorMRParser.Real)
                self.state = 1796
                self.match(XplorMRParser.R_paren)
                self.state = 1797
                self.match(XplorMRParser.Cut)
                self.state = 1798
                self.match(XplorMRParser.Real)
                pass

            elif la_ == 15:
                self.state = 1799
                self.match(XplorMRParser.Point)
                self.state = 1800
                self.match(XplorMRParser.L_paren)
                self.state = 1801
                self.match(XplorMRParser.Tail)
                self.state = 1802
                self.match(XplorMRParser.Equ_op)
                self.state = 1803
                self.selection()
                self.state = 1805
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Comma:
                    self.state = 1804
                    self.match(XplorMRParser.Comma)


                self.state = 1810
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Head:
                    self.state = 1807
                    self.match(XplorMRParser.Head)
                    self.state = 1808
                    self.match(XplorMRParser.Equ_op)
                    self.state = 1809
                    self.selection()


                self.state = 1812
                self.match(XplorMRParser.R_paren)
                self.state = 1813
                self.match(XplorMRParser.Cut)
                self.state = 1814
                self.match(XplorMRParser.Real)
                pass

            elif la_ == 16:
                self.state = 1816
                self.match(XplorMRParser.Previous)
                pass

            elif la_ == 17:
                self.state = 1817
                self.match(XplorMRParser.Pseudo)
                pass

            elif la_ == 18:
                self.state = 1818
                self.match(XplorMRParser.Residue)
                self.state = 1825
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [XplorMRParser.Integers]:
                    self.state = 1819
                    self.match(XplorMRParser.Integers)
                    pass
                elif token in [XplorMRParser.Integer]:
                    self.state = 1820
                    self.match(XplorMRParser.Integer)
                    self.state = 1823
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,135,self._ctx)
                    if la_ == 1:
                        self.state = 1821
                        self.match(XplorMRParser.Colon)
                        self.state = 1822
                        self.match(XplorMRParser.Integer)


                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 19:
                self.state = 1827
                self.match(XplorMRParser.Resname)
                self.state = 1834
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [XplorMRParser.Simple_names]:
                    self.state = 1828
                    self.match(XplorMRParser.Simple_names)
                    pass
                elif token in [XplorMRParser.Simple_name]:
                    self.state = 1829
                    self.match(XplorMRParser.Simple_name)
                    self.state = 1832
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,137,self._ctx)
                    if la_ == 1:
                        self.state = 1830
                        self.match(XplorMRParser.Colon)
                        self.state = 1831
                        self.match(XplorMRParser.Simple_name)


                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 20:
                self.state = 1836
                self.match(XplorMRParser.SegIdentifier)
                self.state = 1848
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [XplorMRParser.Simple_names]:
                    self.state = 1837
                    self.match(XplorMRParser.Simple_names)
                    pass
                elif token in [XplorMRParser.Simple_name]:
                    self.state = 1838
                    self.match(XplorMRParser.Simple_name)
                    self.state = 1841
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,139,self._ctx)
                    if la_ == 1:
                        self.state = 1839
                        self.match(XplorMRParser.Colon)
                        self.state = 1840
                        self.match(XplorMRParser.Simple_name)


                    pass
                elif token in [XplorMRParser.Double_quote_string]:
                    self.state = 1843
                    self.match(XplorMRParser.Double_quote_string)
                    self.state = 1846
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,140,self._ctx)
                    if la_ == 1:
                        self.state = 1844
                        self.match(XplorMRParser.Colon)
                        self.state = 1845
                        self.match(XplorMRParser.Double_quote_string)


                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 21:
                self.state = 1850
                self.match(XplorMRParser.Store_1)
                pass

            elif la_ == 22:
                self.state = 1851
                self.match(XplorMRParser.Store_2)
                pass

            elif la_ == 23:
                self.state = 1852
                self.match(XplorMRParser.Store_3)
                pass

            elif la_ == 24:
                self.state = 1853
                self.match(XplorMRParser.Store_4)
                pass

            elif la_ == 25:
                self.state = 1854
                self.match(XplorMRParser.Store_5)
                pass

            elif la_ == 26:
                self.state = 1855
                self.match(XplorMRParser.Store_6)
                pass

            elif la_ == 27:
                self.state = 1856
                self.match(XplorMRParser.Store_7)
                pass

            elif la_ == 28:
                self.state = 1857
                self.match(XplorMRParser.Store_8)
                pass

            elif la_ == 29:
                self.state = 1858
                self.match(XplorMRParser.Store_9)
                pass

            elif la_ == 30:
                self.state = 1859
                self.match(XplorMRParser.Tag)
                pass


            self._ctx.stop = self._input.LT(-1)
            self.state = 1870
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,144,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 1868
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,143,self._ctx)
                    if la_ == 1:
                        localctx = XplorMRParser.FactorContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_factor)
                        self.state = 1862
                        if not self.precpred(self._ctx, 30):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 30)")
                        self.state = 1863
                        self.match(XplorMRParser.Around)
                        self.state = 1864
                        self.match(XplorMRParser.Real)
                        pass

                    elif la_ == 2:
                        localctx = XplorMRParser.FactorContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_factor)
                        self.state = 1865
                        if not self.precpred(self._ctx, 12):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 12)")
                        self.state = 1866
                        self.match(XplorMRParser.Saround)
                        self.state = 1867
                        self.match(XplorMRParser.Real)
                        pass

             
                self.state = 1872
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,144,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx



    def sempred(self, localctx:RuleContext, ruleIndex:int, predIndex:int):
        if self._predicates == None:
            self._predicates = dict()
        self._predicates[86] = self.factor_sempred
        pred = self._predicates.get(ruleIndex, None)
        if pred is None:
            raise Exception("No predicate with index:" + str(ruleIndex))
        else:
            return pred(localctx, predIndex)

    def factor_sempred(self, localctx:FactorContext, predIndex:int):
            if predIndex == 0:
                return self.precpred(self._ctx, 30)
         

            if predIndex == 1:
                return self.precpred(self._ctx, 12)
         




