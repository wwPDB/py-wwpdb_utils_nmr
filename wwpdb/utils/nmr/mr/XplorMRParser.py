# Generated from XplorMRParser.g4 by ANTLR 4.10.1
# encoding: utf-8
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
	from typing import TextIO
else:
	from typing.io import TextIO

def serializedATN():
    return [
        4,1,298,3000,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,
        7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,
        13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,
        20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,
        26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,
        33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,
        39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,
        46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,52,7,
        52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,2,57,7,57,2,58,7,58,2,
        59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,2,64,7,64,2,65,7,
        65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,2,71,7,71,2,
        72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,7,77,2,78,7,
        78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,2,84,7,84,2,
        85,7,85,2,86,7,86,2,87,7,87,2,88,7,88,2,89,7,89,2,90,7,90,2,91,7,
        91,2,92,7,92,2,93,7,93,2,94,7,94,2,95,7,95,2,96,7,96,2,97,7,97,2,
        98,7,98,2,99,7,99,2,100,7,100,2,101,7,101,2,102,7,102,2,103,7,103,
        2,104,7,104,2,105,7,105,2,106,7,106,2,107,7,107,2,108,7,108,2,109,
        7,109,2,110,7,110,2,111,7,111,2,112,7,112,2,113,7,113,2,114,7,114,
        2,115,7,115,2,116,7,116,2,117,7,117,2,118,7,118,2,119,7,119,2,120,
        7,120,2,121,7,121,2,122,7,122,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,
        0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,
        0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,
        0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,5,0,302,
        8,0,10,0,12,0,305,9,0,1,0,1,0,1,1,1,1,5,1,311,8,1,10,1,12,1,314,
        9,1,1,1,1,1,1,2,3,2,319,8,2,1,2,1,2,5,2,323,8,2,10,2,12,2,326,9,
        2,1,2,1,2,1,3,1,3,5,3,332,8,3,10,3,12,3,335,9,3,1,3,1,3,1,3,5,3,
        340,8,3,10,3,12,3,343,9,3,1,3,1,3,1,3,5,3,348,8,3,10,3,12,3,351,
        9,3,1,3,1,3,1,3,5,3,356,8,3,10,3,12,3,359,9,3,1,3,1,3,1,3,5,3,364,
        8,3,10,3,12,3,367,9,3,1,3,3,3,370,8,3,1,4,3,4,373,8,4,1,4,1,4,5,
        4,377,8,4,10,4,12,4,380,9,4,1,4,1,4,1,5,3,5,385,8,5,1,5,1,5,5,5,
        389,8,5,10,5,12,5,392,9,5,1,5,1,5,1,6,1,6,5,6,398,8,6,10,6,12,6,
        401,9,6,1,6,1,6,1,7,1,7,5,7,407,8,7,10,7,12,7,410,9,7,1,7,1,7,1,
        8,1,8,5,8,416,8,8,10,8,12,8,419,9,8,1,8,1,8,1,9,1,9,5,9,425,8,9,
        10,9,12,9,428,9,9,1,9,1,9,1,10,1,10,5,10,434,8,10,10,10,12,10,437,
        9,10,1,10,1,10,1,11,1,11,5,11,443,8,11,10,11,12,11,446,9,11,1,11,
        1,11,1,12,1,12,5,12,452,8,12,10,12,12,12,455,9,12,1,12,1,12,1,13,
        1,13,5,13,461,8,13,10,13,12,13,464,9,13,1,13,1,13,1,14,1,14,5,14,
        470,8,14,10,14,12,14,473,9,14,1,14,1,14,1,15,1,15,5,15,479,8,15,
        10,15,12,15,482,9,15,1,15,1,15,1,16,1,16,5,16,488,8,16,10,16,12,
        16,491,9,16,1,16,1,16,1,17,1,17,5,17,497,8,17,10,17,12,17,500,9,
        17,1,17,1,17,1,18,1,18,5,18,506,8,18,10,18,12,18,509,9,18,1,18,1,
        18,1,19,1,19,5,19,515,8,19,10,19,12,19,518,9,19,1,19,1,19,1,20,1,
        20,5,20,524,8,20,10,20,12,20,527,9,20,1,20,1,20,1,21,1,21,5,21,533,
        8,21,10,21,12,21,536,9,21,1,21,1,21,1,22,1,22,5,22,542,8,22,10,22,
        12,22,545,9,22,1,22,1,22,1,23,1,23,5,23,551,8,23,10,23,12,23,554,
        9,23,1,23,1,23,1,24,1,24,5,24,560,8,24,10,24,12,24,563,9,24,1,24,
        1,24,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,
        1,25,3,25,580,8,25,1,25,1,25,1,25,3,25,585,8,25,1,25,1,25,1,25,1,
        25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,3,25,602,
        8,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,3,25,
        615,8,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,
        1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,3,25,639,
        8,25,1,25,3,25,642,8,25,1,26,1,26,1,26,1,26,1,26,3,26,649,8,26,1,
        26,3,26,652,8,26,1,26,5,26,655,8,26,10,26,12,26,658,9,26,1,26,1,
        26,3,26,662,8,26,1,26,1,26,1,26,3,26,667,8,26,1,26,3,26,670,8,26,
        1,26,3,26,673,8,26,5,26,675,8,26,10,26,12,26,678,9,26,1,27,1,27,
        3,27,682,8,27,1,27,1,27,1,27,3,27,687,8,27,1,27,1,27,1,27,1,27,1,
        27,3,27,694,8,27,1,28,1,28,3,28,698,8,28,1,28,1,28,1,28,3,28,703,
        8,28,1,28,1,28,1,28,3,28,708,8,28,1,28,1,28,1,28,3,28,713,8,28,1,
        28,1,28,1,28,3,28,718,8,28,1,28,1,28,1,28,3,28,723,8,28,1,28,1,28,
        1,28,3,28,728,8,28,1,28,3,28,731,8,28,1,29,1,29,1,29,1,29,1,29,3,
        29,738,8,29,1,29,1,29,1,29,1,29,3,29,744,8,29,1,29,3,29,747,8,29,
        1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,31,1,31,1,31,
        1,31,3,31,763,8,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,3,31,
        773,8,31,1,31,1,31,1,31,3,31,778,8,31,1,31,1,31,1,31,1,31,1,31,1,
        31,1,31,3,31,787,8,31,1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,
        32,3,32,798,8,32,1,32,3,32,801,8,32,1,33,1,33,1,33,3,33,806,8,33,
        1,33,1,33,1,33,1,33,1,33,3,33,813,8,33,1,33,1,33,1,33,1,33,1,33,
        1,33,1,33,1,33,1,33,1,33,1,33,1,33,3,33,827,8,33,1,33,1,33,1,33,
        3,33,832,8,33,1,33,1,33,1,33,1,33,1,33,1,33,1,33,3,33,841,8,33,1,
        34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,
        34,1,34,3,34,858,8,34,1,35,1,35,1,35,3,35,863,8,35,1,35,1,35,1,35,
        3,35,868,8,35,1,35,1,35,1,35,3,35,873,8,35,1,35,1,35,1,35,1,35,1,
        35,3,35,880,8,35,1,35,1,35,1,35,3,35,885,8,35,1,35,1,35,1,35,1,35,
        1,35,3,35,892,8,35,1,36,1,36,1,36,1,36,1,36,1,36,1,36,1,36,1,36,
        1,36,3,36,904,8,36,1,37,1,37,1,37,3,37,909,8,37,1,37,1,37,1,37,1,
        37,1,37,3,37,916,8,37,1,37,1,37,1,37,1,37,1,37,1,37,1,37,3,37,925,
        8,37,1,38,1,38,1,38,1,38,1,38,3,38,932,8,38,1,39,1,39,1,39,3,39,
        937,8,39,1,39,1,39,1,39,1,39,1,39,1,39,1,39,1,39,1,39,3,39,948,8,
        39,1,39,1,39,1,39,3,39,953,8,39,1,39,1,39,1,39,1,39,1,39,1,39,1,
        39,1,39,1,39,3,39,964,8,39,1,40,1,40,1,40,1,40,1,40,1,40,1,40,3,
        40,973,8,40,1,41,1,41,1,41,5,41,978,8,41,10,41,12,41,981,9,41,1,
        41,1,41,3,41,985,8,41,1,42,1,42,3,42,989,8,42,1,42,1,42,1,42,3,42,
        994,8,42,1,42,3,42,997,8,42,1,43,1,43,1,43,3,43,1002,8,43,1,43,1,
        43,1,43,3,43,1007,8,43,1,43,1,43,1,43,3,43,1012,8,43,1,43,1,43,3,
        43,1016,8,43,1,43,1,43,1,43,1,43,3,43,1022,8,43,1,43,1,43,3,43,1026,
        8,43,1,43,1,43,3,43,1030,8,43,1,43,3,43,1033,8,43,3,43,1035,8,43,
        1,43,1,43,3,43,1039,8,43,1,44,1,44,1,44,1,44,1,44,1,44,1,45,1,45,
        1,45,1,45,3,45,1051,8,45,1,45,1,45,1,45,1,45,1,45,1,45,3,45,1059,
        8,45,1,45,1,45,1,45,3,45,1064,8,45,1,45,1,45,1,45,1,45,1,45,1,45,
        1,45,3,45,1073,8,45,1,45,3,45,1076,8,45,1,45,1,45,1,45,1,45,1,45,
        1,45,3,45,1084,8,45,1,46,1,46,1,46,1,46,1,47,1,47,1,47,1,47,3,47,
        1094,8,47,1,47,1,47,1,47,1,47,1,47,1,47,1,47,1,47,1,47,3,47,1105,
        8,47,1,47,1,47,1,47,1,47,1,47,1,47,3,47,1113,8,47,1,47,1,47,3,47,
        1117,8,47,1,47,1,47,1,47,3,47,1122,8,47,1,47,1,47,1,47,1,47,1,47,
        1,47,1,47,1,47,1,47,3,47,1133,8,47,1,47,3,47,1136,8,47,1,47,3,47,
        1139,8,47,1,48,1,48,1,48,1,48,1,48,1,48,1,48,1,48,1,48,1,48,3,48,
        1151,8,48,1,48,1,48,1,48,1,48,1,48,3,48,1158,8,48,1,49,1,49,1,49,
        3,49,1163,8,49,1,49,1,49,1,49,1,49,1,49,1,49,1,49,1,49,1,49,1,49,
        3,49,1175,8,49,1,49,1,49,1,49,3,49,1180,8,49,1,49,1,49,1,49,1,49,
        1,49,1,49,1,49,1,49,1,49,1,49,1,49,1,49,1,49,3,49,1195,8,49,1,50,
        1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,51,1,51,1,51,1,51,1,51,
        1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,3,52,1222,
        8,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,3,52,1232,8,52,1,52,
        1,52,1,52,1,52,1,52,1,52,1,52,1,52,3,52,1242,8,52,1,52,3,52,1245,
        8,52,1,52,1,52,1,52,3,52,1250,8,52,1,53,1,53,1,53,3,53,1255,8,53,
        1,53,1,53,3,53,1259,8,53,1,54,1,54,1,54,1,54,1,55,1,55,1,55,1,55,
        1,55,1,55,3,55,1271,8,55,1,55,1,55,1,56,1,56,1,56,1,57,1,57,1,57,
        1,58,1,58,1,58,1,59,1,59,1,59,1,60,1,60,1,60,1,60,1,60,1,60,1,60,
        1,60,3,60,1295,8,60,1,61,1,61,1,61,1,62,1,62,1,62,3,62,1303,8,62,
        1,62,1,62,1,62,1,62,1,62,3,62,1310,8,62,1,62,1,62,1,62,1,62,1,62,
        1,62,1,62,1,62,1,62,3,62,1321,8,62,1,62,1,62,1,62,1,62,3,62,1327,
        8,62,1,62,1,62,1,62,1,62,3,62,1333,8,62,1,62,1,62,3,62,1337,8,62,
        1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,3,62,1348,8,62,1,62,
        1,62,1,62,1,62,3,62,1354,8,62,1,62,1,62,1,62,1,62,3,62,1360,8,62,
        1,62,1,62,1,62,1,62,1,62,1,62,3,62,1368,8,62,1,62,3,62,1371,8,62,
        1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,3,62,1381,8,62,1,62,1,62,
        1,62,1,62,3,62,1387,8,62,1,62,1,62,1,62,1,62,3,62,1393,8,62,1,62,
        1,62,1,62,3,62,1398,8,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,3,62,
        1407,8,62,1,62,3,62,1410,8,62,1,62,3,62,1413,8,62,1,62,1,62,3,62,
        1417,8,62,1,63,1,63,1,63,1,63,1,63,1,63,1,63,1,63,1,63,1,63,3,63,
        1429,8,63,1,63,1,63,1,63,1,63,1,63,3,63,1436,8,63,1,63,1,63,1,63,
        1,63,1,63,3,63,1443,8,63,1,64,1,64,1,64,1,64,3,64,1449,8,64,1,64,
        1,64,1,64,3,64,1454,8,64,1,65,1,65,1,65,1,65,1,65,1,66,1,66,1,66,
        3,66,1464,8,66,1,66,1,66,1,66,1,66,1,66,1,66,1,66,1,66,1,66,1,66,
        3,66,1476,8,66,1,66,1,66,1,66,3,66,1481,8,66,1,66,1,66,1,66,1,66,
        1,66,1,66,1,66,1,66,1,66,3,66,1492,8,66,1,67,1,67,1,67,1,67,1,67,
        1,67,1,67,1,67,1,67,3,67,1503,8,67,1,68,1,68,1,68,3,68,1508,8,68,
        1,68,1,68,1,68,1,68,1,68,1,68,1,68,3,68,1517,8,68,1,68,1,68,1,68,
        1,68,1,68,1,68,1,68,1,68,1,68,1,68,1,68,1,68,1,68,1,68,1,68,1,68,
        1,68,1,68,1,68,1,68,1,68,1,68,1,68,1,68,3,68,1543,8,68,1,68,1,68,
        1,68,1,68,1,68,1,68,1,68,3,68,1552,8,68,1,68,3,68,1555,8,68,1,68,
        1,68,1,68,1,68,1,68,1,68,1,68,1,68,1,68,1,68,1,68,1,68,1,68,1,68,
        1,68,1,68,1,68,3,68,1574,8,68,1,69,1,69,1,69,1,69,1,69,1,69,1,70,
        1,70,1,70,1,70,3,70,1586,8,70,1,70,1,70,1,70,3,70,1591,8,70,1,70,
        1,70,1,70,1,70,1,70,1,70,1,70,1,70,1,70,1,70,1,70,1,70,1,70,1,70,
        1,70,3,70,1608,8,70,1,70,1,70,1,70,3,70,1613,8,70,1,70,1,70,1,70,
        1,70,1,70,1,70,1,70,3,70,1622,8,70,1,71,1,71,1,71,1,71,1,71,1,71,
        1,71,1,71,1,71,1,71,3,71,1634,8,71,1,71,3,71,1637,8,71,1,72,1,72,
        1,72,3,72,1642,8,72,1,72,1,72,1,72,3,72,1647,8,72,1,72,1,72,1,72,
        1,72,1,72,1,72,1,72,1,72,1,72,1,72,1,72,1,72,1,72,1,72,3,72,1663,
        8,72,1,72,1,72,1,72,3,72,1668,8,72,1,72,1,72,1,72,1,72,1,72,1,72,
        1,72,3,72,1677,8,72,1,73,1,73,1,73,3,73,1682,8,73,1,73,1,73,1,73,
        1,73,1,73,1,73,1,73,1,73,1,73,1,73,1,73,1,73,3,73,1696,8,73,1,73,
        1,73,1,73,3,73,1701,8,73,1,73,1,73,1,73,1,73,1,73,1,73,1,73,3,73,
        1710,8,73,1,74,1,74,1,74,1,74,1,74,1,74,1,74,1,74,1,74,1,74,1,74,
        1,74,1,75,1,75,1,75,3,75,1727,8,75,1,75,1,75,1,75,1,75,1,75,1,75,
        1,75,1,75,1,75,1,75,1,75,3,75,1740,8,75,1,75,1,75,1,75,3,75,1745,
        8,75,1,75,1,75,1,75,1,75,1,75,1,75,1,75,1,75,1,75,3,75,1756,8,75,
        1,75,3,75,1759,8,75,1,75,1,75,1,75,1,75,1,75,1,75,3,75,1767,8,75,
        1,76,1,76,1,76,1,76,1,76,1,76,1,76,1,76,1,76,1,76,1,76,1,76,1,76,
        3,76,1782,8,76,1,77,1,77,1,77,1,77,3,77,1788,8,77,1,77,1,77,1,77,
        3,77,1793,8,77,1,77,1,77,1,77,1,77,3,77,1799,8,77,1,77,1,77,1,77,
        3,77,1804,8,77,1,77,1,77,1,77,1,77,3,77,1810,8,77,1,77,1,77,1,77,
        1,77,3,77,1816,8,77,1,77,1,77,1,77,1,77,3,77,1822,8,77,1,77,1,77,
        1,77,1,77,1,77,1,77,1,77,1,77,1,77,1,77,3,77,1834,8,77,1,77,3,77,
        1837,8,77,1,77,1,77,3,77,1841,8,77,1,78,1,78,1,78,1,78,1,78,3,78,
        1848,8,78,1,79,1,79,1,79,1,79,3,79,1854,8,79,1,79,1,79,1,79,1,79,
        1,79,1,79,1,79,1,79,1,79,3,79,1865,8,79,1,79,1,79,1,79,3,79,1870,
        8,79,1,79,1,79,1,79,1,79,1,79,1,79,1,79,3,79,1879,8,79,1,79,3,79,
        1882,8,79,1,79,1,79,1,79,1,79,1,79,1,79,1,79,1,79,1,79,1,79,1,79,
        1,79,1,79,1,79,1,79,3,79,1899,8,79,1,80,1,80,1,80,1,80,1,80,1,80,
        1,80,1,80,3,80,1909,8,80,1,80,3,80,1912,8,80,1,81,1,81,1,81,3,81,
        1917,8,81,1,81,1,81,1,81,1,81,1,81,1,81,1,81,1,81,1,81,3,81,1928,
        8,81,1,81,1,81,1,81,3,81,1933,8,81,1,81,1,81,1,81,1,81,1,81,1,81,
        1,81,1,81,1,81,1,81,1,81,1,81,1,81,1,81,3,81,1949,8,81,1,82,1,82,
        1,82,1,82,1,82,1,82,1,82,1,82,1,82,3,82,1960,8,82,1,83,1,83,1,83,
        3,83,1965,8,83,1,83,1,83,1,83,3,83,1970,8,83,1,83,1,83,1,83,3,83,
        1975,8,83,1,83,1,83,1,83,1,83,1,83,3,83,1982,8,83,1,84,1,84,1,84,
        1,84,1,84,1,84,1,84,1,85,1,85,1,85,3,85,1994,8,85,1,85,1,85,1,85,
        1,85,1,85,1,85,1,85,3,85,2003,8,85,1,85,1,85,1,85,3,85,2008,8,85,
        1,85,1,85,1,85,1,85,1,85,1,85,1,85,3,85,2017,8,85,1,86,1,86,1,86,
        1,86,1,86,1,86,3,86,2025,8,86,1,87,1,87,1,87,1,87,3,87,2031,8,87,
        1,87,1,87,1,87,3,87,2036,8,87,1,87,1,87,1,87,3,87,2041,8,87,1,87,
        1,87,1,87,1,87,1,87,3,87,2048,8,87,1,88,1,88,1,88,1,88,1,88,1,89,
        1,89,1,89,1,89,3,89,2059,8,89,1,89,1,89,1,89,3,89,2064,8,89,1,89,
        1,89,1,89,3,89,2069,8,89,1,89,1,89,1,89,3,89,2074,8,89,1,89,1,89,
        1,89,3,89,2079,8,89,1,89,1,89,1,89,3,89,2084,8,89,1,89,1,89,1,89,
        3,89,2089,8,89,1,89,1,89,1,89,3,89,2094,8,89,1,89,1,89,1,89,3,89,
        2099,8,89,1,89,1,89,1,89,3,89,2104,8,89,1,89,1,89,1,89,3,89,2109,
        8,89,1,89,1,89,1,89,3,89,2114,8,89,1,89,1,89,1,89,3,89,2119,8,89,
        1,89,3,89,2122,8,89,1,90,1,90,1,90,1,90,1,91,1,91,1,91,1,91,1,92,
        1,92,1,92,5,92,2135,8,92,10,92,12,92,2138,9,92,1,93,1,93,1,93,5,
        93,2143,8,93,10,93,12,93,2146,9,93,1,94,1,94,1,94,1,94,1,94,1,94,
        1,94,1,94,1,94,1,94,1,94,1,94,3,94,2160,8,94,1,94,1,94,1,94,1,94,
        1,94,1,94,1,94,1,94,1,94,1,94,1,94,1,94,1,94,1,94,3,94,2176,8,94,
        1,94,3,94,2179,8,94,1,94,1,94,1,94,1,94,1,94,1,94,1,94,1,94,1,94,
        3,94,2190,8,94,1,94,1,94,1,94,3,94,2195,8,94,1,94,3,94,2198,8,94,
        1,94,1,94,1,94,1,94,1,94,1,94,3,94,2206,8,94,1,94,1,94,3,94,2210,
        8,94,1,94,1,94,1,94,1,94,1,94,1,94,1,94,1,94,1,94,3,94,2221,8,94,
        1,94,1,94,3,94,2225,8,94,1,94,1,94,3,94,2229,8,94,1,94,3,94,2232,
        8,94,1,94,1,94,1,94,1,94,1,94,1,94,1,94,1,94,1,94,1,94,1,94,3,94,
        2245,8,94,1,94,3,94,2248,8,94,1,94,1,94,1,94,1,94,1,94,3,94,2255,
        8,94,1,94,3,94,2258,8,94,1,94,1,94,1,94,1,94,1,94,3,94,2265,8,94,
        1,94,1,94,1,94,3,94,2270,8,94,1,94,3,94,2273,8,94,1,94,1,94,1,94,
        1,94,1,94,1,94,1,94,1,94,1,94,1,94,1,94,1,94,3,94,2287,8,94,1,94,
        1,94,1,94,1,94,1,94,1,94,5,94,2295,8,94,10,94,12,94,2298,9,94,1,
        95,1,95,1,96,1,96,1,97,1,97,1,98,1,98,1,99,1,99,1,99,5,99,2311,8,
        99,10,99,12,99,2314,9,99,1,99,3,99,2317,8,99,3,99,2319,8,99,1,99,
        1,99,5,99,2323,8,99,10,99,12,99,2326,9,99,1,99,1,99,1,100,1,100,
        1,100,1,100,1,101,1,101,1,101,1,101,1,101,1,101,3,101,2340,8,101,
        1,102,1,102,1,102,3,102,2345,8,102,1,103,1,103,1,103,3,103,2350,
        8,103,1,104,1,104,1,104,1,104,1,104,1,104,1,104,3,104,2359,8,104,
        1,105,1,105,1,105,1,105,1,105,1,105,1,105,1,105,1,105,1,105,1,105,
        1,105,1,105,1,105,1,105,1,105,1,105,1,105,1,105,1,105,1,105,1,105,
        1,105,1,105,1,105,1,105,1,105,1,105,1,105,1,105,1,105,1,105,1,105,
        1,105,1,105,1,105,1,105,1,105,1,105,1,105,1,105,1,105,1,105,1,105,
        1,105,1,105,1,105,1,105,1,105,1,105,1,105,1,105,1,105,1,105,1,105,
        1,105,1,105,1,105,1,105,1,105,5,105,2421,8,105,10,105,12,105,2424,
        9,105,1,105,1,105,1,105,1,105,1,105,1,105,1,105,1,105,1,105,1,105,
        1,105,1,105,5,105,2438,8,105,10,105,12,105,2441,9,105,1,105,1,105,
        1,105,1,105,1,105,1,105,1,105,1,105,1,105,1,105,1,105,1,105,1,105,
        1,105,1,105,1,105,1,105,1,105,1,105,1,105,1,105,1,105,1,105,1,105,
        1,105,1,105,1,105,1,105,1,105,1,105,1,105,1,105,1,105,1,105,1,105,
        1,105,1,105,3,105,2480,8,105,1,106,1,106,1,106,1,106,1,106,1,107,
        1,107,1,107,1,107,1,107,1,107,1,108,1,108,1,108,3,108,2496,8,108,
        1,109,1,109,3,109,2500,8,109,1,109,1,109,1,109,1,109,1,109,1,109,
        1,109,1,109,1,109,1,109,3,109,2512,8,109,1,109,1,109,1,110,1,110,
        5,110,2518,8,110,10,110,12,110,2521,9,110,1,110,1,110,1,111,1,111,
        1,111,1,111,1,111,1,111,1,111,1,111,1,111,1,111,3,111,2535,8,111,
        1,111,1,111,1,111,1,111,1,111,1,111,1,111,1,111,1,111,1,111,1,111,
        1,111,1,111,3,111,2550,8,111,1,111,1,111,1,111,1,111,1,111,1,111,
        1,111,1,111,1,111,1,111,1,111,1,111,1,111,1,111,1,111,1,111,1,111,
        1,111,1,111,1,111,1,111,1,111,1,111,1,111,1,111,1,111,1,111,1,111,
        3,111,2580,8,111,1,112,1,112,1,112,1,112,1,112,5,112,2587,8,112,
        10,112,12,112,2590,9,112,1,112,5,112,2593,8,112,10,112,12,112,2596,
        9,112,1,112,5,112,2599,8,112,10,112,12,112,2602,9,112,3,112,2604,
        8,112,1,112,1,112,1,112,1,112,1,112,5,112,2611,8,112,10,112,12,112,
        2614,9,112,1,112,1,112,1,112,1,112,1,113,1,113,1,113,1,113,1,113,
        5,113,2625,8,113,10,113,12,113,2628,9,113,1,113,5,113,2631,8,113,
        10,113,12,113,2634,9,113,1,113,5,113,2637,8,113,10,113,12,113,2640,
        9,113,3,113,2642,8,113,1,113,1,113,1,113,1,113,1,113,5,113,2649,
        8,113,10,113,12,113,2652,9,113,1,113,1,113,1,113,1,113,1,114,1,114,
        1,114,1,114,1,114,5,114,2663,8,114,10,114,12,114,2666,9,114,1,114,
        5,114,2669,8,114,10,114,12,114,2672,9,114,1,114,5,114,2675,8,114,
        10,114,12,114,2678,9,114,3,114,2680,8,114,1,114,1,114,1,114,1,114,
        1,114,5,114,2687,8,114,10,114,12,114,2690,9,114,1,114,1,114,1,114,
        1,114,1,115,1,115,1,115,1,115,1,115,5,115,2701,8,115,10,115,12,115,
        2704,9,115,1,115,5,115,2707,8,115,10,115,12,115,2710,9,115,1,115,
        5,115,2713,8,115,10,115,12,115,2716,9,115,3,115,2718,8,115,1,115,
        1,115,1,115,1,115,1,115,5,115,2725,8,115,10,115,12,115,2728,9,115,
        1,115,1,115,1,115,1,115,1,116,1,116,1,116,1,116,1,116,5,116,2739,
        8,116,10,116,12,116,2742,9,116,1,116,5,116,2745,8,116,10,116,12,
        116,2748,9,116,1,116,5,116,2751,8,116,10,116,12,116,2754,9,116,3,
        116,2756,8,116,1,116,1,116,1,116,1,116,1,116,5,116,2763,8,116,10,
        116,12,116,2766,9,116,1,116,1,116,1,116,1,116,1,117,1,117,1,117,
        1,117,1,117,5,117,2777,8,117,10,117,12,117,2780,9,117,1,117,5,117,
        2783,8,117,10,117,12,117,2786,9,117,1,117,5,117,2789,8,117,10,117,
        12,117,2792,9,117,3,117,2794,8,117,1,117,1,117,1,117,1,117,1,117,
        5,117,2801,8,117,10,117,12,117,2804,9,117,1,117,1,117,1,117,1,117,
        1,118,1,118,1,118,1,118,1,118,5,118,2815,8,118,10,118,12,118,2818,
        9,118,1,118,5,118,2821,8,118,10,118,12,118,2824,9,118,1,118,5,118,
        2827,8,118,10,118,12,118,2830,9,118,3,118,2832,8,118,1,118,1,118,
        1,118,1,118,1,118,5,118,2839,8,118,10,118,12,118,2842,9,118,1,118,
        1,118,1,118,1,118,1,119,1,119,1,119,1,119,1,119,5,119,2853,8,119,
        10,119,12,119,2856,9,119,1,119,5,119,2859,8,119,10,119,12,119,2862,
        9,119,1,119,5,119,2865,8,119,10,119,12,119,2868,9,119,3,119,2870,
        8,119,1,119,1,119,1,119,1,119,1,119,5,119,2877,8,119,10,119,12,119,
        2880,9,119,1,119,1,119,1,119,1,119,1,120,1,120,1,120,1,120,1,120,
        5,120,2891,8,120,10,120,12,120,2894,9,120,1,120,5,120,2897,8,120,
        10,120,12,120,2900,9,120,1,120,5,120,2903,8,120,10,120,12,120,2906,
        9,120,3,120,2908,8,120,1,120,1,120,1,120,1,120,1,120,5,120,2915,
        8,120,10,120,12,120,2918,9,120,1,120,1,120,1,120,1,120,1,121,1,121,
        1,121,1,121,1,121,5,121,2929,8,121,10,121,12,121,2932,9,121,1,121,
        5,121,2935,8,121,10,121,12,121,2938,9,121,1,121,5,121,2941,8,121,
        10,121,12,121,2944,9,121,3,121,2946,8,121,1,121,1,121,1,121,1,121,
        1,121,5,121,2953,8,121,10,121,12,121,2956,9,121,1,121,1,121,1,121,
        1,121,1,122,1,122,1,122,1,122,1,122,5,122,2967,8,122,10,122,12,122,
        2970,9,122,1,122,5,122,2973,8,122,10,122,12,122,2976,9,122,1,122,
        5,122,2979,8,122,10,122,12,122,2982,9,122,3,122,2984,8,122,1,122,
        1,122,1,122,1,122,1,122,5,122,2991,8,122,10,122,12,122,2994,9,122,
        1,122,1,122,1,122,1,122,1,122,0,1,188,123,0,2,4,6,8,10,12,14,16,
        18,20,22,24,26,28,30,32,34,36,38,40,42,44,46,48,50,52,54,56,58,60,
        62,64,66,68,70,72,74,76,78,80,82,84,86,88,90,92,94,96,98,100,102,
        104,106,108,110,112,114,116,118,120,122,124,126,128,130,132,134,
        136,138,140,142,144,146,148,150,152,154,156,158,160,162,164,166,
        168,170,172,174,176,178,180,182,184,186,188,190,192,194,196,198,
        200,202,204,206,208,210,212,214,216,218,220,222,224,226,228,230,
        232,234,236,238,240,242,244,0,13,1,0,42,43,2,0,37,37,94,94,1,0,195,
        196,2,0,188,188,197,197,3,0,188,188,190,190,209,209,2,0,188,188,
        190,190,1,0,163,164,1,0,240,244,1,0,279,285,4,0,37,37,94,94,173,
        174,195,195,2,0,169,169,188,188,2,0,37,37,174,174,2,0,19,19,177,
        177,3613,0,303,1,0,0,0,2,308,1,0,0,0,4,318,1,0,0,0,6,369,1,0,0,0,
        8,372,1,0,0,0,10,384,1,0,0,0,12,395,1,0,0,0,14,404,1,0,0,0,16,413,
        1,0,0,0,18,422,1,0,0,0,20,431,1,0,0,0,22,440,1,0,0,0,24,449,1,0,
        0,0,26,458,1,0,0,0,28,467,1,0,0,0,30,476,1,0,0,0,32,485,1,0,0,0,
        34,494,1,0,0,0,36,503,1,0,0,0,38,512,1,0,0,0,40,521,1,0,0,0,42,530,
        1,0,0,0,44,539,1,0,0,0,46,548,1,0,0,0,48,557,1,0,0,0,50,641,1,0,
        0,0,52,643,1,0,0,0,54,693,1,0,0,0,56,730,1,0,0,0,58,746,1,0,0,0,
        60,748,1,0,0,0,62,786,1,0,0,0,64,788,1,0,0,0,66,840,1,0,0,0,68,842,
        1,0,0,0,70,891,1,0,0,0,72,893,1,0,0,0,74,924,1,0,0,0,76,926,1,0,
        0,0,78,963,1,0,0,0,80,965,1,0,0,0,82,984,1,0,0,0,84,996,1,0,0,0,
        86,1038,1,0,0,0,88,1040,1,0,0,0,90,1083,1,0,0,0,92,1085,1,0,0,0,
        94,1138,1,0,0,0,96,1140,1,0,0,0,98,1194,1,0,0,0,100,1196,1,0,0,0,
        102,1205,1,0,0,0,104,1249,1,0,0,0,106,1251,1,0,0,0,108,1260,1,0,
        0,0,110,1264,1,0,0,0,112,1274,1,0,0,0,114,1277,1,0,0,0,116,1280,
        1,0,0,0,118,1283,1,0,0,0,120,1286,1,0,0,0,122,1296,1,0,0,0,124,1416,
        1,0,0,0,126,1418,1,0,0,0,128,1453,1,0,0,0,130,1455,1,0,0,0,132,1491,
        1,0,0,0,134,1493,1,0,0,0,136,1573,1,0,0,0,138,1575,1,0,0,0,140,1621,
        1,0,0,0,142,1623,1,0,0,0,144,1676,1,0,0,0,146,1709,1,0,0,0,148,1711,
        1,0,0,0,150,1766,1,0,0,0,152,1768,1,0,0,0,154,1840,1,0,0,0,156,1842,
        1,0,0,0,158,1898,1,0,0,0,160,1900,1,0,0,0,162,1948,1,0,0,0,164,1950,
        1,0,0,0,166,1981,1,0,0,0,168,1983,1,0,0,0,170,2016,1,0,0,0,172,2018,
        1,0,0,0,174,2047,1,0,0,0,176,2049,1,0,0,0,178,2121,1,0,0,0,180,2123,
        1,0,0,0,182,2127,1,0,0,0,184,2131,1,0,0,0,186,2139,1,0,0,0,188,2286,
        1,0,0,0,190,2299,1,0,0,0,192,2301,1,0,0,0,194,2303,1,0,0,0,196,2305,
        1,0,0,0,198,2307,1,0,0,0,200,2329,1,0,0,0,202,2339,1,0,0,0,204,2341,
        1,0,0,0,206,2346,1,0,0,0,208,2358,1,0,0,0,210,2479,1,0,0,0,212,2481,
        1,0,0,0,214,2486,1,0,0,0,216,2492,1,0,0,0,218,2497,1,0,0,0,220,2515,
        1,0,0,0,222,2579,1,0,0,0,224,2581,1,0,0,0,226,2619,1,0,0,0,228,2657,
        1,0,0,0,230,2695,1,0,0,0,232,2733,1,0,0,0,234,2771,1,0,0,0,236,2809,
        1,0,0,0,238,2847,1,0,0,0,240,2885,1,0,0,0,242,2923,1,0,0,0,244,2961,
        1,0,0,0,246,302,3,2,1,0,247,302,3,4,2,0,248,302,3,6,3,0,249,302,
        3,8,4,0,250,302,3,10,5,0,251,302,3,12,6,0,252,302,3,14,7,0,253,302,
        3,16,8,0,254,302,3,18,9,0,255,302,3,20,10,0,256,302,3,22,11,0,257,
        302,3,24,12,0,258,302,3,26,13,0,259,302,3,28,14,0,260,302,3,30,15,
        0,261,302,3,32,16,0,262,302,3,34,17,0,263,302,3,36,18,0,264,302,
        3,38,19,0,265,302,3,40,20,0,266,302,3,42,21,0,267,302,3,44,22,0,
        268,302,3,46,23,0,269,302,3,48,24,0,270,302,3,198,99,0,271,302,3,
        200,100,0,272,302,3,214,107,0,273,302,3,218,109,0,274,302,3,220,
        110,0,275,302,3,224,112,0,276,302,3,226,113,0,277,302,3,228,114,
        0,278,302,3,242,121,0,279,302,3,244,122,0,280,302,3,232,116,0,281,
        302,3,230,115,0,282,302,3,234,117,0,283,302,3,236,118,0,284,302,
        3,238,119,0,285,302,3,240,120,0,286,302,3,52,26,0,287,302,3,60,30,
        0,288,302,3,64,32,0,289,302,3,82,41,0,290,302,3,88,44,0,291,302,
        3,176,88,0,292,302,3,180,90,0,293,302,3,96,48,0,294,302,3,92,46,
        0,295,302,3,130,65,0,296,302,3,142,71,0,297,302,3,156,78,0,298,302,
        3,160,80,0,299,302,3,106,53,0,300,302,3,222,111,0,301,246,1,0,0,
        0,301,247,1,0,0,0,301,248,1,0,0,0,301,249,1,0,0,0,301,250,1,0,0,
        0,301,251,1,0,0,0,301,252,1,0,0,0,301,253,1,0,0,0,301,254,1,0,0,
        0,301,255,1,0,0,0,301,256,1,0,0,0,301,257,1,0,0,0,301,258,1,0,0,
        0,301,259,1,0,0,0,301,260,1,0,0,0,301,261,1,0,0,0,301,262,1,0,0,
        0,301,263,1,0,0,0,301,264,1,0,0,0,301,265,1,0,0,0,301,266,1,0,0,
        0,301,267,1,0,0,0,301,268,1,0,0,0,301,269,1,0,0,0,301,270,1,0,0,
        0,301,271,1,0,0,0,301,272,1,0,0,0,301,273,1,0,0,0,301,274,1,0,0,
        0,301,275,1,0,0,0,301,276,1,0,0,0,301,277,1,0,0,0,301,278,1,0,0,
        0,301,279,1,0,0,0,301,280,1,0,0,0,301,281,1,0,0,0,301,282,1,0,0,
        0,301,283,1,0,0,0,301,284,1,0,0,0,301,285,1,0,0,0,301,286,1,0,0,
        0,301,287,1,0,0,0,301,288,1,0,0,0,301,289,1,0,0,0,301,290,1,0,0,
        0,301,291,1,0,0,0,301,292,1,0,0,0,301,293,1,0,0,0,301,294,1,0,0,
        0,301,295,1,0,0,0,301,296,1,0,0,0,301,297,1,0,0,0,301,298,1,0,0,
        0,301,299,1,0,0,0,301,300,1,0,0,0,302,305,1,0,0,0,303,301,1,0,0,
        0,303,304,1,0,0,0,304,306,1,0,0,0,305,303,1,0,0,0,306,307,5,0,0,
        1,307,1,1,0,0,0,308,312,5,3,0,0,309,311,3,50,25,0,310,309,1,0,0,
        0,311,314,1,0,0,0,312,310,1,0,0,0,312,313,1,0,0,0,313,315,1,0,0,
        0,314,312,1,0,0,0,315,316,5,2,0,0,316,3,1,0,0,0,317,319,5,36,0,0,
        318,317,1,0,0,0,318,319,1,0,0,0,319,320,1,0,0,0,320,324,5,37,0,0,
        321,323,3,58,29,0,322,321,1,0,0,0,323,326,1,0,0,0,324,322,1,0,0,
        0,324,325,1,0,0,0,325,327,1,0,0,0,326,324,1,0,0,0,327,328,5,2,0,
        0,328,5,1,0,0,0,329,333,5,39,0,0,330,332,3,62,31,0,331,330,1,0,0,
        0,332,335,1,0,0,0,333,331,1,0,0,0,333,334,1,0,0,0,334,336,1,0,0,
        0,335,333,1,0,0,0,336,370,5,2,0,0,337,341,7,0,0,0,338,340,3,66,33,
        0,339,338,1,0,0,0,340,343,1,0,0,0,341,339,1,0,0,0,341,342,1,0,0,
        0,342,344,1,0,0,0,343,341,1,0,0,0,344,370,5,2,0,0,345,349,5,46,0,
        0,346,348,3,70,35,0,347,346,1,0,0,0,348,351,1,0,0,0,349,347,1,0,
        0,0,349,350,1,0,0,0,350,352,1,0,0,0,351,349,1,0,0,0,352,370,5,2,
        0,0,353,357,5,49,0,0,354,356,3,74,37,0,355,354,1,0,0,0,356,359,1,
        0,0,0,357,355,1,0,0,0,357,358,1,0,0,0,358,360,1,0,0,0,359,357,1,
        0,0,0,360,370,5,2,0,0,361,365,5,50,0,0,362,364,3,78,39,0,363,362,
        1,0,0,0,364,367,1,0,0,0,365,363,1,0,0,0,365,366,1,0,0,0,366,368,
        1,0,0,0,367,365,1,0,0,0,368,370,5,2,0,0,369,329,1,0,0,0,369,337,
        1,0,0,0,369,345,1,0,0,0,369,353,1,0,0,0,369,361,1,0,0,0,370,7,1,
        0,0,0,371,373,5,36,0,0,372,371,1,0,0,0,372,373,1,0,0,0,373,374,1,
        0,0,0,374,378,5,51,0,0,375,377,3,82,41,0,376,375,1,0,0,0,377,380,
        1,0,0,0,378,376,1,0,0,0,378,379,1,0,0,0,379,381,1,0,0,0,380,378,
        1,0,0,0,381,382,5,2,0,0,382,9,1,0,0,0,383,385,5,36,0,0,384,383,1,
        0,0,0,384,385,1,0,0,0,385,386,1,0,0,0,386,390,5,56,0,0,387,389,3,
        86,43,0,388,387,1,0,0,0,389,392,1,0,0,0,390,388,1,0,0,0,390,391,
        1,0,0,0,391,393,1,0,0,0,392,390,1,0,0,0,393,394,5,2,0,0,394,11,1,
        0,0,0,395,399,5,59,0,0,396,398,3,90,45,0,397,396,1,0,0,0,398,401,
        1,0,0,0,399,397,1,0,0,0,399,400,1,0,0,0,400,402,1,0,0,0,401,399,
        1,0,0,0,402,403,5,2,0,0,403,13,1,0,0,0,404,408,5,63,0,0,405,407,
        3,94,47,0,406,405,1,0,0,0,407,410,1,0,0,0,408,406,1,0,0,0,408,409,
        1,0,0,0,409,411,1,0,0,0,410,408,1,0,0,0,411,412,5,2,0,0,412,15,1,
        0,0,0,413,417,5,65,0,0,414,416,3,98,49,0,415,414,1,0,0,0,416,419,
        1,0,0,0,417,415,1,0,0,0,417,418,1,0,0,0,418,420,1,0,0,0,419,417,
        1,0,0,0,420,421,5,2,0,0,421,17,1,0,0,0,422,426,5,69,0,0,423,425,
        3,104,52,0,424,423,1,0,0,0,425,428,1,0,0,0,426,424,1,0,0,0,426,427,
        1,0,0,0,427,429,1,0,0,0,428,426,1,0,0,0,429,430,5,2,0,0,430,19,1,
        0,0,0,431,435,5,77,0,0,432,434,3,124,62,0,433,432,1,0,0,0,434,437,
        1,0,0,0,435,433,1,0,0,0,435,436,1,0,0,0,436,438,1,0,0,0,437,435,
        1,0,0,0,438,439,5,2,0,0,439,21,1,0,0,0,440,444,5,84,0,0,441,443,
        3,128,64,0,442,441,1,0,0,0,443,446,1,0,0,0,444,442,1,0,0,0,444,445,
        1,0,0,0,445,447,1,0,0,0,446,444,1,0,0,0,447,448,5,2,0,0,448,23,1,
        0,0,0,449,453,5,85,0,0,450,452,3,132,66,0,451,450,1,0,0,0,452,455,
        1,0,0,0,453,451,1,0,0,0,453,454,1,0,0,0,454,456,1,0,0,0,455,453,
        1,0,0,0,456,457,5,2,0,0,457,25,1,0,0,0,458,462,5,86,0,0,459,461,
        3,136,68,0,460,459,1,0,0,0,461,464,1,0,0,0,462,460,1,0,0,0,462,463,
        1,0,0,0,463,465,1,0,0,0,464,462,1,0,0,0,465,466,5,2,0,0,466,27,1,
        0,0,0,467,471,5,90,0,0,468,470,3,140,70,0,469,468,1,0,0,0,470,473,
        1,0,0,0,471,469,1,0,0,0,471,472,1,0,0,0,472,474,1,0,0,0,473,471,
        1,0,0,0,474,475,5,2,0,0,475,29,1,0,0,0,476,480,5,92,0,0,477,479,
        3,144,72,0,478,477,1,0,0,0,479,482,1,0,0,0,480,478,1,0,0,0,480,481,
        1,0,0,0,481,483,1,0,0,0,482,480,1,0,0,0,483,484,5,2,0,0,484,31,1,
        0,0,0,485,489,5,93,0,0,486,488,3,146,73,0,487,486,1,0,0,0,488,491,
        1,0,0,0,489,487,1,0,0,0,489,490,1,0,0,0,490,492,1,0,0,0,491,489,
        1,0,0,0,492,493,5,2,0,0,493,33,1,0,0,0,494,498,5,94,0,0,495,497,
        3,150,75,0,496,495,1,0,0,0,497,500,1,0,0,0,498,496,1,0,0,0,498,499,
        1,0,0,0,499,501,1,0,0,0,500,498,1,0,0,0,501,502,5,2,0,0,502,35,1,
        0,0,0,503,507,5,96,0,0,504,506,3,154,77,0,505,504,1,0,0,0,506,509,
        1,0,0,0,507,505,1,0,0,0,507,508,1,0,0,0,508,510,1,0,0,0,509,507,
        1,0,0,0,510,511,5,2,0,0,511,37,1,0,0,0,512,516,5,101,0,0,513,515,
        3,158,79,0,514,513,1,0,0,0,515,518,1,0,0,0,516,514,1,0,0,0,516,517,
        1,0,0,0,517,519,1,0,0,0,518,516,1,0,0,0,519,520,5,2,0,0,520,39,1,
        0,0,0,521,525,5,112,0,0,522,524,3,162,81,0,523,522,1,0,0,0,524,527,
        1,0,0,0,525,523,1,0,0,0,525,526,1,0,0,0,526,528,1,0,0,0,527,525,
        1,0,0,0,528,529,5,2,0,0,529,41,1,0,0,0,530,534,5,113,0,0,531,533,
        3,166,83,0,532,531,1,0,0,0,533,536,1,0,0,0,534,532,1,0,0,0,534,535,
        1,0,0,0,535,537,1,0,0,0,536,534,1,0,0,0,537,538,5,2,0,0,538,43,1,
        0,0,0,539,543,5,114,0,0,540,542,3,170,85,0,541,540,1,0,0,0,542,545,
        1,0,0,0,543,541,1,0,0,0,543,544,1,0,0,0,544,546,1,0,0,0,545,543,
        1,0,0,0,546,547,5,2,0,0,547,45,1,0,0,0,548,552,5,198,0,0,549,551,
        3,174,87,0,550,549,1,0,0,0,551,554,1,0,0,0,552,550,1,0,0,0,552,553,
        1,0,0,0,553,555,1,0,0,0,554,552,1,0,0,0,555,556,5,2,0,0,556,47,1,
        0,0,0,557,561,5,199,0,0,558,560,3,178,89,0,559,558,1,0,0,0,560,563,
        1,0,0,0,561,559,1,0,0,0,561,562,1,0,0,0,562,564,1,0,0,0,563,561,
        1,0,0,0,564,565,5,2,0,0,565,49,1,0,0,0,566,642,3,52,26,0,567,642,
        3,224,112,0,568,569,5,5,0,0,569,570,5,195,0,0,570,642,3,194,97,0,
        571,572,5,6,0,0,572,573,5,220,0,0,573,642,5,219,0,0,574,575,5,7,
        0,0,575,576,5,195,0,0,576,642,3,194,97,0,577,579,5,8,0,0,578,580,
        5,203,0,0,579,578,1,0,0,0,579,580,1,0,0,0,580,581,1,0,0,0,581,642,
        3,194,97,0,582,584,5,9,0,0,583,585,5,203,0,0,584,583,1,0,0,0,584,
        585,1,0,0,0,585,586,1,0,0,0,586,642,5,195,0,0,587,588,5,10,0,0,588,
        642,5,195,0,0,589,590,5,11,0,0,590,591,5,195,0,0,591,592,5,195,0,
        0,592,642,3,194,97,0,593,594,5,12,0,0,594,595,5,195,0,0,595,642,
        5,188,0,0,596,597,5,13,0,0,597,598,5,195,0,0,598,642,5,188,0,0,599,
        601,5,14,0,0,600,602,5,203,0,0,601,600,1,0,0,0,601,602,1,0,0,0,602,
        603,1,0,0,0,603,642,5,188,0,0,604,605,5,15,0,0,605,606,5,224,0,0,
        606,642,5,223,0,0,607,608,5,16,0,0,608,609,3,54,27,0,609,610,5,2,
        0,0,610,642,1,0,0,0,611,612,5,17,0,0,612,614,5,18,0,0,613,615,5,
        203,0,0,614,613,1,0,0,0,614,615,1,0,0,0,615,616,1,0,0,0,616,642,
        3,194,97,0,617,642,5,19,0,0,618,619,5,20,0,0,619,620,5,195,0,0,620,
        642,3,194,97,0,621,622,5,21,0,0,622,623,5,195,0,0,623,642,3,194,
        97,0,624,625,5,22,0,0,625,626,5,195,0,0,626,642,3,194,97,0,627,628,
        5,23,0,0,628,629,5,195,0,0,629,642,3,194,97,0,630,631,5,24,0,0,631,
        632,5,195,0,0,632,642,3,194,97,0,633,634,5,25,0,0,634,635,5,195,
        0,0,635,642,3,194,97,0,636,638,5,26,0,0,637,639,5,203,0,0,638,637,
        1,0,0,0,638,639,1,0,0,0,639,640,1,0,0,0,640,642,3,194,97,0,641,566,
        1,0,0,0,641,567,1,0,0,0,641,568,1,0,0,0,641,571,1,0,0,0,641,574,
        1,0,0,0,641,577,1,0,0,0,641,582,1,0,0,0,641,587,1,0,0,0,641,589,
        1,0,0,0,641,593,1,0,0,0,641,596,1,0,0,0,641,599,1,0,0,0,641,604,
        1,0,0,0,641,607,1,0,0,0,641,611,1,0,0,0,641,617,1,0,0,0,641,618,
        1,0,0,0,641,621,1,0,0,0,641,624,1,0,0,0,641,627,1,0,0,0,641,630,
        1,0,0,0,641,633,1,0,0,0,641,636,1,0,0,0,642,51,1,0,0,0,643,644,5,
        4,0,0,644,645,3,182,91,0,645,646,3,182,91,0,646,648,3,190,95,0,647,
        649,3,190,95,0,648,647,1,0,0,0,648,649,1,0,0,0,649,651,1,0,0,0,650,
        652,3,190,95,0,651,650,1,0,0,0,651,652,1,0,0,0,652,656,1,0,0,0,653,
        655,3,56,28,0,654,653,1,0,0,0,655,658,1,0,0,0,656,654,1,0,0,0,656,
        657,1,0,0,0,657,676,1,0,0,0,658,656,1,0,0,0,659,661,5,183,0,0,660,
        662,5,4,0,0,661,660,1,0,0,0,661,662,1,0,0,0,662,663,1,0,0,0,663,
        664,3,182,91,0,664,666,3,182,91,0,665,667,3,190,95,0,666,665,1,0,
        0,0,666,667,1,0,0,0,667,669,1,0,0,0,668,670,3,190,95,0,669,668,1,
        0,0,0,669,670,1,0,0,0,670,672,1,0,0,0,671,673,3,190,95,0,672,671,
        1,0,0,0,672,673,1,0,0,0,673,675,1,0,0,0,674,659,1,0,0,0,675,678,
        1,0,0,0,676,674,1,0,0,0,676,677,1,0,0,0,677,53,1,0,0,0,678,676,1,
        0,0,0,679,681,5,27,0,0,680,682,5,203,0,0,681,680,1,0,0,0,681,682,
        1,0,0,0,682,683,1,0,0,0,683,694,3,194,97,0,684,686,5,28,0,0,685,
        687,5,203,0,0,686,685,1,0,0,0,686,687,1,0,0,0,687,688,1,0,0,0,688,
        694,3,194,97,0,689,690,5,29,0,0,690,694,3,182,91,0,691,692,5,30,
        0,0,692,694,3,182,91,0,693,679,1,0,0,0,693,684,1,0,0,0,693,689,1,
        0,0,0,693,691,1,0,0,0,694,55,1,0,0,0,695,697,5,31,0,0,696,698,5,
        203,0,0,697,696,1,0,0,0,697,698,1,0,0,0,698,699,1,0,0,0,699,731,
        3,196,98,0,700,702,5,32,0,0,701,703,5,203,0,0,702,701,1,0,0,0,702,
        703,1,0,0,0,703,704,1,0,0,0,704,731,3,196,98,0,705,707,5,55,0,0,
        706,708,5,203,0,0,707,706,1,0,0,0,707,708,1,0,0,0,708,709,1,0,0,
        0,709,731,3,196,98,0,710,712,5,33,0,0,711,713,5,203,0,0,712,711,
        1,0,0,0,712,713,1,0,0,0,713,714,1,0,0,0,714,731,3,196,98,0,715,717,
        5,34,0,0,716,718,5,203,0,0,717,716,1,0,0,0,717,718,1,0,0,0,718,719,
        1,0,0,0,719,731,3,196,98,0,720,722,5,35,0,0,721,723,5,203,0,0,722,
        721,1,0,0,0,722,723,1,0,0,0,723,724,1,0,0,0,724,731,3,196,98,0,725,
        727,5,47,0,0,726,728,5,203,0,0,727,726,1,0,0,0,727,728,1,0,0,0,728,
        729,1,0,0,0,729,731,3,196,98,0,730,695,1,0,0,0,730,700,1,0,0,0,730,
        705,1,0,0,0,730,710,1,0,0,0,730,715,1,0,0,0,730,720,1,0,0,0,730,
        725,1,0,0,0,731,57,1,0,0,0,732,747,3,200,100,0,733,747,3,60,30,0,
        734,747,3,226,113,0,735,737,5,38,0,0,736,738,5,203,0,0,737,736,1,
        0,0,0,737,738,1,0,0,0,738,739,1,0,0,0,739,747,5,188,0,0,740,747,
        5,19,0,0,741,743,5,21,0,0,742,744,5,203,0,0,743,742,1,0,0,0,743,
        744,1,0,0,0,744,745,1,0,0,0,745,747,3,194,97,0,746,732,1,0,0,0,746,
        733,1,0,0,0,746,734,1,0,0,0,746,735,1,0,0,0,746,740,1,0,0,0,746,
        741,1,0,0,0,747,59,1,0,0,0,748,749,5,4,0,0,749,750,3,182,91,0,750,
        751,3,182,91,0,751,752,3,182,91,0,752,753,3,182,91,0,753,754,3,190,
        95,0,754,755,3,190,95,0,755,756,3,190,95,0,756,757,5,188,0,0,757,
        61,1,0,0,0,758,787,3,64,32,0,759,787,3,228,114,0,760,762,5,9,0,0,
        761,763,5,203,0,0,762,761,1,0,0,0,762,763,1,0,0,0,763,764,1,0,0,
        0,764,787,5,195,0,0,765,766,5,40,0,0,766,767,3,194,97,0,767,768,
        3,194,97,0,768,769,3,194,97,0,769,787,1,0,0,0,770,772,5,41,0,0,771,
        773,5,203,0,0,772,771,1,0,0,0,772,773,1,0,0,0,773,774,1,0,0,0,774,
        787,3,194,97,0,775,777,5,14,0,0,776,778,5,203,0,0,777,776,1,0,0,
        0,777,778,1,0,0,0,778,779,1,0,0,0,779,787,5,188,0,0,780,781,5,15,
        0,0,781,787,5,223,0,0,782,783,5,17,0,0,783,784,5,18,0,0,784,787,
        3,194,97,0,785,787,5,19,0,0,786,758,1,0,0,0,786,759,1,0,0,0,786,
        760,1,0,0,0,786,765,1,0,0,0,786,770,1,0,0,0,786,775,1,0,0,0,786,
        780,1,0,0,0,786,782,1,0,0,0,786,785,1,0,0,0,787,63,1,0,0,0,788,789,
        5,4,0,0,789,790,3,182,91,0,790,791,3,182,91,0,791,792,3,182,91,0,
        792,793,3,182,91,0,793,794,3,182,91,0,794,795,3,182,91,0,795,797,
        3,190,95,0,796,798,3,190,95,0,797,796,1,0,0,0,797,798,1,0,0,0,798,
        800,1,0,0,0,799,801,3,190,95,0,800,799,1,0,0,0,800,801,1,0,0,0,801,
        65,1,0,0,0,802,841,3,68,34,0,803,805,5,9,0,0,804,806,5,203,0,0,805,
        804,1,0,0,0,805,806,1,0,0,0,806,807,1,0,0,0,807,841,5,195,0,0,808,
        809,5,44,0,0,809,841,5,226,0,0,810,812,5,21,0,0,811,813,5,203,0,
        0,812,811,1,0,0,0,812,813,1,0,0,0,813,814,1,0,0,0,814,841,3,194,
        97,0,815,816,5,45,0,0,816,841,5,189,0,0,817,818,5,6,0,0,818,841,
        5,219,0,0,819,820,5,40,0,0,820,821,3,194,97,0,821,822,3,194,97,0,
        822,823,3,194,97,0,823,841,1,0,0,0,824,826,5,41,0,0,825,827,5,203,
        0,0,826,825,1,0,0,0,826,827,1,0,0,0,827,828,1,0,0,0,828,841,3,194,
        97,0,829,831,5,14,0,0,830,832,5,203,0,0,831,830,1,0,0,0,831,832,
        1,0,0,0,832,833,1,0,0,0,833,841,5,188,0,0,834,835,5,15,0,0,835,841,
        5,223,0,0,836,837,5,17,0,0,837,838,5,18,0,0,838,841,3,194,97,0,839,
        841,5,19,0,0,840,802,1,0,0,0,840,803,1,0,0,0,840,808,1,0,0,0,840,
        810,1,0,0,0,840,815,1,0,0,0,840,817,1,0,0,0,840,819,1,0,0,0,840,
        824,1,0,0,0,840,829,1,0,0,0,840,834,1,0,0,0,840,836,1,0,0,0,840,
        839,1,0,0,0,841,67,1,0,0,0,842,843,5,4,0,0,843,844,3,182,91,0,844,
        845,3,182,91,0,845,846,3,182,91,0,846,847,3,182,91,0,847,848,3,182,
        91,0,848,849,3,182,91,0,849,850,3,190,95,0,850,857,3,190,95,0,851,
        858,3,190,95,0,852,853,3,190,95,0,853,854,3,190,95,0,854,855,3,190,
        95,0,855,856,3,190,95,0,856,858,1,0,0,0,857,851,1,0,0,0,857,852,
        1,0,0,0,857,858,1,0,0,0,858,69,1,0,0,0,859,892,3,72,36,0,860,862,
        5,47,0,0,861,863,5,203,0,0,862,861,1,0,0,0,862,863,1,0,0,0,863,864,
        1,0,0,0,864,892,5,188,0,0,865,867,5,9,0,0,866,868,5,203,0,0,867,
        866,1,0,0,0,867,868,1,0,0,0,868,869,1,0,0,0,869,892,5,195,0,0,870,
        872,5,41,0,0,871,873,5,203,0,0,872,871,1,0,0,0,872,873,1,0,0,0,873,
        874,1,0,0,0,874,875,3,194,97,0,875,876,3,194,97,0,876,892,1,0,0,
        0,877,879,5,14,0,0,878,880,5,203,0,0,879,878,1,0,0,0,879,880,1,0,
        0,0,880,881,1,0,0,0,881,892,5,188,0,0,882,884,5,48,0,0,883,885,5,
        203,0,0,884,883,1,0,0,0,884,885,1,0,0,0,885,886,1,0,0,0,886,892,
        5,188,0,0,887,888,5,17,0,0,888,889,5,18,0,0,889,892,3,194,97,0,890,
        892,5,19,0,0,891,859,1,0,0,0,891,860,1,0,0,0,891,865,1,0,0,0,891,
        870,1,0,0,0,891,877,1,0,0,0,891,882,1,0,0,0,891,887,1,0,0,0,891,
        890,1,0,0,0,892,71,1,0,0,0,893,894,5,4,0,0,894,895,3,182,91,0,895,
        896,3,182,91,0,896,897,3,182,91,0,897,898,3,182,91,0,898,899,3,190,
        95,0,899,903,3,190,95,0,900,901,3,190,95,0,901,902,3,190,95,0,902,
        904,1,0,0,0,903,900,1,0,0,0,903,904,1,0,0,0,904,73,1,0,0,0,905,925,
        3,76,38,0,906,908,5,9,0,0,907,909,5,203,0,0,908,907,1,0,0,0,908,
        909,1,0,0,0,909,910,1,0,0,0,910,925,5,195,0,0,911,912,5,40,0,0,912,
        925,3,194,97,0,913,915,5,14,0,0,914,916,5,203,0,0,915,914,1,0,0,
        0,915,916,1,0,0,0,916,917,1,0,0,0,917,925,5,188,0,0,918,919,5,15,
        0,0,919,925,5,223,0,0,920,921,5,17,0,0,921,922,5,18,0,0,922,925,
        3,194,97,0,923,925,5,19,0,0,924,905,1,0,0,0,924,906,1,0,0,0,924,
        911,1,0,0,0,924,913,1,0,0,0,924,918,1,0,0,0,924,920,1,0,0,0,924,
        923,1,0,0,0,925,75,1,0,0,0,926,927,5,4,0,0,927,928,3,182,91,0,928,
        929,3,182,91,0,929,931,3,190,95,0,930,932,3,190,95,0,931,930,1,0,
        0,0,931,932,1,0,0,0,932,77,1,0,0,0,933,964,3,80,40,0,934,936,5,9,
        0,0,935,937,5,203,0,0,936,935,1,0,0,0,936,937,1,0,0,0,937,938,1,
        0,0,0,938,964,5,195,0,0,939,940,5,40,0,0,940,941,3,194,97,0,941,
        942,3,194,97,0,942,943,3,194,97,0,943,944,3,194,97,0,944,964,1,0,
        0,0,945,947,5,41,0,0,946,948,5,203,0,0,947,946,1,0,0,0,947,948,1,
        0,0,0,948,949,1,0,0,0,949,964,3,194,97,0,950,952,5,14,0,0,951,953,
        5,203,0,0,952,951,1,0,0,0,952,953,1,0,0,0,953,954,1,0,0,0,954,964,
        5,188,0,0,955,956,5,15,0,0,956,964,5,223,0,0,957,958,5,17,0,0,958,
        959,5,18,0,0,959,964,3,194,97,0,960,964,5,19,0,0,961,962,5,44,0,
        0,962,964,5,227,0,0,963,933,1,0,0,0,963,934,1,0,0,0,963,939,1,0,
        0,0,963,945,1,0,0,0,963,950,1,0,0,0,963,955,1,0,0,0,963,957,1,0,
        0,0,963,960,1,0,0,0,963,961,1,0,0,0,964,79,1,0,0,0,965,966,5,4,0,
        0,966,967,3,182,91,0,967,968,3,182,91,0,968,969,3,182,91,0,969,970,
        3,182,91,0,970,972,3,190,95,0,971,973,3,190,95,0,972,971,1,0,0,0,
        972,973,1,0,0,0,973,81,1,0,0,0,974,985,3,200,100,0,975,979,5,52,
        0,0,976,978,3,84,42,0,977,976,1,0,0,0,978,981,1,0,0,0,979,977,1,
        0,0,0,979,980,1,0,0,0,980,982,1,0,0,0,981,979,1,0,0,0,982,985,5,
        2,0,0,983,985,5,53,0,0,984,974,1,0,0,0,984,975,1,0,0,0,984,983,1,
        0,0,0,985,83,1,0,0,0,986,988,5,54,0,0,987,989,5,203,0,0,988,987,
        1,0,0,0,988,989,1,0,0,0,989,990,1,0,0,0,990,997,3,182,91,0,991,993,
        5,55,0,0,992,994,5,203,0,0,993,992,1,0,0,0,993,994,1,0,0,0,994,995,
        1,0,0,0,995,997,3,194,97,0,996,986,1,0,0,0,996,991,1,0,0,0,997,85,
        1,0,0,0,998,1039,3,200,100,0,999,1001,5,57,0,0,1000,1002,5,203,0,
        0,1001,1000,1,0,0,0,1001,1002,1,0,0,0,1002,1003,1,0,0,0,1003,1039,
        5,188,0,0,1004,1006,5,58,0,0,1005,1007,5,203,0,0,1006,1005,1,0,0,
        0,1006,1007,1,0,0,0,1007,1008,1,0,0,0,1008,1034,5,200,0,0,1009,1011,
        3,194,97,0,1010,1012,5,186,0,0,1011,1010,1,0,0,0,1011,1012,1,0,0,
        0,1012,1013,1,0,0,0,1013,1015,3,194,97,0,1014,1016,5,186,0,0,1015,
        1014,1,0,0,0,1015,1016,1,0,0,0,1016,1017,1,0,0,0,1017,1018,3,194,
        97,0,1018,1035,1,0,0,0,1019,1021,5,181,0,0,1020,1022,5,203,0,0,1021,
        1020,1,0,0,0,1021,1022,1,0,0,0,1022,1023,1,0,0,0,1023,1025,3,182,
        91,0,1024,1026,5,186,0,0,1025,1024,1,0,0,0,1025,1026,1,0,0,0,1026,
        1032,1,0,0,0,1027,1029,5,182,0,0,1028,1030,5,203,0,0,1029,1028,1,
        0,0,0,1029,1030,1,0,0,0,1030,1031,1,0,0,0,1031,1033,3,182,91,0,1032,
        1027,1,0,0,0,1032,1033,1,0,0,0,1033,1035,1,0,0,0,1034,1009,1,0,0,
        0,1034,1019,1,0,0,0,1035,1036,1,0,0,0,1036,1037,5,201,0,0,1037,1039,
        1,0,0,0,1038,998,1,0,0,0,1038,999,1,0,0,0,1038,1004,1,0,0,0,1039,
        87,1,0,0,0,1040,1041,5,4,0,0,1041,1042,3,182,91,0,1042,1043,3,190,
        95,0,1043,1044,3,190,95,0,1044,1045,3,190,95,0,1045,89,1,0,0,0,1046,
        1084,3,92,46,0,1047,1084,3,230,115,0,1048,1050,5,9,0,0,1049,1051,
        5,203,0,0,1050,1049,1,0,0,0,1050,1051,1,0,0,0,1051,1052,1,0,0,0,
        1052,1084,5,195,0,0,1053,1054,5,60,0,0,1054,1055,5,188,0,0,1055,
        1084,3,194,97,0,1056,1058,5,41,0,0,1057,1059,5,203,0,0,1058,1057,
        1,0,0,0,1058,1059,1,0,0,0,1059,1060,1,0,0,0,1060,1084,3,194,97,0,
        1061,1063,5,14,0,0,1062,1064,5,203,0,0,1063,1062,1,0,0,0,1063,1064,
        1,0,0,0,1064,1065,1,0,0,0,1065,1084,5,188,0,0,1066,1067,5,17,0,0,
        1067,1068,5,18,0,0,1068,1075,3,194,97,0,1069,1076,5,132,0,0,1070,
        1072,5,9,0,0,1071,1073,5,203,0,0,1072,1071,1,0,0,0,1072,1073,1,0,
        0,0,1073,1074,1,0,0,0,1074,1076,5,195,0,0,1075,1069,1,0,0,0,1075,
        1070,1,0,0,0,1076,1084,1,0,0,0,1077,1084,5,19,0,0,1078,1079,5,61,
        0,0,1079,1080,3,194,97,0,1080,1081,5,188,0,0,1081,1084,1,0,0,0,1082,
        1084,5,62,0,0,1083,1046,1,0,0,0,1083,1047,1,0,0,0,1083,1048,1,0,
        0,0,1083,1053,1,0,0,0,1083,1056,1,0,0,0,1083,1061,1,0,0,0,1083,1066,
        1,0,0,0,1083,1077,1,0,0,0,1083,1078,1,0,0,0,1083,1082,1,0,0,0,1084,
        91,1,0,0,0,1085,1086,5,4,0,0,1086,1087,3,182,91,0,1087,1088,3,182,
        91,0,1088,93,1,0,0,0,1089,1139,3,96,48,0,1090,1139,3,232,116,0,1091,
        1093,5,9,0,0,1092,1094,5,203,0,0,1093,1092,1,0,0,0,1093,1094,1,0,
        0,0,1094,1095,1,0,0,0,1095,1139,5,195,0,0,1096,1097,5,40,0,0,1097,
        1098,3,194,97,0,1098,1099,3,194,97,0,1099,1100,3,194,97,0,1100,1101,
        3,194,97,0,1101,1139,1,0,0,0,1102,1104,5,47,0,0,1103,1105,5,203,
        0,0,1104,1103,1,0,0,0,1104,1105,1,0,0,0,1105,1106,1,0,0,0,1106,1139,
        5,188,0,0,1107,1108,5,64,0,0,1108,1139,5,188,0,0,1109,1110,5,41,
        0,0,1110,1112,3,194,97,0,1111,1113,3,194,97,0,1112,1111,1,0,0,0,
        1112,1113,1,0,0,0,1113,1139,1,0,0,0,1114,1116,5,14,0,0,1115,1117,
        5,203,0,0,1116,1115,1,0,0,0,1116,1117,1,0,0,0,1117,1118,1,0,0,0,
        1118,1139,5,188,0,0,1119,1121,5,48,0,0,1120,1122,5,203,0,0,1121,
        1120,1,0,0,0,1121,1122,1,0,0,0,1122,1123,1,0,0,0,1123,1139,5,188,
        0,0,1124,1125,5,15,0,0,1125,1139,5,223,0,0,1126,1127,5,17,0,0,1127,
        1128,5,18,0,0,1128,1135,3,194,97,0,1129,1136,5,132,0,0,1130,1132,
        5,9,0,0,1131,1133,5,203,0,0,1132,1131,1,0,0,0,1132,1133,1,0,0,0,
        1133,1134,1,0,0,0,1134,1136,5,195,0,0,1135,1129,1,0,0,0,1135,1130,
        1,0,0,0,1136,1139,1,0,0,0,1137,1139,5,19,0,0,1138,1089,1,0,0,0,1138,
        1090,1,0,0,0,1138,1091,1,0,0,0,1138,1096,1,0,0,0,1138,1102,1,0,0,
        0,1138,1107,1,0,0,0,1138,1109,1,0,0,0,1138,1114,1,0,0,0,1138,1119,
        1,0,0,0,1138,1124,1,0,0,0,1138,1126,1,0,0,0,1138,1137,1,0,0,0,1139,
        95,1,0,0,0,1140,1141,5,4,0,0,1141,1142,3,182,91,0,1142,1143,3,182,
        91,0,1143,1144,3,182,91,0,1144,1150,3,182,91,0,1145,1146,3,182,91,
        0,1146,1147,3,182,91,0,1147,1148,3,182,91,0,1148,1149,3,182,91,0,
        1149,1151,1,0,0,0,1150,1145,1,0,0,0,1150,1151,1,0,0,0,1151,1152,
        1,0,0,0,1152,1153,3,190,95,0,1153,1157,3,190,95,0,1154,1155,3,190,
        95,0,1155,1156,3,190,95,0,1156,1158,1,0,0,0,1157,1154,1,0,0,0,1157,
        1158,1,0,0,0,1158,97,1,0,0,0,1159,1195,3,100,50,0,1160,1162,5,9,
        0,0,1161,1163,5,203,0,0,1162,1161,1,0,0,0,1162,1163,1,0,0,0,1163,
        1164,1,0,0,0,1164,1195,5,195,0,0,1165,1166,5,60,0,0,1166,1167,5,
        188,0,0,1167,1168,5,188,0,0,1168,1169,3,194,97,0,1169,1170,3,194,
        97,0,1170,1171,3,194,97,0,1171,1195,1,0,0,0,1172,1174,5,41,0,0,1173,
        1175,5,203,0,0,1174,1173,1,0,0,0,1174,1175,1,0,0,0,1175,1176,1,0,
        0,0,1176,1195,3,194,97,0,1177,1179,5,14,0,0,1178,1180,5,203,0,0,
        1179,1178,1,0,0,0,1179,1180,1,0,0,0,1180,1181,1,0,0,0,1181,1195,
        5,188,0,0,1182,1183,5,66,0,0,1183,1195,3,194,97,0,1184,1185,5,67,
        0,0,1185,1195,3,194,97,0,1186,1187,5,15,0,0,1187,1195,5,223,0,0,
        1188,1189,5,17,0,0,1189,1190,5,18,0,0,1190,1195,3,194,97,0,1191,
        1195,3,102,51,0,1192,1195,5,19,0,0,1193,1195,5,62,0,0,1194,1159,
        1,0,0,0,1194,1160,1,0,0,0,1194,1165,1,0,0,0,1194,1172,1,0,0,0,1194,
        1177,1,0,0,0,1194,1182,1,0,0,0,1194,1184,1,0,0,0,1194,1186,1,0,0,
        0,1194,1188,1,0,0,0,1194,1191,1,0,0,0,1194,1192,1,0,0,0,1194,1193,
        1,0,0,0,1195,99,1,0,0,0,1196,1197,5,4,0,0,1197,1198,3,182,91,0,1198,
        1199,3,182,91,0,1199,1200,3,182,91,0,1200,1201,3,182,91,0,1201,1202,
        3,182,91,0,1202,1203,3,190,95,0,1203,1204,3,190,95,0,1204,101,1,
        0,0,0,1205,1206,5,68,0,0,1206,1207,3,182,91,0,1207,1208,3,190,95,
        0,1208,1209,3,190,95,0,1209,103,1,0,0,0,1210,1250,3,106,53,0,1211,
        1250,3,108,54,0,1212,1250,3,110,55,0,1213,1250,3,112,56,0,1214,1250,
        3,114,57,0,1215,1250,3,116,58,0,1216,1250,3,118,59,0,1217,1250,3,
        120,60,0,1218,1250,3,122,61,0,1219,1221,5,9,0,0,1220,1222,5,203,
        0,0,1221,1220,1,0,0,0,1221,1222,1,0,0,0,1222,1223,1,0,0,0,1223,1250,
        5,195,0,0,1224,1225,5,76,0,0,1225,1250,3,194,97,0,1226,1227,5,64,
        0,0,1227,1250,5,188,0,0,1228,1229,5,41,0,0,1229,1231,3,194,97,0,
        1230,1232,3,194,97,0,1231,1230,1,0,0,0,1231,1232,1,0,0,0,1232,1250,
        1,0,0,0,1233,1234,5,15,0,0,1234,1250,5,223,0,0,1235,1236,5,17,0,
        0,1236,1237,5,18,0,0,1237,1244,3,194,97,0,1238,1245,5,132,0,0,1239,
        1241,5,9,0,0,1240,1242,5,203,0,0,1241,1240,1,0,0,0,1241,1242,1,0,
        0,0,1242,1243,1,0,0,0,1243,1245,5,195,0,0,1244,1238,1,0,0,0,1244,
        1239,1,0,0,0,1245,1246,1,0,0,0,1246,1247,5,195,0,0,1247,1250,1,0,
        0,0,1248,1250,5,19,0,0,1249,1210,1,0,0,0,1249,1211,1,0,0,0,1249,
        1212,1,0,0,0,1249,1213,1,0,0,0,1249,1214,1,0,0,0,1249,1215,1,0,0,
        0,1249,1216,1,0,0,0,1249,1217,1,0,0,0,1249,1218,1,0,0,0,1249,1219,
        1,0,0,0,1249,1224,1,0,0,0,1249,1226,1,0,0,0,1249,1228,1,0,0,0,1249,
        1233,1,0,0,0,1249,1235,1,0,0,0,1249,1248,1,0,0,0,1250,105,1,0,0,
        0,1251,1252,5,70,0,0,1252,1254,3,182,91,0,1253,1255,3,182,91,0,1254,
        1253,1,0,0,0,1254,1255,1,0,0,0,1255,1256,1,0,0,0,1256,1258,3,190,
        95,0,1257,1259,3,190,95,0,1258,1257,1,0,0,0,1258,1259,1,0,0,0,1259,
        107,1,0,0,0,1260,1261,5,68,0,0,1261,1262,3,182,91,0,1262,1263,3,
        190,95,0,1263,109,1,0,0,0,1264,1265,5,50,0,0,1265,1266,3,182,91,
        0,1266,1267,3,182,91,0,1267,1268,3,182,91,0,1268,1270,5,195,0,0,
        1269,1271,5,189,0,0,1270,1269,1,0,0,0,1270,1271,1,0,0,0,1271,1272,
        1,0,0,0,1272,1273,5,195,0,0,1273,111,1,0,0,0,1274,1275,5,71,0,0,
        1275,1276,3,182,91,0,1276,113,1,0,0,0,1277,1278,5,65,0,0,1278,1279,
        3,182,91,0,1279,115,1,0,0,0,1280,1281,5,72,0,0,1281,1282,3,182,91,
        0,1282,117,1,0,0,0,1283,1284,5,73,0,0,1284,1285,3,182,91,0,1285,
        119,1,0,0,0,1286,1287,5,74,0,0,1287,1288,5,195,0,0,1288,1289,3,182,
        91,0,1289,1290,3,182,91,0,1290,1291,3,182,91,0,1291,1292,3,182,91,
        0,1292,1294,3,182,91,0,1293,1295,3,182,91,0,1294,1293,1,0,0,0,1294,
        1295,1,0,0,0,1295,121,1,0,0,0,1296,1297,5,75,0,0,1297,1298,3,182,
        91,0,1298,123,1,0,0,0,1299,1417,3,126,63,0,1300,1302,5,9,0,0,1301,
        1303,5,203,0,0,1302,1301,1,0,0,0,1302,1303,1,0,0,0,1303,1304,1,0,
        0,0,1304,1417,5,195,0,0,1305,1306,5,27,0,0,1306,1417,3,194,97,0,
        1307,1309,5,41,0,0,1308,1310,5,203,0,0,1309,1308,1,0,0,0,1309,1310,
        1,0,0,0,1310,1311,1,0,0,0,1311,1417,3,194,97,0,1312,1313,5,78,0,
        0,1313,1314,3,194,97,0,1314,1315,3,194,97,0,1315,1320,3,194,97,0,
        1316,1317,3,194,97,0,1317,1318,3,194,97,0,1318,1319,3,194,97,0,1319,
        1321,1,0,0,0,1320,1316,1,0,0,0,1320,1321,1,0,0,0,1321,1326,1,0,0,
        0,1322,1323,3,194,97,0,1323,1324,3,194,97,0,1324,1325,3,194,97,0,
        1325,1327,1,0,0,0,1326,1322,1,0,0,0,1326,1327,1,0,0,0,1327,1332,
        1,0,0,0,1328,1329,3,194,97,0,1329,1330,3,194,97,0,1330,1331,3,194,
        97,0,1331,1333,1,0,0,0,1332,1328,1,0,0,0,1332,1333,1,0,0,0,1333,
        1417,1,0,0,0,1334,1336,5,14,0,0,1335,1337,5,203,0,0,1336,1335,1,
        0,0,0,1336,1337,1,0,0,0,1337,1338,1,0,0,0,1338,1417,5,188,0,0,1339,
        1340,5,79,0,0,1340,1341,3,194,97,0,1341,1342,3,194,97,0,1342,1347,
        3,194,97,0,1343,1344,3,194,97,0,1344,1345,3,194,97,0,1345,1346,3,
        194,97,0,1346,1348,1,0,0,0,1347,1343,1,0,0,0,1347,1348,1,0,0,0,1348,
        1353,1,0,0,0,1349,1350,3,194,97,0,1350,1351,3,194,97,0,1351,1352,
        3,194,97,0,1352,1354,1,0,0,0,1353,1349,1,0,0,0,1353,1354,1,0,0,0,
        1354,1359,1,0,0,0,1355,1356,3,194,97,0,1356,1357,3,194,97,0,1357,
        1358,3,194,97,0,1358,1360,1,0,0,0,1359,1355,1,0,0,0,1359,1360,1,
        0,0,0,1360,1417,1,0,0,0,1361,1362,5,17,0,0,1362,1363,5,18,0,0,1363,
        1370,3,194,97,0,1364,1371,5,132,0,0,1365,1367,5,9,0,0,1366,1368,
        5,203,0,0,1367,1366,1,0,0,0,1367,1368,1,0,0,0,1368,1369,1,0,0,0,
        1369,1371,5,195,0,0,1370,1364,1,0,0,0,1370,1365,1,0,0,0,1371,1417,
        1,0,0,0,1372,1373,5,80,0,0,1373,1374,3,194,97,0,1374,1375,3,194,
        97,0,1375,1380,3,194,97,0,1376,1377,3,194,97,0,1377,1378,3,194,97,
        0,1378,1379,3,194,97,0,1379,1381,1,0,0,0,1380,1376,1,0,0,0,1380,
        1381,1,0,0,0,1381,1386,1,0,0,0,1382,1383,3,194,97,0,1383,1384,3,
        194,97,0,1384,1385,3,194,97,0,1385,1387,1,0,0,0,1386,1382,1,0,0,
        0,1386,1387,1,0,0,0,1387,1392,1,0,0,0,1388,1389,3,194,97,0,1389,
        1390,3,194,97,0,1390,1391,3,194,97,0,1391,1393,1,0,0,0,1392,1388,
        1,0,0,0,1392,1393,1,0,0,0,1393,1417,1,0,0,0,1394,1417,5,19,0,0,1395,
        1397,5,21,0,0,1396,1398,5,203,0,0,1397,1396,1,0,0,0,1397,1398,1,
        0,0,0,1398,1399,1,0,0,0,1399,1417,3,194,97,0,1400,1401,5,81,0,0,
        1401,1417,5,230,0,0,1402,1403,5,61,0,0,1403,1404,5,83,0,0,1404,1406,
        3,194,97,0,1405,1407,3,194,97,0,1406,1405,1,0,0,0,1406,1407,1,0,
        0,0,1407,1409,1,0,0,0,1408,1410,3,194,97,0,1409,1408,1,0,0,0,1409,
        1410,1,0,0,0,1410,1412,1,0,0,0,1411,1413,3,194,97,0,1412,1411,1,
        0,0,0,1412,1413,1,0,0,0,1413,1417,1,0,0,0,1414,1417,5,82,0,0,1415,
        1417,5,62,0,0,1416,1299,1,0,0,0,1416,1300,1,0,0,0,1416,1305,1,0,
        0,0,1416,1307,1,0,0,0,1416,1312,1,0,0,0,1416,1334,1,0,0,0,1416,1339,
        1,0,0,0,1416,1361,1,0,0,0,1416,1372,1,0,0,0,1416,1394,1,0,0,0,1416,
        1395,1,0,0,0,1416,1400,1,0,0,0,1416,1402,1,0,0,0,1416,1414,1,0,0,
        0,1416,1415,1,0,0,0,1417,125,1,0,0,0,1418,1419,5,4,0,0,1419,1420,
        3,182,91,0,1420,1421,3,182,91,0,1421,1422,3,182,91,0,1422,1428,3,
        182,91,0,1423,1424,3,182,91,0,1424,1425,3,182,91,0,1425,1426,3,182,
        91,0,1426,1427,3,182,91,0,1427,1429,1,0,0,0,1428,1423,1,0,0,0,1428,
        1429,1,0,0,0,1429,1435,1,0,0,0,1430,1431,3,182,91,0,1431,1432,3,
        182,91,0,1432,1433,3,182,91,0,1433,1434,3,182,91,0,1434,1436,1,0,
        0,0,1435,1430,1,0,0,0,1435,1436,1,0,0,0,1436,1442,1,0,0,0,1437,1438,
        3,182,91,0,1438,1439,3,182,91,0,1439,1440,3,182,91,0,1440,1441,3,
        182,91,0,1441,1443,1,0,0,0,1442,1437,1,0,0,0,1442,1443,1,0,0,0,1443,
        127,1,0,0,0,1444,1454,3,130,65,0,1445,1454,3,234,117,0,1446,1448,
        5,21,0,0,1447,1449,5,203,0,0,1448,1447,1,0,0,0,1448,1449,1,0,0,0,
        1449,1450,1,0,0,0,1450,1454,3,194,97,0,1451,1454,5,17,0,0,1452,1454,
        5,19,0,0,1453,1444,1,0,0,0,1453,1445,1,0,0,0,1453,1446,1,0,0,0,1453,
        1451,1,0,0,0,1453,1452,1,0,0,0,1454,129,1,0,0,0,1455,1456,5,4,0,
        0,1456,1457,3,182,91,0,1457,1458,3,190,95,0,1458,1459,3,190,95,0,
        1459,131,1,0,0,0,1460,1492,3,134,67,0,1461,1463,5,9,0,0,1462,1464,
        5,203,0,0,1463,1462,1,0,0,0,1463,1464,1,0,0,0,1464,1465,1,0,0,0,
        1465,1492,5,195,0,0,1466,1467,5,40,0,0,1467,1468,3,194,97,0,1468,
        1469,3,194,97,0,1469,1470,3,194,97,0,1470,1471,3,194,97,0,1471,1472,
        3,194,97,0,1472,1492,1,0,0,0,1473,1475,5,41,0,0,1474,1476,5,203,
        0,0,1475,1474,1,0,0,0,1475,1476,1,0,0,0,1476,1477,1,0,0,0,1477,1492,
        3,194,97,0,1478,1480,5,14,0,0,1479,1481,5,203,0,0,1480,1479,1,0,
        0,0,1480,1481,1,0,0,0,1481,1482,1,0,0,0,1482,1492,5,188,0,0,1483,
        1484,5,15,0,0,1484,1492,5,223,0,0,1485,1486,5,17,0,0,1486,1487,5,
        18,0,0,1487,1492,3,194,97,0,1488,1492,5,19,0,0,1489,1490,5,44,0,
        0,1490,1492,5,227,0,0,1491,1460,1,0,0,0,1491,1461,1,0,0,0,1491,1466,
        1,0,0,0,1491,1473,1,0,0,0,1491,1478,1,0,0,0,1491,1483,1,0,0,0,1491,
        1485,1,0,0,0,1491,1488,1,0,0,0,1491,1489,1,0,0,0,1492,133,1,0,0,
        0,1493,1494,5,4,0,0,1494,1495,3,182,91,0,1495,1496,3,182,91,0,1496,
        1497,3,182,91,0,1497,1498,3,182,91,0,1498,1499,3,182,91,0,1499,1500,
        3,182,91,0,1500,1502,3,190,95,0,1501,1503,3,190,95,0,1502,1501,1,
        0,0,0,1502,1503,1,0,0,0,1503,135,1,0,0,0,1504,1574,3,138,69,0,1505,
        1507,5,9,0,0,1506,1508,5,203,0,0,1507,1506,1,0,0,0,1507,1508,1,0,
        0,0,1508,1509,1,0,0,0,1509,1574,5,195,0,0,1510,1511,5,27,0,0,1511,
        1574,3,194,97,0,1512,1513,5,87,0,0,1513,1574,3,194,97,0,1514,1516,
        5,41,0,0,1515,1517,5,203,0,0,1516,1515,1,0,0,0,1516,1517,1,0,0,0,
        1517,1518,1,0,0,0,1518,1574,3,194,97,0,1519,1520,5,78,0,0,1520,1521,
        3,194,97,0,1521,1522,3,194,97,0,1522,1523,3,194,97,0,1523,1524,3,
        194,97,0,1524,1525,3,194,97,0,1525,1526,3,194,97,0,1526,1527,3,194,
        97,0,1527,1574,1,0,0,0,1528,1529,5,88,0,0,1529,1574,5,188,0,0,1530,
        1531,5,89,0,0,1531,1532,3,194,97,0,1532,1533,3,194,97,0,1533,1534,
        3,194,97,0,1534,1535,3,194,97,0,1535,1536,3,194,97,0,1536,1537,3,
        194,97,0,1537,1538,3,194,97,0,1538,1539,3,194,97,0,1539,1574,1,0,
        0,0,1540,1542,5,14,0,0,1541,1543,5,203,0,0,1542,1541,1,0,0,0,1542,
        1543,1,0,0,0,1543,1544,1,0,0,0,1544,1574,5,188,0,0,1545,1546,5,17,
        0,0,1546,1547,5,18,0,0,1547,1554,3,194,97,0,1548,1555,5,132,0,0,
        1549,1551,5,9,0,0,1550,1552,5,203,0,0,1551,1550,1,0,0,0,1551,1552,
        1,0,0,0,1552,1553,1,0,0,0,1553,1555,5,195,0,0,1554,1548,1,0,0,0,
        1554,1549,1,0,0,0,1555,1574,1,0,0,0,1556,1557,5,80,0,0,1557,1558,
        3,194,97,0,1558,1559,3,194,97,0,1559,1560,3,194,97,0,1560,1561,3,
        194,97,0,1561,1562,3,194,97,0,1562,1563,3,194,97,0,1563,1564,3,194,
        97,0,1564,1574,1,0,0,0,1565,1574,5,19,0,0,1566,1567,5,148,0,0,1567,
        1574,5,188,0,0,1568,1569,5,61,0,0,1569,1570,3,194,97,0,1570,1571,
        3,194,97,0,1571,1574,1,0,0,0,1572,1574,5,62,0,0,1573,1504,1,0,0,
        0,1573,1505,1,0,0,0,1573,1510,1,0,0,0,1573,1512,1,0,0,0,1573,1514,
        1,0,0,0,1573,1519,1,0,0,0,1573,1528,1,0,0,0,1573,1530,1,0,0,0,1573,
        1540,1,0,0,0,1573,1545,1,0,0,0,1573,1556,1,0,0,0,1573,1565,1,0,0,
        0,1573,1566,1,0,0,0,1573,1568,1,0,0,0,1573,1572,1,0,0,0,1574,137,
        1,0,0,0,1575,1576,5,4,0,0,1576,1577,3,182,91,0,1577,1578,3,182,91,
        0,1578,1579,3,182,91,0,1579,1580,3,182,91,0,1580,139,1,0,0,0,1581,
        1622,3,142,71,0,1582,1622,3,236,118,0,1583,1585,5,9,0,0,1584,1586,
        5,203,0,0,1585,1584,1,0,0,0,1585,1586,1,0,0,0,1586,1587,1,0,0,0,
        1587,1622,5,195,0,0,1588,1590,5,21,0,0,1589,1591,5,203,0,0,1590,
        1589,1,0,0,0,1590,1591,1,0,0,0,1591,1592,1,0,0,0,1592,1622,3,194,
        97,0,1593,1594,5,44,0,0,1594,1622,5,228,0,0,1595,1596,5,40,0,0,1596,
        1597,3,194,97,0,1597,1598,3,194,97,0,1598,1599,3,194,97,0,1599,1622,
        1,0,0,0,1600,1601,5,91,0,0,1601,1602,3,194,97,0,1602,1603,3,194,
        97,0,1603,1604,3,194,97,0,1604,1622,1,0,0,0,1605,1607,5,41,0,0,1606,
        1608,5,203,0,0,1607,1606,1,0,0,0,1607,1608,1,0,0,0,1608,1609,1,0,
        0,0,1609,1622,3,194,97,0,1610,1612,5,14,0,0,1611,1613,5,203,0,0,
        1612,1611,1,0,0,0,1612,1613,1,0,0,0,1613,1614,1,0,0,0,1614,1622,
        5,188,0,0,1615,1616,5,15,0,0,1616,1622,5,223,0,0,1617,1618,5,17,
        0,0,1618,1619,5,18,0,0,1619,1622,3,194,97,0,1620,1622,5,19,0,0,1621,
        1581,1,0,0,0,1621,1582,1,0,0,0,1621,1583,1,0,0,0,1621,1588,1,0,0,
        0,1621,1593,1,0,0,0,1621,1595,1,0,0,0,1621,1600,1,0,0,0,1621,1605,
        1,0,0,0,1621,1610,1,0,0,0,1621,1615,1,0,0,0,1621,1617,1,0,0,0,1621,
        1620,1,0,0,0,1622,141,1,0,0,0,1623,1624,5,4,0,0,1624,1625,3,182,
        91,0,1625,1626,3,182,91,0,1626,1627,3,182,91,0,1627,1628,3,182,91,
        0,1628,1629,3,182,91,0,1629,1630,3,182,91,0,1630,1631,3,182,91,0,
        1631,1633,3,190,95,0,1632,1634,3,190,95,0,1633,1632,1,0,0,0,1633,
        1634,1,0,0,0,1634,1636,1,0,0,0,1635,1637,3,190,95,0,1636,1635,1,
        0,0,0,1636,1637,1,0,0,0,1637,143,1,0,0,0,1638,1677,3,142,71,0,1639,
        1641,5,9,0,0,1640,1642,5,203,0,0,1641,1640,1,0,0,0,1641,1642,1,0,
        0,0,1642,1643,1,0,0,0,1643,1677,5,195,0,0,1644,1646,5,21,0,0,1645,
        1647,5,203,0,0,1646,1645,1,0,0,0,1646,1647,1,0,0,0,1647,1648,1,0,
        0,0,1648,1677,3,194,97,0,1649,1650,5,40,0,0,1650,1651,3,194,97,0,
        1651,1652,3,194,97,0,1652,1653,3,194,97,0,1653,1677,1,0,0,0,1654,
        1655,5,91,0,0,1655,1656,3,194,97,0,1656,1657,3,194,97,0,1657,1658,
        3,194,97,0,1658,1659,3,194,97,0,1659,1677,1,0,0,0,1660,1662,5,41,
        0,0,1661,1663,5,203,0,0,1662,1661,1,0,0,0,1662,1663,1,0,0,0,1663,
        1664,1,0,0,0,1664,1677,3,194,97,0,1665,1667,5,14,0,0,1666,1668,5,
        203,0,0,1667,1666,1,0,0,0,1667,1668,1,0,0,0,1668,1669,1,0,0,0,1669,
        1677,5,188,0,0,1670,1671,5,15,0,0,1671,1677,5,223,0,0,1672,1673,
        5,17,0,0,1673,1674,5,18,0,0,1674,1677,3,194,97,0,1675,1677,5,19,
        0,0,1676,1638,1,0,0,0,1676,1639,1,0,0,0,1676,1644,1,0,0,0,1676,1649,
        1,0,0,0,1676,1654,1,0,0,0,1676,1660,1,0,0,0,1676,1665,1,0,0,0,1676,
        1670,1,0,0,0,1676,1672,1,0,0,0,1676,1675,1,0,0,0,1677,145,1,0,0,
        0,1678,1710,3,148,74,0,1679,1681,5,9,0,0,1680,1682,5,203,0,0,1681,
        1680,1,0,0,0,1681,1682,1,0,0,0,1682,1683,1,0,0,0,1683,1710,5,195,
        0,0,1684,1685,5,40,0,0,1685,1686,3,194,97,0,1686,1687,3,194,97,0,
        1687,1688,3,194,97,0,1688,1689,3,194,97,0,1689,1690,3,194,97,0,1690,
        1691,3,194,97,0,1691,1692,3,194,97,0,1692,1710,1,0,0,0,1693,1695,
        5,41,0,0,1694,1696,5,203,0,0,1695,1694,1,0,0,0,1695,1696,1,0,0,0,
        1696,1697,1,0,0,0,1697,1710,3,194,97,0,1698,1700,5,14,0,0,1699,1701,
        5,203,0,0,1700,1699,1,0,0,0,1700,1701,1,0,0,0,1701,1702,1,0,0,0,
        1702,1710,5,188,0,0,1703,1704,5,15,0,0,1704,1710,5,223,0,0,1705,
        1706,5,17,0,0,1706,1707,5,18,0,0,1707,1710,3,194,97,0,1708,1710,
        5,19,0,0,1709,1678,1,0,0,0,1709,1679,1,0,0,0,1709,1684,1,0,0,0,1709,
        1693,1,0,0,0,1709,1698,1,0,0,0,1709,1703,1,0,0,0,1709,1705,1,0,0,
        0,1709,1708,1,0,0,0,1710,147,1,0,0,0,1711,1712,5,4,0,0,1712,1713,
        3,182,91,0,1713,1714,3,182,91,0,1714,1715,3,182,91,0,1715,1716,3,
        182,91,0,1716,1717,3,182,91,0,1717,1718,3,182,91,0,1718,1719,3,182,
        91,0,1719,1720,3,182,91,0,1720,1721,3,190,95,0,1721,1722,3,190,95,
        0,1722,149,1,0,0,0,1723,1767,3,152,76,0,1724,1726,5,9,0,0,1725,1727,
        5,203,0,0,1726,1725,1,0,0,0,1726,1727,1,0,0,0,1727,1728,1,0,0,0,
        1728,1767,5,195,0,0,1729,1730,5,95,0,0,1730,1767,5,195,0,0,1731,
        1732,5,60,0,0,1732,1733,5,188,0,0,1733,1734,5,188,0,0,1734,1767,
        3,194,97,0,1735,1736,5,76,0,0,1736,1767,3,194,97,0,1737,1739,5,41,
        0,0,1738,1740,5,203,0,0,1739,1738,1,0,0,0,1739,1740,1,0,0,0,1740,
        1741,1,0,0,0,1741,1767,3,194,97,0,1742,1744,5,14,0,0,1743,1745,5,
        203,0,0,1744,1743,1,0,0,0,1744,1745,1,0,0,0,1745,1746,1,0,0,0,1746,
        1767,5,188,0,0,1747,1748,5,15,0,0,1748,1767,5,223,0,0,1749,1750,
        5,17,0,0,1750,1751,5,18,0,0,1751,1758,3,194,97,0,1752,1759,5,132,
        0,0,1753,1755,5,9,0,0,1754,1756,5,203,0,0,1755,1754,1,0,0,0,1755,
        1756,1,0,0,0,1756,1757,1,0,0,0,1757,1759,5,195,0,0,1758,1752,1,0,
        0,0,1758,1753,1,0,0,0,1759,1767,1,0,0,0,1760,1767,5,19,0,0,1761,
        1762,5,61,0,0,1762,1763,7,1,0,0,1763,1764,5,188,0,0,1764,1767,5,
        188,0,0,1765,1767,5,62,0,0,1766,1723,1,0,0,0,1766,1724,1,0,0,0,1766,
        1729,1,0,0,0,1766,1731,1,0,0,0,1766,1735,1,0,0,0,1766,1737,1,0,0,
        0,1766,1742,1,0,0,0,1766,1747,1,0,0,0,1766,1749,1,0,0,0,1766,1760,
        1,0,0,0,1766,1761,1,0,0,0,1766,1765,1,0,0,0,1767,151,1,0,0,0,1768,
        1769,5,4,0,0,1769,1770,3,182,91,0,1770,1771,3,182,91,0,1771,1772,
        3,182,91,0,1772,1773,3,182,91,0,1773,1774,3,182,91,0,1774,1775,3,
        182,91,0,1775,1776,3,182,91,0,1776,1777,3,182,91,0,1777,1778,3,182,
        91,0,1778,1779,3,182,91,0,1779,1781,3,182,91,0,1780,1782,3,182,91,
        0,1781,1780,1,0,0,0,1781,1782,1,0,0,0,1782,153,1,0,0,0,1783,1841,
        3,156,78,0,1784,1841,3,238,119,0,1785,1787,5,9,0,0,1786,1788,5,203,
        0,0,1787,1786,1,0,0,0,1787,1788,1,0,0,0,1788,1789,1,0,0,0,1789,1841,
        5,195,0,0,1790,1792,5,41,0,0,1791,1793,5,203,0,0,1792,1791,1,0,0,
        0,1792,1793,1,0,0,0,1793,1794,1,0,0,0,1794,1795,5,195,0,0,1795,1841,
        3,194,97,0,1796,1798,5,14,0,0,1797,1799,5,203,0,0,1798,1797,1,0,
        0,0,1798,1799,1,0,0,0,1799,1800,1,0,0,0,1800,1841,5,188,0,0,1801,
        1803,5,15,0,0,1802,1804,5,222,0,0,1803,1802,1,0,0,0,1803,1804,1,
        0,0,0,1804,1805,1,0,0,0,1805,1806,5,224,0,0,1806,1841,5,223,0,0,
        1807,1809,5,97,0,0,1808,1810,5,203,0,0,1809,1808,1,0,0,0,1809,1810,
        1,0,0,0,1810,1811,1,0,0,0,1811,1812,5,195,0,0,1812,1841,3,194,97,
        0,1813,1815,5,98,0,0,1814,1816,5,203,0,0,1815,1814,1,0,0,0,1815,
        1816,1,0,0,0,1816,1817,1,0,0,0,1817,1818,5,195,0,0,1818,1841,3,194,
        97,0,1819,1821,5,99,0,0,1820,1822,5,203,0,0,1821,1820,1,0,0,0,1821,
        1822,1,0,0,0,1822,1823,1,0,0,0,1823,1824,5,195,0,0,1824,1825,3,194,
        97,0,1825,1826,3,194,97,0,1826,1841,1,0,0,0,1827,1828,5,17,0,0,1828,
        1829,5,18,0,0,1829,1836,3,194,97,0,1830,1837,5,132,0,0,1831,1833,
        5,9,0,0,1832,1834,5,203,0,0,1833,1832,1,0,0,0,1833,1834,1,0,0,0,
        1834,1835,1,0,0,0,1835,1837,5,195,0,0,1836,1830,1,0,0,0,1836,1831,
        1,0,0,0,1837,1841,1,0,0,0,1838,1841,5,19,0,0,1839,1841,5,100,0,0,
        1840,1783,1,0,0,0,1840,1784,1,0,0,0,1840,1785,1,0,0,0,1840,1790,
        1,0,0,0,1840,1796,1,0,0,0,1840,1801,1,0,0,0,1840,1807,1,0,0,0,1840,
        1813,1,0,0,0,1840,1819,1,0,0,0,1840,1827,1,0,0,0,1840,1838,1,0,0,
        0,1840,1839,1,0,0,0,1841,155,1,0,0,0,1842,1843,5,4,0,0,1843,1844,
        3,182,91,0,1844,1845,3,182,91,0,1845,1847,3,190,95,0,1846,1848,3,
        190,95,0,1847,1846,1,0,0,0,1847,1848,1,0,0,0,1848,157,1,0,0,0,1849,
        1899,3,160,80,0,1850,1899,3,240,120,0,1851,1853,5,9,0,0,1852,1854,
        5,203,0,0,1853,1852,1,0,0,0,1853,1854,1,0,0,0,1854,1855,1,0,0,0,
        1855,1899,5,195,0,0,1856,1857,5,102,0,0,1857,1899,5,188,0,0,1858,
        1859,5,40,0,0,1859,1860,3,194,97,0,1860,1861,3,194,97,0,1861,1899,
        1,0,0,0,1862,1864,5,41,0,0,1863,1865,5,203,0,0,1864,1863,1,0,0,0,
        1864,1865,1,0,0,0,1865,1866,1,0,0,0,1866,1899,3,194,97,0,1867,1869,
        5,14,0,0,1868,1870,5,203,0,0,1869,1868,1,0,0,0,1869,1870,1,0,0,0,
        1870,1871,1,0,0,0,1871,1899,5,188,0,0,1872,1873,5,17,0,0,1873,1874,
        5,18,0,0,1874,1881,3,194,97,0,1875,1882,5,132,0,0,1876,1878,5,9,
        0,0,1877,1879,5,203,0,0,1878,1877,1,0,0,0,1878,1879,1,0,0,0,1879,
        1880,1,0,0,0,1880,1882,5,195,0,0,1881,1875,1,0,0,0,1881,1876,1,0,
        0,0,1882,1899,1,0,0,0,1883,1899,5,19,0,0,1884,1885,5,103,0,0,1885,
        1899,5,195,0,0,1886,1887,5,104,0,0,1887,1888,3,194,97,0,1888,1889,
        5,188,0,0,1889,1899,1,0,0,0,1890,1899,5,105,0,0,1891,1899,5,106,
        0,0,1892,1899,5,107,0,0,1893,1899,5,108,0,0,1894,1899,5,109,0,0,
        1895,1899,5,110,0,0,1896,1897,5,111,0,0,1897,1899,5,188,0,0,1898,
        1849,1,0,0,0,1898,1850,1,0,0,0,1898,1851,1,0,0,0,1898,1856,1,0,0,
        0,1898,1858,1,0,0,0,1898,1862,1,0,0,0,1898,1867,1,0,0,0,1898,1872,
        1,0,0,0,1898,1883,1,0,0,0,1898,1884,1,0,0,0,1898,1886,1,0,0,0,1898,
        1890,1,0,0,0,1898,1891,1,0,0,0,1898,1892,1,0,0,0,1898,1893,1,0,0,
        0,1898,1894,1,0,0,0,1898,1895,1,0,0,0,1898,1896,1,0,0,0,1899,159,
        1,0,0,0,1900,1901,5,4,0,0,1901,1902,3,182,91,0,1902,1903,3,182,91,
        0,1903,1904,3,182,91,0,1904,1905,3,182,91,0,1905,1906,3,182,91,0,
        1906,1908,3,190,95,0,1907,1909,3,190,95,0,1908,1907,1,0,0,0,1908,
        1909,1,0,0,0,1909,1911,1,0,0,0,1910,1912,3,190,95,0,1911,1910,1,
        0,0,0,1911,1912,1,0,0,0,1912,161,1,0,0,0,1913,1949,3,164,82,0,1914,
        1916,5,9,0,0,1915,1917,5,203,0,0,1916,1915,1,0,0,0,1916,1917,1,0,
        0,0,1917,1918,1,0,0,0,1918,1949,5,195,0,0,1919,1920,5,102,0,0,1920,
        1949,5,188,0,0,1921,1922,5,40,0,0,1922,1923,3,194,97,0,1923,1924,
        3,194,97,0,1924,1949,1,0,0,0,1925,1927,5,41,0,0,1926,1928,5,203,
        0,0,1927,1926,1,0,0,0,1927,1928,1,0,0,0,1928,1929,1,0,0,0,1929,1949,
        3,194,97,0,1930,1932,5,14,0,0,1931,1933,5,203,0,0,1932,1931,1,0,
        0,0,1932,1933,1,0,0,0,1933,1934,1,0,0,0,1934,1949,5,188,0,0,1935,
        1949,5,105,0,0,1936,1949,5,106,0,0,1937,1949,5,104,0,0,1938,1949,
        5,107,0,0,1939,1949,5,108,0,0,1940,1949,5,111,0,0,1941,1942,5,17,
        0,0,1942,1949,5,18,0,0,1943,1949,5,19,0,0,1944,1945,5,103,0,0,1945,
        1949,5,195,0,0,1946,1949,5,109,0,0,1947,1949,5,110,0,0,1948,1913,
        1,0,0,0,1948,1914,1,0,0,0,1948,1919,1,0,0,0,1948,1921,1,0,0,0,1948,
        1925,1,0,0,0,1948,1930,1,0,0,0,1948,1935,1,0,0,0,1948,1936,1,0,0,
        0,1948,1937,1,0,0,0,1948,1938,1,0,0,0,1948,1939,1,0,0,0,1948,1940,
        1,0,0,0,1948,1941,1,0,0,0,1948,1943,1,0,0,0,1948,1944,1,0,0,0,1948,
        1946,1,0,0,0,1948,1947,1,0,0,0,1949,163,1,0,0,0,1950,1951,5,4,0,
        0,1951,1952,3,182,91,0,1952,1953,3,182,91,0,1953,1954,3,182,91,0,
        1954,1955,3,182,91,0,1955,1956,3,182,91,0,1956,1957,3,182,91,0,1957,
        1959,3,190,95,0,1958,1960,3,190,95,0,1959,1958,1,0,0,0,1959,1960,
        1,0,0,0,1960,165,1,0,0,0,1961,1982,3,168,84,0,1962,1964,5,9,0,0,
        1963,1965,5,203,0,0,1964,1963,1,0,0,0,1964,1965,1,0,0,0,1965,1966,
        1,0,0,0,1966,1982,5,195,0,0,1967,1969,5,41,0,0,1968,1970,5,203,0,
        0,1969,1968,1,0,0,0,1969,1970,1,0,0,0,1970,1971,1,0,0,0,1971,1982,
        3,194,97,0,1972,1974,5,14,0,0,1973,1975,5,203,0,0,1974,1973,1,0,
        0,0,1974,1975,1,0,0,0,1975,1976,1,0,0,0,1976,1982,5,188,0,0,1977,
        1978,5,17,0,0,1978,1979,5,18,0,0,1979,1982,3,194,97,0,1980,1982,
        5,19,0,0,1981,1961,1,0,0,0,1981,1962,1,0,0,0,1981,1967,1,0,0,0,1981,
        1972,1,0,0,0,1981,1977,1,0,0,0,1981,1980,1,0,0,0,1982,167,1,0,0,
        0,1983,1984,5,4,0,0,1984,1985,3,182,91,0,1985,1986,3,182,91,0,1986,
        1987,3,190,95,0,1987,1988,3,190,95,0,1988,1989,3,190,95,0,1989,169,
        1,0,0,0,1990,2017,3,172,86,0,1991,1993,5,9,0,0,1992,1994,5,203,0,
        0,1993,1992,1,0,0,0,1993,1994,1,0,0,0,1994,1995,1,0,0,0,1995,2017,
        5,195,0,0,1996,1997,5,115,0,0,1997,2017,5,188,0,0,1998,1999,5,40,
        0,0,1999,2017,3,194,97,0,2000,2002,5,41,0,0,2001,2003,5,203,0,0,
        2002,2001,1,0,0,0,2002,2003,1,0,0,0,2003,2004,1,0,0,0,2004,2017,
        3,194,97,0,2005,2007,5,14,0,0,2006,2008,5,203,0,0,2007,2006,1,0,
        0,0,2007,2008,1,0,0,0,2008,2009,1,0,0,0,2009,2017,5,188,0,0,2010,
        2011,5,17,0,0,2011,2012,5,18,0,0,2012,2017,3,194,97,0,2013,2017,
        5,19,0,0,2014,2015,5,111,0,0,2015,2017,5,188,0,0,2016,1990,1,0,0,
        0,2016,1991,1,0,0,0,2016,1996,1,0,0,0,2016,1998,1,0,0,0,2016,2000,
        1,0,0,0,2016,2005,1,0,0,0,2016,2010,1,0,0,0,2016,2013,1,0,0,0,2016,
        2014,1,0,0,0,2017,171,1,0,0,0,2018,2019,5,4,0,0,2019,2020,3,182,
        91,0,2020,2021,3,182,91,0,2021,2022,3,182,91,0,2022,2024,3,190,95,
        0,2023,2025,3,190,95,0,2024,2023,1,0,0,0,2024,2025,1,0,0,0,2025,
        173,1,0,0,0,2026,2048,3,176,88,0,2027,2048,3,242,121,0,2028,2030,
        5,9,0,0,2029,2031,5,203,0,0,2030,2029,1,0,0,0,2030,2031,1,0,0,0,
        2031,2032,1,0,0,0,2032,2048,5,195,0,0,2033,2035,5,41,0,0,2034,2036,
        5,203,0,0,2035,2034,1,0,0,0,2035,2036,1,0,0,0,2036,2037,1,0,0,0,
        2037,2048,3,194,97,0,2038,2040,5,14,0,0,2039,2041,5,203,0,0,2040,
        2039,1,0,0,0,2040,2041,1,0,0,0,2041,2042,1,0,0,0,2042,2048,5,188,
        0,0,2043,2044,5,17,0,0,2044,2045,5,18,0,0,2045,2048,3,194,97,0,2046,
        2048,5,19,0,0,2047,2026,1,0,0,0,2047,2027,1,0,0,0,2047,2028,1,0,
        0,0,2047,2033,1,0,0,0,2047,2038,1,0,0,0,2047,2043,1,0,0,0,2047,2046,
        1,0,0,0,2048,175,1,0,0,0,2049,2050,5,4,0,0,2050,2051,3,182,91,0,
        2051,2052,3,182,91,0,2052,2053,3,182,91,0,2053,177,1,0,0,0,2054,
        2122,3,180,90,0,2055,2122,3,244,122,0,2056,2058,5,116,0,0,2057,2059,
        5,203,0,0,2058,2057,1,0,0,0,2058,2059,1,0,0,0,2059,2060,1,0,0,0,
        2060,2122,3,194,97,0,2061,2063,5,117,0,0,2062,2064,5,203,0,0,2063,
        2062,1,0,0,0,2063,2064,1,0,0,0,2064,2065,1,0,0,0,2065,2122,3,194,
        97,0,2066,2068,5,118,0,0,2067,2069,5,203,0,0,2068,2067,1,0,0,0,2068,
        2069,1,0,0,0,2069,2070,1,0,0,0,2070,2122,5,188,0,0,2071,2073,5,119,
        0,0,2072,2074,5,203,0,0,2073,2072,1,0,0,0,2073,2074,1,0,0,0,2074,
        2075,1,0,0,0,2075,2122,5,188,0,0,2076,2078,5,120,0,0,2077,2079,5,
        203,0,0,2078,2077,1,0,0,0,2078,2079,1,0,0,0,2079,2080,1,0,0,0,2080,
        2122,5,188,0,0,2081,2083,5,121,0,0,2082,2084,5,203,0,0,2083,2082,
        1,0,0,0,2083,2084,1,0,0,0,2084,2085,1,0,0,0,2085,2122,5,195,0,0,
        2086,2088,5,122,0,0,2087,2089,5,203,0,0,2088,2087,1,0,0,0,2088,2089,
        1,0,0,0,2089,2090,1,0,0,0,2090,2122,3,194,97,0,2091,2093,5,123,0,
        0,2092,2094,5,203,0,0,2093,2092,1,0,0,0,2093,2094,1,0,0,0,2094,2095,
        1,0,0,0,2095,2122,3,194,97,0,2096,2098,5,124,0,0,2097,2099,5,203,
        0,0,2098,2097,1,0,0,0,2098,2099,1,0,0,0,2099,2100,1,0,0,0,2100,2122,
        3,194,97,0,2101,2103,5,125,0,0,2102,2104,5,203,0,0,2103,2102,1,0,
        0,0,2103,2104,1,0,0,0,2104,2105,1,0,0,0,2105,2122,3,194,97,0,2106,
        2108,5,126,0,0,2107,2109,5,203,0,0,2108,2107,1,0,0,0,2108,2109,1,
        0,0,0,2109,2110,1,0,0,0,2110,2122,5,188,0,0,2111,2113,5,127,0,0,
        2112,2114,5,203,0,0,2113,2112,1,0,0,0,2113,2114,1,0,0,0,2114,2115,
        1,0,0,0,2115,2122,5,188,0,0,2116,2118,5,128,0,0,2117,2119,5,203,
        0,0,2118,2117,1,0,0,0,2118,2119,1,0,0,0,2119,2120,1,0,0,0,2120,2122,
        5,188,0,0,2121,2054,1,0,0,0,2121,2055,1,0,0,0,2121,2056,1,0,0,0,
        2121,2061,1,0,0,0,2121,2066,1,0,0,0,2121,2071,1,0,0,0,2121,2076,
        1,0,0,0,2121,2081,1,0,0,0,2121,2086,1,0,0,0,2121,2091,1,0,0,0,2121,
        2096,1,0,0,0,2121,2101,1,0,0,0,2121,2106,1,0,0,0,2121,2111,1,0,0,
        0,2121,2116,1,0,0,0,2122,179,1,0,0,0,2123,2124,5,4,0,0,2124,2125,
        3,182,91,0,2125,2126,3,182,91,0,2126,181,1,0,0,0,2127,2128,5,200,
        0,0,2128,2129,3,184,92,0,2129,2130,5,201,0,0,2130,183,1,0,0,0,2131,
        2136,3,186,93,0,2132,2133,5,183,0,0,2133,2135,3,186,93,0,2134,2132,
        1,0,0,0,2135,2138,1,0,0,0,2136,2134,1,0,0,0,2136,2137,1,0,0,0,2137,
        185,1,0,0,0,2138,2136,1,0,0,0,2139,2144,3,188,94,0,2140,2141,5,184,
        0,0,2141,2143,3,188,94,0,2142,2140,1,0,0,0,2143,2146,1,0,0,0,2144,
        2142,1,0,0,0,2144,2145,1,0,0,0,2145,187,1,0,0,0,2146,2144,1,0,0,
        0,2147,2148,6,94,-1,0,2148,2149,5,200,0,0,2149,2150,3,184,92,0,2150,
        2151,5,201,0,0,2151,2287,1,0,0,0,2152,2287,5,132,0,0,2153,2154,5,
        134,0,0,2154,2155,7,2,0,0,2155,2156,7,3,0,0,2156,2287,7,2,0,0,2157,
        2159,5,135,0,0,2158,2160,5,215,0,0,2159,2158,1,0,0,0,2159,2160,1,
        0,0,0,2160,2161,1,0,0,0,2161,2162,5,216,0,0,2162,2163,5,217,0,0,
        2163,2287,3,192,96,0,2164,2165,5,136,0,0,2165,2287,3,188,94,29,2166,
        2167,5,137,0,0,2167,2287,3,188,94,28,2168,2169,5,138,0,0,2169,2287,
        3,188,94,27,2170,2178,5,139,0,0,2171,2179,5,196,0,0,2172,2175,5,
        195,0,0,2173,2174,5,202,0,0,2174,2176,5,195,0,0,2175,2173,1,0,0,
        0,2175,2176,1,0,0,0,2176,2179,1,0,0,0,2177,2179,5,209,0,0,2178,2171,
        1,0,0,0,2178,2172,1,0,0,0,2178,2177,1,0,0,0,2179,2287,1,0,0,0,2180,
        2287,5,140,0,0,2181,2182,5,141,0,0,2182,2287,5,188,0,0,2183,2287,
        5,142,0,0,2184,2197,5,143,0,0,2185,2198,5,196,0,0,2186,2189,5,195,
        0,0,2187,2188,5,202,0,0,2188,2190,5,195,0,0,2189,2187,1,0,0,0,2189,
        2190,1,0,0,0,2190,2198,1,0,0,0,2191,2194,5,191,0,0,2192,2193,5,202,
        0,0,2193,2195,5,191,0,0,2194,2192,1,0,0,0,2194,2195,1,0,0,0,2195,
        2198,1,0,0,0,2196,2198,5,209,0,0,2197,2185,1,0,0,0,2197,2186,1,0,
        0,0,2197,2191,1,0,0,0,2197,2196,1,0,0,0,2198,2287,1,0,0,0,2199,2200,
        5,185,0,0,2200,2287,3,188,94,21,2201,2202,5,144,0,0,2202,2203,5,
        200,0,0,2203,2205,3,192,96,0,2204,2206,5,186,0,0,2205,2204,1,0,0,
        0,2205,2206,1,0,0,0,2206,2207,1,0,0,0,2207,2209,3,192,96,0,2208,
        2210,5,186,0,0,2209,2208,1,0,0,0,2209,2210,1,0,0,0,2210,2211,1,0,
        0,0,2211,2212,3,192,96,0,2212,2213,5,201,0,0,2213,2214,5,145,0,0,
        2214,2215,3,192,96,0,2215,2287,1,0,0,0,2216,2217,5,144,0,0,2217,
        2218,5,200,0,0,2218,2220,5,181,0,0,2219,2221,5,203,0,0,2220,2219,
        1,0,0,0,2220,2221,1,0,0,0,2221,2222,1,0,0,0,2222,2224,3,182,91,0,
        2223,2225,5,186,0,0,2224,2223,1,0,0,0,2224,2225,1,0,0,0,2225,2231,
        1,0,0,0,2226,2228,5,182,0,0,2227,2229,5,203,0,0,2228,2227,1,0,0,
        0,2228,2229,1,0,0,0,2229,2230,1,0,0,0,2230,2232,3,182,91,0,2231,
        2226,1,0,0,0,2231,2232,1,0,0,0,2232,2233,1,0,0,0,2233,2234,5,201,
        0,0,2234,2235,5,145,0,0,2235,2236,3,192,96,0,2236,2287,1,0,0,0,2237,
        2287,5,146,0,0,2238,2287,5,147,0,0,2239,2247,5,148,0,0,2240,2248,
        5,197,0,0,2241,2244,5,188,0,0,2242,2243,5,202,0,0,2243,2245,5,188,
        0,0,2244,2242,1,0,0,0,2244,2245,1,0,0,0,2245,2248,1,0,0,0,2246,2248,
        5,209,0,0,2247,2240,1,0,0,0,2247,2241,1,0,0,0,2247,2246,1,0,0,0,
        2248,2287,1,0,0,0,2249,2257,5,149,0,0,2250,2258,5,196,0,0,2251,2254,
        5,195,0,0,2252,2253,5,202,0,0,2253,2255,5,195,0,0,2254,2252,1,0,
        0,0,2254,2255,1,0,0,0,2255,2258,1,0,0,0,2256,2258,5,209,0,0,2257,
        2250,1,0,0,0,2257,2251,1,0,0,0,2257,2256,1,0,0,0,2258,2287,1,0,0,
        0,2259,2272,5,151,0,0,2260,2273,5,196,0,0,2261,2264,5,195,0,0,2262,
        2263,5,202,0,0,2263,2265,5,195,0,0,2264,2262,1,0,0,0,2264,2265,1,
        0,0,0,2265,2273,1,0,0,0,2266,2269,5,191,0,0,2267,2268,5,202,0,0,
        2268,2270,5,191,0,0,2269,2267,1,0,0,0,2269,2270,1,0,0,0,2270,2273,
        1,0,0,0,2271,2273,5,209,0,0,2272,2260,1,0,0,0,2272,2261,1,0,0,0,
        2272,2266,1,0,0,0,2272,2271,1,0,0,0,2273,2287,1,0,0,0,2274,2287,
        5,152,0,0,2275,2287,5,153,0,0,2276,2287,5,154,0,0,2277,2287,5,155,
        0,0,2278,2287,5,156,0,0,2279,2287,5,157,0,0,2280,2287,5,158,0,0,
        2281,2287,5,159,0,0,2282,2287,5,160,0,0,2283,2287,5,161,0,0,2284,
        2287,5,129,0,0,2285,2287,5,130,0,0,2286,2147,1,0,0,0,2286,2152,1,
        0,0,0,2286,2153,1,0,0,0,2286,2157,1,0,0,0,2286,2164,1,0,0,0,2286,
        2166,1,0,0,0,2286,2168,1,0,0,0,2286,2170,1,0,0,0,2286,2180,1,0,0,
        0,2286,2181,1,0,0,0,2286,2183,1,0,0,0,2286,2184,1,0,0,0,2286,2199,
        1,0,0,0,2286,2201,1,0,0,0,2286,2216,1,0,0,0,2286,2237,1,0,0,0,2286,
        2238,1,0,0,0,2286,2239,1,0,0,0,2286,2249,1,0,0,0,2286,2259,1,0,0,
        0,2286,2274,1,0,0,0,2286,2275,1,0,0,0,2286,2276,1,0,0,0,2286,2277,
        1,0,0,0,2286,2278,1,0,0,0,2286,2279,1,0,0,0,2286,2280,1,0,0,0,2286,
        2281,1,0,0,0,2286,2282,1,0,0,0,2286,2283,1,0,0,0,2286,2284,1,0,0,
        0,2286,2285,1,0,0,0,2287,2296,1,0,0,0,2288,2289,10,32,0,0,2289,2290,
        5,133,0,0,2290,2295,3,192,96,0,2291,2292,10,14,0,0,2292,2293,5,150,
        0,0,2293,2295,3,192,96,0,2294,2288,1,0,0,0,2294,2291,1,0,0,0,2295,
        2298,1,0,0,0,2296,2294,1,0,0,0,2296,2297,1,0,0,0,2297,189,1,0,0,
        0,2298,2296,1,0,0,0,2299,2300,7,4,0,0,2300,191,1,0,0,0,2301,2302,
        7,5,0,0,2302,193,1,0,0,0,2303,2304,7,4,0,0,2304,195,1,0,0,0,2305,
        2306,7,5,0,0,2306,197,1,0,0,0,2307,2318,5,131,0,0,2308,2316,5,232,
        0,0,2309,2311,5,235,0,0,2310,2309,1,0,0,0,2311,2314,1,0,0,0,2312,
        2310,1,0,0,0,2312,2313,1,0,0,0,2313,2317,1,0,0,0,2314,2312,1,0,0,
        0,2315,2317,5,236,0,0,2316,2312,1,0,0,0,2316,2315,1,0,0,0,2317,2319,
        1,0,0,0,2318,2308,1,0,0,0,2318,2319,1,0,0,0,2319,2320,1,0,0,0,2320,
        2324,5,233,0,0,2321,2323,5,235,0,0,2322,2321,1,0,0,0,2323,2326,1,
        0,0,0,2324,2322,1,0,0,0,2324,2325,1,0,0,0,2325,2327,1,0,0,0,2326,
        2324,1,0,0,0,2327,2328,5,234,0,0,2328,199,1,0,0,0,2329,2330,5,162,
        0,0,2330,2331,3,202,101,0,2331,2332,3,182,91,0,2332,201,1,0,0,0,
        2333,2334,7,6,0,0,2334,2335,3,204,102,0,2335,2336,5,238,0,0,2336,
        2340,1,0,0,0,2337,2338,5,165,0,0,2338,2340,3,212,106,0,2339,2333,
        1,0,0,0,2339,2337,1,0,0,0,2340,203,1,0,0,0,2341,2344,5,248,0,0,2342,
        2343,5,239,0,0,2343,2345,3,206,103,0,2344,2342,1,0,0,0,2344,2345,
        1,0,0,0,2345,205,1,0,0,0,2346,2349,3,208,104,0,2347,2348,7,7,0,0,
        2348,2350,3,206,103,0,2349,2347,1,0,0,0,2349,2350,1,0,0,0,2350,207,
        1,0,0,0,2351,2359,5,248,0,0,2352,2359,3,210,105,0,2353,2359,5,246,
        0,0,2354,2359,5,247,0,0,2355,2359,5,272,0,0,2356,2359,5,271,0,0,
        2357,2359,5,273,0,0,2358,2351,1,0,0,0,2358,2352,1,0,0,0,2358,2353,
        1,0,0,0,2358,2354,1,0,0,0,2358,2355,1,0,0,0,2358,2356,1,0,0,0,2358,
        2357,1,0,0,0,2359,209,1,0,0,0,2360,2361,5,249,0,0,2361,2362,5,275,
        0,0,2362,2363,3,208,104,0,2363,2364,5,238,0,0,2364,2480,1,0,0,0,
        2365,2366,5,250,0,0,2366,2367,5,275,0,0,2367,2368,3,208,104,0,2368,
        2369,5,238,0,0,2369,2480,1,0,0,0,2370,2371,5,252,0,0,2371,2372,5,
        275,0,0,2372,2373,3,208,104,0,2373,2374,5,238,0,0,2374,2480,1,0,
        0,0,2375,2376,5,253,0,0,2376,2377,5,275,0,0,2377,2378,3,208,104,
        0,2378,2379,5,238,0,0,2379,2480,1,0,0,0,2380,2381,5,254,0,0,2381,
        2382,5,275,0,0,2382,2383,3,208,104,0,2383,2384,5,238,0,0,2384,2480,
        1,0,0,0,2385,2386,5,255,0,0,2386,2387,5,275,0,0,2387,2388,3,208,
        104,0,2388,2389,5,238,0,0,2389,2480,1,0,0,0,2390,2391,5,256,0,0,
        2391,2392,5,275,0,0,2392,2393,3,208,104,0,2393,2394,5,238,0,0,2394,
        2480,1,0,0,0,2395,2396,5,257,0,0,2396,2397,5,275,0,0,2397,2398,3,
        208,104,0,2398,2399,5,238,0,0,2399,2480,1,0,0,0,2400,2401,5,258,
        0,0,2401,2402,5,275,0,0,2402,2403,3,208,104,0,2403,2404,5,238,0,
        0,2404,2480,1,0,0,0,2405,2406,5,259,0,0,2406,2407,5,275,0,0,2407,
        2408,3,208,104,0,2408,2409,5,238,0,0,2409,2480,1,0,0,0,2410,2411,
        5,260,0,0,2411,2412,5,275,0,0,2412,2413,3,208,104,0,2413,2414,5,
        238,0,0,2414,2480,1,0,0,0,2415,2416,5,261,0,0,2416,2417,5,275,0,
        0,2417,2422,3,208,104,0,2418,2419,5,245,0,0,2419,2421,3,208,104,
        0,2420,2418,1,0,0,0,2421,2424,1,0,0,0,2422,2420,1,0,0,0,2422,2423,
        1,0,0,0,2423,2425,1,0,0,0,2424,2422,1,0,0,0,2425,2426,5,238,0,0,
        2426,2480,1,0,0,0,2427,2428,5,262,0,0,2428,2429,5,275,0,0,2429,2430,
        3,208,104,0,2430,2431,5,238,0,0,2431,2480,1,0,0,0,2432,2433,5,263,
        0,0,2433,2434,5,275,0,0,2434,2439,3,208,104,0,2435,2436,5,245,0,
        0,2436,2438,3,208,104,0,2437,2435,1,0,0,0,2438,2441,1,0,0,0,2439,
        2437,1,0,0,0,2439,2440,1,0,0,0,2440,2442,1,0,0,0,2441,2439,1,0,0,
        0,2442,2443,5,238,0,0,2443,2480,1,0,0,0,2444,2445,5,264,0,0,2445,
        2446,5,275,0,0,2446,2447,3,208,104,0,2447,2448,5,245,0,0,2448,2449,
        3,208,104,0,2449,2450,5,238,0,0,2450,2480,1,0,0,0,2451,2452,5,265,
        0,0,2452,2453,5,275,0,0,2453,2454,3,208,104,0,2454,2455,5,238,0,
        0,2455,2480,1,0,0,0,2456,2457,5,266,0,0,2457,2458,5,275,0,0,2458,
        2480,5,238,0,0,2459,2460,5,267,0,0,2460,2461,5,275,0,0,2461,2462,
        3,208,104,0,2462,2463,5,238,0,0,2463,2480,1,0,0,0,2464,2465,5,268,
        0,0,2465,2466,5,275,0,0,2466,2467,3,208,104,0,2467,2468,5,238,0,
        0,2468,2480,1,0,0,0,2469,2470,5,269,0,0,2470,2471,5,275,0,0,2471,
        2472,3,208,104,0,2472,2473,5,238,0,0,2473,2480,1,0,0,0,2474,2475,
        5,270,0,0,2475,2476,5,275,0,0,2476,2477,3,208,104,0,2477,2478,5,
        238,0,0,2478,2480,1,0,0,0,2479,2360,1,0,0,0,2479,2365,1,0,0,0,2479,
        2370,1,0,0,0,2479,2375,1,0,0,0,2479,2380,1,0,0,0,2479,2385,1,0,0,
        0,2479,2390,1,0,0,0,2479,2395,1,0,0,0,2479,2400,1,0,0,0,2479,2405,
        1,0,0,0,2479,2410,1,0,0,0,2479,2415,1,0,0,0,2479,2427,1,0,0,0,2479,
        2432,1,0,0,0,2479,2444,1,0,0,0,2479,2451,1,0,0,0,2479,2456,1,0,0,
        0,2479,2459,1,0,0,0,2479,2464,1,0,0,0,2479,2469,1,0,0,0,2479,2474,
        1,0,0,0,2480,211,1,0,0,0,2481,2482,7,8,0,0,2482,2483,5,277,0,0,2483,
        2484,5,286,0,0,2484,2485,5,278,0,0,2485,213,1,0,0,0,2486,2487,5,
        166,0,0,2487,2488,5,271,0,0,2488,2489,5,239,0,0,2489,2490,3,216,
        108,0,2490,2491,5,238,0,0,2491,215,1,0,0,0,2492,2495,3,208,104,0,
        2493,2494,7,7,0,0,2494,2496,3,216,108,0,2495,2493,1,0,0,0,2495,2496,
        1,0,0,0,2496,217,1,0,0,0,2497,2499,5,167,0,0,2498,2500,7,9,0,0,2499,
        2498,1,0,0,0,2499,2500,1,0,0,0,2500,2501,1,0,0,0,2501,2502,5,168,
        0,0,2502,2503,5,203,0,0,2503,2504,7,10,0,0,2504,2505,5,203,0,0,2505,
        2511,3,182,91,0,2506,2507,5,168,0,0,2507,2508,5,203,0,0,2508,2509,
        7,10,0,0,2509,2510,5,203,0,0,2510,2512,3,182,91,0,2511,2506,1,0,
        0,0,2511,2512,1,0,0,0,2512,2513,1,0,0,0,2513,2514,5,2,0,0,2514,219,
        1,0,0,0,2515,2519,5,170,0,0,2516,2518,3,222,111,0,2517,2516,1,0,
        0,0,2518,2521,1,0,0,0,2519,2517,1,0,0,0,2519,2520,1,0,0,0,2520,2522,
        1,0,0,0,2521,2519,1,0,0,0,2522,2523,5,2,0,0,2523,221,1,0,0,0,2524,
        2525,5,94,0,0,2525,2526,5,195,0,0,2526,2527,5,195,0,0,2527,2528,
        5,195,0,0,2528,2529,3,194,97,0,2529,2534,3,194,97,0,2530,2531,5,
        171,0,0,2531,2532,3,194,97,0,2532,2533,3,194,97,0,2533,2535,1,0,
        0,0,2534,2530,1,0,0,0,2534,2535,1,0,0,0,2535,2580,1,0,0,0,2536,2537,
        5,136,0,0,2537,2538,5,195,0,0,2538,2539,5,195,0,0,2539,2540,3,194,
        97,0,2540,2541,3,194,97,0,2541,2580,1,0,0,0,2542,2543,7,11,0,0,2543,
        2544,5,195,0,0,2544,2545,5,195,0,0,2545,2546,5,195,0,0,2546,2549,
        5,195,0,0,2547,2548,5,172,0,0,2548,2550,5,188,0,0,2549,2547,1,0,
        0,0,2549,2550,1,0,0,0,2550,2551,1,0,0,0,2551,2552,3,194,97,0,2552,
        2553,5,188,0,0,2553,2554,3,194,97,0,2554,2580,1,0,0,0,2555,2556,
        5,173,0,0,2556,2557,5,196,0,0,2557,2558,5,196,0,0,2558,2559,3,194,
        97,0,2559,2560,3,194,97,0,2560,2580,1,0,0,0,2561,2562,5,175,0,0,
        2562,2563,5,195,0,0,2563,2564,5,195,0,0,2564,2565,3,194,97,0,2565,
        2566,3,194,97,0,2566,2567,3,194,97,0,2567,2568,3,194,97,0,2568,2580,
        1,0,0,0,2569,2570,5,176,0,0,2570,2571,5,195,0,0,2571,2572,3,194,
        97,0,2572,2573,3,194,97,0,2573,2574,3,194,97,0,2574,2575,3,194,97,
        0,2575,2580,1,0,0,0,2576,2577,7,12,0,0,2577,2580,5,195,0,0,2578,
        2580,5,178,0,0,2579,2524,1,0,0,0,2579,2536,1,0,0,0,2579,2542,1,0,
        0,0,2579,2555,1,0,0,0,2579,2561,1,0,0,0,2579,2569,1,0,0,0,2579,2576,
        1,0,0,0,2579,2578,1,0,0,0,2580,223,1,0,0,0,2581,2582,5,179,0,0,2582,
        2583,5,293,0,0,2583,2584,5,290,0,0,2584,2603,5,288,0,0,2585,2587,
        5,291,0,0,2586,2585,1,0,0,0,2587,2590,1,0,0,0,2588,2586,1,0,0,0,
        2588,2589,1,0,0,0,2589,2604,1,0,0,0,2590,2588,1,0,0,0,2591,2593,
        5,292,0,0,2592,2591,1,0,0,0,2593,2596,1,0,0,0,2594,2592,1,0,0,0,
        2594,2595,1,0,0,0,2595,2604,1,0,0,0,2596,2594,1,0,0,0,2597,2599,
        5,294,0,0,2598,2597,1,0,0,0,2599,2602,1,0,0,0,2600,2598,1,0,0,0,
        2600,2601,1,0,0,0,2601,2604,1,0,0,0,2602,2600,1,0,0,0,2603,2588,
        1,0,0,0,2603,2594,1,0,0,0,2603,2600,1,0,0,0,2604,2605,1,0,0,0,2605,
        2606,5,289,0,0,2606,2607,5,180,0,0,2607,2612,5,297,0,0,2608,2611,
        3,214,107,0,2609,2611,3,52,26,0,2610,2608,1,0,0,0,2610,2609,1,0,
        0,0,2611,2614,1,0,0,0,2612,2610,1,0,0,0,2612,2613,1,0,0,0,2613,2615,
        1,0,0,0,2614,2612,1,0,0,0,2615,2616,5,2,0,0,2616,2617,5,180,0,0,
        2617,2618,5,297,0,0,2618,225,1,0,0,0,2619,2620,5,179,0,0,2620,2621,
        5,293,0,0,2621,2622,5,290,0,0,2622,2641,5,288,0,0,2623,2625,5,291,
        0,0,2624,2623,1,0,0,0,2625,2628,1,0,0,0,2626,2624,1,0,0,0,2626,2627,
        1,0,0,0,2627,2642,1,0,0,0,2628,2626,1,0,0,0,2629,2631,5,292,0,0,
        2630,2629,1,0,0,0,2631,2634,1,0,0,0,2632,2630,1,0,0,0,2632,2633,
        1,0,0,0,2633,2642,1,0,0,0,2634,2632,1,0,0,0,2635,2637,5,294,0,0,
        2636,2635,1,0,0,0,2637,2640,1,0,0,0,2638,2636,1,0,0,0,2638,2639,
        1,0,0,0,2639,2642,1,0,0,0,2640,2638,1,0,0,0,2641,2626,1,0,0,0,2641,
        2632,1,0,0,0,2641,2638,1,0,0,0,2642,2643,1,0,0,0,2643,2644,5,289,
        0,0,2644,2645,5,180,0,0,2645,2650,5,297,0,0,2646,2649,3,214,107,
        0,2647,2649,3,60,30,0,2648,2646,1,0,0,0,2648,2647,1,0,0,0,2649,2652,
        1,0,0,0,2650,2648,1,0,0,0,2650,2651,1,0,0,0,2651,2653,1,0,0,0,2652,
        2650,1,0,0,0,2653,2654,5,2,0,0,2654,2655,5,180,0,0,2655,2656,5,297,
        0,0,2656,227,1,0,0,0,2657,2658,5,179,0,0,2658,2659,5,293,0,0,2659,
        2660,5,290,0,0,2660,2679,5,288,0,0,2661,2663,5,291,0,0,2662,2661,
        1,0,0,0,2663,2666,1,0,0,0,2664,2662,1,0,0,0,2664,2665,1,0,0,0,2665,
        2680,1,0,0,0,2666,2664,1,0,0,0,2667,2669,5,292,0,0,2668,2667,1,0,
        0,0,2669,2672,1,0,0,0,2670,2668,1,0,0,0,2670,2671,1,0,0,0,2671,2680,
        1,0,0,0,2672,2670,1,0,0,0,2673,2675,5,294,0,0,2674,2673,1,0,0,0,
        2675,2678,1,0,0,0,2676,2674,1,0,0,0,2676,2677,1,0,0,0,2677,2680,
        1,0,0,0,2678,2676,1,0,0,0,2679,2664,1,0,0,0,2679,2670,1,0,0,0,2679,
        2676,1,0,0,0,2680,2681,1,0,0,0,2681,2682,5,289,0,0,2682,2683,5,180,
        0,0,2683,2688,5,297,0,0,2684,2687,3,214,107,0,2685,2687,3,64,32,
        0,2686,2684,1,0,0,0,2686,2685,1,0,0,0,2687,2690,1,0,0,0,2688,2686,
        1,0,0,0,2688,2689,1,0,0,0,2689,2691,1,0,0,0,2690,2688,1,0,0,0,2691,
        2692,5,2,0,0,2692,2693,5,180,0,0,2693,2694,5,297,0,0,2694,229,1,
        0,0,0,2695,2696,5,179,0,0,2696,2697,5,293,0,0,2697,2698,5,290,0,
        0,2698,2717,5,288,0,0,2699,2701,5,291,0,0,2700,2699,1,0,0,0,2701,
        2704,1,0,0,0,2702,2700,1,0,0,0,2702,2703,1,0,0,0,2703,2718,1,0,0,
        0,2704,2702,1,0,0,0,2705,2707,5,292,0,0,2706,2705,1,0,0,0,2707,2710,
        1,0,0,0,2708,2706,1,0,0,0,2708,2709,1,0,0,0,2709,2718,1,0,0,0,2710,
        2708,1,0,0,0,2711,2713,5,294,0,0,2712,2711,1,0,0,0,2713,2716,1,0,
        0,0,2714,2712,1,0,0,0,2714,2715,1,0,0,0,2715,2718,1,0,0,0,2716,2714,
        1,0,0,0,2717,2702,1,0,0,0,2717,2708,1,0,0,0,2717,2714,1,0,0,0,2718,
        2719,1,0,0,0,2719,2720,5,289,0,0,2720,2721,5,180,0,0,2721,2726,5,
        297,0,0,2722,2725,3,214,107,0,2723,2725,3,92,46,0,2724,2722,1,0,
        0,0,2724,2723,1,0,0,0,2725,2728,1,0,0,0,2726,2724,1,0,0,0,2726,2727,
        1,0,0,0,2727,2729,1,0,0,0,2728,2726,1,0,0,0,2729,2730,5,2,0,0,2730,
        2731,5,180,0,0,2731,2732,5,297,0,0,2732,231,1,0,0,0,2733,2734,5,
        179,0,0,2734,2735,5,293,0,0,2735,2736,5,290,0,0,2736,2755,5,288,
        0,0,2737,2739,5,291,0,0,2738,2737,1,0,0,0,2739,2742,1,0,0,0,2740,
        2738,1,0,0,0,2740,2741,1,0,0,0,2741,2756,1,0,0,0,2742,2740,1,0,0,
        0,2743,2745,5,292,0,0,2744,2743,1,0,0,0,2745,2748,1,0,0,0,2746,2744,
        1,0,0,0,2746,2747,1,0,0,0,2747,2756,1,0,0,0,2748,2746,1,0,0,0,2749,
        2751,5,294,0,0,2750,2749,1,0,0,0,2751,2754,1,0,0,0,2752,2750,1,0,
        0,0,2752,2753,1,0,0,0,2753,2756,1,0,0,0,2754,2752,1,0,0,0,2755,2740,
        1,0,0,0,2755,2746,1,0,0,0,2755,2752,1,0,0,0,2756,2757,1,0,0,0,2757,
        2758,5,289,0,0,2758,2759,5,180,0,0,2759,2764,5,297,0,0,2760,2763,
        3,214,107,0,2761,2763,3,96,48,0,2762,2760,1,0,0,0,2762,2761,1,0,
        0,0,2763,2766,1,0,0,0,2764,2762,1,0,0,0,2764,2765,1,0,0,0,2765,2767,
        1,0,0,0,2766,2764,1,0,0,0,2767,2768,5,2,0,0,2768,2769,5,180,0,0,
        2769,2770,5,297,0,0,2770,233,1,0,0,0,2771,2772,5,179,0,0,2772,2773,
        5,293,0,0,2773,2774,5,290,0,0,2774,2793,5,288,0,0,2775,2777,5,291,
        0,0,2776,2775,1,0,0,0,2777,2780,1,0,0,0,2778,2776,1,0,0,0,2778,2779,
        1,0,0,0,2779,2794,1,0,0,0,2780,2778,1,0,0,0,2781,2783,5,292,0,0,
        2782,2781,1,0,0,0,2783,2786,1,0,0,0,2784,2782,1,0,0,0,2784,2785,
        1,0,0,0,2785,2794,1,0,0,0,2786,2784,1,0,0,0,2787,2789,5,294,0,0,
        2788,2787,1,0,0,0,2789,2792,1,0,0,0,2790,2788,1,0,0,0,2790,2791,
        1,0,0,0,2791,2794,1,0,0,0,2792,2790,1,0,0,0,2793,2778,1,0,0,0,2793,
        2784,1,0,0,0,2793,2790,1,0,0,0,2794,2795,1,0,0,0,2795,2796,5,289,
        0,0,2796,2797,5,180,0,0,2797,2802,5,297,0,0,2798,2801,3,214,107,
        0,2799,2801,3,130,65,0,2800,2798,1,0,0,0,2800,2799,1,0,0,0,2801,
        2804,1,0,0,0,2802,2800,1,0,0,0,2802,2803,1,0,0,0,2803,2805,1,0,0,
        0,2804,2802,1,0,0,0,2805,2806,5,2,0,0,2806,2807,5,180,0,0,2807,2808,
        5,297,0,0,2808,235,1,0,0,0,2809,2810,5,179,0,0,2810,2811,5,293,0,
        0,2811,2812,5,290,0,0,2812,2831,5,288,0,0,2813,2815,5,291,0,0,2814,
        2813,1,0,0,0,2815,2818,1,0,0,0,2816,2814,1,0,0,0,2816,2817,1,0,0,
        0,2817,2832,1,0,0,0,2818,2816,1,0,0,0,2819,2821,5,292,0,0,2820,2819,
        1,0,0,0,2821,2824,1,0,0,0,2822,2820,1,0,0,0,2822,2823,1,0,0,0,2823,
        2832,1,0,0,0,2824,2822,1,0,0,0,2825,2827,5,294,0,0,2826,2825,1,0,
        0,0,2827,2830,1,0,0,0,2828,2826,1,0,0,0,2828,2829,1,0,0,0,2829,2832,
        1,0,0,0,2830,2828,1,0,0,0,2831,2816,1,0,0,0,2831,2822,1,0,0,0,2831,
        2828,1,0,0,0,2832,2833,1,0,0,0,2833,2834,5,289,0,0,2834,2835,5,180,
        0,0,2835,2840,5,297,0,0,2836,2839,3,214,107,0,2837,2839,3,142,71,
        0,2838,2836,1,0,0,0,2838,2837,1,0,0,0,2839,2842,1,0,0,0,2840,2838,
        1,0,0,0,2840,2841,1,0,0,0,2841,2843,1,0,0,0,2842,2840,1,0,0,0,2843,
        2844,5,2,0,0,2844,2845,5,180,0,0,2845,2846,5,297,0,0,2846,237,1,
        0,0,0,2847,2848,5,179,0,0,2848,2849,5,293,0,0,2849,2850,5,290,0,
        0,2850,2869,5,288,0,0,2851,2853,5,291,0,0,2852,2851,1,0,0,0,2853,
        2856,1,0,0,0,2854,2852,1,0,0,0,2854,2855,1,0,0,0,2855,2870,1,0,0,
        0,2856,2854,1,0,0,0,2857,2859,5,292,0,0,2858,2857,1,0,0,0,2859,2862,
        1,0,0,0,2860,2858,1,0,0,0,2860,2861,1,0,0,0,2861,2870,1,0,0,0,2862,
        2860,1,0,0,0,2863,2865,5,294,0,0,2864,2863,1,0,0,0,2865,2868,1,0,
        0,0,2866,2864,1,0,0,0,2866,2867,1,0,0,0,2867,2870,1,0,0,0,2868,2866,
        1,0,0,0,2869,2854,1,0,0,0,2869,2860,1,0,0,0,2869,2866,1,0,0,0,2870,
        2871,1,0,0,0,2871,2872,5,289,0,0,2872,2873,5,180,0,0,2873,2878,5,
        297,0,0,2874,2877,3,214,107,0,2875,2877,3,156,78,0,2876,2874,1,0,
        0,0,2876,2875,1,0,0,0,2877,2880,1,0,0,0,2878,2876,1,0,0,0,2878,2879,
        1,0,0,0,2879,2881,1,0,0,0,2880,2878,1,0,0,0,2881,2882,5,2,0,0,2882,
        2883,5,180,0,0,2883,2884,5,297,0,0,2884,239,1,0,0,0,2885,2886,5,
        179,0,0,2886,2887,5,293,0,0,2887,2888,5,290,0,0,2888,2907,5,288,
        0,0,2889,2891,5,291,0,0,2890,2889,1,0,0,0,2891,2894,1,0,0,0,2892,
        2890,1,0,0,0,2892,2893,1,0,0,0,2893,2908,1,0,0,0,2894,2892,1,0,0,
        0,2895,2897,5,292,0,0,2896,2895,1,0,0,0,2897,2900,1,0,0,0,2898,2896,
        1,0,0,0,2898,2899,1,0,0,0,2899,2908,1,0,0,0,2900,2898,1,0,0,0,2901,
        2903,5,294,0,0,2902,2901,1,0,0,0,2903,2906,1,0,0,0,2904,2902,1,0,
        0,0,2904,2905,1,0,0,0,2905,2908,1,0,0,0,2906,2904,1,0,0,0,2907,2892,
        1,0,0,0,2907,2898,1,0,0,0,2907,2904,1,0,0,0,2908,2909,1,0,0,0,2909,
        2910,5,289,0,0,2910,2911,5,180,0,0,2911,2916,5,297,0,0,2912,2915,
        3,214,107,0,2913,2915,3,160,80,0,2914,2912,1,0,0,0,2914,2913,1,0,
        0,0,2915,2918,1,0,0,0,2916,2914,1,0,0,0,2916,2917,1,0,0,0,2917,2919,
        1,0,0,0,2918,2916,1,0,0,0,2919,2920,5,2,0,0,2920,2921,5,180,0,0,
        2921,2922,5,297,0,0,2922,241,1,0,0,0,2923,2924,5,179,0,0,2924,2925,
        5,293,0,0,2925,2926,5,290,0,0,2926,2945,5,288,0,0,2927,2929,5,291,
        0,0,2928,2927,1,0,0,0,2929,2932,1,0,0,0,2930,2928,1,0,0,0,2930,2931,
        1,0,0,0,2931,2946,1,0,0,0,2932,2930,1,0,0,0,2933,2935,5,292,0,0,
        2934,2933,1,0,0,0,2935,2938,1,0,0,0,2936,2934,1,0,0,0,2936,2937,
        1,0,0,0,2937,2946,1,0,0,0,2938,2936,1,0,0,0,2939,2941,5,294,0,0,
        2940,2939,1,0,0,0,2941,2944,1,0,0,0,2942,2940,1,0,0,0,2942,2943,
        1,0,0,0,2943,2946,1,0,0,0,2944,2942,1,0,0,0,2945,2930,1,0,0,0,2945,
        2936,1,0,0,0,2945,2942,1,0,0,0,2946,2947,1,0,0,0,2947,2948,5,289,
        0,0,2948,2949,5,180,0,0,2949,2954,5,297,0,0,2950,2953,3,214,107,
        0,2951,2953,3,176,88,0,2952,2950,1,0,0,0,2952,2951,1,0,0,0,2953,
        2956,1,0,0,0,2954,2952,1,0,0,0,2954,2955,1,0,0,0,2955,2957,1,0,0,
        0,2956,2954,1,0,0,0,2957,2958,5,2,0,0,2958,2959,5,180,0,0,2959,2960,
        5,297,0,0,2960,243,1,0,0,0,2961,2962,5,179,0,0,2962,2963,5,293,0,
        0,2963,2964,5,290,0,0,2964,2983,5,288,0,0,2965,2967,5,291,0,0,2966,
        2965,1,0,0,0,2967,2970,1,0,0,0,2968,2966,1,0,0,0,2968,2969,1,0,0,
        0,2969,2984,1,0,0,0,2970,2968,1,0,0,0,2971,2973,5,292,0,0,2972,2971,
        1,0,0,0,2973,2976,1,0,0,0,2974,2972,1,0,0,0,2974,2975,1,0,0,0,2975,
        2984,1,0,0,0,2976,2974,1,0,0,0,2977,2979,5,294,0,0,2978,2977,1,0,
        0,0,2979,2982,1,0,0,0,2980,2978,1,0,0,0,2980,2981,1,0,0,0,2981,2984,
        1,0,0,0,2982,2980,1,0,0,0,2983,2968,1,0,0,0,2983,2974,1,0,0,0,2983,
        2980,1,0,0,0,2984,2985,1,0,0,0,2985,2986,5,289,0,0,2986,2987,5,180,
        0,0,2987,2992,5,297,0,0,2988,2991,3,214,107,0,2989,2991,3,180,90,
        0,2990,2988,1,0,0,0,2990,2989,1,0,0,0,2991,2994,1,0,0,0,2992,2990,
        1,0,0,0,2992,2993,1,0,0,0,2993,2995,1,0,0,0,2994,2992,1,0,0,0,2995,
        2996,5,2,0,0,2996,2997,5,180,0,0,2997,2998,5,297,0,0,2998,245,1,
        0,0,0,351,301,303,312,318,324,333,341,349,357,365,369,372,378,384,
        390,399,408,417,426,435,444,453,462,471,480,489,498,507,516,525,
        534,543,552,561,579,584,601,614,638,641,648,651,656,661,666,669,
        672,676,681,686,693,697,702,707,712,717,722,727,730,737,743,746,
        762,772,777,786,797,800,805,812,826,831,840,857,862,867,872,879,
        884,891,903,908,915,924,931,936,947,952,963,972,979,984,988,993,
        996,1001,1006,1011,1015,1021,1025,1029,1032,1034,1038,1050,1058,
        1063,1072,1075,1083,1093,1104,1112,1116,1121,1132,1135,1138,1150,
        1157,1162,1174,1179,1194,1221,1231,1241,1244,1249,1254,1258,1270,
        1294,1302,1309,1320,1326,1332,1336,1347,1353,1359,1367,1370,1380,
        1386,1392,1397,1406,1409,1412,1416,1428,1435,1442,1448,1453,1463,
        1475,1480,1491,1502,1507,1516,1542,1551,1554,1573,1585,1590,1607,
        1612,1621,1633,1636,1641,1646,1662,1667,1676,1681,1695,1700,1709,
        1726,1739,1744,1755,1758,1766,1781,1787,1792,1798,1803,1809,1815,
        1821,1833,1836,1840,1847,1853,1864,1869,1878,1881,1898,1908,1911,
        1916,1927,1932,1948,1959,1964,1969,1974,1981,1993,2002,2007,2016,
        2024,2030,2035,2040,2047,2058,2063,2068,2073,2078,2083,2088,2093,
        2098,2103,2108,2113,2118,2121,2136,2144,2159,2175,2178,2189,2194,
        2197,2205,2209,2220,2224,2228,2231,2244,2247,2254,2257,2264,2269,
        2272,2286,2294,2296,2312,2316,2318,2324,2339,2344,2349,2358,2422,
        2439,2479,2495,2499,2511,2519,2534,2549,2579,2588,2594,2600,2603,
        2610,2612,2626,2632,2638,2641,2648,2650,2664,2670,2676,2679,2686,
        2688,2702,2708,2714,2717,2724,2726,2740,2746,2752,2755,2762,2764,
        2778,2784,2790,2793,2800,2802,2816,2822,2828,2831,2838,2840,2854,
        2860,2866,2869,2876,2878,2892,2898,2904,2907,2914,2916,2930,2936,
        2942,2945,2952,2954,2968,2974,2980,2983,2990,2992
    ]

class XplorMRParser ( Parser ):

    grammarFileName = "XplorMRParser.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ "<INVALID>", "'SET'", "<INVALID>", "'NOE'", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "'BHIG'", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "'CUTOFF'", "'CUTON'", "'FROM'", "'TO'", 
                     "'PEAK'", "'SPECTRUM'", "'VOLUME'", "'PPM1'", "'PPM2'", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "'TYPE'", "<INVALID>", "<INVALID>", "'CV'", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "'XADC'", "<INVALID>", "'SIZE'", 
                     "'ZERO'", "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "'RAMA'", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "'SORT'", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "'DCSA'", "<INVALID>", "'PCSA'", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "'TAUC'", "<INVALID>", "'XPCS'", "'TOLL'", 
                     "'SAVE'", "'FMED'", "'ERRON'", "'ERROFF'", "'FON'", 
                     "'FOFF'", "'SON'", "'SOFF'", "'FRUN'", "<INVALID>", 
                     "<INVALID>", "'XCCR'", "'WEIP'", "'KDIR'", "'KLIN'", 
                     "'NSEG'", "'NMIN'", "'NMAX'", "'SEGM'", "'OHCUT'", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "'UPDFRQ'", 
                     "'PRNFRQ'", "'FREEMODE'", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "'ALL'", "<INVALID>", "'ATOM'", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "'ID'", "<INVALID>", "'NAME'", "<INVALID>", 
                     "'CUT'", "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "'STORE1'", "'STORE2'", "'STORE3'", 
                     "'STORE4'", "'STORE5'", "'STORE6'", "'STORE7'", "'STORE8'", 
                     "'STORE9'", "'TAG'", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "'SHOW'", "<INVALID>", "<INVALID>", "<INVALID>", "'NIL'", 
                     "<INVALID>", "'UB'", "'MULT'", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "'NONB'", "<INVALID>", "<INVALID>", "'FOR'", 
                     "'LOOP'", "'TAIL'", "'HEAD'", "'OR'", "'AND'", "'NOT'", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "'HBDA'", "'HBDB'", "<INVALID>", "<INVALID>", "':'", 
                     "<INVALID>", "'<'", "'>'", "'<='", "'>='", "'#'", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "'+'", "'-'", "<INVALID>", 
                     "'/'", "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "'ACOS'", "'ASIN'", "'COS'", 
                     "'DECODE'", "'ENCODE'", "'EXP'", "'GAUSS'", "'HEAVY'", 
                     "'INT'", "'LOG10'", "'LOG'", "<INVALID>", "'MAXW'", 
                     "<INVALID>", "'MOD'", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "'SIN'", "'SQRT'", "'TAN'", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "'RMS'", "'SUM'", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "'IN'" ]

    symbolicNames = [ "<INVALID>", "Set", "End", "Noe", "Assign", "Asymptote", 
                      "Average", "Bhig", "Ceiling", "Classification", "CountViol", 
                      "Distribute", "Monomers", "Ncount", "Nrestraints", 
                      "Potential", "Predict", "Print", "Threshold", "Reset", 
                      "Rswitch", "Scale", "SoExponent", "SqConstant", "SqExponent", 
                      "SqOffset", "Temperature", "Cutoff", "Cuton", "From", 
                      "To", "Peak", "Spectrum", "Volume", "Ppm1", "Ppm2", 
                      "Restraints", "Dihedral", "Nassign", "Sanisotropy", 
                      "Coefficients", "ForceConstant", "Xdipolar", "Dipolar", 
                      "Type", "Sign", "VeAngle", "Cv", "Partition", "Tensor", 
                      "Anisotropy", "Planar", "Group", "Initialize", "Selection", 
                      "Weight", "Harmonic", "Exponent", "Normal", "Xadc", 
                      "Expectation", "Size", "Zero", "Coupling", "DegEnergy", 
                      "Carbon", "PhiStep", "PsiStep", "Rcoil", "Proton", 
                      "Observed", "Amides", "Nitrogens", "Oxygens", "RingAtoms", 
                      "AlphasAndAmides", "Error", "Ramachandran", "Gaussian", 
                      "Phase", "Quartic", "Shape", "Sort", "Dimensions", 
                      "Collapse", "Danisotropy", "Orient", "Height", "MaxGaussians", 
                      "NewGaussian", "Dcsa", "Sigma", "Pcsa", "OneBond", 
                      "AngleDb", "DerivFlag", "PMagnetic", "Kconst", "Omega", 
                      "Tauc", "Debug", "Xpcs", "Tolerance", "Save", "Fmed", 
                      "ErrOn", "ErrOff", "Fon", "Foff", "Son", "Soff", "Frun", 
                      "Xrdcoupling", "Xangle", "Xccr", "Weip", "Kdir", "Klin", 
                      "Nseg", "Nmin", "Nmax", "Segm", "Ohcut", "Coh1cut", 
                      "Coh2cut", "Ohncut", "Updfrq", "Prnfrq", "Freemode", 
                      "Donor", "Acceptor", "Flags", "All", "Around", "Atom", 
                      "Attribute", "BondedTo", "ByGroup", "ByRes", "Chemical", 
                      "Hydrogen", "Id", "Known", "Name", "Point", "Cut", 
                      "Previous", "Pseudo", "Residue", "Resname", "Saround", 
                      "SegIdentifier", "Store1", "Store2", "Store3", "Store4", 
                      "Store5", "Store6", "Store7", "Store8", "Store9", 
                      "Tag", "Vector", "Do_Lp", "Identify_Lp", "Show", "Evaluate_Lp", 
                      "Patch", "Reference", "Nil", "Parameter", "UB", "Mult", 
                      "HBonded", "Improper", "NBFix", "NonB", "VDWOff", 
                      "Verbose", "For", "Loop", "Tail", "Head", "Or_op", 
                      "And_op", "Not_op", "Comma", "Complex", "Integer", 
                      "Logical", "Real", "Double_quote_string", "SHARP_COMMENT", 
                      "EXCLM_COMMENT", "SMCLN_COMMENT", "Simple_name", "Simple_names", 
                      "Integers", "Hbda", "Hbdb", "L_paren", "R_paren", 
                      "Colon", "Equ_op", "Lt_op", "Gt_op", "Leq_op", "Geq_op", 
                      "Neq_op", "Symbol_name", "SPACE", "COMMENT", "SECTION_COMMENT", 
                      "LINE_COMMENT", "SET_VARIABLE", "Abs", "Attr_properties", 
                      "Comparison_ops", "SPACE_AP", "Averaging_methods", 
                      "Simple_name_AM", "SPACE_AM", "Equ_op_PT", "Potential_types", 
                      "Simple_name_PT", "SPACE_PT", "Rdc_dist_fix_types", 
                      "Rdc_or_Diff_anis_types", "Csa_types", "SPACE_TY", 
                      "Gauss_or_Quart", "SPACE_SH", "Exclude", "Include", 
                      "End_FL", "Class_name", "Any_class", "SPACE_FL", "R_paren_VE", 
                      "Equ_op_VE", "Add_op_VE", "Sub_op_VE", "Mul_op_VE", 
                      "Div_op_VE", "Exp_op_VE", "Comma_VE", "Integer_VE", 
                      "Real_VE", "Atom_properties_VE", "Abs_VE", "Acos_VE", 
                      "Asin_VE", "Cos_VE", "Decode_VE", "Encode_VE", "Exp_VE", 
                      "Gauss_VE", "Heavy_VE", "Int_VE", "Log10_VE", "Log_VE", 
                      "Max_VE", "Maxw_VE", "Min_VE", "Mod_VE", "Norm_VE", 
                      "Random_VE", "Sign_VE", "Sin_VE", "Sqrt_VE", "Tan_VE", 
                      "Symbol_name_VE", "Simple_name_VE", "Double_quote_string_VE", 
                      "SPACE_VE", "L_paren_VF", "SPACE_VF", "L_paren_VS", 
                      "R_paren_VS", "Average_VS", "Element_VS", "Max_VS", 
                      "Min_VS", "Norm_VS", "Rms_VS", "Sum_VS", "Atom_properties_VS", 
                      "SPACE_VS", "L_paren_CF", "R_paren_CF", "In_CF", "Integer_CF", 
                      "Real_CF", "Symbol_name_CF", "Simple_name_CF", "SPACE_CF", 
                      "COMMENT_CF", "Simple_name_LL", "SPACE_LL" ]

    RULE_xplor_nih_mr = 0
    RULE_distance_restraint = 1
    RULE_dihedral_angle_restraint = 2
    RULE_rdc_restraint = 3
    RULE_planar_restraint = 4
    RULE_harmonic_restraint = 5
    RULE_antidistance_restraint = 6
    RULE_coupling_restraint = 7
    RULE_carbon_shift_restraint = 8
    RULE_proton_shift_restraint = 9
    RULE_dihedral_angle_db_restraint = 10
    RULE_radius_of_gyration_restraint = 11
    RULE_diffusion_anisotropy_restraint = 12
    RULE_orientation_db_restraint = 13
    RULE_csa_restraint = 14
    RULE_pcsa_restraint = 15
    RULE_one_bond_coupling_restraint = 16
    RULE_angle_db_restraint = 17
    RULE_pre_restraint = 18
    RULE_pcs_restraint = 19
    RULE_prdc_restraint = 20
    RULE_porientation_restraint = 21
    RULE_pccr_restraint = 22
    RULE_hbond_restraint = 23
    RULE_hbond_db_restraint = 24
    RULE_noe_statement = 25
    RULE_noe_assign = 26
    RULE_predict_statement = 27
    RULE_noe_annotation = 28
    RULE_dihedral_statement = 29
    RULE_dihedral_assign = 30
    RULE_sani_statement = 31
    RULE_sani_assign = 32
    RULE_xdip_statement = 33
    RULE_xdip_assign = 34
    RULE_vean_statement = 35
    RULE_vean_assign = 36
    RULE_tenso_statement = 37
    RULE_tenso_assign = 38
    RULE_anis_statement = 39
    RULE_anis_assign = 40
    RULE_planar_statement = 41
    RULE_group_statement = 42
    RULE_harmonic_statement = 43
    RULE_harmonic_assign = 44
    RULE_antidistance_statement = 45
    RULE_xadc_assign = 46
    RULE_coupling_statement = 47
    RULE_coup_assign = 48
    RULE_carbon_shift_statement = 49
    RULE_carbon_shift_assign = 50
    RULE_carbon_shift_rcoil = 51
    RULE_proton_shift_statement = 52
    RULE_observed = 53
    RULE_proton_shift_rcoil = 54
    RULE_proton_shift_anisotropy = 55
    RULE_proton_shift_amides = 56
    RULE_proton_shift_carbons = 57
    RULE_proton_shift_nitrogens = 58
    RULE_proton_shift_oxygens = 59
    RULE_proton_shift_ring_atoms = 60
    RULE_proton_shift_alphas_and_amides = 61
    RULE_ramachandran_statement = 62
    RULE_rama_assign = 63
    RULE_collapse_statement = 64
    RULE_coll_assign = 65
    RULE_diffusion_statement = 66
    RULE_dani_assign = 67
    RULE_orientation_statement = 68
    RULE_orie_assign = 69
    RULE_csa_statement = 70
    RULE_csa_assign = 71
    RULE_pcsa_statement = 72
    RULE_one_bond_coupling_statement = 73
    RULE_one_bond_assign = 74
    RULE_angle_db_statement = 75
    RULE_angle_db_assign = 76
    RULE_pre_statement = 77
    RULE_pre_assign = 78
    RULE_pcs_statement = 79
    RULE_pcs_assign = 80
    RULE_prdc_statement = 81
    RULE_prdc_assign = 82
    RULE_porientation_statement = 83
    RULE_porientation_assign = 84
    RULE_pccr_statement = 85
    RULE_pccr_assign = 86
    RULE_hbond_statement = 87
    RULE_hbond_assign = 88
    RULE_hbond_db_statement = 89
    RULE_hbond_db_assign = 90
    RULE_selection = 91
    RULE_selection_expression = 92
    RULE_term = 93
    RULE_factor = 94
    RULE_number = 95
    RULE_number_f = 96
    RULE_number_s = 97
    RULE_number_a = 98
    RULE_flag_statement = 99
    RULE_vector_statement = 100
    RULE_vector_mode = 101
    RULE_vector_expression = 102
    RULE_vector_operation = 103
    RULE_vflc = 104
    RULE_vector_func_call = 105
    RULE_vector_show_property = 106
    RULE_evaluate_statement = 107
    RULE_evaluate_operation = 108
    RULE_patch_statement = 109
    RULE_parameter_setting = 110
    RULE_parameter_statement = 111
    RULE_noe_assign_loop = 112
    RULE_dihedral_assign_loop = 113
    RULE_sani_assign_loop = 114
    RULE_xadc_assign_loop = 115
    RULE_coup_assign_loop = 116
    RULE_coll_assign_loop = 117
    RULE_csa_assign_loop = 118
    RULE_pre_assign_loop = 119
    RULE_pcs_assign_loop = 120
    RULE_hbond_assign_loop = 121
    RULE_hbond_db_assign_loop = 122

    ruleNames =  [ "xplor_nih_mr", "distance_restraint", "dihedral_angle_restraint", 
                   "rdc_restraint", "planar_restraint", "harmonic_restraint", 
                   "antidistance_restraint", "coupling_restraint", "carbon_shift_restraint", 
                   "proton_shift_restraint", "dihedral_angle_db_restraint", 
                   "radius_of_gyration_restraint", "diffusion_anisotropy_restraint", 
                   "orientation_db_restraint", "csa_restraint", "pcsa_restraint", 
                   "one_bond_coupling_restraint", "angle_db_restraint", 
                   "pre_restraint", "pcs_restraint", "prdc_restraint", "porientation_restraint", 
                   "pccr_restraint", "hbond_restraint", "hbond_db_restraint", 
                   "noe_statement", "noe_assign", "predict_statement", "noe_annotation", 
                   "dihedral_statement", "dihedral_assign", "sani_statement", 
                   "sani_assign", "xdip_statement", "xdip_assign", "vean_statement", 
                   "vean_assign", "tenso_statement", "tenso_assign", "anis_statement", 
                   "anis_assign", "planar_statement", "group_statement", 
                   "harmonic_statement", "harmonic_assign", "antidistance_statement", 
                   "xadc_assign", "coupling_statement", "coup_assign", "carbon_shift_statement", 
                   "carbon_shift_assign", "carbon_shift_rcoil", "proton_shift_statement", 
                   "observed", "proton_shift_rcoil", "proton_shift_anisotropy", 
                   "proton_shift_amides", "proton_shift_carbons", "proton_shift_nitrogens", 
                   "proton_shift_oxygens", "proton_shift_ring_atoms", "proton_shift_alphas_and_amides", 
                   "ramachandran_statement", "rama_assign", "collapse_statement", 
                   "coll_assign", "diffusion_statement", "dani_assign", 
                   "orientation_statement", "orie_assign", "csa_statement", 
                   "csa_assign", "pcsa_statement", "one_bond_coupling_statement", 
                   "one_bond_assign", "angle_db_statement", "angle_db_assign", 
                   "pre_statement", "pre_assign", "pcs_statement", "pcs_assign", 
                   "prdc_statement", "prdc_assign", "porientation_statement", 
                   "porientation_assign", "pccr_statement", "pccr_assign", 
                   "hbond_statement", "hbond_assign", "hbond_db_statement", 
                   "hbond_db_assign", "selection", "selection_expression", 
                   "term", "factor", "number", "number_f", "number_s", "number_a", 
                   "flag_statement", "vector_statement", "vector_mode", 
                   "vector_expression", "vector_operation", "vflc", "vector_func_call", 
                   "vector_show_property", "evaluate_statement", "evaluate_operation", 
                   "patch_statement", "parameter_setting", "parameter_statement", 
                   "noe_assign_loop", "dihedral_assign_loop", "sani_assign_loop", 
                   "xadc_assign_loop", "coup_assign_loop", "coll_assign_loop", 
                   "csa_assign_loop", "pre_assign_loop", "pcs_assign_loop", 
                   "hbond_assign_loop", "hbond_db_assign_loop" ]

    EOF = Token.EOF
    Set=1
    End=2
    Noe=3
    Assign=4
    Asymptote=5
    Average=6
    Bhig=7
    Ceiling=8
    Classification=9
    CountViol=10
    Distribute=11
    Monomers=12
    Ncount=13
    Nrestraints=14
    Potential=15
    Predict=16
    Print=17
    Threshold=18
    Reset=19
    Rswitch=20
    Scale=21
    SoExponent=22
    SqConstant=23
    SqExponent=24
    SqOffset=25
    Temperature=26
    Cutoff=27
    Cuton=28
    From=29
    To=30
    Peak=31
    Spectrum=32
    Volume=33
    Ppm1=34
    Ppm2=35
    Restraints=36
    Dihedral=37
    Nassign=38
    Sanisotropy=39
    Coefficients=40
    ForceConstant=41
    Xdipolar=42
    Dipolar=43
    Type=44
    Sign=45
    VeAngle=46
    Cv=47
    Partition=48
    Tensor=49
    Anisotropy=50
    Planar=51
    Group=52
    Initialize=53
    Selection=54
    Weight=55
    Harmonic=56
    Exponent=57
    Normal=58
    Xadc=59
    Expectation=60
    Size=61
    Zero=62
    Coupling=63
    DegEnergy=64
    Carbon=65
    PhiStep=66
    PsiStep=67
    Rcoil=68
    Proton=69
    Observed=70
    Amides=71
    Nitrogens=72
    Oxygens=73
    RingAtoms=74
    AlphasAndAmides=75
    Error=76
    Ramachandran=77
    Gaussian=78
    Phase=79
    Quartic=80
    Shape=81
    Sort=82
    Dimensions=83
    Collapse=84
    Danisotropy=85
    Orient=86
    Height=87
    MaxGaussians=88
    NewGaussian=89
    Dcsa=90
    Sigma=91
    Pcsa=92
    OneBond=93
    AngleDb=94
    DerivFlag=95
    PMagnetic=96
    Kconst=97
    Omega=98
    Tauc=99
    Debug=100
    Xpcs=101
    Tolerance=102
    Save=103
    Fmed=104
    ErrOn=105
    ErrOff=106
    Fon=107
    Foff=108
    Son=109
    Soff=110
    Frun=111
    Xrdcoupling=112
    Xangle=113
    Xccr=114
    Weip=115
    Kdir=116
    Klin=117
    Nseg=118
    Nmin=119
    Nmax=120
    Segm=121
    Ohcut=122
    Coh1cut=123
    Coh2cut=124
    Ohncut=125
    Updfrq=126
    Prnfrq=127
    Freemode=128
    Donor=129
    Acceptor=130
    Flags=131
    All=132
    Around=133
    Atom=134
    Attribute=135
    BondedTo=136
    ByGroup=137
    ByRes=138
    Chemical=139
    Hydrogen=140
    Id=141
    Known=142
    Name=143
    Point=144
    Cut=145
    Previous=146
    Pseudo=147
    Residue=148
    Resname=149
    Saround=150
    SegIdentifier=151
    Store1=152
    Store2=153
    Store3=154
    Store4=155
    Store5=156
    Store6=157
    Store7=158
    Store8=159
    Store9=160
    Tag=161
    Vector=162
    Do_Lp=163
    Identify_Lp=164
    Show=165
    Evaluate_Lp=166
    Patch=167
    Reference=168
    Nil=169
    Parameter=170
    UB=171
    Mult=172
    HBonded=173
    Improper=174
    NBFix=175
    NonB=176
    VDWOff=177
    Verbose=178
    For=179
    Loop=180
    Tail=181
    Head=182
    Or_op=183
    And_op=184
    Not_op=185
    Comma=186
    Complex=187
    Integer=188
    Logical=189
    Real=190
    Double_quote_string=191
    SHARP_COMMENT=192
    EXCLM_COMMENT=193
    SMCLN_COMMENT=194
    Simple_name=195
    Simple_names=196
    Integers=197
    Hbda=198
    Hbdb=199
    L_paren=200
    R_paren=201
    Colon=202
    Equ_op=203
    Lt_op=204
    Gt_op=205
    Leq_op=206
    Geq_op=207
    Neq_op=208
    Symbol_name=209
    SPACE=210
    COMMENT=211
    SECTION_COMMENT=212
    LINE_COMMENT=213
    SET_VARIABLE=214
    Abs=215
    Attr_properties=216
    Comparison_ops=217
    SPACE_AP=218
    Averaging_methods=219
    Simple_name_AM=220
    SPACE_AM=221
    Equ_op_PT=222
    Potential_types=223
    Simple_name_PT=224
    SPACE_PT=225
    Rdc_dist_fix_types=226
    Rdc_or_Diff_anis_types=227
    Csa_types=228
    SPACE_TY=229
    Gauss_or_Quart=230
    SPACE_SH=231
    Exclude=232
    Include=233
    End_FL=234
    Class_name=235
    Any_class=236
    SPACE_FL=237
    R_paren_VE=238
    Equ_op_VE=239
    Add_op_VE=240
    Sub_op_VE=241
    Mul_op_VE=242
    Div_op_VE=243
    Exp_op_VE=244
    Comma_VE=245
    Integer_VE=246
    Real_VE=247
    Atom_properties_VE=248
    Abs_VE=249
    Acos_VE=250
    Asin_VE=251
    Cos_VE=252
    Decode_VE=253
    Encode_VE=254
    Exp_VE=255
    Gauss_VE=256
    Heavy_VE=257
    Int_VE=258
    Log10_VE=259
    Log_VE=260
    Max_VE=261
    Maxw_VE=262
    Min_VE=263
    Mod_VE=264
    Norm_VE=265
    Random_VE=266
    Sign_VE=267
    Sin_VE=268
    Sqrt_VE=269
    Tan_VE=270
    Symbol_name_VE=271
    Simple_name_VE=272
    Double_quote_string_VE=273
    SPACE_VE=274
    L_paren_VF=275
    SPACE_VF=276
    L_paren_VS=277
    R_paren_VS=278
    Average_VS=279
    Element_VS=280
    Max_VS=281
    Min_VS=282
    Norm_VS=283
    Rms_VS=284
    Sum_VS=285
    Atom_properties_VS=286
    SPACE_VS=287
    L_paren_CF=288
    R_paren_CF=289
    In_CF=290
    Integer_CF=291
    Real_CF=292
    Symbol_name_CF=293
    Simple_name_CF=294
    SPACE_CF=295
    COMMENT_CF=296
    Simple_name_LL=297
    SPACE_LL=298

    def __init__(self, input:TokenStream, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.10.1")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None




    class Xplor_nih_mrContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EOF(self):
            return self.getToken(XplorMRParser.EOF, 0)

        def distance_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Distance_restraintContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Distance_restraintContext,i)


        def dihedral_angle_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Dihedral_angle_restraintContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Dihedral_angle_restraintContext,i)


        def rdc_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Rdc_restraintContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Rdc_restraintContext,i)


        def planar_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Planar_restraintContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Planar_restraintContext,i)


        def harmonic_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Harmonic_restraintContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Harmonic_restraintContext,i)


        def antidistance_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Antidistance_restraintContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Antidistance_restraintContext,i)


        def coupling_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Coupling_restraintContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Coupling_restraintContext,i)


        def carbon_shift_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Carbon_shift_restraintContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Carbon_shift_restraintContext,i)


        def proton_shift_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Proton_shift_restraintContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Proton_shift_restraintContext,i)


        def dihedral_angle_db_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Dihedral_angle_db_restraintContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Dihedral_angle_db_restraintContext,i)


        def radius_of_gyration_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Radius_of_gyration_restraintContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Radius_of_gyration_restraintContext,i)


        def diffusion_anisotropy_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Diffusion_anisotropy_restraintContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Diffusion_anisotropy_restraintContext,i)


        def orientation_db_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Orientation_db_restraintContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Orientation_db_restraintContext,i)


        def csa_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Csa_restraintContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Csa_restraintContext,i)


        def pcsa_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Pcsa_restraintContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Pcsa_restraintContext,i)


        def one_bond_coupling_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.One_bond_coupling_restraintContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.One_bond_coupling_restraintContext,i)


        def angle_db_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Angle_db_restraintContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Angle_db_restraintContext,i)


        def pre_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Pre_restraintContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Pre_restraintContext,i)


        def pcs_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Pcs_restraintContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Pcs_restraintContext,i)


        def prdc_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Prdc_restraintContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Prdc_restraintContext,i)


        def porientation_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Porientation_restraintContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Porientation_restraintContext,i)


        def pccr_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Pccr_restraintContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Pccr_restraintContext,i)


        def hbond_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Hbond_restraintContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Hbond_restraintContext,i)


        def hbond_db_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Hbond_db_restraintContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Hbond_db_restraintContext,i)


        def flag_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Flag_statementContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Flag_statementContext,i)


        def vector_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Vector_statementContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Vector_statementContext,i)


        def evaluate_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Evaluate_statementContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Evaluate_statementContext,i)


        def patch_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Patch_statementContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Patch_statementContext,i)


        def parameter_setting(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Parameter_settingContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Parameter_settingContext,i)


        def noe_assign_loop(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Noe_assign_loopContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Noe_assign_loopContext,i)


        def dihedral_assign_loop(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Dihedral_assign_loopContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Dihedral_assign_loopContext,i)


        def sani_assign_loop(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Sani_assign_loopContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Sani_assign_loopContext,i)


        def hbond_assign_loop(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Hbond_assign_loopContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Hbond_assign_loopContext,i)


        def hbond_db_assign_loop(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Hbond_db_assign_loopContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Hbond_db_assign_loopContext,i)


        def coup_assign_loop(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Coup_assign_loopContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Coup_assign_loopContext,i)


        def xadc_assign_loop(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Xadc_assign_loopContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Xadc_assign_loopContext,i)


        def coll_assign_loop(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Coll_assign_loopContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Coll_assign_loopContext,i)


        def csa_assign_loop(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Csa_assign_loopContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Csa_assign_loopContext,i)


        def pre_assign_loop(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Pre_assign_loopContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Pre_assign_loopContext,i)


        def pcs_assign_loop(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Pcs_assign_loopContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Pcs_assign_loopContext,i)


        def noe_assign(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Noe_assignContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Noe_assignContext,i)


        def dihedral_assign(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Dihedral_assignContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Dihedral_assignContext,i)


        def sani_assign(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Sani_assignContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Sani_assignContext,i)


        def planar_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Planar_statementContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Planar_statementContext,i)


        def harmonic_assign(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Harmonic_assignContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Harmonic_assignContext,i)


        def hbond_assign(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Hbond_assignContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Hbond_assignContext,i)


        def hbond_db_assign(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Hbond_db_assignContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Hbond_db_assignContext,i)


        def coup_assign(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Coup_assignContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Coup_assignContext,i)


        def xadc_assign(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Xadc_assignContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Xadc_assignContext,i)


        def coll_assign(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Coll_assignContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Coll_assignContext,i)


        def csa_assign(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Csa_assignContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Csa_assignContext,i)


        def pre_assign(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Pre_assignContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Pre_assignContext,i)


        def pcs_assign(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Pcs_assignContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Pcs_assignContext,i)


        def observed(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.ObservedContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.ObservedContext,i)


        def parameter_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Parameter_statementContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Parameter_statementContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_xplor_nih_mr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterXplor_nih_mr" ):
                listener.enterXplor_nih_mr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitXplor_nih_mr" ):
                listener.exitXplor_nih_mr(self)




    def xplor_nih_mr(self):

        localctx = XplorMRParser.Xplor_nih_mrContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_xplor_nih_mr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 303
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((((_la - 3)) & ~0x3f) == 0 and ((1 << (_la - 3)) & ((1 << (XplorMRParser.Noe - 3)) | (1 << (XplorMRParser.Assign - 3)) | (1 << (XplorMRParser.Reset - 3)) | (1 << (XplorMRParser.Restraints - 3)) | (1 << (XplorMRParser.Dihedral - 3)) | (1 << (XplorMRParser.Sanisotropy - 3)) | (1 << (XplorMRParser.Xdipolar - 3)) | (1 << (XplorMRParser.Dipolar - 3)) | (1 << (XplorMRParser.VeAngle - 3)) | (1 << (XplorMRParser.Tensor - 3)) | (1 << (XplorMRParser.Anisotropy - 3)) | (1 << (XplorMRParser.Planar - 3)) | (1 << (XplorMRParser.Group - 3)) | (1 << (XplorMRParser.Initialize - 3)) | (1 << (XplorMRParser.Harmonic - 3)) | (1 << (XplorMRParser.Xadc - 3)) | (1 << (XplorMRParser.Coupling - 3)) | (1 << (XplorMRParser.Carbon - 3)))) != 0) or ((((_la - 69)) & ~0x3f) == 0 and ((1 << (_la - 69)) & ((1 << (XplorMRParser.Proton - 69)) | (1 << (XplorMRParser.Observed - 69)) | (1 << (XplorMRParser.Ramachandran - 69)) | (1 << (XplorMRParser.Collapse - 69)) | (1 << (XplorMRParser.Danisotropy - 69)) | (1 << (XplorMRParser.Orient - 69)) | (1 << (XplorMRParser.Dcsa - 69)) | (1 << (XplorMRParser.Pcsa - 69)) | (1 << (XplorMRParser.OneBond - 69)) | (1 << (XplorMRParser.AngleDb - 69)) | (1 << (XplorMRParser.PMagnetic - 69)) | (1 << (XplorMRParser.Xpcs - 69)) | (1 << (XplorMRParser.Xrdcoupling - 69)) | (1 << (XplorMRParser.Xangle - 69)) | (1 << (XplorMRParser.Xccr - 69)) | (1 << (XplorMRParser.Flags - 69)))) != 0) or ((((_la - 136)) & ~0x3f) == 0 and ((1 << (_la - 136)) & ((1 << (XplorMRParser.BondedTo - 136)) | (1 << (XplorMRParser.Vector - 136)) | (1 << (XplorMRParser.Evaluate_Lp - 136)) | (1 << (XplorMRParser.Patch - 136)) | (1 << (XplorMRParser.Parameter - 136)) | (1 << (XplorMRParser.HBonded - 136)) | (1 << (XplorMRParser.Improper - 136)) | (1 << (XplorMRParser.NBFix - 136)) | (1 << (XplorMRParser.NonB - 136)) | (1 << (XplorMRParser.VDWOff - 136)) | (1 << (XplorMRParser.Verbose - 136)) | (1 << (XplorMRParser.For - 136)) | (1 << (XplorMRParser.Hbda - 136)) | (1 << (XplorMRParser.Hbdb - 136)))) != 0):
                self.state = 301
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,0,self._ctx)
                if la_ == 1:
                    self.state = 246
                    self.distance_restraint()
                    pass

                elif la_ == 2:
                    self.state = 247
                    self.dihedral_angle_restraint()
                    pass

                elif la_ == 3:
                    self.state = 248
                    self.rdc_restraint()
                    pass

                elif la_ == 4:
                    self.state = 249
                    self.planar_restraint()
                    pass

                elif la_ == 5:
                    self.state = 250
                    self.harmonic_restraint()
                    pass

                elif la_ == 6:
                    self.state = 251
                    self.antidistance_restraint()
                    pass

                elif la_ == 7:
                    self.state = 252
                    self.coupling_restraint()
                    pass

                elif la_ == 8:
                    self.state = 253
                    self.carbon_shift_restraint()
                    pass

                elif la_ == 9:
                    self.state = 254
                    self.proton_shift_restraint()
                    pass

                elif la_ == 10:
                    self.state = 255
                    self.dihedral_angle_db_restraint()
                    pass

                elif la_ == 11:
                    self.state = 256
                    self.radius_of_gyration_restraint()
                    pass

                elif la_ == 12:
                    self.state = 257
                    self.diffusion_anisotropy_restraint()
                    pass

                elif la_ == 13:
                    self.state = 258
                    self.orientation_db_restraint()
                    pass

                elif la_ == 14:
                    self.state = 259
                    self.csa_restraint()
                    pass

                elif la_ == 15:
                    self.state = 260
                    self.pcsa_restraint()
                    pass

                elif la_ == 16:
                    self.state = 261
                    self.one_bond_coupling_restraint()
                    pass

                elif la_ == 17:
                    self.state = 262
                    self.angle_db_restraint()
                    pass

                elif la_ == 18:
                    self.state = 263
                    self.pre_restraint()
                    pass

                elif la_ == 19:
                    self.state = 264
                    self.pcs_restraint()
                    pass

                elif la_ == 20:
                    self.state = 265
                    self.prdc_restraint()
                    pass

                elif la_ == 21:
                    self.state = 266
                    self.porientation_restraint()
                    pass

                elif la_ == 22:
                    self.state = 267
                    self.pccr_restraint()
                    pass

                elif la_ == 23:
                    self.state = 268
                    self.hbond_restraint()
                    pass

                elif la_ == 24:
                    self.state = 269
                    self.hbond_db_restraint()
                    pass

                elif la_ == 25:
                    self.state = 270
                    self.flag_statement()
                    pass

                elif la_ == 26:
                    self.state = 271
                    self.vector_statement()
                    pass

                elif la_ == 27:
                    self.state = 272
                    self.evaluate_statement()
                    pass

                elif la_ == 28:
                    self.state = 273
                    self.patch_statement()
                    pass

                elif la_ == 29:
                    self.state = 274
                    self.parameter_setting()
                    pass

                elif la_ == 30:
                    self.state = 275
                    self.noe_assign_loop()
                    pass

                elif la_ == 31:
                    self.state = 276
                    self.dihedral_assign_loop()
                    pass

                elif la_ == 32:
                    self.state = 277
                    self.sani_assign_loop()
                    pass

                elif la_ == 33:
                    self.state = 278
                    self.hbond_assign_loop()
                    pass

                elif la_ == 34:
                    self.state = 279
                    self.hbond_db_assign_loop()
                    pass

                elif la_ == 35:
                    self.state = 280
                    self.coup_assign_loop()
                    pass

                elif la_ == 36:
                    self.state = 281
                    self.xadc_assign_loop()
                    pass

                elif la_ == 37:
                    self.state = 282
                    self.coll_assign_loop()
                    pass

                elif la_ == 38:
                    self.state = 283
                    self.csa_assign_loop()
                    pass

                elif la_ == 39:
                    self.state = 284
                    self.pre_assign_loop()
                    pass

                elif la_ == 40:
                    self.state = 285
                    self.pcs_assign_loop()
                    pass

                elif la_ == 41:
                    self.state = 286
                    self.noe_assign()
                    pass

                elif la_ == 42:
                    self.state = 287
                    self.dihedral_assign()
                    pass

                elif la_ == 43:
                    self.state = 288
                    self.sani_assign()
                    pass

                elif la_ == 44:
                    self.state = 289
                    self.planar_statement()
                    pass

                elif la_ == 45:
                    self.state = 290
                    self.harmonic_assign()
                    pass

                elif la_ == 46:
                    self.state = 291
                    self.hbond_assign()
                    pass

                elif la_ == 47:
                    self.state = 292
                    self.hbond_db_assign()
                    pass

                elif la_ == 48:
                    self.state = 293
                    self.coup_assign()
                    pass

                elif la_ == 49:
                    self.state = 294
                    self.xadc_assign()
                    pass

                elif la_ == 50:
                    self.state = 295
                    self.coll_assign()
                    pass

                elif la_ == 51:
                    self.state = 296
                    self.csa_assign()
                    pass

                elif la_ == 52:
                    self.state = 297
                    self.pre_assign()
                    pass

                elif la_ == 53:
                    self.state = 298
                    self.pcs_assign()
                    pass

                elif la_ == 54:
                    self.state = 299
                    self.observed()
                    pass

                elif la_ == 55:
                    self.state = 300
                    self.parameter_statement()
                    pass


                self.state = 305
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 306
            self.match(XplorMRParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Distance_restraintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Noe(self):
            return self.getToken(XplorMRParser.Noe, 0)

        def End(self):
            return self.getToken(XplorMRParser.End, 0)

        def noe_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Noe_statementContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Noe_statementContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_distance_restraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDistance_restraint" ):
                listener.enterDistance_restraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDistance_restraint" ):
                listener.exitDistance_restraint(self)




    def distance_restraint(self):

        localctx = XplorMRParser.Distance_restraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_distance_restraint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 308
            self.match(XplorMRParser.Noe)
            self.state = 312
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << XplorMRParser.Assign) | (1 << XplorMRParser.Asymptote) | (1 << XplorMRParser.Average) | (1 << XplorMRParser.Bhig) | (1 << XplorMRParser.Ceiling) | (1 << XplorMRParser.Classification) | (1 << XplorMRParser.CountViol) | (1 << XplorMRParser.Distribute) | (1 << XplorMRParser.Monomers) | (1 << XplorMRParser.Ncount) | (1 << XplorMRParser.Nrestraints) | (1 << XplorMRParser.Potential) | (1 << XplorMRParser.Predict) | (1 << XplorMRParser.Print) | (1 << XplorMRParser.Reset) | (1 << XplorMRParser.Rswitch) | (1 << XplorMRParser.Scale) | (1 << XplorMRParser.SoExponent) | (1 << XplorMRParser.SqConstant) | (1 << XplorMRParser.SqExponent) | (1 << XplorMRParser.SqOffset) | (1 << XplorMRParser.Temperature))) != 0) or _la==XplorMRParser.For:
                self.state = 309
                self.noe_statement()
                self.state = 314
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 315
            self.match(XplorMRParser.End)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Dihedral_angle_restraintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Dihedral(self):
            return self.getToken(XplorMRParser.Dihedral, 0)

        def End(self):
            return self.getToken(XplorMRParser.End, 0)

        def Restraints(self):
            return self.getToken(XplorMRParser.Restraints, 0)

        def dihedral_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Dihedral_statementContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Dihedral_statementContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_dihedral_angle_restraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDihedral_angle_restraint" ):
                listener.enterDihedral_angle_restraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDihedral_angle_restraint" ):
                listener.exitDihedral_angle_restraint(self)




    def dihedral_angle_restraint(self):

        localctx = XplorMRParser.Dihedral_angle_restraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_dihedral_angle_restraint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 318
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==XplorMRParser.Restraints:
                self.state = 317
                self.match(XplorMRParser.Restraints)


            self.state = 320
            self.match(XplorMRParser.Dihedral)
            self.state = 324
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << XplorMRParser.Assign) | (1 << XplorMRParser.Reset) | (1 << XplorMRParser.Scale) | (1 << XplorMRParser.Nassign))) != 0) or _la==XplorMRParser.Vector or _la==XplorMRParser.For:
                self.state = 321
                self.dihedral_statement()
                self.state = 326
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 327
            self.match(XplorMRParser.End)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Rdc_restraintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Sanisotropy(self):
            return self.getToken(XplorMRParser.Sanisotropy, 0)

        def End(self):
            return self.getToken(XplorMRParser.End, 0)

        def sani_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Sani_statementContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Sani_statementContext,i)


        def Xdipolar(self):
            return self.getToken(XplorMRParser.Xdipolar, 0)

        def Dipolar(self):
            return self.getToken(XplorMRParser.Dipolar, 0)

        def xdip_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Xdip_statementContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Xdip_statementContext,i)


        def VeAngle(self):
            return self.getToken(XplorMRParser.VeAngle, 0)

        def vean_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Vean_statementContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Vean_statementContext,i)


        def Tensor(self):
            return self.getToken(XplorMRParser.Tensor, 0)

        def tenso_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Tenso_statementContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Tenso_statementContext,i)


        def Anisotropy(self):
            return self.getToken(XplorMRParser.Anisotropy, 0)

        def anis_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Anis_statementContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Anis_statementContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_rdc_restraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRdc_restraint" ):
                listener.enterRdc_restraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRdc_restraint" ):
                listener.exitRdc_restraint(self)




    def rdc_restraint(self):

        localctx = XplorMRParser.Rdc_restraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_rdc_restraint)
        self._la = 0 # Token type
        try:
            self.state = 369
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [XplorMRParser.Sanisotropy]:
                self.enterOuterAlt(localctx, 1)
                self.state = 329
                self.match(XplorMRParser.Sanisotropy)
                self.state = 333
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << XplorMRParser.Assign) | (1 << XplorMRParser.Classification) | (1 << XplorMRParser.Nrestraints) | (1 << XplorMRParser.Potential) | (1 << XplorMRParser.Print) | (1 << XplorMRParser.Reset) | (1 << XplorMRParser.Coefficients) | (1 << XplorMRParser.ForceConstant))) != 0) or _la==XplorMRParser.For:
                    self.state = 330
                    self.sani_statement()
                    self.state = 335
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 336
                self.match(XplorMRParser.End)
                pass
            elif token in [XplorMRParser.Xdipolar, XplorMRParser.Dipolar]:
                self.enterOuterAlt(localctx, 2)
                self.state = 337
                _la = self._input.LA(1)
                if not(_la==XplorMRParser.Xdipolar or _la==XplorMRParser.Dipolar):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 341
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << XplorMRParser.Assign) | (1 << XplorMRParser.Average) | (1 << XplorMRParser.Classification) | (1 << XplorMRParser.Nrestraints) | (1 << XplorMRParser.Potential) | (1 << XplorMRParser.Print) | (1 << XplorMRParser.Reset) | (1 << XplorMRParser.Scale) | (1 << XplorMRParser.Coefficients) | (1 << XplorMRParser.ForceConstant) | (1 << XplorMRParser.Type) | (1 << XplorMRParser.Sign))) != 0):
                    self.state = 338
                    self.xdip_statement()
                    self.state = 343
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 344
                self.match(XplorMRParser.End)
                pass
            elif token in [XplorMRParser.VeAngle]:
                self.enterOuterAlt(localctx, 3)
                self.state = 345
                self.match(XplorMRParser.VeAngle)
                self.state = 349
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << XplorMRParser.Assign) | (1 << XplorMRParser.Classification) | (1 << XplorMRParser.Nrestraints) | (1 << XplorMRParser.Print) | (1 << XplorMRParser.Reset) | (1 << XplorMRParser.ForceConstant) | (1 << XplorMRParser.Cv) | (1 << XplorMRParser.Partition))) != 0):
                    self.state = 346
                    self.vean_statement()
                    self.state = 351
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 352
                self.match(XplorMRParser.End)
                pass
            elif token in [XplorMRParser.Tensor]:
                self.enterOuterAlt(localctx, 4)
                self.state = 353
                self.match(XplorMRParser.Tensor)
                self.state = 357
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << XplorMRParser.Assign) | (1 << XplorMRParser.Classification) | (1 << XplorMRParser.Nrestraints) | (1 << XplorMRParser.Potential) | (1 << XplorMRParser.Print) | (1 << XplorMRParser.Reset) | (1 << XplorMRParser.Coefficients))) != 0):
                    self.state = 354
                    self.tenso_statement()
                    self.state = 359
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 360
                self.match(XplorMRParser.End)
                pass
            elif token in [XplorMRParser.Anisotropy]:
                self.enterOuterAlt(localctx, 5)
                self.state = 361
                self.match(XplorMRParser.Anisotropy)
                self.state = 365
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << XplorMRParser.Assign) | (1 << XplorMRParser.Classification) | (1 << XplorMRParser.Nrestraints) | (1 << XplorMRParser.Potential) | (1 << XplorMRParser.Print) | (1 << XplorMRParser.Reset) | (1 << XplorMRParser.Coefficients) | (1 << XplorMRParser.ForceConstant) | (1 << XplorMRParser.Type))) != 0):
                    self.state = 362
                    self.anis_statement()
                    self.state = 367
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 368
                self.match(XplorMRParser.End)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Planar_restraintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Planar(self):
            return self.getToken(XplorMRParser.Planar, 0)

        def End(self):
            return self.getToken(XplorMRParser.End, 0)

        def Restraints(self):
            return self.getToken(XplorMRParser.Restraints, 0)

        def planar_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Planar_statementContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Planar_statementContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_planar_restraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPlanar_restraint" ):
                listener.enterPlanar_restraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPlanar_restraint" ):
                listener.exitPlanar_restraint(self)




    def planar_restraint(self):

        localctx = XplorMRParser.Planar_restraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_planar_restraint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 372
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==XplorMRParser.Restraints:
                self.state = 371
                self.match(XplorMRParser.Restraints)


            self.state = 374
            self.match(XplorMRParser.Planar)
            self.state = 378
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==XplorMRParser.Group or _la==XplorMRParser.Initialize or _la==XplorMRParser.Vector:
                self.state = 375
                self.planar_statement()
                self.state = 380
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 381
            self.match(XplorMRParser.End)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Harmonic_restraintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Harmonic(self):
            return self.getToken(XplorMRParser.Harmonic, 0)

        def End(self):
            return self.getToken(XplorMRParser.End, 0)

        def Restraints(self):
            return self.getToken(XplorMRParser.Restraints, 0)

        def harmonic_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Harmonic_statementContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Harmonic_statementContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_harmonic_restraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHarmonic_restraint" ):
                listener.enterHarmonic_restraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHarmonic_restraint" ):
                listener.exitHarmonic_restraint(self)




    def harmonic_restraint(self):

        localctx = XplorMRParser.Harmonic_restraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_harmonic_restraint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 384
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==XplorMRParser.Restraints:
                self.state = 383
                self.match(XplorMRParser.Restraints)


            self.state = 386
            self.match(XplorMRParser.Harmonic)
            self.state = 390
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==XplorMRParser.Exponent or _la==XplorMRParser.Normal or _la==XplorMRParser.Vector:
                self.state = 387
                self.harmonic_statement()
                self.state = 392
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 393
            self.match(XplorMRParser.End)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Antidistance_restraintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Xadc(self):
            return self.getToken(XplorMRParser.Xadc, 0)

        def End(self):
            return self.getToken(XplorMRParser.End, 0)

        def antidistance_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Antidistance_statementContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Antidistance_statementContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_antidistance_restraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAntidistance_restraint" ):
                listener.enterAntidistance_restraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAntidistance_restraint" ):
                listener.exitAntidistance_restraint(self)




    def antidistance_restraint(self):

        localctx = XplorMRParser.Antidistance_restraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_antidistance_restraint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 395
            self.match(XplorMRParser.Xadc)
            self.state = 399
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << XplorMRParser.Assign) | (1 << XplorMRParser.Classification) | (1 << XplorMRParser.Nrestraints) | (1 << XplorMRParser.Print) | (1 << XplorMRParser.Reset) | (1 << XplorMRParser.ForceConstant) | (1 << XplorMRParser.Expectation) | (1 << XplorMRParser.Size) | (1 << XplorMRParser.Zero))) != 0) or _la==XplorMRParser.For:
                self.state = 396
                self.antidistance_statement()
                self.state = 401
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 402
            self.match(XplorMRParser.End)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Coupling_restraintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Coupling(self):
            return self.getToken(XplorMRParser.Coupling, 0)

        def End(self):
            return self.getToken(XplorMRParser.End, 0)

        def coupling_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Coupling_statementContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Coupling_statementContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_coupling_restraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCoupling_restraint" ):
                listener.enterCoupling_restraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCoupling_restraint" ):
                listener.exitCoupling_restraint(self)




    def coupling_restraint(self):

        localctx = XplorMRParser.Coupling_restraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_coupling_restraint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 404
            self.match(XplorMRParser.Coupling)
            self.state = 408
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((((_la - 4)) & ~0x3f) == 0 and ((1 << (_la - 4)) & ((1 << (XplorMRParser.Assign - 4)) | (1 << (XplorMRParser.Classification - 4)) | (1 << (XplorMRParser.Nrestraints - 4)) | (1 << (XplorMRParser.Potential - 4)) | (1 << (XplorMRParser.Print - 4)) | (1 << (XplorMRParser.Reset - 4)) | (1 << (XplorMRParser.Coefficients - 4)) | (1 << (XplorMRParser.ForceConstant - 4)) | (1 << (XplorMRParser.Cv - 4)) | (1 << (XplorMRParser.Partition - 4)) | (1 << (XplorMRParser.DegEnergy - 4)))) != 0) or _la==XplorMRParser.For:
                self.state = 405
                self.coupling_statement()
                self.state = 410
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 411
            self.match(XplorMRParser.End)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Carbon_shift_restraintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Carbon(self):
            return self.getToken(XplorMRParser.Carbon, 0)

        def End(self):
            return self.getToken(XplorMRParser.End, 0)

        def carbon_shift_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Carbon_shift_statementContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Carbon_shift_statementContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_carbon_shift_restraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCarbon_shift_restraint" ):
                listener.enterCarbon_shift_restraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCarbon_shift_restraint" ):
                listener.exitCarbon_shift_restraint(self)




    def carbon_shift_restraint(self):

        localctx = XplorMRParser.Carbon_shift_restraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_carbon_shift_restraint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 413
            self.match(XplorMRParser.Carbon)
            self.state = 417
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << XplorMRParser.Assign) | (1 << XplorMRParser.Classification) | (1 << XplorMRParser.Nrestraints) | (1 << XplorMRParser.Potential) | (1 << XplorMRParser.Print) | (1 << XplorMRParser.Reset) | (1 << XplorMRParser.ForceConstant) | (1 << XplorMRParser.Expectation) | (1 << XplorMRParser.Zero))) != 0) or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & ((1 << (XplorMRParser.PhiStep - 66)) | (1 << (XplorMRParser.PsiStep - 66)) | (1 << (XplorMRParser.Rcoil - 66)))) != 0):
                self.state = 414
                self.carbon_shift_statement()
                self.state = 419
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 420
            self.match(XplorMRParser.End)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Proton_shift_restraintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Proton(self):
            return self.getToken(XplorMRParser.Proton, 0)

        def End(self):
            return self.getToken(XplorMRParser.End, 0)

        def proton_shift_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Proton_shift_statementContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Proton_shift_statementContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_proton_shift_restraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProton_shift_restraint" ):
                listener.enterProton_shift_restraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProton_shift_restraint" ):
                listener.exitProton_shift_restraint(self)




    def proton_shift_restraint(self):

        localctx = XplorMRParser.Proton_shift_restraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_proton_shift_restraint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 422
            self.match(XplorMRParser.Proton)
            self.state = 426
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << XplorMRParser.Classification) | (1 << XplorMRParser.Potential) | (1 << XplorMRParser.Print) | (1 << XplorMRParser.Reset) | (1 << XplorMRParser.ForceConstant) | (1 << XplorMRParser.Anisotropy))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (XplorMRParser.DegEnergy - 64)) | (1 << (XplorMRParser.Carbon - 64)) | (1 << (XplorMRParser.Rcoil - 64)) | (1 << (XplorMRParser.Observed - 64)) | (1 << (XplorMRParser.Amides - 64)) | (1 << (XplorMRParser.Nitrogens - 64)) | (1 << (XplorMRParser.Oxygens - 64)) | (1 << (XplorMRParser.RingAtoms - 64)) | (1 << (XplorMRParser.AlphasAndAmides - 64)) | (1 << (XplorMRParser.Error - 64)))) != 0):
                self.state = 423
                self.proton_shift_statement()
                self.state = 428
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 429
            self.match(XplorMRParser.End)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Dihedral_angle_db_restraintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Ramachandran(self):
            return self.getToken(XplorMRParser.Ramachandran, 0)

        def End(self):
            return self.getToken(XplorMRParser.End, 0)

        def ramachandran_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Ramachandran_statementContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Ramachandran_statementContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_dihedral_angle_db_restraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDihedral_angle_db_restraint" ):
                listener.enterDihedral_angle_db_restraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDihedral_angle_db_restraint" ):
                listener.exitDihedral_angle_db_restraint(self)




    def dihedral_angle_db_restraint(self):

        localctx = XplorMRParser.Dihedral_angle_db_restraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_dihedral_angle_db_restraint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 431
            self.match(XplorMRParser.Ramachandran)
            self.state = 435
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << XplorMRParser.Assign) | (1 << XplorMRParser.Classification) | (1 << XplorMRParser.Nrestraints) | (1 << XplorMRParser.Print) | (1 << XplorMRParser.Reset) | (1 << XplorMRParser.Scale) | (1 << XplorMRParser.Cutoff) | (1 << XplorMRParser.ForceConstant) | (1 << XplorMRParser.Size) | (1 << XplorMRParser.Zero))) != 0) or ((((_la - 78)) & ~0x3f) == 0 and ((1 << (_la - 78)) & ((1 << (XplorMRParser.Gaussian - 78)) | (1 << (XplorMRParser.Phase - 78)) | (1 << (XplorMRParser.Quartic - 78)) | (1 << (XplorMRParser.Shape - 78)) | (1 << (XplorMRParser.Sort - 78)))) != 0):
                self.state = 432
                self.ramachandran_statement()
                self.state = 437
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 438
            self.match(XplorMRParser.End)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Radius_of_gyration_restraintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Collapse(self):
            return self.getToken(XplorMRParser.Collapse, 0)

        def End(self):
            return self.getToken(XplorMRParser.End, 0)

        def collapse_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Collapse_statementContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Collapse_statementContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_radius_of_gyration_restraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRadius_of_gyration_restraint" ):
                listener.enterRadius_of_gyration_restraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRadius_of_gyration_restraint" ):
                listener.exitRadius_of_gyration_restraint(self)




    def radius_of_gyration_restraint(self):

        localctx = XplorMRParser.Radius_of_gyration_restraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_radius_of_gyration_restraint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 440
            self.match(XplorMRParser.Collapse)
            self.state = 444
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << XplorMRParser.Assign) | (1 << XplorMRParser.Print) | (1 << XplorMRParser.Reset) | (1 << XplorMRParser.Scale))) != 0) or _la==XplorMRParser.For:
                self.state = 441
                self.collapse_statement()
                self.state = 446
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 447
            self.match(XplorMRParser.End)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Diffusion_anisotropy_restraintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Danisotropy(self):
            return self.getToken(XplorMRParser.Danisotropy, 0)

        def End(self):
            return self.getToken(XplorMRParser.End, 0)

        def diffusion_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Diffusion_statementContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Diffusion_statementContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_diffusion_anisotropy_restraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDiffusion_anisotropy_restraint" ):
                listener.enterDiffusion_anisotropy_restraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDiffusion_anisotropy_restraint" ):
                listener.exitDiffusion_anisotropy_restraint(self)




    def diffusion_anisotropy_restraint(self):

        localctx = XplorMRParser.Diffusion_anisotropy_restraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_diffusion_anisotropy_restraint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 449
            self.match(XplorMRParser.Danisotropy)
            self.state = 453
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << XplorMRParser.Assign) | (1 << XplorMRParser.Classification) | (1 << XplorMRParser.Nrestraints) | (1 << XplorMRParser.Potential) | (1 << XplorMRParser.Print) | (1 << XplorMRParser.Reset) | (1 << XplorMRParser.Coefficients) | (1 << XplorMRParser.ForceConstant) | (1 << XplorMRParser.Type))) != 0):
                self.state = 450
                self.diffusion_statement()
                self.state = 455
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 456
            self.match(XplorMRParser.End)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Orientation_db_restraintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Orient(self):
            return self.getToken(XplorMRParser.Orient, 0)

        def End(self):
            return self.getToken(XplorMRParser.End, 0)

        def orientation_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Orientation_statementContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Orientation_statementContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_orientation_db_restraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOrientation_db_restraint" ):
                listener.enterOrientation_db_restraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOrientation_db_restraint" ):
                listener.exitOrientation_db_restraint(self)




    def orientation_db_restraint(self):

        localctx = XplorMRParser.Orientation_db_restraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_orientation_db_restraint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 458
            self.match(XplorMRParser.Orient)
            self.state = 462
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << XplorMRParser.Assign) | (1 << XplorMRParser.Classification) | (1 << XplorMRParser.Nrestraints) | (1 << XplorMRParser.Print) | (1 << XplorMRParser.Reset) | (1 << XplorMRParser.Cutoff) | (1 << XplorMRParser.ForceConstant) | (1 << XplorMRParser.Size) | (1 << XplorMRParser.Zero))) != 0) or ((((_la - 78)) & ~0x3f) == 0 and ((1 << (_la - 78)) & ((1 << (XplorMRParser.Gaussian - 78)) | (1 << (XplorMRParser.Quartic - 78)) | (1 << (XplorMRParser.Height - 78)) | (1 << (XplorMRParser.MaxGaussians - 78)) | (1 << (XplorMRParser.NewGaussian - 78)))) != 0) or _la==XplorMRParser.Residue:
                self.state = 459
                self.orientation_statement()
                self.state = 464
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 465
            self.match(XplorMRParser.End)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Csa_restraintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Dcsa(self):
            return self.getToken(XplorMRParser.Dcsa, 0)

        def End(self):
            return self.getToken(XplorMRParser.End, 0)

        def csa_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Csa_statementContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Csa_statementContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_csa_restraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCsa_restraint" ):
                listener.enterCsa_restraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCsa_restraint" ):
                listener.exitCsa_restraint(self)




    def csa_restraint(self):

        localctx = XplorMRParser.Csa_restraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_csa_restraint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 467
            self.match(XplorMRParser.Dcsa)
            self.state = 471
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << XplorMRParser.Assign) | (1 << XplorMRParser.Classification) | (1 << XplorMRParser.Nrestraints) | (1 << XplorMRParser.Potential) | (1 << XplorMRParser.Print) | (1 << XplorMRParser.Reset) | (1 << XplorMRParser.Scale) | (1 << XplorMRParser.Coefficients) | (1 << XplorMRParser.ForceConstant) | (1 << XplorMRParser.Type))) != 0) or _la==XplorMRParser.Sigma or _la==XplorMRParser.For:
                self.state = 468
                self.csa_statement()
                self.state = 473
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 474
            self.match(XplorMRParser.End)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pcsa_restraintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Pcsa(self):
            return self.getToken(XplorMRParser.Pcsa, 0)

        def End(self):
            return self.getToken(XplorMRParser.End, 0)

        def pcsa_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Pcsa_statementContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Pcsa_statementContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_pcsa_restraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPcsa_restraint" ):
                listener.enterPcsa_restraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPcsa_restraint" ):
                listener.exitPcsa_restraint(self)




    def pcsa_restraint(self):

        localctx = XplorMRParser.Pcsa_restraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_pcsa_restraint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 476
            self.match(XplorMRParser.Pcsa)
            self.state = 480
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << XplorMRParser.Assign) | (1 << XplorMRParser.Classification) | (1 << XplorMRParser.Nrestraints) | (1 << XplorMRParser.Potential) | (1 << XplorMRParser.Print) | (1 << XplorMRParser.Reset) | (1 << XplorMRParser.Scale) | (1 << XplorMRParser.Coefficients) | (1 << XplorMRParser.ForceConstant))) != 0) or _la==XplorMRParser.Sigma:
                self.state = 477
                self.pcsa_statement()
                self.state = 482
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 483
            self.match(XplorMRParser.End)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class One_bond_coupling_restraintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OneBond(self):
            return self.getToken(XplorMRParser.OneBond, 0)

        def End(self):
            return self.getToken(XplorMRParser.End, 0)

        def one_bond_coupling_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.One_bond_coupling_statementContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.One_bond_coupling_statementContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_one_bond_coupling_restraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOne_bond_coupling_restraint" ):
                listener.enterOne_bond_coupling_restraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOne_bond_coupling_restraint" ):
                listener.exitOne_bond_coupling_restraint(self)




    def one_bond_coupling_restraint(self):

        localctx = XplorMRParser.One_bond_coupling_restraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_one_bond_coupling_restraint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 485
            self.match(XplorMRParser.OneBond)
            self.state = 489
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << XplorMRParser.Assign) | (1 << XplorMRParser.Classification) | (1 << XplorMRParser.Nrestraints) | (1 << XplorMRParser.Potential) | (1 << XplorMRParser.Print) | (1 << XplorMRParser.Reset) | (1 << XplorMRParser.Coefficients) | (1 << XplorMRParser.ForceConstant))) != 0):
                self.state = 486
                self.one_bond_coupling_statement()
                self.state = 491
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 492
            self.match(XplorMRParser.End)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Angle_db_restraintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AngleDb(self):
            return self.getToken(XplorMRParser.AngleDb, 0)

        def End(self):
            return self.getToken(XplorMRParser.End, 0)

        def angle_db_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Angle_db_statementContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Angle_db_statementContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_angle_db_restraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAngle_db_restraint" ):
                listener.enterAngle_db_restraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAngle_db_restraint" ):
                listener.exitAngle_db_restraint(self)




    def angle_db_restraint(self):

        localctx = XplorMRParser.Angle_db_restraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_angle_db_restraint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 494
            self.match(XplorMRParser.AngleDb)
            self.state = 498
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << XplorMRParser.Assign) | (1 << XplorMRParser.Classification) | (1 << XplorMRParser.Nrestraints) | (1 << XplorMRParser.Potential) | (1 << XplorMRParser.Print) | (1 << XplorMRParser.Reset) | (1 << XplorMRParser.ForceConstant) | (1 << XplorMRParser.Expectation) | (1 << XplorMRParser.Size) | (1 << XplorMRParser.Zero))) != 0) or _la==XplorMRParser.Error or _la==XplorMRParser.DerivFlag:
                self.state = 495
                self.angle_db_statement()
                self.state = 500
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 501
            self.match(XplorMRParser.End)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pre_restraintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PMagnetic(self):
            return self.getToken(XplorMRParser.PMagnetic, 0)

        def End(self):
            return self.getToken(XplorMRParser.End, 0)

        def pre_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Pre_statementContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Pre_statementContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_pre_restraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPre_restraint" ):
                listener.enterPre_restraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPre_restraint" ):
                listener.exitPre_restraint(self)




    def pre_restraint(self):

        localctx = XplorMRParser.Pre_restraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_pre_restraint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 503
            self.match(XplorMRParser.PMagnetic)
            self.state = 507
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << XplorMRParser.Assign) | (1 << XplorMRParser.Classification) | (1 << XplorMRParser.Nrestraints) | (1 << XplorMRParser.Potential) | (1 << XplorMRParser.Print) | (1 << XplorMRParser.Reset) | (1 << XplorMRParser.ForceConstant))) != 0) or ((((_la - 97)) & ~0x3f) == 0 and ((1 << (_la - 97)) & ((1 << (XplorMRParser.Kconst - 97)) | (1 << (XplorMRParser.Omega - 97)) | (1 << (XplorMRParser.Tauc - 97)) | (1 << (XplorMRParser.Debug - 97)))) != 0) or _la==XplorMRParser.For:
                self.state = 504
                self.pre_statement()
                self.state = 509
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 510
            self.match(XplorMRParser.End)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pcs_restraintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Xpcs(self):
            return self.getToken(XplorMRParser.Xpcs, 0)

        def End(self):
            return self.getToken(XplorMRParser.End, 0)

        def pcs_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Pcs_statementContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Pcs_statementContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_pcs_restraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPcs_restraint" ):
                listener.enterPcs_restraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPcs_restraint" ):
                listener.exitPcs_restraint(self)




    def pcs_restraint(self):

        localctx = XplorMRParser.Pcs_restraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_pcs_restraint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 512
            self.match(XplorMRParser.Xpcs)
            self.state = 516
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << XplorMRParser.Assign) | (1 << XplorMRParser.Classification) | (1 << XplorMRParser.Nrestraints) | (1 << XplorMRParser.Print) | (1 << XplorMRParser.Reset) | (1 << XplorMRParser.Coefficients) | (1 << XplorMRParser.ForceConstant))) != 0) or ((((_la - 102)) & ~0x3f) == 0 and ((1 << (_la - 102)) & ((1 << (XplorMRParser.Tolerance - 102)) | (1 << (XplorMRParser.Save - 102)) | (1 << (XplorMRParser.Fmed - 102)) | (1 << (XplorMRParser.ErrOn - 102)) | (1 << (XplorMRParser.ErrOff - 102)) | (1 << (XplorMRParser.Fon - 102)) | (1 << (XplorMRParser.Foff - 102)) | (1 << (XplorMRParser.Son - 102)) | (1 << (XplorMRParser.Soff - 102)) | (1 << (XplorMRParser.Frun - 102)))) != 0) or _la==XplorMRParser.For:
                self.state = 513
                self.pcs_statement()
                self.state = 518
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 519
            self.match(XplorMRParser.End)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Prdc_restraintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Xrdcoupling(self):
            return self.getToken(XplorMRParser.Xrdcoupling, 0)

        def End(self):
            return self.getToken(XplorMRParser.End, 0)

        def prdc_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Prdc_statementContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Prdc_statementContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_prdc_restraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrdc_restraint" ):
                listener.enterPrdc_restraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrdc_restraint" ):
                listener.exitPrdc_restraint(self)




    def prdc_restraint(self):

        localctx = XplorMRParser.Prdc_restraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_prdc_restraint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 521
            self.match(XplorMRParser.Xrdcoupling)
            self.state = 525
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << XplorMRParser.Assign) | (1 << XplorMRParser.Classification) | (1 << XplorMRParser.Nrestraints) | (1 << XplorMRParser.Print) | (1 << XplorMRParser.Reset) | (1 << XplorMRParser.Coefficients) | (1 << XplorMRParser.ForceConstant))) != 0) or ((((_la - 102)) & ~0x3f) == 0 and ((1 << (_la - 102)) & ((1 << (XplorMRParser.Tolerance - 102)) | (1 << (XplorMRParser.Save - 102)) | (1 << (XplorMRParser.Fmed - 102)) | (1 << (XplorMRParser.ErrOn - 102)) | (1 << (XplorMRParser.ErrOff - 102)) | (1 << (XplorMRParser.Fon - 102)) | (1 << (XplorMRParser.Foff - 102)) | (1 << (XplorMRParser.Son - 102)) | (1 << (XplorMRParser.Soff - 102)) | (1 << (XplorMRParser.Frun - 102)))) != 0):
                self.state = 522
                self.prdc_statement()
                self.state = 527
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 528
            self.match(XplorMRParser.End)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Porientation_restraintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Xangle(self):
            return self.getToken(XplorMRParser.Xangle, 0)

        def End(self):
            return self.getToken(XplorMRParser.End, 0)

        def porientation_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Porientation_statementContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Porientation_statementContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_porientation_restraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPorientation_restraint" ):
                listener.enterPorientation_restraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPorientation_restraint" ):
                listener.exitPorientation_restraint(self)




    def porientation_restraint(self):

        localctx = XplorMRParser.Porientation_restraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_porientation_restraint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 530
            self.match(XplorMRParser.Xangle)
            self.state = 534
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << XplorMRParser.Assign) | (1 << XplorMRParser.Classification) | (1 << XplorMRParser.Nrestraints) | (1 << XplorMRParser.Print) | (1 << XplorMRParser.Reset) | (1 << XplorMRParser.ForceConstant))) != 0):
                self.state = 531
                self.porientation_statement()
                self.state = 536
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 537
            self.match(XplorMRParser.End)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pccr_restraintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Xccr(self):
            return self.getToken(XplorMRParser.Xccr, 0)

        def End(self):
            return self.getToken(XplorMRParser.End, 0)

        def pccr_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Pccr_statementContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Pccr_statementContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_pccr_restraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPccr_restraint" ):
                listener.enterPccr_restraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPccr_restraint" ):
                listener.exitPccr_restraint(self)




    def pccr_restraint(self):

        localctx = XplorMRParser.Pccr_restraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_pccr_restraint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 539
            self.match(XplorMRParser.Xccr)
            self.state = 543
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << XplorMRParser.Assign) | (1 << XplorMRParser.Classification) | (1 << XplorMRParser.Nrestraints) | (1 << XplorMRParser.Print) | (1 << XplorMRParser.Reset) | (1 << XplorMRParser.Coefficients) | (1 << XplorMRParser.ForceConstant))) != 0) or _la==XplorMRParser.Frun or _la==XplorMRParser.Weip:
                self.state = 540
                self.pccr_statement()
                self.state = 545
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 546
            self.match(XplorMRParser.End)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Hbond_restraintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Hbda(self):
            return self.getToken(XplorMRParser.Hbda, 0)

        def End(self):
            return self.getToken(XplorMRParser.End, 0)

        def hbond_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Hbond_statementContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Hbond_statementContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_hbond_restraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHbond_restraint" ):
                listener.enterHbond_restraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHbond_restraint" ):
                listener.exitHbond_restraint(self)




    def hbond_restraint(self):

        localctx = XplorMRParser.Hbond_restraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_hbond_restraint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 548
            self.match(XplorMRParser.Hbda)
            self.state = 552
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << XplorMRParser.Assign) | (1 << XplorMRParser.Classification) | (1 << XplorMRParser.Nrestraints) | (1 << XplorMRParser.Print) | (1 << XplorMRParser.Reset) | (1 << XplorMRParser.ForceConstant))) != 0) or _la==XplorMRParser.For:
                self.state = 549
                self.hbond_statement()
                self.state = 554
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 555
            self.match(XplorMRParser.End)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Hbond_db_restraintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Hbdb(self):
            return self.getToken(XplorMRParser.Hbdb, 0)

        def End(self):
            return self.getToken(XplorMRParser.End, 0)

        def hbond_db_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Hbond_db_statementContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Hbond_db_statementContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_hbond_db_restraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHbond_db_restraint" ):
                listener.enterHbond_db_restraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHbond_db_restraint" ):
                listener.exitHbond_db_restraint(self)




    def hbond_db_restraint(self):

        localctx = XplorMRParser.Hbond_db_restraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_hbond_db_restraint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 557
            self.match(XplorMRParser.Hbdb)
            self.state = 561
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==XplorMRParser.Assign or ((((_la - 116)) & ~0x3f) == 0 and ((1 << (_la - 116)) & ((1 << (XplorMRParser.Kdir - 116)) | (1 << (XplorMRParser.Klin - 116)) | (1 << (XplorMRParser.Nseg - 116)) | (1 << (XplorMRParser.Nmin - 116)) | (1 << (XplorMRParser.Nmax - 116)) | (1 << (XplorMRParser.Segm - 116)) | (1 << (XplorMRParser.Ohcut - 116)) | (1 << (XplorMRParser.Coh1cut - 116)) | (1 << (XplorMRParser.Coh2cut - 116)) | (1 << (XplorMRParser.Ohncut - 116)) | (1 << (XplorMRParser.Updfrq - 116)) | (1 << (XplorMRParser.Prnfrq - 116)) | (1 << (XplorMRParser.Freemode - 116)) | (1 << (XplorMRParser.For - 116)))) != 0):
                self.state = 558
                self.hbond_db_statement()
                self.state = 563
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 564
            self.match(XplorMRParser.End)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Noe_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def noe_assign(self):
            return self.getTypedRuleContext(XplorMRParser.Noe_assignContext,0)


        def noe_assign_loop(self):
            return self.getTypedRuleContext(XplorMRParser.Noe_assign_loopContext,0)


        def Asymptote(self):
            return self.getToken(XplorMRParser.Asymptote, 0)

        def Simple_name(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Simple_name)
            else:
                return self.getToken(XplorMRParser.Simple_name, i)

        def number_s(self):
            return self.getTypedRuleContext(XplorMRParser.Number_sContext,0)


        def Average(self):
            return self.getToken(XplorMRParser.Average, 0)

        def Simple_name_AM(self):
            return self.getToken(XplorMRParser.Simple_name_AM, 0)

        def Averaging_methods(self):
            return self.getToken(XplorMRParser.Averaging_methods, 0)

        def Bhig(self):
            return self.getToken(XplorMRParser.Bhig, 0)

        def Ceiling(self):
            return self.getToken(XplorMRParser.Ceiling, 0)

        def Equ_op(self):
            return self.getToken(XplorMRParser.Equ_op, 0)

        def Classification(self):
            return self.getToken(XplorMRParser.Classification, 0)

        def CountViol(self):
            return self.getToken(XplorMRParser.CountViol, 0)

        def Distribute(self):
            return self.getToken(XplorMRParser.Distribute, 0)

        def Monomers(self):
            return self.getToken(XplorMRParser.Monomers, 0)

        def Integer(self):
            return self.getToken(XplorMRParser.Integer, 0)

        def Ncount(self):
            return self.getToken(XplorMRParser.Ncount, 0)

        def Nrestraints(self):
            return self.getToken(XplorMRParser.Nrestraints, 0)

        def Potential(self):
            return self.getToken(XplorMRParser.Potential, 0)

        def Simple_name_PT(self):
            return self.getToken(XplorMRParser.Simple_name_PT, 0)

        def Potential_types(self):
            return self.getToken(XplorMRParser.Potential_types, 0)

        def Predict(self):
            return self.getToken(XplorMRParser.Predict, 0)

        def predict_statement(self):
            return self.getTypedRuleContext(XplorMRParser.Predict_statementContext,0)


        def End(self):
            return self.getToken(XplorMRParser.End, 0)

        def Print(self):
            return self.getToken(XplorMRParser.Print, 0)

        def Threshold(self):
            return self.getToken(XplorMRParser.Threshold, 0)

        def Reset(self):
            return self.getToken(XplorMRParser.Reset, 0)

        def Rswitch(self):
            return self.getToken(XplorMRParser.Rswitch, 0)

        def Scale(self):
            return self.getToken(XplorMRParser.Scale, 0)

        def SoExponent(self):
            return self.getToken(XplorMRParser.SoExponent, 0)

        def SqConstant(self):
            return self.getToken(XplorMRParser.SqConstant, 0)

        def SqExponent(self):
            return self.getToken(XplorMRParser.SqExponent, 0)

        def SqOffset(self):
            return self.getToken(XplorMRParser.SqOffset, 0)

        def Temperature(self):
            return self.getToken(XplorMRParser.Temperature, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_noe_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNoe_statement" ):
                listener.enterNoe_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNoe_statement" ):
                listener.exitNoe_statement(self)




    def noe_statement(self):

        localctx = XplorMRParser.Noe_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_noe_statement)
        self._la = 0 # Token type
        try:
            self.state = 641
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [XplorMRParser.Assign]:
                self.enterOuterAlt(localctx, 1)
                self.state = 566
                self.noe_assign()
                pass
            elif token in [XplorMRParser.For]:
                self.enterOuterAlt(localctx, 2)
                self.state = 567
                self.noe_assign_loop()
                pass
            elif token in [XplorMRParser.Asymptote]:
                self.enterOuterAlt(localctx, 3)
                self.state = 568
                self.match(XplorMRParser.Asymptote)
                self.state = 569
                self.match(XplorMRParser.Simple_name)
                self.state = 570
                self.number_s()
                pass
            elif token in [XplorMRParser.Average]:
                self.enterOuterAlt(localctx, 4)
                self.state = 571
                self.match(XplorMRParser.Average)
                self.state = 572
                self.match(XplorMRParser.Simple_name_AM)
                self.state = 573
                self.match(XplorMRParser.Averaging_methods)
                pass
            elif token in [XplorMRParser.Bhig]:
                self.enterOuterAlt(localctx, 5)
                self.state = 574
                self.match(XplorMRParser.Bhig)
                self.state = 575
                self.match(XplorMRParser.Simple_name)
                self.state = 576
                self.number_s()
                pass
            elif token in [XplorMRParser.Ceiling]:
                self.enterOuterAlt(localctx, 6)
                self.state = 577
                self.match(XplorMRParser.Ceiling)
                self.state = 579
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 578
                    self.match(XplorMRParser.Equ_op)


                self.state = 581
                self.number_s()
                pass
            elif token in [XplorMRParser.Classification]:
                self.enterOuterAlt(localctx, 7)
                self.state = 582
                self.match(XplorMRParser.Classification)
                self.state = 584
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 583
                    self.match(XplorMRParser.Equ_op)


                self.state = 586
                self.match(XplorMRParser.Simple_name)
                pass
            elif token in [XplorMRParser.CountViol]:
                self.enterOuterAlt(localctx, 8)
                self.state = 587
                self.match(XplorMRParser.CountViol)
                self.state = 588
                self.match(XplorMRParser.Simple_name)
                pass
            elif token in [XplorMRParser.Distribute]:
                self.enterOuterAlt(localctx, 9)
                self.state = 589
                self.match(XplorMRParser.Distribute)
                self.state = 590
                self.match(XplorMRParser.Simple_name)
                self.state = 591
                self.match(XplorMRParser.Simple_name)
                self.state = 592
                self.number_s()
                pass
            elif token in [XplorMRParser.Monomers]:
                self.enterOuterAlt(localctx, 10)
                self.state = 593
                self.match(XplorMRParser.Monomers)
                self.state = 594
                self.match(XplorMRParser.Simple_name)
                self.state = 595
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.Ncount]:
                self.enterOuterAlt(localctx, 11)
                self.state = 596
                self.match(XplorMRParser.Ncount)
                self.state = 597
                self.match(XplorMRParser.Simple_name)
                self.state = 598
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.Nrestraints]:
                self.enterOuterAlt(localctx, 12)
                self.state = 599
                self.match(XplorMRParser.Nrestraints)
                self.state = 601
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 600
                    self.match(XplorMRParser.Equ_op)


                self.state = 603
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.Potential]:
                self.enterOuterAlt(localctx, 13)
                self.state = 604
                self.match(XplorMRParser.Potential)
                self.state = 605
                self.match(XplorMRParser.Simple_name_PT)
                self.state = 606
                self.match(XplorMRParser.Potential_types)
                pass
            elif token in [XplorMRParser.Predict]:
                self.enterOuterAlt(localctx, 14)
                self.state = 607
                self.match(XplorMRParser.Predict)
                self.state = 608
                self.predict_statement()
                self.state = 609
                self.match(XplorMRParser.End)
                pass
            elif token in [XplorMRParser.Print]:
                self.enterOuterAlt(localctx, 15)
                self.state = 611
                self.match(XplorMRParser.Print)
                self.state = 612
                self.match(XplorMRParser.Threshold)
                self.state = 614
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 613
                    self.match(XplorMRParser.Equ_op)


                self.state = 616
                self.number_s()
                pass
            elif token in [XplorMRParser.Reset]:
                self.enterOuterAlt(localctx, 16)
                self.state = 617
                self.match(XplorMRParser.Reset)
                pass
            elif token in [XplorMRParser.Rswitch]:
                self.enterOuterAlt(localctx, 17)
                self.state = 618
                self.match(XplorMRParser.Rswitch)
                self.state = 619
                self.match(XplorMRParser.Simple_name)
                self.state = 620
                self.number_s()
                pass
            elif token in [XplorMRParser.Scale]:
                self.enterOuterAlt(localctx, 18)
                self.state = 621
                self.match(XplorMRParser.Scale)
                self.state = 622
                self.match(XplorMRParser.Simple_name)
                self.state = 623
                self.number_s()
                pass
            elif token in [XplorMRParser.SoExponent]:
                self.enterOuterAlt(localctx, 19)
                self.state = 624
                self.match(XplorMRParser.SoExponent)
                self.state = 625
                self.match(XplorMRParser.Simple_name)
                self.state = 626
                self.number_s()
                pass
            elif token in [XplorMRParser.SqConstant]:
                self.enterOuterAlt(localctx, 20)
                self.state = 627
                self.match(XplorMRParser.SqConstant)
                self.state = 628
                self.match(XplorMRParser.Simple_name)
                self.state = 629
                self.number_s()
                pass
            elif token in [XplorMRParser.SqExponent]:
                self.enterOuterAlt(localctx, 21)
                self.state = 630
                self.match(XplorMRParser.SqExponent)
                self.state = 631
                self.match(XplorMRParser.Simple_name)
                self.state = 632
                self.number_s()
                pass
            elif token in [XplorMRParser.SqOffset]:
                self.enterOuterAlt(localctx, 22)
                self.state = 633
                self.match(XplorMRParser.SqOffset)
                self.state = 634
                self.match(XplorMRParser.Simple_name)
                self.state = 635
                self.number_s()
                pass
            elif token in [XplorMRParser.Temperature]:
                self.enterOuterAlt(localctx, 23)
                self.state = 636
                self.match(XplorMRParser.Temperature)
                self.state = 638
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 637
                    self.match(XplorMRParser.Equ_op)


                self.state = 640
                self.number_s()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Noe_assignContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Assign(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Assign)
            else:
                return self.getToken(XplorMRParser.Assign, i)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.SelectionContext,i)


        def number(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.NumberContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.NumberContext,i)


        def noe_annotation(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Noe_annotationContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Noe_annotationContext,i)


        def Or_op(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Or_op)
            else:
                return self.getToken(XplorMRParser.Or_op, i)

        def getRuleIndex(self):
            return XplorMRParser.RULE_noe_assign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNoe_assign" ):
                listener.enterNoe_assign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNoe_assign" ):
                listener.exitNoe_assign(self)




    def noe_assign(self):

        localctx = XplorMRParser.Noe_assignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_noe_assign)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 643
            self.match(XplorMRParser.Assign)
            self.state = 644
            self.selection()
            self.state = 645
            self.selection()
            self.state = 646
            self.number()
            self.state = 648
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,40,self._ctx)
            if la_ == 1:
                self.state = 647
                self.number()


            self.state = 651
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 188)) & ~0x3f) == 0 and ((1 << (_la - 188)) & ((1 << (XplorMRParser.Integer - 188)) | (1 << (XplorMRParser.Real - 188)) | (1 << (XplorMRParser.Symbol_name - 188)))) != 0):
                self.state = 650
                self.number()


            self.state = 656
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << XplorMRParser.Peak) | (1 << XplorMRParser.Spectrum) | (1 << XplorMRParser.Volume) | (1 << XplorMRParser.Ppm1) | (1 << XplorMRParser.Ppm2) | (1 << XplorMRParser.Cv) | (1 << XplorMRParser.Weight))) != 0):
                self.state = 653
                self.noe_annotation()
                self.state = 658
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 676
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==XplorMRParser.Or_op:
                self.state = 659
                self.match(XplorMRParser.Or_op)
                self.state = 661
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Assign:
                    self.state = 660
                    self.match(XplorMRParser.Assign)


                self.state = 663
                self.selection()
                self.state = 664
                self.selection()
                self.state = 666
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,44,self._ctx)
                if la_ == 1:
                    self.state = 665
                    self.number()


                self.state = 669
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,45,self._ctx)
                if la_ == 1:
                    self.state = 668
                    self.number()


                self.state = 672
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 188)) & ~0x3f) == 0 and ((1 << (_la - 188)) & ((1 << (XplorMRParser.Integer - 188)) | (1 << (XplorMRParser.Real - 188)) | (1 << (XplorMRParser.Symbol_name - 188)))) != 0):
                    self.state = 671
                    self.number()


                self.state = 678
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Predict_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Cutoff(self):
            return self.getToken(XplorMRParser.Cutoff, 0)

        def number_s(self):
            return self.getTypedRuleContext(XplorMRParser.Number_sContext,0)


        def Equ_op(self):
            return self.getToken(XplorMRParser.Equ_op, 0)

        def Cuton(self):
            return self.getToken(XplorMRParser.Cuton, 0)

        def From(self):
            return self.getToken(XplorMRParser.From, 0)

        def selection(self):
            return self.getTypedRuleContext(XplorMRParser.SelectionContext,0)


        def To(self):
            return self.getToken(XplorMRParser.To, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_predict_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPredict_statement" ):
                listener.enterPredict_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPredict_statement" ):
                listener.exitPredict_statement(self)




    def predict_statement(self):

        localctx = XplorMRParser.Predict_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_predict_statement)
        self._la = 0 # Token type
        try:
            self.state = 693
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [XplorMRParser.Cutoff]:
                self.enterOuterAlt(localctx, 1)
                self.state = 679
                self.match(XplorMRParser.Cutoff)
                self.state = 681
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 680
                    self.match(XplorMRParser.Equ_op)


                self.state = 683
                self.number_s()
                pass
            elif token in [XplorMRParser.Cuton]:
                self.enterOuterAlt(localctx, 2)
                self.state = 684
                self.match(XplorMRParser.Cuton)
                self.state = 686
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 685
                    self.match(XplorMRParser.Equ_op)


                self.state = 688
                self.number_s()
                pass
            elif token in [XplorMRParser.From]:
                self.enterOuterAlt(localctx, 3)
                self.state = 689
                self.match(XplorMRParser.From)
                self.state = 690
                self.selection()
                pass
            elif token in [XplorMRParser.To]:
                self.enterOuterAlt(localctx, 4)
                self.state = 691
                self.match(XplorMRParser.To)
                self.state = 692
                self.selection()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Noe_annotationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Peak(self):
            return self.getToken(XplorMRParser.Peak, 0)

        def number_a(self):
            return self.getTypedRuleContext(XplorMRParser.Number_aContext,0)


        def Equ_op(self):
            return self.getToken(XplorMRParser.Equ_op, 0)

        def Spectrum(self):
            return self.getToken(XplorMRParser.Spectrum, 0)

        def Weight(self):
            return self.getToken(XplorMRParser.Weight, 0)

        def Volume(self):
            return self.getToken(XplorMRParser.Volume, 0)

        def Ppm1(self):
            return self.getToken(XplorMRParser.Ppm1, 0)

        def Ppm2(self):
            return self.getToken(XplorMRParser.Ppm2, 0)

        def Cv(self):
            return self.getToken(XplorMRParser.Cv, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_noe_annotation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNoe_annotation" ):
                listener.enterNoe_annotation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNoe_annotation" ):
                listener.exitNoe_annotation(self)




    def noe_annotation(self):

        localctx = XplorMRParser.Noe_annotationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_noe_annotation)
        self._la = 0 # Token type
        try:
            self.state = 730
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [XplorMRParser.Peak]:
                self.enterOuterAlt(localctx, 1)
                self.state = 695
                self.match(XplorMRParser.Peak)
                self.state = 697
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 696
                    self.match(XplorMRParser.Equ_op)


                self.state = 699
                self.number_a()
                pass
            elif token in [XplorMRParser.Spectrum]:
                self.enterOuterAlt(localctx, 2)
                self.state = 700
                self.match(XplorMRParser.Spectrum)
                self.state = 702
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 701
                    self.match(XplorMRParser.Equ_op)


                self.state = 704
                self.number_a()
                pass
            elif token in [XplorMRParser.Weight]:
                self.enterOuterAlt(localctx, 3)
                self.state = 705
                self.match(XplorMRParser.Weight)
                self.state = 707
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 706
                    self.match(XplorMRParser.Equ_op)


                self.state = 709
                self.number_a()
                pass
            elif token in [XplorMRParser.Volume]:
                self.enterOuterAlt(localctx, 4)
                self.state = 710
                self.match(XplorMRParser.Volume)
                self.state = 712
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 711
                    self.match(XplorMRParser.Equ_op)


                self.state = 714
                self.number_a()
                pass
            elif token in [XplorMRParser.Ppm1]:
                self.enterOuterAlt(localctx, 5)
                self.state = 715
                self.match(XplorMRParser.Ppm1)
                self.state = 717
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 716
                    self.match(XplorMRParser.Equ_op)


                self.state = 719
                self.number_a()
                pass
            elif token in [XplorMRParser.Ppm2]:
                self.enterOuterAlt(localctx, 6)
                self.state = 720
                self.match(XplorMRParser.Ppm2)
                self.state = 722
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 721
                    self.match(XplorMRParser.Equ_op)


                self.state = 724
                self.number_a()
                pass
            elif token in [XplorMRParser.Cv]:
                self.enterOuterAlt(localctx, 7)
                self.state = 725
                self.match(XplorMRParser.Cv)
                self.state = 727
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 726
                    self.match(XplorMRParser.Equ_op)


                self.state = 729
                self.number_a()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Dihedral_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def vector_statement(self):
            return self.getTypedRuleContext(XplorMRParser.Vector_statementContext,0)


        def dihedral_assign(self):
            return self.getTypedRuleContext(XplorMRParser.Dihedral_assignContext,0)


        def dihedral_assign_loop(self):
            return self.getTypedRuleContext(XplorMRParser.Dihedral_assign_loopContext,0)


        def Nassign(self):
            return self.getToken(XplorMRParser.Nassign, 0)

        def Integer(self):
            return self.getToken(XplorMRParser.Integer, 0)

        def Equ_op(self):
            return self.getToken(XplorMRParser.Equ_op, 0)

        def Reset(self):
            return self.getToken(XplorMRParser.Reset, 0)

        def Scale(self):
            return self.getToken(XplorMRParser.Scale, 0)

        def number_s(self):
            return self.getTypedRuleContext(XplorMRParser.Number_sContext,0)


        def getRuleIndex(self):
            return XplorMRParser.RULE_dihedral_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDihedral_statement" ):
                listener.enterDihedral_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDihedral_statement" ):
                listener.exitDihedral_statement(self)




    def dihedral_statement(self):

        localctx = XplorMRParser.Dihedral_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_dihedral_statement)
        self._la = 0 # Token type
        try:
            self.state = 746
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [XplorMRParser.Vector]:
                self.enterOuterAlt(localctx, 1)
                self.state = 732
                self.vector_statement()
                pass
            elif token in [XplorMRParser.Assign]:
                self.enterOuterAlt(localctx, 2)
                self.state = 733
                self.dihedral_assign()
                pass
            elif token in [XplorMRParser.For]:
                self.enterOuterAlt(localctx, 3)
                self.state = 734
                self.dihedral_assign_loop()
                pass
            elif token in [XplorMRParser.Nassign]:
                self.enterOuterAlt(localctx, 4)
                self.state = 735
                self.match(XplorMRParser.Nassign)
                self.state = 737
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 736
                    self.match(XplorMRParser.Equ_op)


                self.state = 739
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.Reset]:
                self.enterOuterAlt(localctx, 5)
                self.state = 740
                self.match(XplorMRParser.Reset)
                pass
            elif token in [XplorMRParser.Scale]:
                self.enterOuterAlt(localctx, 6)
                self.state = 741
                self.match(XplorMRParser.Scale)
                self.state = 743
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 742
                    self.match(XplorMRParser.Equ_op)


                self.state = 745
                self.number_s()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Dihedral_assignContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Assign(self):
            return self.getToken(XplorMRParser.Assign, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.SelectionContext,i)


        def number(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.NumberContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.NumberContext,i)


        def Integer(self):
            return self.getToken(XplorMRParser.Integer, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_dihedral_assign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDihedral_assign" ):
                listener.enterDihedral_assign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDihedral_assign" ):
                listener.exitDihedral_assign(self)




    def dihedral_assign(self):

        localctx = XplorMRParser.Dihedral_assignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_dihedral_assign)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 748
            self.match(XplorMRParser.Assign)
            self.state = 749
            self.selection()
            self.state = 750
            self.selection()
            self.state = 751
            self.selection()
            self.state = 752
            self.selection()
            self.state = 753
            self.number()
            self.state = 754
            self.number()
            self.state = 755
            self.number()
            self.state = 756
            self.match(XplorMRParser.Integer)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Sani_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def sani_assign(self):
            return self.getTypedRuleContext(XplorMRParser.Sani_assignContext,0)


        def sani_assign_loop(self):
            return self.getTypedRuleContext(XplorMRParser.Sani_assign_loopContext,0)


        def Classification(self):
            return self.getToken(XplorMRParser.Classification, 0)

        def Simple_name(self):
            return self.getToken(XplorMRParser.Simple_name, 0)

        def Equ_op(self):
            return self.getToken(XplorMRParser.Equ_op, 0)

        def Coefficients(self):
            return self.getToken(XplorMRParser.Coefficients, 0)

        def number_s(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Number_sContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Number_sContext,i)


        def ForceConstant(self):
            return self.getToken(XplorMRParser.ForceConstant, 0)

        def Nrestraints(self):
            return self.getToken(XplorMRParser.Nrestraints, 0)

        def Integer(self):
            return self.getToken(XplorMRParser.Integer, 0)

        def Potential(self):
            return self.getToken(XplorMRParser.Potential, 0)

        def Potential_types(self):
            return self.getToken(XplorMRParser.Potential_types, 0)

        def Print(self):
            return self.getToken(XplorMRParser.Print, 0)

        def Threshold(self):
            return self.getToken(XplorMRParser.Threshold, 0)

        def Reset(self):
            return self.getToken(XplorMRParser.Reset, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_sani_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSani_statement" ):
                listener.enterSani_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSani_statement" ):
                listener.exitSani_statement(self)




    def sani_statement(self):

        localctx = XplorMRParser.Sani_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_sani_statement)
        self._la = 0 # Token type
        try:
            self.state = 786
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [XplorMRParser.Assign]:
                self.enterOuterAlt(localctx, 1)
                self.state = 758
                self.sani_assign()
                pass
            elif token in [XplorMRParser.For]:
                self.enterOuterAlt(localctx, 2)
                self.state = 759
                self.sani_assign_loop()
                pass
            elif token in [XplorMRParser.Classification]:
                self.enterOuterAlt(localctx, 3)
                self.state = 760
                self.match(XplorMRParser.Classification)
                self.state = 762
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 761
                    self.match(XplorMRParser.Equ_op)


                self.state = 764
                self.match(XplorMRParser.Simple_name)
                pass
            elif token in [XplorMRParser.Coefficients]:
                self.enterOuterAlt(localctx, 4)
                self.state = 765
                self.match(XplorMRParser.Coefficients)
                self.state = 766
                self.number_s()
                self.state = 767
                self.number_s()
                self.state = 768
                self.number_s()
                pass
            elif token in [XplorMRParser.ForceConstant]:
                self.enterOuterAlt(localctx, 5)
                self.state = 770
                self.match(XplorMRParser.ForceConstant)
                self.state = 772
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 771
                    self.match(XplorMRParser.Equ_op)


                self.state = 774
                self.number_s()
                pass
            elif token in [XplorMRParser.Nrestraints]:
                self.enterOuterAlt(localctx, 6)
                self.state = 775
                self.match(XplorMRParser.Nrestraints)
                self.state = 777
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 776
                    self.match(XplorMRParser.Equ_op)


                self.state = 779
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.Potential]:
                self.enterOuterAlt(localctx, 7)
                self.state = 780
                self.match(XplorMRParser.Potential)
                self.state = 781
                self.match(XplorMRParser.Potential_types)
                pass
            elif token in [XplorMRParser.Print]:
                self.enterOuterAlt(localctx, 8)
                self.state = 782
                self.match(XplorMRParser.Print)
                self.state = 783
                self.match(XplorMRParser.Threshold)
                self.state = 784
                self.number_s()
                pass
            elif token in [XplorMRParser.Reset]:
                self.enterOuterAlt(localctx, 9)
                self.state = 785
                self.match(XplorMRParser.Reset)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Sani_assignContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Assign(self):
            return self.getToken(XplorMRParser.Assign, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.SelectionContext,i)


        def number(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.NumberContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.NumberContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_sani_assign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSani_assign" ):
                listener.enterSani_assign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSani_assign" ):
                listener.exitSani_assign(self)




    def sani_assign(self):

        localctx = XplorMRParser.Sani_assignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_sani_assign)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 788
            self.match(XplorMRParser.Assign)
            self.state = 789
            self.selection()
            self.state = 790
            self.selection()
            self.state = 791
            self.selection()
            self.state = 792
            self.selection()
            self.state = 793
            self.selection()
            self.state = 794
            self.selection()
            self.state = 795
            self.number()
            self.state = 797
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,66,self._ctx)
            if la_ == 1:
                self.state = 796
                self.number()


            self.state = 800
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 188)) & ~0x3f) == 0 and ((1 << (_la - 188)) & ((1 << (XplorMRParser.Integer - 188)) | (1 << (XplorMRParser.Real - 188)) | (1 << (XplorMRParser.Symbol_name - 188)))) != 0):
                self.state = 799
                self.number()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Xdip_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def xdip_assign(self):
            return self.getTypedRuleContext(XplorMRParser.Xdip_assignContext,0)


        def Classification(self):
            return self.getToken(XplorMRParser.Classification, 0)

        def Simple_name(self):
            return self.getToken(XplorMRParser.Simple_name, 0)

        def Equ_op(self):
            return self.getToken(XplorMRParser.Equ_op, 0)

        def Type(self):
            return self.getToken(XplorMRParser.Type, 0)

        def Rdc_dist_fix_types(self):
            return self.getToken(XplorMRParser.Rdc_dist_fix_types, 0)

        def Scale(self):
            return self.getToken(XplorMRParser.Scale, 0)

        def number_s(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Number_sContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Number_sContext,i)


        def Sign(self):
            return self.getToken(XplorMRParser.Sign, 0)

        def Logical(self):
            return self.getToken(XplorMRParser.Logical, 0)

        def Average(self):
            return self.getToken(XplorMRParser.Average, 0)

        def Averaging_methods(self):
            return self.getToken(XplorMRParser.Averaging_methods, 0)

        def Coefficients(self):
            return self.getToken(XplorMRParser.Coefficients, 0)

        def ForceConstant(self):
            return self.getToken(XplorMRParser.ForceConstant, 0)

        def Nrestraints(self):
            return self.getToken(XplorMRParser.Nrestraints, 0)

        def Integer(self):
            return self.getToken(XplorMRParser.Integer, 0)

        def Potential(self):
            return self.getToken(XplorMRParser.Potential, 0)

        def Potential_types(self):
            return self.getToken(XplorMRParser.Potential_types, 0)

        def Print(self):
            return self.getToken(XplorMRParser.Print, 0)

        def Threshold(self):
            return self.getToken(XplorMRParser.Threshold, 0)

        def Reset(self):
            return self.getToken(XplorMRParser.Reset, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_xdip_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterXdip_statement" ):
                listener.enterXdip_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitXdip_statement" ):
                listener.exitXdip_statement(self)




    def xdip_statement(self):

        localctx = XplorMRParser.Xdip_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_xdip_statement)
        self._la = 0 # Token type
        try:
            self.state = 840
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [XplorMRParser.Assign]:
                self.enterOuterAlt(localctx, 1)
                self.state = 802
                self.xdip_assign()
                pass
            elif token in [XplorMRParser.Classification]:
                self.enterOuterAlt(localctx, 2)
                self.state = 803
                self.match(XplorMRParser.Classification)
                self.state = 805
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 804
                    self.match(XplorMRParser.Equ_op)


                self.state = 807
                self.match(XplorMRParser.Simple_name)
                pass
            elif token in [XplorMRParser.Type]:
                self.enterOuterAlt(localctx, 3)
                self.state = 808
                self.match(XplorMRParser.Type)
                self.state = 809
                self.match(XplorMRParser.Rdc_dist_fix_types)
                pass
            elif token in [XplorMRParser.Scale]:
                self.enterOuterAlt(localctx, 4)
                self.state = 810
                self.match(XplorMRParser.Scale)
                self.state = 812
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 811
                    self.match(XplorMRParser.Equ_op)


                self.state = 814
                self.number_s()
                pass
            elif token in [XplorMRParser.Sign]:
                self.enterOuterAlt(localctx, 5)
                self.state = 815
                self.match(XplorMRParser.Sign)
                self.state = 816
                self.match(XplorMRParser.Logical)
                pass
            elif token in [XplorMRParser.Average]:
                self.enterOuterAlt(localctx, 6)
                self.state = 817
                self.match(XplorMRParser.Average)
                self.state = 818
                self.match(XplorMRParser.Averaging_methods)
                pass
            elif token in [XplorMRParser.Coefficients]:
                self.enterOuterAlt(localctx, 7)
                self.state = 819
                self.match(XplorMRParser.Coefficients)
                self.state = 820
                self.number_s()
                self.state = 821
                self.number_s()
                self.state = 822
                self.number_s()
                pass
            elif token in [XplorMRParser.ForceConstant]:
                self.enterOuterAlt(localctx, 8)
                self.state = 824
                self.match(XplorMRParser.ForceConstant)
                self.state = 826
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 825
                    self.match(XplorMRParser.Equ_op)


                self.state = 828
                self.number_s()
                pass
            elif token in [XplorMRParser.Nrestraints]:
                self.enterOuterAlt(localctx, 9)
                self.state = 829
                self.match(XplorMRParser.Nrestraints)
                self.state = 831
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 830
                    self.match(XplorMRParser.Equ_op)


                self.state = 833
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.Potential]:
                self.enterOuterAlt(localctx, 10)
                self.state = 834
                self.match(XplorMRParser.Potential)
                self.state = 835
                self.match(XplorMRParser.Potential_types)
                pass
            elif token in [XplorMRParser.Print]:
                self.enterOuterAlt(localctx, 11)
                self.state = 836
                self.match(XplorMRParser.Print)
                self.state = 837
                self.match(XplorMRParser.Threshold)
                self.state = 838
                self.number_s()
                pass
            elif token in [XplorMRParser.Reset]:
                self.enterOuterAlt(localctx, 12)
                self.state = 839
                self.match(XplorMRParser.Reset)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Xdip_assignContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Assign(self):
            return self.getToken(XplorMRParser.Assign, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.SelectionContext,i)


        def number(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.NumberContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.NumberContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_xdip_assign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterXdip_assign" ):
                listener.enterXdip_assign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitXdip_assign" ):
                listener.exitXdip_assign(self)




    def xdip_assign(self):

        localctx = XplorMRParser.Xdip_assignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 68, self.RULE_xdip_assign)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 842
            self.match(XplorMRParser.Assign)
            self.state = 843
            self.selection()
            self.state = 844
            self.selection()
            self.state = 845
            self.selection()
            self.state = 846
            self.selection()
            self.state = 847
            self.selection()
            self.state = 848
            self.selection()
            self.state = 849
            self.number()
            self.state = 850
            self.number()
            self.state = 857
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,73,self._ctx)
            if la_ == 1:
                self.state = 851
                self.number()

            elif la_ == 2:
                self.state = 852
                self.number()
                self.state = 853
                self.number()
                self.state = 854
                self.number()
                self.state = 855
                self.number()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Vean_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def vean_assign(self):
            return self.getTypedRuleContext(XplorMRParser.Vean_assignContext,0)


        def Cv(self):
            return self.getToken(XplorMRParser.Cv, 0)

        def Integer(self):
            return self.getToken(XplorMRParser.Integer, 0)

        def Equ_op(self):
            return self.getToken(XplorMRParser.Equ_op, 0)

        def Classification(self):
            return self.getToken(XplorMRParser.Classification, 0)

        def Simple_name(self):
            return self.getToken(XplorMRParser.Simple_name, 0)

        def ForceConstant(self):
            return self.getToken(XplorMRParser.ForceConstant, 0)

        def number_s(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Number_sContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Number_sContext,i)


        def Nrestraints(self):
            return self.getToken(XplorMRParser.Nrestraints, 0)

        def Partition(self):
            return self.getToken(XplorMRParser.Partition, 0)

        def Print(self):
            return self.getToken(XplorMRParser.Print, 0)

        def Threshold(self):
            return self.getToken(XplorMRParser.Threshold, 0)

        def Reset(self):
            return self.getToken(XplorMRParser.Reset, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_vean_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVean_statement" ):
                listener.enterVean_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVean_statement" ):
                listener.exitVean_statement(self)




    def vean_statement(self):

        localctx = XplorMRParser.Vean_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_vean_statement)
        self._la = 0 # Token type
        try:
            self.state = 891
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [XplorMRParser.Assign]:
                self.enterOuterAlt(localctx, 1)
                self.state = 859
                self.vean_assign()
                pass
            elif token in [XplorMRParser.Cv]:
                self.enterOuterAlt(localctx, 2)
                self.state = 860
                self.match(XplorMRParser.Cv)
                self.state = 862
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 861
                    self.match(XplorMRParser.Equ_op)


                self.state = 864
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.Classification]:
                self.enterOuterAlt(localctx, 3)
                self.state = 865
                self.match(XplorMRParser.Classification)
                self.state = 867
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 866
                    self.match(XplorMRParser.Equ_op)


                self.state = 869
                self.match(XplorMRParser.Simple_name)
                pass
            elif token in [XplorMRParser.ForceConstant]:
                self.enterOuterAlt(localctx, 4)
                self.state = 870
                self.match(XplorMRParser.ForceConstant)
                self.state = 872
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 871
                    self.match(XplorMRParser.Equ_op)


                self.state = 874
                self.number_s()
                self.state = 875
                self.number_s()
                pass
            elif token in [XplorMRParser.Nrestraints]:
                self.enterOuterAlt(localctx, 5)
                self.state = 877
                self.match(XplorMRParser.Nrestraints)
                self.state = 879
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 878
                    self.match(XplorMRParser.Equ_op)


                self.state = 881
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.Partition]:
                self.enterOuterAlt(localctx, 6)
                self.state = 882
                self.match(XplorMRParser.Partition)
                self.state = 884
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 883
                    self.match(XplorMRParser.Equ_op)


                self.state = 886
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.Print]:
                self.enterOuterAlt(localctx, 7)
                self.state = 887
                self.match(XplorMRParser.Print)
                self.state = 888
                self.match(XplorMRParser.Threshold)
                self.state = 889
                self.number_s()
                pass
            elif token in [XplorMRParser.Reset]:
                self.enterOuterAlt(localctx, 8)
                self.state = 890
                self.match(XplorMRParser.Reset)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Vean_assignContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Assign(self):
            return self.getToken(XplorMRParser.Assign, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.SelectionContext,i)


        def number(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.NumberContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.NumberContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_vean_assign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVean_assign" ):
                listener.enterVean_assign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVean_assign" ):
                listener.exitVean_assign(self)




    def vean_assign(self):

        localctx = XplorMRParser.Vean_assignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_vean_assign)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 893
            self.match(XplorMRParser.Assign)
            self.state = 894
            self.selection()
            self.state = 895
            self.selection()
            self.state = 896
            self.selection()
            self.state = 897
            self.selection()
            self.state = 898
            self.number()
            self.state = 899
            self.number()
            self.state = 903
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 188)) & ~0x3f) == 0 and ((1 << (_la - 188)) & ((1 << (XplorMRParser.Integer - 188)) | (1 << (XplorMRParser.Real - 188)) | (1 << (XplorMRParser.Symbol_name - 188)))) != 0):
                self.state = 900
                self.number()
                self.state = 901
                self.number()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Tenso_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def tenso_assign(self):
            return self.getTypedRuleContext(XplorMRParser.Tenso_assignContext,0)


        def Classification(self):
            return self.getToken(XplorMRParser.Classification, 0)

        def Simple_name(self):
            return self.getToken(XplorMRParser.Simple_name, 0)

        def Equ_op(self):
            return self.getToken(XplorMRParser.Equ_op, 0)

        def Coefficients(self):
            return self.getToken(XplorMRParser.Coefficients, 0)

        def number_s(self):
            return self.getTypedRuleContext(XplorMRParser.Number_sContext,0)


        def Nrestraints(self):
            return self.getToken(XplorMRParser.Nrestraints, 0)

        def Integer(self):
            return self.getToken(XplorMRParser.Integer, 0)

        def Potential(self):
            return self.getToken(XplorMRParser.Potential, 0)

        def Potential_types(self):
            return self.getToken(XplorMRParser.Potential_types, 0)

        def Print(self):
            return self.getToken(XplorMRParser.Print, 0)

        def Threshold(self):
            return self.getToken(XplorMRParser.Threshold, 0)

        def Reset(self):
            return self.getToken(XplorMRParser.Reset, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_tenso_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTenso_statement" ):
                listener.enterTenso_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTenso_statement" ):
                listener.exitTenso_statement(self)




    def tenso_statement(self):

        localctx = XplorMRParser.Tenso_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_tenso_statement)
        self._la = 0 # Token type
        try:
            self.state = 924
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [XplorMRParser.Assign]:
                self.enterOuterAlt(localctx, 1)
                self.state = 905
                self.tenso_assign()
                pass
            elif token in [XplorMRParser.Classification]:
                self.enterOuterAlt(localctx, 2)
                self.state = 906
                self.match(XplorMRParser.Classification)
                self.state = 908
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 907
                    self.match(XplorMRParser.Equ_op)


                self.state = 910
                self.match(XplorMRParser.Simple_name)
                pass
            elif token in [XplorMRParser.Coefficients]:
                self.enterOuterAlt(localctx, 3)
                self.state = 911
                self.match(XplorMRParser.Coefficients)
                self.state = 912
                self.number_s()
                pass
            elif token in [XplorMRParser.Nrestraints]:
                self.enterOuterAlt(localctx, 4)
                self.state = 913
                self.match(XplorMRParser.Nrestraints)
                self.state = 915
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 914
                    self.match(XplorMRParser.Equ_op)


                self.state = 917
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.Potential]:
                self.enterOuterAlt(localctx, 5)
                self.state = 918
                self.match(XplorMRParser.Potential)
                self.state = 919
                self.match(XplorMRParser.Potential_types)
                pass
            elif token in [XplorMRParser.Print]:
                self.enterOuterAlt(localctx, 6)
                self.state = 920
                self.match(XplorMRParser.Print)
                self.state = 921
                self.match(XplorMRParser.Threshold)
                self.state = 922
                self.number_s()
                pass
            elif token in [XplorMRParser.Reset]:
                self.enterOuterAlt(localctx, 7)
                self.state = 923
                self.match(XplorMRParser.Reset)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Tenso_assignContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Assign(self):
            return self.getToken(XplorMRParser.Assign, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.SelectionContext,i)


        def number(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.NumberContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.NumberContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_tenso_assign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTenso_assign" ):
                listener.enterTenso_assign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTenso_assign" ):
                listener.exitTenso_assign(self)




    def tenso_assign(self):

        localctx = XplorMRParser.Tenso_assignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 76, self.RULE_tenso_assign)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 926
            self.match(XplorMRParser.Assign)
            self.state = 927
            self.selection()
            self.state = 928
            self.selection()
            self.state = 929
            self.number()
            self.state = 931
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 188)) & ~0x3f) == 0 and ((1 << (_la - 188)) & ((1 << (XplorMRParser.Integer - 188)) | (1 << (XplorMRParser.Real - 188)) | (1 << (XplorMRParser.Symbol_name - 188)))) != 0):
                self.state = 930
                self.number()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Anis_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def anis_assign(self):
            return self.getTypedRuleContext(XplorMRParser.Anis_assignContext,0)


        def Classification(self):
            return self.getToken(XplorMRParser.Classification, 0)

        def Simple_name(self):
            return self.getToken(XplorMRParser.Simple_name, 0)

        def Equ_op(self):
            return self.getToken(XplorMRParser.Equ_op, 0)

        def Coefficients(self):
            return self.getToken(XplorMRParser.Coefficients, 0)

        def number_s(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Number_sContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Number_sContext,i)


        def ForceConstant(self):
            return self.getToken(XplorMRParser.ForceConstant, 0)

        def Nrestraints(self):
            return self.getToken(XplorMRParser.Nrestraints, 0)

        def Integer(self):
            return self.getToken(XplorMRParser.Integer, 0)

        def Potential(self):
            return self.getToken(XplorMRParser.Potential, 0)

        def Potential_types(self):
            return self.getToken(XplorMRParser.Potential_types, 0)

        def Print(self):
            return self.getToken(XplorMRParser.Print, 0)

        def Threshold(self):
            return self.getToken(XplorMRParser.Threshold, 0)

        def Reset(self):
            return self.getToken(XplorMRParser.Reset, 0)

        def Type(self):
            return self.getToken(XplorMRParser.Type, 0)

        def Rdc_or_Diff_anis_types(self):
            return self.getToken(XplorMRParser.Rdc_or_Diff_anis_types, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_anis_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAnis_statement" ):
                listener.enterAnis_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAnis_statement" ):
                listener.exitAnis_statement(self)




    def anis_statement(self):

        localctx = XplorMRParser.Anis_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 78, self.RULE_anis_statement)
        self._la = 0 # Token type
        try:
            self.state = 963
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [XplorMRParser.Assign]:
                self.enterOuterAlt(localctx, 1)
                self.state = 933
                self.anis_assign()
                pass
            elif token in [XplorMRParser.Classification]:
                self.enterOuterAlt(localctx, 2)
                self.state = 934
                self.match(XplorMRParser.Classification)
                self.state = 936
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 935
                    self.match(XplorMRParser.Equ_op)


                self.state = 938
                self.match(XplorMRParser.Simple_name)
                pass
            elif token in [XplorMRParser.Coefficients]:
                self.enterOuterAlt(localctx, 3)
                self.state = 939
                self.match(XplorMRParser.Coefficients)
                self.state = 940
                self.number_s()
                self.state = 941
                self.number_s()
                self.state = 942
                self.number_s()
                self.state = 943
                self.number_s()
                pass
            elif token in [XplorMRParser.ForceConstant]:
                self.enterOuterAlt(localctx, 4)
                self.state = 945
                self.match(XplorMRParser.ForceConstant)
                self.state = 947
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 946
                    self.match(XplorMRParser.Equ_op)


                self.state = 949
                self.number_s()
                pass
            elif token in [XplorMRParser.Nrestraints]:
                self.enterOuterAlt(localctx, 5)
                self.state = 950
                self.match(XplorMRParser.Nrestraints)
                self.state = 952
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 951
                    self.match(XplorMRParser.Equ_op)


                self.state = 954
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.Potential]:
                self.enterOuterAlt(localctx, 6)
                self.state = 955
                self.match(XplorMRParser.Potential)
                self.state = 956
                self.match(XplorMRParser.Potential_types)
                pass
            elif token in [XplorMRParser.Print]:
                self.enterOuterAlt(localctx, 7)
                self.state = 957
                self.match(XplorMRParser.Print)
                self.state = 958
                self.match(XplorMRParser.Threshold)
                self.state = 959
                self.number_s()
                pass
            elif token in [XplorMRParser.Reset]:
                self.enterOuterAlt(localctx, 8)
                self.state = 960
                self.match(XplorMRParser.Reset)
                pass
            elif token in [XplorMRParser.Type]:
                self.enterOuterAlt(localctx, 9)
                self.state = 961
                self.match(XplorMRParser.Type)
                self.state = 962
                self.match(XplorMRParser.Rdc_or_Diff_anis_types)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Anis_assignContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Assign(self):
            return self.getToken(XplorMRParser.Assign, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.SelectionContext,i)


        def number(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.NumberContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.NumberContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_anis_assign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAnis_assign" ):
                listener.enterAnis_assign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAnis_assign" ):
                listener.exitAnis_assign(self)




    def anis_assign(self):

        localctx = XplorMRParser.Anis_assignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 80, self.RULE_anis_assign)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 965
            self.match(XplorMRParser.Assign)
            self.state = 966
            self.selection()
            self.state = 967
            self.selection()
            self.state = 968
            self.selection()
            self.state = 969
            self.selection()
            self.state = 970
            self.number()
            self.state = 972
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 188)) & ~0x3f) == 0 and ((1 << (_la - 188)) & ((1 << (XplorMRParser.Integer - 188)) | (1 << (XplorMRParser.Real - 188)) | (1 << (XplorMRParser.Symbol_name - 188)))) != 0):
                self.state = 971
                self.number()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Planar_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def vector_statement(self):
            return self.getTypedRuleContext(XplorMRParser.Vector_statementContext,0)


        def Group(self):
            return self.getToken(XplorMRParser.Group, 0)

        def End(self):
            return self.getToken(XplorMRParser.End, 0)

        def group_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Group_statementContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Group_statementContext,i)


        def Initialize(self):
            return self.getToken(XplorMRParser.Initialize, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_planar_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPlanar_statement" ):
                listener.enterPlanar_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPlanar_statement" ):
                listener.exitPlanar_statement(self)




    def planar_statement(self):

        localctx = XplorMRParser.Planar_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 82, self.RULE_planar_statement)
        self._la = 0 # Token type
        try:
            self.state = 984
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [XplorMRParser.Vector]:
                self.enterOuterAlt(localctx, 1)
                self.state = 974
                self.vector_statement()
                pass
            elif token in [XplorMRParser.Group]:
                self.enterOuterAlt(localctx, 2)
                self.state = 975
                self.match(XplorMRParser.Group)
                self.state = 979
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==XplorMRParser.Selection or _la==XplorMRParser.Weight:
                    self.state = 976
                    self.group_statement()
                    self.state = 981
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 982
                self.match(XplorMRParser.End)
                pass
            elif token in [XplorMRParser.Initialize]:
                self.enterOuterAlt(localctx, 3)
                self.state = 983
                self.match(XplorMRParser.Initialize)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Group_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Selection(self):
            return self.getToken(XplorMRParser.Selection, 0)

        def selection(self):
            return self.getTypedRuleContext(XplorMRParser.SelectionContext,0)


        def Equ_op(self):
            return self.getToken(XplorMRParser.Equ_op, 0)

        def Weight(self):
            return self.getToken(XplorMRParser.Weight, 0)

        def number_s(self):
            return self.getTypedRuleContext(XplorMRParser.Number_sContext,0)


        def getRuleIndex(self):
            return XplorMRParser.RULE_group_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGroup_statement" ):
                listener.enterGroup_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGroup_statement" ):
                listener.exitGroup_statement(self)




    def group_statement(self):

        localctx = XplorMRParser.Group_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 84, self.RULE_group_statement)
        self._la = 0 # Token type
        try:
            self.state = 996
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [XplorMRParser.Selection]:
                self.enterOuterAlt(localctx, 1)
                self.state = 986
                self.match(XplorMRParser.Selection)
                self.state = 988
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 987
                    self.match(XplorMRParser.Equ_op)


                self.state = 990
                self.selection()
                pass
            elif token in [XplorMRParser.Weight]:
                self.enterOuterAlt(localctx, 2)
                self.state = 991
                self.match(XplorMRParser.Weight)
                self.state = 993
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 992
                    self.match(XplorMRParser.Equ_op)


                self.state = 995
                self.number_s()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Harmonic_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def vector_statement(self):
            return self.getTypedRuleContext(XplorMRParser.Vector_statementContext,0)


        def Exponent(self):
            return self.getToken(XplorMRParser.Exponent, 0)

        def Integer(self):
            return self.getToken(XplorMRParser.Integer, 0)

        def Equ_op(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Equ_op)
            else:
                return self.getToken(XplorMRParser.Equ_op, i)

        def Normal(self):
            return self.getToken(XplorMRParser.Normal, 0)

        def L_paren(self):
            return self.getToken(XplorMRParser.L_paren, 0)

        def R_paren(self):
            return self.getToken(XplorMRParser.R_paren, 0)

        def number_s(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Number_sContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Number_sContext,i)


        def Tail(self):
            return self.getToken(XplorMRParser.Tail, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.SelectionContext,i)


        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Comma)
            else:
                return self.getToken(XplorMRParser.Comma, i)

        def Head(self):
            return self.getToken(XplorMRParser.Head, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_harmonic_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHarmonic_statement" ):
                listener.enterHarmonic_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHarmonic_statement" ):
                listener.exitHarmonic_statement(self)




    def harmonic_statement(self):

        localctx = XplorMRParser.Harmonic_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 86, self.RULE_harmonic_statement)
        self._la = 0 # Token type
        try:
            self.state = 1038
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [XplorMRParser.Vector]:
                self.enterOuterAlt(localctx, 1)
                self.state = 998
                self.vector_statement()
                pass
            elif token in [XplorMRParser.Exponent]:
                self.enterOuterAlt(localctx, 2)
                self.state = 999
                self.match(XplorMRParser.Exponent)
                self.state = 1001
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 1000
                    self.match(XplorMRParser.Equ_op)


                self.state = 1003
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.Normal]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1004
                self.match(XplorMRParser.Normal)
                self.state = 1006
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 1005
                    self.match(XplorMRParser.Equ_op)


                self.state = 1008
                self.match(XplorMRParser.L_paren)
                self.state = 1034
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [XplorMRParser.Integer, XplorMRParser.Real, XplorMRParser.Symbol_name]:
                    self.state = 1009
                    self.number_s()
                    self.state = 1011
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==XplorMRParser.Comma:
                        self.state = 1010
                        self.match(XplorMRParser.Comma)


                    self.state = 1013
                    self.number_s()
                    self.state = 1015
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==XplorMRParser.Comma:
                        self.state = 1014
                        self.match(XplorMRParser.Comma)


                    self.state = 1017
                    self.number_s()
                    pass
                elif token in [XplorMRParser.Tail]:
                    self.state = 1019
                    self.match(XplorMRParser.Tail)
                    self.state = 1021
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==XplorMRParser.Equ_op:
                        self.state = 1020
                        self.match(XplorMRParser.Equ_op)


                    self.state = 1023
                    self.selection()
                    self.state = 1025
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==XplorMRParser.Comma:
                        self.state = 1024
                        self.match(XplorMRParser.Comma)


                    self.state = 1032
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==XplorMRParser.Head:
                        self.state = 1027
                        self.match(XplorMRParser.Head)
                        self.state = 1029
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==XplorMRParser.Equ_op:
                            self.state = 1028
                            self.match(XplorMRParser.Equ_op)


                        self.state = 1031
                        self.selection()


                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 1036
                self.match(XplorMRParser.R_paren)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Harmonic_assignContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Assign(self):
            return self.getToken(XplorMRParser.Assign, 0)

        def selection(self):
            return self.getTypedRuleContext(XplorMRParser.SelectionContext,0)


        def number(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.NumberContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.NumberContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_harmonic_assign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHarmonic_assign" ):
                listener.enterHarmonic_assign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHarmonic_assign" ):
                listener.exitHarmonic_assign(self)




    def harmonic_assign(self):

        localctx = XplorMRParser.Harmonic_assignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 88, self.RULE_harmonic_assign)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1040
            self.match(XplorMRParser.Assign)
            self.state = 1041
            self.selection()
            self.state = 1042
            self.number()
            self.state = 1043
            self.number()
            self.state = 1044
            self.number()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Antidistance_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def xadc_assign(self):
            return self.getTypedRuleContext(XplorMRParser.Xadc_assignContext,0)


        def xadc_assign_loop(self):
            return self.getTypedRuleContext(XplorMRParser.Xadc_assign_loopContext,0)


        def Classification(self):
            return self.getToken(XplorMRParser.Classification, 0)

        def Simple_name(self):
            return self.getToken(XplorMRParser.Simple_name, 0)

        def Equ_op(self):
            return self.getToken(XplorMRParser.Equ_op, 0)

        def Expectation(self):
            return self.getToken(XplorMRParser.Expectation, 0)

        def Integer(self):
            return self.getToken(XplorMRParser.Integer, 0)

        def number_s(self):
            return self.getTypedRuleContext(XplorMRParser.Number_sContext,0)


        def ForceConstant(self):
            return self.getToken(XplorMRParser.ForceConstant, 0)

        def Nrestraints(self):
            return self.getToken(XplorMRParser.Nrestraints, 0)

        def Print(self):
            return self.getToken(XplorMRParser.Print, 0)

        def Threshold(self):
            return self.getToken(XplorMRParser.Threshold, 0)

        def All(self):
            return self.getToken(XplorMRParser.All, 0)

        def Reset(self):
            return self.getToken(XplorMRParser.Reset, 0)

        def Size(self):
            return self.getToken(XplorMRParser.Size, 0)

        def Zero(self):
            return self.getToken(XplorMRParser.Zero, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_antidistance_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAntidistance_statement" ):
                listener.enterAntidistance_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAntidistance_statement" ):
                listener.exitAntidistance_statement(self)




    def antidistance_statement(self):

        localctx = XplorMRParser.Antidistance_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 90, self.RULE_antidistance_statement)
        self._la = 0 # Token type
        try:
            self.state = 1083
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [XplorMRParser.Assign]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1046
                self.xadc_assign()
                pass
            elif token in [XplorMRParser.For]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1047
                self.xadc_assign_loop()
                pass
            elif token in [XplorMRParser.Classification]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1048
                self.match(XplorMRParser.Classification)
                self.state = 1050
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 1049
                    self.match(XplorMRParser.Equ_op)


                self.state = 1052
                self.match(XplorMRParser.Simple_name)
                pass
            elif token in [XplorMRParser.Expectation]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1053
                self.match(XplorMRParser.Expectation)
                self.state = 1054
                self.match(XplorMRParser.Integer)
                self.state = 1055
                self.number_s()
                pass
            elif token in [XplorMRParser.ForceConstant]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1056
                self.match(XplorMRParser.ForceConstant)
                self.state = 1058
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 1057
                    self.match(XplorMRParser.Equ_op)


                self.state = 1060
                self.number_s()
                pass
            elif token in [XplorMRParser.Nrestraints]:
                self.enterOuterAlt(localctx, 6)
                self.state = 1061
                self.match(XplorMRParser.Nrestraints)
                self.state = 1063
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 1062
                    self.match(XplorMRParser.Equ_op)


                self.state = 1065
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.Print]:
                self.enterOuterAlt(localctx, 7)
                self.state = 1066
                self.match(XplorMRParser.Print)
                self.state = 1067
                self.match(XplorMRParser.Threshold)
                self.state = 1068
                self.number_s()
                self.state = 1075
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [XplorMRParser.All]:
                    self.state = 1069
                    self.match(XplorMRParser.All)
                    pass
                elif token in [XplorMRParser.Classification]:
                    self.state = 1070
                    self.match(XplorMRParser.Classification)
                    self.state = 1072
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==XplorMRParser.Equ_op:
                        self.state = 1071
                        self.match(XplorMRParser.Equ_op)


                    self.state = 1074
                    self.match(XplorMRParser.Simple_name)
                    pass
                else:
                    raise NoViableAltException(self)

                pass
            elif token in [XplorMRParser.Reset]:
                self.enterOuterAlt(localctx, 8)
                self.state = 1077
                self.match(XplorMRParser.Reset)
                pass
            elif token in [XplorMRParser.Size]:
                self.enterOuterAlt(localctx, 9)
                self.state = 1078
                self.match(XplorMRParser.Size)
                self.state = 1079
                self.number_s()
                self.state = 1080
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.Zero]:
                self.enterOuterAlt(localctx, 10)
                self.state = 1082
                self.match(XplorMRParser.Zero)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Xadc_assignContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Assign(self):
            return self.getToken(XplorMRParser.Assign, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.SelectionContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_xadc_assign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterXadc_assign" ):
                listener.enterXadc_assign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitXadc_assign" ):
                listener.exitXadc_assign(self)




    def xadc_assign(self):

        localctx = XplorMRParser.Xadc_assignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 92, self.RULE_xadc_assign)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1085
            self.match(XplorMRParser.Assign)
            self.state = 1086
            self.selection()
            self.state = 1087
            self.selection()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Coupling_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def coup_assign(self):
            return self.getTypedRuleContext(XplorMRParser.Coup_assignContext,0)


        def coup_assign_loop(self):
            return self.getTypedRuleContext(XplorMRParser.Coup_assign_loopContext,0)


        def Classification(self):
            return self.getToken(XplorMRParser.Classification, 0)

        def Simple_name(self):
            return self.getToken(XplorMRParser.Simple_name, 0)

        def Equ_op(self):
            return self.getToken(XplorMRParser.Equ_op, 0)

        def Coefficients(self):
            return self.getToken(XplorMRParser.Coefficients, 0)

        def number_s(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Number_sContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Number_sContext,i)


        def Cv(self):
            return self.getToken(XplorMRParser.Cv, 0)

        def Integer(self):
            return self.getToken(XplorMRParser.Integer, 0)

        def DegEnergy(self):
            return self.getToken(XplorMRParser.DegEnergy, 0)

        def ForceConstant(self):
            return self.getToken(XplorMRParser.ForceConstant, 0)

        def Nrestraints(self):
            return self.getToken(XplorMRParser.Nrestraints, 0)

        def Partition(self):
            return self.getToken(XplorMRParser.Partition, 0)

        def Potential(self):
            return self.getToken(XplorMRParser.Potential, 0)

        def Potential_types(self):
            return self.getToken(XplorMRParser.Potential_types, 0)

        def Print(self):
            return self.getToken(XplorMRParser.Print, 0)

        def Threshold(self):
            return self.getToken(XplorMRParser.Threshold, 0)

        def All(self):
            return self.getToken(XplorMRParser.All, 0)

        def Reset(self):
            return self.getToken(XplorMRParser.Reset, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_coupling_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCoupling_statement" ):
                listener.enterCoupling_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCoupling_statement" ):
                listener.exitCoupling_statement(self)




    def coupling_statement(self):

        localctx = XplorMRParser.Coupling_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 94, self.RULE_coupling_statement)
        self._la = 0 # Token type
        try:
            self.state = 1138
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [XplorMRParser.Assign]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1089
                self.coup_assign()
                pass
            elif token in [XplorMRParser.For]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1090
                self.coup_assign_loop()
                pass
            elif token in [XplorMRParser.Classification]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1091
                self.match(XplorMRParser.Classification)
                self.state = 1093
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 1092
                    self.match(XplorMRParser.Equ_op)


                self.state = 1095
                self.match(XplorMRParser.Simple_name)
                pass
            elif token in [XplorMRParser.Coefficients]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1096
                self.match(XplorMRParser.Coefficients)
                self.state = 1097
                self.number_s()
                self.state = 1098
                self.number_s()
                self.state = 1099
                self.number_s()
                self.state = 1100
                self.number_s()
                pass
            elif token in [XplorMRParser.Cv]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1102
                self.match(XplorMRParser.Cv)
                self.state = 1104
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 1103
                    self.match(XplorMRParser.Equ_op)


                self.state = 1106
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.DegEnergy]:
                self.enterOuterAlt(localctx, 6)
                self.state = 1107
                self.match(XplorMRParser.DegEnergy)
                self.state = 1108
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.ForceConstant]:
                self.enterOuterAlt(localctx, 7)
                self.state = 1109
                self.match(XplorMRParser.ForceConstant)
                self.state = 1110
                self.number_s()
                self.state = 1112
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 188)) & ~0x3f) == 0 and ((1 << (_la - 188)) & ((1 << (XplorMRParser.Integer - 188)) | (1 << (XplorMRParser.Real - 188)) | (1 << (XplorMRParser.Symbol_name - 188)))) != 0):
                    self.state = 1111
                    self.number_s()


                pass
            elif token in [XplorMRParser.Nrestraints]:
                self.enterOuterAlt(localctx, 8)
                self.state = 1114
                self.match(XplorMRParser.Nrestraints)
                self.state = 1116
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 1115
                    self.match(XplorMRParser.Equ_op)


                self.state = 1118
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.Partition]:
                self.enterOuterAlt(localctx, 9)
                self.state = 1119
                self.match(XplorMRParser.Partition)
                self.state = 1121
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 1120
                    self.match(XplorMRParser.Equ_op)


                self.state = 1123
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.Potential]:
                self.enterOuterAlt(localctx, 10)
                self.state = 1124
                self.match(XplorMRParser.Potential)
                self.state = 1125
                self.match(XplorMRParser.Potential_types)
                pass
            elif token in [XplorMRParser.Print]:
                self.enterOuterAlt(localctx, 11)
                self.state = 1126
                self.match(XplorMRParser.Print)
                self.state = 1127
                self.match(XplorMRParser.Threshold)
                self.state = 1128
                self.number_s()
                self.state = 1135
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [XplorMRParser.All]:
                    self.state = 1129
                    self.match(XplorMRParser.All)
                    pass
                elif token in [XplorMRParser.Classification]:
                    self.state = 1130
                    self.match(XplorMRParser.Classification)
                    self.state = 1132
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==XplorMRParser.Equ_op:
                        self.state = 1131
                        self.match(XplorMRParser.Equ_op)


                    self.state = 1134
                    self.match(XplorMRParser.Simple_name)
                    pass
                else:
                    raise NoViableAltException(self)

                pass
            elif token in [XplorMRParser.Reset]:
                self.enterOuterAlt(localctx, 12)
                self.state = 1137
                self.match(XplorMRParser.Reset)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Coup_assignContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Assign(self):
            return self.getToken(XplorMRParser.Assign, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.SelectionContext,i)


        def number(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.NumberContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.NumberContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_coup_assign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCoup_assign" ):
                listener.enterCoup_assign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCoup_assign" ):
                listener.exitCoup_assign(self)




    def coup_assign(self):

        localctx = XplorMRParser.Coup_assignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 96, self.RULE_coup_assign)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1140
            self.match(XplorMRParser.Assign)
            self.state = 1141
            self.selection()
            self.state = 1142
            self.selection()
            self.state = 1143
            self.selection()
            self.state = 1144
            self.selection()
            self.state = 1150
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==XplorMRParser.L_paren:
                self.state = 1145
                self.selection()
                self.state = 1146
                self.selection()
                self.state = 1147
                self.selection()
                self.state = 1148
                self.selection()


            self.state = 1152
            self.number()
            self.state = 1153
            self.number()
            self.state = 1157
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 188)) & ~0x3f) == 0 and ((1 << (_la - 188)) & ((1 << (XplorMRParser.Integer - 188)) | (1 << (XplorMRParser.Real - 188)) | (1 << (XplorMRParser.Symbol_name - 188)))) != 0):
                self.state = 1154
                self.number()
                self.state = 1155
                self.number()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Carbon_shift_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def carbon_shift_assign(self):
            return self.getTypedRuleContext(XplorMRParser.Carbon_shift_assignContext,0)


        def Classification(self):
            return self.getToken(XplorMRParser.Classification, 0)

        def Simple_name(self):
            return self.getToken(XplorMRParser.Simple_name, 0)

        def Equ_op(self):
            return self.getToken(XplorMRParser.Equ_op, 0)

        def Expectation(self):
            return self.getToken(XplorMRParser.Expectation, 0)

        def Integer(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Integer)
            else:
                return self.getToken(XplorMRParser.Integer, i)

        def number_s(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Number_sContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Number_sContext,i)


        def ForceConstant(self):
            return self.getToken(XplorMRParser.ForceConstant, 0)

        def Nrestraints(self):
            return self.getToken(XplorMRParser.Nrestraints, 0)

        def PhiStep(self):
            return self.getToken(XplorMRParser.PhiStep, 0)

        def PsiStep(self):
            return self.getToken(XplorMRParser.PsiStep, 0)

        def Potential(self):
            return self.getToken(XplorMRParser.Potential, 0)

        def Potential_types(self):
            return self.getToken(XplorMRParser.Potential_types, 0)

        def Print(self):
            return self.getToken(XplorMRParser.Print, 0)

        def Threshold(self):
            return self.getToken(XplorMRParser.Threshold, 0)

        def carbon_shift_rcoil(self):
            return self.getTypedRuleContext(XplorMRParser.Carbon_shift_rcoilContext,0)


        def Reset(self):
            return self.getToken(XplorMRParser.Reset, 0)

        def Zero(self):
            return self.getToken(XplorMRParser.Zero, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_carbon_shift_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCarbon_shift_statement" ):
                listener.enterCarbon_shift_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCarbon_shift_statement" ):
                listener.exitCarbon_shift_statement(self)




    def carbon_shift_statement(self):

        localctx = XplorMRParser.Carbon_shift_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 98, self.RULE_carbon_shift_statement)
        self._la = 0 # Token type
        try:
            self.state = 1194
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [XplorMRParser.Assign]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1159
                self.carbon_shift_assign()
                pass
            elif token in [XplorMRParser.Classification]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1160
                self.match(XplorMRParser.Classification)
                self.state = 1162
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 1161
                    self.match(XplorMRParser.Equ_op)


                self.state = 1164
                self.match(XplorMRParser.Simple_name)
                pass
            elif token in [XplorMRParser.Expectation]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1165
                self.match(XplorMRParser.Expectation)
                self.state = 1166
                self.match(XplorMRParser.Integer)
                self.state = 1167
                self.match(XplorMRParser.Integer)
                self.state = 1168
                self.number_s()
                self.state = 1169
                self.number_s()
                self.state = 1170
                self.number_s()
                pass
            elif token in [XplorMRParser.ForceConstant]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1172
                self.match(XplorMRParser.ForceConstant)
                self.state = 1174
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 1173
                    self.match(XplorMRParser.Equ_op)


                self.state = 1176
                self.number_s()
                pass
            elif token in [XplorMRParser.Nrestraints]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1177
                self.match(XplorMRParser.Nrestraints)
                self.state = 1179
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 1178
                    self.match(XplorMRParser.Equ_op)


                self.state = 1181
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.PhiStep]:
                self.enterOuterAlt(localctx, 6)
                self.state = 1182
                self.match(XplorMRParser.PhiStep)
                self.state = 1183
                self.number_s()
                pass
            elif token in [XplorMRParser.PsiStep]:
                self.enterOuterAlt(localctx, 7)
                self.state = 1184
                self.match(XplorMRParser.PsiStep)
                self.state = 1185
                self.number_s()
                pass
            elif token in [XplorMRParser.Potential]:
                self.enterOuterAlt(localctx, 8)
                self.state = 1186
                self.match(XplorMRParser.Potential)
                self.state = 1187
                self.match(XplorMRParser.Potential_types)
                pass
            elif token in [XplorMRParser.Print]:
                self.enterOuterAlt(localctx, 9)
                self.state = 1188
                self.match(XplorMRParser.Print)
                self.state = 1189
                self.match(XplorMRParser.Threshold)
                self.state = 1190
                self.number_s()
                pass
            elif token in [XplorMRParser.Rcoil]:
                self.enterOuterAlt(localctx, 10)
                self.state = 1191
                self.carbon_shift_rcoil()
                pass
            elif token in [XplorMRParser.Reset]:
                self.enterOuterAlt(localctx, 11)
                self.state = 1192
                self.match(XplorMRParser.Reset)
                pass
            elif token in [XplorMRParser.Zero]:
                self.enterOuterAlt(localctx, 12)
                self.state = 1193
                self.match(XplorMRParser.Zero)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Carbon_shift_assignContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Assign(self):
            return self.getToken(XplorMRParser.Assign, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.SelectionContext,i)


        def number(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.NumberContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.NumberContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_carbon_shift_assign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCarbon_shift_assign" ):
                listener.enterCarbon_shift_assign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCarbon_shift_assign" ):
                listener.exitCarbon_shift_assign(self)




    def carbon_shift_assign(self):

        localctx = XplorMRParser.Carbon_shift_assignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 100, self.RULE_carbon_shift_assign)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1196
            self.match(XplorMRParser.Assign)
            self.state = 1197
            self.selection()
            self.state = 1198
            self.selection()
            self.state = 1199
            self.selection()
            self.state = 1200
            self.selection()
            self.state = 1201
            self.selection()
            self.state = 1202
            self.number()
            self.state = 1203
            self.number()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Carbon_shift_rcoilContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Rcoil(self):
            return self.getToken(XplorMRParser.Rcoil, 0)

        def selection(self):
            return self.getTypedRuleContext(XplorMRParser.SelectionContext,0)


        def number(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.NumberContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.NumberContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_carbon_shift_rcoil

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCarbon_shift_rcoil" ):
                listener.enterCarbon_shift_rcoil(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCarbon_shift_rcoil" ):
                listener.exitCarbon_shift_rcoil(self)




    def carbon_shift_rcoil(self):

        localctx = XplorMRParser.Carbon_shift_rcoilContext(self, self._ctx, self.state)
        self.enterRule(localctx, 102, self.RULE_carbon_shift_rcoil)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1205
            self.match(XplorMRParser.Rcoil)
            self.state = 1206
            self.selection()
            self.state = 1207
            self.number()
            self.state = 1208
            self.number()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Proton_shift_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def observed(self):
            return self.getTypedRuleContext(XplorMRParser.ObservedContext,0)


        def proton_shift_rcoil(self):
            return self.getTypedRuleContext(XplorMRParser.Proton_shift_rcoilContext,0)


        def proton_shift_anisotropy(self):
            return self.getTypedRuleContext(XplorMRParser.Proton_shift_anisotropyContext,0)


        def proton_shift_amides(self):
            return self.getTypedRuleContext(XplorMRParser.Proton_shift_amidesContext,0)


        def proton_shift_carbons(self):
            return self.getTypedRuleContext(XplorMRParser.Proton_shift_carbonsContext,0)


        def proton_shift_nitrogens(self):
            return self.getTypedRuleContext(XplorMRParser.Proton_shift_nitrogensContext,0)


        def proton_shift_oxygens(self):
            return self.getTypedRuleContext(XplorMRParser.Proton_shift_oxygensContext,0)


        def proton_shift_ring_atoms(self):
            return self.getTypedRuleContext(XplorMRParser.Proton_shift_ring_atomsContext,0)


        def proton_shift_alphas_and_amides(self):
            return self.getTypedRuleContext(XplorMRParser.Proton_shift_alphas_and_amidesContext,0)


        def Classification(self):
            return self.getToken(XplorMRParser.Classification, 0)

        def Simple_name(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Simple_name)
            else:
                return self.getToken(XplorMRParser.Simple_name, i)

        def Equ_op(self):
            return self.getToken(XplorMRParser.Equ_op, 0)

        def Error(self):
            return self.getToken(XplorMRParser.Error, 0)

        def number_s(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Number_sContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Number_sContext,i)


        def DegEnergy(self):
            return self.getToken(XplorMRParser.DegEnergy, 0)

        def Integer(self):
            return self.getToken(XplorMRParser.Integer, 0)

        def ForceConstant(self):
            return self.getToken(XplorMRParser.ForceConstant, 0)

        def Potential(self):
            return self.getToken(XplorMRParser.Potential, 0)

        def Potential_types(self):
            return self.getToken(XplorMRParser.Potential_types, 0)

        def Print(self):
            return self.getToken(XplorMRParser.Print, 0)

        def Threshold(self):
            return self.getToken(XplorMRParser.Threshold, 0)

        def All(self):
            return self.getToken(XplorMRParser.All, 0)

        def Reset(self):
            return self.getToken(XplorMRParser.Reset, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_proton_shift_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProton_shift_statement" ):
                listener.enterProton_shift_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProton_shift_statement" ):
                listener.exitProton_shift_statement(self)




    def proton_shift_statement(self):

        localctx = XplorMRParser.Proton_shift_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 104, self.RULE_proton_shift_statement)
        self._la = 0 # Token type
        try:
            self.state = 1249
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [XplorMRParser.Observed]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1210
                self.observed()
                pass
            elif token in [XplorMRParser.Rcoil]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1211
                self.proton_shift_rcoil()
                pass
            elif token in [XplorMRParser.Anisotropy]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1212
                self.proton_shift_anisotropy()
                pass
            elif token in [XplorMRParser.Amides]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1213
                self.proton_shift_amides()
                pass
            elif token in [XplorMRParser.Carbon]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1214
                self.proton_shift_carbons()
                pass
            elif token in [XplorMRParser.Nitrogens]:
                self.enterOuterAlt(localctx, 6)
                self.state = 1215
                self.proton_shift_nitrogens()
                pass
            elif token in [XplorMRParser.Oxygens]:
                self.enterOuterAlt(localctx, 7)
                self.state = 1216
                self.proton_shift_oxygens()
                pass
            elif token in [XplorMRParser.RingAtoms]:
                self.enterOuterAlt(localctx, 8)
                self.state = 1217
                self.proton_shift_ring_atoms()
                pass
            elif token in [XplorMRParser.AlphasAndAmides]:
                self.enterOuterAlt(localctx, 9)
                self.state = 1218
                self.proton_shift_alphas_and_amides()
                pass
            elif token in [XplorMRParser.Classification]:
                self.enterOuterAlt(localctx, 10)
                self.state = 1219
                self.match(XplorMRParser.Classification)
                self.state = 1221
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 1220
                    self.match(XplorMRParser.Equ_op)


                self.state = 1223
                self.match(XplorMRParser.Simple_name)
                pass
            elif token in [XplorMRParser.Error]:
                self.enterOuterAlt(localctx, 11)
                self.state = 1224
                self.match(XplorMRParser.Error)
                self.state = 1225
                self.number_s()
                pass
            elif token in [XplorMRParser.DegEnergy]:
                self.enterOuterAlt(localctx, 12)
                self.state = 1226
                self.match(XplorMRParser.DegEnergy)
                self.state = 1227
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.ForceConstant]:
                self.enterOuterAlt(localctx, 13)
                self.state = 1228
                self.match(XplorMRParser.ForceConstant)
                self.state = 1229
                self.number_s()
                self.state = 1231
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 188)) & ~0x3f) == 0 and ((1 << (_la - 188)) & ((1 << (XplorMRParser.Integer - 188)) | (1 << (XplorMRParser.Real - 188)) | (1 << (XplorMRParser.Symbol_name - 188)))) != 0):
                    self.state = 1230
                    self.number_s()


                pass
            elif token in [XplorMRParser.Potential]:
                self.enterOuterAlt(localctx, 14)
                self.state = 1233
                self.match(XplorMRParser.Potential)
                self.state = 1234
                self.match(XplorMRParser.Potential_types)
                pass
            elif token in [XplorMRParser.Print]:
                self.enterOuterAlt(localctx, 15)
                self.state = 1235
                self.match(XplorMRParser.Print)
                self.state = 1236
                self.match(XplorMRParser.Threshold)
                self.state = 1237
                self.number_s()
                self.state = 1244
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [XplorMRParser.All]:
                    self.state = 1238
                    self.match(XplorMRParser.All)
                    pass
                elif token in [XplorMRParser.Classification]:
                    self.state = 1239
                    self.match(XplorMRParser.Classification)
                    self.state = 1241
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==XplorMRParser.Equ_op:
                        self.state = 1240
                        self.match(XplorMRParser.Equ_op)


                    self.state = 1243
                    self.match(XplorMRParser.Simple_name)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 1246
                self.match(XplorMRParser.Simple_name)
                pass
            elif token in [XplorMRParser.Reset]:
                self.enterOuterAlt(localctx, 16)
                self.state = 1248
                self.match(XplorMRParser.Reset)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ObservedContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Observed(self):
            return self.getToken(XplorMRParser.Observed, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.SelectionContext,i)


        def number(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.NumberContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.NumberContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_observed

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterObserved" ):
                listener.enterObserved(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitObserved" ):
                listener.exitObserved(self)




    def observed(self):

        localctx = XplorMRParser.ObservedContext(self, self._ctx, self.state)
        self.enterRule(localctx, 106, self.RULE_observed)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1251
            self.match(XplorMRParser.Observed)
            self.state = 1252
            self.selection()
            self.state = 1254
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==XplorMRParser.L_paren:
                self.state = 1253
                self.selection()


            self.state = 1256
            self.number()
            self.state = 1258
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 188)) & ~0x3f) == 0 and ((1 << (_la - 188)) & ((1 << (XplorMRParser.Integer - 188)) | (1 << (XplorMRParser.Real - 188)) | (1 << (XplorMRParser.Symbol_name - 188)))) != 0):
                self.state = 1257
                self.number()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Proton_shift_rcoilContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Rcoil(self):
            return self.getToken(XplorMRParser.Rcoil, 0)

        def selection(self):
            return self.getTypedRuleContext(XplorMRParser.SelectionContext,0)


        def number(self):
            return self.getTypedRuleContext(XplorMRParser.NumberContext,0)


        def getRuleIndex(self):
            return XplorMRParser.RULE_proton_shift_rcoil

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProton_shift_rcoil" ):
                listener.enterProton_shift_rcoil(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProton_shift_rcoil" ):
                listener.exitProton_shift_rcoil(self)




    def proton_shift_rcoil(self):

        localctx = XplorMRParser.Proton_shift_rcoilContext(self, self._ctx, self.state)
        self.enterRule(localctx, 108, self.RULE_proton_shift_rcoil)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1260
            self.match(XplorMRParser.Rcoil)
            self.state = 1261
            self.selection()
            self.state = 1262
            self.number()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Proton_shift_anisotropyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Anisotropy(self):
            return self.getToken(XplorMRParser.Anisotropy, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.SelectionContext,i)


        def Simple_name(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Simple_name)
            else:
                return self.getToken(XplorMRParser.Simple_name, i)

        def Logical(self):
            return self.getToken(XplorMRParser.Logical, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_proton_shift_anisotropy

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProton_shift_anisotropy" ):
                listener.enterProton_shift_anisotropy(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProton_shift_anisotropy" ):
                listener.exitProton_shift_anisotropy(self)




    def proton_shift_anisotropy(self):

        localctx = XplorMRParser.Proton_shift_anisotropyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 110, self.RULE_proton_shift_anisotropy)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1264
            self.match(XplorMRParser.Anisotropy)
            self.state = 1265
            self.selection()
            self.state = 1266
            self.selection()
            self.state = 1267
            self.selection()
            self.state = 1268
            self.match(XplorMRParser.Simple_name)
            self.state = 1270
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==XplorMRParser.Logical:
                self.state = 1269
                self.match(XplorMRParser.Logical)


            self.state = 1272
            self.match(XplorMRParser.Simple_name)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Proton_shift_amidesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Amides(self):
            return self.getToken(XplorMRParser.Amides, 0)

        def selection(self):
            return self.getTypedRuleContext(XplorMRParser.SelectionContext,0)


        def getRuleIndex(self):
            return XplorMRParser.RULE_proton_shift_amides

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProton_shift_amides" ):
                listener.enterProton_shift_amides(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProton_shift_amides" ):
                listener.exitProton_shift_amides(self)




    def proton_shift_amides(self):

        localctx = XplorMRParser.Proton_shift_amidesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 112, self.RULE_proton_shift_amides)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1274
            self.match(XplorMRParser.Amides)
            self.state = 1275
            self.selection()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Proton_shift_carbonsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Carbon(self):
            return self.getToken(XplorMRParser.Carbon, 0)

        def selection(self):
            return self.getTypedRuleContext(XplorMRParser.SelectionContext,0)


        def getRuleIndex(self):
            return XplorMRParser.RULE_proton_shift_carbons

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProton_shift_carbons" ):
                listener.enterProton_shift_carbons(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProton_shift_carbons" ):
                listener.exitProton_shift_carbons(self)




    def proton_shift_carbons(self):

        localctx = XplorMRParser.Proton_shift_carbonsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 114, self.RULE_proton_shift_carbons)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1277
            self.match(XplorMRParser.Carbon)
            self.state = 1278
            self.selection()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Proton_shift_nitrogensContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Nitrogens(self):
            return self.getToken(XplorMRParser.Nitrogens, 0)

        def selection(self):
            return self.getTypedRuleContext(XplorMRParser.SelectionContext,0)


        def getRuleIndex(self):
            return XplorMRParser.RULE_proton_shift_nitrogens

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProton_shift_nitrogens" ):
                listener.enterProton_shift_nitrogens(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProton_shift_nitrogens" ):
                listener.exitProton_shift_nitrogens(self)




    def proton_shift_nitrogens(self):

        localctx = XplorMRParser.Proton_shift_nitrogensContext(self, self._ctx, self.state)
        self.enterRule(localctx, 116, self.RULE_proton_shift_nitrogens)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1280
            self.match(XplorMRParser.Nitrogens)
            self.state = 1281
            self.selection()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Proton_shift_oxygensContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Oxygens(self):
            return self.getToken(XplorMRParser.Oxygens, 0)

        def selection(self):
            return self.getTypedRuleContext(XplorMRParser.SelectionContext,0)


        def getRuleIndex(self):
            return XplorMRParser.RULE_proton_shift_oxygens

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProton_shift_oxygens" ):
                listener.enterProton_shift_oxygens(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProton_shift_oxygens" ):
                listener.exitProton_shift_oxygens(self)




    def proton_shift_oxygens(self):

        localctx = XplorMRParser.Proton_shift_oxygensContext(self, self._ctx, self.state)
        self.enterRule(localctx, 118, self.RULE_proton_shift_oxygens)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1283
            self.match(XplorMRParser.Oxygens)
            self.state = 1284
            self.selection()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Proton_shift_ring_atomsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RingAtoms(self):
            return self.getToken(XplorMRParser.RingAtoms, 0)

        def Simple_name(self):
            return self.getToken(XplorMRParser.Simple_name, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.SelectionContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_proton_shift_ring_atoms

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProton_shift_ring_atoms" ):
                listener.enterProton_shift_ring_atoms(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProton_shift_ring_atoms" ):
                listener.exitProton_shift_ring_atoms(self)




    def proton_shift_ring_atoms(self):

        localctx = XplorMRParser.Proton_shift_ring_atomsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 120, self.RULE_proton_shift_ring_atoms)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1286
            self.match(XplorMRParser.RingAtoms)
            self.state = 1287
            self.match(XplorMRParser.Simple_name)
            self.state = 1288
            self.selection()
            self.state = 1289
            self.selection()
            self.state = 1290
            self.selection()
            self.state = 1291
            self.selection()
            self.state = 1292
            self.selection()
            self.state = 1294
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==XplorMRParser.L_paren:
                self.state = 1293
                self.selection()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Proton_shift_alphas_and_amidesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AlphasAndAmides(self):
            return self.getToken(XplorMRParser.AlphasAndAmides, 0)

        def selection(self):
            return self.getTypedRuleContext(XplorMRParser.SelectionContext,0)


        def getRuleIndex(self):
            return XplorMRParser.RULE_proton_shift_alphas_and_amides

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProton_shift_alphas_and_amides" ):
                listener.enterProton_shift_alphas_and_amides(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProton_shift_alphas_and_amides" ):
                listener.exitProton_shift_alphas_and_amides(self)




    def proton_shift_alphas_and_amides(self):

        localctx = XplorMRParser.Proton_shift_alphas_and_amidesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 122, self.RULE_proton_shift_alphas_and_amides)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1296
            self.match(XplorMRParser.AlphasAndAmides)
            self.state = 1297
            self.selection()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Ramachandran_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def rama_assign(self):
            return self.getTypedRuleContext(XplorMRParser.Rama_assignContext,0)


        def Classification(self):
            return self.getToken(XplorMRParser.Classification, 0)

        def Simple_name(self):
            return self.getToken(XplorMRParser.Simple_name, 0)

        def Equ_op(self):
            return self.getToken(XplorMRParser.Equ_op, 0)

        def Cutoff(self):
            return self.getToken(XplorMRParser.Cutoff, 0)

        def number_s(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Number_sContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Number_sContext,i)


        def ForceConstant(self):
            return self.getToken(XplorMRParser.ForceConstant, 0)

        def Gaussian(self):
            return self.getToken(XplorMRParser.Gaussian, 0)

        def Nrestraints(self):
            return self.getToken(XplorMRParser.Nrestraints, 0)

        def Integer(self):
            return self.getToken(XplorMRParser.Integer, 0)

        def Phase(self):
            return self.getToken(XplorMRParser.Phase, 0)

        def Print(self):
            return self.getToken(XplorMRParser.Print, 0)

        def Threshold(self):
            return self.getToken(XplorMRParser.Threshold, 0)

        def All(self):
            return self.getToken(XplorMRParser.All, 0)

        def Quartic(self):
            return self.getToken(XplorMRParser.Quartic, 0)

        def Reset(self):
            return self.getToken(XplorMRParser.Reset, 0)

        def Scale(self):
            return self.getToken(XplorMRParser.Scale, 0)

        def Shape(self):
            return self.getToken(XplorMRParser.Shape, 0)

        def Gauss_or_Quart(self):
            return self.getToken(XplorMRParser.Gauss_or_Quart, 0)

        def Size(self):
            return self.getToken(XplorMRParser.Size, 0)

        def Dimensions(self):
            return self.getToken(XplorMRParser.Dimensions, 0)

        def Sort(self):
            return self.getToken(XplorMRParser.Sort, 0)

        def Zero(self):
            return self.getToken(XplorMRParser.Zero, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_ramachandran_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRamachandran_statement" ):
                listener.enterRamachandran_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRamachandran_statement" ):
                listener.exitRamachandran_statement(self)




    def ramachandran_statement(self):

        localctx = XplorMRParser.Ramachandran_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 124, self.RULE_ramachandran_statement)
        self._la = 0 # Token type
        try:
            self.state = 1416
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [XplorMRParser.Assign]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1299
                self.rama_assign()
                pass
            elif token in [XplorMRParser.Classification]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1300
                self.match(XplorMRParser.Classification)
                self.state = 1302
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 1301
                    self.match(XplorMRParser.Equ_op)


                self.state = 1304
                self.match(XplorMRParser.Simple_name)
                pass
            elif token in [XplorMRParser.Cutoff]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1305
                self.match(XplorMRParser.Cutoff)
                self.state = 1306
                self.number_s()
                pass
            elif token in [XplorMRParser.ForceConstant]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1307
                self.match(XplorMRParser.ForceConstant)
                self.state = 1309
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 1308
                    self.match(XplorMRParser.Equ_op)


                self.state = 1311
                self.number_s()
                pass
            elif token in [XplorMRParser.Gaussian]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1312
                self.match(XplorMRParser.Gaussian)
                self.state = 1313
                self.number_s()
                self.state = 1314
                self.number_s()
                self.state = 1315
                self.number_s()
                self.state = 1320
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,136,self._ctx)
                if la_ == 1:
                    self.state = 1316
                    self.number_s()
                    self.state = 1317
                    self.number_s()
                    self.state = 1318
                    self.number_s()


                self.state = 1326
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,137,self._ctx)
                if la_ == 1:
                    self.state = 1322
                    self.number_s()
                    self.state = 1323
                    self.number_s()
                    self.state = 1324
                    self.number_s()


                self.state = 1332
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 188)) & ~0x3f) == 0 and ((1 << (_la - 188)) & ((1 << (XplorMRParser.Integer - 188)) | (1 << (XplorMRParser.Real - 188)) | (1 << (XplorMRParser.Symbol_name - 188)))) != 0):
                    self.state = 1328
                    self.number_s()
                    self.state = 1329
                    self.number_s()
                    self.state = 1330
                    self.number_s()


                pass
            elif token in [XplorMRParser.Nrestraints]:
                self.enterOuterAlt(localctx, 6)
                self.state = 1334
                self.match(XplorMRParser.Nrestraints)
                self.state = 1336
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 1335
                    self.match(XplorMRParser.Equ_op)


                self.state = 1338
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.Phase]:
                self.enterOuterAlt(localctx, 7)
                self.state = 1339
                self.match(XplorMRParser.Phase)
                self.state = 1340
                self.number_s()
                self.state = 1341
                self.number_s()
                self.state = 1342
                self.number_s()
                self.state = 1347
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,140,self._ctx)
                if la_ == 1:
                    self.state = 1343
                    self.number_s()
                    self.state = 1344
                    self.number_s()
                    self.state = 1345
                    self.number_s()


                self.state = 1353
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,141,self._ctx)
                if la_ == 1:
                    self.state = 1349
                    self.number_s()
                    self.state = 1350
                    self.number_s()
                    self.state = 1351
                    self.number_s()


                self.state = 1359
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 188)) & ~0x3f) == 0 and ((1 << (_la - 188)) & ((1 << (XplorMRParser.Integer - 188)) | (1 << (XplorMRParser.Real - 188)) | (1 << (XplorMRParser.Symbol_name - 188)))) != 0):
                    self.state = 1355
                    self.number_s()
                    self.state = 1356
                    self.number_s()
                    self.state = 1357
                    self.number_s()


                pass
            elif token in [XplorMRParser.Print]:
                self.enterOuterAlt(localctx, 8)
                self.state = 1361
                self.match(XplorMRParser.Print)
                self.state = 1362
                self.match(XplorMRParser.Threshold)
                self.state = 1363
                self.number_s()
                self.state = 1370
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [XplorMRParser.All]:
                    self.state = 1364
                    self.match(XplorMRParser.All)
                    pass
                elif token in [XplorMRParser.Classification]:
                    self.state = 1365
                    self.match(XplorMRParser.Classification)
                    self.state = 1367
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==XplorMRParser.Equ_op:
                        self.state = 1366
                        self.match(XplorMRParser.Equ_op)


                    self.state = 1369
                    self.match(XplorMRParser.Simple_name)
                    pass
                else:
                    raise NoViableAltException(self)

                pass
            elif token in [XplorMRParser.Quartic]:
                self.enterOuterAlt(localctx, 9)
                self.state = 1372
                self.match(XplorMRParser.Quartic)
                self.state = 1373
                self.number_s()
                self.state = 1374
                self.number_s()
                self.state = 1375
                self.number_s()
                self.state = 1380
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,145,self._ctx)
                if la_ == 1:
                    self.state = 1376
                    self.number_s()
                    self.state = 1377
                    self.number_s()
                    self.state = 1378
                    self.number_s()


                self.state = 1386
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,146,self._ctx)
                if la_ == 1:
                    self.state = 1382
                    self.number_s()
                    self.state = 1383
                    self.number_s()
                    self.state = 1384
                    self.number_s()


                self.state = 1392
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 188)) & ~0x3f) == 0 and ((1 << (_la - 188)) & ((1 << (XplorMRParser.Integer - 188)) | (1 << (XplorMRParser.Real - 188)) | (1 << (XplorMRParser.Symbol_name - 188)))) != 0):
                    self.state = 1388
                    self.number_s()
                    self.state = 1389
                    self.number_s()
                    self.state = 1390
                    self.number_s()


                pass
            elif token in [XplorMRParser.Reset]:
                self.enterOuterAlt(localctx, 10)
                self.state = 1394
                self.match(XplorMRParser.Reset)
                pass
            elif token in [XplorMRParser.Scale]:
                self.enterOuterAlt(localctx, 11)
                self.state = 1395
                self.match(XplorMRParser.Scale)
                self.state = 1397
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 1396
                    self.match(XplorMRParser.Equ_op)


                self.state = 1399
                self.number_s()
                pass
            elif token in [XplorMRParser.Shape]:
                self.enterOuterAlt(localctx, 12)
                self.state = 1400
                self.match(XplorMRParser.Shape)
                self.state = 1401
                self.match(XplorMRParser.Gauss_or_Quart)
                pass
            elif token in [XplorMRParser.Size]:
                self.enterOuterAlt(localctx, 13)
                self.state = 1402
                self.match(XplorMRParser.Size)
                self.state = 1403
                self.match(XplorMRParser.Dimensions)
                self.state = 1404
                self.number_s()
                self.state = 1406
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,149,self._ctx)
                if la_ == 1:
                    self.state = 1405
                    self.number_s()


                self.state = 1409
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,150,self._ctx)
                if la_ == 1:
                    self.state = 1408
                    self.number_s()


                self.state = 1412
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 188)) & ~0x3f) == 0 and ((1 << (_la - 188)) & ((1 << (XplorMRParser.Integer - 188)) | (1 << (XplorMRParser.Real - 188)) | (1 << (XplorMRParser.Symbol_name - 188)))) != 0):
                    self.state = 1411
                    self.number_s()


                pass
            elif token in [XplorMRParser.Sort]:
                self.enterOuterAlt(localctx, 14)
                self.state = 1414
                self.match(XplorMRParser.Sort)
                pass
            elif token in [XplorMRParser.Zero]:
                self.enterOuterAlt(localctx, 15)
                self.state = 1415
                self.match(XplorMRParser.Zero)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Rama_assignContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Assign(self):
            return self.getToken(XplorMRParser.Assign, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.SelectionContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_rama_assign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRama_assign" ):
                listener.enterRama_assign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRama_assign" ):
                listener.exitRama_assign(self)




    def rama_assign(self):

        localctx = XplorMRParser.Rama_assignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 126, self.RULE_rama_assign)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1418
            self.match(XplorMRParser.Assign)
            self.state = 1419
            self.selection()
            self.state = 1420
            self.selection()
            self.state = 1421
            self.selection()
            self.state = 1422
            self.selection()
            self.state = 1428
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,153,self._ctx)
            if la_ == 1:
                self.state = 1423
                self.selection()
                self.state = 1424
                self.selection()
                self.state = 1425
                self.selection()
                self.state = 1426
                self.selection()


            self.state = 1435
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,154,self._ctx)
            if la_ == 1:
                self.state = 1430
                self.selection()
                self.state = 1431
                self.selection()
                self.state = 1432
                self.selection()
                self.state = 1433
                self.selection()


            self.state = 1442
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==XplorMRParser.L_paren:
                self.state = 1437
                self.selection()
                self.state = 1438
                self.selection()
                self.state = 1439
                self.selection()
                self.state = 1440
                self.selection()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Collapse_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def coll_assign(self):
            return self.getTypedRuleContext(XplorMRParser.Coll_assignContext,0)


        def coll_assign_loop(self):
            return self.getTypedRuleContext(XplorMRParser.Coll_assign_loopContext,0)


        def Scale(self):
            return self.getToken(XplorMRParser.Scale, 0)

        def number_s(self):
            return self.getTypedRuleContext(XplorMRParser.Number_sContext,0)


        def Equ_op(self):
            return self.getToken(XplorMRParser.Equ_op, 0)

        def Print(self):
            return self.getToken(XplorMRParser.Print, 0)

        def Reset(self):
            return self.getToken(XplorMRParser.Reset, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_collapse_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCollapse_statement" ):
                listener.enterCollapse_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCollapse_statement" ):
                listener.exitCollapse_statement(self)




    def collapse_statement(self):

        localctx = XplorMRParser.Collapse_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 128, self.RULE_collapse_statement)
        self._la = 0 # Token type
        try:
            self.state = 1453
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [XplorMRParser.Assign]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1444
                self.coll_assign()
                pass
            elif token in [XplorMRParser.For]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1445
                self.coll_assign_loop()
                pass
            elif token in [XplorMRParser.Scale]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1446
                self.match(XplorMRParser.Scale)
                self.state = 1448
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 1447
                    self.match(XplorMRParser.Equ_op)


                self.state = 1450
                self.number_s()
                pass
            elif token in [XplorMRParser.Print]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1451
                self.match(XplorMRParser.Print)
                pass
            elif token in [XplorMRParser.Reset]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1452
                self.match(XplorMRParser.Reset)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Coll_assignContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Assign(self):
            return self.getToken(XplorMRParser.Assign, 0)

        def selection(self):
            return self.getTypedRuleContext(XplorMRParser.SelectionContext,0)


        def number(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.NumberContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.NumberContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_coll_assign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColl_assign" ):
                listener.enterColl_assign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColl_assign" ):
                listener.exitColl_assign(self)




    def coll_assign(self):

        localctx = XplorMRParser.Coll_assignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 130, self.RULE_coll_assign)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1455
            self.match(XplorMRParser.Assign)
            self.state = 1456
            self.selection()
            self.state = 1457
            self.number()
            self.state = 1458
            self.number()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Diffusion_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def dani_assign(self):
            return self.getTypedRuleContext(XplorMRParser.Dani_assignContext,0)


        def Classification(self):
            return self.getToken(XplorMRParser.Classification, 0)

        def Simple_name(self):
            return self.getToken(XplorMRParser.Simple_name, 0)

        def Equ_op(self):
            return self.getToken(XplorMRParser.Equ_op, 0)

        def Coefficients(self):
            return self.getToken(XplorMRParser.Coefficients, 0)

        def number_s(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Number_sContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Number_sContext,i)


        def ForceConstant(self):
            return self.getToken(XplorMRParser.ForceConstant, 0)

        def Nrestraints(self):
            return self.getToken(XplorMRParser.Nrestraints, 0)

        def Integer(self):
            return self.getToken(XplorMRParser.Integer, 0)

        def Potential(self):
            return self.getToken(XplorMRParser.Potential, 0)

        def Potential_types(self):
            return self.getToken(XplorMRParser.Potential_types, 0)

        def Print(self):
            return self.getToken(XplorMRParser.Print, 0)

        def Threshold(self):
            return self.getToken(XplorMRParser.Threshold, 0)

        def Reset(self):
            return self.getToken(XplorMRParser.Reset, 0)

        def Type(self):
            return self.getToken(XplorMRParser.Type, 0)

        def Rdc_or_Diff_anis_types(self):
            return self.getToken(XplorMRParser.Rdc_or_Diff_anis_types, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_diffusion_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDiffusion_statement" ):
                listener.enterDiffusion_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDiffusion_statement" ):
                listener.exitDiffusion_statement(self)




    def diffusion_statement(self):

        localctx = XplorMRParser.Diffusion_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 132, self.RULE_diffusion_statement)
        self._la = 0 # Token type
        try:
            self.state = 1491
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [XplorMRParser.Assign]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1460
                self.dani_assign()
                pass
            elif token in [XplorMRParser.Classification]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1461
                self.match(XplorMRParser.Classification)
                self.state = 1463
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 1462
                    self.match(XplorMRParser.Equ_op)


                self.state = 1465
                self.match(XplorMRParser.Simple_name)
                pass
            elif token in [XplorMRParser.Coefficients]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1466
                self.match(XplorMRParser.Coefficients)
                self.state = 1467
                self.number_s()
                self.state = 1468
                self.number_s()
                self.state = 1469
                self.number_s()
                self.state = 1470
                self.number_s()
                self.state = 1471
                self.number_s()
                pass
            elif token in [XplorMRParser.ForceConstant]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1473
                self.match(XplorMRParser.ForceConstant)
                self.state = 1475
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 1474
                    self.match(XplorMRParser.Equ_op)


                self.state = 1477
                self.number_s()
                pass
            elif token in [XplorMRParser.Nrestraints]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1478
                self.match(XplorMRParser.Nrestraints)
                self.state = 1480
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 1479
                    self.match(XplorMRParser.Equ_op)


                self.state = 1482
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.Potential]:
                self.enterOuterAlt(localctx, 6)
                self.state = 1483
                self.match(XplorMRParser.Potential)
                self.state = 1484
                self.match(XplorMRParser.Potential_types)
                pass
            elif token in [XplorMRParser.Print]:
                self.enterOuterAlt(localctx, 7)
                self.state = 1485
                self.match(XplorMRParser.Print)
                self.state = 1486
                self.match(XplorMRParser.Threshold)
                self.state = 1487
                self.number_s()
                pass
            elif token in [XplorMRParser.Reset]:
                self.enterOuterAlt(localctx, 8)
                self.state = 1488
                self.match(XplorMRParser.Reset)
                pass
            elif token in [XplorMRParser.Type]:
                self.enterOuterAlt(localctx, 9)
                self.state = 1489
                self.match(XplorMRParser.Type)
                self.state = 1490
                self.match(XplorMRParser.Rdc_or_Diff_anis_types)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Dani_assignContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Assign(self):
            return self.getToken(XplorMRParser.Assign, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.SelectionContext,i)


        def number(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.NumberContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.NumberContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_dani_assign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDani_assign" ):
                listener.enterDani_assign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDani_assign" ):
                listener.exitDani_assign(self)




    def dani_assign(self):

        localctx = XplorMRParser.Dani_assignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 134, self.RULE_dani_assign)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1493
            self.match(XplorMRParser.Assign)
            self.state = 1494
            self.selection()
            self.state = 1495
            self.selection()
            self.state = 1496
            self.selection()
            self.state = 1497
            self.selection()
            self.state = 1498
            self.selection()
            self.state = 1499
            self.selection()
            self.state = 1500
            self.number()
            self.state = 1502
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 188)) & ~0x3f) == 0 and ((1 << (_la - 188)) & ((1 << (XplorMRParser.Integer - 188)) | (1 << (XplorMRParser.Real - 188)) | (1 << (XplorMRParser.Symbol_name - 188)))) != 0):
                self.state = 1501
                self.number()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Orientation_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def orie_assign(self):
            return self.getTypedRuleContext(XplorMRParser.Orie_assignContext,0)


        def Classification(self):
            return self.getToken(XplorMRParser.Classification, 0)

        def Simple_name(self):
            return self.getToken(XplorMRParser.Simple_name, 0)

        def Equ_op(self):
            return self.getToken(XplorMRParser.Equ_op, 0)

        def Cutoff(self):
            return self.getToken(XplorMRParser.Cutoff, 0)

        def number_s(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Number_sContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Number_sContext,i)


        def Height(self):
            return self.getToken(XplorMRParser.Height, 0)

        def ForceConstant(self):
            return self.getToken(XplorMRParser.ForceConstant, 0)

        def Gaussian(self):
            return self.getToken(XplorMRParser.Gaussian, 0)

        def MaxGaussians(self):
            return self.getToken(XplorMRParser.MaxGaussians, 0)

        def Integer(self):
            return self.getToken(XplorMRParser.Integer, 0)

        def NewGaussian(self):
            return self.getToken(XplorMRParser.NewGaussian, 0)

        def Nrestraints(self):
            return self.getToken(XplorMRParser.Nrestraints, 0)

        def Print(self):
            return self.getToken(XplorMRParser.Print, 0)

        def Threshold(self):
            return self.getToken(XplorMRParser.Threshold, 0)

        def All(self):
            return self.getToken(XplorMRParser.All, 0)

        def Quartic(self):
            return self.getToken(XplorMRParser.Quartic, 0)

        def Reset(self):
            return self.getToken(XplorMRParser.Reset, 0)

        def Residue(self):
            return self.getToken(XplorMRParser.Residue, 0)

        def Size(self):
            return self.getToken(XplorMRParser.Size, 0)

        def Zero(self):
            return self.getToken(XplorMRParser.Zero, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_orientation_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOrientation_statement" ):
                listener.enterOrientation_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOrientation_statement" ):
                listener.exitOrientation_statement(self)




    def orientation_statement(self):

        localctx = XplorMRParser.Orientation_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 136, self.RULE_orientation_statement)
        self._la = 0 # Token type
        try:
            self.state = 1573
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [XplorMRParser.Assign]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1504
                self.orie_assign()
                pass
            elif token in [XplorMRParser.Classification]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1505
                self.match(XplorMRParser.Classification)
                self.state = 1507
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 1506
                    self.match(XplorMRParser.Equ_op)


                self.state = 1509
                self.match(XplorMRParser.Simple_name)
                pass
            elif token in [XplorMRParser.Cutoff]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1510
                self.match(XplorMRParser.Cutoff)
                self.state = 1511
                self.number_s()
                pass
            elif token in [XplorMRParser.Height]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1512
                self.match(XplorMRParser.Height)
                self.state = 1513
                self.number_s()
                pass
            elif token in [XplorMRParser.ForceConstant]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1514
                self.match(XplorMRParser.ForceConstant)
                self.state = 1516
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 1515
                    self.match(XplorMRParser.Equ_op)


                self.state = 1518
                self.number_s()
                pass
            elif token in [XplorMRParser.Gaussian]:
                self.enterOuterAlt(localctx, 6)
                self.state = 1519
                self.match(XplorMRParser.Gaussian)
                self.state = 1520
                self.number_s()
                self.state = 1521
                self.number_s()
                self.state = 1522
                self.number_s()
                self.state = 1523
                self.number_s()
                self.state = 1524
                self.number_s()
                self.state = 1525
                self.number_s()
                self.state = 1526
                self.number_s()
                pass
            elif token in [XplorMRParser.MaxGaussians]:
                self.enterOuterAlt(localctx, 7)
                self.state = 1528
                self.match(XplorMRParser.MaxGaussians)
                self.state = 1529
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.NewGaussian]:
                self.enterOuterAlt(localctx, 8)
                self.state = 1530
                self.match(XplorMRParser.NewGaussian)
                self.state = 1531
                self.number_s()
                self.state = 1532
                self.number_s()
                self.state = 1533
                self.number_s()
                self.state = 1534
                self.number_s()
                self.state = 1535
                self.number_s()
                self.state = 1536
                self.number_s()
                self.state = 1537
                self.number_s()
                self.state = 1538
                self.number_s()
                pass
            elif token in [XplorMRParser.Nrestraints]:
                self.enterOuterAlt(localctx, 9)
                self.state = 1540
                self.match(XplorMRParser.Nrestraints)
                self.state = 1542
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 1541
                    self.match(XplorMRParser.Equ_op)


                self.state = 1544
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.Print]:
                self.enterOuterAlt(localctx, 10)
                self.state = 1545
                self.match(XplorMRParser.Print)
                self.state = 1546
                self.match(XplorMRParser.Threshold)
                self.state = 1547
                self.number_s()
                self.state = 1554
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [XplorMRParser.All]:
                    self.state = 1548
                    self.match(XplorMRParser.All)
                    pass
                elif token in [XplorMRParser.Classification]:
                    self.state = 1549
                    self.match(XplorMRParser.Classification)
                    self.state = 1551
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==XplorMRParser.Equ_op:
                        self.state = 1550
                        self.match(XplorMRParser.Equ_op)


                    self.state = 1553
                    self.match(XplorMRParser.Simple_name)
                    pass
                else:
                    raise NoViableAltException(self)

                pass
            elif token in [XplorMRParser.Quartic]:
                self.enterOuterAlt(localctx, 11)
                self.state = 1556
                self.match(XplorMRParser.Quartic)
                self.state = 1557
                self.number_s()
                self.state = 1558
                self.number_s()
                self.state = 1559
                self.number_s()
                self.state = 1560
                self.number_s()
                self.state = 1561
                self.number_s()
                self.state = 1562
                self.number_s()
                self.state = 1563
                self.number_s()
                pass
            elif token in [XplorMRParser.Reset]:
                self.enterOuterAlt(localctx, 12)
                self.state = 1565
                self.match(XplorMRParser.Reset)
                pass
            elif token in [XplorMRParser.Residue]:
                self.enterOuterAlt(localctx, 13)
                self.state = 1566
                self.match(XplorMRParser.Residue)
                self.state = 1567
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.Size]:
                self.enterOuterAlt(localctx, 14)
                self.state = 1568
                self.match(XplorMRParser.Size)
                self.state = 1569
                self.number_s()
                self.state = 1570
                self.number_s()
                pass
            elif token in [XplorMRParser.Zero]:
                self.enterOuterAlt(localctx, 15)
                self.state = 1572
                self.match(XplorMRParser.Zero)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Orie_assignContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Assign(self):
            return self.getToken(XplorMRParser.Assign, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.SelectionContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_orie_assign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOrie_assign" ):
                listener.enterOrie_assign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOrie_assign" ):
                listener.exitOrie_assign(self)




    def orie_assign(self):

        localctx = XplorMRParser.Orie_assignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 138, self.RULE_orie_assign)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1575
            self.match(XplorMRParser.Assign)
            self.state = 1576
            self.selection()
            self.state = 1577
            self.selection()
            self.state = 1578
            self.selection()
            self.state = 1579
            self.selection()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Csa_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def csa_assign(self):
            return self.getTypedRuleContext(XplorMRParser.Csa_assignContext,0)


        def csa_assign_loop(self):
            return self.getTypedRuleContext(XplorMRParser.Csa_assign_loopContext,0)


        def Classification(self):
            return self.getToken(XplorMRParser.Classification, 0)

        def Simple_name(self):
            return self.getToken(XplorMRParser.Simple_name, 0)

        def Equ_op(self):
            return self.getToken(XplorMRParser.Equ_op, 0)

        def Scale(self):
            return self.getToken(XplorMRParser.Scale, 0)

        def number_s(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Number_sContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Number_sContext,i)


        def Type(self):
            return self.getToken(XplorMRParser.Type, 0)

        def Csa_types(self):
            return self.getToken(XplorMRParser.Csa_types, 0)

        def Coefficients(self):
            return self.getToken(XplorMRParser.Coefficients, 0)

        def Sigma(self):
            return self.getToken(XplorMRParser.Sigma, 0)

        def ForceConstant(self):
            return self.getToken(XplorMRParser.ForceConstant, 0)

        def Nrestraints(self):
            return self.getToken(XplorMRParser.Nrestraints, 0)

        def Integer(self):
            return self.getToken(XplorMRParser.Integer, 0)

        def Potential(self):
            return self.getToken(XplorMRParser.Potential, 0)

        def Potential_types(self):
            return self.getToken(XplorMRParser.Potential_types, 0)

        def Print(self):
            return self.getToken(XplorMRParser.Print, 0)

        def Threshold(self):
            return self.getToken(XplorMRParser.Threshold, 0)

        def Reset(self):
            return self.getToken(XplorMRParser.Reset, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_csa_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCsa_statement" ):
                listener.enterCsa_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCsa_statement" ):
                listener.exitCsa_statement(self)




    def csa_statement(self):

        localctx = XplorMRParser.Csa_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 140, self.RULE_csa_statement)
        self._la = 0 # Token type
        try:
            self.state = 1621
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [XplorMRParser.Assign]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1581
                self.csa_assign()
                pass
            elif token in [XplorMRParser.For]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1582
                self.csa_assign_loop()
                pass
            elif token in [XplorMRParser.Classification]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1583
                self.match(XplorMRParser.Classification)
                self.state = 1585
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 1584
                    self.match(XplorMRParser.Equ_op)


                self.state = 1587
                self.match(XplorMRParser.Simple_name)
                pass
            elif token in [XplorMRParser.Scale]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1588
                self.match(XplorMRParser.Scale)
                self.state = 1590
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 1589
                    self.match(XplorMRParser.Equ_op)


                self.state = 1592
                self.number_s()
                pass
            elif token in [XplorMRParser.Type]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1593
                self.match(XplorMRParser.Type)
                self.state = 1594
                self.match(XplorMRParser.Csa_types)
                pass
            elif token in [XplorMRParser.Coefficients]:
                self.enterOuterAlt(localctx, 6)
                self.state = 1595
                self.match(XplorMRParser.Coefficients)
                self.state = 1596
                self.number_s()
                self.state = 1597
                self.number_s()
                self.state = 1598
                self.number_s()
                pass
            elif token in [XplorMRParser.Sigma]:
                self.enterOuterAlt(localctx, 7)
                self.state = 1600
                self.match(XplorMRParser.Sigma)
                self.state = 1601
                self.number_s()
                self.state = 1602
                self.number_s()
                self.state = 1603
                self.number_s()
                pass
            elif token in [XplorMRParser.ForceConstant]:
                self.enterOuterAlt(localctx, 8)
                self.state = 1605
                self.match(XplorMRParser.ForceConstant)
                self.state = 1607
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 1606
                    self.match(XplorMRParser.Equ_op)


                self.state = 1609
                self.number_s()
                pass
            elif token in [XplorMRParser.Nrestraints]:
                self.enterOuterAlt(localctx, 9)
                self.state = 1610
                self.match(XplorMRParser.Nrestraints)
                self.state = 1612
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 1611
                    self.match(XplorMRParser.Equ_op)


                self.state = 1614
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.Potential]:
                self.enterOuterAlt(localctx, 10)
                self.state = 1615
                self.match(XplorMRParser.Potential)
                self.state = 1616
                self.match(XplorMRParser.Potential_types)
                pass
            elif token in [XplorMRParser.Print]:
                self.enterOuterAlt(localctx, 11)
                self.state = 1617
                self.match(XplorMRParser.Print)
                self.state = 1618
                self.match(XplorMRParser.Threshold)
                self.state = 1619
                self.number_s()
                pass
            elif token in [XplorMRParser.Reset]:
                self.enterOuterAlt(localctx, 12)
                self.state = 1620
                self.match(XplorMRParser.Reset)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Csa_assignContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Assign(self):
            return self.getToken(XplorMRParser.Assign, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.SelectionContext,i)


        def number(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.NumberContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.NumberContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_csa_assign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCsa_assign" ):
                listener.enterCsa_assign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCsa_assign" ):
                listener.exitCsa_assign(self)




    def csa_assign(self):

        localctx = XplorMRParser.Csa_assignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 142, self.RULE_csa_assign)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1623
            self.match(XplorMRParser.Assign)
            self.state = 1624
            self.selection()
            self.state = 1625
            self.selection()
            self.state = 1626
            self.selection()
            self.state = 1627
            self.selection()
            self.state = 1628
            self.selection()
            self.state = 1629
            self.selection()
            self.state = 1630
            self.selection()
            self.state = 1631
            self.number()
            self.state = 1633
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,174,self._ctx)
            if la_ == 1:
                self.state = 1632
                self.number()


            self.state = 1636
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 188)) & ~0x3f) == 0 and ((1 << (_la - 188)) & ((1 << (XplorMRParser.Integer - 188)) | (1 << (XplorMRParser.Real - 188)) | (1 << (XplorMRParser.Symbol_name - 188)))) != 0):
                self.state = 1635
                self.number()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pcsa_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def csa_assign(self):
            return self.getTypedRuleContext(XplorMRParser.Csa_assignContext,0)


        def Classification(self):
            return self.getToken(XplorMRParser.Classification, 0)

        def Simple_name(self):
            return self.getToken(XplorMRParser.Simple_name, 0)

        def Equ_op(self):
            return self.getToken(XplorMRParser.Equ_op, 0)

        def Scale(self):
            return self.getToken(XplorMRParser.Scale, 0)

        def number_s(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Number_sContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Number_sContext,i)


        def Coefficients(self):
            return self.getToken(XplorMRParser.Coefficients, 0)

        def Sigma(self):
            return self.getToken(XplorMRParser.Sigma, 0)

        def ForceConstant(self):
            return self.getToken(XplorMRParser.ForceConstant, 0)

        def Nrestraints(self):
            return self.getToken(XplorMRParser.Nrestraints, 0)

        def Integer(self):
            return self.getToken(XplorMRParser.Integer, 0)

        def Potential(self):
            return self.getToken(XplorMRParser.Potential, 0)

        def Potential_types(self):
            return self.getToken(XplorMRParser.Potential_types, 0)

        def Print(self):
            return self.getToken(XplorMRParser.Print, 0)

        def Threshold(self):
            return self.getToken(XplorMRParser.Threshold, 0)

        def Reset(self):
            return self.getToken(XplorMRParser.Reset, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_pcsa_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPcsa_statement" ):
                listener.enterPcsa_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPcsa_statement" ):
                listener.exitPcsa_statement(self)




    def pcsa_statement(self):

        localctx = XplorMRParser.Pcsa_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 144, self.RULE_pcsa_statement)
        self._la = 0 # Token type
        try:
            self.state = 1676
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [XplorMRParser.Assign]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1638
                self.csa_assign()
                pass
            elif token in [XplorMRParser.Classification]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1639
                self.match(XplorMRParser.Classification)
                self.state = 1641
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 1640
                    self.match(XplorMRParser.Equ_op)


                self.state = 1643
                self.match(XplorMRParser.Simple_name)
                pass
            elif token in [XplorMRParser.Scale]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1644
                self.match(XplorMRParser.Scale)
                self.state = 1646
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 1645
                    self.match(XplorMRParser.Equ_op)


                self.state = 1648
                self.number_s()
                pass
            elif token in [XplorMRParser.Coefficients]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1649
                self.match(XplorMRParser.Coefficients)
                self.state = 1650
                self.number_s()
                self.state = 1651
                self.number_s()
                self.state = 1652
                self.number_s()
                pass
            elif token in [XplorMRParser.Sigma]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1654
                self.match(XplorMRParser.Sigma)
                self.state = 1655
                self.number_s()
                self.state = 1656
                self.number_s()
                self.state = 1657
                self.number_s()
                self.state = 1658
                self.number_s()
                pass
            elif token in [XplorMRParser.ForceConstant]:
                self.enterOuterAlt(localctx, 6)
                self.state = 1660
                self.match(XplorMRParser.ForceConstant)
                self.state = 1662
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 1661
                    self.match(XplorMRParser.Equ_op)


                self.state = 1664
                self.number_s()
                pass
            elif token in [XplorMRParser.Nrestraints]:
                self.enterOuterAlt(localctx, 7)
                self.state = 1665
                self.match(XplorMRParser.Nrestraints)
                self.state = 1667
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 1666
                    self.match(XplorMRParser.Equ_op)


                self.state = 1669
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.Potential]:
                self.enterOuterAlt(localctx, 8)
                self.state = 1670
                self.match(XplorMRParser.Potential)
                self.state = 1671
                self.match(XplorMRParser.Potential_types)
                pass
            elif token in [XplorMRParser.Print]:
                self.enterOuterAlt(localctx, 9)
                self.state = 1672
                self.match(XplorMRParser.Print)
                self.state = 1673
                self.match(XplorMRParser.Threshold)
                self.state = 1674
                self.number_s()
                pass
            elif token in [XplorMRParser.Reset]:
                self.enterOuterAlt(localctx, 10)
                self.state = 1675
                self.match(XplorMRParser.Reset)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class One_bond_coupling_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def one_bond_assign(self):
            return self.getTypedRuleContext(XplorMRParser.One_bond_assignContext,0)


        def Classification(self):
            return self.getToken(XplorMRParser.Classification, 0)

        def Simple_name(self):
            return self.getToken(XplorMRParser.Simple_name, 0)

        def Equ_op(self):
            return self.getToken(XplorMRParser.Equ_op, 0)

        def Coefficients(self):
            return self.getToken(XplorMRParser.Coefficients, 0)

        def number_s(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Number_sContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Number_sContext,i)


        def ForceConstant(self):
            return self.getToken(XplorMRParser.ForceConstant, 0)

        def Nrestraints(self):
            return self.getToken(XplorMRParser.Nrestraints, 0)

        def Integer(self):
            return self.getToken(XplorMRParser.Integer, 0)

        def Potential(self):
            return self.getToken(XplorMRParser.Potential, 0)

        def Potential_types(self):
            return self.getToken(XplorMRParser.Potential_types, 0)

        def Print(self):
            return self.getToken(XplorMRParser.Print, 0)

        def Threshold(self):
            return self.getToken(XplorMRParser.Threshold, 0)

        def Reset(self):
            return self.getToken(XplorMRParser.Reset, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_one_bond_coupling_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOne_bond_coupling_statement" ):
                listener.enterOne_bond_coupling_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOne_bond_coupling_statement" ):
                listener.exitOne_bond_coupling_statement(self)




    def one_bond_coupling_statement(self):

        localctx = XplorMRParser.One_bond_coupling_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 146, self.RULE_one_bond_coupling_statement)
        self._la = 0 # Token type
        try:
            self.state = 1709
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [XplorMRParser.Assign]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1678
                self.one_bond_assign()
                pass
            elif token in [XplorMRParser.Classification]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1679
                self.match(XplorMRParser.Classification)
                self.state = 1681
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 1680
                    self.match(XplorMRParser.Equ_op)


                self.state = 1683
                self.match(XplorMRParser.Simple_name)
                pass
            elif token in [XplorMRParser.Coefficients]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1684
                self.match(XplorMRParser.Coefficients)
                self.state = 1685
                self.number_s()
                self.state = 1686
                self.number_s()
                self.state = 1687
                self.number_s()
                self.state = 1688
                self.number_s()
                self.state = 1689
                self.number_s()
                self.state = 1690
                self.number_s()
                self.state = 1691
                self.number_s()
                pass
            elif token in [XplorMRParser.ForceConstant]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1693
                self.match(XplorMRParser.ForceConstant)
                self.state = 1695
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 1694
                    self.match(XplorMRParser.Equ_op)


                self.state = 1697
                self.number_s()
                pass
            elif token in [XplorMRParser.Nrestraints]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1698
                self.match(XplorMRParser.Nrestraints)
                self.state = 1700
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 1699
                    self.match(XplorMRParser.Equ_op)


                self.state = 1702
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.Potential]:
                self.enterOuterAlt(localctx, 6)
                self.state = 1703
                self.match(XplorMRParser.Potential)
                self.state = 1704
                self.match(XplorMRParser.Potential_types)
                pass
            elif token in [XplorMRParser.Print]:
                self.enterOuterAlt(localctx, 7)
                self.state = 1705
                self.match(XplorMRParser.Print)
                self.state = 1706
                self.match(XplorMRParser.Threshold)
                self.state = 1707
                self.number_s()
                pass
            elif token in [XplorMRParser.Reset]:
                self.enterOuterAlt(localctx, 8)
                self.state = 1708
                self.match(XplorMRParser.Reset)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class One_bond_assignContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Assign(self):
            return self.getToken(XplorMRParser.Assign, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.SelectionContext,i)


        def number(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.NumberContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.NumberContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_one_bond_assign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOne_bond_assign" ):
                listener.enterOne_bond_assign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOne_bond_assign" ):
                listener.exitOne_bond_assign(self)




    def one_bond_assign(self):

        localctx = XplorMRParser.One_bond_assignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 148, self.RULE_one_bond_assign)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1711
            self.match(XplorMRParser.Assign)
            self.state = 1712
            self.selection()
            self.state = 1713
            self.selection()
            self.state = 1714
            self.selection()
            self.state = 1715
            self.selection()
            self.state = 1716
            self.selection()
            self.state = 1717
            self.selection()
            self.state = 1718
            self.selection()
            self.state = 1719
            self.selection()
            self.state = 1720
            self.number()
            self.state = 1721
            self.number()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Angle_db_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def angle_db_assign(self):
            return self.getTypedRuleContext(XplorMRParser.Angle_db_assignContext,0)


        def Classification(self):
            return self.getToken(XplorMRParser.Classification, 0)

        def Simple_name(self):
            return self.getToken(XplorMRParser.Simple_name, 0)

        def Equ_op(self):
            return self.getToken(XplorMRParser.Equ_op, 0)

        def DerivFlag(self):
            return self.getToken(XplorMRParser.DerivFlag, 0)

        def Expectation(self):
            return self.getToken(XplorMRParser.Expectation, 0)

        def Integer(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Integer)
            else:
                return self.getToken(XplorMRParser.Integer, i)

        def number_s(self):
            return self.getTypedRuleContext(XplorMRParser.Number_sContext,0)


        def Error(self):
            return self.getToken(XplorMRParser.Error, 0)

        def ForceConstant(self):
            return self.getToken(XplorMRParser.ForceConstant, 0)

        def Nrestraints(self):
            return self.getToken(XplorMRParser.Nrestraints, 0)

        def Potential(self):
            return self.getToken(XplorMRParser.Potential, 0)

        def Potential_types(self):
            return self.getToken(XplorMRParser.Potential_types, 0)

        def Print(self):
            return self.getToken(XplorMRParser.Print, 0)

        def Threshold(self):
            return self.getToken(XplorMRParser.Threshold, 0)

        def All(self):
            return self.getToken(XplorMRParser.All, 0)

        def Reset(self):
            return self.getToken(XplorMRParser.Reset, 0)

        def Size(self):
            return self.getToken(XplorMRParser.Size, 0)

        def AngleDb(self):
            return self.getToken(XplorMRParser.AngleDb, 0)

        def Dihedral(self):
            return self.getToken(XplorMRParser.Dihedral, 0)

        def Zero(self):
            return self.getToken(XplorMRParser.Zero, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_angle_db_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAngle_db_statement" ):
                listener.enterAngle_db_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAngle_db_statement" ):
                listener.exitAngle_db_statement(self)




    def angle_db_statement(self):

        localctx = XplorMRParser.Angle_db_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 150, self.RULE_angle_db_statement)
        self._la = 0 # Token type
        try:
            self.state = 1766
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [XplorMRParser.Assign]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1723
                self.angle_db_assign()
                pass
            elif token in [XplorMRParser.Classification]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1724
                self.match(XplorMRParser.Classification)
                self.state = 1726
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 1725
                    self.match(XplorMRParser.Equ_op)


                self.state = 1728
                self.match(XplorMRParser.Simple_name)
                pass
            elif token in [XplorMRParser.DerivFlag]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1729
                self.match(XplorMRParser.DerivFlag)
                self.state = 1730
                self.match(XplorMRParser.Simple_name)
                pass
            elif token in [XplorMRParser.Expectation]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1731
                self.match(XplorMRParser.Expectation)
                self.state = 1732
                self.match(XplorMRParser.Integer)
                self.state = 1733
                self.match(XplorMRParser.Integer)
                self.state = 1734
                self.number_s()
                pass
            elif token in [XplorMRParser.Error]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1735
                self.match(XplorMRParser.Error)
                self.state = 1736
                self.number_s()
                pass
            elif token in [XplorMRParser.ForceConstant]:
                self.enterOuterAlt(localctx, 6)
                self.state = 1737
                self.match(XplorMRParser.ForceConstant)
                self.state = 1739
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 1738
                    self.match(XplorMRParser.Equ_op)


                self.state = 1741
                self.number_s()
                pass
            elif token in [XplorMRParser.Nrestraints]:
                self.enterOuterAlt(localctx, 7)
                self.state = 1742
                self.match(XplorMRParser.Nrestraints)
                self.state = 1744
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 1743
                    self.match(XplorMRParser.Equ_op)


                self.state = 1746
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.Potential]:
                self.enterOuterAlt(localctx, 8)
                self.state = 1747
                self.match(XplorMRParser.Potential)
                self.state = 1748
                self.match(XplorMRParser.Potential_types)
                pass
            elif token in [XplorMRParser.Print]:
                self.enterOuterAlt(localctx, 9)
                self.state = 1749
                self.match(XplorMRParser.Print)
                self.state = 1750
                self.match(XplorMRParser.Threshold)
                self.state = 1751
                self.number_s()
                self.state = 1758
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [XplorMRParser.All]:
                    self.state = 1752
                    self.match(XplorMRParser.All)
                    pass
                elif token in [XplorMRParser.Classification]:
                    self.state = 1753
                    self.match(XplorMRParser.Classification)
                    self.state = 1755
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==XplorMRParser.Equ_op:
                        self.state = 1754
                        self.match(XplorMRParser.Equ_op)


                    self.state = 1757
                    self.match(XplorMRParser.Simple_name)
                    pass
                else:
                    raise NoViableAltException(self)

                pass
            elif token in [XplorMRParser.Reset]:
                self.enterOuterAlt(localctx, 10)
                self.state = 1760
                self.match(XplorMRParser.Reset)
                pass
            elif token in [XplorMRParser.Size]:
                self.enterOuterAlt(localctx, 11)
                self.state = 1761
                self.match(XplorMRParser.Size)
                self.state = 1762
                _la = self._input.LA(1)
                if not(_la==XplorMRParser.Dihedral or _la==XplorMRParser.AngleDb):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1763
                self.match(XplorMRParser.Integer)
                self.state = 1764
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.Zero]:
                self.enterOuterAlt(localctx, 12)
                self.state = 1765
                self.match(XplorMRParser.Zero)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Angle_db_assignContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Assign(self):
            return self.getToken(XplorMRParser.Assign, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.SelectionContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_angle_db_assign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAngle_db_assign" ):
                listener.enterAngle_db_assign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAngle_db_assign" ):
                listener.exitAngle_db_assign(self)




    def angle_db_assign(self):

        localctx = XplorMRParser.Angle_db_assignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 152, self.RULE_angle_db_assign)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1768
            self.match(XplorMRParser.Assign)
            self.state = 1769
            self.selection()
            self.state = 1770
            self.selection()
            self.state = 1771
            self.selection()
            self.state = 1772
            self.selection()
            self.state = 1773
            self.selection()
            self.state = 1774
            self.selection()
            self.state = 1775
            self.selection()
            self.state = 1776
            self.selection()
            self.state = 1777
            self.selection()
            self.state = 1778
            self.selection()
            self.state = 1779
            self.selection()
            self.state = 1781
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==XplorMRParser.L_paren:
                self.state = 1780
                self.selection()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pre_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def pre_assign(self):
            return self.getTypedRuleContext(XplorMRParser.Pre_assignContext,0)


        def pre_assign_loop(self):
            return self.getTypedRuleContext(XplorMRParser.Pre_assign_loopContext,0)


        def Classification(self):
            return self.getToken(XplorMRParser.Classification, 0)

        def Simple_name(self):
            return self.getToken(XplorMRParser.Simple_name, 0)

        def Equ_op(self):
            return self.getToken(XplorMRParser.Equ_op, 0)

        def ForceConstant(self):
            return self.getToken(XplorMRParser.ForceConstant, 0)

        def number_s(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Number_sContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Number_sContext,i)


        def Nrestraints(self):
            return self.getToken(XplorMRParser.Nrestraints, 0)

        def Integer(self):
            return self.getToken(XplorMRParser.Integer, 0)

        def Potential(self):
            return self.getToken(XplorMRParser.Potential, 0)

        def Simple_name_PT(self):
            return self.getToken(XplorMRParser.Simple_name_PT, 0)

        def Potential_types(self):
            return self.getToken(XplorMRParser.Potential_types, 0)

        def Equ_op_PT(self):
            return self.getToken(XplorMRParser.Equ_op_PT, 0)

        def Kconst(self):
            return self.getToken(XplorMRParser.Kconst, 0)

        def Omega(self):
            return self.getToken(XplorMRParser.Omega, 0)

        def Tauc(self):
            return self.getToken(XplorMRParser.Tauc, 0)

        def Print(self):
            return self.getToken(XplorMRParser.Print, 0)

        def Threshold(self):
            return self.getToken(XplorMRParser.Threshold, 0)

        def All(self):
            return self.getToken(XplorMRParser.All, 0)

        def Reset(self):
            return self.getToken(XplorMRParser.Reset, 0)

        def Debug(self):
            return self.getToken(XplorMRParser.Debug, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_pre_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPre_statement" ):
                listener.enterPre_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPre_statement" ):
                listener.exitPre_statement(self)




    def pre_statement(self):

        localctx = XplorMRParser.Pre_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 154, self.RULE_pre_statement)
        self._la = 0 # Token type
        try:
            self.state = 1840
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [XplorMRParser.Assign]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1783
                self.pre_assign()
                pass
            elif token in [XplorMRParser.For]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1784
                self.pre_assign_loop()
                pass
            elif token in [XplorMRParser.Classification]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1785
                self.match(XplorMRParser.Classification)
                self.state = 1787
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 1786
                    self.match(XplorMRParser.Equ_op)


                self.state = 1789
                self.match(XplorMRParser.Simple_name)
                pass
            elif token in [XplorMRParser.ForceConstant]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1790
                self.match(XplorMRParser.ForceConstant)
                self.state = 1792
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 1791
                    self.match(XplorMRParser.Equ_op)


                self.state = 1794
                self.match(XplorMRParser.Simple_name)
                self.state = 1795
                self.number_s()
                pass
            elif token in [XplorMRParser.Nrestraints]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1796
                self.match(XplorMRParser.Nrestraints)
                self.state = 1798
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 1797
                    self.match(XplorMRParser.Equ_op)


                self.state = 1800
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.Potential]:
                self.enterOuterAlt(localctx, 6)
                self.state = 1801
                self.match(XplorMRParser.Potential)
                self.state = 1803
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op_PT:
                    self.state = 1802
                    self.match(XplorMRParser.Equ_op_PT)


                self.state = 1805
                self.match(XplorMRParser.Simple_name_PT)
                self.state = 1806
                self.match(XplorMRParser.Potential_types)
                pass
            elif token in [XplorMRParser.Kconst]:
                self.enterOuterAlt(localctx, 7)
                self.state = 1807
                self.match(XplorMRParser.Kconst)
                self.state = 1809
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 1808
                    self.match(XplorMRParser.Equ_op)


                self.state = 1811
                self.match(XplorMRParser.Simple_name)
                self.state = 1812
                self.number_s()
                pass
            elif token in [XplorMRParser.Omega]:
                self.enterOuterAlt(localctx, 8)
                self.state = 1813
                self.match(XplorMRParser.Omega)
                self.state = 1815
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 1814
                    self.match(XplorMRParser.Equ_op)


                self.state = 1817
                self.match(XplorMRParser.Simple_name)
                self.state = 1818
                self.number_s()
                pass
            elif token in [XplorMRParser.Tauc]:
                self.enterOuterAlt(localctx, 9)
                self.state = 1819
                self.match(XplorMRParser.Tauc)
                self.state = 1821
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 1820
                    self.match(XplorMRParser.Equ_op)


                self.state = 1823
                self.match(XplorMRParser.Simple_name)
                self.state = 1824
                self.number_s()
                self.state = 1825
                self.number_s()
                pass
            elif token in [XplorMRParser.Print]:
                self.enterOuterAlt(localctx, 10)
                self.state = 1827
                self.match(XplorMRParser.Print)
                self.state = 1828
                self.match(XplorMRParser.Threshold)
                self.state = 1829
                self.number_s()
                self.state = 1836
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [XplorMRParser.All]:
                    self.state = 1830
                    self.match(XplorMRParser.All)
                    pass
                elif token in [XplorMRParser.Classification]:
                    self.state = 1831
                    self.match(XplorMRParser.Classification)
                    self.state = 1833
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==XplorMRParser.Equ_op:
                        self.state = 1832
                        self.match(XplorMRParser.Equ_op)


                    self.state = 1835
                    self.match(XplorMRParser.Simple_name)
                    pass
                else:
                    raise NoViableAltException(self)

                pass
            elif token in [XplorMRParser.Reset]:
                self.enterOuterAlt(localctx, 11)
                self.state = 1838
                self.match(XplorMRParser.Reset)
                pass
            elif token in [XplorMRParser.Debug]:
                self.enterOuterAlt(localctx, 12)
                self.state = 1839
                self.match(XplorMRParser.Debug)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pre_assignContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Assign(self):
            return self.getToken(XplorMRParser.Assign, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.SelectionContext,i)


        def number(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.NumberContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.NumberContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_pre_assign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPre_assign" ):
                listener.enterPre_assign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPre_assign" ):
                listener.exitPre_assign(self)




    def pre_assign(self):

        localctx = XplorMRParser.Pre_assignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 156, self.RULE_pre_assign)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1842
            self.match(XplorMRParser.Assign)
            self.state = 1843
            self.selection()
            self.state = 1844
            self.selection()
            self.state = 1845
            self.number()
            self.state = 1847
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 188)) & ~0x3f) == 0 and ((1 << (_la - 188)) & ((1 << (XplorMRParser.Integer - 188)) | (1 << (XplorMRParser.Real - 188)) | (1 << (XplorMRParser.Symbol_name - 188)))) != 0):
                self.state = 1846
                self.number()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pcs_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def pcs_assign(self):
            return self.getTypedRuleContext(XplorMRParser.Pcs_assignContext,0)


        def pcs_assign_loop(self):
            return self.getTypedRuleContext(XplorMRParser.Pcs_assign_loopContext,0)


        def Classification(self):
            return self.getToken(XplorMRParser.Classification, 0)

        def Simple_name(self):
            return self.getToken(XplorMRParser.Simple_name, 0)

        def Equ_op(self):
            return self.getToken(XplorMRParser.Equ_op, 0)

        def Tolerance(self):
            return self.getToken(XplorMRParser.Tolerance, 0)

        def Integer(self):
            return self.getToken(XplorMRParser.Integer, 0)

        def Coefficients(self):
            return self.getToken(XplorMRParser.Coefficients, 0)

        def number_s(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Number_sContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Number_sContext,i)


        def ForceConstant(self):
            return self.getToken(XplorMRParser.ForceConstant, 0)

        def Nrestraints(self):
            return self.getToken(XplorMRParser.Nrestraints, 0)

        def Print(self):
            return self.getToken(XplorMRParser.Print, 0)

        def Threshold(self):
            return self.getToken(XplorMRParser.Threshold, 0)

        def All(self):
            return self.getToken(XplorMRParser.All, 0)

        def Reset(self):
            return self.getToken(XplorMRParser.Reset, 0)

        def Save(self):
            return self.getToken(XplorMRParser.Save, 0)

        def Fmed(self):
            return self.getToken(XplorMRParser.Fmed, 0)

        def ErrOn(self):
            return self.getToken(XplorMRParser.ErrOn, 0)

        def ErrOff(self):
            return self.getToken(XplorMRParser.ErrOff, 0)

        def Fon(self):
            return self.getToken(XplorMRParser.Fon, 0)

        def Foff(self):
            return self.getToken(XplorMRParser.Foff, 0)

        def Son(self):
            return self.getToken(XplorMRParser.Son, 0)

        def Soff(self):
            return self.getToken(XplorMRParser.Soff, 0)

        def Frun(self):
            return self.getToken(XplorMRParser.Frun, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_pcs_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPcs_statement" ):
                listener.enterPcs_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPcs_statement" ):
                listener.exitPcs_statement(self)




    def pcs_statement(self):

        localctx = XplorMRParser.Pcs_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 158, self.RULE_pcs_statement)
        self._la = 0 # Token type
        try:
            self.state = 1898
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [XplorMRParser.Assign]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1849
                self.pcs_assign()
                pass
            elif token in [XplorMRParser.For]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1850
                self.pcs_assign_loop()
                pass
            elif token in [XplorMRParser.Classification]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1851
                self.match(XplorMRParser.Classification)
                self.state = 1853
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 1852
                    self.match(XplorMRParser.Equ_op)


                self.state = 1855
                self.match(XplorMRParser.Simple_name)
                pass
            elif token in [XplorMRParser.Tolerance]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1856
                self.match(XplorMRParser.Tolerance)
                self.state = 1857
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.Coefficients]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1858
                self.match(XplorMRParser.Coefficients)
                self.state = 1859
                self.number_s()
                self.state = 1860
                self.number_s()
                pass
            elif token in [XplorMRParser.ForceConstant]:
                self.enterOuterAlt(localctx, 6)
                self.state = 1862
                self.match(XplorMRParser.ForceConstant)
                self.state = 1864
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 1863
                    self.match(XplorMRParser.Equ_op)


                self.state = 1866
                self.number_s()
                pass
            elif token in [XplorMRParser.Nrestraints]:
                self.enterOuterAlt(localctx, 7)
                self.state = 1867
                self.match(XplorMRParser.Nrestraints)
                self.state = 1869
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 1868
                    self.match(XplorMRParser.Equ_op)


                self.state = 1871
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.Print]:
                self.enterOuterAlt(localctx, 8)
                self.state = 1872
                self.match(XplorMRParser.Print)
                self.state = 1873
                self.match(XplorMRParser.Threshold)
                self.state = 1874
                self.number_s()
                self.state = 1881
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [XplorMRParser.All]:
                    self.state = 1875
                    self.match(XplorMRParser.All)
                    pass
                elif token in [XplorMRParser.Classification]:
                    self.state = 1876
                    self.match(XplorMRParser.Classification)
                    self.state = 1878
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==XplorMRParser.Equ_op:
                        self.state = 1877
                        self.match(XplorMRParser.Equ_op)


                    self.state = 1880
                    self.match(XplorMRParser.Simple_name)
                    pass
                else:
                    raise NoViableAltException(self)

                pass
            elif token in [XplorMRParser.Reset]:
                self.enterOuterAlt(localctx, 9)
                self.state = 1883
                self.match(XplorMRParser.Reset)
                pass
            elif token in [XplorMRParser.Save]:
                self.enterOuterAlt(localctx, 10)
                self.state = 1884
                self.match(XplorMRParser.Save)
                self.state = 1885
                self.match(XplorMRParser.Simple_name)
                pass
            elif token in [XplorMRParser.Fmed]:
                self.enterOuterAlt(localctx, 11)
                self.state = 1886
                self.match(XplorMRParser.Fmed)
                self.state = 1887
                self.number_s()
                self.state = 1888
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.ErrOn]:
                self.enterOuterAlt(localctx, 12)
                self.state = 1890
                self.match(XplorMRParser.ErrOn)
                pass
            elif token in [XplorMRParser.ErrOff]:
                self.enterOuterAlt(localctx, 13)
                self.state = 1891
                self.match(XplorMRParser.ErrOff)
                pass
            elif token in [XplorMRParser.Fon]:
                self.enterOuterAlt(localctx, 14)
                self.state = 1892
                self.match(XplorMRParser.Fon)
                pass
            elif token in [XplorMRParser.Foff]:
                self.enterOuterAlt(localctx, 15)
                self.state = 1893
                self.match(XplorMRParser.Foff)
                pass
            elif token in [XplorMRParser.Son]:
                self.enterOuterAlt(localctx, 16)
                self.state = 1894
                self.match(XplorMRParser.Son)
                pass
            elif token in [XplorMRParser.Soff]:
                self.enterOuterAlt(localctx, 17)
                self.state = 1895
                self.match(XplorMRParser.Soff)
                pass
            elif token in [XplorMRParser.Frun]:
                self.enterOuterAlt(localctx, 18)
                self.state = 1896
                self.match(XplorMRParser.Frun)
                self.state = 1897
                self.match(XplorMRParser.Integer)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pcs_assignContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Assign(self):
            return self.getToken(XplorMRParser.Assign, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.SelectionContext,i)


        def number(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.NumberContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.NumberContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_pcs_assign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPcs_assign" ):
                listener.enterPcs_assign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPcs_assign" ):
                listener.exitPcs_assign(self)




    def pcs_assign(self):

        localctx = XplorMRParser.Pcs_assignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 160, self.RULE_pcs_assign)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1900
            self.match(XplorMRParser.Assign)
            self.state = 1901
            self.selection()
            self.state = 1902
            self.selection()
            self.state = 1903
            self.selection()
            self.state = 1904
            self.selection()
            self.state = 1905
            self.selection()
            self.state = 1906
            self.number()
            self.state = 1908
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,209,self._ctx)
            if la_ == 1:
                self.state = 1907
                self.number()


            self.state = 1911
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 188)) & ~0x3f) == 0 and ((1 << (_la - 188)) & ((1 << (XplorMRParser.Integer - 188)) | (1 << (XplorMRParser.Real - 188)) | (1 << (XplorMRParser.Symbol_name - 188)))) != 0):
                self.state = 1910
                self.number()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Prdc_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def prdc_assign(self):
            return self.getTypedRuleContext(XplorMRParser.Prdc_assignContext,0)


        def Classification(self):
            return self.getToken(XplorMRParser.Classification, 0)

        def Simple_name(self):
            return self.getToken(XplorMRParser.Simple_name, 0)

        def Equ_op(self):
            return self.getToken(XplorMRParser.Equ_op, 0)

        def Tolerance(self):
            return self.getToken(XplorMRParser.Tolerance, 0)

        def Integer(self):
            return self.getToken(XplorMRParser.Integer, 0)

        def Coefficients(self):
            return self.getToken(XplorMRParser.Coefficients, 0)

        def number_s(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Number_sContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Number_sContext,i)


        def ForceConstant(self):
            return self.getToken(XplorMRParser.ForceConstant, 0)

        def Nrestraints(self):
            return self.getToken(XplorMRParser.Nrestraints, 0)

        def ErrOn(self):
            return self.getToken(XplorMRParser.ErrOn, 0)

        def ErrOff(self):
            return self.getToken(XplorMRParser.ErrOff, 0)

        def Fmed(self):
            return self.getToken(XplorMRParser.Fmed, 0)

        def Fon(self):
            return self.getToken(XplorMRParser.Fon, 0)

        def Foff(self):
            return self.getToken(XplorMRParser.Foff, 0)

        def Frun(self):
            return self.getToken(XplorMRParser.Frun, 0)

        def Print(self):
            return self.getToken(XplorMRParser.Print, 0)

        def Threshold(self):
            return self.getToken(XplorMRParser.Threshold, 0)

        def Reset(self):
            return self.getToken(XplorMRParser.Reset, 0)

        def Save(self):
            return self.getToken(XplorMRParser.Save, 0)

        def Son(self):
            return self.getToken(XplorMRParser.Son, 0)

        def Soff(self):
            return self.getToken(XplorMRParser.Soff, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_prdc_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrdc_statement" ):
                listener.enterPrdc_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrdc_statement" ):
                listener.exitPrdc_statement(self)




    def prdc_statement(self):

        localctx = XplorMRParser.Prdc_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 162, self.RULE_prdc_statement)
        self._la = 0 # Token type
        try:
            self.state = 1948
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [XplorMRParser.Assign]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1913
                self.prdc_assign()
                pass
            elif token in [XplorMRParser.Classification]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1914
                self.match(XplorMRParser.Classification)
                self.state = 1916
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 1915
                    self.match(XplorMRParser.Equ_op)


                self.state = 1918
                self.match(XplorMRParser.Simple_name)
                pass
            elif token in [XplorMRParser.Tolerance]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1919
                self.match(XplorMRParser.Tolerance)
                self.state = 1920
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.Coefficients]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1921
                self.match(XplorMRParser.Coefficients)
                self.state = 1922
                self.number_s()
                self.state = 1923
                self.number_s()
                pass
            elif token in [XplorMRParser.ForceConstant]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1925
                self.match(XplorMRParser.ForceConstant)
                self.state = 1927
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 1926
                    self.match(XplorMRParser.Equ_op)


                self.state = 1929
                self.number_s()
                pass
            elif token in [XplorMRParser.Nrestraints]:
                self.enterOuterAlt(localctx, 6)
                self.state = 1930
                self.match(XplorMRParser.Nrestraints)
                self.state = 1932
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 1931
                    self.match(XplorMRParser.Equ_op)


                self.state = 1934
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.ErrOn]:
                self.enterOuterAlt(localctx, 7)
                self.state = 1935
                self.match(XplorMRParser.ErrOn)
                pass
            elif token in [XplorMRParser.ErrOff]:
                self.enterOuterAlt(localctx, 8)
                self.state = 1936
                self.match(XplorMRParser.ErrOff)
                pass
            elif token in [XplorMRParser.Fmed]:
                self.enterOuterAlt(localctx, 9)
                self.state = 1937
                self.match(XplorMRParser.Fmed)
                pass
            elif token in [XplorMRParser.Fon]:
                self.enterOuterAlt(localctx, 10)
                self.state = 1938
                self.match(XplorMRParser.Fon)
                pass
            elif token in [XplorMRParser.Foff]:
                self.enterOuterAlt(localctx, 11)
                self.state = 1939
                self.match(XplorMRParser.Foff)
                pass
            elif token in [XplorMRParser.Frun]:
                self.enterOuterAlt(localctx, 12)
                self.state = 1940
                self.match(XplorMRParser.Frun)
                pass
            elif token in [XplorMRParser.Print]:
                self.enterOuterAlt(localctx, 13)
                self.state = 1941
                self.match(XplorMRParser.Print)
                self.state = 1942
                self.match(XplorMRParser.Threshold)
                pass
            elif token in [XplorMRParser.Reset]:
                self.enterOuterAlt(localctx, 14)
                self.state = 1943
                self.match(XplorMRParser.Reset)
                pass
            elif token in [XplorMRParser.Save]:
                self.enterOuterAlt(localctx, 15)
                self.state = 1944
                self.match(XplorMRParser.Save)
                self.state = 1945
                self.match(XplorMRParser.Simple_name)
                pass
            elif token in [XplorMRParser.Son]:
                self.enterOuterAlt(localctx, 16)
                self.state = 1946
                self.match(XplorMRParser.Son)
                pass
            elif token in [XplorMRParser.Soff]:
                self.enterOuterAlt(localctx, 17)
                self.state = 1947
                self.match(XplorMRParser.Soff)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Prdc_assignContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Assign(self):
            return self.getToken(XplorMRParser.Assign, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.SelectionContext,i)


        def number(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.NumberContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.NumberContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_prdc_assign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrdc_assign" ):
                listener.enterPrdc_assign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrdc_assign" ):
                listener.exitPrdc_assign(self)




    def prdc_assign(self):

        localctx = XplorMRParser.Prdc_assignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 164, self.RULE_prdc_assign)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1950
            self.match(XplorMRParser.Assign)
            self.state = 1951
            self.selection()
            self.state = 1952
            self.selection()
            self.state = 1953
            self.selection()
            self.state = 1954
            self.selection()
            self.state = 1955
            self.selection()
            self.state = 1956
            self.selection()
            self.state = 1957
            self.number()
            self.state = 1959
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 188)) & ~0x3f) == 0 and ((1 << (_la - 188)) & ((1 << (XplorMRParser.Integer - 188)) | (1 << (XplorMRParser.Real - 188)) | (1 << (XplorMRParser.Symbol_name - 188)))) != 0):
                self.state = 1958
                self.number()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Porientation_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def porientation_assign(self):
            return self.getTypedRuleContext(XplorMRParser.Porientation_assignContext,0)


        def Classification(self):
            return self.getToken(XplorMRParser.Classification, 0)

        def Simple_name(self):
            return self.getToken(XplorMRParser.Simple_name, 0)

        def Equ_op(self):
            return self.getToken(XplorMRParser.Equ_op, 0)

        def ForceConstant(self):
            return self.getToken(XplorMRParser.ForceConstant, 0)

        def number_s(self):
            return self.getTypedRuleContext(XplorMRParser.Number_sContext,0)


        def Nrestraints(self):
            return self.getToken(XplorMRParser.Nrestraints, 0)

        def Integer(self):
            return self.getToken(XplorMRParser.Integer, 0)

        def Print(self):
            return self.getToken(XplorMRParser.Print, 0)

        def Threshold(self):
            return self.getToken(XplorMRParser.Threshold, 0)

        def Reset(self):
            return self.getToken(XplorMRParser.Reset, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_porientation_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPorientation_statement" ):
                listener.enterPorientation_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPorientation_statement" ):
                listener.exitPorientation_statement(self)




    def porientation_statement(self):

        localctx = XplorMRParser.Porientation_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 166, self.RULE_porientation_statement)
        self._la = 0 # Token type
        try:
            self.state = 1981
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [XplorMRParser.Assign]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1961
                self.porientation_assign()
                pass
            elif token in [XplorMRParser.Classification]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1962
                self.match(XplorMRParser.Classification)
                self.state = 1964
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 1963
                    self.match(XplorMRParser.Equ_op)


                self.state = 1966
                self.match(XplorMRParser.Simple_name)
                pass
            elif token in [XplorMRParser.ForceConstant]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1967
                self.match(XplorMRParser.ForceConstant)
                self.state = 1969
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 1968
                    self.match(XplorMRParser.Equ_op)


                self.state = 1971
                self.number_s()
                pass
            elif token in [XplorMRParser.Nrestraints]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1972
                self.match(XplorMRParser.Nrestraints)
                self.state = 1974
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 1973
                    self.match(XplorMRParser.Equ_op)


                self.state = 1976
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.Print]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1977
                self.match(XplorMRParser.Print)
                self.state = 1978
                self.match(XplorMRParser.Threshold)
                self.state = 1979
                self.number_s()
                pass
            elif token in [XplorMRParser.Reset]:
                self.enterOuterAlt(localctx, 6)
                self.state = 1980
                self.match(XplorMRParser.Reset)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Porientation_assignContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Assign(self):
            return self.getToken(XplorMRParser.Assign, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.SelectionContext,i)


        def number(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.NumberContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.NumberContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_porientation_assign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPorientation_assign" ):
                listener.enterPorientation_assign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPorientation_assign" ):
                listener.exitPorientation_assign(self)




    def porientation_assign(self):

        localctx = XplorMRParser.Porientation_assignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 168, self.RULE_porientation_assign)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1983
            self.match(XplorMRParser.Assign)
            self.state = 1984
            self.selection()
            self.state = 1985
            self.selection()
            self.state = 1986
            self.number()
            self.state = 1987
            self.number()
            self.state = 1988
            self.number()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pccr_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def pccr_assign(self):
            return self.getTypedRuleContext(XplorMRParser.Pccr_assignContext,0)


        def Classification(self):
            return self.getToken(XplorMRParser.Classification, 0)

        def Simple_name(self):
            return self.getToken(XplorMRParser.Simple_name, 0)

        def Equ_op(self):
            return self.getToken(XplorMRParser.Equ_op, 0)

        def Weip(self):
            return self.getToken(XplorMRParser.Weip, 0)

        def Integer(self):
            return self.getToken(XplorMRParser.Integer, 0)

        def Coefficients(self):
            return self.getToken(XplorMRParser.Coefficients, 0)

        def number_s(self):
            return self.getTypedRuleContext(XplorMRParser.Number_sContext,0)


        def ForceConstant(self):
            return self.getToken(XplorMRParser.ForceConstant, 0)

        def Nrestraints(self):
            return self.getToken(XplorMRParser.Nrestraints, 0)

        def Print(self):
            return self.getToken(XplorMRParser.Print, 0)

        def Threshold(self):
            return self.getToken(XplorMRParser.Threshold, 0)

        def Reset(self):
            return self.getToken(XplorMRParser.Reset, 0)

        def Frun(self):
            return self.getToken(XplorMRParser.Frun, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_pccr_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPccr_statement" ):
                listener.enterPccr_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPccr_statement" ):
                listener.exitPccr_statement(self)




    def pccr_statement(self):

        localctx = XplorMRParser.Pccr_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 170, self.RULE_pccr_statement)
        self._la = 0 # Token type
        try:
            self.state = 2016
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [XplorMRParser.Assign]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1990
                self.pccr_assign()
                pass
            elif token in [XplorMRParser.Classification]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1991
                self.match(XplorMRParser.Classification)
                self.state = 1993
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 1992
                    self.match(XplorMRParser.Equ_op)


                self.state = 1995
                self.match(XplorMRParser.Simple_name)
                pass
            elif token in [XplorMRParser.Weip]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1996
                self.match(XplorMRParser.Weip)
                self.state = 1997
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.Coefficients]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1998
                self.match(XplorMRParser.Coefficients)
                self.state = 1999
                self.number_s()
                pass
            elif token in [XplorMRParser.ForceConstant]:
                self.enterOuterAlt(localctx, 5)
                self.state = 2000
                self.match(XplorMRParser.ForceConstant)
                self.state = 2002
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 2001
                    self.match(XplorMRParser.Equ_op)


                self.state = 2004
                self.number_s()
                pass
            elif token in [XplorMRParser.Nrestraints]:
                self.enterOuterAlt(localctx, 6)
                self.state = 2005
                self.match(XplorMRParser.Nrestraints)
                self.state = 2007
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 2006
                    self.match(XplorMRParser.Equ_op)


                self.state = 2009
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.Print]:
                self.enterOuterAlt(localctx, 7)
                self.state = 2010
                self.match(XplorMRParser.Print)
                self.state = 2011
                self.match(XplorMRParser.Threshold)
                self.state = 2012
                self.number_s()
                pass
            elif token in [XplorMRParser.Reset]:
                self.enterOuterAlt(localctx, 8)
                self.state = 2013
                self.match(XplorMRParser.Reset)
                pass
            elif token in [XplorMRParser.Frun]:
                self.enterOuterAlt(localctx, 9)
                self.state = 2014
                self.match(XplorMRParser.Frun)
                self.state = 2015
                self.match(XplorMRParser.Integer)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pccr_assignContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Assign(self):
            return self.getToken(XplorMRParser.Assign, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.SelectionContext,i)


        def number(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.NumberContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.NumberContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_pccr_assign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPccr_assign" ):
                listener.enterPccr_assign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPccr_assign" ):
                listener.exitPccr_assign(self)




    def pccr_assign(self):

        localctx = XplorMRParser.Pccr_assignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 172, self.RULE_pccr_assign)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2018
            self.match(XplorMRParser.Assign)
            self.state = 2019
            self.selection()
            self.state = 2020
            self.selection()
            self.state = 2021
            self.selection()
            self.state = 2022
            self.number()
            self.state = 2024
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 188)) & ~0x3f) == 0 and ((1 << (_la - 188)) & ((1 << (XplorMRParser.Integer - 188)) | (1 << (XplorMRParser.Real - 188)) | (1 << (XplorMRParser.Symbol_name - 188)))) != 0):
                self.state = 2023
                self.number()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Hbond_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def hbond_assign(self):
            return self.getTypedRuleContext(XplorMRParser.Hbond_assignContext,0)


        def hbond_assign_loop(self):
            return self.getTypedRuleContext(XplorMRParser.Hbond_assign_loopContext,0)


        def Classification(self):
            return self.getToken(XplorMRParser.Classification, 0)

        def Simple_name(self):
            return self.getToken(XplorMRParser.Simple_name, 0)

        def Equ_op(self):
            return self.getToken(XplorMRParser.Equ_op, 0)

        def ForceConstant(self):
            return self.getToken(XplorMRParser.ForceConstant, 0)

        def number_s(self):
            return self.getTypedRuleContext(XplorMRParser.Number_sContext,0)


        def Nrestraints(self):
            return self.getToken(XplorMRParser.Nrestraints, 0)

        def Integer(self):
            return self.getToken(XplorMRParser.Integer, 0)

        def Print(self):
            return self.getToken(XplorMRParser.Print, 0)

        def Threshold(self):
            return self.getToken(XplorMRParser.Threshold, 0)

        def Reset(self):
            return self.getToken(XplorMRParser.Reset, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_hbond_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHbond_statement" ):
                listener.enterHbond_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHbond_statement" ):
                listener.exitHbond_statement(self)




    def hbond_statement(self):

        localctx = XplorMRParser.Hbond_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 174, self.RULE_hbond_statement)
        self._la = 0 # Token type
        try:
            self.state = 2047
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [XplorMRParser.Assign]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2026
                self.hbond_assign()
                pass
            elif token in [XplorMRParser.For]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2027
                self.hbond_assign_loop()
                pass
            elif token in [XplorMRParser.Classification]:
                self.enterOuterAlt(localctx, 3)
                self.state = 2028
                self.match(XplorMRParser.Classification)
                self.state = 2030
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 2029
                    self.match(XplorMRParser.Equ_op)


                self.state = 2032
                self.match(XplorMRParser.Simple_name)
                pass
            elif token in [XplorMRParser.ForceConstant]:
                self.enterOuterAlt(localctx, 4)
                self.state = 2033
                self.match(XplorMRParser.ForceConstant)
                self.state = 2035
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 2034
                    self.match(XplorMRParser.Equ_op)


                self.state = 2037
                self.number_s()
                pass
            elif token in [XplorMRParser.Nrestraints]:
                self.enterOuterAlt(localctx, 5)
                self.state = 2038
                self.match(XplorMRParser.Nrestraints)
                self.state = 2040
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 2039
                    self.match(XplorMRParser.Equ_op)


                self.state = 2042
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.Print]:
                self.enterOuterAlt(localctx, 6)
                self.state = 2043
                self.match(XplorMRParser.Print)
                self.state = 2044
                self.match(XplorMRParser.Threshold)
                self.state = 2045
                self.number_s()
                pass
            elif token in [XplorMRParser.Reset]:
                self.enterOuterAlt(localctx, 7)
                self.state = 2046
                self.match(XplorMRParser.Reset)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Hbond_assignContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Assign(self):
            return self.getToken(XplorMRParser.Assign, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.SelectionContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_hbond_assign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHbond_assign" ):
                listener.enterHbond_assign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHbond_assign" ):
                listener.exitHbond_assign(self)




    def hbond_assign(self):

        localctx = XplorMRParser.Hbond_assignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 176, self.RULE_hbond_assign)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2049
            self.match(XplorMRParser.Assign)
            self.state = 2050
            self.selection()
            self.state = 2051
            self.selection()
            self.state = 2052
            self.selection()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Hbond_db_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def hbond_db_assign(self):
            return self.getTypedRuleContext(XplorMRParser.Hbond_db_assignContext,0)


        def hbond_db_assign_loop(self):
            return self.getTypedRuleContext(XplorMRParser.Hbond_db_assign_loopContext,0)


        def Kdir(self):
            return self.getToken(XplorMRParser.Kdir, 0)

        def number_s(self):
            return self.getTypedRuleContext(XplorMRParser.Number_sContext,0)


        def Equ_op(self):
            return self.getToken(XplorMRParser.Equ_op, 0)

        def Klin(self):
            return self.getToken(XplorMRParser.Klin, 0)

        def Nseg(self):
            return self.getToken(XplorMRParser.Nseg, 0)

        def Integer(self):
            return self.getToken(XplorMRParser.Integer, 0)

        def Nmin(self):
            return self.getToken(XplorMRParser.Nmin, 0)

        def Nmax(self):
            return self.getToken(XplorMRParser.Nmax, 0)

        def Segm(self):
            return self.getToken(XplorMRParser.Segm, 0)

        def Simple_name(self):
            return self.getToken(XplorMRParser.Simple_name, 0)

        def Ohcut(self):
            return self.getToken(XplorMRParser.Ohcut, 0)

        def Coh1cut(self):
            return self.getToken(XplorMRParser.Coh1cut, 0)

        def Coh2cut(self):
            return self.getToken(XplorMRParser.Coh2cut, 0)

        def Ohncut(self):
            return self.getToken(XplorMRParser.Ohncut, 0)

        def Updfrq(self):
            return self.getToken(XplorMRParser.Updfrq, 0)

        def Prnfrq(self):
            return self.getToken(XplorMRParser.Prnfrq, 0)

        def Freemode(self):
            return self.getToken(XplorMRParser.Freemode, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_hbond_db_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHbond_db_statement" ):
                listener.enterHbond_db_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHbond_db_statement" ):
                listener.exitHbond_db_statement(self)




    def hbond_db_statement(self):

        localctx = XplorMRParser.Hbond_db_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 178, self.RULE_hbond_db_statement)
        self._la = 0 # Token type
        try:
            self.state = 2121
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [XplorMRParser.Assign]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2054
                self.hbond_db_assign()
                pass
            elif token in [XplorMRParser.For]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2055
                self.hbond_db_assign_loop()
                pass
            elif token in [XplorMRParser.Kdir]:
                self.enterOuterAlt(localctx, 3)
                self.state = 2056
                self.match(XplorMRParser.Kdir)
                self.state = 2058
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 2057
                    self.match(XplorMRParser.Equ_op)


                self.state = 2060
                self.number_s()
                pass
            elif token in [XplorMRParser.Klin]:
                self.enterOuterAlt(localctx, 4)
                self.state = 2061
                self.match(XplorMRParser.Klin)
                self.state = 2063
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 2062
                    self.match(XplorMRParser.Equ_op)


                self.state = 2065
                self.number_s()
                pass
            elif token in [XplorMRParser.Nseg]:
                self.enterOuterAlt(localctx, 5)
                self.state = 2066
                self.match(XplorMRParser.Nseg)
                self.state = 2068
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 2067
                    self.match(XplorMRParser.Equ_op)


                self.state = 2070
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.Nmin]:
                self.enterOuterAlt(localctx, 6)
                self.state = 2071
                self.match(XplorMRParser.Nmin)
                self.state = 2073
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 2072
                    self.match(XplorMRParser.Equ_op)


                self.state = 2075
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.Nmax]:
                self.enterOuterAlt(localctx, 7)
                self.state = 2076
                self.match(XplorMRParser.Nmax)
                self.state = 2078
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 2077
                    self.match(XplorMRParser.Equ_op)


                self.state = 2080
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.Segm]:
                self.enterOuterAlt(localctx, 8)
                self.state = 2081
                self.match(XplorMRParser.Segm)
                self.state = 2083
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 2082
                    self.match(XplorMRParser.Equ_op)


                self.state = 2085
                self.match(XplorMRParser.Simple_name)
                pass
            elif token in [XplorMRParser.Ohcut]:
                self.enterOuterAlt(localctx, 9)
                self.state = 2086
                self.match(XplorMRParser.Ohcut)
                self.state = 2088
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 2087
                    self.match(XplorMRParser.Equ_op)


                self.state = 2090
                self.number_s()
                pass
            elif token in [XplorMRParser.Coh1cut]:
                self.enterOuterAlt(localctx, 10)
                self.state = 2091
                self.match(XplorMRParser.Coh1cut)
                self.state = 2093
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 2092
                    self.match(XplorMRParser.Equ_op)


                self.state = 2095
                self.number_s()
                pass
            elif token in [XplorMRParser.Coh2cut]:
                self.enterOuterAlt(localctx, 11)
                self.state = 2096
                self.match(XplorMRParser.Coh2cut)
                self.state = 2098
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 2097
                    self.match(XplorMRParser.Equ_op)


                self.state = 2100
                self.number_s()
                pass
            elif token in [XplorMRParser.Ohncut]:
                self.enterOuterAlt(localctx, 12)
                self.state = 2101
                self.match(XplorMRParser.Ohncut)
                self.state = 2103
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 2102
                    self.match(XplorMRParser.Equ_op)


                self.state = 2105
                self.number_s()
                pass
            elif token in [XplorMRParser.Updfrq]:
                self.enterOuterAlt(localctx, 13)
                self.state = 2106
                self.match(XplorMRParser.Updfrq)
                self.state = 2108
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 2107
                    self.match(XplorMRParser.Equ_op)


                self.state = 2110
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.Prnfrq]:
                self.enterOuterAlt(localctx, 14)
                self.state = 2111
                self.match(XplorMRParser.Prnfrq)
                self.state = 2113
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 2112
                    self.match(XplorMRParser.Equ_op)


                self.state = 2115
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.Freemode]:
                self.enterOuterAlt(localctx, 15)
                self.state = 2116
                self.match(XplorMRParser.Freemode)
                self.state = 2118
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 2117
                    self.match(XplorMRParser.Equ_op)


                self.state = 2120
                self.match(XplorMRParser.Integer)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Hbond_db_assignContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Assign(self):
            return self.getToken(XplorMRParser.Assign, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.SelectionContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_hbond_db_assign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHbond_db_assign" ):
                listener.enterHbond_db_assign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHbond_db_assign" ):
                listener.exitHbond_db_assign(self)




    def hbond_db_assign(self):

        localctx = XplorMRParser.Hbond_db_assignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 180, self.RULE_hbond_db_assign)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2123
            self.match(XplorMRParser.Assign)
            self.state = 2124
            self.selection()
            self.state = 2125
            self.selection()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SelectionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def L_paren(self):
            return self.getToken(XplorMRParser.L_paren, 0)

        def selection_expression(self):
            return self.getTypedRuleContext(XplorMRParser.Selection_expressionContext,0)


        def R_paren(self):
            return self.getToken(XplorMRParser.R_paren, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_selection

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSelection" ):
                listener.enterSelection(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSelection" ):
                listener.exitSelection(self)




    def selection(self):

        localctx = XplorMRParser.SelectionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 182, self.RULE_selection)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2127
            self.match(XplorMRParser.L_paren)
            self.state = 2128
            self.selection_expression()
            self.state = 2129
            self.match(XplorMRParser.R_paren)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Selection_expressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def term(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.TermContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.TermContext,i)


        def Or_op(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Or_op)
            else:
                return self.getToken(XplorMRParser.Or_op, i)

        def getRuleIndex(self):
            return XplorMRParser.RULE_selection_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSelection_expression" ):
                listener.enterSelection_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSelection_expression" ):
                listener.exitSelection_expression(self)




    def selection_expression(self):

        localctx = XplorMRParser.Selection_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 184, self.RULE_selection_expression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2131
            self.term()
            self.state = 2136
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==XplorMRParser.Or_op:
                self.state = 2132
                self.match(XplorMRParser.Or_op)
                self.state = 2133
                self.term()
                self.state = 2138
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TermContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def factor(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.FactorContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.FactorContext,i)


        def And_op(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.And_op)
            else:
                return self.getToken(XplorMRParser.And_op, i)

        def getRuleIndex(self):
            return XplorMRParser.RULE_term

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTerm" ):
                listener.enterTerm(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTerm" ):
                listener.exitTerm(self)




    def term(self):

        localctx = XplorMRParser.TermContext(self, self._ctx, self.state)
        self.enterRule(localctx, 186, self.RULE_term)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2139
            self.factor(0)
            self.state = 2144
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==XplorMRParser.And_op:
                self.state = 2140
                self.match(XplorMRParser.And_op)
                self.state = 2141
                self.factor(0)
                self.state = 2146
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FactorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def L_paren(self):
            return self.getToken(XplorMRParser.L_paren, 0)

        def selection_expression(self):
            return self.getTypedRuleContext(XplorMRParser.Selection_expressionContext,0)


        def R_paren(self):
            return self.getToken(XplorMRParser.R_paren, 0)

        def All(self):
            return self.getToken(XplorMRParser.All, 0)

        def Atom(self):
            return self.getToken(XplorMRParser.Atom, 0)

        def Simple_names(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Simple_names)
            else:
                return self.getToken(XplorMRParser.Simple_names, i)

        def Simple_name(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Simple_name)
            else:
                return self.getToken(XplorMRParser.Simple_name, i)

        def Integers(self):
            return self.getToken(XplorMRParser.Integers, 0)

        def Integer(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Integer)
            else:
                return self.getToken(XplorMRParser.Integer, i)

        def Attribute(self):
            return self.getToken(XplorMRParser.Attribute, 0)

        def Attr_properties(self):
            return self.getToken(XplorMRParser.Attr_properties, 0)

        def Comparison_ops(self):
            return self.getToken(XplorMRParser.Comparison_ops, 0)

        def number_f(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Number_fContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Number_fContext,i)


        def Abs(self):
            return self.getToken(XplorMRParser.Abs, 0)

        def BondedTo(self):
            return self.getToken(XplorMRParser.BondedTo, 0)

        def factor(self):
            return self.getTypedRuleContext(XplorMRParser.FactorContext,0)


        def ByGroup(self):
            return self.getToken(XplorMRParser.ByGroup, 0)

        def ByRes(self):
            return self.getToken(XplorMRParser.ByRes, 0)

        def Chemical(self):
            return self.getToken(XplorMRParser.Chemical, 0)

        def Symbol_name(self):
            return self.getToken(XplorMRParser.Symbol_name, 0)

        def Colon(self):
            return self.getToken(XplorMRParser.Colon, 0)

        def Hydrogen(self):
            return self.getToken(XplorMRParser.Hydrogen, 0)

        def Id(self):
            return self.getToken(XplorMRParser.Id, 0)

        def Known(self):
            return self.getToken(XplorMRParser.Known, 0)

        def Name(self):
            return self.getToken(XplorMRParser.Name, 0)

        def Double_quote_string(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Double_quote_string)
            else:
                return self.getToken(XplorMRParser.Double_quote_string, i)

        def Not_op(self):
            return self.getToken(XplorMRParser.Not_op, 0)

        def Point(self):
            return self.getToken(XplorMRParser.Point, 0)

        def Cut(self):
            return self.getToken(XplorMRParser.Cut, 0)

        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Comma)
            else:
                return self.getToken(XplorMRParser.Comma, i)

        def Tail(self):
            return self.getToken(XplorMRParser.Tail, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.SelectionContext,i)


        def Equ_op(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Equ_op)
            else:
                return self.getToken(XplorMRParser.Equ_op, i)

        def Head(self):
            return self.getToken(XplorMRParser.Head, 0)

        def Previous(self):
            return self.getToken(XplorMRParser.Previous, 0)

        def Pseudo(self):
            return self.getToken(XplorMRParser.Pseudo, 0)

        def Residue(self):
            return self.getToken(XplorMRParser.Residue, 0)

        def Resname(self):
            return self.getToken(XplorMRParser.Resname, 0)

        def SegIdentifier(self):
            return self.getToken(XplorMRParser.SegIdentifier, 0)

        def Store1(self):
            return self.getToken(XplorMRParser.Store1, 0)

        def Store2(self):
            return self.getToken(XplorMRParser.Store2, 0)

        def Store3(self):
            return self.getToken(XplorMRParser.Store3, 0)

        def Store4(self):
            return self.getToken(XplorMRParser.Store4, 0)

        def Store5(self):
            return self.getToken(XplorMRParser.Store5, 0)

        def Store6(self):
            return self.getToken(XplorMRParser.Store6, 0)

        def Store7(self):
            return self.getToken(XplorMRParser.Store7, 0)

        def Store8(self):
            return self.getToken(XplorMRParser.Store8, 0)

        def Store9(self):
            return self.getToken(XplorMRParser.Store9, 0)

        def Tag(self):
            return self.getToken(XplorMRParser.Tag, 0)

        def Donor(self):
            return self.getToken(XplorMRParser.Donor, 0)

        def Acceptor(self):
            return self.getToken(XplorMRParser.Acceptor, 0)

        def Around(self):
            return self.getToken(XplorMRParser.Around, 0)

        def Saround(self):
            return self.getToken(XplorMRParser.Saround, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_factor

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFactor" ):
                listener.enterFactor(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFactor" ):
                listener.exitFactor(self)



    def factor(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = XplorMRParser.FactorContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 188
        self.enterRecursionRule(localctx, 188, self.RULE_factor, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2286
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,264,self._ctx)
            if la_ == 1:
                self.state = 2148
                self.match(XplorMRParser.L_paren)
                self.state = 2149
                self.selection_expression()
                self.state = 2150
                self.match(XplorMRParser.R_paren)
                pass

            elif la_ == 2:
                self.state = 2152
                self.match(XplorMRParser.All)
                pass

            elif la_ == 3:
                self.state = 2153
                self.match(XplorMRParser.Atom)
                self.state = 2154
                _la = self._input.LA(1)
                if not(_la==XplorMRParser.Simple_name or _la==XplorMRParser.Simple_names):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 2155
                _la = self._input.LA(1)
                if not(_la==XplorMRParser.Integer or _la==XplorMRParser.Integers):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 2156
                _la = self._input.LA(1)
                if not(_la==XplorMRParser.Simple_name or _la==XplorMRParser.Simple_names):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass

            elif la_ == 4:
                self.state = 2157
                self.match(XplorMRParser.Attribute)
                self.state = 2159
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Abs:
                    self.state = 2158
                    self.match(XplorMRParser.Abs)


                self.state = 2161
                self.match(XplorMRParser.Attr_properties)
                self.state = 2162
                self.match(XplorMRParser.Comparison_ops)
                self.state = 2163
                self.number_f()
                pass

            elif la_ == 5:
                self.state = 2164
                self.match(XplorMRParser.BondedTo)
                self.state = 2165
                self.factor(29)
                pass

            elif la_ == 6:
                self.state = 2166
                self.match(XplorMRParser.ByGroup)
                self.state = 2167
                self.factor(28)
                pass

            elif la_ == 7:
                self.state = 2168
                self.match(XplorMRParser.ByRes)
                self.state = 2169
                self.factor(27)
                pass

            elif la_ == 8:
                self.state = 2170
                self.match(XplorMRParser.Chemical)
                self.state = 2178
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [XplorMRParser.Simple_names]:
                    self.state = 2171
                    self.match(XplorMRParser.Simple_names)
                    pass
                elif token in [XplorMRParser.Simple_name]:
                    self.state = 2172
                    self.match(XplorMRParser.Simple_name)
                    self.state = 2175
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,246,self._ctx)
                    if la_ == 1:
                        self.state = 2173
                        self.match(XplorMRParser.Colon)
                        self.state = 2174
                        self.match(XplorMRParser.Simple_name)


                    pass
                elif token in [XplorMRParser.Symbol_name]:
                    self.state = 2177
                    self.match(XplorMRParser.Symbol_name)
                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 9:
                self.state = 2180
                self.match(XplorMRParser.Hydrogen)
                pass

            elif la_ == 10:
                self.state = 2181
                self.match(XplorMRParser.Id)
                self.state = 2182
                self.match(XplorMRParser.Integer)
                pass

            elif la_ == 11:
                self.state = 2183
                self.match(XplorMRParser.Known)
                pass

            elif la_ == 12:
                self.state = 2184
                self.match(XplorMRParser.Name)
                self.state = 2197
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [XplorMRParser.Simple_names]:
                    self.state = 2185
                    self.match(XplorMRParser.Simple_names)
                    pass
                elif token in [XplorMRParser.Simple_name]:
                    self.state = 2186
                    self.match(XplorMRParser.Simple_name)
                    self.state = 2189
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,248,self._ctx)
                    if la_ == 1:
                        self.state = 2187
                        self.match(XplorMRParser.Colon)
                        self.state = 2188
                        self.match(XplorMRParser.Simple_name)


                    pass
                elif token in [XplorMRParser.Double_quote_string]:
                    self.state = 2191
                    self.match(XplorMRParser.Double_quote_string)
                    self.state = 2194
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,249,self._ctx)
                    if la_ == 1:
                        self.state = 2192
                        self.match(XplorMRParser.Colon)
                        self.state = 2193
                        self.match(XplorMRParser.Double_quote_string)


                    pass
                elif token in [XplorMRParser.Symbol_name]:
                    self.state = 2196
                    self.match(XplorMRParser.Symbol_name)
                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 13:
                self.state = 2199
                self.match(XplorMRParser.Not_op)
                self.state = 2200
                self.factor(21)
                pass

            elif la_ == 14:
                self.state = 2201
                self.match(XplorMRParser.Point)
                self.state = 2202
                self.match(XplorMRParser.L_paren)
                self.state = 2203
                self.number_f()
                self.state = 2205
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Comma:
                    self.state = 2204
                    self.match(XplorMRParser.Comma)


                self.state = 2207
                self.number_f()
                self.state = 2209
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Comma:
                    self.state = 2208
                    self.match(XplorMRParser.Comma)


                self.state = 2211
                self.number_f()
                self.state = 2212
                self.match(XplorMRParser.R_paren)
                self.state = 2213
                self.match(XplorMRParser.Cut)
                self.state = 2214
                self.number_f()
                pass

            elif la_ == 15:
                self.state = 2216
                self.match(XplorMRParser.Point)
                self.state = 2217
                self.match(XplorMRParser.L_paren)
                self.state = 2218
                self.match(XplorMRParser.Tail)
                self.state = 2220
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 2219
                    self.match(XplorMRParser.Equ_op)


                self.state = 2222
                self.selection()
                self.state = 2224
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Comma:
                    self.state = 2223
                    self.match(XplorMRParser.Comma)


                self.state = 2231
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Head:
                    self.state = 2226
                    self.match(XplorMRParser.Head)
                    self.state = 2228
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==XplorMRParser.Equ_op:
                        self.state = 2227
                        self.match(XplorMRParser.Equ_op)


                    self.state = 2230
                    self.selection()


                self.state = 2233
                self.match(XplorMRParser.R_paren)
                self.state = 2234
                self.match(XplorMRParser.Cut)
                self.state = 2235
                self.number_f()
                pass

            elif la_ == 16:
                self.state = 2237
                self.match(XplorMRParser.Previous)
                pass

            elif la_ == 17:
                self.state = 2238
                self.match(XplorMRParser.Pseudo)
                pass

            elif la_ == 18:
                self.state = 2239
                self.match(XplorMRParser.Residue)
                self.state = 2247
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [XplorMRParser.Integers]:
                    self.state = 2240
                    self.match(XplorMRParser.Integers)
                    pass
                elif token in [XplorMRParser.Integer]:
                    self.state = 2241
                    self.match(XplorMRParser.Integer)
                    self.state = 2244
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,257,self._ctx)
                    if la_ == 1:
                        self.state = 2242
                        self.match(XplorMRParser.Colon)
                        self.state = 2243
                        self.match(XplorMRParser.Integer)


                    pass
                elif token in [XplorMRParser.Symbol_name]:
                    self.state = 2246
                    self.match(XplorMRParser.Symbol_name)
                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 19:
                self.state = 2249
                self.match(XplorMRParser.Resname)
                self.state = 2257
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [XplorMRParser.Simple_names]:
                    self.state = 2250
                    self.match(XplorMRParser.Simple_names)
                    pass
                elif token in [XplorMRParser.Simple_name]:
                    self.state = 2251
                    self.match(XplorMRParser.Simple_name)
                    self.state = 2254
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,259,self._ctx)
                    if la_ == 1:
                        self.state = 2252
                        self.match(XplorMRParser.Colon)
                        self.state = 2253
                        self.match(XplorMRParser.Simple_name)


                    pass
                elif token in [XplorMRParser.Symbol_name]:
                    self.state = 2256
                    self.match(XplorMRParser.Symbol_name)
                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 20:
                self.state = 2259
                self.match(XplorMRParser.SegIdentifier)
                self.state = 2272
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [XplorMRParser.Simple_names]:
                    self.state = 2260
                    self.match(XplorMRParser.Simple_names)
                    pass
                elif token in [XplorMRParser.Simple_name]:
                    self.state = 2261
                    self.match(XplorMRParser.Simple_name)
                    self.state = 2264
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,261,self._ctx)
                    if la_ == 1:
                        self.state = 2262
                        self.match(XplorMRParser.Colon)
                        self.state = 2263
                        self.match(XplorMRParser.Simple_name)


                    pass
                elif token in [XplorMRParser.Double_quote_string]:
                    self.state = 2266
                    self.match(XplorMRParser.Double_quote_string)
                    self.state = 2269
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,262,self._ctx)
                    if la_ == 1:
                        self.state = 2267
                        self.match(XplorMRParser.Colon)
                        self.state = 2268
                        self.match(XplorMRParser.Double_quote_string)


                    pass
                elif token in [XplorMRParser.Symbol_name]:
                    self.state = 2271
                    self.match(XplorMRParser.Symbol_name)
                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 21:
                self.state = 2274
                self.match(XplorMRParser.Store1)
                pass

            elif la_ == 22:
                self.state = 2275
                self.match(XplorMRParser.Store2)
                pass

            elif la_ == 23:
                self.state = 2276
                self.match(XplorMRParser.Store3)
                pass

            elif la_ == 24:
                self.state = 2277
                self.match(XplorMRParser.Store4)
                pass

            elif la_ == 25:
                self.state = 2278
                self.match(XplorMRParser.Store5)
                pass

            elif la_ == 26:
                self.state = 2279
                self.match(XplorMRParser.Store6)
                pass

            elif la_ == 27:
                self.state = 2280
                self.match(XplorMRParser.Store7)
                pass

            elif la_ == 28:
                self.state = 2281
                self.match(XplorMRParser.Store8)
                pass

            elif la_ == 29:
                self.state = 2282
                self.match(XplorMRParser.Store9)
                pass

            elif la_ == 30:
                self.state = 2283
                self.match(XplorMRParser.Tag)
                pass

            elif la_ == 31:
                self.state = 2284
                self.match(XplorMRParser.Donor)
                pass

            elif la_ == 32:
                self.state = 2285
                self.match(XplorMRParser.Acceptor)
                pass


            self._ctx.stop = self._input.LT(-1)
            self.state = 2296
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,266,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 2294
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,265,self._ctx)
                    if la_ == 1:
                        localctx = XplorMRParser.FactorContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_factor)
                        self.state = 2288
                        if not self.precpred(self._ctx, 32):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 32)")
                        self.state = 2289
                        self.match(XplorMRParser.Around)
                        self.state = 2290
                        self.number_f()
                        pass

                    elif la_ == 2:
                        localctx = XplorMRParser.FactorContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_factor)
                        self.state = 2291
                        if not self.precpred(self._ctx, 14):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 14)")
                        self.state = 2292
                        self.match(XplorMRParser.Saround)
                        self.state = 2293
                        self.number_f()
                        pass

             
                self.state = 2298
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,266,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class NumberContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Real(self):
            return self.getToken(XplorMRParser.Real, 0)

        def Integer(self):
            return self.getToken(XplorMRParser.Integer, 0)

        def Symbol_name(self):
            return self.getToken(XplorMRParser.Symbol_name, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_number

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNumber" ):
                listener.enterNumber(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNumber" ):
                listener.exitNumber(self)




    def number(self):

        localctx = XplorMRParser.NumberContext(self, self._ctx, self.state)
        self.enterRule(localctx, 190, self.RULE_number)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2299
            _la = self._input.LA(1)
            if not(((((_la - 188)) & ~0x3f) == 0 and ((1 << (_la - 188)) & ((1 << (XplorMRParser.Integer - 188)) | (1 << (XplorMRParser.Real - 188)) | (1 << (XplorMRParser.Symbol_name - 188)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Number_fContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Real(self):
            return self.getToken(XplorMRParser.Real, 0)

        def Integer(self):
            return self.getToken(XplorMRParser.Integer, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_number_f

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNumber_f" ):
                listener.enterNumber_f(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNumber_f" ):
                listener.exitNumber_f(self)




    def number_f(self):

        localctx = XplorMRParser.Number_fContext(self, self._ctx, self.state)
        self.enterRule(localctx, 192, self.RULE_number_f)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2301
            _la = self._input.LA(1)
            if not(_la==XplorMRParser.Integer or _la==XplorMRParser.Real):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Number_sContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Real(self):
            return self.getToken(XplorMRParser.Real, 0)

        def Integer(self):
            return self.getToken(XplorMRParser.Integer, 0)

        def Symbol_name(self):
            return self.getToken(XplorMRParser.Symbol_name, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_number_s

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNumber_s" ):
                listener.enterNumber_s(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNumber_s" ):
                listener.exitNumber_s(self)




    def number_s(self):

        localctx = XplorMRParser.Number_sContext(self, self._ctx, self.state)
        self.enterRule(localctx, 194, self.RULE_number_s)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2303
            _la = self._input.LA(1)
            if not(((((_la - 188)) & ~0x3f) == 0 and ((1 << (_la - 188)) & ((1 << (XplorMRParser.Integer - 188)) | (1 << (XplorMRParser.Real - 188)) | (1 << (XplorMRParser.Symbol_name - 188)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Number_aContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Real(self):
            return self.getToken(XplorMRParser.Real, 0)

        def Integer(self):
            return self.getToken(XplorMRParser.Integer, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_number_a

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNumber_a" ):
                listener.enterNumber_a(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNumber_a" ):
                listener.exitNumber_a(self)




    def number_a(self):

        localctx = XplorMRParser.Number_aContext(self, self._ctx, self.state)
        self.enterRule(localctx, 196, self.RULE_number_a)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2305
            _la = self._input.LA(1)
            if not(_la==XplorMRParser.Integer or _la==XplorMRParser.Real):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Flag_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Flags(self):
            return self.getToken(XplorMRParser.Flags, 0)

        def Include(self):
            return self.getToken(XplorMRParser.Include, 0)

        def End_FL(self):
            return self.getToken(XplorMRParser.End_FL, 0)

        def Exclude(self):
            return self.getToken(XplorMRParser.Exclude, 0)

        def Class_name(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Class_name)
            else:
                return self.getToken(XplorMRParser.Class_name, i)

        def Any_class(self):
            return self.getToken(XplorMRParser.Any_class, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_flag_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFlag_statement" ):
                listener.enterFlag_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFlag_statement" ):
                listener.exitFlag_statement(self)




    def flag_statement(self):

        localctx = XplorMRParser.Flag_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 198, self.RULE_flag_statement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2307
            self.match(XplorMRParser.Flags)
            self.state = 2318
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==XplorMRParser.Exclude:
                self.state = 2308
                self.match(XplorMRParser.Exclude)
                self.state = 2316
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [XplorMRParser.Include, XplorMRParser.Class_name]:
                    self.state = 2312
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==XplorMRParser.Class_name:
                        self.state = 2309
                        self.match(XplorMRParser.Class_name)
                        self.state = 2314
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    pass
                elif token in [XplorMRParser.Any_class]:
                    self.state = 2315
                    self.match(XplorMRParser.Any_class)
                    pass
                else:
                    raise NoViableAltException(self)



            self.state = 2320
            self.match(XplorMRParser.Include)
            self.state = 2324
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==XplorMRParser.Class_name:
                self.state = 2321
                self.match(XplorMRParser.Class_name)
                self.state = 2326
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2327
            self.match(XplorMRParser.End_FL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Vector_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Vector(self):
            return self.getToken(XplorMRParser.Vector, 0)

        def vector_mode(self):
            return self.getTypedRuleContext(XplorMRParser.Vector_modeContext,0)


        def selection(self):
            return self.getTypedRuleContext(XplorMRParser.SelectionContext,0)


        def getRuleIndex(self):
            return XplorMRParser.RULE_vector_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVector_statement" ):
                listener.enterVector_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVector_statement" ):
                listener.exitVector_statement(self)




    def vector_statement(self):

        localctx = XplorMRParser.Vector_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 200, self.RULE_vector_statement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2329
            self.match(XplorMRParser.Vector)
            self.state = 2330
            self.vector_mode()
            self.state = 2331
            self.selection()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Vector_modeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def vector_expression(self):
            return self.getTypedRuleContext(XplorMRParser.Vector_expressionContext,0)


        def R_paren_VE(self):
            return self.getToken(XplorMRParser.R_paren_VE, 0)

        def Do_Lp(self):
            return self.getToken(XplorMRParser.Do_Lp, 0)

        def Identify_Lp(self):
            return self.getToken(XplorMRParser.Identify_Lp, 0)

        def Show(self):
            return self.getToken(XplorMRParser.Show, 0)

        def vector_show_property(self):
            return self.getTypedRuleContext(XplorMRParser.Vector_show_propertyContext,0)


        def getRuleIndex(self):
            return XplorMRParser.RULE_vector_mode

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVector_mode" ):
                listener.enterVector_mode(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVector_mode" ):
                listener.exitVector_mode(self)




    def vector_mode(self):

        localctx = XplorMRParser.Vector_modeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 202, self.RULE_vector_mode)
        self._la = 0 # Token type
        try:
            self.state = 2339
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [XplorMRParser.Do_Lp, XplorMRParser.Identify_Lp]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2333
                _la = self._input.LA(1)
                if not(_la==XplorMRParser.Do_Lp or _la==XplorMRParser.Identify_Lp):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 2334
                self.vector_expression()
                self.state = 2335
                self.match(XplorMRParser.R_paren_VE)
                pass
            elif token in [XplorMRParser.Show]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2337
                self.match(XplorMRParser.Show)
                self.state = 2338
                self.vector_show_property()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Vector_expressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Atom_properties_VE(self):
            return self.getToken(XplorMRParser.Atom_properties_VE, 0)

        def Equ_op_VE(self):
            return self.getToken(XplorMRParser.Equ_op_VE, 0)

        def vector_operation(self):
            return self.getTypedRuleContext(XplorMRParser.Vector_operationContext,0)


        def getRuleIndex(self):
            return XplorMRParser.RULE_vector_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVector_expression" ):
                listener.enterVector_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVector_expression" ):
                listener.exitVector_expression(self)




    def vector_expression(self):

        localctx = XplorMRParser.Vector_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 204, self.RULE_vector_expression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2341
            self.match(XplorMRParser.Atom_properties_VE)
            self.state = 2344
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==XplorMRParser.Equ_op_VE:
                self.state = 2342
                self.match(XplorMRParser.Equ_op_VE)
                self.state = 2343
                self.vector_operation()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Vector_operationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def vflc(self):
            return self.getTypedRuleContext(XplorMRParser.VflcContext,0)


        def vector_operation(self):
            return self.getTypedRuleContext(XplorMRParser.Vector_operationContext,0)


        def Add_op_VE(self):
            return self.getToken(XplorMRParser.Add_op_VE, 0)

        def Sub_op_VE(self):
            return self.getToken(XplorMRParser.Sub_op_VE, 0)

        def Mul_op_VE(self):
            return self.getToken(XplorMRParser.Mul_op_VE, 0)

        def Div_op_VE(self):
            return self.getToken(XplorMRParser.Div_op_VE, 0)

        def Exp_op_VE(self):
            return self.getToken(XplorMRParser.Exp_op_VE, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_vector_operation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVector_operation" ):
                listener.enterVector_operation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVector_operation" ):
                listener.exitVector_operation(self)




    def vector_operation(self):

        localctx = XplorMRParser.Vector_operationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 206, self.RULE_vector_operation)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2346
            self.vflc()
            self.state = 2349
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 240)) & ~0x3f) == 0 and ((1 << (_la - 240)) & ((1 << (XplorMRParser.Add_op_VE - 240)) | (1 << (XplorMRParser.Sub_op_VE - 240)) | (1 << (XplorMRParser.Mul_op_VE - 240)) | (1 << (XplorMRParser.Div_op_VE - 240)) | (1 << (XplorMRParser.Exp_op_VE - 240)))) != 0):
                self.state = 2347
                _la = self._input.LA(1)
                if not(((((_la - 240)) & ~0x3f) == 0 and ((1 << (_la - 240)) & ((1 << (XplorMRParser.Add_op_VE - 240)) | (1 << (XplorMRParser.Sub_op_VE - 240)) | (1 << (XplorMRParser.Mul_op_VE - 240)) | (1 << (XplorMRParser.Div_op_VE - 240)) | (1 << (XplorMRParser.Exp_op_VE - 240)))) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 2348
                self.vector_operation()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VflcContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Atom_properties_VE(self):
            return self.getToken(XplorMRParser.Atom_properties_VE, 0)

        def vector_func_call(self):
            return self.getTypedRuleContext(XplorMRParser.Vector_func_callContext,0)


        def Integer_VE(self):
            return self.getToken(XplorMRParser.Integer_VE, 0)

        def Real_VE(self):
            return self.getToken(XplorMRParser.Real_VE, 0)

        def Simple_name_VE(self):
            return self.getToken(XplorMRParser.Simple_name_VE, 0)

        def Symbol_name_VE(self):
            return self.getToken(XplorMRParser.Symbol_name_VE, 0)

        def Double_quote_string_VE(self):
            return self.getToken(XplorMRParser.Double_quote_string_VE, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_vflc

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVflc" ):
                listener.enterVflc(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVflc" ):
                listener.exitVflc(self)




    def vflc(self):

        localctx = XplorMRParser.VflcContext(self, self._ctx, self.state)
        self.enterRule(localctx, 208, self.RULE_vflc)
        try:
            self.state = 2358
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [XplorMRParser.Atom_properties_VE]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2351
                self.match(XplorMRParser.Atom_properties_VE)
                pass
            elif token in [XplorMRParser.Abs_VE, XplorMRParser.Acos_VE, XplorMRParser.Cos_VE, XplorMRParser.Decode_VE, XplorMRParser.Encode_VE, XplorMRParser.Exp_VE, XplorMRParser.Gauss_VE, XplorMRParser.Heavy_VE, XplorMRParser.Int_VE, XplorMRParser.Log10_VE, XplorMRParser.Log_VE, XplorMRParser.Max_VE, XplorMRParser.Maxw_VE, XplorMRParser.Min_VE, XplorMRParser.Mod_VE, XplorMRParser.Norm_VE, XplorMRParser.Random_VE, XplorMRParser.Sign_VE, XplorMRParser.Sin_VE, XplorMRParser.Sqrt_VE, XplorMRParser.Tan_VE]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2352
                self.vector_func_call()
                pass
            elif token in [XplorMRParser.Integer_VE]:
                self.enterOuterAlt(localctx, 3)
                self.state = 2353
                self.match(XplorMRParser.Integer_VE)
                pass
            elif token in [XplorMRParser.Real_VE]:
                self.enterOuterAlt(localctx, 4)
                self.state = 2354
                self.match(XplorMRParser.Real_VE)
                pass
            elif token in [XplorMRParser.Simple_name_VE]:
                self.enterOuterAlt(localctx, 5)
                self.state = 2355
                self.match(XplorMRParser.Simple_name_VE)
                pass
            elif token in [XplorMRParser.Symbol_name_VE]:
                self.enterOuterAlt(localctx, 6)
                self.state = 2356
                self.match(XplorMRParser.Symbol_name_VE)
                pass
            elif token in [XplorMRParser.Double_quote_string_VE]:
                self.enterOuterAlt(localctx, 7)
                self.state = 2357
                self.match(XplorMRParser.Double_quote_string_VE)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Vector_func_callContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Abs_VE(self):
            return self.getToken(XplorMRParser.Abs_VE, 0)

        def L_paren_VF(self):
            return self.getToken(XplorMRParser.L_paren_VF, 0)

        def vflc(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.VflcContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.VflcContext,i)


        def R_paren_VE(self):
            return self.getToken(XplorMRParser.R_paren_VE, 0)

        def Acos_VE(self):
            return self.getToken(XplorMRParser.Acos_VE, 0)

        def Cos_VE(self):
            return self.getToken(XplorMRParser.Cos_VE, 0)

        def Decode_VE(self):
            return self.getToken(XplorMRParser.Decode_VE, 0)

        def Encode_VE(self):
            return self.getToken(XplorMRParser.Encode_VE, 0)

        def Exp_VE(self):
            return self.getToken(XplorMRParser.Exp_VE, 0)

        def Gauss_VE(self):
            return self.getToken(XplorMRParser.Gauss_VE, 0)

        def Heavy_VE(self):
            return self.getToken(XplorMRParser.Heavy_VE, 0)

        def Int_VE(self):
            return self.getToken(XplorMRParser.Int_VE, 0)

        def Log10_VE(self):
            return self.getToken(XplorMRParser.Log10_VE, 0)

        def Log_VE(self):
            return self.getToken(XplorMRParser.Log_VE, 0)

        def Max_VE(self):
            return self.getToken(XplorMRParser.Max_VE, 0)

        def Comma_VE(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Comma_VE)
            else:
                return self.getToken(XplorMRParser.Comma_VE, i)

        def Maxw_VE(self):
            return self.getToken(XplorMRParser.Maxw_VE, 0)

        def Min_VE(self):
            return self.getToken(XplorMRParser.Min_VE, 0)

        def Mod_VE(self):
            return self.getToken(XplorMRParser.Mod_VE, 0)

        def Norm_VE(self):
            return self.getToken(XplorMRParser.Norm_VE, 0)

        def Random_VE(self):
            return self.getToken(XplorMRParser.Random_VE, 0)

        def Sign_VE(self):
            return self.getToken(XplorMRParser.Sign_VE, 0)

        def Sin_VE(self):
            return self.getToken(XplorMRParser.Sin_VE, 0)

        def Sqrt_VE(self):
            return self.getToken(XplorMRParser.Sqrt_VE, 0)

        def Tan_VE(self):
            return self.getToken(XplorMRParser.Tan_VE, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_vector_func_call

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVector_func_call" ):
                listener.enterVector_func_call(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVector_func_call" ):
                listener.exitVector_func_call(self)




    def vector_func_call(self):

        localctx = XplorMRParser.Vector_func_callContext(self, self._ctx, self.state)
        self.enterRule(localctx, 210, self.RULE_vector_func_call)
        self._la = 0 # Token type
        try:
            self.state = 2479
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [XplorMRParser.Abs_VE]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2360
                self.match(XplorMRParser.Abs_VE)
                self.state = 2361
                self.match(XplorMRParser.L_paren_VF)
                self.state = 2362
                self.vflc()
                self.state = 2363
                self.match(XplorMRParser.R_paren_VE)
                pass
            elif token in [XplorMRParser.Acos_VE]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2365
                self.match(XplorMRParser.Acos_VE)
                self.state = 2366
                self.match(XplorMRParser.L_paren_VF)
                self.state = 2367
                self.vflc()
                self.state = 2368
                self.match(XplorMRParser.R_paren_VE)
                pass
            elif token in [XplorMRParser.Cos_VE]:
                self.enterOuterAlt(localctx, 3)
                self.state = 2370
                self.match(XplorMRParser.Cos_VE)
                self.state = 2371
                self.match(XplorMRParser.L_paren_VF)
                self.state = 2372
                self.vflc()
                self.state = 2373
                self.match(XplorMRParser.R_paren_VE)
                pass
            elif token in [XplorMRParser.Decode_VE]:
                self.enterOuterAlt(localctx, 4)
                self.state = 2375
                self.match(XplorMRParser.Decode_VE)
                self.state = 2376
                self.match(XplorMRParser.L_paren_VF)
                self.state = 2377
                self.vflc()
                self.state = 2378
                self.match(XplorMRParser.R_paren_VE)
                pass
            elif token in [XplorMRParser.Encode_VE]:
                self.enterOuterAlt(localctx, 5)
                self.state = 2380
                self.match(XplorMRParser.Encode_VE)
                self.state = 2381
                self.match(XplorMRParser.L_paren_VF)
                self.state = 2382
                self.vflc()
                self.state = 2383
                self.match(XplorMRParser.R_paren_VE)
                pass
            elif token in [XplorMRParser.Exp_VE]:
                self.enterOuterAlt(localctx, 6)
                self.state = 2385
                self.match(XplorMRParser.Exp_VE)
                self.state = 2386
                self.match(XplorMRParser.L_paren_VF)
                self.state = 2387
                self.vflc()
                self.state = 2388
                self.match(XplorMRParser.R_paren_VE)
                pass
            elif token in [XplorMRParser.Gauss_VE]:
                self.enterOuterAlt(localctx, 7)
                self.state = 2390
                self.match(XplorMRParser.Gauss_VE)
                self.state = 2391
                self.match(XplorMRParser.L_paren_VF)
                self.state = 2392
                self.vflc()
                self.state = 2393
                self.match(XplorMRParser.R_paren_VE)
                pass
            elif token in [XplorMRParser.Heavy_VE]:
                self.enterOuterAlt(localctx, 8)
                self.state = 2395
                self.match(XplorMRParser.Heavy_VE)
                self.state = 2396
                self.match(XplorMRParser.L_paren_VF)
                self.state = 2397
                self.vflc()
                self.state = 2398
                self.match(XplorMRParser.R_paren_VE)
                pass
            elif token in [XplorMRParser.Int_VE]:
                self.enterOuterAlt(localctx, 9)
                self.state = 2400
                self.match(XplorMRParser.Int_VE)
                self.state = 2401
                self.match(XplorMRParser.L_paren_VF)
                self.state = 2402
                self.vflc()
                self.state = 2403
                self.match(XplorMRParser.R_paren_VE)
                pass
            elif token in [XplorMRParser.Log10_VE]:
                self.enterOuterAlt(localctx, 10)
                self.state = 2405
                self.match(XplorMRParser.Log10_VE)
                self.state = 2406
                self.match(XplorMRParser.L_paren_VF)
                self.state = 2407
                self.vflc()
                self.state = 2408
                self.match(XplorMRParser.R_paren_VE)
                pass
            elif token in [XplorMRParser.Log_VE]:
                self.enterOuterAlt(localctx, 11)
                self.state = 2410
                self.match(XplorMRParser.Log_VE)
                self.state = 2411
                self.match(XplorMRParser.L_paren_VF)
                self.state = 2412
                self.vflc()
                self.state = 2413
                self.match(XplorMRParser.R_paren_VE)
                pass
            elif token in [XplorMRParser.Max_VE]:
                self.enterOuterAlt(localctx, 12)
                self.state = 2415
                self.match(XplorMRParser.Max_VE)
                self.state = 2416
                self.match(XplorMRParser.L_paren_VF)
                self.state = 2417
                self.vflc()
                self.state = 2422
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==XplorMRParser.Comma_VE:
                    self.state = 2418
                    self.match(XplorMRParser.Comma_VE)
                    self.state = 2419
                    self.vflc()
                    self.state = 2424
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 2425
                self.match(XplorMRParser.R_paren_VE)
                pass
            elif token in [XplorMRParser.Maxw_VE]:
                self.enterOuterAlt(localctx, 13)
                self.state = 2427
                self.match(XplorMRParser.Maxw_VE)
                self.state = 2428
                self.match(XplorMRParser.L_paren_VF)
                self.state = 2429
                self.vflc()
                self.state = 2430
                self.match(XplorMRParser.R_paren_VE)
                pass
            elif token in [XplorMRParser.Min_VE]:
                self.enterOuterAlt(localctx, 14)
                self.state = 2432
                self.match(XplorMRParser.Min_VE)
                self.state = 2433
                self.match(XplorMRParser.L_paren_VF)
                self.state = 2434
                self.vflc()
                self.state = 2439
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==XplorMRParser.Comma_VE:
                    self.state = 2435
                    self.match(XplorMRParser.Comma_VE)
                    self.state = 2436
                    self.vflc()
                    self.state = 2441
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 2442
                self.match(XplorMRParser.R_paren_VE)
                pass
            elif token in [XplorMRParser.Mod_VE]:
                self.enterOuterAlt(localctx, 15)
                self.state = 2444
                self.match(XplorMRParser.Mod_VE)
                self.state = 2445
                self.match(XplorMRParser.L_paren_VF)
                self.state = 2446
                self.vflc()
                self.state = 2447
                self.match(XplorMRParser.Comma_VE)
                self.state = 2448
                self.vflc()
                self.state = 2449
                self.match(XplorMRParser.R_paren_VE)
                pass
            elif token in [XplorMRParser.Norm_VE]:
                self.enterOuterAlt(localctx, 16)
                self.state = 2451
                self.match(XplorMRParser.Norm_VE)
                self.state = 2452
                self.match(XplorMRParser.L_paren_VF)
                self.state = 2453
                self.vflc()
                self.state = 2454
                self.match(XplorMRParser.R_paren_VE)
                pass
            elif token in [XplorMRParser.Random_VE]:
                self.enterOuterAlt(localctx, 17)
                self.state = 2456
                self.match(XplorMRParser.Random_VE)
                self.state = 2457
                self.match(XplorMRParser.L_paren_VF)
                self.state = 2458
                self.match(XplorMRParser.R_paren_VE)
                pass
            elif token in [XplorMRParser.Sign_VE]:
                self.enterOuterAlt(localctx, 18)
                self.state = 2459
                self.match(XplorMRParser.Sign_VE)
                self.state = 2460
                self.match(XplorMRParser.L_paren_VF)
                self.state = 2461
                self.vflc()
                self.state = 2462
                self.match(XplorMRParser.R_paren_VE)
                pass
            elif token in [XplorMRParser.Sin_VE]:
                self.enterOuterAlt(localctx, 19)
                self.state = 2464
                self.match(XplorMRParser.Sin_VE)
                self.state = 2465
                self.match(XplorMRParser.L_paren_VF)
                self.state = 2466
                self.vflc()
                self.state = 2467
                self.match(XplorMRParser.R_paren_VE)
                pass
            elif token in [XplorMRParser.Sqrt_VE]:
                self.enterOuterAlt(localctx, 20)
                self.state = 2469
                self.match(XplorMRParser.Sqrt_VE)
                self.state = 2470
                self.match(XplorMRParser.L_paren_VF)
                self.state = 2471
                self.vflc()
                self.state = 2472
                self.match(XplorMRParser.R_paren_VE)
                pass
            elif token in [XplorMRParser.Tan_VE]:
                self.enterOuterAlt(localctx, 21)
                self.state = 2474
                self.match(XplorMRParser.Tan_VE)
                self.state = 2475
                self.match(XplorMRParser.L_paren_VF)
                self.state = 2476
                self.vflc()
                self.state = 2477
                self.match(XplorMRParser.R_paren_VE)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Vector_show_propertyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def L_paren_VS(self):
            return self.getToken(XplorMRParser.L_paren_VS, 0)

        def Atom_properties_VS(self):
            return self.getToken(XplorMRParser.Atom_properties_VS, 0)

        def R_paren_VS(self):
            return self.getToken(XplorMRParser.R_paren_VS, 0)

        def Average_VS(self):
            return self.getToken(XplorMRParser.Average_VS, 0)

        def Element_VS(self):
            return self.getToken(XplorMRParser.Element_VS, 0)

        def Max_VS(self):
            return self.getToken(XplorMRParser.Max_VS, 0)

        def Min_VS(self):
            return self.getToken(XplorMRParser.Min_VS, 0)

        def Norm_VS(self):
            return self.getToken(XplorMRParser.Norm_VS, 0)

        def Rms_VS(self):
            return self.getToken(XplorMRParser.Rms_VS, 0)

        def Sum_VS(self):
            return self.getToken(XplorMRParser.Sum_VS, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_vector_show_property

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVector_show_property" ):
                listener.enterVector_show_property(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVector_show_property" ):
                listener.exitVector_show_property(self)




    def vector_show_property(self):

        localctx = XplorMRParser.Vector_show_propertyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 212, self.RULE_vector_show_property)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2481
            _la = self._input.LA(1)
            if not(((((_la - 279)) & ~0x3f) == 0 and ((1 << (_la - 279)) & ((1 << (XplorMRParser.Average_VS - 279)) | (1 << (XplorMRParser.Element_VS - 279)) | (1 << (XplorMRParser.Max_VS - 279)) | (1 << (XplorMRParser.Min_VS - 279)) | (1 << (XplorMRParser.Norm_VS - 279)) | (1 << (XplorMRParser.Rms_VS - 279)) | (1 << (XplorMRParser.Sum_VS - 279)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 2482
            self.match(XplorMRParser.L_paren_VS)
            self.state = 2483
            self.match(XplorMRParser.Atom_properties_VS)
            self.state = 2484
            self.match(XplorMRParser.R_paren_VS)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Evaluate_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Evaluate_Lp(self):
            return self.getToken(XplorMRParser.Evaluate_Lp, 0)

        def Symbol_name_VE(self):
            return self.getToken(XplorMRParser.Symbol_name_VE, 0)

        def Equ_op_VE(self):
            return self.getToken(XplorMRParser.Equ_op_VE, 0)

        def evaluate_operation(self):
            return self.getTypedRuleContext(XplorMRParser.Evaluate_operationContext,0)


        def R_paren_VE(self):
            return self.getToken(XplorMRParser.R_paren_VE, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_evaluate_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEvaluate_statement" ):
                listener.enterEvaluate_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEvaluate_statement" ):
                listener.exitEvaluate_statement(self)




    def evaluate_statement(self):

        localctx = XplorMRParser.Evaluate_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 214, self.RULE_evaluate_statement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2486
            self.match(XplorMRParser.Evaluate_Lp)
            self.state = 2487
            self.match(XplorMRParser.Symbol_name_VE)
            self.state = 2488
            self.match(XplorMRParser.Equ_op_VE)
            self.state = 2489
            self.evaluate_operation()
            self.state = 2490
            self.match(XplorMRParser.R_paren_VE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Evaluate_operationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def vflc(self):
            return self.getTypedRuleContext(XplorMRParser.VflcContext,0)


        def evaluate_operation(self):
            return self.getTypedRuleContext(XplorMRParser.Evaluate_operationContext,0)


        def Add_op_VE(self):
            return self.getToken(XplorMRParser.Add_op_VE, 0)

        def Sub_op_VE(self):
            return self.getToken(XplorMRParser.Sub_op_VE, 0)

        def Mul_op_VE(self):
            return self.getToken(XplorMRParser.Mul_op_VE, 0)

        def Div_op_VE(self):
            return self.getToken(XplorMRParser.Div_op_VE, 0)

        def Exp_op_VE(self):
            return self.getToken(XplorMRParser.Exp_op_VE, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_evaluate_operation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEvaluate_operation" ):
                listener.enterEvaluate_operation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEvaluate_operation" ):
                listener.exitEvaluate_operation(self)




    def evaluate_operation(self):

        localctx = XplorMRParser.Evaluate_operationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 216, self.RULE_evaluate_operation)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2492
            self.vflc()
            self.state = 2495
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 240)) & ~0x3f) == 0 and ((1 << (_la - 240)) & ((1 << (XplorMRParser.Add_op_VE - 240)) | (1 << (XplorMRParser.Sub_op_VE - 240)) | (1 << (XplorMRParser.Mul_op_VE - 240)) | (1 << (XplorMRParser.Div_op_VE - 240)) | (1 << (XplorMRParser.Exp_op_VE - 240)))) != 0):
                self.state = 2493
                _la = self._input.LA(1)
                if not(((((_la - 240)) & ~0x3f) == 0 and ((1 << (_la - 240)) & ((1 << (XplorMRParser.Add_op_VE - 240)) | (1 << (XplorMRParser.Sub_op_VE - 240)) | (1 << (XplorMRParser.Mul_op_VE - 240)) | (1 << (XplorMRParser.Div_op_VE - 240)) | (1 << (XplorMRParser.Exp_op_VE - 240)))) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 2494
                self.evaluate_operation()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Patch_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Patch(self):
            return self.getToken(XplorMRParser.Patch, 0)

        def Reference(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Reference)
            else:
                return self.getToken(XplorMRParser.Reference, i)

        def Equ_op(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Equ_op)
            else:
                return self.getToken(XplorMRParser.Equ_op, i)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.SelectionContext,i)


        def End(self):
            return self.getToken(XplorMRParser.End, 0)

        def Nil(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Nil)
            else:
                return self.getToken(XplorMRParser.Nil, i)

        def Integer(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Integer)
            else:
                return self.getToken(XplorMRParser.Integer, i)

        def Simple_name(self):
            return self.getToken(XplorMRParser.Simple_name, 0)

        def AngleDb(self):
            return self.getToken(XplorMRParser.AngleDb, 0)

        def HBonded(self):
            return self.getToken(XplorMRParser.HBonded, 0)

        def Dihedral(self):
            return self.getToken(XplorMRParser.Dihedral, 0)

        def Improper(self):
            return self.getToken(XplorMRParser.Improper, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_patch_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPatch_statement" ):
                listener.enterPatch_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPatch_statement" ):
                listener.exitPatch_statement(self)




    def patch_statement(self):

        localctx = XplorMRParser.Patch_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 218, self.RULE_patch_statement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2497
            self.match(XplorMRParser.Patch)
            self.state = 2499
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==XplorMRParser.Dihedral or _la==XplorMRParser.AngleDb or ((((_la - 173)) & ~0x3f) == 0 and ((1 << (_la - 173)) & ((1 << (XplorMRParser.HBonded - 173)) | (1 << (XplorMRParser.Improper - 173)) | (1 << (XplorMRParser.Simple_name - 173)))) != 0):
                self.state = 2498
                _la = self._input.LA(1)
                if not(_la==XplorMRParser.Dihedral or _la==XplorMRParser.AngleDb or ((((_la - 173)) & ~0x3f) == 0 and ((1 << (_la - 173)) & ((1 << (XplorMRParser.HBonded - 173)) | (1 << (XplorMRParser.Improper - 173)) | (1 << (XplorMRParser.Simple_name - 173)))) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 2501
            self.match(XplorMRParser.Reference)
            self.state = 2502
            self.match(XplorMRParser.Equ_op)
            self.state = 2503
            _la = self._input.LA(1)
            if not(_la==XplorMRParser.Nil or _la==XplorMRParser.Integer):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 2504
            self.match(XplorMRParser.Equ_op)
            self.state = 2505
            self.selection()
            self.state = 2511
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==XplorMRParser.Reference:
                self.state = 2506
                self.match(XplorMRParser.Reference)
                self.state = 2507
                self.match(XplorMRParser.Equ_op)
                self.state = 2508
                _la = self._input.LA(1)
                if not(_la==XplorMRParser.Nil or _la==XplorMRParser.Integer):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 2509
                self.match(XplorMRParser.Equ_op)
                self.state = 2510
                self.selection()


            self.state = 2513
            self.match(XplorMRParser.End)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Parameter_settingContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Parameter(self):
            return self.getToken(XplorMRParser.Parameter, 0)

        def End(self):
            return self.getToken(XplorMRParser.End, 0)

        def parameter_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Parameter_statementContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Parameter_statementContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_parameter_setting

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParameter_setting" ):
                listener.enterParameter_setting(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParameter_setting" ):
                listener.exitParameter_setting(self)




    def parameter_setting(self):

        localctx = XplorMRParser.Parameter_settingContext(self, self._ctx, self.state)
        self.enterRule(localctx, 220, self.RULE_parameter_setting)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2515
            self.match(XplorMRParser.Parameter)
            self.state = 2519
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==XplorMRParser.Reset or _la==XplorMRParser.Dihedral or _la==XplorMRParser.AngleDb or _la==XplorMRParser.BondedTo or ((((_la - 173)) & ~0x3f) == 0 and ((1 << (_la - 173)) & ((1 << (XplorMRParser.HBonded - 173)) | (1 << (XplorMRParser.Improper - 173)) | (1 << (XplorMRParser.NBFix - 173)) | (1 << (XplorMRParser.NonB - 173)) | (1 << (XplorMRParser.VDWOff - 173)) | (1 << (XplorMRParser.Verbose - 173)))) != 0):
                self.state = 2516
                self.parameter_statement()
                self.state = 2521
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2522
            self.match(XplorMRParser.End)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Parameter_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AngleDb(self):
            return self.getToken(XplorMRParser.AngleDb, 0)

        def Simple_name(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Simple_name)
            else:
                return self.getToken(XplorMRParser.Simple_name, i)

        def number_s(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Number_sContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Number_sContext,i)


        def UB(self):
            return self.getToken(XplorMRParser.UB, 0)

        def BondedTo(self):
            return self.getToken(XplorMRParser.BondedTo, 0)

        def Integer(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Integer)
            else:
                return self.getToken(XplorMRParser.Integer, i)

        def Dihedral(self):
            return self.getToken(XplorMRParser.Dihedral, 0)

        def Improper(self):
            return self.getToken(XplorMRParser.Improper, 0)

        def Mult(self):
            return self.getToken(XplorMRParser.Mult, 0)

        def HBonded(self):
            return self.getToken(XplorMRParser.HBonded, 0)

        def Simple_names(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Simple_names)
            else:
                return self.getToken(XplorMRParser.Simple_names, i)

        def NBFix(self):
            return self.getToken(XplorMRParser.NBFix, 0)

        def NonB(self):
            return self.getToken(XplorMRParser.NonB, 0)

        def Reset(self):
            return self.getToken(XplorMRParser.Reset, 0)

        def VDWOff(self):
            return self.getToken(XplorMRParser.VDWOff, 0)

        def Verbose(self):
            return self.getToken(XplorMRParser.Verbose, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_parameter_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParameter_statement" ):
                listener.enterParameter_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParameter_statement" ):
                listener.exitParameter_statement(self)




    def parameter_statement(self):

        localctx = XplorMRParser.Parameter_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 222, self.RULE_parameter_statement)
        self._la = 0 # Token type
        try:
            self.state = 2579
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [XplorMRParser.AngleDb]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2524
                self.match(XplorMRParser.AngleDb)
                self.state = 2525
                self.match(XplorMRParser.Simple_name)
                self.state = 2526
                self.match(XplorMRParser.Simple_name)
                self.state = 2527
                self.match(XplorMRParser.Simple_name)
                self.state = 2528
                self.number_s()
                self.state = 2529
                self.number_s()
                self.state = 2534
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.UB:
                    self.state = 2530
                    self.match(XplorMRParser.UB)
                    self.state = 2531
                    self.number_s()
                    self.state = 2532
                    self.number_s()


                pass
            elif token in [XplorMRParser.BondedTo]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2536
                self.match(XplorMRParser.BondedTo)
                self.state = 2537
                self.match(XplorMRParser.Simple_name)
                self.state = 2538
                self.match(XplorMRParser.Simple_name)
                self.state = 2539
                self.number_s()
                self.state = 2540
                self.number_s()
                pass
            elif token in [XplorMRParser.Dihedral, XplorMRParser.Improper]:
                self.enterOuterAlt(localctx, 3)
                self.state = 2542
                _la = self._input.LA(1)
                if not(_la==XplorMRParser.Dihedral or _la==XplorMRParser.Improper):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 2543
                self.match(XplorMRParser.Simple_name)
                self.state = 2544
                self.match(XplorMRParser.Simple_name)
                self.state = 2545
                self.match(XplorMRParser.Simple_name)
                self.state = 2546
                self.match(XplorMRParser.Simple_name)
                self.state = 2549
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Mult:
                    self.state = 2547
                    self.match(XplorMRParser.Mult)
                    self.state = 2548
                    self.match(XplorMRParser.Integer)


                self.state = 2551
                self.number_s()
                self.state = 2552
                self.match(XplorMRParser.Integer)
                self.state = 2553
                self.number_s()
                pass
            elif token in [XplorMRParser.HBonded]:
                self.enterOuterAlt(localctx, 4)
                self.state = 2555
                self.match(XplorMRParser.HBonded)
                self.state = 2556
                self.match(XplorMRParser.Simple_names)
                self.state = 2557
                self.match(XplorMRParser.Simple_names)
                self.state = 2558
                self.number_s()
                self.state = 2559
                self.number_s()
                pass
            elif token in [XplorMRParser.NBFix]:
                self.enterOuterAlt(localctx, 5)
                self.state = 2561
                self.match(XplorMRParser.NBFix)
                self.state = 2562
                self.match(XplorMRParser.Simple_name)
                self.state = 2563
                self.match(XplorMRParser.Simple_name)
                self.state = 2564
                self.number_s()
                self.state = 2565
                self.number_s()
                self.state = 2566
                self.number_s()
                self.state = 2567
                self.number_s()
                pass
            elif token in [XplorMRParser.NonB]:
                self.enterOuterAlt(localctx, 6)
                self.state = 2569
                self.match(XplorMRParser.NonB)
                self.state = 2570
                self.match(XplorMRParser.Simple_name)
                self.state = 2571
                self.number_s()
                self.state = 2572
                self.number_s()
                self.state = 2573
                self.number_s()
                self.state = 2574
                self.number_s()
                pass
            elif token in [XplorMRParser.Reset, XplorMRParser.VDWOff]:
                self.enterOuterAlt(localctx, 7)
                self.state = 2576
                _la = self._input.LA(1)
                if not(_la==XplorMRParser.Reset or _la==XplorMRParser.VDWOff):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 2577
                self.match(XplorMRParser.Simple_name)
                pass
            elif token in [XplorMRParser.Verbose]:
                self.enterOuterAlt(localctx, 8)
                self.state = 2578
                self.match(XplorMRParser.Verbose)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Noe_assign_loopContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def For(self):
            return self.getToken(XplorMRParser.For, 0)

        def Symbol_name_CF(self):
            return self.getToken(XplorMRParser.Symbol_name_CF, 0)

        def In_CF(self):
            return self.getToken(XplorMRParser.In_CF, 0)

        def L_paren_CF(self):
            return self.getToken(XplorMRParser.L_paren_CF, 0)

        def R_paren_CF(self):
            return self.getToken(XplorMRParser.R_paren_CF, 0)

        def Loop(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Loop)
            else:
                return self.getToken(XplorMRParser.Loop, i)

        def Simple_name_LL(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Simple_name_LL)
            else:
                return self.getToken(XplorMRParser.Simple_name_LL, i)

        def End(self):
            return self.getToken(XplorMRParser.End, 0)

        def evaluate_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Evaluate_statementContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Evaluate_statementContext,i)


        def noe_assign(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Noe_assignContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Noe_assignContext,i)


        def Integer_CF(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Integer_CF)
            else:
                return self.getToken(XplorMRParser.Integer_CF, i)

        def Real_CF(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Real_CF)
            else:
                return self.getToken(XplorMRParser.Real_CF, i)

        def Simple_name_CF(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Simple_name_CF)
            else:
                return self.getToken(XplorMRParser.Simple_name_CF, i)

        def getRuleIndex(self):
            return XplorMRParser.RULE_noe_assign_loop

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNoe_assign_loop" ):
                listener.enterNoe_assign_loop(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNoe_assign_loop" ):
                listener.exitNoe_assign_loop(self)




    def noe_assign_loop(self):

        localctx = XplorMRParser.Noe_assign_loopContext(self, self._ctx, self.state)
        self.enterRule(localctx, 224, self.RULE_noe_assign_loop)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2581
            self.match(XplorMRParser.For)
            self.state = 2582
            self.match(XplorMRParser.Symbol_name_CF)
            self.state = 2583
            self.match(XplorMRParser.In_CF)
            self.state = 2584
            self.match(XplorMRParser.L_paren_CF)
            self.state = 2603
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,288,self._ctx)
            if la_ == 1:
                self.state = 2588
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==XplorMRParser.Integer_CF:
                    self.state = 2585
                    self.match(XplorMRParser.Integer_CF)
                    self.state = 2590
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 2:
                self.state = 2594
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==XplorMRParser.Real_CF:
                    self.state = 2591
                    self.match(XplorMRParser.Real_CF)
                    self.state = 2596
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 3:
                self.state = 2600
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==XplorMRParser.Simple_name_CF:
                    self.state = 2597
                    self.match(XplorMRParser.Simple_name_CF)
                    self.state = 2602
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass


            self.state = 2605
            self.match(XplorMRParser.R_paren_CF)
            self.state = 2606
            self.match(XplorMRParser.Loop)
            self.state = 2607
            self.match(XplorMRParser.Simple_name_LL)
            self.state = 2612
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==XplorMRParser.Assign or _la==XplorMRParser.Evaluate_Lp:
                self.state = 2610
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [XplorMRParser.Evaluate_Lp]:
                    self.state = 2608
                    self.evaluate_statement()
                    pass
                elif token in [XplorMRParser.Assign]:
                    self.state = 2609
                    self.noe_assign()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 2614
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2615
            self.match(XplorMRParser.End)
            self.state = 2616
            self.match(XplorMRParser.Loop)
            self.state = 2617
            self.match(XplorMRParser.Simple_name_LL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Dihedral_assign_loopContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def For(self):
            return self.getToken(XplorMRParser.For, 0)

        def Symbol_name_CF(self):
            return self.getToken(XplorMRParser.Symbol_name_CF, 0)

        def In_CF(self):
            return self.getToken(XplorMRParser.In_CF, 0)

        def L_paren_CF(self):
            return self.getToken(XplorMRParser.L_paren_CF, 0)

        def R_paren_CF(self):
            return self.getToken(XplorMRParser.R_paren_CF, 0)

        def Loop(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Loop)
            else:
                return self.getToken(XplorMRParser.Loop, i)

        def Simple_name_LL(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Simple_name_LL)
            else:
                return self.getToken(XplorMRParser.Simple_name_LL, i)

        def End(self):
            return self.getToken(XplorMRParser.End, 0)

        def evaluate_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Evaluate_statementContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Evaluate_statementContext,i)


        def dihedral_assign(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Dihedral_assignContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Dihedral_assignContext,i)


        def Integer_CF(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Integer_CF)
            else:
                return self.getToken(XplorMRParser.Integer_CF, i)

        def Real_CF(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Real_CF)
            else:
                return self.getToken(XplorMRParser.Real_CF, i)

        def Simple_name_CF(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Simple_name_CF)
            else:
                return self.getToken(XplorMRParser.Simple_name_CF, i)

        def getRuleIndex(self):
            return XplorMRParser.RULE_dihedral_assign_loop

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDihedral_assign_loop" ):
                listener.enterDihedral_assign_loop(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDihedral_assign_loop" ):
                listener.exitDihedral_assign_loop(self)




    def dihedral_assign_loop(self):

        localctx = XplorMRParser.Dihedral_assign_loopContext(self, self._ctx, self.state)
        self.enterRule(localctx, 226, self.RULE_dihedral_assign_loop)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2619
            self.match(XplorMRParser.For)
            self.state = 2620
            self.match(XplorMRParser.Symbol_name_CF)
            self.state = 2621
            self.match(XplorMRParser.In_CF)
            self.state = 2622
            self.match(XplorMRParser.L_paren_CF)
            self.state = 2641
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,294,self._ctx)
            if la_ == 1:
                self.state = 2626
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==XplorMRParser.Integer_CF:
                    self.state = 2623
                    self.match(XplorMRParser.Integer_CF)
                    self.state = 2628
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 2:
                self.state = 2632
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==XplorMRParser.Real_CF:
                    self.state = 2629
                    self.match(XplorMRParser.Real_CF)
                    self.state = 2634
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 3:
                self.state = 2638
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==XplorMRParser.Simple_name_CF:
                    self.state = 2635
                    self.match(XplorMRParser.Simple_name_CF)
                    self.state = 2640
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass


            self.state = 2643
            self.match(XplorMRParser.R_paren_CF)
            self.state = 2644
            self.match(XplorMRParser.Loop)
            self.state = 2645
            self.match(XplorMRParser.Simple_name_LL)
            self.state = 2650
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==XplorMRParser.Assign or _la==XplorMRParser.Evaluate_Lp:
                self.state = 2648
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [XplorMRParser.Evaluate_Lp]:
                    self.state = 2646
                    self.evaluate_statement()
                    pass
                elif token in [XplorMRParser.Assign]:
                    self.state = 2647
                    self.dihedral_assign()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 2652
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2653
            self.match(XplorMRParser.End)
            self.state = 2654
            self.match(XplorMRParser.Loop)
            self.state = 2655
            self.match(XplorMRParser.Simple_name_LL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Sani_assign_loopContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def For(self):
            return self.getToken(XplorMRParser.For, 0)

        def Symbol_name_CF(self):
            return self.getToken(XplorMRParser.Symbol_name_CF, 0)

        def In_CF(self):
            return self.getToken(XplorMRParser.In_CF, 0)

        def L_paren_CF(self):
            return self.getToken(XplorMRParser.L_paren_CF, 0)

        def R_paren_CF(self):
            return self.getToken(XplorMRParser.R_paren_CF, 0)

        def Loop(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Loop)
            else:
                return self.getToken(XplorMRParser.Loop, i)

        def Simple_name_LL(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Simple_name_LL)
            else:
                return self.getToken(XplorMRParser.Simple_name_LL, i)

        def End(self):
            return self.getToken(XplorMRParser.End, 0)

        def evaluate_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Evaluate_statementContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Evaluate_statementContext,i)


        def sani_assign(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Sani_assignContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Sani_assignContext,i)


        def Integer_CF(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Integer_CF)
            else:
                return self.getToken(XplorMRParser.Integer_CF, i)

        def Real_CF(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Real_CF)
            else:
                return self.getToken(XplorMRParser.Real_CF, i)

        def Simple_name_CF(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Simple_name_CF)
            else:
                return self.getToken(XplorMRParser.Simple_name_CF, i)

        def getRuleIndex(self):
            return XplorMRParser.RULE_sani_assign_loop

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSani_assign_loop" ):
                listener.enterSani_assign_loop(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSani_assign_loop" ):
                listener.exitSani_assign_loop(self)




    def sani_assign_loop(self):

        localctx = XplorMRParser.Sani_assign_loopContext(self, self._ctx, self.state)
        self.enterRule(localctx, 228, self.RULE_sani_assign_loop)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2657
            self.match(XplorMRParser.For)
            self.state = 2658
            self.match(XplorMRParser.Symbol_name_CF)
            self.state = 2659
            self.match(XplorMRParser.In_CF)
            self.state = 2660
            self.match(XplorMRParser.L_paren_CF)
            self.state = 2679
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,300,self._ctx)
            if la_ == 1:
                self.state = 2664
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==XplorMRParser.Integer_CF:
                    self.state = 2661
                    self.match(XplorMRParser.Integer_CF)
                    self.state = 2666
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 2:
                self.state = 2670
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==XplorMRParser.Real_CF:
                    self.state = 2667
                    self.match(XplorMRParser.Real_CF)
                    self.state = 2672
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 3:
                self.state = 2676
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==XplorMRParser.Simple_name_CF:
                    self.state = 2673
                    self.match(XplorMRParser.Simple_name_CF)
                    self.state = 2678
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass


            self.state = 2681
            self.match(XplorMRParser.R_paren_CF)
            self.state = 2682
            self.match(XplorMRParser.Loop)
            self.state = 2683
            self.match(XplorMRParser.Simple_name_LL)
            self.state = 2688
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==XplorMRParser.Assign or _la==XplorMRParser.Evaluate_Lp:
                self.state = 2686
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [XplorMRParser.Evaluate_Lp]:
                    self.state = 2684
                    self.evaluate_statement()
                    pass
                elif token in [XplorMRParser.Assign]:
                    self.state = 2685
                    self.sani_assign()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 2690
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2691
            self.match(XplorMRParser.End)
            self.state = 2692
            self.match(XplorMRParser.Loop)
            self.state = 2693
            self.match(XplorMRParser.Simple_name_LL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Xadc_assign_loopContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def For(self):
            return self.getToken(XplorMRParser.For, 0)

        def Symbol_name_CF(self):
            return self.getToken(XplorMRParser.Symbol_name_CF, 0)

        def In_CF(self):
            return self.getToken(XplorMRParser.In_CF, 0)

        def L_paren_CF(self):
            return self.getToken(XplorMRParser.L_paren_CF, 0)

        def R_paren_CF(self):
            return self.getToken(XplorMRParser.R_paren_CF, 0)

        def Loop(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Loop)
            else:
                return self.getToken(XplorMRParser.Loop, i)

        def Simple_name_LL(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Simple_name_LL)
            else:
                return self.getToken(XplorMRParser.Simple_name_LL, i)

        def End(self):
            return self.getToken(XplorMRParser.End, 0)

        def evaluate_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Evaluate_statementContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Evaluate_statementContext,i)


        def xadc_assign(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Xadc_assignContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Xadc_assignContext,i)


        def Integer_CF(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Integer_CF)
            else:
                return self.getToken(XplorMRParser.Integer_CF, i)

        def Real_CF(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Real_CF)
            else:
                return self.getToken(XplorMRParser.Real_CF, i)

        def Simple_name_CF(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Simple_name_CF)
            else:
                return self.getToken(XplorMRParser.Simple_name_CF, i)

        def getRuleIndex(self):
            return XplorMRParser.RULE_xadc_assign_loop

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterXadc_assign_loop" ):
                listener.enterXadc_assign_loop(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitXadc_assign_loop" ):
                listener.exitXadc_assign_loop(self)




    def xadc_assign_loop(self):

        localctx = XplorMRParser.Xadc_assign_loopContext(self, self._ctx, self.state)
        self.enterRule(localctx, 230, self.RULE_xadc_assign_loop)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2695
            self.match(XplorMRParser.For)
            self.state = 2696
            self.match(XplorMRParser.Symbol_name_CF)
            self.state = 2697
            self.match(XplorMRParser.In_CF)
            self.state = 2698
            self.match(XplorMRParser.L_paren_CF)
            self.state = 2717
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,306,self._ctx)
            if la_ == 1:
                self.state = 2702
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==XplorMRParser.Integer_CF:
                    self.state = 2699
                    self.match(XplorMRParser.Integer_CF)
                    self.state = 2704
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 2:
                self.state = 2708
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==XplorMRParser.Real_CF:
                    self.state = 2705
                    self.match(XplorMRParser.Real_CF)
                    self.state = 2710
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 3:
                self.state = 2714
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==XplorMRParser.Simple_name_CF:
                    self.state = 2711
                    self.match(XplorMRParser.Simple_name_CF)
                    self.state = 2716
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass


            self.state = 2719
            self.match(XplorMRParser.R_paren_CF)
            self.state = 2720
            self.match(XplorMRParser.Loop)
            self.state = 2721
            self.match(XplorMRParser.Simple_name_LL)
            self.state = 2726
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==XplorMRParser.Assign or _la==XplorMRParser.Evaluate_Lp:
                self.state = 2724
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [XplorMRParser.Evaluate_Lp]:
                    self.state = 2722
                    self.evaluate_statement()
                    pass
                elif token in [XplorMRParser.Assign]:
                    self.state = 2723
                    self.xadc_assign()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 2728
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2729
            self.match(XplorMRParser.End)
            self.state = 2730
            self.match(XplorMRParser.Loop)
            self.state = 2731
            self.match(XplorMRParser.Simple_name_LL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Coup_assign_loopContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def For(self):
            return self.getToken(XplorMRParser.For, 0)

        def Symbol_name_CF(self):
            return self.getToken(XplorMRParser.Symbol_name_CF, 0)

        def In_CF(self):
            return self.getToken(XplorMRParser.In_CF, 0)

        def L_paren_CF(self):
            return self.getToken(XplorMRParser.L_paren_CF, 0)

        def R_paren_CF(self):
            return self.getToken(XplorMRParser.R_paren_CF, 0)

        def Loop(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Loop)
            else:
                return self.getToken(XplorMRParser.Loop, i)

        def Simple_name_LL(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Simple_name_LL)
            else:
                return self.getToken(XplorMRParser.Simple_name_LL, i)

        def End(self):
            return self.getToken(XplorMRParser.End, 0)

        def evaluate_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Evaluate_statementContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Evaluate_statementContext,i)


        def coup_assign(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Coup_assignContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Coup_assignContext,i)


        def Integer_CF(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Integer_CF)
            else:
                return self.getToken(XplorMRParser.Integer_CF, i)

        def Real_CF(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Real_CF)
            else:
                return self.getToken(XplorMRParser.Real_CF, i)

        def Simple_name_CF(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Simple_name_CF)
            else:
                return self.getToken(XplorMRParser.Simple_name_CF, i)

        def getRuleIndex(self):
            return XplorMRParser.RULE_coup_assign_loop

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCoup_assign_loop" ):
                listener.enterCoup_assign_loop(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCoup_assign_loop" ):
                listener.exitCoup_assign_loop(self)




    def coup_assign_loop(self):

        localctx = XplorMRParser.Coup_assign_loopContext(self, self._ctx, self.state)
        self.enterRule(localctx, 232, self.RULE_coup_assign_loop)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2733
            self.match(XplorMRParser.For)
            self.state = 2734
            self.match(XplorMRParser.Symbol_name_CF)
            self.state = 2735
            self.match(XplorMRParser.In_CF)
            self.state = 2736
            self.match(XplorMRParser.L_paren_CF)
            self.state = 2755
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,312,self._ctx)
            if la_ == 1:
                self.state = 2740
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==XplorMRParser.Integer_CF:
                    self.state = 2737
                    self.match(XplorMRParser.Integer_CF)
                    self.state = 2742
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 2:
                self.state = 2746
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==XplorMRParser.Real_CF:
                    self.state = 2743
                    self.match(XplorMRParser.Real_CF)
                    self.state = 2748
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 3:
                self.state = 2752
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==XplorMRParser.Simple_name_CF:
                    self.state = 2749
                    self.match(XplorMRParser.Simple_name_CF)
                    self.state = 2754
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass


            self.state = 2757
            self.match(XplorMRParser.R_paren_CF)
            self.state = 2758
            self.match(XplorMRParser.Loop)
            self.state = 2759
            self.match(XplorMRParser.Simple_name_LL)
            self.state = 2764
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==XplorMRParser.Assign or _la==XplorMRParser.Evaluate_Lp:
                self.state = 2762
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [XplorMRParser.Evaluate_Lp]:
                    self.state = 2760
                    self.evaluate_statement()
                    pass
                elif token in [XplorMRParser.Assign]:
                    self.state = 2761
                    self.coup_assign()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 2766
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2767
            self.match(XplorMRParser.End)
            self.state = 2768
            self.match(XplorMRParser.Loop)
            self.state = 2769
            self.match(XplorMRParser.Simple_name_LL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Coll_assign_loopContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def For(self):
            return self.getToken(XplorMRParser.For, 0)

        def Symbol_name_CF(self):
            return self.getToken(XplorMRParser.Symbol_name_CF, 0)

        def In_CF(self):
            return self.getToken(XplorMRParser.In_CF, 0)

        def L_paren_CF(self):
            return self.getToken(XplorMRParser.L_paren_CF, 0)

        def R_paren_CF(self):
            return self.getToken(XplorMRParser.R_paren_CF, 0)

        def Loop(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Loop)
            else:
                return self.getToken(XplorMRParser.Loop, i)

        def Simple_name_LL(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Simple_name_LL)
            else:
                return self.getToken(XplorMRParser.Simple_name_LL, i)

        def End(self):
            return self.getToken(XplorMRParser.End, 0)

        def evaluate_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Evaluate_statementContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Evaluate_statementContext,i)


        def coll_assign(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Coll_assignContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Coll_assignContext,i)


        def Integer_CF(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Integer_CF)
            else:
                return self.getToken(XplorMRParser.Integer_CF, i)

        def Real_CF(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Real_CF)
            else:
                return self.getToken(XplorMRParser.Real_CF, i)

        def Simple_name_CF(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Simple_name_CF)
            else:
                return self.getToken(XplorMRParser.Simple_name_CF, i)

        def getRuleIndex(self):
            return XplorMRParser.RULE_coll_assign_loop

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColl_assign_loop" ):
                listener.enterColl_assign_loop(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColl_assign_loop" ):
                listener.exitColl_assign_loop(self)




    def coll_assign_loop(self):

        localctx = XplorMRParser.Coll_assign_loopContext(self, self._ctx, self.state)
        self.enterRule(localctx, 234, self.RULE_coll_assign_loop)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2771
            self.match(XplorMRParser.For)
            self.state = 2772
            self.match(XplorMRParser.Symbol_name_CF)
            self.state = 2773
            self.match(XplorMRParser.In_CF)
            self.state = 2774
            self.match(XplorMRParser.L_paren_CF)
            self.state = 2793
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,318,self._ctx)
            if la_ == 1:
                self.state = 2778
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==XplorMRParser.Integer_CF:
                    self.state = 2775
                    self.match(XplorMRParser.Integer_CF)
                    self.state = 2780
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 2:
                self.state = 2784
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==XplorMRParser.Real_CF:
                    self.state = 2781
                    self.match(XplorMRParser.Real_CF)
                    self.state = 2786
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 3:
                self.state = 2790
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==XplorMRParser.Simple_name_CF:
                    self.state = 2787
                    self.match(XplorMRParser.Simple_name_CF)
                    self.state = 2792
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass


            self.state = 2795
            self.match(XplorMRParser.R_paren_CF)
            self.state = 2796
            self.match(XplorMRParser.Loop)
            self.state = 2797
            self.match(XplorMRParser.Simple_name_LL)
            self.state = 2802
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==XplorMRParser.Assign or _la==XplorMRParser.Evaluate_Lp:
                self.state = 2800
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [XplorMRParser.Evaluate_Lp]:
                    self.state = 2798
                    self.evaluate_statement()
                    pass
                elif token in [XplorMRParser.Assign]:
                    self.state = 2799
                    self.coll_assign()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 2804
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2805
            self.match(XplorMRParser.End)
            self.state = 2806
            self.match(XplorMRParser.Loop)
            self.state = 2807
            self.match(XplorMRParser.Simple_name_LL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Csa_assign_loopContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def For(self):
            return self.getToken(XplorMRParser.For, 0)

        def Symbol_name_CF(self):
            return self.getToken(XplorMRParser.Symbol_name_CF, 0)

        def In_CF(self):
            return self.getToken(XplorMRParser.In_CF, 0)

        def L_paren_CF(self):
            return self.getToken(XplorMRParser.L_paren_CF, 0)

        def R_paren_CF(self):
            return self.getToken(XplorMRParser.R_paren_CF, 0)

        def Loop(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Loop)
            else:
                return self.getToken(XplorMRParser.Loop, i)

        def Simple_name_LL(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Simple_name_LL)
            else:
                return self.getToken(XplorMRParser.Simple_name_LL, i)

        def End(self):
            return self.getToken(XplorMRParser.End, 0)

        def evaluate_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Evaluate_statementContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Evaluate_statementContext,i)


        def csa_assign(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Csa_assignContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Csa_assignContext,i)


        def Integer_CF(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Integer_CF)
            else:
                return self.getToken(XplorMRParser.Integer_CF, i)

        def Real_CF(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Real_CF)
            else:
                return self.getToken(XplorMRParser.Real_CF, i)

        def Simple_name_CF(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Simple_name_CF)
            else:
                return self.getToken(XplorMRParser.Simple_name_CF, i)

        def getRuleIndex(self):
            return XplorMRParser.RULE_csa_assign_loop

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCsa_assign_loop" ):
                listener.enterCsa_assign_loop(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCsa_assign_loop" ):
                listener.exitCsa_assign_loop(self)




    def csa_assign_loop(self):

        localctx = XplorMRParser.Csa_assign_loopContext(self, self._ctx, self.state)
        self.enterRule(localctx, 236, self.RULE_csa_assign_loop)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2809
            self.match(XplorMRParser.For)
            self.state = 2810
            self.match(XplorMRParser.Symbol_name_CF)
            self.state = 2811
            self.match(XplorMRParser.In_CF)
            self.state = 2812
            self.match(XplorMRParser.L_paren_CF)
            self.state = 2831
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,324,self._ctx)
            if la_ == 1:
                self.state = 2816
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==XplorMRParser.Integer_CF:
                    self.state = 2813
                    self.match(XplorMRParser.Integer_CF)
                    self.state = 2818
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 2:
                self.state = 2822
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==XplorMRParser.Real_CF:
                    self.state = 2819
                    self.match(XplorMRParser.Real_CF)
                    self.state = 2824
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 3:
                self.state = 2828
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==XplorMRParser.Simple_name_CF:
                    self.state = 2825
                    self.match(XplorMRParser.Simple_name_CF)
                    self.state = 2830
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass


            self.state = 2833
            self.match(XplorMRParser.R_paren_CF)
            self.state = 2834
            self.match(XplorMRParser.Loop)
            self.state = 2835
            self.match(XplorMRParser.Simple_name_LL)
            self.state = 2840
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==XplorMRParser.Assign or _la==XplorMRParser.Evaluate_Lp:
                self.state = 2838
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [XplorMRParser.Evaluate_Lp]:
                    self.state = 2836
                    self.evaluate_statement()
                    pass
                elif token in [XplorMRParser.Assign]:
                    self.state = 2837
                    self.csa_assign()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 2842
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2843
            self.match(XplorMRParser.End)
            self.state = 2844
            self.match(XplorMRParser.Loop)
            self.state = 2845
            self.match(XplorMRParser.Simple_name_LL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pre_assign_loopContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def For(self):
            return self.getToken(XplorMRParser.For, 0)

        def Symbol_name_CF(self):
            return self.getToken(XplorMRParser.Symbol_name_CF, 0)

        def In_CF(self):
            return self.getToken(XplorMRParser.In_CF, 0)

        def L_paren_CF(self):
            return self.getToken(XplorMRParser.L_paren_CF, 0)

        def R_paren_CF(self):
            return self.getToken(XplorMRParser.R_paren_CF, 0)

        def Loop(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Loop)
            else:
                return self.getToken(XplorMRParser.Loop, i)

        def Simple_name_LL(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Simple_name_LL)
            else:
                return self.getToken(XplorMRParser.Simple_name_LL, i)

        def End(self):
            return self.getToken(XplorMRParser.End, 0)

        def evaluate_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Evaluate_statementContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Evaluate_statementContext,i)


        def pre_assign(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Pre_assignContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Pre_assignContext,i)


        def Integer_CF(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Integer_CF)
            else:
                return self.getToken(XplorMRParser.Integer_CF, i)

        def Real_CF(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Real_CF)
            else:
                return self.getToken(XplorMRParser.Real_CF, i)

        def Simple_name_CF(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Simple_name_CF)
            else:
                return self.getToken(XplorMRParser.Simple_name_CF, i)

        def getRuleIndex(self):
            return XplorMRParser.RULE_pre_assign_loop

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPre_assign_loop" ):
                listener.enterPre_assign_loop(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPre_assign_loop" ):
                listener.exitPre_assign_loop(self)




    def pre_assign_loop(self):

        localctx = XplorMRParser.Pre_assign_loopContext(self, self._ctx, self.state)
        self.enterRule(localctx, 238, self.RULE_pre_assign_loop)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2847
            self.match(XplorMRParser.For)
            self.state = 2848
            self.match(XplorMRParser.Symbol_name_CF)
            self.state = 2849
            self.match(XplorMRParser.In_CF)
            self.state = 2850
            self.match(XplorMRParser.L_paren_CF)
            self.state = 2869
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,330,self._ctx)
            if la_ == 1:
                self.state = 2854
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==XplorMRParser.Integer_CF:
                    self.state = 2851
                    self.match(XplorMRParser.Integer_CF)
                    self.state = 2856
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 2:
                self.state = 2860
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==XplorMRParser.Real_CF:
                    self.state = 2857
                    self.match(XplorMRParser.Real_CF)
                    self.state = 2862
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 3:
                self.state = 2866
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==XplorMRParser.Simple_name_CF:
                    self.state = 2863
                    self.match(XplorMRParser.Simple_name_CF)
                    self.state = 2868
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass


            self.state = 2871
            self.match(XplorMRParser.R_paren_CF)
            self.state = 2872
            self.match(XplorMRParser.Loop)
            self.state = 2873
            self.match(XplorMRParser.Simple_name_LL)
            self.state = 2878
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==XplorMRParser.Assign or _la==XplorMRParser.Evaluate_Lp:
                self.state = 2876
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [XplorMRParser.Evaluate_Lp]:
                    self.state = 2874
                    self.evaluate_statement()
                    pass
                elif token in [XplorMRParser.Assign]:
                    self.state = 2875
                    self.pre_assign()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 2880
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2881
            self.match(XplorMRParser.End)
            self.state = 2882
            self.match(XplorMRParser.Loop)
            self.state = 2883
            self.match(XplorMRParser.Simple_name_LL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pcs_assign_loopContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def For(self):
            return self.getToken(XplorMRParser.For, 0)

        def Symbol_name_CF(self):
            return self.getToken(XplorMRParser.Symbol_name_CF, 0)

        def In_CF(self):
            return self.getToken(XplorMRParser.In_CF, 0)

        def L_paren_CF(self):
            return self.getToken(XplorMRParser.L_paren_CF, 0)

        def R_paren_CF(self):
            return self.getToken(XplorMRParser.R_paren_CF, 0)

        def Loop(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Loop)
            else:
                return self.getToken(XplorMRParser.Loop, i)

        def Simple_name_LL(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Simple_name_LL)
            else:
                return self.getToken(XplorMRParser.Simple_name_LL, i)

        def End(self):
            return self.getToken(XplorMRParser.End, 0)

        def evaluate_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Evaluate_statementContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Evaluate_statementContext,i)


        def pcs_assign(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Pcs_assignContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Pcs_assignContext,i)


        def Integer_CF(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Integer_CF)
            else:
                return self.getToken(XplorMRParser.Integer_CF, i)

        def Real_CF(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Real_CF)
            else:
                return self.getToken(XplorMRParser.Real_CF, i)

        def Simple_name_CF(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Simple_name_CF)
            else:
                return self.getToken(XplorMRParser.Simple_name_CF, i)

        def getRuleIndex(self):
            return XplorMRParser.RULE_pcs_assign_loop

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPcs_assign_loop" ):
                listener.enterPcs_assign_loop(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPcs_assign_loop" ):
                listener.exitPcs_assign_loop(self)




    def pcs_assign_loop(self):

        localctx = XplorMRParser.Pcs_assign_loopContext(self, self._ctx, self.state)
        self.enterRule(localctx, 240, self.RULE_pcs_assign_loop)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2885
            self.match(XplorMRParser.For)
            self.state = 2886
            self.match(XplorMRParser.Symbol_name_CF)
            self.state = 2887
            self.match(XplorMRParser.In_CF)
            self.state = 2888
            self.match(XplorMRParser.L_paren_CF)
            self.state = 2907
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,336,self._ctx)
            if la_ == 1:
                self.state = 2892
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==XplorMRParser.Integer_CF:
                    self.state = 2889
                    self.match(XplorMRParser.Integer_CF)
                    self.state = 2894
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 2:
                self.state = 2898
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==XplorMRParser.Real_CF:
                    self.state = 2895
                    self.match(XplorMRParser.Real_CF)
                    self.state = 2900
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 3:
                self.state = 2904
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==XplorMRParser.Simple_name_CF:
                    self.state = 2901
                    self.match(XplorMRParser.Simple_name_CF)
                    self.state = 2906
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass


            self.state = 2909
            self.match(XplorMRParser.R_paren_CF)
            self.state = 2910
            self.match(XplorMRParser.Loop)
            self.state = 2911
            self.match(XplorMRParser.Simple_name_LL)
            self.state = 2916
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==XplorMRParser.Assign or _la==XplorMRParser.Evaluate_Lp:
                self.state = 2914
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [XplorMRParser.Evaluate_Lp]:
                    self.state = 2912
                    self.evaluate_statement()
                    pass
                elif token in [XplorMRParser.Assign]:
                    self.state = 2913
                    self.pcs_assign()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 2918
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2919
            self.match(XplorMRParser.End)
            self.state = 2920
            self.match(XplorMRParser.Loop)
            self.state = 2921
            self.match(XplorMRParser.Simple_name_LL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Hbond_assign_loopContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def For(self):
            return self.getToken(XplorMRParser.For, 0)

        def Symbol_name_CF(self):
            return self.getToken(XplorMRParser.Symbol_name_CF, 0)

        def In_CF(self):
            return self.getToken(XplorMRParser.In_CF, 0)

        def L_paren_CF(self):
            return self.getToken(XplorMRParser.L_paren_CF, 0)

        def R_paren_CF(self):
            return self.getToken(XplorMRParser.R_paren_CF, 0)

        def Loop(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Loop)
            else:
                return self.getToken(XplorMRParser.Loop, i)

        def Simple_name_LL(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Simple_name_LL)
            else:
                return self.getToken(XplorMRParser.Simple_name_LL, i)

        def End(self):
            return self.getToken(XplorMRParser.End, 0)

        def evaluate_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Evaluate_statementContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Evaluate_statementContext,i)


        def hbond_assign(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Hbond_assignContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Hbond_assignContext,i)


        def Integer_CF(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Integer_CF)
            else:
                return self.getToken(XplorMRParser.Integer_CF, i)

        def Real_CF(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Real_CF)
            else:
                return self.getToken(XplorMRParser.Real_CF, i)

        def Simple_name_CF(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Simple_name_CF)
            else:
                return self.getToken(XplorMRParser.Simple_name_CF, i)

        def getRuleIndex(self):
            return XplorMRParser.RULE_hbond_assign_loop

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHbond_assign_loop" ):
                listener.enterHbond_assign_loop(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHbond_assign_loop" ):
                listener.exitHbond_assign_loop(self)




    def hbond_assign_loop(self):

        localctx = XplorMRParser.Hbond_assign_loopContext(self, self._ctx, self.state)
        self.enterRule(localctx, 242, self.RULE_hbond_assign_loop)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2923
            self.match(XplorMRParser.For)
            self.state = 2924
            self.match(XplorMRParser.Symbol_name_CF)
            self.state = 2925
            self.match(XplorMRParser.In_CF)
            self.state = 2926
            self.match(XplorMRParser.L_paren_CF)
            self.state = 2945
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,342,self._ctx)
            if la_ == 1:
                self.state = 2930
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==XplorMRParser.Integer_CF:
                    self.state = 2927
                    self.match(XplorMRParser.Integer_CF)
                    self.state = 2932
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 2:
                self.state = 2936
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==XplorMRParser.Real_CF:
                    self.state = 2933
                    self.match(XplorMRParser.Real_CF)
                    self.state = 2938
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 3:
                self.state = 2942
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==XplorMRParser.Simple_name_CF:
                    self.state = 2939
                    self.match(XplorMRParser.Simple_name_CF)
                    self.state = 2944
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass


            self.state = 2947
            self.match(XplorMRParser.R_paren_CF)
            self.state = 2948
            self.match(XplorMRParser.Loop)
            self.state = 2949
            self.match(XplorMRParser.Simple_name_LL)
            self.state = 2954
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==XplorMRParser.Assign or _la==XplorMRParser.Evaluate_Lp:
                self.state = 2952
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [XplorMRParser.Evaluate_Lp]:
                    self.state = 2950
                    self.evaluate_statement()
                    pass
                elif token in [XplorMRParser.Assign]:
                    self.state = 2951
                    self.hbond_assign()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 2956
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2957
            self.match(XplorMRParser.End)
            self.state = 2958
            self.match(XplorMRParser.Loop)
            self.state = 2959
            self.match(XplorMRParser.Simple_name_LL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Hbond_db_assign_loopContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def For(self):
            return self.getToken(XplorMRParser.For, 0)

        def Symbol_name_CF(self):
            return self.getToken(XplorMRParser.Symbol_name_CF, 0)

        def In_CF(self):
            return self.getToken(XplorMRParser.In_CF, 0)

        def L_paren_CF(self):
            return self.getToken(XplorMRParser.L_paren_CF, 0)

        def R_paren_CF(self):
            return self.getToken(XplorMRParser.R_paren_CF, 0)

        def Loop(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Loop)
            else:
                return self.getToken(XplorMRParser.Loop, i)

        def Simple_name_LL(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Simple_name_LL)
            else:
                return self.getToken(XplorMRParser.Simple_name_LL, i)

        def End(self):
            return self.getToken(XplorMRParser.End, 0)

        def evaluate_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Evaluate_statementContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Evaluate_statementContext,i)


        def hbond_db_assign(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Hbond_db_assignContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Hbond_db_assignContext,i)


        def Integer_CF(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Integer_CF)
            else:
                return self.getToken(XplorMRParser.Integer_CF, i)

        def Real_CF(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Real_CF)
            else:
                return self.getToken(XplorMRParser.Real_CF, i)

        def Simple_name_CF(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Simple_name_CF)
            else:
                return self.getToken(XplorMRParser.Simple_name_CF, i)

        def getRuleIndex(self):
            return XplorMRParser.RULE_hbond_db_assign_loop

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHbond_db_assign_loop" ):
                listener.enterHbond_db_assign_loop(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHbond_db_assign_loop" ):
                listener.exitHbond_db_assign_loop(self)




    def hbond_db_assign_loop(self):

        localctx = XplorMRParser.Hbond_db_assign_loopContext(self, self._ctx, self.state)
        self.enterRule(localctx, 244, self.RULE_hbond_db_assign_loop)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2961
            self.match(XplorMRParser.For)
            self.state = 2962
            self.match(XplorMRParser.Symbol_name_CF)
            self.state = 2963
            self.match(XplorMRParser.In_CF)
            self.state = 2964
            self.match(XplorMRParser.L_paren_CF)
            self.state = 2983
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,348,self._ctx)
            if la_ == 1:
                self.state = 2968
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==XplorMRParser.Integer_CF:
                    self.state = 2965
                    self.match(XplorMRParser.Integer_CF)
                    self.state = 2970
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 2:
                self.state = 2974
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==XplorMRParser.Real_CF:
                    self.state = 2971
                    self.match(XplorMRParser.Real_CF)
                    self.state = 2976
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 3:
                self.state = 2980
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==XplorMRParser.Simple_name_CF:
                    self.state = 2977
                    self.match(XplorMRParser.Simple_name_CF)
                    self.state = 2982
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass


            self.state = 2985
            self.match(XplorMRParser.R_paren_CF)
            self.state = 2986
            self.match(XplorMRParser.Loop)
            self.state = 2987
            self.match(XplorMRParser.Simple_name_LL)
            self.state = 2992
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==XplorMRParser.Assign or _la==XplorMRParser.Evaluate_Lp:
                self.state = 2990
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [XplorMRParser.Evaluate_Lp]:
                    self.state = 2988
                    self.evaluate_statement()
                    pass
                elif token in [XplorMRParser.Assign]:
                    self.state = 2989
                    self.hbond_db_assign()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 2994
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2995
            self.match(XplorMRParser.End)
            self.state = 2996
            self.match(XplorMRParser.Loop)
            self.state = 2997
            self.match(XplorMRParser.Simple_name_LL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx



    def sempred(self, localctx:RuleContext, ruleIndex:int, predIndex:int):
        if self._predicates == None:
            self._predicates = dict()
        self._predicates[94] = self.factor_sempred
        pred = self._predicates.get(ruleIndex, None)
        if pred is None:
            raise Exception("No predicate with index:" + str(ruleIndex))
        else:
            return pred(localctx, predIndex)

    def factor_sempred(self, localctx:FactorContext, predIndex:int):
            if predIndex == 0:
                return self.precpred(self._ctx, 32)
         

            if predIndex == 1:
                return self.precpred(self._ctx, 14)
         




