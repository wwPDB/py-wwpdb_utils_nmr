# Generated from XplorMRParser.g4 by ANTLR 4.10.1
# encoding: utf-8
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
	from typing import TextIO
else:
	from typing.io import TextIO

def serializedATN():
    return [
        4,1,288,2257,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,
        7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,
        13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,
        20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,
        26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,
        33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,
        39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,
        46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,52,7,
        52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,2,57,7,57,2,58,7,58,2,
        59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,2,64,7,64,2,65,7,
        65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,2,71,7,71,2,
        72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,7,77,2,78,7,
        78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,2,84,7,84,2,
        85,7,85,2,86,7,86,2,87,7,87,2,88,7,88,2,89,7,89,2,90,7,90,2,91,7,
        91,2,92,7,92,2,93,7,93,2,94,7,94,2,95,7,95,2,96,7,96,2,97,7,97,2,
        98,7,98,2,99,7,99,2,100,7,100,2,101,7,101,2,102,7,102,2,103,7,103,
        2,104,7,104,2,105,7,105,2,106,7,106,2,107,7,107,2,108,7,108,2,109,
        7,109,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,
        0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,
        0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,5,0,262,8,0,10,0,12,0,
        265,9,0,1,0,1,0,1,1,1,1,5,1,271,8,1,10,1,12,1,274,9,1,1,1,1,1,1,
        2,3,2,279,8,2,1,2,1,2,5,2,283,8,2,10,2,12,2,286,9,2,1,2,1,2,1,3,
        1,3,5,3,292,8,3,10,3,12,3,295,9,3,1,3,1,3,1,3,5,3,300,8,3,10,3,12,
        3,303,9,3,1,3,1,3,1,3,5,3,308,8,3,10,3,12,3,311,9,3,1,3,1,3,1,3,
        5,3,316,8,3,10,3,12,3,319,9,3,1,3,1,3,1,3,5,3,324,8,3,10,3,12,3,
        327,9,3,1,3,3,3,330,8,3,1,4,3,4,333,8,4,1,4,1,4,5,4,337,8,4,10,4,
        12,4,340,9,4,1,4,1,4,1,5,3,5,345,8,5,1,5,1,5,5,5,349,8,5,10,5,12,
        5,352,9,5,1,5,1,5,1,6,1,6,5,6,358,8,6,10,6,12,6,361,9,6,1,6,1,6,
        1,7,1,7,5,7,367,8,7,10,7,12,7,370,9,7,1,7,1,7,1,8,1,8,5,8,376,8,
        8,10,8,12,8,379,9,8,1,8,1,8,1,9,1,9,5,9,385,8,9,10,9,12,9,388,9,
        9,1,9,1,9,1,10,1,10,5,10,394,8,10,10,10,12,10,397,9,10,1,10,1,10,
        1,11,1,11,5,11,403,8,11,10,11,12,11,406,9,11,1,11,1,11,1,12,1,12,
        5,12,412,8,12,10,12,12,12,415,9,12,1,12,1,12,1,13,1,13,5,13,421,
        8,13,10,13,12,13,424,9,13,1,13,1,13,1,14,1,14,5,14,430,8,14,10,14,
        12,14,433,9,14,1,14,1,14,1,15,1,15,5,15,439,8,15,10,15,12,15,442,
        9,15,1,15,1,15,1,16,1,16,5,16,448,8,16,10,16,12,16,451,9,16,1,16,
        1,16,1,17,1,17,5,17,457,8,17,10,17,12,17,460,9,17,1,17,1,17,1,18,
        1,18,5,18,466,8,18,10,18,12,18,469,9,18,1,18,1,18,1,19,1,19,5,19,
        475,8,19,10,19,12,19,478,9,19,1,19,1,19,1,20,1,20,5,20,484,8,20,
        10,20,12,20,487,9,20,1,20,1,20,1,21,1,21,5,21,493,8,21,10,21,12,
        21,496,9,21,1,21,1,21,1,22,1,22,5,22,502,8,22,10,22,12,22,505,9,
        22,1,22,1,22,1,23,1,23,5,23,511,8,23,10,23,12,23,514,9,23,1,23,1,
        23,1,24,1,24,5,24,520,8,24,10,24,12,24,523,9,24,1,24,1,24,1,25,1,
        25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,3,25,539,8,
        25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,
        25,1,25,1,25,1,25,1,25,3,25,558,8,25,1,25,1,25,1,25,1,25,1,25,1,
        25,1,25,1,25,1,25,1,25,1,25,3,25,571,8,25,1,25,1,25,1,25,1,25,1,
        25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,
        25,1,25,1,25,1,25,1,25,3,25,595,8,25,1,25,3,25,598,8,25,1,26,1,26,
        1,26,1,26,1,26,3,26,605,8,26,1,26,3,26,608,8,26,1,26,5,26,611,8,
        26,10,26,12,26,614,9,26,1,26,1,26,3,26,618,8,26,1,26,1,26,1,26,3,
        26,623,8,26,1,26,3,26,626,8,26,1,26,3,26,629,8,26,5,26,631,8,26,
        10,26,12,26,634,9,26,1,27,1,27,3,27,638,8,27,1,27,1,27,1,27,3,27,
        643,8,27,1,27,1,27,1,27,1,27,1,27,3,27,650,8,27,1,28,1,28,3,28,654,
        8,28,1,28,1,28,1,28,3,28,659,8,28,1,28,1,28,1,28,3,28,664,8,28,1,
        28,1,28,1,28,3,28,669,8,28,1,28,1,28,1,28,3,28,674,8,28,1,28,1,28,
        1,28,3,28,679,8,28,1,28,1,28,1,28,3,28,684,8,28,1,28,3,28,687,8,
        28,1,29,1,29,1,29,1,29,3,29,693,8,29,1,29,1,29,1,29,1,29,3,29,699,
        8,29,1,29,3,29,702,8,29,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,
        1,30,1,30,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,
        1,31,1,31,1,31,1,31,1,31,1,31,1,31,3,31,732,8,31,1,32,1,32,1,32,
        1,32,1,32,1,32,1,32,1,32,1,32,3,32,743,8,32,1,32,3,32,746,8,32,1,
        33,1,33,1,33,1,33,1,33,1,33,1,33,1,33,1,33,1,33,1,33,1,33,1,33,1,
        33,1,33,1,33,1,33,1,33,1,33,1,33,1,33,1,33,1,33,1,33,1,33,1,33,3,
        33,774,8,33,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,
        34,1,34,1,34,1,34,1,34,3,34,791,8,34,1,35,1,35,1,35,3,35,796,8,35,
        1,35,1,35,1,35,1,35,1,35,1,35,1,35,1,35,1,35,1,35,1,35,3,35,809,
        8,35,1,35,1,35,1,35,1,35,1,35,3,35,816,8,35,1,36,1,36,1,36,1,36,
        1,36,1,36,1,36,1,36,1,36,1,36,3,36,828,8,36,1,37,1,37,1,37,1,37,
        1,37,1,37,1,37,1,37,1,37,1,37,1,37,1,37,1,37,3,37,843,8,37,1,38,
        1,38,1,38,1,38,1,38,3,38,850,8,38,1,39,1,39,1,39,1,39,1,39,1,39,
        1,39,1,39,1,39,1,39,1,39,1,39,1,39,1,39,1,39,1,39,1,39,1,39,1,39,
        1,39,1,39,3,39,873,8,39,1,40,1,40,1,40,1,40,1,40,1,40,1,40,3,40,
        882,8,40,1,41,1,41,5,41,886,8,41,10,41,12,41,889,9,41,1,41,1,41,
        3,41,893,8,41,1,42,1,42,3,42,897,8,42,1,42,1,42,1,42,3,42,902,8,
        42,1,42,3,42,905,8,42,1,43,1,43,3,43,909,8,43,1,43,1,43,1,43,3,43,
        914,8,43,1,43,1,43,1,43,3,43,919,8,43,1,43,1,43,3,43,923,8,43,1,
        43,1,43,1,43,1,43,3,43,929,8,43,1,43,1,43,3,43,933,8,43,1,43,1,43,
        3,43,937,8,43,1,43,3,43,940,8,43,3,43,942,8,43,1,43,1,43,3,43,946,
        8,43,1,44,1,44,1,44,1,44,1,44,1,44,1,45,1,45,1,45,1,45,1,45,1,45,
        1,45,1,45,1,45,1,45,1,45,1,45,1,45,1,45,1,45,1,45,3,45,970,8,45,
        1,45,1,45,1,45,1,45,1,45,1,45,3,45,978,8,45,1,46,1,46,1,46,1,46,
        1,47,1,47,1,47,1,47,1,47,1,47,1,47,1,47,1,47,1,47,1,47,3,47,995,
        8,47,1,47,1,47,1,47,1,47,1,47,1,47,3,47,1003,8,47,1,47,1,47,1,47,
        1,47,3,47,1009,8,47,1,47,1,47,1,47,1,47,1,47,1,47,1,47,1,47,1,47,
        3,47,1020,8,47,1,47,3,47,1023,8,47,1,48,1,48,1,48,1,48,1,48,1,48,
        1,48,1,48,1,48,1,48,3,48,1035,8,48,1,48,1,48,1,48,1,48,1,48,3,48,
        1042,8,48,1,49,1,49,1,49,1,49,1,49,1,49,1,49,1,49,1,49,1,49,1,49,
        1,49,1,49,1,49,1,49,1,49,1,49,1,49,1,49,1,49,1,49,1,49,1,49,1,49,
        1,49,1,49,3,49,1070,8,49,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,
        1,50,1,51,1,51,1,51,1,51,1,51,1,52,1,52,1,52,1,52,1,52,1,52,1,52,
        1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,3,52,1104,
        8,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,3,52,1114,8,52,1,52,
        1,52,1,52,3,52,1119,8,52,1,53,1,53,1,53,3,53,1124,8,53,1,53,1,53,
        3,53,1128,8,53,1,54,1,54,1,54,1,54,1,55,1,55,1,55,1,55,1,55,1,55,
        3,55,1140,8,55,1,55,1,55,1,56,1,56,1,56,1,57,1,57,1,57,1,58,1,58,
        1,58,1,59,1,59,1,59,1,60,1,60,1,60,1,60,1,60,1,60,1,60,1,60,3,60,
        1164,8,60,1,61,1,61,1,61,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,
        1,62,1,62,1,62,1,62,1,62,1,62,1,62,3,62,1184,8,62,1,62,1,62,1,62,
        1,62,3,62,1190,8,62,1,62,1,62,1,62,1,62,3,62,1196,8,62,1,62,1,62,
        1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,3,62,1208,8,62,1,62,1,62,
        1,62,1,62,3,62,1214,8,62,1,62,1,62,1,62,1,62,3,62,1220,8,62,1,62,
        1,62,1,62,1,62,1,62,1,62,3,62,1228,8,62,1,62,1,62,1,62,1,62,1,62,
        1,62,1,62,1,62,3,62,1238,8,62,1,62,1,62,1,62,1,62,3,62,1244,8,62,
        1,62,1,62,1,62,1,62,3,62,1250,8,62,1,62,1,62,1,62,1,62,1,62,1,62,
        1,62,1,62,1,62,3,62,1261,8,62,1,62,3,62,1264,8,62,1,62,3,62,1267,
        8,62,1,62,1,62,3,62,1271,8,62,1,63,1,63,1,63,1,63,1,63,1,63,1,63,
        1,63,1,63,1,63,3,63,1283,8,63,1,63,1,63,1,63,1,63,1,63,3,63,1290,
        8,63,1,63,1,63,1,63,1,63,1,63,3,63,1297,8,63,1,64,1,64,1,64,1,64,
        1,64,3,64,1304,8,64,1,65,1,65,1,65,1,65,1,65,1,66,1,66,1,66,1,66,
        1,66,1,66,1,66,1,66,1,66,1,66,1,66,1,66,1,66,1,66,1,66,1,66,1,66,
        1,66,1,66,1,66,1,66,1,66,3,66,1333,8,66,1,67,1,67,1,67,1,67,1,67,
        1,67,1,67,1,67,1,67,3,67,1344,8,67,1,68,1,68,1,68,1,68,1,68,1,68,
        1,68,1,68,1,68,1,68,1,68,1,68,1,68,1,68,1,68,1,68,1,68,1,68,1,68,
        1,68,1,68,1,68,1,68,1,68,1,68,1,68,1,68,1,68,1,68,1,68,1,68,1,68,
        1,68,1,68,1,68,1,68,1,68,1,68,3,68,1384,8,68,1,68,1,68,1,68,1,68,
        1,68,1,68,1,68,1,68,1,68,1,68,1,68,1,68,1,68,1,68,1,68,1,68,1,68,
        3,68,1403,8,68,1,69,1,69,1,69,1,69,1,69,1,69,1,70,1,70,1,70,1,70,
        1,70,1,70,1,70,1,70,1,70,1,70,1,70,1,70,1,70,1,70,1,70,1,70,1,70,
        1,70,1,70,1,70,1,70,1,70,1,70,1,70,1,70,1,70,1,70,3,70,1438,8,70,
        1,71,1,71,1,71,1,71,1,71,1,71,1,71,1,71,1,71,1,71,3,71,1450,8,71,
        1,71,3,71,1453,8,71,1,72,1,72,1,72,1,72,1,72,1,72,1,72,1,72,1,72,
        1,72,1,72,1,72,1,72,1,72,1,72,1,72,1,72,1,72,1,72,1,72,1,72,1,72,
        1,72,1,72,1,72,1,72,3,72,1481,8,72,1,73,1,73,1,73,1,73,1,73,1,73,
        1,73,1,73,1,73,1,73,1,73,1,73,1,73,1,73,1,73,1,73,1,73,1,73,1,73,
        1,73,1,73,1,73,3,73,1505,8,73,1,74,1,74,1,74,1,74,1,74,1,74,1,74,
        1,74,1,74,1,74,1,74,1,74,1,75,1,75,1,75,1,75,1,75,1,75,1,75,1,75,
        1,75,1,75,1,75,1,75,1,75,1,75,1,75,1,75,1,75,1,75,1,75,1,75,1,75,
        1,75,1,75,3,75,1542,8,75,1,75,1,75,1,75,1,75,1,75,1,75,3,75,1550,
        8,75,1,76,1,76,1,76,1,76,1,76,1,76,1,76,1,76,1,76,1,76,1,76,1,76,
        1,76,3,76,1565,8,76,1,77,1,77,1,77,3,77,1570,8,77,1,77,1,77,1,77,
        3,77,1575,8,77,1,77,1,77,1,77,1,77,3,77,1581,8,77,1,77,1,77,1,77,
        3,77,1586,8,77,1,77,1,77,1,77,1,77,3,77,1592,8,77,1,77,1,77,1,77,
        1,77,3,77,1598,8,77,1,77,1,77,1,77,1,77,3,77,1604,8,77,1,77,1,77,
        1,77,1,77,1,77,1,77,1,77,1,77,1,77,1,77,3,77,1616,8,77,1,77,1,77,
        3,77,1620,8,77,1,78,1,78,1,78,1,78,1,78,3,78,1627,8,78,1,79,1,79,
        1,79,1,79,1,79,1,79,1,79,1,79,1,79,1,79,1,79,1,79,1,79,1,79,1,79,
        1,79,1,79,1,79,1,79,3,79,1648,8,79,1,79,1,79,1,79,1,79,1,79,1,79,
        1,79,1,79,1,79,1,79,1,79,1,79,1,79,1,79,1,79,3,79,1665,8,79,1,80,
        1,80,1,80,1,80,1,80,1,80,1,80,1,80,3,80,1675,8,80,1,81,1,81,1,81,
        1,81,1,81,1,81,1,81,1,81,1,81,1,81,1,81,1,81,1,81,1,81,1,81,1,81,
        1,81,1,81,1,81,1,81,1,81,1,81,1,81,1,81,1,81,1,81,3,81,1703,8,81,
        1,82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,3,82,1714,8,82,1,83,
        1,83,1,83,1,83,1,83,1,83,1,83,1,83,1,83,1,83,1,83,3,83,1727,8,83,
        1,84,1,84,1,84,1,84,1,84,1,84,1,84,1,85,1,85,1,85,1,85,1,85,1,85,
        1,85,1,85,1,85,1,85,1,85,1,85,1,85,1,85,1,85,1,85,1,85,3,85,1753,
        8,85,1,86,1,86,1,86,1,86,1,86,1,86,3,86,1761,8,86,1,87,1,87,1,87,
        1,87,1,87,1,87,1,87,1,87,1,87,1,87,1,87,3,87,1774,8,87,1,88,1,88,
        1,88,1,88,1,88,1,89,1,89,1,89,3,89,1784,8,89,1,89,1,89,1,89,3,89,
        1789,8,89,1,89,1,89,1,89,3,89,1794,8,89,1,89,1,89,1,89,3,89,1799,
        8,89,1,89,1,89,1,89,3,89,1804,8,89,1,89,1,89,1,89,3,89,1809,8,89,
        1,89,1,89,1,89,3,89,1814,8,89,1,89,1,89,1,89,3,89,1819,8,89,1,89,
        1,89,1,89,3,89,1824,8,89,1,89,1,89,1,89,3,89,1829,8,89,1,89,1,89,
        1,89,3,89,1834,8,89,1,89,1,89,1,89,3,89,1839,8,89,1,89,1,89,1,89,
        3,89,1844,8,89,1,89,3,89,1847,8,89,1,90,1,90,1,90,1,90,1,91,1,91,
        1,91,1,91,1,92,1,92,1,92,5,92,1860,8,92,10,92,12,92,1863,9,92,1,
        93,1,93,1,93,5,93,1868,8,93,10,93,12,93,1871,9,93,1,94,1,94,1,94,
        1,94,1,94,1,94,1,94,1,94,1,94,1,94,1,94,1,94,3,94,1885,8,94,1,94,
        1,94,1,94,1,94,1,94,1,94,1,94,1,94,1,94,1,94,1,94,1,94,1,94,1,94,
        3,94,1901,8,94,3,94,1903,8,94,1,94,1,94,1,94,1,94,1,94,1,94,1,94,
        1,94,1,94,3,94,1914,8,94,1,94,1,94,1,94,3,94,1919,8,94,3,94,1921,
        8,94,1,94,1,94,1,94,1,94,1,94,1,94,3,94,1929,8,94,1,94,1,94,3,94,
        1933,8,94,1,94,1,94,1,94,1,94,1,94,1,94,1,94,1,94,1,94,3,94,1944,
        8,94,1,94,1,94,3,94,1948,8,94,1,94,1,94,3,94,1952,8,94,1,94,3,94,
        1955,8,94,1,94,1,94,1,94,1,94,1,94,1,94,1,94,1,94,1,94,1,94,1,94,
        3,94,1968,8,94,1,94,3,94,1971,8,94,1,94,1,94,1,94,1,94,1,94,3,94,
        1978,8,94,3,94,1980,8,94,1,94,1,94,1,94,1,94,1,94,3,94,1987,8,94,
        1,94,1,94,1,94,3,94,1992,8,94,3,94,1994,8,94,1,94,1,94,1,94,1,94,
        1,94,1,94,1,94,1,94,1,94,1,94,1,94,1,94,3,94,2008,8,94,1,94,1,94,
        1,94,1,94,1,94,1,94,5,94,2016,8,94,10,94,12,94,2019,9,94,1,95,1,
        95,1,96,1,96,1,97,1,97,1,98,1,98,1,99,1,99,1,99,5,99,2032,8,99,10,
        99,12,99,2035,9,99,1,99,3,99,2038,8,99,3,99,2040,8,99,1,99,1,99,
        5,99,2044,8,99,10,99,12,99,2047,9,99,1,99,1,99,1,100,1,100,1,100,
        1,100,1,101,1,101,1,101,1,101,1,101,1,101,3,101,2061,8,101,1,102,
        1,102,1,102,3,102,2066,8,102,1,103,1,103,1,103,3,103,2071,8,103,
        1,104,1,104,1,104,1,104,1,104,1,104,1,104,3,104,2080,8,104,1,105,
        1,105,1,105,1,105,1,105,1,105,1,105,1,105,1,105,1,105,1,105,1,105,
        1,105,1,105,1,105,1,105,1,105,1,105,1,105,1,105,1,105,1,105,1,105,
        1,105,1,105,1,105,1,105,1,105,1,105,1,105,1,105,1,105,1,105,1,105,
        1,105,1,105,1,105,1,105,1,105,1,105,1,105,1,105,1,105,1,105,1,105,
        1,105,1,105,1,105,1,105,1,105,1,105,1,105,1,105,1,105,1,105,1,105,
        1,105,1,105,1,105,1,105,5,105,2142,8,105,10,105,12,105,2145,9,105,
        1,105,1,105,1,105,1,105,1,105,1,105,1,105,1,105,1,105,1,105,1,105,
        1,105,5,105,2159,8,105,10,105,12,105,2162,9,105,1,105,1,105,1,105,
        1,105,1,105,1,105,1,105,1,105,1,105,1,105,1,105,1,105,1,105,1,105,
        1,105,1,105,1,105,1,105,1,105,1,105,1,105,1,105,1,105,1,105,1,105,
        1,105,1,105,1,105,1,105,1,105,1,105,1,105,1,105,1,105,1,105,1,105,
        1,105,3,105,2201,8,105,1,106,1,106,1,106,1,106,1,106,1,107,1,107,
        1,107,1,107,1,107,1,107,1,108,1,108,1,108,3,108,2217,8,108,1,109,
        1,109,1,109,1,109,1,109,5,109,2224,8,109,10,109,12,109,2227,9,109,
        1,109,5,109,2230,8,109,10,109,12,109,2233,9,109,1,109,5,109,2236,
        8,109,10,109,12,109,2239,9,109,3,109,2241,8,109,1,109,1,109,1,109,
        1,109,1,109,5,109,2248,8,109,10,109,12,109,2251,9,109,1,109,1,109,
        1,109,1,109,1,109,0,1,188,110,0,2,4,6,8,10,12,14,16,18,20,22,24,
        26,28,30,32,34,36,38,40,42,44,46,48,50,52,54,56,58,60,62,64,66,68,
        70,72,74,76,78,80,82,84,86,88,90,92,94,96,98,100,102,104,106,108,
        110,112,114,116,118,120,122,124,126,128,130,132,134,136,138,140,
        142,144,146,148,150,152,154,156,158,160,162,164,166,168,170,172,
        174,176,178,180,182,184,186,188,190,192,194,196,198,200,202,204,
        206,208,210,212,214,216,218,0,8,1,0,42,43,1,0,185,186,2,0,178,178,
        187,187,3,0,178,178,180,180,199,199,2,0,178,178,180,180,1,0,165,
        166,1,0,230,234,1,0,269,275,2696,0,263,1,0,0,0,2,268,1,0,0,0,4,278,
        1,0,0,0,6,329,1,0,0,0,8,332,1,0,0,0,10,344,1,0,0,0,12,355,1,0,0,
        0,14,364,1,0,0,0,16,373,1,0,0,0,18,382,1,0,0,0,20,391,1,0,0,0,22,
        400,1,0,0,0,24,409,1,0,0,0,26,418,1,0,0,0,28,427,1,0,0,0,30,436,
        1,0,0,0,32,445,1,0,0,0,34,454,1,0,0,0,36,463,1,0,0,0,38,472,1,0,
        0,0,40,481,1,0,0,0,42,490,1,0,0,0,44,499,1,0,0,0,46,508,1,0,0,0,
        48,517,1,0,0,0,50,597,1,0,0,0,52,599,1,0,0,0,54,649,1,0,0,0,56,686,
        1,0,0,0,58,701,1,0,0,0,60,703,1,0,0,0,62,731,1,0,0,0,64,733,1,0,
        0,0,66,773,1,0,0,0,68,775,1,0,0,0,70,815,1,0,0,0,72,817,1,0,0,0,
        74,842,1,0,0,0,76,844,1,0,0,0,78,872,1,0,0,0,80,874,1,0,0,0,82,892,
        1,0,0,0,84,904,1,0,0,0,86,945,1,0,0,0,88,947,1,0,0,0,90,977,1,0,
        0,0,92,979,1,0,0,0,94,1022,1,0,0,0,96,1024,1,0,0,0,98,1069,1,0,0,
        0,100,1071,1,0,0,0,102,1080,1,0,0,0,104,1118,1,0,0,0,106,1120,1,
        0,0,0,108,1129,1,0,0,0,110,1133,1,0,0,0,112,1143,1,0,0,0,114,1146,
        1,0,0,0,116,1149,1,0,0,0,118,1152,1,0,0,0,120,1155,1,0,0,0,122,1165,
        1,0,0,0,124,1270,1,0,0,0,126,1272,1,0,0,0,128,1303,1,0,0,0,130,1305,
        1,0,0,0,132,1332,1,0,0,0,134,1334,1,0,0,0,136,1402,1,0,0,0,138,1404,
        1,0,0,0,140,1437,1,0,0,0,142,1439,1,0,0,0,144,1480,1,0,0,0,146,1504,
        1,0,0,0,148,1506,1,0,0,0,150,1549,1,0,0,0,152,1551,1,0,0,0,154,1619,
        1,0,0,0,156,1621,1,0,0,0,158,1664,1,0,0,0,160,1666,1,0,0,0,162,1702,
        1,0,0,0,164,1704,1,0,0,0,166,1726,1,0,0,0,168,1728,1,0,0,0,170,1752,
        1,0,0,0,172,1754,1,0,0,0,174,1773,1,0,0,0,176,1775,1,0,0,0,178,1846,
        1,0,0,0,180,1848,1,0,0,0,182,1852,1,0,0,0,184,1856,1,0,0,0,186,1864,
        1,0,0,0,188,2007,1,0,0,0,190,2020,1,0,0,0,192,2022,1,0,0,0,194,2024,
        1,0,0,0,196,2026,1,0,0,0,198,2028,1,0,0,0,200,2050,1,0,0,0,202,2060,
        1,0,0,0,204,2062,1,0,0,0,206,2067,1,0,0,0,208,2079,1,0,0,0,210,2200,
        1,0,0,0,212,2202,1,0,0,0,214,2207,1,0,0,0,216,2213,1,0,0,0,218,2218,
        1,0,0,0,220,262,3,2,1,0,221,262,3,4,2,0,222,262,3,6,3,0,223,262,
        3,8,4,0,224,262,3,10,5,0,225,262,3,12,6,0,226,262,3,14,7,0,227,262,
        3,16,8,0,228,262,3,18,9,0,229,262,3,20,10,0,230,262,3,22,11,0,231,
        262,3,24,12,0,232,262,3,26,13,0,233,262,3,28,14,0,234,262,3,30,15,
        0,235,262,3,32,16,0,236,262,3,34,17,0,237,262,3,36,18,0,238,262,
        3,38,19,0,239,262,3,40,20,0,240,262,3,42,21,0,241,262,3,44,22,0,
        242,262,3,46,23,0,243,262,3,48,24,0,244,262,3,198,99,0,245,262,3,
        200,100,0,246,262,3,214,107,0,247,262,3,52,26,0,248,262,3,60,30,
        0,249,262,3,64,32,0,250,262,3,82,41,0,251,262,3,88,44,0,252,262,
        3,176,88,0,253,262,3,180,90,0,254,262,3,96,48,0,255,262,3,92,46,
        0,256,262,3,130,65,0,257,262,3,142,71,0,258,262,3,156,78,0,259,262,
        3,160,80,0,260,262,3,106,53,0,261,220,1,0,0,0,261,221,1,0,0,0,261,
        222,1,0,0,0,261,223,1,0,0,0,261,224,1,0,0,0,261,225,1,0,0,0,261,
        226,1,0,0,0,261,227,1,0,0,0,261,228,1,0,0,0,261,229,1,0,0,0,261,
        230,1,0,0,0,261,231,1,0,0,0,261,232,1,0,0,0,261,233,1,0,0,0,261,
        234,1,0,0,0,261,235,1,0,0,0,261,236,1,0,0,0,261,237,1,0,0,0,261,
        238,1,0,0,0,261,239,1,0,0,0,261,240,1,0,0,0,261,241,1,0,0,0,261,
        242,1,0,0,0,261,243,1,0,0,0,261,244,1,0,0,0,261,245,1,0,0,0,261,
        246,1,0,0,0,261,247,1,0,0,0,261,248,1,0,0,0,261,249,1,0,0,0,261,
        250,1,0,0,0,261,251,1,0,0,0,261,252,1,0,0,0,261,253,1,0,0,0,261,
        254,1,0,0,0,261,255,1,0,0,0,261,256,1,0,0,0,261,257,1,0,0,0,261,
        258,1,0,0,0,261,259,1,0,0,0,261,260,1,0,0,0,262,265,1,0,0,0,263,
        261,1,0,0,0,263,264,1,0,0,0,264,266,1,0,0,0,265,263,1,0,0,0,266,
        267,5,0,0,1,267,1,1,0,0,0,268,272,5,3,0,0,269,271,3,50,25,0,270,
        269,1,0,0,0,271,274,1,0,0,0,272,270,1,0,0,0,272,273,1,0,0,0,273,
        275,1,0,0,0,274,272,1,0,0,0,275,276,5,2,0,0,276,3,1,0,0,0,277,279,
        5,36,0,0,278,277,1,0,0,0,278,279,1,0,0,0,279,280,1,0,0,0,280,284,
        5,37,0,0,281,283,3,58,29,0,282,281,1,0,0,0,283,286,1,0,0,0,284,282,
        1,0,0,0,284,285,1,0,0,0,285,287,1,0,0,0,286,284,1,0,0,0,287,288,
        5,2,0,0,288,5,1,0,0,0,289,293,5,39,0,0,290,292,3,62,31,0,291,290,
        1,0,0,0,292,295,1,0,0,0,293,291,1,0,0,0,293,294,1,0,0,0,294,296,
        1,0,0,0,295,293,1,0,0,0,296,330,5,2,0,0,297,301,7,0,0,0,298,300,
        3,66,33,0,299,298,1,0,0,0,300,303,1,0,0,0,301,299,1,0,0,0,301,302,
        1,0,0,0,302,304,1,0,0,0,303,301,1,0,0,0,304,330,5,2,0,0,305,309,
        5,47,0,0,306,308,3,70,35,0,307,306,1,0,0,0,308,311,1,0,0,0,309,307,
        1,0,0,0,309,310,1,0,0,0,310,312,1,0,0,0,311,309,1,0,0,0,312,330,
        5,2,0,0,313,317,5,50,0,0,314,316,3,74,37,0,315,314,1,0,0,0,316,319,
        1,0,0,0,317,315,1,0,0,0,317,318,1,0,0,0,318,320,1,0,0,0,319,317,
        1,0,0,0,320,330,5,2,0,0,321,325,5,51,0,0,322,324,3,78,39,0,323,322,
        1,0,0,0,324,327,1,0,0,0,325,323,1,0,0,0,325,326,1,0,0,0,326,328,
        1,0,0,0,327,325,1,0,0,0,328,330,5,2,0,0,329,289,1,0,0,0,329,297,
        1,0,0,0,329,305,1,0,0,0,329,313,1,0,0,0,329,321,1,0,0,0,330,7,1,
        0,0,0,331,333,5,36,0,0,332,331,1,0,0,0,332,333,1,0,0,0,333,334,1,
        0,0,0,334,338,5,52,0,0,335,337,3,82,41,0,336,335,1,0,0,0,337,340,
        1,0,0,0,338,336,1,0,0,0,338,339,1,0,0,0,339,341,1,0,0,0,340,338,
        1,0,0,0,341,342,5,2,0,0,342,9,1,0,0,0,343,345,5,36,0,0,344,343,1,
        0,0,0,344,345,1,0,0,0,345,346,1,0,0,0,346,350,5,57,0,0,347,349,3,
        86,43,0,348,347,1,0,0,0,349,352,1,0,0,0,350,348,1,0,0,0,350,351,
        1,0,0,0,351,353,1,0,0,0,352,350,1,0,0,0,353,354,5,2,0,0,354,11,1,
        0,0,0,355,359,5,60,0,0,356,358,3,90,45,0,357,356,1,0,0,0,358,361,
        1,0,0,0,359,357,1,0,0,0,359,360,1,0,0,0,360,362,1,0,0,0,361,359,
        1,0,0,0,362,363,5,2,0,0,363,13,1,0,0,0,364,368,5,64,0,0,365,367,
        3,94,47,0,366,365,1,0,0,0,367,370,1,0,0,0,368,366,1,0,0,0,368,369,
        1,0,0,0,369,371,1,0,0,0,370,368,1,0,0,0,371,372,5,2,0,0,372,15,1,
        0,0,0,373,377,5,66,0,0,374,376,3,98,49,0,375,374,1,0,0,0,376,379,
        1,0,0,0,377,375,1,0,0,0,377,378,1,0,0,0,378,380,1,0,0,0,379,377,
        1,0,0,0,380,381,5,2,0,0,381,17,1,0,0,0,382,386,5,70,0,0,383,385,
        3,104,52,0,384,383,1,0,0,0,385,388,1,0,0,0,386,384,1,0,0,0,386,387,
        1,0,0,0,387,389,1,0,0,0,388,386,1,0,0,0,389,390,5,2,0,0,390,19,1,
        0,0,0,391,395,5,78,0,0,392,394,3,124,62,0,393,392,1,0,0,0,394,397,
        1,0,0,0,395,393,1,0,0,0,395,396,1,0,0,0,396,398,1,0,0,0,397,395,
        1,0,0,0,398,399,5,2,0,0,399,21,1,0,0,0,400,404,5,85,0,0,401,403,
        3,128,64,0,402,401,1,0,0,0,403,406,1,0,0,0,404,402,1,0,0,0,404,405,
        1,0,0,0,405,407,1,0,0,0,406,404,1,0,0,0,407,408,5,2,0,0,408,23,1,
        0,0,0,409,413,5,86,0,0,410,412,3,132,66,0,411,410,1,0,0,0,412,415,
        1,0,0,0,413,411,1,0,0,0,413,414,1,0,0,0,414,416,1,0,0,0,415,413,
        1,0,0,0,416,417,5,2,0,0,417,25,1,0,0,0,418,422,5,87,0,0,419,421,
        3,136,68,0,420,419,1,0,0,0,421,424,1,0,0,0,422,420,1,0,0,0,422,423,
        1,0,0,0,423,425,1,0,0,0,424,422,1,0,0,0,425,426,5,2,0,0,426,27,1,
        0,0,0,427,431,5,91,0,0,428,430,3,140,70,0,429,428,1,0,0,0,430,433,
        1,0,0,0,431,429,1,0,0,0,431,432,1,0,0,0,432,434,1,0,0,0,433,431,
        1,0,0,0,434,435,5,2,0,0,435,29,1,0,0,0,436,440,5,93,0,0,437,439,
        3,144,72,0,438,437,1,0,0,0,439,442,1,0,0,0,440,438,1,0,0,0,440,441,
        1,0,0,0,441,443,1,0,0,0,442,440,1,0,0,0,443,444,5,2,0,0,444,31,1,
        0,0,0,445,449,5,94,0,0,446,448,3,146,73,0,447,446,1,0,0,0,448,451,
        1,0,0,0,449,447,1,0,0,0,449,450,1,0,0,0,450,452,1,0,0,0,451,449,
        1,0,0,0,452,453,5,2,0,0,453,33,1,0,0,0,454,458,5,95,0,0,455,457,
        3,150,75,0,456,455,1,0,0,0,457,460,1,0,0,0,458,456,1,0,0,0,458,459,
        1,0,0,0,459,461,1,0,0,0,460,458,1,0,0,0,461,462,5,2,0,0,462,35,1,
        0,0,0,463,467,5,98,0,0,464,466,3,154,77,0,465,464,1,0,0,0,466,469,
        1,0,0,0,467,465,1,0,0,0,467,468,1,0,0,0,468,470,1,0,0,0,469,467,
        1,0,0,0,470,471,5,2,0,0,471,37,1,0,0,0,472,476,5,103,0,0,473,475,
        3,158,79,0,474,473,1,0,0,0,475,478,1,0,0,0,476,474,1,0,0,0,476,477,
        1,0,0,0,477,479,1,0,0,0,478,476,1,0,0,0,479,480,5,2,0,0,480,39,1,
        0,0,0,481,485,5,114,0,0,482,484,3,162,81,0,483,482,1,0,0,0,484,487,
        1,0,0,0,485,483,1,0,0,0,485,486,1,0,0,0,486,488,1,0,0,0,487,485,
        1,0,0,0,488,489,5,2,0,0,489,41,1,0,0,0,490,494,5,115,0,0,491,493,
        3,166,83,0,492,491,1,0,0,0,493,496,1,0,0,0,494,492,1,0,0,0,494,495,
        1,0,0,0,495,497,1,0,0,0,496,494,1,0,0,0,497,498,5,2,0,0,498,43,1,
        0,0,0,499,503,5,116,0,0,500,502,3,170,85,0,501,500,1,0,0,0,502,505,
        1,0,0,0,503,501,1,0,0,0,503,504,1,0,0,0,504,506,1,0,0,0,505,503,
        1,0,0,0,506,507,5,2,0,0,507,45,1,0,0,0,508,512,5,188,0,0,509,511,
        3,174,87,0,510,509,1,0,0,0,511,514,1,0,0,0,512,510,1,0,0,0,512,513,
        1,0,0,0,513,515,1,0,0,0,514,512,1,0,0,0,515,516,5,2,0,0,516,47,1,
        0,0,0,517,521,5,189,0,0,518,520,3,178,89,0,519,518,1,0,0,0,520,523,
        1,0,0,0,521,519,1,0,0,0,521,522,1,0,0,0,522,524,1,0,0,0,523,521,
        1,0,0,0,524,525,5,2,0,0,525,49,1,0,0,0,526,598,3,52,26,0,527,528,
        5,5,0,0,528,529,5,185,0,0,529,598,3,194,97,0,530,531,5,6,0,0,531,
        532,5,210,0,0,532,598,5,209,0,0,533,534,5,7,0,0,534,535,5,185,0,
        0,535,598,3,194,97,0,536,538,5,8,0,0,537,539,5,193,0,0,538,537,1,
        0,0,0,538,539,1,0,0,0,539,540,1,0,0,0,540,598,3,194,97,0,541,542,
        5,9,0,0,542,598,5,185,0,0,543,544,5,10,0,0,544,598,5,185,0,0,545,
        546,5,11,0,0,546,547,5,185,0,0,547,548,5,185,0,0,548,598,3,194,97,
        0,549,550,5,12,0,0,550,551,5,185,0,0,551,598,5,178,0,0,552,553,5,
        13,0,0,553,554,5,185,0,0,554,598,5,178,0,0,555,557,5,14,0,0,556,
        558,5,193,0,0,557,556,1,0,0,0,557,558,1,0,0,0,558,559,1,0,0,0,559,
        598,5,178,0,0,560,561,5,15,0,0,561,562,5,214,0,0,562,598,5,213,0,
        0,563,564,5,16,0,0,564,565,3,54,27,0,565,566,5,2,0,0,566,598,1,0,
        0,0,567,568,5,17,0,0,568,570,5,18,0,0,569,571,5,193,0,0,570,569,
        1,0,0,0,570,571,1,0,0,0,571,572,1,0,0,0,572,598,3,194,97,0,573,598,
        5,19,0,0,574,575,5,20,0,0,575,576,5,185,0,0,576,598,3,194,97,0,577,
        578,5,21,0,0,578,579,5,185,0,0,579,598,3,194,97,0,580,581,5,22,0,
        0,581,582,5,185,0,0,582,598,3,194,97,0,583,584,5,23,0,0,584,585,
        5,185,0,0,585,598,3,194,97,0,586,587,5,24,0,0,587,588,5,185,0,0,
        588,598,3,194,97,0,589,590,5,25,0,0,590,591,5,185,0,0,591,598,3,
        194,97,0,592,594,5,26,0,0,593,595,5,193,0,0,594,593,1,0,0,0,594,
        595,1,0,0,0,595,596,1,0,0,0,596,598,3,194,97,0,597,526,1,0,0,0,597,
        527,1,0,0,0,597,530,1,0,0,0,597,533,1,0,0,0,597,536,1,0,0,0,597,
        541,1,0,0,0,597,543,1,0,0,0,597,545,1,0,0,0,597,549,1,0,0,0,597,
        552,1,0,0,0,597,555,1,0,0,0,597,560,1,0,0,0,597,563,1,0,0,0,597,
        567,1,0,0,0,597,573,1,0,0,0,597,574,1,0,0,0,597,577,1,0,0,0,597,
        580,1,0,0,0,597,583,1,0,0,0,597,586,1,0,0,0,597,589,1,0,0,0,597,
        592,1,0,0,0,598,51,1,0,0,0,599,600,5,4,0,0,600,601,3,182,91,0,601,
        602,3,182,91,0,602,604,3,190,95,0,603,605,3,190,95,0,604,603,1,0,
        0,0,604,605,1,0,0,0,605,607,1,0,0,0,606,608,3,190,95,0,607,606,1,
        0,0,0,607,608,1,0,0,0,608,612,1,0,0,0,609,611,3,56,28,0,610,609,
        1,0,0,0,611,614,1,0,0,0,612,610,1,0,0,0,612,613,1,0,0,0,613,632,
        1,0,0,0,614,612,1,0,0,0,615,617,5,173,0,0,616,618,5,4,0,0,617,616,
        1,0,0,0,617,618,1,0,0,0,618,619,1,0,0,0,619,620,3,182,91,0,620,622,
        3,182,91,0,621,623,3,190,95,0,622,621,1,0,0,0,622,623,1,0,0,0,623,
        625,1,0,0,0,624,626,3,190,95,0,625,624,1,0,0,0,625,626,1,0,0,0,626,
        628,1,0,0,0,627,629,3,190,95,0,628,627,1,0,0,0,628,629,1,0,0,0,629,
        631,1,0,0,0,630,615,1,0,0,0,631,634,1,0,0,0,632,630,1,0,0,0,632,
        633,1,0,0,0,633,53,1,0,0,0,634,632,1,0,0,0,635,637,5,27,0,0,636,
        638,5,193,0,0,637,636,1,0,0,0,637,638,1,0,0,0,638,639,1,0,0,0,639,
        650,3,194,97,0,640,642,5,28,0,0,641,643,5,193,0,0,642,641,1,0,0,
        0,642,643,1,0,0,0,643,644,1,0,0,0,644,650,3,194,97,0,645,646,5,29,
        0,0,646,650,3,182,91,0,647,648,5,30,0,0,648,650,3,182,91,0,649,635,
        1,0,0,0,649,640,1,0,0,0,649,645,1,0,0,0,649,647,1,0,0,0,650,55,1,
        0,0,0,651,653,5,31,0,0,652,654,5,193,0,0,653,652,1,0,0,0,653,654,
        1,0,0,0,654,655,1,0,0,0,655,687,3,196,98,0,656,658,5,32,0,0,657,
        659,5,193,0,0,658,657,1,0,0,0,658,659,1,0,0,0,659,660,1,0,0,0,660,
        687,3,196,98,0,661,663,5,56,0,0,662,664,5,193,0,0,663,662,1,0,0,
        0,663,664,1,0,0,0,664,665,1,0,0,0,665,687,3,196,98,0,666,668,5,33,
        0,0,667,669,5,193,0,0,668,667,1,0,0,0,668,669,1,0,0,0,669,670,1,
        0,0,0,670,687,3,196,98,0,671,673,5,34,0,0,672,674,5,193,0,0,673,
        672,1,0,0,0,673,674,1,0,0,0,674,675,1,0,0,0,675,687,3,196,98,0,676,
        678,5,35,0,0,677,679,5,193,0,0,678,677,1,0,0,0,678,679,1,0,0,0,679,
        680,1,0,0,0,680,687,3,196,98,0,681,683,5,48,0,0,682,684,5,193,0,
        0,683,682,1,0,0,0,683,684,1,0,0,0,684,685,1,0,0,0,685,687,3,196,
        98,0,686,651,1,0,0,0,686,656,1,0,0,0,686,661,1,0,0,0,686,666,1,0,
        0,0,686,671,1,0,0,0,686,676,1,0,0,0,686,681,1,0,0,0,687,57,1,0,0,
        0,688,702,3,60,30,0,689,702,3,218,109,0,690,692,5,38,0,0,691,693,
        5,193,0,0,692,691,1,0,0,0,692,693,1,0,0,0,693,694,1,0,0,0,694,702,
        5,178,0,0,695,702,5,19,0,0,696,698,5,21,0,0,697,699,5,193,0,0,698,
        697,1,0,0,0,698,699,1,0,0,0,699,700,1,0,0,0,700,702,3,194,97,0,701,
        688,1,0,0,0,701,689,1,0,0,0,701,690,1,0,0,0,701,695,1,0,0,0,701,
        696,1,0,0,0,702,59,1,0,0,0,703,704,5,4,0,0,704,705,3,182,91,0,705,
        706,3,182,91,0,706,707,3,182,91,0,707,708,3,182,91,0,708,709,3,190,
        95,0,709,710,3,190,95,0,710,711,3,190,95,0,711,712,5,178,0,0,712,
        61,1,0,0,0,713,732,3,64,32,0,714,715,5,9,0,0,715,732,5,185,0,0,716,
        717,5,40,0,0,717,718,3,194,97,0,718,719,3,194,97,0,719,720,3,194,
        97,0,720,732,1,0,0,0,721,722,5,41,0,0,722,732,3,194,97,0,723,724,
        5,14,0,0,724,732,5,178,0,0,725,726,5,15,0,0,726,732,5,213,0,0,727,
        728,5,17,0,0,728,729,5,18,0,0,729,732,3,194,97,0,730,732,5,19,0,
        0,731,713,1,0,0,0,731,714,1,0,0,0,731,716,1,0,0,0,731,721,1,0,0,
        0,731,723,1,0,0,0,731,725,1,0,0,0,731,727,1,0,0,0,731,730,1,0,0,
        0,732,63,1,0,0,0,733,734,5,4,0,0,734,735,3,182,91,0,735,736,3,182,
        91,0,736,737,3,182,91,0,737,738,3,182,91,0,738,739,3,182,91,0,739,
        740,3,182,91,0,740,742,3,190,95,0,741,743,3,190,95,0,742,741,1,0,
        0,0,742,743,1,0,0,0,743,745,1,0,0,0,744,746,3,190,95,0,745,744,1,
        0,0,0,745,746,1,0,0,0,746,65,1,0,0,0,747,774,3,68,34,0,748,749,5,
        9,0,0,749,774,5,185,0,0,750,751,5,44,0,0,751,774,5,216,0,0,752,753,
        5,21,0,0,753,774,3,194,97,0,754,755,5,45,0,0,755,774,5,179,0,0,756,
        757,5,46,0,0,757,774,5,209,0,0,758,759,5,40,0,0,759,760,3,194,97,
        0,760,761,3,194,97,0,761,762,3,194,97,0,762,774,1,0,0,0,763,764,
        5,41,0,0,764,774,3,194,97,0,765,766,5,14,0,0,766,774,5,178,0,0,767,
        768,5,15,0,0,768,774,5,213,0,0,769,770,5,17,0,0,770,771,5,18,0,0,
        771,774,3,194,97,0,772,774,5,19,0,0,773,747,1,0,0,0,773,748,1,0,
        0,0,773,750,1,0,0,0,773,752,1,0,0,0,773,754,1,0,0,0,773,756,1,0,
        0,0,773,758,1,0,0,0,773,763,1,0,0,0,773,765,1,0,0,0,773,767,1,0,
        0,0,773,769,1,0,0,0,773,772,1,0,0,0,774,67,1,0,0,0,775,776,5,4,0,
        0,776,777,3,182,91,0,777,778,3,182,91,0,778,779,3,182,91,0,779,780,
        3,182,91,0,780,781,3,182,91,0,781,782,3,182,91,0,782,783,3,190,95,
        0,783,790,3,190,95,0,784,791,3,190,95,0,785,786,3,190,95,0,786,787,
        3,190,95,0,787,788,3,190,95,0,788,789,3,190,95,0,789,791,1,0,0,0,
        790,784,1,0,0,0,790,785,1,0,0,0,790,791,1,0,0,0,791,69,1,0,0,0,792,
        816,3,72,36,0,793,795,5,48,0,0,794,796,5,193,0,0,795,794,1,0,0,0,
        795,796,1,0,0,0,796,797,1,0,0,0,797,816,5,178,0,0,798,799,5,9,0,
        0,799,816,5,185,0,0,800,801,5,41,0,0,801,802,3,194,97,0,802,803,
        3,194,97,0,803,816,1,0,0,0,804,805,5,14,0,0,805,816,5,178,0,0,806,
        808,5,49,0,0,807,809,5,193,0,0,808,807,1,0,0,0,808,809,1,0,0,0,809,
        810,1,0,0,0,810,816,5,178,0,0,811,812,5,17,0,0,812,813,5,18,0,0,
        813,816,3,194,97,0,814,816,5,19,0,0,815,792,1,0,0,0,815,793,1,0,
        0,0,815,798,1,0,0,0,815,800,1,0,0,0,815,804,1,0,0,0,815,806,1,0,
        0,0,815,811,1,0,0,0,815,814,1,0,0,0,816,71,1,0,0,0,817,818,5,4,0,
        0,818,819,3,182,91,0,819,820,3,182,91,0,820,821,3,182,91,0,821,822,
        3,182,91,0,822,823,3,190,95,0,823,827,3,190,95,0,824,825,3,190,95,
        0,825,826,3,190,95,0,826,828,1,0,0,0,827,824,1,0,0,0,827,828,1,0,
        0,0,828,73,1,0,0,0,829,843,3,76,38,0,830,831,5,9,0,0,831,843,5,185,
        0,0,832,833,5,40,0,0,833,843,3,194,97,0,834,835,5,14,0,0,835,843,
        5,178,0,0,836,837,5,15,0,0,837,843,5,213,0,0,838,839,5,17,0,0,839,
        840,5,18,0,0,840,843,3,194,97,0,841,843,5,19,0,0,842,829,1,0,0,0,
        842,830,1,0,0,0,842,832,1,0,0,0,842,834,1,0,0,0,842,836,1,0,0,0,
        842,838,1,0,0,0,842,841,1,0,0,0,843,75,1,0,0,0,844,845,5,4,0,0,845,
        846,3,182,91,0,846,847,3,182,91,0,847,849,3,190,95,0,848,850,3,190,
        95,0,849,848,1,0,0,0,849,850,1,0,0,0,850,77,1,0,0,0,851,873,3,80,
        40,0,852,853,5,9,0,0,853,873,5,185,0,0,854,855,5,40,0,0,855,856,
        3,194,97,0,856,857,3,194,97,0,857,858,3,194,97,0,858,859,3,194,97,
        0,859,873,1,0,0,0,860,861,5,41,0,0,861,873,3,194,97,0,862,863,5,
        14,0,0,863,873,5,178,0,0,864,865,5,15,0,0,865,873,5,213,0,0,866,
        867,5,17,0,0,867,868,5,18,0,0,868,873,3,194,97,0,869,873,5,19,0,
        0,870,871,5,44,0,0,871,873,5,217,0,0,872,851,1,0,0,0,872,852,1,0,
        0,0,872,854,1,0,0,0,872,860,1,0,0,0,872,862,1,0,0,0,872,864,1,0,
        0,0,872,866,1,0,0,0,872,869,1,0,0,0,872,870,1,0,0,0,873,79,1,0,0,
        0,874,875,5,4,0,0,875,876,3,182,91,0,876,877,3,182,91,0,877,878,
        3,182,91,0,878,879,3,182,91,0,879,881,3,190,95,0,880,882,3,190,95,
        0,881,880,1,0,0,0,881,882,1,0,0,0,882,81,1,0,0,0,883,887,5,53,0,
        0,884,886,3,84,42,0,885,884,1,0,0,0,886,889,1,0,0,0,887,885,1,0,
        0,0,887,888,1,0,0,0,888,890,1,0,0,0,889,887,1,0,0,0,890,893,5,2,
        0,0,891,893,5,54,0,0,892,883,1,0,0,0,892,891,1,0,0,0,893,83,1,0,
        0,0,894,896,5,55,0,0,895,897,5,193,0,0,896,895,1,0,0,0,896,897,1,
        0,0,0,897,898,1,0,0,0,898,905,3,182,91,0,899,901,5,56,0,0,900,902,
        5,193,0,0,901,900,1,0,0,0,901,902,1,0,0,0,902,903,1,0,0,0,903,905,
        3,194,97,0,904,894,1,0,0,0,904,899,1,0,0,0,905,85,1,0,0,0,906,908,
        5,58,0,0,907,909,5,193,0,0,908,907,1,0,0,0,908,909,1,0,0,0,909,910,
        1,0,0,0,910,946,5,178,0,0,911,913,5,59,0,0,912,914,5,193,0,0,913,
        912,1,0,0,0,913,914,1,0,0,0,914,915,1,0,0,0,915,941,5,190,0,0,916,
        918,3,194,97,0,917,919,5,176,0,0,918,917,1,0,0,0,918,919,1,0,0,0,
        919,920,1,0,0,0,920,922,3,194,97,0,921,923,5,176,0,0,922,921,1,0,
        0,0,922,923,1,0,0,0,923,924,1,0,0,0,924,925,3,194,97,0,925,942,1,
        0,0,0,926,928,5,171,0,0,927,929,5,193,0,0,928,927,1,0,0,0,928,929,
        1,0,0,0,929,930,1,0,0,0,930,932,3,182,91,0,931,933,5,176,0,0,932,
        931,1,0,0,0,932,933,1,0,0,0,933,939,1,0,0,0,934,936,5,172,0,0,935,
        937,5,193,0,0,936,935,1,0,0,0,936,937,1,0,0,0,937,938,1,0,0,0,938,
        940,3,182,91,0,939,934,1,0,0,0,939,940,1,0,0,0,940,942,1,0,0,0,941,
        916,1,0,0,0,941,926,1,0,0,0,942,943,1,0,0,0,943,944,5,191,0,0,944,
        946,1,0,0,0,945,906,1,0,0,0,945,911,1,0,0,0,946,87,1,0,0,0,947,948,
        5,4,0,0,948,949,3,182,91,0,949,950,3,190,95,0,950,951,3,190,95,0,
        951,952,3,190,95,0,952,89,1,0,0,0,953,978,3,92,46,0,954,955,5,9,
        0,0,955,978,5,185,0,0,956,957,5,61,0,0,957,958,5,178,0,0,958,978,
        3,194,97,0,959,960,5,41,0,0,960,978,3,194,97,0,961,962,5,14,0,0,
        962,978,5,178,0,0,963,964,5,17,0,0,964,965,5,18,0,0,965,969,3,194,
        97,0,966,970,5,134,0,0,967,968,5,9,0,0,968,970,5,185,0,0,969,966,
        1,0,0,0,969,967,1,0,0,0,970,978,1,0,0,0,971,978,5,19,0,0,972,973,
        5,62,0,0,973,974,3,194,97,0,974,975,5,178,0,0,975,978,1,0,0,0,976,
        978,5,63,0,0,977,953,1,0,0,0,977,954,1,0,0,0,977,956,1,0,0,0,977,
        959,1,0,0,0,977,961,1,0,0,0,977,963,1,0,0,0,977,971,1,0,0,0,977,
        972,1,0,0,0,977,976,1,0,0,0,978,91,1,0,0,0,979,980,5,4,0,0,980,981,
        3,182,91,0,981,982,3,182,91,0,982,93,1,0,0,0,983,1023,3,96,48,0,
        984,985,5,9,0,0,985,1023,5,185,0,0,986,987,5,40,0,0,987,988,3,194,
        97,0,988,989,3,194,97,0,989,990,3,194,97,0,990,991,3,194,97,0,991,
        1023,1,0,0,0,992,994,5,48,0,0,993,995,5,193,0,0,994,993,1,0,0,0,
        994,995,1,0,0,0,995,996,1,0,0,0,996,1023,5,178,0,0,997,998,5,65,
        0,0,998,1023,5,178,0,0,999,1000,5,41,0,0,1000,1002,3,194,97,0,1001,
        1003,3,194,97,0,1002,1001,1,0,0,0,1002,1003,1,0,0,0,1003,1023,1,
        0,0,0,1004,1005,5,14,0,0,1005,1023,5,178,0,0,1006,1008,5,49,0,0,
        1007,1009,5,193,0,0,1008,1007,1,0,0,0,1008,1009,1,0,0,0,1009,1010,
        1,0,0,0,1010,1023,5,178,0,0,1011,1012,5,15,0,0,1012,1023,5,213,0,
        0,1013,1014,5,17,0,0,1014,1015,5,18,0,0,1015,1019,3,194,97,0,1016,
        1020,5,134,0,0,1017,1018,5,9,0,0,1018,1020,5,185,0,0,1019,1016,1,
        0,0,0,1019,1017,1,0,0,0,1020,1023,1,0,0,0,1021,1023,5,19,0,0,1022,
        983,1,0,0,0,1022,984,1,0,0,0,1022,986,1,0,0,0,1022,992,1,0,0,0,1022,
        997,1,0,0,0,1022,999,1,0,0,0,1022,1004,1,0,0,0,1022,1006,1,0,0,0,
        1022,1011,1,0,0,0,1022,1013,1,0,0,0,1022,1021,1,0,0,0,1023,95,1,
        0,0,0,1024,1025,5,4,0,0,1025,1026,3,182,91,0,1026,1027,3,182,91,
        0,1027,1028,3,182,91,0,1028,1034,3,182,91,0,1029,1030,3,182,91,0,
        1030,1031,3,182,91,0,1031,1032,3,182,91,0,1032,1033,3,182,91,0,1033,
        1035,1,0,0,0,1034,1029,1,0,0,0,1034,1035,1,0,0,0,1035,1036,1,0,0,
        0,1036,1037,3,190,95,0,1037,1041,3,190,95,0,1038,1039,3,190,95,0,
        1039,1040,3,190,95,0,1040,1042,1,0,0,0,1041,1038,1,0,0,0,1041,1042,
        1,0,0,0,1042,97,1,0,0,0,1043,1070,3,100,50,0,1044,1045,5,9,0,0,1045,
        1070,5,185,0,0,1046,1047,5,61,0,0,1047,1048,5,178,0,0,1048,1049,
        5,178,0,0,1049,1050,3,194,97,0,1050,1051,3,194,97,0,1051,1052,3,
        194,97,0,1052,1070,1,0,0,0,1053,1054,5,41,0,0,1054,1070,3,194,97,
        0,1055,1056,5,14,0,0,1056,1070,5,178,0,0,1057,1058,5,67,0,0,1058,
        1070,3,194,97,0,1059,1060,5,68,0,0,1060,1070,3,194,97,0,1061,1062,
        5,15,0,0,1062,1070,5,213,0,0,1063,1064,5,17,0,0,1064,1065,5,18,0,
        0,1065,1070,3,194,97,0,1066,1070,3,102,51,0,1067,1070,5,19,0,0,1068,
        1070,5,63,0,0,1069,1043,1,0,0,0,1069,1044,1,0,0,0,1069,1046,1,0,
        0,0,1069,1053,1,0,0,0,1069,1055,1,0,0,0,1069,1057,1,0,0,0,1069,1059,
        1,0,0,0,1069,1061,1,0,0,0,1069,1063,1,0,0,0,1069,1066,1,0,0,0,1069,
        1067,1,0,0,0,1069,1068,1,0,0,0,1070,99,1,0,0,0,1071,1072,5,4,0,0,
        1072,1073,3,182,91,0,1073,1074,3,182,91,0,1074,1075,3,182,91,0,1075,
        1076,3,182,91,0,1076,1077,3,182,91,0,1077,1078,3,190,95,0,1078,1079,
        3,190,95,0,1079,101,1,0,0,0,1080,1081,5,69,0,0,1081,1082,3,182,91,
        0,1082,1083,3,190,95,0,1083,1084,3,190,95,0,1084,103,1,0,0,0,1085,
        1119,3,106,53,0,1086,1119,3,108,54,0,1087,1119,3,110,55,0,1088,1119,
        3,112,56,0,1089,1119,3,114,57,0,1090,1119,3,116,58,0,1091,1119,3,
        118,59,0,1092,1119,3,120,60,0,1093,1119,3,122,61,0,1094,1095,5,9,
        0,0,1095,1119,5,185,0,0,1096,1097,5,77,0,0,1097,1119,3,194,97,0,
        1098,1099,5,65,0,0,1099,1119,5,178,0,0,1100,1101,5,41,0,0,1101,1103,
        3,194,97,0,1102,1104,3,194,97,0,1103,1102,1,0,0,0,1103,1104,1,0,
        0,0,1104,1119,1,0,0,0,1105,1106,5,15,0,0,1106,1119,5,213,0,0,1107,
        1108,5,17,0,0,1108,1109,5,18,0,0,1109,1113,3,194,97,0,1110,1114,
        5,134,0,0,1111,1112,5,9,0,0,1112,1114,5,185,0,0,1113,1110,1,0,0,
        0,1113,1111,1,0,0,0,1114,1115,1,0,0,0,1115,1116,5,185,0,0,1116,1119,
        1,0,0,0,1117,1119,5,19,0,0,1118,1085,1,0,0,0,1118,1086,1,0,0,0,1118,
        1087,1,0,0,0,1118,1088,1,0,0,0,1118,1089,1,0,0,0,1118,1090,1,0,0,
        0,1118,1091,1,0,0,0,1118,1092,1,0,0,0,1118,1093,1,0,0,0,1118,1094,
        1,0,0,0,1118,1096,1,0,0,0,1118,1098,1,0,0,0,1118,1100,1,0,0,0,1118,
        1105,1,0,0,0,1118,1107,1,0,0,0,1118,1117,1,0,0,0,1119,105,1,0,0,
        0,1120,1121,5,71,0,0,1121,1123,3,182,91,0,1122,1124,3,182,91,0,1123,
        1122,1,0,0,0,1123,1124,1,0,0,0,1124,1125,1,0,0,0,1125,1127,3,190,
        95,0,1126,1128,3,190,95,0,1127,1126,1,0,0,0,1127,1128,1,0,0,0,1128,
        107,1,0,0,0,1129,1130,5,69,0,0,1130,1131,3,182,91,0,1131,1132,3,
        190,95,0,1132,109,1,0,0,0,1133,1134,5,51,0,0,1134,1135,3,182,91,
        0,1135,1136,3,182,91,0,1136,1137,3,182,91,0,1137,1139,5,185,0,0,
        1138,1140,5,179,0,0,1139,1138,1,0,0,0,1139,1140,1,0,0,0,1140,1141,
        1,0,0,0,1141,1142,5,185,0,0,1142,111,1,0,0,0,1143,1144,5,72,0,0,
        1144,1145,3,182,91,0,1145,113,1,0,0,0,1146,1147,5,66,0,0,1147,1148,
        3,182,91,0,1148,115,1,0,0,0,1149,1150,5,73,0,0,1150,1151,3,182,91,
        0,1151,117,1,0,0,0,1152,1153,5,74,0,0,1153,1154,3,182,91,0,1154,
        119,1,0,0,0,1155,1156,5,75,0,0,1156,1157,5,185,0,0,1157,1158,3,182,
        91,0,1158,1159,3,182,91,0,1159,1160,3,182,91,0,1160,1161,3,182,91,
        0,1161,1163,3,182,91,0,1162,1164,3,182,91,0,1163,1162,1,0,0,0,1163,
        1164,1,0,0,0,1164,121,1,0,0,0,1165,1166,5,76,0,0,1166,1167,3,182,
        91,0,1167,123,1,0,0,0,1168,1271,3,126,63,0,1169,1170,5,9,0,0,1170,
        1271,5,185,0,0,1171,1172,5,27,0,0,1172,1271,3,194,97,0,1173,1174,
        5,41,0,0,1174,1271,3,194,97,0,1175,1176,5,79,0,0,1176,1177,3,194,
        97,0,1177,1178,3,194,97,0,1178,1183,3,194,97,0,1179,1180,3,194,97,
        0,1180,1181,3,194,97,0,1181,1182,3,194,97,0,1182,1184,1,0,0,0,1183,
        1179,1,0,0,0,1183,1184,1,0,0,0,1184,1189,1,0,0,0,1185,1186,3,194,
        97,0,1186,1187,3,194,97,0,1187,1188,3,194,97,0,1188,1190,1,0,0,0,
        1189,1185,1,0,0,0,1189,1190,1,0,0,0,1190,1195,1,0,0,0,1191,1192,
        3,194,97,0,1192,1193,3,194,97,0,1193,1194,3,194,97,0,1194,1196,1,
        0,0,0,1195,1191,1,0,0,0,1195,1196,1,0,0,0,1196,1271,1,0,0,0,1197,
        1198,5,14,0,0,1198,1271,5,178,0,0,1199,1200,5,80,0,0,1200,1201,3,
        194,97,0,1201,1202,3,194,97,0,1202,1207,3,194,97,0,1203,1204,3,194,
        97,0,1204,1205,3,194,97,0,1205,1206,3,194,97,0,1206,1208,1,0,0,0,
        1207,1203,1,0,0,0,1207,1208,1,0,0,0,1208,1213,1,0,0,0,1209,1210,
        3,194,97,0,1210,1211,3,194,97,0,1211,1212,3,194,97,0,1212,1214,1,
        0,0,0,1213,1209,1,0,0,0,1213,1214,1,0,0,0,1214,1219,1,0,0,0,1215,
        1216,3,194,97,0,1216,1217,3,194,97,0,1217,1218,3,194,97,0,1218,1220,
        1,0,0,0,1219,1215,1,0,0,0,1219,1220,1,0,0,0,1220,1271,1,0,0,0,1221,
        1222,5,17,0,0,1222,1223,5,18,0,0,1223,1227,3,194,97,0,1224,1228,
        5,134,0,0,1225,1226,5,9,0,0,1226,1228,5,185,0,0,1227,1224,1,0,0,
        0,1227,1225,1,0,0,0,1228,1271,1,0,0,0,1229,1230,5,81,0,0,1230,1231,
        3,194,97,0,1231,1232,3,194,97,0,1232,1237,3,194,97,0,1233,1234,3,
        194,97,0,1234,1235,3,194,97,0,1235,1236,3,194,97,0,1236,1238,1,0,
        0,0,1237,1233,1,0,0,0,1237,1238,1,0,0,0,1238,1243,1,0,0,0,1239,1240,
        3,194,97,0,1240,1241,3,194,97,0,1241,1242,3,194,97,0,1242,1244,1,
        0,0,0,1243,1239,1,0,0,0,1243,1244,1,0,0,0,1244,1249,1,0,0,0,1245,
        1246,3,194,97,0,1246,1247,3,194,97,0,1247,1248,3,194,97,0,1248,1250,
        1,0,0,0,1249,1245,1,0,0,0,1249,1250,1,0,0,0,1250,1271,1,0,0,0,1251,
        1271,5,19,0,0,1252,1253,5,21,0,0,1253,1271,3,194,97,0,1254,1255,
        5,82,0,0,1255,1271,5,220,0,0,1256,1257,5,62,0,0,1257,1258,5,84,0,
        0,1258,1260,3,194,97,0,1259,1261,3,194,97,0,1260,1259,1,0,0,0,1260,
        1261,1,0,0,0,1261,1263,1,0,0,0,1262,1264,3,194,97,0,1263,1262,1,
        0,0,0,1263,1264,1,0,0,0,1264,1266,1,0,0,0,1265,1267,3,194,97,0,1266,
        1265,1,0,0,0,1266,1267,1,0,0,0,1267,1271,1,0,0,0,1268,1271,5,83,
        0,0,1269,1271,5,63,0,0,1270,1168,1,0,0,0,1270,1169,1,0,0,0,1270,
        1171,1,0,0,0,1270,1173,1,0,0,0,1270,1175,1,0,0,0,1270,1197,1,0,0,
        0,1270,1199,1,0,0,0,1270,1221,1,0,0,0,1270,1229,1,0,0,0,1270,1251,
        1,0,0,0,1270,1252,1,0,0,0,1270,1254,1,0,0,0,1270,1256,1,0,0,0,1270,
        1268,1,0,0,0,1270,1269,1,0,0,0,1271,125,1,0,0,0,1272,1273,5,4,0,
        0,1273,1274,3,182,91,0,1274,1275,3,182,91,0,1275,1276,3,182,91,0,
        1276,1282,3,182,91,0,1277,1278,3,182,91,0,1278,1279,3,182,91,0,1279,
        1280,3,182,91,0,1280,1281,3,182,91,0,1281,1283,1,0,0,0,1282,1277,
        1,0,0,0,1282,1283,1,0,0,0,1283,1289,1,0,0,0,1284,1285,3,182,91,0,
        1285,1286,3,182,91,0,1286,1287,3,182,91,0,1287,1288,3,182,91,0,1288,
        1290,1,0,0,0,1289,1284,1,0,0,0,1289,1290,1,0,0,0,1290,1296,1,0,0,
        0,1291,1292,3,182,91,0,1292,1293,3,182,91,0,1293,1294,3,182,91,0,
        1294,1295,3,182,91,0,1295,1297,1,0,0,0,1296,1291,1,0,0,0,1296,1297,
        1,0,0,0,1297,127,1,0,0,0,1298,1304,3,130,65,0,1299,1300,5,21,0,0,
        1300,1304,3,194,97,0,1301,1304,5,17,0,0,1302,1304,5,19,0,0,1303,
        1298,1,0,0,0,1303,1299,1,0,0,0,1303,1301,1,0,0,0,1303,1302,1,0,0,
        0,1304,129,1,0,0,0,1305,1306,5,4,0,0,1306,1307,3,182,91,0,1307,1308,
        3,190,95,0,1308,1309,3,190,95,0,1309,131,1,0,0,0,1310,1333,3,134,
        67,0,1311,1312,5,9,0,0,1312,1333,5,185,0,0,1313,1314,5,40,0,0,1314,
        1315,3,194,97,0,1315,1316,3,194,97,0,1316,1317,3,194,97,0,1317,1318,
        3,194,97,0,1318,1319,3,194,97,0,1319,1333,1,0,0,0,1320,1321,5,41,
        0,0,1321,1333,3,194,97,0,1322,1323,5,14,0,0,1323,1333,5,178,0,0,
        1324,1325,5,15,0,0,1325,1333,5,213,0,0,1326,1327,5,17,0,0,1327,1328,
        5,18,0,0,1328,1333,3,194,97,0,1329,1333,5,19,0,0,1330,1331,5,44,
        0,0,1331,1333,5,217,0,0,1332,1310,1,0,0,0,1332,1311,1,0,0,0,1332,
        1313,1,0,0,0,1332,1320,1,0,0,0,1332,1322,1,0,0,0,1332,1324,1,0,0,
        0,1332,1326,1,0,0,0,1332,1329,1,0,0,0,1332,1330,1,0,0,0,1333,133,
        1,0,0,0,1334,1335,5,4,0,0,1335,1336,3,182,91,0,1336,1337,3,182,91,
        0,1337,1338,3,182,91,0,1338,1339,3,182,91,0,1339,1340,3,182,91,0,
        1340,1341,3,182,91,0,1341,1343,3,190,95,0,1342,1344,3,190,95,0,1343,
        1342,1,0,0,0,1343,1344,1,0,0,0,1344,135,1,0,0,0,1345,1403,3,138,
        69,0,1346,1347,5,9,0,0,1347,1403,5,185,0,0,1348,1349,5,27,0,0,1349,
        1403,3,194,97,0,1350,1351,5,88,0,0,1351,1403,3,194,97,0,1352,1353,
        5,41,0,0,1353,1403,3,194,97,0,1354,1355,5,79,0,0,1355,1356,3,194,
        97,0,1356,1357,3,194,97,0,1357,1358,3,194,97,0,1358,1359,3,194,97,
        0,1359,1360,3,194,97,0,1360,1361,3,194,97,0,1361,1362,3,194,97,0,
        1362,1403,1,0,0,0,1363,1364,5,89,0,0,1364,1403,5,178,0,0,1365,1366,
        5,90,0,0,1366,1367,3,194,97,0,1367,1368,3,194,97,0,1368,1369,3,194,
        97,0,1369,1370,3,194,97,0,1370,1371,3,194,97,0,1371,1372,3,194,97,
        0,1372,1373,3,194,97,0,1373,1374,3,194,97,0,1374,1403,1,0,0,0,1375,
        1376,5,14,0,0,1376,1403,5,178,0,0,1377,1378,5,17,0,0,1378,1379,5,
        18,0,0,1379,1383,3,194,97,0,1380,1384,5,134,0,0,1381,1382,5,9,0,
        0,1382,1384,5,185,0,0,1383,1380,1,0,0,0,1383,1381,1,0,0,0,1384,1403,
        1,0,0,0,1385,1386,5,81,0,0,1386,1387,3,194,97,0,1387,1388,3,194,
        97,0,1388,1389,3,194,97,0,1389,1390,3,194,97,0,1390,1391,3,194,97,
        0,1391,1392,3,194,97,0,1392,1393,3,194,97,0,1393,1403,1,0,0,0,1394,
        1403,5,19,0,0,1395,1396,5,150,0,0,1396,1403,5,178,0,0,1397,1398,
        5,62,0,0,1398,1399,3,194,97,0,1399,1400,3,194,97,0,1400,1403,1,0,
        0,0,1401,1403,5,63,0,0,1402,1345,1,0,0,0,1402,1346,1,0,0,0,1402,
        1348,1,0,0,0,1402,1350,1,0,0,0,1402,1352,1,0,0,0,1402,1354,1,0,0,
        0,1402,1363,1,0,0,0,1402,1365,1,0,0,0,1402,1375,1,0,0,0,1402,1377,
        1,0,0,0,1402,1385,1,0,0,0,1402,1394,1,0,0,0,1402,1395,1,0,0,0,1402,
        1397,1,0,0,0,1402,1401,1,0,0,0,1403,137,1,0,0,0,1404,1405,5,4,0,
        0,1405,1406,3,182,91,0,1406,1407,3,182,91,0,1407,1408,3,182,91,0,
        1408,1409,3,182,91,0,1409,139,1,0,0,0,1410,1438,3,142,71,0,1411,
        1412,5,9,0,0,1412,1438,5,185,0,0,1413,1414,5,21,0,0,1414,1438,3,
        194,97,0,1415,1416,5,44,0,0,1416,1438,5,218,0,0,1417,1418,5,40,0,
        0,1418,1419,3,194,97,0,1419,1420,3,194,97,0,1420,1421,3,194,97,0,
        1421,1438,1,0,0,0,1422,1423,5,92,0,0,1423,1424,3,194,97,0,1424,1425,
        3,194,97,0,1425,1426,3,194,97,0,1426,1438,1,0,0,0,1427,1428,5,41,
        0,0,1428,1438,3,194,97,0,1429,1430,5,14,0,0,1430,1438,5,178,0,0,
        1431,1432,5,15,0,0,1432,1438,5,213,0,0,1433,1434,5,17,0,0,1434,1435,
        5,18,0,0,1435,1438,3,194,97,0,1436,1438,5,19,0,0,1437,1410,1,0,0,
        0,1437,1411,1,0,0,0,1437,1413,1,0,0,0,1437,1415,1,0,0,0,1437,1417,
        1,0,0,0,1437,1422,1,0,0,0,1437,1427,1,0,0,0,1437,1429,1,0,0,0,1437,
        1431,1,0,0,0,1437,1433,1,0,0,0,1437,1436,1,0,0,0,1438,141,1,0,0,
        0,1439,1440,5,4,0,0,1440,1441,3,182,91,0,1441,1442,3,182,91,0,1442,
        1443,3,182,91,0,1443,1444,3,182,91,0,1444,1445,3,182,91,0,1445,1446,
        3,182,91,0,1446,1447,3,182,91,0,1447,1449,3,190,95,0,1448,1450,3,
        190,95,0,1449,1448,1,0,0,0,1449,1450,1,0,0,0,1450,1452,1,0,0,0,1451,
        1453,3,190,95,0,1452,1451,1,0,0,0,1452,1453,1,0,0,0,1453,143,1,0,
        0,0,1454,1481,3,142,71,0,1455,1456,5,9,0,0,1456,1481,5,185,0,0,1457,
        1458,5,21,0,0,1458,1481,3,194,97,0,1459,1460,5,40,0,0,1460,1461,
        3,194,97,0,1461,1462,3,194,97,0,1462,1463,3,194,97,0,1463,1481,1,
        0,0,0,1464,1465,5,92,0,0,1465,1466,3,194,97,0,1466,1467,3,194,97,
        0,1467,1468,3,194,97,0,1468,1469,3,194,97,0,1469,1481,1,0,0,0,1470,
        1471,5,41,0,0,1471,1481,3,194,97,0,1472,1473,5,14,0,0,1473,1481,
        5,178,0,0,1474,1475,5,15,0,0,1475,1481,5,213,0,0,1476,1477,5,17,
        0,0,1477,1478,5,18,0,0,1478,1481,3,194,97,0,1479,1481,5,19,0,0,1480,
        1454,1,0,0,0,1480,1455,1,0,0,0,1480,1457,1,0,0,0,1480,1459,1,0,0,
        0,1480,1464,1,0,0,0,1480,1470,1,0,0,0,1480,1472,1,0,0,0,1480,1474,
        1,0,0,0,1480,1476,1,0,0,0,1480,1479,1,0,0,0,1481,145,1,0,0,0,1482,
        1505,3,148,74,0,1483,1484,5,9,0,0,1484,1505,5,185,0,0,1485,1486,
        5,40,0,0,1486,1487,3,194,97,0,1487,1488,3,194,97,0,1488,1489,3,194,
        97,0,1489,1490,3,194,97,0,1490,1491,3,194,97,0,1491,1492,3,194,97,
        0,1492,1493,3,194,97,0,1493,1505,1,0,0,0,1494,1495,5,41,0,0,1495,
        1505,3,194,97,0,1496,1497,5,14,0,0,1497,1505,5,178,0,0,1498,1499,
        5,15,0,0,1499,1505,5,213,0,0,1500,1501,5,17,0,0,1501,1502,5,18,0,
        0,1502,1505,3,194,97,0,1503,1505,5,19,0,0,1504,1482,1,0,0,0,1504,
        1483,1,0,0,0,1504,1485,1,0,0,0,1504,1494,1,0,0,0,1504,1496,1,0,0,
        0,1504,1498,1,0,0,0,1504,1500,1,0,0,0,1504,1503,1,0,0,0,1505,147,
        1,0,0,0,1506,1507,5,4,0,0,1507,1508,3,182,91,0,1508,1509,3,182,91,
        0,1509,1510,3,182,91,0,1510,1511,3,182,91,0,1511,1512,3,182,91,0,
        1512,1513,3,182,91,0,1513,1514,3,182,91,0,1514,1515,3,182,91,0,1515,
        1516,3,190,95,0,1516,1517,3,190,95,0,1517,149,1,0,0,0,1518,1550,
        3,152,76,0,1519,1520,5,9,0,0,1520,1550,5,185,0,0,1521,1522,5,96,
        0,0,1522,1550,5,185,0,0,1523,1524,5,61,0,0,1524,1525,5,178,0,0,1525,
        1526,5,178,0,0,1526,1550,3,194,97,0,1527,1528,5,77,0,0,1528,1550,
        3,194,97,0,1529,1530,5,41,0,0,1530,1550,3,194,97,0,1531,1532,5,14,
        0,0,1532,1550,5,178,0,0,1533,1534,5,15,0,0,1534,1550,5,213,0,0,1535,
        1536,5,17,0,0,1536,1537,5,18,0,0,1537,1541,3,194,97,0,1538,1542,
        5,134,0,0,1539,1540,5,9,0,0,1540,1542,5,185,0,0,1541,1538,1,0,0,
        0,1541,1539,1,0,0,0,1542,1550,1,0,0,0,1543,1550,5,19,0,0,1544,1545,
        5,62,0,0,1545,1546,5,97,0,0,1546,1547,5,178,0,0,1547,1550,5,178,
        0,0,1548,1550,5,63,0,0,1549,1518,1,0,0,0,1549,1519,1,0,0,0,1549,
        1521,1,0,0,0,1549,1523,1,0,0,0,1549,1527,1,0,0,0,1549,1529,1,0,0,
        0,1549,1531,1,0,0,0,1549,1533,1,0,0,0,1549,1535,1,0,0,0,1549,1543,
        1,0,0,0,1549,1544,1,0,0,0,1549,1548,1,0,0,0,1550,151,1,0,0,0,1551,
        1552,5,4,0,0,1552,1553,3,182,91,0,1553,1554,3,182,91,0,1554,1555,
        3,182,91,0,1555,1556,3,182,91,0,1556,1557,3,182,91,0,1557,1558,3,
        182,91,0,1558,1559,3,182,91,0,1559,1560,3,182,91,0,1560,1561,3,182,
        91,0,1561,1562,3,182,91,0,1562,1564,3,182,91,0,1563,1565,3,182,91,
        0,1564,1563,1,0,0,0,1564,1565,1,0,0,0,1565,153,1,0,0,0,1566,1620,
        3,156,78,0,1567,1569,5,9,0,0,1568,1570,5,193,0,0,1569,1568,1,0,0,
        0,1569,1570,1,0,0,0,1570,1571,1,0,0,0,1571,1620,5,185,0,0,1572,1574,
        5,41,0,0,1573,1575,5,193,0,0,1574,1573,1,0,0,0,1574,1575,1,0,0,0,
        1575,1576,1,0,0,0,1576,1577,5,185,0,0,1577,1620,3,194,97,0,1578,
        1580,5,14,0,0,1579,1581,5,193,0,0,1580,1579,1,0,0,0,1580,1581,1,
        0,0,0,1581,1582,1,0,0,0,1582,1620,5,178,0,0,1583,1585,5,15,0,0,1584,
        1586,5,212,0,0,1585,1584,1,0,0,0,1585,1586,1,0,0,0,1586,1587,1,0,
        0,0,1587,1588,5,214,0,0,1588,1620,5,213,0,0,1589,1591,5,99,0,0,1590,
        1592,5,193,0,0,1591,1590,1,0,0,0,1591,1592,1,0,0,0,1592,1593,1,0,
        0,0,1593,1594,5,185,0,0,1594,1620,3,194,97,0,1595,1597,5,100,0,0,
        1596,1598,5,193,0,0,1597,1596,1,0,0,0,1597,1598,1,0,0,0,1598,1599,
        1,0,0,0,1599,1600,5,185,0,0,1600,1620,3,194,97,0,1601,1603,5,101,
        0,0,1602,1604,5,193,0,0,1603,1602,1,0,0,0,1603,1604,1,0,0,0,1604,
        1605,1,0,0,0,1605,1606,5,185,0,0,1606,1607,3,194,97,0,1607,1608,
        3,194,97,0,1608,1620,1,0,0,0,1609,1610,5,17,0,0,1610,1611,5,18,0,
        0,1611,1615,3,194,97,0,1612,1616,5,134,0,0,1613,1614,5,9,0,0,1614,
        1616,5,185,0,0,1615,1612,1,0,0,0,1615,1613,1,0,0,0,1616,1620,1,0,
        0,0,1617,1620,5,19,0,0,1618,1620,5,102,0,0,1619,1566,1,0,0,0,1619,
        1567,1,0,0,0,1619,1572,1,0,0,0,1619,1578,1,0,0,0,1619,1583,1,0,0,
        0,1619,1589,1,0,0,0,1619,1595,1,0,0,0,1619,1601,1,0,0,0,1619,1609,
        1,0,0,0,1619,1617,1,0,0,0,1619,1618,1,0,0,0,1620,155,1,0,0,0,1621,
        1622,5,4,0,0,1622,1623,3,182,91,0,1623,1624,3,182,91,0,1624,1626,
        3,190,95,0,1625,1627,3,190,95,0,1626,1625,1,0,0,0,1626,1627,1,0,
        0,0,1627,157,1,0,0,0,1628,1665,3,160,80,0,1629,1630,5,9,0,0,1630,
        1665,5,185,0,0,1631,1632,5,104,0,0,1632,1665,5,178,0,0,1633,1634,
        5,40,0,0,1634,1635,3,194,97,0,1635,1636,3,194,97,0,1636,1665,1,0,
        0,0,1637,1638,5,41,0,0,1638,1665,3,194,97,0,1639,1640,5,14,0,0,1640,
        1665,5,178,0,0,1641,1642,5,17,0,0,1642,1643,5,18,0,0,1643,1647,3,
        194,97,0,1644,1648,5,134,0,0,1645,1646,5,9,0,0,1646,1648,5,185,0,
        0,1647,1644,1,0,0,0,1647,1645,1,0,0,0,1648,1665,1,0,0,0,1649,1665,
        5,19,0,0,1650,1651,5,105,0,0,1651,1665,5,185,0,0,1652,1653,5,106,
        0,0,1653,1654,3,194,97,0,1654,1655,5,178,0,0,1655,1665,1,0,0,0,1656,
        1665,5,107,0,0,1657,1665,5,108,0,0,1658,1665,5,109,0,0,1659,1665,
        5,110,0,0,1660,1665,5,111,0,0,1661,1665,5,112,0,0,1662,1663,5,113,
        0,0,1663,1665,5,178,0,0,1664,1628,1,0,0,0,1664,1629,1,0,0,0,1664,
        1631,1,0,0,0,1664,1633,1,0,0,0,1664,1637,1,0,0,0,1664,1639,1,0,0,
        0,1664,1641,1,0,0,0,1664,1649,1,0,0,0,1664,1650,1,0,0,0,1664,1652,
        1,0,0,0,1664,1656,1,0,0,0,1664,1657,1,0,0,0,1664,1658,1,0,0,0,1664,
        1659,1,0,0,0,1664,1660,1,0,0,0,1664,1661,1,0,0,0,1664,1662,1,0,0,
        0,1665,159,1,0,0,0,1666,1667,5,4,0,0,1667,1668,3,182,91,0,1668,1669,
        3,182,91,0,1669,1670,3,182,91,0,1670,1671,3,182,91,0,1671,1672,3,
        182,91,0,1672,1674,3,190,95,0,1673,1675,3,190,95,0,1674,1673,1,0,
        0,0,1674,1675,1,0,0,0,1675,161,1,0,0,0,1676,1703,3,164,82,0,1677,
        1678,5,9,0,0,1678,1703,5,185,0,0,1679,1680,5,104,0,0,1680,1703,5,
        178,0,0,1681,1682,5,40,0,0,1682,1683,3,194,97,0,1683,1684,3,194,
        97,0,1684,1703,1,0,0,0,1685,1686,5,41,0,0,1686,1703,3,194,97,0,1687,
        1688,5,14,0,0,1688,1703,5,178,0,0,1689,1703,5,107,0,0,1690,1703,
        5,108,0,0,1691,1703,5,106,0,0,1692,1703,5,109,0,0,1693,1703,5,110,
        0,0,1694,1703,5,113,0,0,1695,1696,5,17,0,0,1696,1703,5,18,0,0,1697,
        1703,5,19,0,0,1698,1699,5,105,0,0,1699,1703,5,185,0,0,1700,1703,
        5,111,0,0,1701,1703,5,112,0,0,1702,1676,1,0,0,0,1702,1677,1,0,0,
        0,1702,1679,1,0,0,0,1702,1681,1,0,0,0,1702,1685,1,0,0,0,1702,1687,
        1,0,0,0,1702,1689,1,0,0,0,1702,1690,1,0,0,0,1702,1691,1,0,0,0,1702,
        1692,1,0,0,0,1702,1693,1,0,0,0,1702,1694,1,0,0,0,1702,1695,1,0,0,
        0,1702,1697,1,0,0,0,1702,1698,1,0,0,0,1702,1700,1,0,0,0,1702,1701,
        1,0,0,0,1703,163,1,0,0,0,1704,1705,5,4,0,0,1705,1706,3,182,91,0,
        1706,1707,3,182,91,0,1707,1708,3,182,91,0,1708,1709,3,182,91,0,1709,
        1710,3,182,91,0,1710,1711,3,182,91,0,1711,1713,3,190,95,0,1712,1714,
        3,190,95,0,1713,1712,1,0,0,0,1713,1714,1,0,0,0,1714,165,1,0,0,0,
        1715,1727,3,168,84,0,1716,1717,5,9,0,0,1717,1727,5,185,0,0,1718,
        1719,5,41,0,0,1719,1727,3,194,97,0,1720,1721,5,14,0,0,1721,1727,
        5,178,0,0,1722,1723,5,17,0,0,1723,1724,5,18,0,0,1724,1727,3,194,
        97,0,1725,1727,5,19,0,0,1726,1715,1,0,0,0,1726,1716,1,0,0,0,1726,
        1718,1,0,0,0,1726,1720,1,0,0,0,1726,1722,1,0,0,0,1726,1725,1,0,0,
        0,1727,167,1,0,0,0,1728,1729,5,4,0,0,1729,1730,3,182,91,0,1730,1731,
        3,182,91,0,1731,1732,3,190,95,0,1732,1733,3,190,95,0,1733,1734,3,
        190,95,0,1734,169,1,0,0,0,1735,1753,3,172,86,0,1736,1737,5,9,0,0,
        1737,1753,5,185,0,0,1738,1739,5,117,0,0,1739,1753,5,178,0,0,1740,
        1741,5,40,0,0,1741,1753,3,194,97,0,1742,1743,5,41,0,0,1743,1753,
        3,194,97,0,1744,1745,5,14,0,0,1745,1753,5,178,0,0,1746,1747,5,17,
        0,0,1747,1748,5,18,0,0,1748,1753,3,194,97,0,1749,1753,5,19,0,0,1750,
        1751,5,113,0,0,1751,1753,5,178,0,0,1752,1735,1,0,0,0,1752,1736,1,
        0,0,0,1752,1738,1,0,0,0,1752,1740,1,0,0,0,1752,1742,1,0,0,0,1752,
        1744,1,0,0,0,1752,1746,1,0,0,0,1752,1749,1,0,0,0,1752,1750,1,0,0,
        0,1753,171,1,0,0,0,1754,1755,5,4,0,0,1755,1756,3,182,91,0,1756,1757,
        3,182,91,0,1757,1758,3,182,91,0,1758,1760,3,190,95,0,1759,1761,3,
        190,95,0,1760,1759,1,0,0,0,1760,1761,1,0,0,0,1761,173,1,0,0,0,1762,
        1774,3,176,88,0,1763,1764,5,9,0,0,1764,1774,5,185,0,0,1765,1766,
        5,41,0,0,1766,1774,3,194,97,0,1767,1768,5,14,0,0,1768,1774,5,178,
        0,0,1769,1770,5,17,0,0,1770,1771,5,18,0,0,1771,1774,3,194,97,0,1772,
        1774,5,19,0,0,1773,1762,1,0,0,0,1773,1763,1,0,0,0,1773,1765,1,0,
        0,0,1773,1767,1,0,0,0,1773,1769,1,0,0,0,1773,1772,1,0,0,0,1774,175,
        1,0,0,0,1775,1776,5,4,0,0,1776,1777,3,182,91,0,1777,1778,3,182,91,
        0,1778,1779,3,182,91,0,1779,177,1,0,0,0,1780,1847,3,180,90,0,1781,
        1783,5,118,0,0,1782,1784,5,193,0,0,1783,1782,1,0,0,0,1783,1784,1,
        0,0,0,1784,1785,1,0,0,0,1785,1847,3,194,97,0,1786,1788,5,119,0,0,
        1787,1789,5,193,0,0,1788,1787,1,0,0,0,1788,1789,1,0,0,0,1789,1790,
        1,0,0,0,1790,1847,3,194,97,0,1791,1793,5,120,0,0,1792,1794,5,193,
        0,0,1793,1792,1,0,0,0,1793,1794,1,0,0,0,1794,1795,1,0,0,0,1795,1847,
        5,178,0,0,1796,1798,5,121,0,0,1797,1799,5,193,0,0,1798,1797,1,0,
        0,0,1798,1799,1,0,0,0,1799,1800,1,0,0,0,1800,1847,5,178,0,0,1801,
        1803,5,122,0,0,1802,1804,5,193,0,0,1803,1802,1,0,0,0,1803,1804,1,
        0,0,0,1804,1805,1,0,0,0,1805,1847,5,178,0,0,1806,1808,5,123,0,0,
        1807,1809,5,193,0,0,1808,1807,1,0,0,0,1808,1809,1,0,0,0,1809,1810,
        1,0,0,0,1810,1847,5,185,0,0,1811,1813,5,124,0,0,1812,1814,5,193,
        0,0,1813,1812,1,0,0,0,1813,1814,1,0,0,0,1814,1815,1,0,0,0,1815,1847,
        3,194,97,0,1816,1818,5,125,0,0,1817,1819,5,193,0,0,1818,1817,1,0,
        0,0,1818,1819,1,0,0,0,1819,1820,1,0,0,0,1820,1847,3,194,97,0,1821,
        1823,5,126,0,0,1822,1824,5,193,0,0,1823,1822,1,0,0,0,1823,1824,1,
        0,0,0,1824,1825,1,0,0,0,1825,1847,3,194,97,0,1826,1828,5,127,0,0,
        1827,1829,5,193,0,0,1828,1827,1,0,0,0,1828,1829,1,0,0,0,1829,1830,
        1,0,0,0,1830,1847,3,194,97,0,1831,1833,5,128,0,0,1832,1834,5,193,
        0,0,1833,1832,1,0,0,0,1833,1834,1,0,0,0,1834,1835,1,0,0,0,1835,1847,
        5,178,0,0,1836,1838,5,129,0,0,1837,1839,5,193,0,0,1838,1837,1,0,
        0,0,1838,1839,1,0,0,0,1839,1840,1,0,0,0,1840,1847,5,178,0,0,1841,
        1843,5,130,0,0,1842,1844,5,193,0,0,1843,1842,1,0,0,0,1843,1844,1,
        0,0,0,1844,1845,1,0,0,0,1845,1847,5,178,0,0,1846,1780,1,0,0,0,1846,
        1781,1,0,0,0,1846,1786,1,0,0,0,1846,1791,1,0,0,0,1846,1796,1,0,0,
        0,1846,1801,1,0,0,0,1846,1806,1,0,0,0,1846,1811,1,0,0,0,1846,1816,
        1,0,0,0,1846,1821,1,0,0,0,1846,1826,1,0,0,0,1846,1831,1,0,0,0,1846,
        1836,1,0,0,0,1846,1841,1,0,0,0,1847,179,1,0,0,0,1848,1849,5,4,0,
        0,1849,1850,3,182,91,0,1850,1851,3,182,91,0,1851,181,1,0,0,0,1852,
        1853,5,190,0,0,1853,1854,3,184,92,0,1854,1855,5,191,0,0,1855,183,
        1,0,0,0,1856,1861,3,186,93,0,1857,1858,5,173,0,0,1858,1860,3,186,
        93,0,1859,1857,1,0,0,0,1860,1863,1,0,0,0,1861,1859,1,0,0,0,1861,
        1862,1,0,0,0,1862,185,1,0,0,0,1863,1861,1,0,0,0,1864,1869,3,188,
        94,0,1865,1866,5,174,0,0,1866,1868,3,188,94,0,1867,1865,1,0,0,0,
        1868,1871,1,0,0,0,1869,1867,1,0,0,0,1869,1870,1,0,0,0,1870,187,1,
        0,0,0,1871,1869,1,0,0,0,1872,1873,6,94,-1,0,1873,1874,5,190,0,0,
        1874,1875,3,184,92,0,1875,1876,5,191,0,0,1876,2008,1,0,0,0,1877,
        2008,5,134,0,0,1878,1879,5,136,0,0,1879,1880,7,1,0,0,1880,1881,7,
        2,0,0,1881,2008,7,1,0,0,1882,1884,5,137,0,0,1883,1885,5,205,0,0,
        1884,1883,1,0,0,0,1884,1885,1,0,0,0,1885,1886,1,0,0,0,1886,1887,
        5,206,0,0,1887,1888,5,207,0,0,1888,2008,3,192,96,0,1889,1890,5,138,
        0,0,1890,2008,3,188,94,29,1891,1892,5,139,0,0,1892,2008,3,188,94,
        28,1893,1894,5,140,0,0,1894,2008,3,188,94,27,1895,1902,5,141,0,0,
        1896,1903,5,186,0,0,1897,1900,5,185,0,0,1898,1899,5,192,0,0,1899,
        1901,5,185,0,0,1900,1898,1,0,0,0,1900,1901,1,0,0,0,1901,1903,1,0,
        0,0,1902,1896,1,0,0,0,1902,1897,1,0,0,0,1903,2008,1,0,0,0,1904,2008,
        5,142,0,0,1905,1906,5,143,0,0,1906,2008,5,178,0,0,1907,2008,5,144,
        0,0,1908,1920,5,145,0,0,1909,1921,5,186,0,0,1910,1913,5,185,0,0,
        1911,1912,5,192,0,0,1912,1914,5,185,0,0,1913,1911,1,0,0,0,1913,1914,
        1,0,0,0,1914,1921,1,0,0,0,1915,1918,5,181,0,0,1916,1917,5,192,0,
        0,1917,1919,5,181,0,0,1918,1916,1,0,0,0,1918,1919,1,0,0,0,1919,1921,
        1,0,0,0,1920,1909,1,0,0,0,1920,1910,1,0,0,0,1920,1915,1,0,0,0,1921,
        2008,1,0,0,0,1922,1923,5,175,0,0,1923,2008,3,188,94,21,1924,1925,
        5,146,0,0,1925,1926,5,190,0,0,1926,1928,3,192,96,0,1927,1929,5,176,
        0,0,1928,1927,1,0,0,0,1928,1929,1,0,0,0,1929,1930,1,0,0,0,1930,1932,
        3,192,96,0,1931,1933,5,176,0,0,1932,1931,1,0,0,0,1932,1933,1,0,0,
        0,1933,1934,1,0,0,0,1934,1935,3,192,96,0,1935,1936,5,191,0,0,1936,
        1937,5,147,0,0,1937,1938,3,192,96,0,1938,2008,1,0,0,0,1939,1940,
        5,146,0,0,1940,1941,5,190,0,0,1941,1943,5,171,0,0,1942,1944,5,193,
        0,0,1943,1942,1,0,0,0,1943,1944,1,0,0,0,1944,1945,1,0,0,0,1945,1947,
        3,182,91,0,1946,1948,5,176,0,0,1947,1946,1,0,0,0,1947,1948,1,0,0,
        0,1948,1954,1,0,0,0,1949,1951,5,172,0,0,1950,1952,5,193,0,0,1951,
        1950,1,0,0,0,1951,1952,1,0,0,0,1952,1953,1,0,0,0,1953,1955,3,182,
        91,0,1954,1949,1,0,0,0,1954,1955,1,0,0,0,1955,1956,1,0,0,0,1956,
        1957,5,191,0,0,1957,1958,5,147,0,0,1958,1959,3,192,96,0,1959,2008,
        1,0,0,0,1960,2008,5,148,0,0,1961,2008,5,149,0,0,1962,1970,5,150,
        0,0,1963,1971,5,187,0,0,1964,1967,5,178,0,0,1965,1966,5,192,0,0,
        1966,1968,5,178,0,0,1967,1965,1,0,0,0,1967,1968,1,0,0,0,1968,1971,
        1,0,0,0,1969,1971,5,199,0,0,1970,1963,1,0,0,0,1970,1964,1,0,0,0,
        1970,1969,1,0,0,0,1971,2008,1,0,0,0,1972,1979,5,151,0,0,1973,1980,
        5,186,0,0,1974,1977,5,185,0,0,1975,1976,5,192,0,0,1976,1978,5,185,
        0,0,1977,1975,1,0,0,0,1977,1978,1,0,0,0,1978,1980,1,0,0,0,1979,1973,
        1,0,0,0,1979,1974,1,0,0,0,1980,2008,1,0,0,0,1981,1993,5,153,0,0,
        1982,1994,5,186,0,0,1983,1986,5,185,0,0,1984,1985,5,192,0,0,1985,
        1987,5,185,0,0,1986,1984,1,0,0,0,1986,1987,1,0,0,0,1987,1994,1,0,
        0,0,1988,1991,5,181,0,0,1989,1990,5,192,0,0,1990,1992,5,181,0,0,
        1991,1989,1,0,0,0,1991,1992,1,0,0,0,1992,1994,1,0,0,0,1993,1982,
        1,0,0,0,1993,1983,1,0,0,0,1993,1988,1,0,0,0,1994,2008,1,0,0,0,1995,
        2008,5,154,0,0,1996,2008,5,155,0,0,1997,2008,5,156,0,0,1998,2008,
        5,157,0,0,1999,2008,5,158,0,0,2000,2008,5,159,0,0,2001,2008,5,160,
        0,0,2002,2008,5,161,0,0,2003,2008,5,162,0,0,2004,2008,5,163,0,0,
        2005,2008,5,131,0,0,2006,2008,5,132,0,0,2007,1872,1,0,0,0,2007,1877,
        1,0,0,0,2007,1878,1,0,0,0,2007,1882,1,0,0,0,2007,1889,1,0,0,0,2007,
        1891,1,0,0,0,2007,1893,1,0,0,0,2007,1895,1,0,0,0,2007,1904,1,0,0,
        0,2007,1905,1,0,0,0,2007,1907,1,0,0,0,2007,1908,1,0,0,0,2007,1922,
        1,0,0,0,2007,1924,1,0,0,0,2007,1939,1,0,0,0,2007,1960,1,0,0,0,2007,
        1961,1,0,0,0,2007,1962,1,0,0,0,2007,1972,1,0,0,0,2007,1981,1,0,0,
        0,2007,1995,1,0,0,0,2007,1996,1,0,0,0,2007,1997,1,0,0,0,2007,1998,
        1,0,0,0,2007,1999,1,0,0,0,2007,2000,1,0,0,0,2007,2001,1,0,0,0,2007,
        2002,1,0,0,0,2007,2003,1,0,0,0,2007,2004,1,0,0,0,2007,2005,1,0,0,
        0,2007,2006,1,0,0,0,2008,2017,1,0,0,0,2009,2010,10,32,0,0,2010,2011,
        5,135,0,0,2011,2016,3,192,96,0,2012,2013,10,14,0,0,2013,2014,5,152,
        0,0,2014,2016,3,192,96,0,2015,2009,1,0,0,0,2015,2012,1,0,0,0,2016,
        2019,1,0,0,0,2017,2015,1,0,0,0,2017,2018,1,0,0,0,2018,189,1,0,0,
        0,2019,2017,1,0,0,0,2020,2021,7,3,0,0,2021,191,1,0,0,0,2022,2023,
        7,4,0,0,2023,193,1,0,0,0,2024,2025,7,3,0,0,2025,195,1,0,0,0,2026,
        2027,7,4,0,0,2027,197,1,0,0,0,2028,2039,5,133,0,0,2029,2037,5,222,
        0,0,2030,2032,5,225,0,0,2031,2030,1,0,0,0,2032,2035,1,0,0,0,2033,
        2031,1,0,0,0,2033,2034,1,0,0,0,2034,2038,1,0,0,0,2035,2033,1,0,0,
        0,2036,2038,5,226,0,0,2037,2033,1,0,0,0,2037,2036,1,0,0,0,2038,2040,
        1,0,0,0,2039,2029,1,0,0,0,2039,2040,1,0,0,0,2040,2041,1,0,0,0,2041,
        2045,5,223,0,0,2042,2044,5,225,0,0,2043,2042,1,0,0,0,2044,2047,1,
        0,0,0,2045,2043,1,0,0,0,2045,2046,1,0,0,0,2046,2048,1,0,0,0,2047,
        2045,1,0,0,0,2048,2049,5,224,0,0,2049,199,1,0,0,0,2050,2051,5,164,
        0,0,2051,2052,3,202,101,0,2052,2053,3,182,91,0,2053,201,1,0,0,0,
        2054,2055,7,5,0,0,2055,2056,3,204,102,0,2056,2057,5,228,0,0,2057,
        2061,1,0,0,0,2058,2059,5,167,0,0,2059,2061,3,212,106,0,2060,2054,
        1,0,0,0,2060,2058,1,0,0,0,2061,203,1,0,0,0,2062,2065,5,238,0,0,2063,
        2064,5,229,0,0,2064,2066,3,206,103,0,2065,2063,1,0,0,0,2065,2066,
        1,0,0,0,2066,205,1,0,0,0,2067,2070,3,208,104,0,2068,2069,7,6,0,0,
        2069,2071,3,206,103,0,2070,2068,1,0,0,0,2070,2071,1,0,0,0,2071,207,
        1,0,0,0,2072,2080,5,238,0,0,2073,2080,3,210,105,0,2074,2080,5,236,
        0,0,2075,2080,5,237,0,0,2076,2080,5,261,0,0,2077,2080,5,262,0,0,
        2078,2080,5,263,0,0,2079,2072,1,0,0,0,2079,2073,1,0,0,0,2079,2074,
        1,0,0,0,2079,2075,1,0,0,0,2079,2076,1,0,0,0,2079,2077,1,0,0,0,2079,
        2078,1,0,0,0,2080,209,1,0,0,0,2081,2082,5,239,0,0,2082,2083,5,265,
        0,0,2083,2084,3,208,104,0,2084,2085,5,228,0,0,2085,2201,1,0,0,0,
        2086,2087,5,240,0,0,2087,2088,5,265,0,0,2088,2089,3,208,104,0,2089,
        2090,5,228,0,0,2090,2201,1,0,0,0,2091,2092,5,242,0,0,2092,2093,5,
        265,0,0,2093,2094,3,208,104,0,2094,2095,5,228,0,0,2095,2201,1,0,
        0,0,2096,2097,5,243,0,0,2097,2098,5,265,0,0,2098,2099,3,208,104,
        0,2099,2100,5,228,0,0,2100,2201,1,0,0,0,2101,2102,5,244,0,0,2102,
        2103,5,265,0,0,2103,2104,3,208,104,0,2104,2105,5,228,0,0,2105,2201,
        1,0,0,0,2106,2107,5,245,0,0,2107,2108,5,265,0,0,2108,2109,3,208,
        104,0,2109,2110,5,228,0,0,2110,2201,1,0,0,0,2111,2112,5,246,0,0,
        2112,2113,5,265,0,0,2113,2114,3,208,104,0,2114,2115,5,228,0,0,2115,
        2201,1,0,0,0,2116,2117,5,247,0,0,2117,2118,5,265,0,0,2118,2119,3,
        208,104,0,2119,2120,5,228,0,0,2120,2201,1,0,0,0,2121,2122,5,248,
        0,0,2122,2123,5,265,0,0,2123,2124,3,208,104,0,2124,2125,5,228,0,
        0,2125,2201,1,0,0,0,2126,2127,5,249,0,0,2127,2128,5,265,0,0,2128,
        2129,3,208,104,0,2129,2130,5,228,0,0,2130,2201,1,0,0,0,2131,2132,
        5,250,0,0,2132,2133,5,265,0,0,2133,2134,3,208,104,0,2134,2135,5,
        228,0,0,2135,2201,1,0,0,0,2136,2137,5,251,0,0,2137,2138,5,265,0,
        0,2138,2143,3,208,104,0,2139,2140,5,235,0,0,2140,2142,3,208,104,
        0,2141,2139,1,0,0,0,2142,2145,1,0,0,0,2143,2141,1,0,0,0,2143,2144,
        1,0,0,0,2144,2146,1,0,0,0,2145,2143,1,0,0,0,2146,2147,5,228,0,0,
        2147,2201,1,0,0,0,2148,2149,5,252,0,0,2149,2150,5,265,0,0,2150,2151,
        3,208,104,0,2151,2152,5,228,0,0,2152,2201,1,0,0,0,2153,2154,5,253,
        0,0,2154,2155,5,265,0,0,2155,2160,3,208,104,0,2156,2157,5,235,0,
        0,2157,2159,3,208,104,0,2158,2156,1,0,0,0,2159,2162,1,0,0,0,2160,
        2158,1,0,0,0,2160,2161,1,0,0,0,2161,2163,1,0,0,0,2162,2160,1,0,0,
        0,2163,2164,5,228,0,0,2164,2201,1,0,0,0,2165,2166,5,254,0,0,2166,
        2167,5,265,0,0,2167,2168,3,208,104,0,2168,2169,5,235,0,0,2169,2170,
        3,208,104,0,2170,2171,5,228,0,0,2171,2201,1,0,0,0,2172,2173,5,255,
        0,0,2173,2174,5,265,0,0,2174,2175,3,208,104,0,2175,2176,5,228,0,
        0,2176,2201,1,0,0,0,2177,2178,5,256,0,0,2178,2179,5,265,0,0,2179,
        2201,5,228,0,0,2180,2181,5,257,0,0,2181,2182,5,265,0,0,2182,2183,
        3,208,104,0,2183,2184,5,228,0,0,2184,2201,1,0,0,0,2185,2186,5,258,
        0,0,2186,2187,5,265,0,0,2187,2188,3,208,104,0,2188,2189,5,228,0,
        0,2189,2201,1,0,0,0,2190,2191,5,259,0,0,2191,2192,5,265,0,0,2192,
        2193,3,208,104,0,2193,2194,5,228,0,0,2194,2201,1,0,0,0,2195,2196,
        5,260,0,0,2196,2197,5,265,0,0,2197,2198,3,208,104,0,2198,2199,5,
        228,0,0,2199,2201,1,0,0,0,2200,2081,1,0,0,0,2200,2086,1,0,0,0,2200,
        2091,1,0,0,0,2200,2096,1,0,0,0,2200,2101,1,0,0,0,2200,2106,1,0,0,
        0,2200,2111,1,0,0,0,2200,2116,1,0,0,0,2200,2121,1,0,0,0,2200,2126,
        1,0,0,0,2200,2131,1,0,0,0,2200,2136,1,0,0,0,2200,2148,1,0,0,0,2200,
        2153,1,0,0,0,2200,2165,1,0,0,0,2200,2172,1,0,0,0,2200,2177,1,0,0,
        0,2200,2180,1,0,0,0,2200,2185,1,0,0,0,2200,2190,1,0,0,0,2200,2195,
        1,0,0,0,2201,211,1,0,0,0,2202,2203,7,7,0,0,2203,2204,5,267,0,0,2204,
        2205,5,276,0,0,2205,2206,5,268,0,0,2206,213,1,0,0,0,2207,2208,5,
        168,0,0,2208,2209,5,262,0,0,2209,2210,5,229,0,0,2210,2211,3,216,
        108,0,2211,2212,5,228,0,0,2212,215,1,0,0,0,2213,2216,3,208,104,0,
        2214,2215,7,6,0,0,2215,2217,3,216,108,0,2216,2214,1,0,0,0,2216,2217,
        1,0,0,0,2217,217,1,0,0,0,2218,2219,5,169,0,0,2219,2220,5,283,0,0,
        2220,2221,5,280,0,0,2221,2240,5,278,0,0,2222,2224,5,281,0,0,2223,
        2222,1,0,0,0,2224,2227,1,0,0,0,2225,2223,1,0,0,0,2225,2226,1,0,0,
        0,2226,2241,1,0,0,0,2227,2225,1,0,0,0,2228,2230,5,282,0,0,2229,2228,
        1,0,0,0,2230,2233,1,0,0,0,2231,2229,1,0,0,0,2231,2232,1,0,0,0,2232,
        2241,1,0,0,0,2233,2231,1,0,0,0,2234,2236,5,284,0,0,2235,2234,1,0,
        0,0,2236,2239,1,0,0,0,2237,2235,1,0,0,0,2237,2238,1,0,0,0,2238,2241,
        1,0,0,0,2239,2237,1,0,0,0,2240,2225,1,0,0,0,2240,2231,1,0,0,0,2240,
        2237,1,0,0,0,2241,2242,1,0,0,0,2242,2243,5,279,0,0,2243,2244,5,170,
        0,0,2244,2249,5,287,0,0,2245,2248,3,214,107,0,2246,2248,3,60,30,
        0,2247,2245,1,0,0,0,2247,2246,1,0,0,0,2248,2251,1,0,0,0,2249,2247,
        1,0,0,0,2249,2250,1,0,0,0,2250,2252,1,0,0,0,2251,2249,1,0,0,0,2252,
        2253,5,2,0,0,2253,2254,5,170,0,0,2254,2255,5,287,0,0,2255,219,1,
        0,0,0,211,261,263,272,278,284,293,301,309,317,325,329,332,338,344,
        350,359,368,377,386,395,404,413,422,431,440,449,458,467,476,485,
        494,503,512,521,538,557,570,594,597,604,607,612,617,622,625,628,
        632,637,642,649,653,658,663,668,673,678,683,686,692,698,701,731,
        742,745,773,790,795,808,815,827,842,849,872,881,887,892,896,901,
        904,908,913,918,922,928,932,936,939,941,945,969,977,994,1002,1008,
        1019,1022,1034,1041,1069,1103,1113,1118,1123,1127,1139,1163,1183,
        1189,1195,1207,1213,1219,1227,1237,1243,1249,1260,1263,1266,1270,
        1282,1289,1296,1303,1332,1343,1383,1402,1437,1449,1452,1480,1504,
        1541,1549,1564,1569,1574,1580,1585,1591,1597,1603,1615,1619,1626,
        1647,1664,1674,1702,1713,1726,1752,1760,1773,1783,1788,1793,1798,
        1803,1808,1813,1818,1823,1828,1833,1838,1843,1846,1861,1869,1884,
        1900,1902,1913,1918,1920,1928,1932,1943,1947,1951,1954,1967,1970,
        1977,1979,1986,1991,1993,2007,2015,2017,2033,2037,2039,2045,2060,
        2065,2070,2079,2143,2160,2200,2216,2225,2231,2237,2240,2247,2249
    ]

class XplorMRParser ( Parser ):

    grammarFileName = "XplorMRParser.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ "<INVALID>", "'SET'", "<INVALID>", "'NOE'", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "'BHIG'", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "'CUTOFF'", "'CUTON'", "'FROM'", "'TO'", 
                     "'PEAK'", "'SPECTRUM'", "'VOLUME'", "'PPM1'", "'PPM2'", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "'TYPE'", "<INVALID>", "<INVALID>", "<INVALID>", "'CV'", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "'XADC'", "<INVALID>", 
                     "'SIZE'", "'ZERO'", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "'RAMA'", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "'SORT'", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "'DCSA'", "<INVALID>", "'PCSA'", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "'TAUC'", "<INVALID>", 
                     "'XPCS'", "'TOLL'", "'SAVE'", "'FMED'", "'ERRON'", 
                     "'ERROFF'", "'FON'", "'FOFF'", "'SON'", "'SOFF'", "'FRUN'", 
                     "<INVALID>", "<INVALID>", "'XCCR'", "'WEIP'", "'KDIR'", 
                     "'KLIN'", "'NSEG'", "'NMIN'", "'NMAX'", "'SEGM'", "'OHCUT'", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "'UPDFRQ'", 
                     "'PRNFRQ'", "'FREEMODE'", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "'ALL'", "<INVALID>", "'ATOM'", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "'ID'", "<INVALID>", "'NAME'", "<INVALID>", 
                     "'CUT'", "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "'STORE1'", "'STORE2'", "'STORE3'", 
                     "'STORE4'", "'STORE5'", "'STORE6'", "'STORE7'", "'STORE8'", 
                     "'STORE9'", "'TAG'", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "'SHOW'", "<INVALID>", "'FOR'", "'LOOP'", "'TAIL'", 
                     "'HEAD'", "'OR'", "'AND'", "'NOT'", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "'HBDA'", "'HBDB'", "<INVALID>", 
                     "<INVALID>", "':'", "<INVALID>", "'<'", "'>'", "'<='", 
                     "'>='", "'#'", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "'+'", "'-'", "<INVALID>", "'/'", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "'ACOS'", "'ASIN'", "'COS'", "'DECODE'", "'ENCODE'", 
                     "'EXP'", "'GAUSS'", "'HEAVY'", "'INT'", "'LOG10'", 
                     "'LOG'", "<INVALID>", "'MAXW'", "<INVALID>", "'MOD'", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "'SIN'", "'SQRT'", 
                     "'TAN'", "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "'RMS'", "'SUM'", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "'IN'" ]

    symbolicNames = [ "<INVALID>", "Set", "End", "Noe", "Assign", "Asymptote", 
                      "Averaging", "Bhig", "Ceiling", "Classification", 
                      "CountViol", "Distribute", "Monomers", "Ncount", "Nrestraints", 
                      "Potential", "Predict", "Print", "Threshold", "Reset", 
                      "Rswitch", "Scale", "SoExponent", "SqConstant", "SqExponent", 
                      "SqOffset", "Temperature", "Cutoff", "Cuton", "From", 
                      "To", "Peak", "Spectrum", "Volume", "Ppm1", "Ppm2", 
                      "Restraints", "Dihedral", "Nassign", "Sanisotropy", 
                      "Coefficients", "ForceConstant", "Xdipolar", "Dipolar", 
                      "Type", "Sign", "Average", "VectorAngle", "Cv", "Partition", 
                      "Tensor", "Anisotropy", "Planar", "Group", "Initialize", 
                      "Selection", "Weight", "Harmonic", "Exponent", "Normal", 
                      "Xadc", "Expectation", "Size", "Zero", "Coupling", 
                      "DegEnergy", "Carbon", "PhiStep", "PsiStep", "Rcoil", 
                      "Proton", "Observed", "Amides", "Nitrogens", "Oxygens", 
                      "RingAtoms", "AlphasAndAmides", "Error", "Ramachandran", 
                      "Gaussian", "Phase", "Quartic", "Shape", "Sort", "Dimensions", 
                      "Collapse", "Danisotropy", "Orient", "Height", "MaxGaussians", 
                      "NewGaussian", "Dcsa", "Sigma", "Pcsa", "OneBond", 
                      "AngleDb", "DerivFlag", "Angle_or_Dihedral", "Paramagnetic", 
                      "Kconst", "Omega", "Tauc", "Debug", "Xpcs", "Tolerance", 
                      "Save", "Fmed", "ErrOn", "ErrOff", "Fon", "Foff", 
                      "Son", "Soff", "Frun", "Xrdcoupling", "Xangle", "Xccr", 
                      "Weip", "Kdir", "Klin", "Nseg", "Nmin", "Nmax", "Segm", 
                      "Ohcut", "Coh1cut", "Coh2cut", "Ohncut", "Updfrq", 
                      "Prnfrq", "Freemode", "Donor", "Acceptor", "Flags", 
                      "All", "Around", "Atom", "Attribute", "BondedTo", 
                      "ByGroup", "ByRes", "Chemical", "Hydrogen", "Id", 
                      "Known", "Name", "Point", "Cut", "Previous", "Pseudo", 
                      "Residue", "Resname", "Saround", "SegIdentifier", 
                      "Store_1", "Store_2", "Store_3", "Store_4", "Store_5", 
                      "Store_6", "Store_7", "Store_8", "Store_9", "Tag", 
                      "Vector", "Do_Lp", "Identify_Lp", "Show", "Evaluate_Lp", 
                      "For", "Loop", "Tail", "Head", "Or_op", "And_op", 
                      "Not_op", "Comma", "Complex", "Integer", "Logical", 
                      "Real", "Double_quote_string", "SHARP_COMMENT", "EXCLM_COMMENT", 
                      "SMCLN_COMMENT", "Simple_name", "Simple_names", "Integers", 
                      "Hbda", "Hbdb", "L_paren", "R_paren", "Colon", "Equ_op", 
                      "Lt_op", "Gt_op", "Leq_op", "Geq_op", "Neq_op", "Symbol_name", 
                      "SPACE", "COMMENT", "SECTION_COMMENT", "LINE_COMMENT", 
                      "SET_VARIABLE", "Abs", "Attr_properties", "Comparison_ops", 
                      "SPACE_ATTR", "Averaging_methods", "Simple_name_A", 
                      "SPACE_AVER", "Equ_op_P", "Potential_types", "Simple_name_P", 
                      "SPACE_POTE", "Rdc_dist_fix_types", "Rdc_or_Diff_anis_types", 
                      "Csa_types", "SPACE_TYPE", "Gauss_or_Quart", "SPACE_SHAP", 
                      "Exclude", "Include", "End_F", "Class_name", "Any_class", 
                      "SPACE_FLAG", "R_paren_VE", "Equ_op_VE", "Add_op_VE", 
                      "Sub_op_VE", "Mul_op_VE", "Div_op_VE", "Exp_op_VE", 
                      "Comma_VE", "Integer_VE", "Real_VE", "Atom_properties_VE", 
                      "Abs_VE", "Acos_VE", "Asin_VE", "Cos_VE", "Decode_VE", 
                      "Encode_VE", "Exp_VE", "Gauss_VE", "Heavy_VE", "Int_VE", 
                      "Log10_VE", "Log_VE", "Max_VE", "Maxw_VE", "Min_VE", 
                      "Mod_VE", "Norm_VE", "Random_VE", "Sign_VE", "Sin_VE", 
                      "Sqrt_VE", "Tan_VE", "Simple_name_VE", "Symbol_name_VE", 
                      "Double_quote_string_VE", "SPACE_VE", "L_paren_VF", 
                      "SPACE_VF", "L_paren_VS", "R_paren_VS", "Average_VS", 
                      "Element_VS", "Max_VS", "Min_VS", "Norm_VS", "Rms_VS", 
                      "Sum_VS", "Atom_properties_VS", "SPACE_VS", "L_paren_CF", 
                      "R_paren_CF", "In_CF", "Integer_CF", "Real_CF", "Symbol_name_CF", 
                      "Simple_name_CF", "SPACE_CF", "COMMENT_CF", "Simple_name_LL", 
                      "SPACE_LL" ]

    RULE_xplor_nih_mr = 0
    RULE_distance_restraint = 1
    RULE_dihedral_angle_restraint = 2
    RULE_rdc_restraint = 3
    RULE_planar_restraint = 4
    RULE_harmonic_restraint = 5
    RULE_antidistance_restraint = 6
    RULE_coupling_restraint = 7
    RULE_carbon_shift_restraint = 8
    RULE_proton_shift_restraint = 9
    RULE_dihedral_angle_db_restraint = 10
    RULE_radius_of_gyration_restraint = 11
    RULE_diffusion_anisotropy_restraint = 12
    RULE_orientation_db_restraint = 13
    RULE_csa_restraint = 14
    RULE_pcsa_restraint = 15
    RULE_one_bond_coupling_restraint = 16
    RULE_angle_db_restraint = 17
    RULE_pre_restraint = 18
    RULE_pcs_restraint = 19
    RULE_prdc_restraint = 20
    RULE_porientation_restraint = 21
    RULE_pccr_restraint = 22
    RULE_hbond_restraint = 23
    RULE_hbond_db_restraint = 24
    RULE_noe_statement = 25
    RULE_noe_assign = 26
    RULE_predict_statement = 27
    RULE_noe_annotation = 28
    RULE_dihedral_statement = 29
    RULE_dihedral_assign = 30
    RULE_sani_statement = 31
    RULE_sani_assign = 32
    RULE_xdip_statement = 33
    RULE_xdip_assign = 34
    RULE_vean_statement = 35
    RULE_vean_assign = 36
    RULE_tenso_statement = 37
    RULE_tenso_assign = 38
    RULE_anis_statement = 39
    RULE_anis_assign = 40
    RULE_planar_statement = 41
    RULE_group_statement = 42
    RULE_harmonic_statement = 43
    RULE_harmonic_assign = 44
    RULE_antidistance_statement = 45
    RULE_xadc_assign = 46
    RULE_coupling_statement = 47
    RULE_coup_assign = 48
    RULE_carbon_shift_statement = 49
    RULE_carbon_shift_assign = 50
    RULE_carbon_shift_rcoil = 51
    RULE_proton_shift_statement = 52
    RULE_observed = 53
    RULE_proton_shift_rcoil = 54
    RULE_proton_shift_anisotropy = 55
    RULE_proton_shift_amides = 56
    RULE_proton_shift_carbons = 57
    RULE_proton_shift_nitrogens = 58
    RULE_proton_shift_oxygens = 59
    RULE_proton_shift_ring_atoms = 60
    RULE_proton_shift_alphas_and_amides = 61
    RULE_ramachandran_statement = 62
    RULE_rama_assign = 63
    RULE_collapse_statement = 64
    RULE_coll_assign = 65
    RULE_diffusion_statement = 66
    RULE_dani_assign = 67
    RULE_orientation_statement = 68
    RULE_orie_assign = 69
    RULE_csa_statement = 70
    RULE_csa_assign = 71
    RULE_pcsa_statement = 72
    RULE_one_bond_coupling_statement = 73
    RULE_one_bond_assign = 74
    RULE_angle_db_statement = 75
    RULE_angle_db_assign = 76
    RULE_pre_statement = 77
    RULE_pre_assign = 78
    RULE_pcs_statement = 79
    RULE_pcs_assign = 80
    RULE_prdc_statement = 81
    RULE_prdc_assign = 82
    RULE_porientation_statement = 83
    RULE_porientation_assign = 84
    RULE_pccr_statement = 85
    RULE_pccr_assign = 86
    RULE_hbond_statement = 87
    RULE_hbond_assign = 88
    RULE_hbond_db_statement = 89
    RULE_hbond_db_assign = 90
    RULE_selection = 91
    RULE_selection_expression = 92
    RULE_term = 93
    RULE_factor = 94
    RULE_number = 95
    RULE_number_f = 96
    RULE_number_s = 97
    RULE_number_a = 98
    RULE_flag_statement = 99
    RULE_vector_statement = 100
    RULE_vector_mode = 101
    RULE_vector_expression = 102
    RULE_vector_operation = 103
    RULE_vflc = 104
    RULE_vector_func_call = 105
    RULE_vector_show_property = 106
    RULE_evaluate_statement = 107
    RULE_evaluate_operation = 108
    RULE_dihedral_assign_loop = 109

    ruleNames =  [ "xplor_nih_mr", "distance_restraint", "dihedral_angle_restraint", 
                   "rdc_restraint", "planar_restraint", "harmonic_restraint", 
                   "antidistance_restraint", "coupling_restraint", "carbon_shift_restraint", 
                   "proton_shift_restraint", "dihedral_angle_db_restraint", 
                   "radius_of_gyration_restraint", "diffusion_anisotropy_restraint", 
                   "orientation_db_restraint", "csa_restraint", "pcsa_restraint", 
                   "one_bond_coupling_restraint", "angle_db_restraint", 
                   "pre_restraint", "pcs_restraint", "prdc_restraint", "porientation_restraint", 
                   "pccr_restraint", "hbond_restraint", "hbond_db_restraint", 
                   "noe_statement", "noe_assign", "predict_statement", "noe_annotation", 
                   "dihedral_statement", "dihedral_assign", "sani_statement", 
                   "sani_assign", "xdip_statement", "xdip_assign", "vean_statement", 
                   "vean_assign", "tenso_statement", "tenso_assign", "anis_statement", 
                   "anis_assign", "planar_statement", "group_statement", 
                   "harmonic_statement", "harmonic_assign", "antidistance_statement", 
                   "xadc_assign", "coupling_statement", "coup_assign", "carbon_shift_statement", 
                   "carbon_shift_assign", "carbon_shift_rcoil", "proton_shift_statement", 
                   "observed", "proton_shift_rcoil", "proton_shift_anisotropy", 
                   "proton_shift_amides", "proton_shift_carbons", "proton_shift_nitrogens", 
                   "proton_shift_oxygens", "proton_shift_ring_atoms", "proton_shift_alphas_and_amides", 
                   "ramachandran_statement", "rama_assign", "collapse_statement", 
                   "coll_assign", "diffusion_statement", "dani_assign", 
                   "orientation_statement", "orie_assign", "csa_statement", 
                   "csa_assign", "pcsa_statement", "one_bond_coupling_statement", 
                   "one_bond_assign", "angle_db_statement", "angle_db_assign", 
                   "pre_statement", "pre_assign", "pcs_statement", "pcs_assign", 
                   "prdc_statement", "prdc_assign", "porientation_statement", 
                   "porientation_assign", "pccr_statement", "pccr_assign", 
                   "hbond_statement", "hbond_assign", "hbond_db_statement", 
                   "hbond_db_assign", "selection", "selection_expression", 
                   "term", "factor", "number", "number_f", "number_s", "number_a", 
                   "flag_statement", "vector_statement", "vector_mode", 
                   "vector_expression", "vector_operation", "vflc", "vector_func_call", 
                   "vector_show_property", "evaluate_statement", "evaluate_operation", 
                   "dihedral_assign_loop" ]

    EOF = Token.EOF
    Set=1
    End=2
    Noe=3
    Assign=4
    Asymptote=5
    Averaging=6
    Bhig=7
    Ceiling=8
    Classification=9
    CountViol=10
    Distribute=11
    Monomers=12
    Ncount=13
    Nrestraints=14
    Potential=15
    Predict=16
    Print=17
    Threshold=18
    Reset=19
    Rswitch=20
    Scale=21
    SoExponent=22
    SqConstant=23
    SqExponent=24
    SqOffset=25
    Temperature=26
    Cutoff=27
    Cuton=28
    From=29
    To=30
    Peak=31
    Spectrum=32
    Volume=33
    Ppm1=34
    Ppm2=35
    Restraints=36
    Dihedral=37
    Nassign=38
    Sanisotropy=39
    Coefficients=40
    ForceConstant=41
    Xdipolar=42
    Dipolar=43
    Type=44
    Sign=45
    Average=46
    VectorAngle=47
    Cv=48
    Partition=49
    Tensor=50
    Anisotropy=51
    Planar=52
    Group=53
    Initialize=54
    Selection=55
    Weight=56
    Harmonic=57
    Exponent=58
    Normal=59
    Xadc=60
    Expectation=61
    Size=62
    Zero=63
    Coupling=64
    DegEnergy=65
    Carbon=66
    PhiStep=67
    PsiStep=68
    Rcoil=69
    Proton=70
    Observed=71
    Amides=72
    Nitrogens=73
    Oxygens=74
    RingAtoms=75
    AlphasAndAmides=76
    Error=77
    Ramachandran=78
    Gaussian=79
    Phase=80
    Quartic=81
    Shape=82
    Sort=83
    Dimensions=84
    Collapse=85
    Danisotropy=86
    Orient=87
    Height=88
    MaxGaussians=89
    NewGaussian=90
    Dcsa=91
    Sigma=92
    Pcsa=93
    OneBond=94
    AngleDb=95
    DerivFlag=96
    Angle_or_Dihedral=97
    Paramagnetic=98
    Kconst=99
    Omega=100
    Tauc=101
    Debug=102
    Xpcs=103
    Tolerance=104
    Save=105
    Fmed=106
    ErrOn=107
    ErrOff=108
    Fon=109
    Foff=110
    Son=111
    Soff=112
    Frun=113
    Xrdcoupling=114
    Xangle=115
    Xccr=116
    Weip=117
    Kdir=118
    Klin=119
    Nseg=120
    Nmin=121
    Nmax=122
    Segm=123
    Ohcut=124
    Coh1cut=125
    Coh2cut=126
    Ohncut=127
    Updfrq=128
    Prnfrq=129
    Freemode=130
    Donor=131
    Acceptor=132
    Flags=133
    All=134
    Around=135
    Atom=136
    Attribute=137
    BondedTo=138
    ByGroup=139
    ByRes=140
    Chemical=141
    Hydrogen=142
    Id=143
    Known=144
    Name=145
    Point=146
    Cut=147
    Previous=148
    Pseudo=149
    Residue=150
    Resname=151
    Saround=152
    SegIdentifier=153
    Store_1=154
    Store_2=155
    Store_3=156
    Store_4=157
    Store_5=158
    Store_6=159
    Store_7=160
    Store_8=161
    Store_9=162
    Tag=163
    Vector=164
    Do_Lp=165
    Identify_Lp=166
    Show=167
    Evaluate_Lp=168
    For=169
    Loop=170
    Tail=171
    Head=172
    Or_op=173
    And_op=174
    Not_op=175
    Comma=176
    Complex=177
    Integer=178
    Logical=179
    Real=180
    Double_quote_string=181
    SHARP_COMMENT=182
    EXCLM_COMMENT=183
    SMCLN_COMMENT=184
    Simple_name=185
    Simple_names=186
    Integers=187
    Hbda=188
    Hbdb=189
    L_paren=190
    R_paren=191
    Colon=192
    Equ_op=193
    Lt_op=194
    Gt_op=195
    Leq_op=196
    Geq_op=197
    Neq_op=198
    Symbol_name=199
    SPACE=200
    COMMENT=201
    SECTION_COMMENT=202
    LINE_COMMENT=203
    SET_VARIABLE=204
    Abs=205
    Attr_properties=206
    Comparison_ops=207
    SPACE_ATTR=208
    Averaging_methods=209
    Simple_name_A=210
    SPACE_AVER=211
    Equ_op_P=212
    Potential_types=213
    Simple_name_P=214
    SPACE_POTE=215
    Rdc_dist_fix_types=216
    Rdc_or_Diff_anis_types=217
    Csa_types=218
    SPACE_TYPE=219
    Gauss_or_Quart=220
    SPACE_SHAP=221
    Exclude=222
    Include=223
    End_F=224
    Class_name=225
    Any_class=226
    SPACE_FLAG=227
    R_paren_VE=228
    Equ_op_VE=229
    Add_op_VE=230
    Sub_op_VE=231
    Mul_op_VE=232
    Div_op_VE=233
    Exp_op_VE=234
    Comma_VE=235
    Integer_VE=236
    Real_VE=237
    Atom_properties_VE=238
    Abs_VE=239
    Acos_VE=240
    Asin_VE=241
    Cos_VE=242
    Decode_VE=243
    Encode_VE=244
    Exp_VE=245
    Gauss_VE=246
    Heavy_VE=247
    Int_VE=248
    Log10_VE=249
    Log_VE=250
    Max_VE=251
    Maxw_VE=252
    Min_VE=253
    Mod_VE=254
    Norm_VE=255
    Random_VE=256
    Sign_VE=257
    Sin_VE=258
    Sqrt_VE=259
    Tan_VE=260
    Simple_name_VE=261
    Symbol_name_VE=262
    Double_quote_string_VE=263
    SPACE_VE=264
    L_paren_VF=265
    SPACE_VF=266
    L_paren_VS=267
    R_paren_VS=268
    Average_VS=269
    Element_VS=270
    Max_VS=271
    Min_VS=272
    Norm_VS=273
    Rms_VS=274
    Sum_VS=275
    Atom_properties_VS=276
    SPACE_VS=277
    L_paren_CF=278
    R_paren_CF=279
    In_CF=280
    Integer_CF=281
    Real_CF=282
    Symbol_name_CF=283
    Simple_name_CF=284
    SPACE_CF=285
    COMMENT_CF=286
    Simple_name_LL=287
    SPACE_LL=288

    def __init__(self, input:TokenStream, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.10.1")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None




    class Xplor_nih_mrContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EOF(self):
            return self.getToken(XplorMRParser.EOF, 0)

        def distance_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Distance_restraintContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Distance_restraintContext,i)


        def dihedral_angle_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Dihedral_angle_restraintContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Dihedral_angle_restraintContext,i)


        def rdc_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Rdc_restraintContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Rdc_restraintContext,i)


        def planar_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Planar_restraintContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Planar_restraintContext,i)


        def harmonic_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Harmonic_restraintContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Harmonic_restraintContext,i)


        def antidistance_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Antidistance_restraintContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Antidistance_restraintContext,i)


        def coupling_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Coupling_restraintContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Coupling_restraintContext,i)


        def carbon_shift_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Carbon_shift_restraintContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Carbon_shift_restraintContext,i)


        def proton_shift_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Proton_shift_restraintContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Proton_shift_restraintContext,i)


        def dihedral_angle_db_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Dihedral_angle_db_restraintContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Dihedral_angle_db_restraintContext,i)


        def radius_of_gyration_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Radius_of_gyration_restraintContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Radius_of_gyration_restraintContext,i)


        def diffusion_anisotropy_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Diffusion_anisotropy_restraintContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Diffusion_anisotropy_restraintContext,i)


        def orientation_db_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Orientation_db_restraintContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Orientation_db_restraintContext,i)


        def csa_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Csa_restraintContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Csa_restraintContext,i)


        def pcsa_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Pcsa_restraintContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Pcsa_restraintContext,i)


        def one_bond_coupling_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.One_bond_coupling_restraintContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.One_bond_coupling_restraintContext,i)


        def angle_db_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Angle_db_restraintContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Angle_db_restraintContext,i)


        def pre_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Pre_restraintContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Pre_restraintContext,i)


        def pcs_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Pcs_restraintContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Pcs_restraintContext,i)


        def prdc_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Prdc_restraintContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Prdc_restraintContext,i)


        def porientation_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Porientation_restraintContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Porientation_restraintContext,i)


        def pccr_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Pccr_restraintContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Pccr_restraintContext,i)


        def hbond_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Hbond_restraintContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Hbond_restraintContext,i)


        def hbond_db_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Hbond_db_restraintContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Hbond_db_restraintContext,i)


        def flag_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Flag_statementContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Flag_statementContext,i)


        def vector_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Vector_statementContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Vector_statementContext,i)


        def evaluate_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Evaluate_statementContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Evaluate_statementContext,i)


        def noe_assign(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Noe_assignContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Noe_assignContext,i)


        def dihedral_assign(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Dihedral_assignContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Dihedral_assignContext,i)


        def sani_assign(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Sani_assignContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Sani_assignContext,i)


        def planar_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Planar_statementContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Planar_statementContext,i)


        def harmonic_assign(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Harmonic_assignContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Harmonic_assignContext,i)


        def hbond_assign(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Hbond_assignContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Hbond_assignContext,i)


        def hbond_db_assign(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Hbond_db_assignContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Hbond_db_assignContext,i)


        def coup_assign(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Coup_assignContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Coup_assignContext,i)


        def xadc_assign(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Xadc_assignContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Xadc_assignContext,i)


        def coll_assign(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Coll_assignContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Coll_assignContext,i)


        def csa_assign(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Csa_assignContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Csa_assignContext,i)


        def pre_assign(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Pre_assignContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Pre_assignContext,i)


        def pcs_assign(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Pcs_assignContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Pcs_assignContext,i)


        def observed(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.ObservedContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.ObservedContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_xplor_nih_mr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterXplor_nih_mr" ):
                listener.enterXplor_nih_mr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitXplor_nih_mr" ):
                listener.exitXplor_nih_mr(self)




    def xplor_nih_mr(self):

        localctx = XplorMRParser.Xplor_nih_mrContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_xplor_nih_mr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 263
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << XplorMRParser.Noe) | (1 << XplorMRParser.Assign) | (1 << XplorMRParser.Restraints) | (1 << XplorMRParser.Dihedral) | (1 << XplorMRParser.Sanisotropy) | (1 << XplorMRParser.Xdipolar) | (1 << XplorMRParser.Dipolar) | (1 << XplorMRParser.VectorAngle) | (1 << XplorMRParser.Tensor) | (1 << XplorMRParser.Anisotropy) | (1 << XplorMRParser.Planar) | (1 << XplorMRParser.Group) | (1 << XplorMRParser.Initialize) | (1 << XplorMRParser.Harmonic) | (1 << XplorMRParser.Xadc))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (XplorMRParser.Coupling - 64)) | (1 << (XplorMRParser.Carbon - 64)) | (1 << (XplorMRParser.Proton - 64)) | (1 << (XplorMRParser.Observed - 64)) | (1 << (XplorMRParser.Ramachandran - 64)) | (1 << (XplorMRParser.Collapse - 64)) | (1 << (XplorMRParser.Danisotropy - 64)) | (1 << (XplorMRParser.Orient - 64)) | (1 << (XplorMRParser.Dcsa - 64)) | (1 << (XplorMRParser.Pcsa - 64)) | (1 << (XplorMRParser.OneBond - 64)) | (1 << (XplorMRParser.AngleDb - 64)) | (1 << (XplorMRParser.Paramagnetic - 64)) | (1 << (XplorMRParser.Xpcs - 64)) | (1 << (XplorMRParser.Xrdcoupling - 64)) | (1 << (XplorMRParser.Xangle - 64)) | (1 << (XplorMRParser.Xccr - 64)))) != 0) or ((((_la - 133)) & ~0x3f) == 0 and ((1 << (_la - 133)) & ((1 << (XplorMRParser.Flags - 133)) | (1 << (XplorMRParser.Vector - 133)) | (1 << (XplorMRParser.Evaluate_Lp - 133)) | (1 << (XplorMRParser.Hbda - 133)) | (1 << (XplorMRParser.Hbdb - 133)))) != 0):
                self.state = 261
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,0,self._ctx)
                if la_ == 1:
                    self.state = 220
                    self.distance_restraint()
                    pass

                elif la_ == 2:
                    self.state = 221
                    self.dihedral_angle_restraint()
                    pass

                elif la_ == 3:
                    self.state = 222
                    self.rdc_restraint()
                    pass

                elif la_ == 4:
                    self.state = 223
                    self.planar_restraint()
                    pass

                elif la_ == 5:
                    self.state = 224
                    self.harmonic_restraint()
                    pass

                elif la_ == 6:
                    self.state = 225
                    self.antidistance_restraint()
                    pass

                elif la_ == 7:
                    self.state = 226
                    self.coupling_restraint()
                    pass

                elif la_ == 8:
                    self.state = 227
                    self.carbon_shift_restraint()
                    pass

                elif la_ == 9:
                    self.state = 228
                    self.proton_shift_restraint()
                    pass

                elif la_ == 10:
                    self.state = 229
                    self.dihedral_angle_db_restraint()
                    pass

                elif la_ == 11:
                    self.state = 230
                    self.radius_of_gyration_restraint()
                    pass

                elif la_ == 12:
                    self.state = 231
                    self.diffusion_anisotropy_restraint()
                    pass

                elif la_ == 13:
                    self.state = 232
                    self.orientation_db_restraint()
                    pass

                elif la_ == 14:
                    self.state = 233
                    self.csa_restraint()
                    pass

                elif la_ == 15:
                    self.state = 234
                    self.pcsa_restraint()
                    pass

                elif la_ == 16:
                    self.state = 235
                    self.one_bond_coupling_restraint()
                    pass

                elif la_ == 17:
                    self.state = 236
                    self.angle_db_restraint()
                    pass

                elif la_ == 18:
                    self.state = 237
                    self.pre_restraint()
                    pass

                elif la_ == 19:
                    self.state = 238
                    self.pcs_restraint()
                    pass

                elif la_ == 20:
                    self.state = 239
                    self.prdc_restraint()
                    pass

                elif la_ == 21:
                    self.state = 240
                    self.porientation_restraint()
                    pass

                elif la_ == 22:
                    self.state = 241
                    self.pccr_restraint()
                    pass

                elif la_ == 23:
                    self.state = 242
                    self.hbond_restraint()
                    pass

                elif la_ == 24:
                    self.state = 243
                    self.hbond_db_restraint()
                    pass

                elif la_ == 25:
                    self.state = 244
                    self.flag_statement()
                    pass

                elif la_ == 26:
                    self.state = 245
                    self.vector_statement()
                    pass

                elif la_ == 27:
                    self.state = 246
                    self.evaluate_statement()
                    pass

                elif la_ == 28:
                    self.state = 247
                    self.noe_assign()
                    pass

                elif la_ == 29:
                    self.state = 248
                    self.dihedral_assign()
                    pass

                elif la_ == 30:
                    self.state = 249
                    self.sani_assign()
                    pass

                elif la_ == 31:
                    self.state = 250
                    self.planar_statement()
                    pass

                elif la_ == 32:
                    self.state = 251
                    self.harmonic_assign()
                    pass

                elif la_ == 33:
                    self.state = 252
                    self.hbond_assign()
                    pass

                elif la_ == 34:
                    self.state = 253
                    self.hbond_db_assign()
                    pass

                elif la_ == 35:
                    self.state = 254
                    self.coup_assign()
                    pass

                elif la_ == 36:
                    self.state = 255
                    self.xadc_assign()
                    pass

                elif la_ == 37:
                    self.state = 256
                    self.coll_assign()
                    pass

                elif la_ == 38:
                    self.state = 257
                    self.csa_assign()
                    pass

                elif la_ == 39:
                    self.state = 258
                    self.pre_assign()
                    pass

                elif la_ == 40:
                    self.state = 259
                    self.pcs_assign()
                    pass

                elif la_ == 41:
                    self.state = 260
                    self.observed()
                    pass


                self.state = 265
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 266
            self.match(XplorMRParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Distance_restraintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Noe(self):
            return self.getToken(XplorMRParser.Noe, 0)

        def End(self):
            return self.getToken(XplorMRParser.End, 0)

        def noe_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Noe_statementContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Noe_statementContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_distance_restraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDistance_restraint" ):
                listener.enterDistance_restraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDistance_restraint" ):
                listener.exitDistance_restraint(self)




    def distance_restraint(self):

        localctx = XplorMRParser.Distance_restraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_distance_restraint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 268
            self.match(XplorMRParser.Noe)
            self.state = 272
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << XplorMRParser.Assign) | (1 << XplorMRParser.Asymptote) | (1 << XplorMRParser.Averaging) | (1 << XplorMRParser.Bhig) | (1 << XplorMRParser.Ceiling) | (1 << XplorMRParser.Classification) | (1 << XplorMRParser.CountViol) | (1 << XplorMRParser.Distribute) | (1 << XplorMRParser.Monomers) | (1 << XplorMRParser.Ncount) | (1 << XplorMRParser.Nrestraints) | (1 << XplorMRParser.Potential) | (1 << XplorMRParser.Predict) | (1 << XplorMRParser.Print) | (1 << XplorMRParser.Reset) | (1 << XplorMRParser.Rswitch) | (1 << XplorMRParser.Scale) | (1 << XplorMRParser.SoExponent) | (1 << XplorMRParser.SqConstant) | (1 << XplorMRParser.SqExponent) | (1 << XplorMRParser.SqOffset) | (1 << XplorMRParser.Temperature))) != 0):
                self.state = 269
                self.noe_statement()
                self.state = 274
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 275
            self.match(XplorMRParser.End)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Dihedral_angle_restraintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Dihedral(self):
            return self.getToken(XplorMRParser.Dihedral, 0)

        def End(self):
            return self.getToken(XplorMRParser.End, 0)

        def Restraints(self):
            return self.getToken(XplorMRParser.Restraints, 0)

        def dihedral_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Dihedral_statementContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Dihedral_statementContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_dihedral_angle_restraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDihedral_angle_restraint" ):
                listener.enterDihedral_angle_restraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDihedral_angle_restraint" ):
                listener.exitDihedral_angle_restraint(self)




    def dihedral_angle_restraint(self):

        localctx = XplorMRParser.Dihedral_angle_restraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_dihedral_angle_restraint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 278
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==XplorMRParser.Restraints:
                self.state = 277
                self.match(XplorMRParser.Restraints)


            self.state = 280
            self.match(XplorMRParser.Dihedral)
            self.state = 284
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << XplorMRParser.Assign) | (1 << XplorMRParser.Reset) | (1 << XplorMRParser.Scale) | (1 << XplorMRParser.Nassign))) != 0) or _la==XplorMRParser.For:
                self.state = 281
                self.dihedral_statement()
                self.state = 286
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 287
            self.match(XplorMRParser.End)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Rdc_restraintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Sanisotropy(self):
            return self.getToken(XplorMRParser.Sanisotropy, 0)

        def End(self):
            return self.getToken(XplorMRParser.End, 0)

        def sani_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Sani_statementContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Sani_statementContext,i)


        def Xdipolar(self):
            return self.getToken(XplorMRParser.Xdipolar, 0)

        def Dipolar(self):
            return self.getToken(XplorMRParser.Dipolar, 0)

        def xdip_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Xdip_statementContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Xdip_statementContext,i)


        def VectorAngle(self):
            return self.getToken(XplorMRParser.VectorAngle, 0)

        def vean_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Vean_statementContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Vean_statementContext,i)


        def Tensor(self):
            return self.getToken(XplorMRParser.Tensor, 0)

        def tenso_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Tenso_statementContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Tenso_statementContext,i)


        def Anisotropy(self):
            return self.getToken(XplorMRParser.Anisotropy, 0)

        def anis_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Anis_statementContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Anis_statementContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_rdc_restraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRdc_restraint" ):
                listener.enterRdc_restraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRdc_restraint" ):
                listener.exitRdc_restraint(self)




    def rdc_restraint(self):

        localctx = XplorMRParser.Rdc_restraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_rdc_restraint)
        self._la = 0 # Token type
        try:
            self.state = 329
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [XplorMRParser.Sanisotropy]:
                self.enterOuterAlt(localctx, 1)
                self.state = 289
                self.match(XplorMRParser.Sanisotropy)
                self.state = 293
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << XplorMRParser.Assign) | (1 << XplorMRParser.Classification) | (1 << XplorMRParser.Nrestraints) | (1 << XplorMRParser.Potential) | (1 << XplorMRParser.Print) | (1 << XplorMRParser.Reset) | (1 << XplorMRParser.Coefficients) | (1 << XplorMRParser.ForceConstant))) != 0):
                    self.state = 290
                    self.sani_statement()
                    self.state = 295
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 296
                self.match(XplorMRParser.End)
                pass
            elif token in [XplorMRParser.Xdipolar, XplorMRParser.Dipolar]:
                self.enterOuterAlt(localctx, 2)
                self.state = 297
                _la = self._input.LA(1)
                if not(_la==XplorMRParser.Xdipolar or _la==XplorMRParser.Dipolar):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 301
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << XplorMRParser.Assign) | (1 << XplorMRParser.Classification) | (1 << XplorMRParser.Nrestraints) | (1 << XplorMRParser.Potential) | (1 << XplorMRParser.Print) | (1 << XplorMRParser.Reset) | (1 << XplorMRParser.Scale) | (1 << XplorMRParser.Coefficients) | (1 << XplorMRParser.ForceConstant) | (1 << XplorMRParser.Type) | (1 << XplorMRParser.Sign) | (1 << XplorMRParser.Average))) != 0):
                    self.state = 298
                    self.xdip_statement()
                    self.state = 303
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 304
                self.match(XplorMRParser.End)
                pass
            elif token in [XplorMRParser.VectorAngle]:
                self.enterOuterAlt(localctx, 3)
                self.state = 305
                self.match(XplorMRParser.VectorAngle)
                self.state = 309
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << XplorMRParser.Assign) | (1 << XplorMRParser.Classification) | (1 << XplorMRParser.Nrestraints) | (1 << XplorMRParser.Print) | (1 << XplorMRParser.Reset) | (1 << XplorMRParser.ForceConstant) | (1 << XplorMRParser.Cv) | (1 << XplorMRParser.Partition))) != 0):
                    self.state = 306
                    self.vean_statement()
                    self.state = 311
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 312
                self.match(XplorMRParser.End)
                pass
            elif token in [XplorMRParser.Tensor]:
                self.enterOuterAlt(localctx, 4)
                self.state = 313
                self.match(XplorMRParser.Tensor)
                self.state = 317
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << XplorMRParser.Assign) | (1 << XplorMRParser.Classification) | (1 << XplorMRParser.Nrestraints) | (1 << XplorMRParser.Potential) | (1 << XplorMRParser.Print) | (1 << XplorMRParser.Reset) | (1 << XplorMRParser.Coefficients))) != 0):
                    self.state = 314
                    self.tenso_statement()
                    self.state = 319
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 320
                self.match(XplorMRParser.End)
                pass
            elif token in [XplorMRParser.Anisotropy]:
                self.enterOuterAlt(localctx, 5)
                self.state = 321
                self.match(XplorMRParser.Anisotropy)
                self.state = 325
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << XplorMRParser.Assign) | (1 << XplorMRParser.Classification) | (1 << XplorMRParser.Nrestraints) | (1 << XplorMRParser.Potential) | (1 << XplorMRParser.Print) | (1 << XplorMRParser.Reset) | (1 << XplorMRParser.Coefficients) | (1 << XplorMRParser.ForceConstant) | (1 << XplorMRParser.Type))) != 0):
                    self.state = 322
                    self.anis_statement()
                    self.state = 327
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 328
                self.match(XplorMRParser.End)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Planar_restraintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Planar(self):
            return self.getToken(XplorMRParser.Planar, 0)

        def End(self):
            return self.getToken(XplorMRParser.End, 0)

        def Restraints(self):
            return self.getToken(XplorMRParser.Restraints, 0)

        def planar_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Planar_statementContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Planar_statementContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_planar_restraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPlanar_restraint" ):
                listener.enterPlanar_restraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPlanar_restraint" ):
                listener.exitPlanar_restraint(self)




    def planar_restraint(self):

        localctx = XplorMRParser.Planar_restraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_planar_restraint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 332
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==XplorMRParser.Restraints:
                self.state = 331
                self.match(XplorMRParser.Restraints)


            self.state = 334
            self.match(XplorMRParser.Planar)
            self.state = 338
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==XplorMRParser.Group or _la==XplorMRParser.Initialize:
                self.state = 335
                self.planar_statement()
                self.state = 340
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 341
            self.match(XplorMRParser.End)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Harmonic_restraintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Harmonic(self):
            return self.getToken(XplorMRParser.Harmonic, 0)

        def End(self):
            return self.getToken(XplorMRParser.End, 0)

        def Restraints(self):
            return self.getToken(XplorMRParser.Restraints, 0)

        def harmonic_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Harmonic_statementContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Harmonic_statementContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_harmonic_restraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHarmonic_restraint" ):
                listener.enterHarmonic_restraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHarmonic_restraint" ):
                listener.exitHarmonic_restraint(self)




    def harmonic_restraint(self):

        localctx = XplorMRParser.Harmonic_restraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_harmonic_restraint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 344
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==XplorMRParser.Restraints:
                self.state = 343
                self.match(XplorMRParser.Restraints)


            self.state = 346
            self.match(XplorMRParser.Harmonic)
            self.state = 350
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==XplorMRParser.Exponent or _la==XplorMRParser.Normal:
                self.state = 347
                self.harmonic_statement()
                self.state = 352
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 353
            self.match(XplorMRParser.End)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Antidistance_restraintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Xadc(self):
            return self.getToken(XplorMRParser.Xadc, 0)

        def End(self):
            return self.getToken(XplorMRParser.End, 0)

        def antidistance_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Antidistance_statementContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Antidistance_statementContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_antidistance_restraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAntidistance_restraint" ):
                listener.enterAntidistance_restraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAntidistance_restraint" ):
                listener.exitAntidistance_restraint(self)




    def antidistance_restraint(self):

        localctx = XplorMRParser.Antidistance_restraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_antidistance_restraint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 355
            self.match(XplorMRParser.Xadc)
            self.state = 359
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << XplorMRParser.Assign) | (1 << XplorMRParser.Classification) | (1 << XplorMRParser.Nrestraints) | (1 << XplorMRParser.Print) | (1 << XplorMRParser.Reset) | (1 << XplorMRParser.ForceConstant) | (1 << XplorMRParser.Expectation) | (1 << XplorMRParser.Size) | (1 << XplorMRParser.Zero))) != 0):
                self.state = 356
                self.antidistance_statement()
                self.state = 361
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 362
            self.match(XplorMRParser.End)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Coupling_restraintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Coupling(self):
            return self.getToken(XplorMRParser.Coupling, 0)

        def End(self):
            return self.getToken(XplorMRParser.End, 0)

        def coupling_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Coupling_statementContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Coupling_statementContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_coupling_restraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCoupling_restraint" ):
                listener.enterCoupling_restraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCoupling_restraint" ):
                listener.exitCoupling_restraint(self)




    def coupling_restraint(self):

        localctx = XplorMRParser.Coupling_restraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_coupling_restraint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 364
            self.match(XplorMRParser.Coupling)
            self.state = 368
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((((_la - 4)) & ~0x3f) == 0 and ((1 << (_la - 4)) & ((1 << (XplorMRParser.Assign - 4)) | (1 << (XplorMRParser.Classification - 4)) | (1 << (XplorMRParser.Nrestraints - 4)) | (1 << (XplorMRParser.Potential - 4)) | (1 << (XplorMRParser.Print - 4)) | (1 << (XplorMRParser.Reset - 4)) | (1 << (XplorMRParser.Coefficients - 4)) | (1 << (XplorMRParser.ForceConstant - 4)) | (1 << (XplorMRParser.Cv - 4)) | (1 << (XplorMRParser.Partition - 4)) | (1 << (XplorMRParser.DegEnergy - 4)))) != 0):
                self.state = 365
                self.coupling_statement()
                self.state = 370
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 371
            self.match(XplorMRParser.End)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Carbon_shift_restraintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Carbon(self):
            return self.getToken(XplorMRParser.Carbon, 0)

        def End(self):
            return self.getToken(XplorMRParser.End, 0)

        def carbon_shift_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Carbon_shift_statementContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Carbon_shift_statementContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_carbon_shift_restraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCarbon_shift_restraint" ):
                listener.enterCarbon_shift_restraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCarbon_shift_restraint" ):
                listener.exitCarbon_shift_restraint(self)




    def carbon_shift_restraint(self):

        localctx = XplorMRParser.Carbon_shift_restraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_carbon_shift_restraint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 373
            self.match(XplorMRParser.Carbon)
            self.state = 377
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << XplorMRParser.Assign) | (1 << XplorMRParser.Classification) | (1 << XplorMRParser.Nrestraints) | (1 << XplorMRParser.Potential) | (1 << XplorMRParser.Print) | (1 << XplorMRParser.Reset) | (1 << XplorMRParser.ForceConstant) | (1 << XplorMRParser.Expectation) | (1 << XplorMRParser.Zero))) != 0) or ((((_la - 67)) & ~0x3f) == 0 and ((1 << (_la - 67)) & ((1 << (XplorMRParser.PhiStep - 67)) | (1 << (XplorMRParser.PsiStep - 67)) | (1 << (XplorMRParser.Rcoil - 67)))) != 0):
                self.state = 374
                self.carbon_shift_statement()
                self.state = 379
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 380
            self.match(XplorMRParser.End)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Proton_shift_restraintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Proton(self):
            return self.getToken(XplorMRParser.Proton, 0)

        def End(self):
            return self.getToken(XplorMRParser.End, 0)

        def proton_shift_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Proton_shift_statementContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Proton_shift_statementContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_proton_shift_restraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProton_shift_restraint" ):
                listener.enterProton_shift_restraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProton_shift_restraint" ):
                listener.exitProton_shift_restraint(self)




    def proton_shift_restraint(self):

        localctx = XplorMRParser.Proton_shift_restraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_proton_shift_restraint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 382
            self.match(XplorMRParser.Proton)
            self.state = 386
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << XplorMRParser.Classification) | (1 << XplorMRParser.Potential) | (1 << XplorMRParser.Print) | (1 << XplorMRParser.Reset) | (1 << XplorMRParser.ForceConstant) | (1 << XplorMRParser.Anisotropy))) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & ((1 << (XplorMRParser.DegEnergy - 65)) | (1 << (XplorMRParser.Carbon - 65)) | (1 << (XplorMRParser.Rcoil - 65)) | (1 << (XplorMRParser.Observed - 65)) | (1 << (XplorMRParser.Amides - 65)) | (1 << (XplorMRParser.Nitrogens - 65)) | (1 << (XplorMRParser.Oxygens - 65)) | (1 << (XplorMRParser.RingAtoms - 65)) | (1 << (XplorMRParser.AlphasAndAmides - 65)) | (1 << (XplorMRParser.Error - 65)))) != 0):
                self.state = 383
                self.proton_shift_statement()
                self.state = 388
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 389
            self.match(XplorMRParser.End)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Dihedral_angle_db_restraintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Ramachandran(self):
            return self.getToken(XplorMRParser.Ramachandran, 0)

        def End(self):
            return self.getToken(XplorMRParser.End, 0)

        def ramachandran_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Ramachandran_statementContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Ramachandran_statementContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_dihedral_angle_db_restraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDihedral_angle_db_restraint" ):
                listener.enterDihedral_angle_db_restraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDihedral_angle_db_restraint" ):
                listener.exitDihedral_angle_db_restraint(self)




    def dihedral_angle_db_restraint(self):

        localctx = XplorMRParser.Dihedral_angle_db_restraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_dihedral_angle_db_restraint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 391
            self.match(XplorMRParser.Ramachandran)
            self.state = 395
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << XplorMRParser.Assign) | (1 << XplorMRParser.Classification) | (1 << XplorMRParser.Nrestraints) | (1 << XplorMRParser.Print) | (1 << XplorMRParser.Reset) | (1 << XplorMRParser.Scale) | (1 << XplorMRParser.Cutoff) | (1 << XplorMRParser.ForceConstant) | (1 << XplorMRParser.Size) | (1 << XplorMRParser.Zero))) != 0) or ((((_la - 79)) & ~0x3f) == 0 and ((1 << (_la - 79)) & ((1 << (XplorMRParser.Gaussian - 79)) | (1 << (XplorMRParser.Phase - 79)) | (1 << (XplorMRParser.Quartic - 79)) | (1 << (XplorMRParser.Shape - 79)) | (1 << (XplorMRParser.Sort - 79)))) != 0):
                self.state = 392
                self.ramachandran_statement()
                self.state = 397
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 398
            self.match(XplorMRParser.End)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Radius_of_gyration_restraintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Collapse(self):
            return self.getToken(XplorMRParser.Collapse, 0)

        def End(self):
            return self.getToken(XplorMRParser.End, 0)

        def collapse_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Collapse_statementContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Collapse_statementContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_radius_of_gyration_restraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRadius_of_gyration_restraint" ):
                listener.enterRadius_of_gyration_restraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRadius_of_gyration_restraint" ):
                listener.exitRadius_of_gyration_restraint(self)




    def radius_of_gyration_restraint(self):

        localctx = XplorMRParser.Radius_of_gyration_restraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_radius_of_gyration_restraint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 400
            self.match(XplorMRParser.Collapse)
            self.state = 404
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << XplorMRParser.Assign) | (1 << XplorMRParser.Print) | (1 << XplorMRParser.Reset) | (1 << XplorMRParser.Scale))) != 0):
                self.state = 401
                self.collapse_statement()
                self.state = 406
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 407
            self.match(XplorMRParser.End)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Diffusion_anisotropy_restraintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Danisotropy(self):
            return self.getToken(XplorMRParser.Danisotropy, 0)

        def End(self):
            return self.getToken(XplorMRParser.End, 0)

        def diffusion_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Diffusion_statementContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Diffusion_statementContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_diffusion_anisotropy_restraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDiffusion_anisotropy_restraint" ):
                listener.enterDiffusion_anisotropy_restraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDiffusion_anisotropy_restraint" ):
                listener.exitDiffusion_anisotropy_restraint(self)




    def diffusion_anisotropy_restraint(self):

        localctx = XplorMRParser.Diffusion_anisotropy_restraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_diffusion_anisotropy_restraint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 409
            self.match(XplorMRParser.Danisotropy)
            self.state = 413
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << XplorMRParser.Assign) | (1 << XplorMRParser.Classification) | (1 << XplorMRParser.Nrestraints) | (1 << XplorMRParser.Potential) | (1 << XplorMRParser.Print) | (1 << XplorMRParser.Reset) | (1 << XplorMRParser.Coefficients) | (1 << XplorMRParser.ForceConstant) | (1 << XplorMRParser.Type))) != 0):
                self.state = 410
                self.diffusion_statement()
                self.state = 415
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 416
            self.match(XplorMRParser.End)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Orientation_db_restraintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Orient(self):
            return self.getToken(XplorMRParser.Orient, 0)

        def End(self):
            return self.getToken(XplorMRParser.End, 0)

        def orientation_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Orientation_statementContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Orientation_statementContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_orientation_db_restraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOrientation_db_restraint" ):
                listener.enterOrientation_db_restraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOrientation_db_restraint" ):
                listener.exitOrientation_db_restraint(self)




    def orientation_db_restraint(self):

        localctx = XplorMRParser.Orientation_db_restraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_orientation_db_restraint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 418
            self.match(XplorMRParser.Orient)
            self.state = 422
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << XplorMRParser.Assign) | (1 << XplorMRParser.Classification) | (1 << XplorMRParser.Nrestraints) | (1 << XplorMRParser.Print) | (1 << XplorMRParser.Reset) | (1 << XplorMRParser.Cutoff) | (1 << XplorMRParser.ForceConstant) | (1 << XplorMRParser.Size) | (1 << XplorMRParser.Zero))) != 0) or ((((_la - 79)) & ~0x3f) == 0 and ((1 << (_la - 79)) & ((1 << (XplorMRParser.Gaussian - 79)) | (1 << (XplorMRParser.Quartic - 79)) | (1 << (XplorMRParser.Height - 79)) | (1 << (XplorMRParser.MaxGaussians - 79)) | (1 << (XplorMRParser.NewGaussian - 79)))) != 0) or _la==XplorMRParser.Residue:
                self.state = 419
                self.orientation_statement()
                self.state = 424
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 425
            self.match(XplorMRParser.End)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Csa_restraintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Dcsa(self):
            return self.getToken(XplorMRParser.Dcsa, 0)

        def End(self):
            return self.getToken(XplorMRParser.End, 0)

        def csa_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Csa_statementContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Csa_statementContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_csa_restraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCsa_restraint" ):
                listener.enterCsa_restraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCsa_restraint" ):
                listener.exitCsa_restraint(self)




    def csa_restraint(self):

        localctx = XplorMRParser.Csa_restraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_csa_restraint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 427
            self.match(XplorMRParser.Dcsa)
            self.state = 431
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << XplorMRParser.Assign) | (1 << XplorMRParser.Classification) | (1 << XplorMRParser.Nrestraints) | (1 << XplorMRParser.Potential) | (1 << XplorMRParser.Print) | (1 << XplorMRParser.Reset) | (1 << XplorMRParser.Scale) | (1 << XplorMRParser.Coefficients) | (1 << XplorMRParser.ForceConstant) | (1 << XplorMRParser.Type))) != 0) or _la==XplorMRParser.Sigma:
                self.state = 428
                self.csa_statement()
                self.state = 433
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 434
            self.match(XplorMRParser.End)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pcsa_restraintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Pcsa(self):
            return self.getToken(XplorMRParser.Pcsa, 0)

        def End(self):
            return self.getToken(XplorMRParser.End, 0)

        def pcsa_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Pcsa_statementContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Pcsa_statementContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_pcsa_restraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPcsa_restraint" ):
                listener.enterPcsa_restraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPcsa_restraint" ):
                listener.exitPcsa_restraint(self)




    def pcsa_restraint(self):

        localctx = XplorMRParser.Pcsa_restraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_pcsa_restraint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 436
            self.match(XplorMRParser.Pcsa)
            self.state = 440
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << XplorMRParser.Assign) | (1 << XplorMRParser.Classification) | (1 << XplorMRParser.Nrestraints) | (1 << XplorMRParser.Potential) | (1 << XplorMRParser.Print) | (1 << XplorMRParser.Reset) | (1 << XplorMRParser.Scale) | (1 << XplorMRParser.Coefficients) | (1 << XplorMRParser.ForceConstant))) != 0) or _la==XplorMRParser.Sigma:
                self.state = 437
                self.pcsa_statement()
                self.state = 442
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 443
            self.match(XplorMRParser.End)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class One_bond_coupling_restraintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OneBond(self):
            return self.getToken(XplorMRParser.OneBond, 0)

        def End(self):
            return self.getToken(XplorMRParser.End, 0)

        def one_bond_coupling_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.One_bond_coupling_statementContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.One_bond_coupling_statementContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_one_bond_coupling_restraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOne_bond_coupling_restraint" ):
                listener.enterOne_bond_coupling_restraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOne_bond_coupling_restraint" ):
                listener.exitOne_bond_coupling_restraint(self)




    def one_bond_coupling_restraint(self):

        localctx = XplorMRParser.One_bond_coupling_restraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_one_bond_coupling_restraint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 445
            self.match(XplorMRParser.OneBond)
            self.state = 449
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << XplorMRParser.Assign) | (1 << XplorMRParser.Classification) | (1 << XplorMRParser.Nrestraints) | (1 << XplorMRParser.Potential) | (1 << XplorMRParser.Print) | (1 << XplorMRParser.Reset) | (1 << XplorMRParser.Coefficients) | (1 << XplorMRParser.ForceConstant))) != 0):
                self.state = 446
                self.one_bond_coupling_statement()
                self.state = 451
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 452
            self.match(XplorMRParser.End)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Angle_db_restraintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AngleDb(self):
            return self.getToken(XplorMRParser.AngleDb, 0)

        def End(self):
            return self.getToken(XplorMRParser.End, 0)

        def angle_db_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Angle_db_statementContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Angle_db_statementContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_angle_db_restraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAngle_db_restraint" ):
                listener.enterAngle_db_restraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAngle_db_restraint" ):
                listener.exitAngle_db_restraint(self)




    def angle_db_restraint(self):

        localctx = XplorMRParser.Angle_db_restraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_angle_db_restraint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 454
            self.match(XplorMRParser.AngleDb)
            self.state = 458
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << XplorMRParser.Assign) | (1 << XplorMRParser.Classification) | (1 << XplorMRParser.Nrestraints) | (1 << XplorMRParser.Potential) | (1 << XplorMRParser.Print) | (1 << XplorMRParser.Reset) | (1 << XplorMRParser.ForceConstant) | (1 << XplorMRParser.Expectation) | (1 << XplorMRParser.Size) | (1 << XplorMRParser.Zero))) != 0) or _la==XplorMRParser.Error or _la==XplorMRParser.DerivFlag:
                self.state = 455
                self.angle_db_statement()
                self.state = 460
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 461
            self.match(XplorMRParser.End)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pre_restraintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Paramagnetic(self):
            return self.getToken(XplorMRParser.Paramagnetic, 0)

        def End(self):
            return self.getToken(XplorMRParser.End, 0)

        def pre_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Pre_statementContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Pre_statementContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_pre_restraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPre_restraint" ):
                listener.enterPre_restraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPre_restraint" ):
                listener.exitPre_restraint(self)




    def pre_restraint(self):

        localctx = XplorMRParser.Pre_restraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_pre_restraint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 463
            self.match(XplorMRParser.Paramagnetic)
            self.state = 467
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << XplorMRParser.Assign) | (1 << XplorMRParser.Classification) | (1 << XplorMRParser.Nrestraints) | (1 << XplorMRParser.Potential) | (1 << XplorMRParser.Print) | (1 << XplorMRParser.Reset) | (1 << XplorMRParser.ForceConstant))) != 0) or ((((_la - 99)) & ~0x3f) == 0 and ((1 << (_la - 99)) & ((1 << (XplorMRParser.Kconst - 99)) | (1 << (XplorMRParser.Omega - 99)) | (1 << (XplorMRParser.Tauc - 99)) | (1 << (XplorMRParser.Debug - 99)))) != 0):
                self.state = 464
                self.pre_statement()
                self.state = 469
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 470
            self.match(XplorMRParser.End)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pcs_restraintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Xpcs(self):
            return self.getToken(XplorMRParser.Xpcs, 0)

        def End(self):
            return self.getToken(XplorMRParser.End, 0)

        def pcs_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Pcs_statementContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Pcs_statementContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_pcs_restraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPcs_restraint" ):
                listener.enterPcs_restraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPcs_restraint" ):
                listener.exitPcs_restraint(self)




    def pcs_restraint(self):

        localctx = XplorMRParser.Pcs_restraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_pcs_restraint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 472
            self.match(XplorMRParser.Xpcs)
            self.state = 476
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << XplorMRParser.Assign) | (1 << XplorMRParser.Classification) | (1 << XplorMRParser.Nrestraints) | (1 << XplorMRParser.Print) | (1 << XplorMRParser.Reset) | (1 << XplorMRParser.Coefficients) | (1 << XplorMRParser.ForceConstant))) != 0) or ((((_la - 104)) & ~0x3f) == 0 and ((1 << (_la - 104)) & ((1 << (XplorMRParser.Tolerance - 104)) | (1 << (XplorMRParser.Save - 104)) | (1 << (XplorMRParser.Fmed - 104)) | (1 << (XplorMRParser.ErrOn - 104)) | (1 << (XplorMRParser.ErrOff - 104)) | (1 << (XplorMRParser.Fon - 104)) | (1 << (XplorMRParser.Foff - 104)) | (1 << (XplorMRParser.Son - 104)) | (1 << (XplorMRParser.Soff - 104)) | (1 << (XplorMRParser.Frun - 104)))) != 0):
                self.state = 473
                self.pcs_statement()
                self.state = 478
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 479
            self.match(XplorMRParser.End)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Prdc_restraintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Xrdcoupling(self):
            return self.getToken(XplorMRParser.Xrdcoupling, 0)

        def End(self):
            return self.getToken(XplorMRParser.End, 0)

        def prdc_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Prdc_statementContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Prdc_statementContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_prdc_restraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrdc_restraint" ):
                listener.enterPrdc_restraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrdc_restraint" ):
                listener.exitPrdc_restraint(self)




    def prdc_restraint(self):

        localctx = XplorMRParser.Prdc_restraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_prdc_restraint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 481
            self.match(XplorMRParser.Xrdcoupling)
            self.state = 485
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << XplorMRParser.Assign) | (1 << XplorMRParser.Classification) | (1 << XplorMRParser.Nrestraints) | (1 << XplorMRParser.Print) | (1 << XplorMRParser.Reset) | (1 << XplorMRParser.Coefficients) | (1 << XplorMRParser.ForceConstant))) != 0) or ((((_la - 104)) & ~0x3f) == 0 and ((1 << (_la - 104)) & ((1 << (XplorMRParser.Tolerance - 104)) | (1 << (XplorMRParser.Save - 104)) | (1 << (XplorMRParser.Fmed - 104)) | (1 << (XplorMRParser.ErrOn - 104)) | (1 << (XplorMRParser.ErrOff - 104)) | (1 << (XplorMRParser.Fon - 104)) | (1 << (XplorMRParser.Foff - 104)) | (1 << (XplorMRParser.Son - 104)) | (1 << (XplorMRParser.Soff - 104)) | (1 << (XplorMRParser.Frun - 104)))) != 0):
                self.state = 482
                self.prdc_statement()
                self.state = 487
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 488
            self.match(XplorMRParser.End)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Porientation_restraintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Xangle(self):
            return self.getToken(XplorMRParser.Xangle, 0)

        def End(self):
            return self.getToken(XplorMRParser.End, 0)

        def porientation_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Porientation_statementContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Porientation_statementContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_porientation_restraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPorientation_restraint" ):
                listener.enterPorientation_restraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPorientation_restraint" ):
                listener.exitPorientation_restraint(self)




    def porientation_restraint(self):

        localctx = XplorMRParser.Porientation_restraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_porientation_restraint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 490
            self.match(XplorMRParser.Xangle)
            self.state = 494
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << XplorMRParser.Assign) | (1 << XplorMRParser.Classification) | (1 << XplorMRParser.Nrestraints) | (1 << XplorMRParser.Print) | (1 << XplorMRParser.Reset) | (1 << XplorMRParser.ForceConstant))) != 0):
                self.state = 491
                self.porientation_statement()
                self.state = 496
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 497
            self.match(XplorMRParser.End)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pccr_restraintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Xccr(self):
            return self.getToken(XplorMRParser.Xccr, 0)

        def End(self):
            return self.getToken(XplorMRParser.End, 0)

        def pccr_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Pccr_statementContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Pccr_statementContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_pccr_restraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPccr_restraint" ):
                listener.enterPccr_restraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPccr_restraint" ):
                listener.exitPccr_restraint(self)




    def pccr_restraint(self):

        localctx = XplorMRParser.Pccr_restraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_pccr_restraint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 499
            self.match(XplorMRParser.Xccr)
            self.state = 503
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << XplorMRParser.Assign) | (1 << XplorMRParser.Classification) | (1 << XplorMRParser.Nrestraints) | (1 << XplorMRParser.Print) | (1 << XplorMRParser.Reset) | (1 << XplorMRParser.Coefficients) | (1 << XplorMRParser.ForceConstant))) != 0) or _la==XplorMRParser.Frun or _la==XplorMRParser.Weip:
                self.state = 500
                self.pccr_statement()
                self.state = 505
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 506
            self.match(XplorMRParser.End)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Hbond_restraintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Hbda(self):
            return self.getToken(XplorMRParser.Hbda, 0)

        def End(self):
            return self.getToken(XplorMRParser.End, 0)

        def hbond_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Hbond_statementContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Hbond_statementContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_hbond_restraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHbond_restraint" ):
                listener.enterHbond_restraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHbond_restraint" ):
                listener.exitHbond_restraint(self)




    def hbond_restraint(self):

        localctx = XplorMRParser.Hbond_restraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_hbond_restraint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 508
            self.match(XplorMRParser.Hbda)
            self.state = 512
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << XplorMRParser.Assign) | (1 << XplorMRParser.Classification) | (1 << XplorMRParser.Nrestraints) | (1 << XplorMRParser.Print) | (1 << XplorMRParser.Reset) | (1 << XplorMRParser.ForceConstant))) != 0):
                self.state = 509
                self.hbond_statement()
                self.state = 514
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 515
            self.match(XplorMRParser.End)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Hbond_db_restraintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Hbdb(self):
            return self.getToken(XplorMRParser.Hbdb, 0)

        def End(self):
            return self.getToken(XplorMRParser.End, 0)

        def hbond_db_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Hbond_db_statementContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Hbond_db_statementContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_hbond_db_restraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHbond_db_restraint" ):
                listener.enterHbond_db_restraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHbond_db_restraint" ):
                listener.exitHbond_db_restraint(self)




    def hbond_db_restraint(self):

        localctx = XplorMRParser.Hbond_db_restraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_hbond_db_restraint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 517
            self.match(XplorMRParser.Hbdb)
            self.state = 521
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==XplorMRParser.Assign or ((((_la - 118)) & ~0x3f) == 0 and ((1 << (_la - 118)) & ((1 << (XplorMRParser.Kdir - 118)) | (1 << (XplorMRParser.Klin - 118)) | (1 << (XplorMRParser.Nseg - 118)) | (1 << (XplorMRParser.Nmin - 118)) | (1 << (XplorMRParser.Nmax - 118)) | (1 << (XplorMRParser.Segm - 118)) | (1 << (XplorMRParser.Ohcut - 118)) | (1 << (XplorMRParser.Coh1cut - 118)) | (1 << (XplorMRParser.Coh2cut - 118)) | (1 << (XplorMRParser.Ohncut - 118)) | (1 << (XplorMRParser.Updfrq - 118)) | (1 << (XplorMRParser.Prnfrq - 118)) | (1 << (XplorMRParser.Freemode - 118)))) != 0):
                self.state = 518
                self.hbond_db_statement()
                self.state = 523
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 524
            self.match(XplorMRParser.End)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Noe_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def noe_assign(self):
            return self.getTypedRuleContext(XplorMRParser.Noe_assignContext,0)


        def Asymptote(self):
            return self.getToken(XplorMRParser.Asymptote, 0)

        def Simple_name(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Simple_name)
            else:
                return self.getToken(XplorMRParser.Simple_name, i)

        def number_s(self):
            return self.getTypedRuleContext(XplorMRParser.Number_sContext,0)


        def Averaging(self):
            return self.getToken(XplorMRParser.Averaging, 0)

        def Simple_name_A(self):
            return self.getToken(XplorMRParser.Simple_name_A, 0)

        def Averaging_methods(self):
            return self.getToken(XplorMRParser.Averaging_methods, 0)

        def Bhig(self):
            return self.getToken(XplorMRParser.Bhig, 0)

        def Ceiling(self):
            return self.getToken(XplorMRParser.Ceiling, 0)

        def Equ_op(self):
            return self.getToken(XplorMRParser.Equ_op, 0)

        def Classification(self):
            return self.getToken(XplorMRParser.Classification, 0)

        def CountViol(self):
            return self.getToken(XplorMRParser.CountViol, 0)

        def Distribute(self):
            return self.getToken(XplorMRParser.Distribute, 0)

        def Monomers(self):
            return self.getToken(XplorMRParser.Monomers, 0)

        def Integer(self):
            return self.getToken(XplorMRParser.Integer, 0)

        def Ncount(self):
            return self.getToken(XplorMRParser.Ncount, 0)

        def Nrestraints(self):
            return self.getToken(XplorMRParser.Nrestraints, 0)

        def Potential(self):
            return self.getToken(XplorMRParser.Potential, 0)

        def Simple_name_P(self):
            return self.getToken(XplorMRParser.Simple_name_P, 0)

        def Potential_types(self):
            return self.getToken(XplorMRParser.Potential_types, 0)

        def Predict(self):
            return self.getToken(XplorMRParser.Predict, 0)

        def predict_statement(self):
            return self.getTypedRuleContext(XplorMRParser.Predict_statementContext,0)


        def End(self):
            return self.getToken(XplorMRParser.End, 0)

        def Print(self):
            return self.getToken(XplorMRParser.Print, 0)

        def Threshold(self):
            return self.getToken(XplorMRParser.Threshold, 0)

        def Reset(self):
            return self.getToken(XplorMRParser.Reset, 0)

        def Rswitch(self):
            return self.getToken(XplorMRParser.Rswitch, 0)

        def Scale(self):
            return self.getToken(XplorMRParser.Scale, 0)

        def SoExponent(self):
            return self.getToken(XplorMRParser.SoExponent, 0)

        def SqConstant(self):
            return self.getToken(XplorMRParser.SqConstant, 0)

        def SqExponent(self):
            return self.getToken(XplorMRParser.SqExponent, 0)

        def SqOffset(self):
            return self.getToken(XplorMRParser.SqOffset, 0)

        def Temperature(self):
            return self.getToken(XplorMRParser.Temperature, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_noe_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNoe_statement" ):
                listener.enterNoe_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNoe_statement" ):
                listener.exitNoe_statement(self)




    def noe_statement(self):

        localctx = XplorMRParser.Noe_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_noe_statement)
        self._la = 0 # Token type
        try:
            self.state = 597
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [XplorMRParser.Assign]:
                self.enterOuterAlt(localctx, 1)
                self.state = 526
                self.noe_assign()
                pass
            elif token in [XplorMRParser.Asymptote]:
                self.enterOuterAlt(localctx, 2)
                self.state = 527
                self.match(XplorMRParser.Asymptote)
                self.state = 528
                self.match(XplorMRParser.Simple_name)
                self.state = 529
                self.number_s()
                pass
            elif token in [XplorMRParser.Averaging]:
                self.enterOuterAlt(localctx, 3)
                self.state = 530
                self.match(XplorMRParser.Averaging)
                self.state = 531
                self.match(XplorMRParser.Simple_name_A)
                self.state = 532
                self.match(XplorMRParser.Averaging_methods)
                pass
            elif token in [XplorMRParser.Bhig]:
                self.enterOuterAlt(localctx, 4)
                self.state = 533
                self.match(XplorMRParser.Bhig)
                self.state = 534
                self.match(XplorMRParser.Simple_name)
                self.state = 535
                self.number_s()
                pass
            elif token in [XplorMRParser.Ceiling]:
                self.enterOuterAlt(localctx, 5)
                self.state = 536
                self.match(XplorMRParser.Ceiling)
                self.state = 538
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 537
                    self.match(XplorMRParser.Equ_op)


                self.state = 540
                self.number_s()
                pass
            elif token in [XplorMRParser.Classification]:
                self.enterOuterAlt(localctx, 6)
                self.state = 541
                self.match(XplorMRParser.Classification)
                self.state = 542
                self.match(XplorMRParser.Simple_name)
                pass
            elif token in [XplorMRParser.CountViol]:
                self.enterOuterAlt(localctx, 7)
                self.state = 543
                self.match(XplorMRParser.CountViol)
                self.state = 544
                self.match(XplorMRParser.Simple_name)
                pass
            elif token in [XplorMRParser.Distribute]:
                self.enterOuterAlt(localctx, 8)
                self.state = 545
                self.match(XplorMRParser.Distribute)
                self.state = 546
                self.match(XplorMRParser.Simple_name)
                self.state = 547
                self.match(XplorMRParser.Simple_name)
                self.state = 548
                self.number_s()
                pass
            elif token in [XplorMRParser.Monomers]:
                self.enterOuterAlt(localctx, 9)
                self.state = 549
                self.match(XplorMRParser.Monomers)
                self.state = 550
                self.match(XplorMRParser.Simple_name)
                self.state = 551
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.Ncount]:
                self.enterOuterAlt(localctx, 10)
                self.state = 552
                self.match(XplorMRParser.Ncount)
                self.state = 553
                self.match(XplorMRParser.Simple_name)
                self.state = 554
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.Nrestraints]:
                self.enterOuterAlt(localctx, 11)
                self.state = 555
                self.match(XplorMRParser.Nrestraints)
                self.state = 557
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 556
                    self.match(XplorMRParser.Equ_op)


                self.state = 559
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.Potential]:
                self.enterOuterAlt(localctx, 12)
                self.state = 560
                self.match(XplorMRParser.Potential)
                self.state = 561
                self.match(XplorMRParser.Simple_name_P)
                self.state = 562
                self.match(XplorMRParser.Potential_types)
                pass
            elif token in [XplorMRParser.Predict]:
                self.enterOuterAlt(localctx, 13)
                self.state = 563
                self.match(XplorMRParser.Predict)
                self.state = 564
                self.predict_statement()
                self.state = 565
                self.match(XplorMRParser.End)
                pass
            elif token in [XplorMRParser.Print]:
                self.enterOuterAlt(localctx, 14)
                self.state = 567
                self.match(XplorMRParser.Print)
                self.state = 568
                self.match(XplorMRParser.Threshold)
                self.state = 570
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 569
                    self.match(XplorMRParser.Equ_op)


                self.state = 572
                self.number_s()
                pass
            elif token in [XplorMRParser.Reset]:
                self.enterOuterAlt(localctx, 15)
                self.state = 573
                self.match(XplorMRParser.Reset)
                pass
            elif token in [XplorMRParser.Rswitch]:
                self.enterOuterAlt(localctx, 16)
                self.state = 574
                self.match(XplorMRParser.Rswitch)
                self.state = 575
                self.match(XplorMRParser.Simple_name)
                self.state = 576
                self.number_s()
                pass
            elif token in [XplorMRParser.Scale]:
                self.enterOuterAlt(localctx, 17)
                self.state = 577
                self.match(XplorMRParser.Scale)
                self.state = 578
                self.match(XplorMRParser.Simple_name)
                self.state = 579
                self.number_s()
                pass
            elif token in [XplorMRParser.SoExponent]:
                self.enterOuterAlt(localctx, 18)
                self.state = 580
                self.match(XplorMRParser.SoExponent)
                self.state = 581
                self.match(XplorMRParser.Simple_name)
                self.state = 582
                self.number_s()
                pass
            elif token in [XplorMRParser.SqConstant]:
                self.enterOuterAlt(localctx, 19)
                self.state = 583
                self.match(XplorMRParser.SqConstant)
                self.state = 584
                self.match(XplorMRParser.Simple_name)
                self.state = 585
                self.number_s()
                pass
            elif token in [XplorMRParser.SqExponent]:
                self.enterOuterAlt(localctx, 20)
                self.state = 586
                self.match(XplorMRParser.SqExponent)
                self.state = 587
                self.match(XplorMRParser.Simple_name)
                self.state = 588
                self.number_s()
                pass
            elif token in [XplorMRParser.SqOffset]:
                self.enterOuterAlt(localctx, 21)
                self.state = 589
                self.match(XplorMRParser.SqOffset)
                self.state = 590
                self.match(XplorMRParser.Simple_name)
                self.state = 591
                self.number_s()
                pass
            elif token in [XplorMRParser.Temperature]:
                self.enterOuterAlt(localctx, 22)
                self.state = 592
                self.match(XplorMRParser.Temperature)
                self.state = 594
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 593
                    self.match(XplorMRParser.Equ_op)


                self.state = 596
                self.number_s()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Noe_assignContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Assign(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Assign)
            else:
                return self.getToken(XplorMRParser.Assign, i)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.SelectionContext,i)


        def number(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.NumberContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.NumberContext,i)


        def noe_annotation(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Noe_annotationContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Noe_annotationContext,i)


        def Or_op(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Or_op)
            else:
                return self.getToken(XplorMRParser.Or_op, i)

        def getRuleIndex(self):
            return XplorMRParser.RULE_noe_assign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNoe_assign" ):
                listener.enterNoe_assign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNoe_assign" ):
                listener.exitNoe_assign(self)




    def noe_assign(self):

        localctx = XplorMRParser.Noe_assignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_noe_assign)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 599
            self.match(XplorMRParser.Assign)
            self.state = 600
            self.selection()
            self.state = 601
            self.selection()
            self.state = 602
            self.number()
            self.state = 604
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,39,self._ctx)
            if la_ == 1:
                self.state = 603
                self.number()


            self.state = 607
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 178)) & ~0x3f) == 0 and ((1 << (_la - 178)) & ((1 << (XplorMRParser.Integer - 178)) | (1 << (XplorMRParser.Real - 178)) | (1 << (XplorMRParser.Symbol_name - 178)))) != 0):
                self.state = 606
                self.number()


            self.state = 612
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << XplorMRParser.Peak) | (1 << XplorMRParser.Spectrum) | (1 << XplorMRParser.Volume) | (1 << XplorMRParser.Ppm1) | (1 << XplorMRParser.Ppm2) | (1 << XplorMRParser.Cv) | (1 << XplorMRParser.Weight))) != 0):
                self.state = 609
                self.noe_annotation()
                self.state = 614
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 632
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==XplorMRParser.Or_op:
                self.state = 615
                self.match(XplorMRParser.Or_op)
                self.state = 617
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Assign:
                    self.state = 616
                    self.match(XplorMRParser.Assign)


                self.state = 619
                self.selection()
                self.state = 620
                self.selection()
                self.state = 622
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,43,self._ctx)
                if la_ == 1:
                    self.state = 621
                    self.number()


                self.state = 625
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,44,self._ctx)
                if la_ == 1:
                    self.state = 624
                    self.number()


                self.state = 628
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 178)) & ~0x3f) == 0 and ((1 << (_la - 178)) & ((1 << (XplorMRParser.Integer - 178)) | (1 << (XplorMRParser.Real - 178)) | (1 << (XplorMRParser.Symbol_name - 178)))) != 0):
                    self.state = 627
                    self.number()


                self.state = 634
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Predict_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Cutoff(self):
            return self.getToken(XplorMRParser.Cutoff, 0)

        def number_s(self):
            return self.getTypedRuleContext(XplorMRParser.Number_sContext,0)


        def Equ_op(self):
            return self.getToken(XplorMRParser.Equ_op, 0)

        def Cuton(self):
            return self.getToken(XplorMRParser.Cuton, 0)

        def From(self):
            return self.getToken(XplorMRParser.From, 0)

        def selection(self):
            return self.getTypedRuleContext(XplorMRParser.SelectionContext,0)


        def To(self):
            return self.getToken(XplorMRParser.To, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_predict_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPredict_statement" ):
                listener.enterPredict_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPredict_statement" ):
                listener.exitPredict_statement(self)




    def predict_statement(self):

        localctx = XplorMRParser.Predict_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_predict_statement)
        self._la = 0 # Token type
        try:
            self.state = 649
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [XplorMRParser.Cutoff]:
                self.enterOuterAlt(localctx, 1)
                self.state = 635
                self.match(XplorMRParser.Cutoff)
                self.state = 637
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 636
                    self.match(XplorMRParser.Equ_op)


                self.state = 639
                self.number_s()
                pass
            elif token in [XplorMRParser.Cuton]:
                self.enterOuterAlt(localctx, 2)
                self.state = 640
                self.match(XplorMRParser.Cuton)
                self.state = 642
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 641
                    self.match(XplorMRParser.Equ_op)


                self.state = 644
                self.number_s()
                pass
            elif token in [XplorMRParser.From]:
                self.enterOuterAlt(localctx, 3)
                self.state = 645
                self.match(XplorMRParser.From)
                self.state = 646
                self.selection()
                pass
            elif token in [XplorMRParser.To]:
                self.enterOuterAlt(localctx, 4)
                self.state = 647
                self.match(XplorMRParser.To)
                self.state = 648
                self.selection()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Noe_annotationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Peak(self):
            return self.getToken(XplorMRParser.Peak, 0)

        def number_a(self):
            return self.getTypedRuleContext(XplorMRParser.Number_aContext,0)


        def Equ_op(self):
            return self.getToken(XplorMRParser.Equ_op, 0)

        def Spectrum(self):
            return self.getToken(XplorMRParser.Spectrum, 0)

        def Weight(self):
            return self.getToken(XplorMRParser.Weight, 0)

        def Volume(self):
            return self.getToken(XplorMRParser.Volume, 0)

        def Ppm1(self):
            return self.getToken(XplorMRParser.Ppm1, 0)

        def Ppm2(self):
            return self.getToken(XplorMRParser.Ppm2, 0)

        def Cv(self):
            return self.getToken(XplorMRParser.Cv, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_noe_annotation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNoe_annotation" ):
                listener.enterNoe_annotation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNoe_annotation" ):
                listener.exitNoe_annotation(self)




    def noe_annotation(self):

        localctx = XplorMRParser.Noe_annotationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_noe_annotation)
        self._la = 0 # Token type
        try:
            self.state = 686
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [XplorMRParser.Peak]:
                self.enterOuterAlt(localctx, 1)
                self.state = 651
                self.match(XplorMRParser.Peak)
                self.state = 653
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 652
                    self.match(XplorMRParser.Equ_op)


                self.state = 655
                self.number_a()
                pass
            elif token in [XplorMRParser.Spectrum]:
                self.enterOuterAlt(localctx, 2)
                self.state = 656
                self.match(XplorMRParser.Spectrum)
                self.state = 658
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 657
                    self.match(XplorMRParser.Equ_op)


                self.state = 660
                self.number_a()
                pass
            elif token in [XplorMRParser.Weight]:
                self.enterOuterAlt(localctx, 3)
                self.state = 661
                self.match(XplorMRParser.Weight)
                self.state = 663
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 662
                    self.match(XplorMRParser.Equ_op)


                self.state = 665
                self.number_a()
                pass
            elif token in [XplorMRParser.Volume]:
                self.enterOuterAlt(localctx, 4)
                self.state = 666
                self.match(XplorMRParser.Volume)
                self.state = 668
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 667
                    self.match(XplorMRParser.Equ_op)


                self.state = 670
                self.number_a()
                pass
            elif token in [XplorMRParser.Ppm1]:
                self.enterOuterAlt(localctx, 5)
                self.state = 671
                self.match(XplorMRParser.Ppm1)
                self.state = 673
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 672
                    self.match(XplorMRParser.Equ_op)


                self.state = 675
                self.number_a()
                pass
            elif token in [XplorMRParser.Ppm2]:
                self.enterOuterAlt(localctx, 6)
                self.state = 676
                self.match(XplorMRParser.Ppm2)
                self.state = 678
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 677
                    self.match(XplorMRParser.Equ_op)


                self.state = 680
                self.number_a()
                pass
            elif token in [XplorMRParser.Cv]:
                self.enterOuterAlt(localctx, 7)
                self.state = 681
                self.match(XplorMRParser.Cv)
                self.state = 683
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 682
                    self.match(XplorMRParser.Equ_op)


                self.state = 685
                self.number_a()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Dihedral_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def dihedral_assign(self):
            return self.getTypedRuleContext(XplorMRParser.Dihedral_assignContext,0)


        def dihedral_assign_loop(self):
            return self.getTypedRuleContext(XplorMRParser.Dihedral_assign_loopContext,0)


        def Nassign(self):
            return self.getToken(XplorMRParser.Nassign, 0)

        def Integer(self):
            return self.getToken(XplorMRParser.Integer, 0)

        def Equ_op(self):
            return self.getToken(XplorMRParser.Equ_op, 0)

        def Reset(self):
            return self.getToken(XplorMRParser.Reset, 0)

        def Scale(self):
            return self.getToken(XplorMRParser.Scale, 0)

        def number_s(self):
            return self.getTypedRuleContext(XplorMRParser.Number_sContext,0)


        def getRuleIndex(self):
            return XplorMRParser.RULE_dihedral_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDihedral_statement" ):
                listener.enterDihedral_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDihedral_statement" ):
                listener.exitDihedral_statement(self)




    def dihedral_statement(self):

        localctx = XplorMRParser.Dihedral_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_dihedral_statement)
        self._la = 0 # Token type
        try:
            self.state = 701
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [XplorMRParser.Assign]:
                self.enterOuterAlt(localctx, 1)
                self.state = 688
                self.dihedral_assign()
                pass
            elif token in [XplorMRParser.For]:
                self.enterOuterAlt(localctx, 2)
                self.state = 689
                self.dihedral_assign_loop()
                pass
            elif token in [XplorMRParser.Nassign]:
                self.enterOuterAlt(localctx, 3)
                self.state = 690
                self.match(XplorMRParser.Nassign)
                self.state = 692
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 691
                    self.match(XplorMRParser.Equ_op)


                self.state = 694
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.Reset]:
                self.enterOuterAlt(localctx, 4)
                self.state = 695
                self.match(XplorMRParser.Reset)
                pass
            elif token in [XplorMRParser.Scale]:
                self.enterOuterAlt(localctx, 5)
                self.state = 696
                self.match(XplorMRParser.Scale)
                self.state = 698
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 697
                    self.match(XplorMRParser.Equ_op)


                self.state = 700
                self.number_s()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Dihedral_assignContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Assign(self):
            return self.getToken(XplorMRParser.Assign, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.SelectionContext,i)


        def number(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.NumberContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.NumberContext,i)


        def Integer(self):
            return self.getToken(XplorMRParser.Integer, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_dihedral_assign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDihedral_assign" ):
                listener.enterDihedral_assign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDihedral_assign" ):
                listener.exitDihedral_assign(self)




    def dihedral_assign(self):

        localctx = XplorMRParser.Dihedral_assignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_dihedral_assign)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 703
            self.match(XplorMRParser.Assign)
            self.state = 704
            self.selection()
            self.state = 705
            self.selection()
            self.state = 706
            self.selection()
            self.state = 707
            self.selection()
            self.state = 708
            self.number()
            self.state = 709
            self.number()
            self.state = 710
            self.number()
            self.state = 711
            self.match(XplorMRParser.Integer)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Sani_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def sani_assign(self):
            return self.getTypedRuleContext(XplorMRParser.Sani_assignContext,0)


        def Classification(self):
            return self.getToken(XplorMRParser.Classification, 0)

        def Simple_name(self):
            return self.getToken(XplorMRParser.Simple_name, 0)

        def Coefficients(self):
            return self.getToken(XplorMRParser.Coefficients, 0)

        def number_s(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Number_sContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Number_sContext,i)


        def ForceConstant(self):
            return self.getToken(XplorMRParser.ForceConstant, 0)

        def Nrestraints(self):
            return self.getToken(XplorMRParser.Nrestraints, 0)

        def Integer(self):
            return self.getToken(XplorMRParser.Integer, 0)

        def Potential(self):
            return self.getToken(XplorMRParser.Potential, 0)

        def Potential_types(self):
            return self.getToken(XplorMRParser.Potential_types, 0)

        def Print(self):
            return self.getToken(XplorMRParser.Print, 0)

        def Threshold(self):
            return self.getToken(XplorMRParser.Threshold, 0)

        def Reset(self):
            return self.getToken(XplorMRParser.Reset, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_sani_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSani_statement" ):
                listener.enterSani_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSani_statement" ):
                listener.exitSani_statement(self)




    def sani_statement(self):

        localctx = XplorMRParser.Sani_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_sani_statement)
        try:
            self.state = 731
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [XplorMRParser.Assign]:
                self.enterOuterAlt(localctx, 1)
                self.state = 713
                self.sani_assign()
                pass
            elif token in [XplorMRParser.Classification]:
                self.enterOuterAlt(localctx, 2)
                self.state = 714
                self.match(XplorMRParser.Classification)
                self.state = 715
                self.match(XplorMRParser.Simple_name)
                pass
            elif token in [XplorMRParser.Coefficients]:
                self.enterOuterAlt(localctx, 3)
                self.state = 716
                self.match(XplorMRParser.Coefficients)
                self.state = 717
                self.number_s()
                self.state = 718
                self.number_s()
                self.state = 719
                self.number_s()
                pass
            elif token in [XplorMRParser.ForceConstant]:
                self.enterOuterAlt(localctx, 4)
                self.state = 721
                self.match(XplorMRParser.ForceConstant)
                self.state = 722
                self.number_s()
                pass
            elif token in [XplorMRParser.Nrestraints]:
                self.enterOuterAlt(localctx, 5)
                self.state = 723
                self.match(XplorMRParser.Nrestraints)
                self.state = 724
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.Potential]:
                self.enterOuterAlt(localctx, 6)
                self.state = 725
                self.match(XplorMRParser.Potential)
                self.state = 726
                self.match(XplorMRParser.Potential_types)
                pass
            elif token in [XplorMRParser.Print]:
                self.enterOuterAlt(localctx, 7)
                self.state = 727
                self.match(XplorMRParser.Print)
                self.state = 728
                self.match(XplorMRParser.Threshold)
                self.state = 729
                self.number_s()
                pass
            elif token in [XplorMRParser.Reset]:
                self.enterOuterAlt(localctx, 8)
                self.state = 730
                self.match(XplorMRParser.Reset)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Sani_assignContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Assign(self):
            return self.getToken(XplorMRParser.Assign, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.SelectionContext,i)


        def number(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.NumberContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.NumberContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_sani_assign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSani_assign" ):
                listener.enterSani_assign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSani_assign" ):
                listener.exitSani_assign(self)




    def sani_assign(self):

        localctx = XplorMRParser.Sani_assignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_sani_assign)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 733
            self.match(XplorMRParser.Assign)
            self.state = 734
            self.selection()
            self.state = 735
            self.selection()
            self.state = 736
            self.selection()
            self.state = 737
            self.selection()
            self.state = 738
            self.selection()
            self.state = 739
            self.selection()
            self.state = 740
            self.number()
            self.state = 742
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,62,self._ctx)
            if la_ == 1:
                self.state = 741
                self.number()


            self.state = 745
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 178)) & ~0x3f) == 0 and ((1 << (_la - 178)) & ((1 << (XplorMRParser.Integer - 178)) | (1 << (XplorMRParser.Real - 178)) | (1 << (XplorMRParser.Symbol_name - 178)))) != 0):
                self.state = 744
                self.number()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Xdip_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def xdip_assign(self):
            return self.getTypedRuleContext(XplorMRParser.Xdip_assignContext,0)


        def Classification(self):
            return self.getToken(XplorMRParser.Classification, 0)

        def Simple_name(self):
            return self.getToken(XplorMRParser.Simple_name, 0)

        def Type(self):
            return self.getToken(XplorMRParser.Type, 0)

        def Rdc_dist_fix_types(self):
            return self.getToken(XplorMRParser.Rdc_dist_fix_types, 0)

        def Scale(self):
            return self.getToken(XplorMRParser.Scale, 0)

        def number_s(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Number_sContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Number_sContext,i)


        def Sign(self):
            return self.getToken(XplorMRParser.Sign, 0)

        def Logical(self):
            return self.getToken(XplorMRParser.Logical, 0)

        def Average(self):
            return self.getToken(XplorMRParser.Average, 0)

        def Averaging_methods(self):
            return self.getToken(XplorMRParser.Averaging_methods, 0)

        def Coefficients(self):
            return self.getToken(XplorMRParser.Coefficients, 0)

        def ForceConstant(self):
            return self.getToken(XplorMRParser.ForceConstant, 0)

        def Nrestraints(self):
            return self.getToken(XplorMRParser.Nrestraints, 0)

        def Integer(self):
            return self.getToken(XplorMRParser.Integer, 0)

        def Potential(self):
            return self.getToken(XplorMRParser.Potential, 0)

        def Potential_types(self):
            return self.getToken(XplorMRParser.Potential_types, 0)

        def Print(self):
            return self.getToken(XplorMRParser.Print, 0)

        def Threshold(self):
            return self.getToken(XplorMRParser.Threshold, 0)

        def Reset(self):
            return self.getToken(XplorMRParser.Reset, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_xdip_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterXdip_statement" ):
                listener.enterXdip_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitXdip_statement" ):
                listener.exitXdip_statement(self)




    def xdip_statement(self):

        localctx = XplorMRParser.Xdip_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_xdip_statement)
        try:
            self.state = 773
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [XplorMRParser.Assign]:
                self.enterOuterAlt(localctx, 1)
                self.state = 747
                self.xdip_assign()
                pass
            elif token in [XplorMRParser.Classification]:
                self.enterOuterAlt(localctx, 2)
                self.state = 748
                self.match(XplorMRParser.Classification)
                self.state = 749
                self.match(XplorMRParser.Simple_name)
                pass
            elif token in [XplorMRParser.Type]:
                self.enterOuterAlt(localctx, 3)
                self.state = 750
                self.match(XplorMRParser.Type)
                self.state = 751
                self.match(XplorMRParser.Rdc_dist_fix_types)
                pass
            elif token in [XplorMRParser.Scale]:
                self.enterOuterAlt(localctx, 4)
                self.state = 752
                self.match(XplorMRParser.Scale)
                self.state = 753
                self.number_s()
                pass
            elif token in [XplorMRParser.Sign]:
                self.enterOuterAlt(localctx, 5)
                self.state = 754
                self.match(XplorMRParser.Sign)
                self.state = 755
                self.match(XplorMRParser.Logical)
                pass
            elif token in [XplorMRParser.Average]:
                self.enterOuterAlt(localctx, 6)
                self.state = 756
                self.match(XplorMRParser.Average)
                self.state = 757
                self.match(XplorMRParser.Averaging_methods)
                pass
            elif token in [XplorMRParser.Coefficients]:
                self.enterOuterAlt(localctx, 7)
                self.state = 758
                self.match(XplorMRParser.Coefficients)
                self.state = 759
                self.number_s()
                self.state = 760
                self.number_s()
                self.state = 761
                self.number_s()
                pass
            elif token in [XplorMRParser.ForceConstant]:
                self.enterOuterAlt(localctx, 8)
                self.state = 763
                self.match(XplorMRParser.ForceConstant)
                self.state = 764
                self.number_s()
                pass
            elif token in [XplorMRParser.Nrestraints]:
                self.enterOuterAlt(localctx, 9)
                self.state = 765
                self.match(XplorMRParser.Nrestraints)
                self.state = 766
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.Potential]:
                self.enterOuterAlt(localctx, 10)
                self.state = 767
                self.match(XplorMRParser.Potential)
                self.state = 768
                self.match(XplorMRParser.Potential_types)
                pass
            elif token in [XplorMRParser.Print]:
                self.enterOuterAlt(localctx, 11)
                self.state = 769
                self.match(XplorMRParser.Print)
                self.state = 770
                self.match(XplorMRParser.Threshold)
                self.state = 771
                self.number_s()
                pass
            elif token in [XplorMRParser.Reset]:
                self.enterOuterAlt(localctx, 12)
                self.state = 772
                self.match(XplorMRParser.Reset)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Xdip_assignContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Assign(self):
            return self.getToken(XplorMRParser.Assign, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.SelectionContext,i)


        def number(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.NumberContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.NumberContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_xdip_assign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterXdip_assign" ):
                listener.enterXdip_assign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitXdip_assign" ):
                listener.exitXdip_assign(self)




    def xdip_assign(self):

        localctx = XplorMRParser.Xdip_assignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 68, self.RULE_xdip_assign)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 775
            self.match(XplorMRParser.Assign)
            self.state = 776
            self.selection()
            self.state = 777
            self.selection()
            self.state = 778
            self.selection()
            self.state = 779
            self.selection()
            self.state = 780
            self.selection()
            self.state = 781
            self.selection()
            self.state = 782
            self.number()
            self.state = 783
            self.number()
            self.state = 790
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,65,self._ctx)
            if la_ == 1:
                self.state = 784
                self.number()

            elif la_ == 2:
                self.state = 785
                self.number()
                self.state = 786
                self.number()
                self.state = 787
                self.number()
                self.state = 788
                self.number()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Vean_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def vean_assign(self):
            return self.getTypedRuleContext(XplorMRParser.Vean_assignContext,0)


        def Cv(self):
            return self.getToken(XplorMRParser.Cv, 0)

        def Integer(self):
            return self.getToken(XplorMRParser.Integer, 0)

        def Equ_op(self):
            return self.getToken(XplorMRParser.Equ_op, 0)

        def Classification(self):
            return self.getToken(XplorMRParser.Classification, 0)

        def Simple_name(self):
            return self.getToken(XplorMRParser.Simple_name, 0)

        def ForceConstant(self):
            return self.getToken(XplorMRParser.ForceConstant, 0)

        def number_s(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Number_sContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Number_sContext,i)


        def Nrestraints(self):
            return self.getToken(XplorMRParser.Nrestraints, 0)

        def Partition(self):
            return self.getToken(XplorMRParser.Partition, 0)

        def Print(self):
            return self.getToken(XplorMRParser.Print, 0)

        def Threshold(self):
            return self.getToken(XplorMRParser.Threshold, 0)

        def Reset(self):
            return self.getToken(XplorMRParser.Reset, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_vean_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVean_statement" ):
                listener.enterVean_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVean_statement" ):
                listener.exitVean_statement(self)




    def vean_statement(self):

        localctx = XplorMRParser.Vean_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_vean_statement)
        self._la = 0 # Token type
        try:
            self.state = 815
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [XplorMRParser.Assign]:
                self.enterOuterAlt(localctx, 1)
                self.state = 792
                self.vean_assign()
                pass
            elif token in [XplorMRParser.Cv]:
                self.enterOuterAlt(localctx, 2)
                self.state = 793
                self.match(XplorMRParser.Cv)
                self.state = 795
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 794
                    self.match(XplorMRParser.Equ_op)


                self.state = 797
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.Classification]:
                self.enterOuterAlt(localctx, 3)
                self.state = 798
                self.match(XplorMRParser.Classification)
                self.state = 799
                self.match(XplorMRParser.Simple_name)
                pass
            elif token in [XplorMRParser.ForceConstant]:
                self.enterOuterAlt(localctx, 4)
                self.state = 800
                self.match(XplorMRParser.ForceConstant)
                self.state = 801
                self.number_s()
                self.state = 802
                self.number_s()
                pass
            elif token in [XplorMRParser.Nrestraints]:
                self.enterOuterAlt(localctx, 5)
                self.state = 804
                self.match(XplorMRParser.Nrestraints)
                self.state = 805
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.Partition]:
                self.enterOuterAlt(localctx, 6)
                self.state = 806
                self.match(XplorMRParser.Partition)
                self.state = 808
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 807
                    self.match(XplorMRParser.Equ_op)


                self.state = 810
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.Print]:
                self.enterOuterAlt(localctx, 7)
                self.state = 811
                self.match(XplorMRParser.Print)
                self.state = 812
                self.match(XplorMRParser.Threshold)
                self.state = 813
                self.number_s()
                pass
            elif token in [XplorMRParser.Reset]:
                self.enterOuterAlt(localctx, 8)
                self.state = 814
                self.match(XplorMRParser.Reset)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Vean_assignContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Assign(self):
            return self.getToken(XplorMRParser.Assign, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.SelectionContext,i)


        def number(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.NumberContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.NumberContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_vean_assign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVean_assign" ):
                listener.enterVean_assign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVean_assign" ):
                listener.exitVean_assign(self)




    def vean_assign(self):

        localctx = XplorMRParser.Vean_assignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_vean_assign)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 817
            self.match(XplorMRParser.Assign)
            self.state = 818
            self.selection()
            self.state = 819
            self.selection()
            self.state = 820
            self.selection()
            self.state = 821
            self.selection()
            self.state = 822
            self.number()
            self.state = 823
            self.number()
            self.state = 827
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 178)) & ~0x3f) == 0 and ((1 << (_la - 178)) & ((1 << (XplorMRParser.Integer - 178)) | (1 << (XplorMRParser.Real - 178)) | (1 << (XplorMRParser.Symbol_name - 178)))) != 0):
                self.state = 824
                self.number()
                self.state = 825
                self.number()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Tenso_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def tenso_assign(self):
            return self.getTypedRuleContext(XplorMRParser.Tenso_assignContext,0)


        def Classification(self):
            return self.getToken(XplorMRParser.Classification, 0)

        def Simple_name(self):
            return self.getToken(XplorMRParser.Simple_name, 0)

        def Coefficients(self):
            return self.getToken(XplorMRParser.Coefficients, 0)

        def number_s(self):
            return self.getTypedRuleContext(XplorMRParser.Number_sContext,0)


        def Nrestraints(self):
            return self.getToken(XplorMRParser.Nrestraints, 0)

        def Integer(self):
            return self.getToken(XplorMRParser.Integer, 0)

        def Potential(self):
            return self.getToken(XplorMRParser.Potential, 0)

        def Potential_types(self):
            return self.getToken(XplorMRParser.Potential_types, 0)

        def Print(self):
            return self.getToken(XplorMRParser.Print, 0)

        def Threshold(self):
            return self.getToken(XplorMRParser.Threshold, 0)

        def Reset(self):
            return self.getToken(XplorMRParser.Reset, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_tenso_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTenso_statement" ):
                listener.enterTenso_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTenso_statement" ):
                listener.exitTenso_statement(self)




    def tenso_statement(self):

        localctx = XplorMRParser.Tenso_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_tenso_statement)
        try:
            self.state = 842
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [XplorMRParser.Assign]:
                self.enterOuterAlt(localctx, 1)
                self.state = 829
                self.tenso_assign()
                pass
            elif token in [XplorMRParser.Classification]:
                self.enterOuterAlt(localctx, 2)
                self.state = 830
                self.match(XplorMRParser.Classification)
                self.state = 831
                self.match(XplorMRParser.Simple_name)
                pass
            elif token in [XplorMRParser.Coefficients]:
                self.enterOuterAlt(localctx, 3)
                self.state = 832
                self.match(XplorMRParser.Coefficients)
                self.state = 833
                self.number_s()
                pass
            elif token in [XplorMRParser.Nrestraints]:
                self.enterOuterAlt(localctx, 4)
                self.state = 834
                self.match(XplorMRParser.Nrestraints)
                self.state = 835
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.Potential]:
                self.enterOuterAlt(localctx, 5)
                self.state = 836
                self.match(XplorMRParser.Potential)
                self.state = 837
                self.match(XplorMRParser.Potential_types)
                pass
            elif token in [XplorMRParser.Print]:
                self.enterOuterAlt(localctx, 6)
                self.state = 838
                self.match(XplorMRParser.Print)
                self.state = 839
                self.match(XplorMRParser.Threshold)
                self.state = 840
                self.number_s()
                pass
            elif token in [XplorMRParser.Reset]:
                self.enterOuterAlt(localctx, 7)
                self.state = 841
                self.match(XplorMRParser.Reset)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Tenso_assignContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Assign(self):
            return self.getToken(XplorMRParser.Assign, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.SelectionContext,i)


        def number(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.NumberContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.NumberContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_tenso_assign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTenso_assign" ):
                listener.enterTenso_assign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTenso_assign" ):
                listener.exitTenso_assign(self)




    def tenso_assign(self):

        localctx = XplorMRParser.Tenso_assignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 76, self.RULE_tenso_assign)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 844
            self.match(XplorMRParser.Assign)
            self.state = 845
            self.selection()
            self.state = 846
            self.selection()
            self.state = 847
            self.number()
            self.state = 849
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 178)) & ~0x3f) == 0 and ((1 << (_la - 178)) & ((1 << (XplorMRParser.Integer - 178)) | (1 << (XplorMRParser.Real - 178)) | (1 << (XplorMRParser.Symbol_name - 178)))) != 0):
                self.state = 848
                self.number()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Anis_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def anis_assign(self):
            return self.getTypedRuleContext(XplorMRParser.Anis_assignContext,0)


        def Classification(self):
            return self.getToken(XplorMRParser.Classification, 0)

        def Simple_name(self):
            return self.getToken(XplorMRParser.Simple_name, 0)

        def Coefficients(self):
            return self.getToken(XplorMRParser.Coefficients, 0)

        def number_s(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Number_sContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Number_sContext,i)


        def ForceConstant(self):
            return self.getToken(XplorMRParser.ForceConstant, 0)

        def Nrestraints(self):
            return self.getToken(XplorMRParser.Nrestraints, 0)

        def Integer(self):
            return self.getToken(XplorMRParser.Integer, 0)

        def Potential(self):
            return self.getToken(XplorMRParser.Potential, 0)

        def Potential_types(self):
            return self.getToken(XplorMRParser.Potential_types, 0)

        def Print(self):
            return self.getToken(XplorMRParser.Print, 0)

        def Threshold(self):
            return self.getToken(XplorMRParser.Threshold, 0)

        def Reset(self):
            return self.getToken(XplorMRParser.Reset, 0)

        def Type(self):
            return self.getToken(XplorMRParser.Type, 0)

        def Rdc_or_Diff_anis_types(self):
            return self.getToken(XplorMRParser.Rdc_or_Diff_anis_types, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_anis_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAnis_statement" ):
                listener.enterAnis_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAnis_statement" ):
                listener.exitAnis_statement(self)




    def anis_statement(self):

        localctx = XplorMRParser.Anis_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 78, self.RULE_anis_statement)
        try:
            self.state = 872
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [XplorMRParser.Assign]:
                self.enterOuterAlt(localctx, 1)
                self.state = 851
                self.anis_assign()
                pass
            elif token in [XplorMRParser.Classification]:
                self.enterOuterAlt(localctx, 2)
                self.state = 852
                self.match(XplorMRParser.Classification)
                self.state = 853
                self.match(XplorMRParser.Simple_name)
                pass
            elif token in [XplorMRParser.Coefficients]:
                self.enterOuterAlt(localctx, 3)
                self.state = 854
                self.match(XplorMRParser.Coefficients)
                self.state = 855
                self.number_s()
                self.state = 856
                self.number_s()
                self.state = 857
                self.number_s()
                self.state = 858
                self.number_s()
                pass
            elif token in [XplorMRParser.ForceConstant]:
                self.enterOuterAlt(localctx, 4)
                self.state = 860
                self.match(XplorMRParser.ForceConstant)
                self.state = 861
                self.number_s()
                pass
            elif token in [XplorMRParser.Nrestraints]:
                self.enterOuterAlt(localctx, 5)
                self.state = 862
                self.match(XplorMRParser.Nrestraints)
                self.state = 863
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.Potential]:
                self.enterOuterAlt(localctx, 6)
                self.state = 864
                self.match(XplorMRParser.Potential)
                self.state = 865
                self.match(XplorMRParser.Potential_types)
                pass
            elif token in [XplorMRParser.Print]:
                self.enterOuterAlt(localctx, 7)
                self.state = 866
                self.match(XplorMRParser.Print)
                self.state = 867
                self.match(XplorMRParser.Threshold)
                self.state = 868
                self.number_s()
                pass
            elif token in [XplorMRParser.Reset]:
                self.enterOuterAlt(localctx, 8)
                self.state = 869
                self.match(XplorMRParser.Reset)
                pass
            elif token in [XplorMRParser.Type]:
                self.enterOuterAlt(localctx, 9)
                self.state = 870
                self.match(XplorMRParser.Type)
                self.state = 871
                self.match(XplorMRParser.Rdc_or_Diff_anis_types)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Anis_assignContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Assign(self):
            return self.getToken(XplorMRParser.Assign, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.SelectionContext,i)


        def number(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.NumberContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.NumberContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_anis_assign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAnis_assign" ):
                listener.enterAnis_assign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAnis_assign" ):
                listener.exitAnis_assign(self)




    def anis_assign(self):

        localctx = XplorMRParser.Anis_assignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 80, self.RULE_anis_assign)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 874
            self.match(XplorMRParser.Assign)
            self.state = 875
            self.selection()
            self.state = 876
            self.selection()
            self.state = 877
            self.selection()
            self.state = 878
            self.selection()
            self.state = 879
            self.number()
            self.state = 881
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 178)) & ~0x3f) == 0 and ((1 << (_la - 178)) & ((1 << (XplorMRParser.Integer - 178)) | (1 << (XplorMRParser.Real - 178)) | (1 << (XplorMRParser.Symbol_name - 178)))) != 0):
                self.state = 880
                self.number()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Planar_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Group(self):
            return self.getToken(XplorMRParser.Group, 0)

        def End(self):
            return self.getToken(XplorMRParser.End, 0)

        def group_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Group_statementContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Group_statementContext,i)


        def Initialize(self):
            return self.getToken(XplorMRParser.Initialize, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_planar_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPlanar_statement" ):
                listener.enterPlanar_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPlanar_statement" ):
                listener.exitPlanar_statement(self)




    def planar_statement(self):

        localctx = XplorMRParser.Planar_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 82, self.RULE_planar_statement)
        self._la = 0 # Token type
        try:
            self.state = 892
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [XplorMRParser.Group]:
                self.enterOuterAlt(localctx, 1)
                self.state = 883
                self.match(XplorMRParser.Group)
                self.state = 887
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==XplorMRParser.Selection or _la==XplorMRParser.Weight:
                    self.state = 884
                    self.group_statement()
                    self.state = 889
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 890
                self.match(XplorMRParser.End)
                pass
            elif token in [XplorMRParser.Initialize]:
                self.enterOuterAlt(localctx, 2)
                self.state = 891
                self.match(XplorMRParser.Initialize)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Group_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Selection(self):
            return self.getToken(XplorMRParser.Selection, 0)

        def selection(self):
            return self.getTypedRuleContext(XplorMRParser.SelectionContext,0)


        def Equ_op(self):
            return self.getToken(XplorMRParser.Equ_op, 0)

        def Weight(self):
            return self.getToken(XplorMRParser.Weight, 0)

        def number_s(self):
            return self.getTypedRuleContext(XplorMRParser.Number_sContext,0)


        def getRuleIndex(self):
            return XplorMRParser.RULE_group_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGroup_statement" ):
                listener.enterGroup_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGroup_statement" ):
                listener.exitGroup_statement(self)




    def group_statement(self):

        localctx = XplorMRParser.Group_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 84, self.RULE_group_statement)
        self._la = 0 # Token type
        try:
            self.state = 904
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [XplorMRParser.Selection]:
                self.enterOuterAlt(localctx, 1)
                self.state = 894
                self.match(XplorMRParser.Selection)
                self.state = 896
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 895
                    self.match(XplorMRParser.Equ_op)


                self.state = 898
                self.selection()
                pass
            elif token in [XplorMRParser.Weight]:
                self.enterOuterAlt(localctx, 2)
                self.state = 899
                self.match(XplorMRParser.Weight)
                self.state = 901
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 900
                    self.match(XplorMRParser.Equ_op)


                self.state = 903
                self.number_s()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Harmonic_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Exponent(self):
            return self.getToken(XplorMRParser.Exponent, 0)

        def Integer(self):
            return self.getToken(XplorMRParser.Integer, 0)

        def Equ_op(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Equ_op)
            else:
                return self.getToken(XplorMRParser.Equ_op, i)

        def Normal(self):
            return self.getToken(XplorMRParser.Normal, 0)

        def L_paren(self):
            return self.getToken(XplorMRParser.L_paren, 0)

        def R_paren(self):
            return self.getToken(XplorMRParser.R_paren, 0)

        def number_s(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Number_sContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Number_sContext,i)


        def Tail(self):
            return self.getToken(XplorMRParser.Tail, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.SelectionContext,i)


        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Comma)
            else:
                return self.getToken(XplorMRParser.Comma, i)

        def Head(self):
            return self.getToken(XplorMRParser.Head, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_harmonic_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHarmonic_statement" ):
                listener.enterHarmonic_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHarmonic_statement" ):
                listener.exitHarmonic_statement(self)




    def harmonic_statement(self):

        localctx = XplorMRParser.Harmonic_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 86, self.RULE_harmonic_statement)
        self._la = 0 # Token type
        try:
            self.state = 945
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [XplorMRParser.Exponent]:
                self.enterOuterAlt(localctx, 1)
                self.state = 906
                self.match(XplorMRParser.Exponent)
                self.state = 908
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 907
                    self.match(XplorMRParser.Equ_op)


                self.state = 910
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.Normal]:
                self.enterOuterAlt(localctx, 2)
                self.state = 911
                self.match(XplorMRParser.Normal)
                self.state = 913
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 912
                    self.match(XplorMRParser.Equ_op)


                self.state = 915
                self.match(XplorMRParser.L_paren)
                self.state = 941
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [XplorMRParser.Integer, XplorMRParser.Real, XplorMRParser.Symbol_name]:
                    self.state = 916
                    self.number_s()
                    self.state = 918
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==XplorMRParser.Comma:
                        self.state = 917
                        self.match(XplorMRParser.Comma)


                    self.state = 920
                    self.number_s()
                    self.state = 922
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==XplorMRParser.Comma:
                        self.state = 921
                        self.match(XplorMRParser.Comma)


                    self.state = 924
                    self.number_s()
                    pass
                elif token in [XplorMRParser.Tail]:
                    self.state = 926
                    self.match(XplorMRParser.Tail)
                    self.state = 928
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==XplorMRParser.Equ_op:
                        self.state = 927
                        self.match(XplorMRParser.Equ_op)


                    self.state = 930
                    self.selection()
                    self.state = 932
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==XplorMRParser.Comma:
                        self.state = 931
                        self.match(XplorMRParser.Comma)


                    self.state = 939
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==XplorMRParser.Head:
                        self.state = 934
                        self.match(XplorMRParser.Head)
                        self.state = 936
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==XplorMRParser.Equ_op:
                            self.state = 935
                            self.match(XplorMRParser.Equ_op)


                        self.state = 938
                        self.selection()


                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 943
                self.match(XplorMRParser.R_paren)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Harmonic_assignContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Assign(self):
            return self.getToken(XplorMRParser.Assign, 0)

        def selection(self):
            return self.getTypedRuleContext(XplorMRParser.SelectionContext,0)


        def number(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.NumberContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.NumberContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_harmonic_assign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHarmonic_assign" ):
                listener.enterHarmonic_assign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHarmonic_assign" ):
                listener.exitHarmonic_assign(self)




    def harmonic_assign(self):

        localctx = XplorMRParser.Harmonic_assignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 88, self.RULE_harmonic_assign)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 947
            self.match(XplorMRParser.Assign)
            self.state = 948
            self.selection()
            self.state = 949
            self.number()
            self.state = 950
            self.number()
            self.state = 951
            self.number()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Antidistance_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def xadc_assign(self):
            return self.getTypedRuleContext(XplorMRParser.Xadc_assignContext,0)


        def Classification(self):
            return self.getToken(XplorMRParser.Classification, 0)

        def Simple_name(self):
            return self.getToken(XplorMRParser.Simple_name, 0)

        def Expectation(self):
            return self.getToken(XplorMRParser.Expectation, 0)

        def Integer(self):
            return self.getToken(XplorMRParser.Integer, 0)

        def number_s(self):
            return self.getTypedRuleContext(XplorMRParser.Number_sContext,0)


        def ForceConstant(self):
            return self.getToken(XplorMRParser.ForceConstant, 0)

        def Nrestraints(self):
            return self.getToken(XplorMRParser.Nrestraints, 0)

        def Print(self):
            return self.getToken(XplorMRParser.Print, 0)

        def Threshold(self):
            return self.getToken(XplorMRParser.Threshold, 0)

        def All(self):
            return self.getToken(XplorMRParser.All, 0)

        def Reset(self):
            return self.getToken(XplorMRParser.Reset, 0)

        def Size(self):
            return self.getToken(XplorMRParser.Size, 0)

        def Zero(self):
            return self.getToken(XplorMRParser.Zero, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_antidistance_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAntidistance_statement" ):
                listener.enterAntidistance_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAntidistance_statement" ):
                listener.exitAntidistance_statement(self)




    def antidistance_statement(self):

        localctx = XplorMRParser.Antidistance_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 90, self.RULE_antidistance_statement)
        try:
            self.state = 977
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [XplorMRParser.Assign]:
                self.enterOuterAlt(localctx, 1)
                self.state = 953
                self.xadc_assign()
                pass
            elif token in [XplorMRParser.Classification]:
                self.enterOuterAlt(localctx, 2)
                self.state = 954
                self.match(XplorMRParser.Classification)
                self.state = 955
                self.match(XplorMRParser.Simple_name)
                pass
            elif token in [XplorMRParser.Expectation]:
                self.enterOuterAlt(localctx, 3)
                self.state = 956
                self.match(XplorMRParser.Expectation)
                self.state = 957
                self.match(XplorMRParser.Integer)
                self.state = 958
                self.number_s()
                pass
            elif token in [XplorMRParser.ForceConstant]:
                self.enterOuterAlt(localctx, 4)
                self.state = 959
                self.match(XplorMRParser.ForceConstant)
                self.state = 960
                self.number_s()
                pass
            elif token in [XplorMRParser.Nrestraints]:
                self.enterOuterAlt(localctx, 5)
                self.state = 961
                self.match(XplorMRParser.Nrestraints)
                self.state = 962
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.Print]:
                self.enterOuterAlt(localctx, 6)
                self.state = 963
                self.match(XplorMRParser.Print)
                self.state = 964
                self.match(XplorMRParser.Threshold)
                self.state = 965
                self.number_s()
                self.state = 969
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [XplorMRParser.All]:
                    self.state = 966
                    self.match(XplorMRParser.All)
                    pass
                elif token in [XplorMRParser.Classification]:
                    self.state = 967
                    self.match(XplorMRParser.Classification)
                    self.state = 968
                    self.match(XplorMRParser.Simple_name)
                    pass
                else:
                    raise NoViableAltException(self)

                pass
            elif token in [XplorMRParser.Reset]:
                self.enterOuterAlt(localctx, 7)
                self.state = 971
                self.match(XplorMRParser.Reset)
                pass
            elif token in [XplorMRParser.Size]:
                self.enterOuterAlt(localctx, 8)
                self.state = 972
                self.match(XplorMRParser.Size)
                self.state = 973
                self.number_s()
                self.state = 974
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.Zero]:
                self.enterOuterAlt(localctx, 9)
                self.state = 976
                self.match(XplorMRParser.Zero)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Xadc_assignContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Assign(self):
            return self.getToken(XplorMRParser.Assign, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.SelectionContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_xadc_assign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterXadc_assign" ):
                listener.enterXadc_assign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitXadc_assign" ):
                listener.exitXadc_assign(self)




    def xadc_assign(self):

        localctx = XplorMRParser.Xadc_assignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 92, self.RULE_xadc_assign)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 979
            self.match(XplorMRParser.Assign)
            self.state = 980
            self.selection()
            self.state = 981
            self.selection()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Coupling_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def coup_assign(self):
            return self.getTypedRuleContext(XplorMRParser.Coup_assignContext,0)


        def Classification(self):
            return self.getToken(XplorMRParser.Classification, 0)

        def Simple_name(self):
            return self.getToken(XplorMRParser.Simple_name, 0)

        def Coefficients(self):
            return self.getToken(XplorMRParser.Coefficients, 0)

        def number_s(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Number_sContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Number_sContext,i)


        def Cv(self):
            return self.getToken(XplorMRParser.Cv, 0)

        def Integer(self):
            return self.getToken(XplorMRParser.Integer, 0)

        def Equ_op(self):
            return self.getToken(XplorMRParser.Equ_op, 0)

        def DegEnergy(self):
            return self.getToken(XplorMRParser.DegEnergy, 0)

        def ForceConstant(self):
            return self.getToken(XplorMRParser.ForceConstant, 0)

        def Nrestraints(self):
            return self.getToken(XplorMRParser.Nrestraints, 0)

        def Partition(self):
            return self.getToken(XplorMRParser.Partition, 0)

        def Potential(self):
            return self.getToken(XplorMRParser.Potential, 0)

        def Potential_types(self):
            return self.getToken(XplorMRParser.Potential_types, 0)

        def Print(self):
            return self.getToken(XplorMRParser.Print, 0)

        def Threshold(self):
            return self.getToken(XplorMRParser.Threshold, 0)

        def All(self):
            return self.getToken(XplorMRParser.All, 0)

        def Reset(self):
            return self.getToken(XplorMRParser.Reset, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_coupling_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCoupling_statement" ):
                listener.enterCoupling_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCoupling_statement" ):
                listener.exitCoupling_statement(self)




    def coupling_statement(self):

        localctx = XplorMRParser.Coupling_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 94, self.RULE_coupling_statement)
        self._la = 0 # Token type
        try:
            self.state = 1022
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [XplorMRParser.Assign]:
                self.enterOuterAlt(localctx, 1)
                self.state = 983
                self.coup_assign()
                pass
            elif token in [XplorMRParser.Classification]:
                self.enterOuterAlt(localctx, 2)
                self.state = 984
                self.match(XplorMRParser.Classification)
                self.state = 985
                self.match(XplorMRParser.Simple_name)
                pass
            elif token in [XplorMRParser.Coefficients]:
                self.enterOuterAlt(localctx, 3)
                self.state = 986
                self.match(XplorMRParser.Coefficients)
                self.state = 987
                self.number_s()
                self.state = 988
                self.number_s()
                self.state = 989
                self.number_s()
                self.state = 990
                self.number_s()
                pass
            elif token in [XplorMRParser.Cv]:
                self.enterOuterAlt(localctx, 4)
                self.state = 992
                self.match(XplorMRParser.Cv)
                self.state = 994
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 993
                    self.match(XplorMRParser.Equ_op)


                self.state = 996
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.DegEnergy]:
                self.enterOuterAlt(localctx, 5)
                self.state = 997
                self.match(XplorMRParser.DegEnergy)
                self.state = 998
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.ForceConstant]:
                self.enterOuterAlt(localctx, 6)
                self.state = 999
                self.match(XplorMRParser.ForceConstant)
                self.state = 1000
                self.number_s()
                self.state = 1002
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 178)) & ~0x3f) == 0 and ((1 << (_la - 178)) & ((1 << (XplorMRParser.Integer - 178)) | (1 << (XplorMRParser.Real - 178)) | (1 << (XplorMRParser.Symbol_name - 178)))) != 0):
                    self.state = 1001
                    self.number_s()


                pass
            elif token in [XplorMRParser.Nrestraints]:
                self.enterOuterAlt(localctx, 7)
                self.state = 1004
                self.match(XplorMRParser.Nrestraints)
                self.state = 1005
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.Partition]:
                self.enterOuterAlt(localctx, 8)
                self.state = 1006
                self.match(XplorMRParser.Partition)
                self.state = 1008
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 1007
                    self.match(XplorMRParser.Equ_op)


                self.state = 1010
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.Potential]:
                self.enterOuterAlt(localctx, 9)
                self.state = 1011
                self.match(XplorMRParser.Potential)
                self.state = 1012
                self.match(XplorMRParser.Potential_types)
                pass
            elif token in [XplorMRParser.Print]:
                self.enterOuterAlt(localctx, 10)
                self.state = 1013
                self.match(XplorMRParser.Print)
                self.state = 1014
                self.match(XplorMRParser.Threshold)
                self.state = 1015
                self.number_s()
                self.state = 1019
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [XplorMRParser.All]:
                    self.state = 1016
                    self.match(XplorMRParser.All)
                    pass
                elif token in [XplorMRParser.Classification]:
                    self.state = 1017
                    self.match(XplorMRParser.Classification)
                    self.state = 1018
                    self.match(XplorMRParser.Simple_name)
                    pass
                else:
                    raise NoViableAltException(self)

                pass
            elif token in [XplorMRParser.Reset]:
                self.enterOuterAlt(localctx, 11)
                self.state = 1021
                self.match(XplorMRParser.Reset)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Coup_assignContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Assign(self):
            return self.getToken(XplorMRParser.Assign, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.SelectionContext,i)


        def number(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.NumberContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.NumberContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_coup_assign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCoup_assign" ):
                listener.enterCoup_assign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCoup_assign" ):
                listener.exitCoup_assign(self)




    def coup_assign(self):

        localctx = XplorMRParser.Coup_assignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 96, self.RULE_coup_assign)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1024
            self.match(XplorMRParser.Assign)
            self.state = 1025
            self.selection()
            self.state = 1026
            self.selection()
            self.state = 1027
            self.selection()
            self.state = 1028
            self.selection()
            self.state = 1034
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==XplorMRParser.L_paren:
                self.state = 1029
                self.selection()
                self.state = 1030
                self.selection()
                self.state = 1031
                self.selection()
                self.state = 1032
                self.selection()


            self.state = 1036
            self.number()
            self.state = 1037
            self.number()
            self.state = 1041
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 178)) & ~0x3f) == 0 and ((1 << (_la - 178)) & ((1 << (XplorMRParser.Integer - 178)) | (1 << (XplorMRParser.Real - 178)) | (1 << (XplorMRParser.Symbol_name - 178)))) != 0):
                self.state = 1038
                self.number()
                self.state = 1039
                self.number()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Carbon_shift_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def carbon_shift_assign(self):
            return self.getTypedRuleContext(XplorMRParser.Carbon_shift_assignContext,0)


        def Classification(self):
            return self.getToken(XplorMRParser.Classification, 0)

        def Simple_name(self):
            return self.getToken(XplorMRParser.Simple_name, 0)

        def Expectation(self):
            return self.getToken(XplorMRParser.Expectation, 0)

        def Integer(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Integer)
            else:
                return self.getToken(XplorMRParser.Integer, i)

        def number_s(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Number_sContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Number_sContext,i)


        def ForceConstant(self):
            return self.getToken(XplorMRParser.ForceConstant, 0)

        def Nrestraints(self):
            return self.getToken(XplorMRParser.Nrestraints, 0)

        def PhiStep(self):
            return self.getToken(XplorMRParser.PhiStep, 0)

        def PsiStep(self):
            return self.getToken(XplorMRParser.PsiStep, 0)

        def Potential(self):
            return self.getToken(XplorMRParser.Potential, 0)

        def Potential_types(self):
            return self.getToken(XplorMRParser.Potential_types, 0)

        def Print(self):
            return self.getToken(XplorMRParser.Print, 0)

        def Threshold(self):
            return self.getToken(XplorMRParser.Threshold, 0)

        def carbon_shift_rcoil(self):
            return self.getTypedRuleContext(XplorMRParser.Carbon_shift_rcoilContext,0)


        def Reset(self):
            return self.getToken(XplorMRParser.Reset, 0)

        def Zero(self):
            return self.getToken(XplorMRParser.Zero, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_carbon_shift_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCarbon_shift_statement" ):
                listener.enterCarbon_shift_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCarbon_shift_statement" ):
                listener.exitCarbon_shift_statement(self)




    def carbon_shift_statement(self):

        localctx = XplorMRParser.Carbon_shift_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 98, self.RULE_carbon_shift_statement)
        try:
            self.state = 1069
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [XplorMRParser.Assign]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1043
                self.carbon_shift_assign()
                pass
            elif token in [XplorMRParser.Classification]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1044
                self.match(XplorMRParser.Classification)
                self.state = 1045
                self.match(XplorMRParser.Simple_name)
                pass
            elif token in [XplorMRParser.Expectation]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1046
                self.match(XplorMRParser.Expectation)
                self.state = 1047
                self.match(XplorMRParser.Integer)
                self.state = 1048
                self.match(XplorMRParser.Integer)
                self.state = 1049
                self.number_s()
                self.state = 1050
                self.number_s()
                self.state = 1051
                self.number_s()
                pass
            elif token in [XplorMRParser.ForceConstant]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1053
                self.match(XplorMRParser.ForceConstant)
                self.state = 1054
                self.number_s()
                pass
            elif token in [XplorMRParser.Nrestraints]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1055
                self.match(XplorMRParser.Nrestraints)
                self.state = 1056
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.PhiStep]:
                self.enterOuterAlt(localctx, 6)
                self.state = 1057
                self.match(XplorMRParser.PhiStep)
                self.state = 1058
                self.number_s()
                pass
            elif token in [XplorMRParser.PsiStep]:
                self.enterOuterAlt(localctx, 7)
                self.state = 1059
                self.match(XplorMRParser.PsiStep)
                self.state = 1060
                self.number_s()
                pass
            elif token in [XplorMRParser.Potential]:
                self.enterOuterAlt(localctx, 8)
                self.state = 1061
                self.match(XplorMRParser.Potential)
                self.state = 1062
                self.match(XplorMRParser.Potential_types)
                pass
            elif token in [XplorMRParser.Print]:
                self.enterOuterAlt(localctx, 9)
                self.state = 1063
                self.match(XplorMRParser.Print)
                self.state = 1064
                self.match(XplorMRParser.Threshold)
                self.state = 1065
                self.number_s()
                pass
            elif token in [XplorMRParser.Rcoil]:
                self.enterOuterAlt(localctx, 10)
                self.state = 1066
                self.carbon_shift_rcoil()
                pass
            elif token in [XplorMRParser.Reset]:
                self.enterOuterAlt(localctx, 11)
                self.state = 1067
                self.match(XplorMRParser.Reset)
                pass
            elif token in [XplorMRParser.Zero]:
                self.enterOuterAlt(localctx, 12)
                self.state = 1068
                self.match(XplorMRParser.Zero)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Carbon_shift_assignContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Assign(self):
            return self.getToken(XplorMRParser.Assign, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.SelectionContext,i)


        def number(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.NumberContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.NumberContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_carbon_shift_assign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCarbon_shift_assign" ):
                listener.enterCarbon_shift_assign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCarbon_shift_assign" ):
                listener.exitCarbon_shift_assign(self)




    def carbon_shift_assign(self):

        localctx = XplorMRParser.Carbon_shift_assignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 100, self.RULE_carbon_shift_assign)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1071
            self.match(XplorMRParser.Assign)
            self.state = 1072
            self.selection()
            self.state = 1073
            self.selection()
            self.state = 1074
            self.selection()
            self.state = 1075
            self.selection()
            self.state = 1076
            self.selection()
            self.state = 1077
            self.number()
            self.state = 1078
            self.number()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Carbon_shift_rcoilContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Rcoil(self):
            return self.getToken(XplorMRParser.Rcoil, 0)

        def selection(self):
            return self.getTypedRuleContext(XplorMRParser.SelectionContext,0)


        def number(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.NumberContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.NumberContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_carbon_shift_rcoil

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCarbon_shift_rcoil" ):
                listener.enterCarbon_shift_rcoil(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCarbon_shift_rcoil" ):
                listener.exitCarbon_shift_rcoil(self)




    def carbon_shift_rcoil(self):

        localctx = XplorMRParser.Carbon_shift_rcoilContext(self, self._ctx, self.state)
        self.enterRule(localctx, 102, self.RULE_carbon_shift_rcoil)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1080
            self.match(XplorMRParser.Rcoil)
            self.state = 1081
            self.selection()
            self.state = 1082
            self.number()
            self.state = 1083
            self.number()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Proton_shift_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def observed(self):
            return self.getTypedRuleContext(XplorMRParser.ObservedContext,0)


        def proton_shift_rcoil(self):
            return self.getTypedRuleContext(XplorMRParser.Proton_shift_rcoilContext,0)


        def proton_shift_anisotropy(self):
            return self.getTypedRuleContext(XplorMRParser.Proton_shift_anisotropyContext,0)


        def proton_shift_amides(self):
            return self.getTypedRuleContext(XplorMRParser.Proton_shift_amidesContext,0)


        def proton_shift_carbons(self):
            return self.getTypedRuleContext(XplorMRParser.Proton_shift_carbonsContext,0)


        def proton_shift_nitrogens(self):
            return self.getTypedRuleContext(XplorMRParser.Proton_shift_nitrogensContext,0)


        def proton_shift_oxygens(self):
            return self.getTypedRuleContext(XplorMRParser.Proton_shift_oxygensContext,0)


        def proton_shift_ring_atoms(self):
            return self.getTypedRuleContext(XplorMRParser.Proton_shift_ring_atomsContext,0)


        def proton_shift_alphas_and_amides(self):
            return self.getTypedRuleContext(XplorMRParser.Proton_shift_alphas_and_amidesContext,0)


        def Classification(self):
            return self.getToken(XplorMRParser.Classification, 0)

        def Simple_name(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Simple_name)
            else:
                return self.getToken(XplorMRParser.Simple_name, i)

        def Error(self):
            return self.getToken(XplorMRParser.Error, 0)

        def number_s(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Number_sContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Number_sContext,i)


        def DegEnergy(self):
            return self.getToken(XplorMRParser.DegEnergy, 0)

        def Integer(self):
            return self.getToken(XplorMRParser.Integer, 0)

        def ForceConstant(self):
            return self.getToken(XplorMRParser.ForceConstant, 0)

        def Potential(self):
            return self.getToken(XplorMRParser.Potential, 0)

        def Potential_types(self):
            return self.getToken(XplorMRParser.Potential_types, 0)

        def Print(self):
            return self.getToken(XplorMRParser.Print, 0)

        def Threshold(self):
            return self.getToken(XplorMRParser.Threshold, 0)

        def All(self):
            return self.getToken(XplorMRParser.All, 0)

        def Reset(self):
            return self.getToken(XplorMRParser.Reset, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_proton_shift_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProton_shift_statement" ):
                listener.enterProton_shift_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProton_shift_statement" ):
                listener.exitProton_shift_statement(self)




    def proton_shift_statement(self):

        localctx = XplorMRParser.Proton_shift_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 104, self.RULE_proton_shift_statement)
        self._la = 0 # Token type
        try:
            self.state = 1118
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [XplorMRParser.Observed]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1085
                self.observed()
                pass
            elif token in [XplorMRParser.Rcoil]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1086
                self.proton_shift_rcoil()
                pass
            elif token in [XplorMRParser.Anisotropy]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1087
                self.proton_shift_anisotropy()
                pass
            elif token in [XplorMRParser.Amides]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1088
                self.proton_shift_amides()
                pass
            elif token in [XplorMRParser.Carbon]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1089
                self.proton_shift_carbons()
                pass
            elif token in [XplorMRParser.Nitrogens]:
                self.enterOuterAlt(localctx, 6)
                self.state = 1090
                self.proton_shift_nitrogens()
                pass
            elif token in [XplorMRParser.Oxygens]:
                self.enterOuterAlt(localctx, 7)
                self.state = 1091
                self.proton_shift_oxygens()
                pass
            elif token in [XplorMRParser.RingAtoms]:
                self.enterOuterAlt(localctx, 8)
                self.state = 1092
                self.proton_shift_ring_atoms()
                pass
            elif token in [XplorMRParser.AlphasAndAmides]:
                self.enterOuterAlt(localctx, 9)
                self.state = 1093
                self.proton_shift_alphas_and_amides()
                pass
            elif token in [XplorMRParser.Classification]:
                self.enterOuterAlt(localctx, 10)
                self.state = 1094
                self.match(XplorMRParser.Classification)
                self.state = 1095
                self.match(XplorMRParser.Simple_name)
                pass
            elif token in [XplorMRParser.Error]:
                self.enterOuterAlt(localctx, 11)
                self.state = 1096
                self.match(XplorMRParser.Error)
                self.state = 1097
                self.number_s()
                pass
            elif token in [XplorMRParser.DegEnergy]:
                self.enterOuterAlt(localctx, 12)
                self.state = 1098
                self.match(XplorMRParser.DegEnergy)
                self.state = 1099
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.ForceConstant]:
                self.enterOuterAlt(localctx, 13)
                self.state = 1100
                self.match(XplorMRParser.ForceConstant)
                self.state = 1101
                self.number_s()
                self.state = 1103
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 178)) & ~0x3f) == 0 and ((1 << (_la - 178)) & ((1 << (XplorMRParser.Integer - 178)) | (1 << (XplorMRParser.Real - 178)) | (1 << (XplorMRParser.Symbol_name - 178)))) != 0):
                    self.state = 1102
                    self.number_s()


                pass
            elif token in [XplorMRParser.Potential]:
                self.enterOuterAlt(localctx, 14)
                self.state = 1105
                self.match(XplorMRParser.Potential)
                self.state = 1106
                self.match(XplorMRParser.Potential_types)
                pass
            elif token in [XplorMRParser.Print]:
                self.enterOuterAlt(localctx, 15)
                self.state = 1107
                self.match(XplorMRParser.Print)
                self.state = 1108
                self.match(XplorMRParser.Threshold)
                self.state = 1109
                self.number_s()
                self.state = 1113
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [XplorMRParser.All]:
                    self.state = 1110
                    self.match(XplorMRParser.All)
                    pass
                elif token in [XplorMRParser.Classification]:
                    self.state = 1111
                    self.match(XplorMRParser.Classification)
                    self.state = 1112
                    self.match(XplorMRParser.Simple_name)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 1115
                self.match(XplorMRParser.Simple_name)
                pass
            elif token in [XplorMRParser.Reset]:
                self.enterOuterAlt(localctx, 16)
                self.state = 1117
                self.match(XplorMRParser.Reset)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ObservedContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Observed(self):
            return self.getToken(XplorMRParser.Observed, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.SelectionContext,i)


        def number(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.NumberContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.NumberContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_observed

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterObserved" ):
                listener.enterObserved(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitObserved" ):
                listener.exitObserved(self)




    def observed(self):

        localctx = XplorMRParser.ObservedContext(self, self._ctx, self.state)
        self.enterRule(localctx, 106, self.RULE_observed)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1120
            self.match(XplorMRParser.Observed)
            self.state = 1121
            self.selection()
            self.state = 1123
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==XplorMRParser.L_paren:
                self.state = 1122
                self.selection()


            self.state = 1125
            self.number()
            self.state = 1127
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 178)) & ~0x3f) == 0 and ((1 << (_la - 178)) & ((1 << (XplorMRParser.Integer - 178)) | (1 << (XplorMRParser.Real - 178)) | (1 << (XplorMRParser.Symbol_name - 178)))) != 0):
                self.state = 1126
                self.number()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Proton_shift_rcoilContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Rcoil(self):
            return self.getToken(XplorMRParser.Rcoil, 0)

        def selection(self):
            return self.getTypedRuleContext(XplorMRParser.SelectionContext,0)


        def number(self):
            return self.getTypedRuleContext(XplorMRParser.NumberContext,0)


        def getRuleIndex(self):
            return XplorMRParser.RULE_proton_shift_rcoil

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProton_shift_rcoil" ):
                listener.enterProton_shift_rcoil(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProton_shift_rcoil" ):
                listener.exitProton_shift_rcoil(self)




    def proton_shift_rcoil(self):

        localctx = XplorMRParser.Proton_shift_rcoilContext(self, self._ctx, self.state)
        self.enterRule(localctx, 108, self.RULE_proton_shift_rcoil)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1129
            self.match(XplorMRParser.Rcoil)
            self.state = 1130
            self.selection()
            self.state = 1131
            self.number()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Proton_shift_anisotropyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Anisotropy(self):
            return self.getToken(XplorMRParser.Anisotropy, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.SelectionContext,i)


        def Simple_name(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Simple_name)
            else:
                return self.getToken(XplorMRParser.Simple_name, i)

        def Logical(self):
            return self.getToken(XplorMRParser.Logical, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_proton_shift_anisotropy

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProton_shift_anisotropy" ):
                listener.enterProton_shift_anisotropy(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProton_shift_anisotropy" ):
                listener.exitProton_shift_anisotropy(self)




    def proton_shift_anisotropy(self):

        localctx = XplorMRParser.Proton_shift_anisotropyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 110, self.RULE_proton_shift_anisotropy)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1133
            self.match(XplorMRParser.Anisotropy)
            self.state = 1134
            self.selection()
            self.state = 1135
            self.selection()
            self.state = 1136
            self.selection()
            self.state = 1137
            self.match(XplorMRParser.Simple_name)
            self.state = 1139
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==XplorMRParser.Logical:
                self.state = 1138
                self.match(XplorMRParser.Logical)


            self.state = 1141
            self.match(XplorMRParser.Simple_name)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Proton_shift_amidesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Amides(self):
            return self.getToken(XplorMRParser.Amides, 0)

        def selection(self):
            return self.getTypedRuleContext(XplorMRParser.SelectionContext,0)


        def getRuleIndex(self):
            return XplorMRParser.RULE_proton_shift_amides

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProton_shift_amides" ):
                listener.enterProton_shift_amides(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProton_shift_amides" ):
                listener.exitProton_shift_amides(self)




    def proton_shift_amides(self):

        localctx = XplorMRParser.Proton_shift_amidesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 112, self.RULE_proton_shift_amides)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1143
            self.match(XplorMRParser.Amides)
            self.state = 1144
            self.selection()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Proton_shift_carbonsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Carbon(self):
            return self.getToken(XplorMRParser.Carbon, 0)

        def selection(self):
            return self.getTypedRuleContext(XplorMRParser.SelectionContext,0)


        def getRuleIndex(self):
            return XplorMRParser.RULE_proton_shift_carbons

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProton_shift_carbons" ):
                listener.enterProton_shift_carbons(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProton_shift_carbons" ):
                listener.exitProton_shift_carbons(self)




    def proton_shift_carbons(self):

        localctx = XplorMRParser.Proton_shift_carbonsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 114, self.RULE_proton_shift_carbons)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1146
            self.match(XplorMRParser.Carbon)
            self.state = 1147
            self.selection()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Proton_shift_nitrogensContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Nitrogens(self):
            return self.getToken(XplorMRParser.Nitrogens, 0)

        def selection(self):
            return self.getTypedRuleContext(XplorMRParser.SelectionContext,0)


        def getRuleIndex(self):
            return XplorMRParser.RULE_proton_shift_nitrogens

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProton_shift_nitrogens" ):
                listener.enterProton_shift_nitrogens(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProton_shift_nitrogens" ):
                listener.exitProton_shift_nitrogens(self)




    def proton_shift_nitrogens(self):

        localctx = XplorMRParser.Proton_shift_nitrogensContext(self, self._ctx, self.state)
        self.enterRule(localctx, 116, self.RULE_proton_shift_nitrogens)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1149
            self.match(XplorMRParser.Nitrogens)
            self.state = 1150
            self.selection()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Proton_shift_oxygensContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Oxygens(self):
            return self.getToken(XplorMRParser.Oxygens, 0)

        def selection(self):
            return self.getTypedRuleContext(XplorMRParser.SelectionContext,0)


        def getRuleIndex(self):
            return XplorMRParser.RULE_proton_shift_oxygens

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProton_shift_oxygens" ):
                listener.enterProton_shift_oxygens(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProton_shift_oxygens" ):
                listener.exitProton_shift_oxygens(self)




    def proton_shift_oxygens(self):

        localctx = XplorMRParser.Proton_shift_oxygensContext(self, self._ctx, self.state)
        self.enterRule(localctx, 118, self.RULE_proton_shift_oxygens)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1152
            self.match(XplorMRParser.Oxygens)
            self.state = 1153
            self.selection()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Proton_shift_ring_atomsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RingAtoms(self):
            return self.getToken(XplorMRParser.RingAtoms, 0)

        def Simple_name(self):
            return self.getToken(XplorMRParser.Simple_name, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.SelectionContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_proton_shift_ring_atoms

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProton_shift_ring_atoms" ):
                listener.enterProton_shift_ring_atoms(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProton_shift_ring_atoms" ):
                listener.exitProton_shift_ring_atoms(self)




    def proton_shift_ring_atoms(self):

        localctx = XplorMRParser.Proton_shift_ring_atomsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 120, self.RULE_proton_shift_ring_atoms)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1155
            self.match(XplorMRParser.RingAtoms)
            self.state = 1156
            self.match(XplorMRParser.Simple_name)
            self.state = 1157
            self.selection()
            self.state = 1158
            self.selection()
            self.state = 1159
            self.selection()
            self.state = 1160
            self.selection()
            self.state = 1161
            self.selection()
            self.state = 1163
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==XplorMRParser.L_paren:
                self.state = 1162
                self.selection()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Proton_shift_alphas_and_amidesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AlphasAndAmides(self):
            return self.getToken(XplorMRParser.AlphasAndAmides, 0)

        def selection(self):
            return self.getTypedRuleContext(XplorMRParser.SelectionContext,0)


        def getRuleIndex(self):
            return XplorMRParser.RULE_proton_shift_alphas_and_amides

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProton_shift_alphas_and_amides" ):
                listener.enterProton_shift_alphas_and_amides(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProton_shift_alphas_and_amides" ):
                listener.exitProton_shift_alphas_and_amides(self)




    def proton_shift_alphas_and_amides(self):

        localctx = XplorMRParser.Proton_shift_alphas_and_amidesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 122, self.RULE_proton_shift_alphas_and_amides)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1165
            self.match(XplorMRParser.AlphasAndAmides)
            self.state = 1166
            self.selection()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Ramachandran_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def rama_assign(self):
            return self.getTypedRuleContext(XplorMRParser.Rama_assignContext,0)


        def Classification(self):
            return self.getToken(XplorMRParser.Classification, 0)

        def Simple_name(self):
            return self.getToken(XplorMRParser.Simple_name, 0)

        def Cutoff(self):
            return self.getToken(XplorMRParser.Cutoff, 0)

        def number_s(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Number_sContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Number_sContext,i)


        def ForceConstant(self):
            return self.getToken(XplorMRParser.ForceConstant, 0)

        def Gaussian(self):
            return self.getToken(XplorMRParser.Gaussian, 0)

        def Nrestraints(self):
            return self.getToken(XplorMRParser.Nrestraints, 0)

        def Integer(self):
            return self.getToken(XplorMRParser.Integer, 0)

        def Phase(self):
            return self.getToken(XplorMRParser.Phase, 0)

        def Print(self):
            return self.getToken(XplorMRParser.Print, 0)

        def Threshold(self):
            return self.getToken(XplorMRParser.Threshold, 0)

        def All(self):
            return self.getToken(XplorMRParser.All, 0)

        def Quartic(self):
            return self.getToken(XplorMRParser.Quartic, 0)

        def Reset(self):
            return self.getToken(XplorMRParser.Reset, 0)

        def Scale(self):
            return self.getToken(XplorMRParser.Scale, 0)

        def Shape(self):
            return self.getToken(XplorMRParser.Shape, 0)

        def Gauss_or_Quart(self):
            return self.getToken(XplorMRParser.Gauss_or_Quart, 0)

        def Size(self):
            return self.getToken(XplorMRParser.Size, 0)

        def Dimensions(self):
            return self.getToken(XplorMRParser.Dimensions, 0)

        def Sort(self):
            return self.getToken(XplorMRParser.Sort, 0)

        def Zero(self):
            return self.getToken(XplorMRParser.Zero, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_ramachandran_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRamachandran_statement" ):
                listener.enterRamachandran_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRamachandran_statement" ):
                listener.exitRamachandran_statement(self)




    def ramachandran_statement(self):

        localctx = XplorMRParser.Ramachandran_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 124, self.RULE_ramachandran_statement)
        self._la = 0 # Token type
        try:
            self.state = 1270
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [XplorMRParser.Assign]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1168
                self.rama_assign()
                pass
            elif token in [XplorMRParser.Classification]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1169
                self.match(XplorMRParser.Classification)
                self.state = 1170
                self.match(XplorMRParser.Simple_name)
                pass
            elif token in [XplorMRParser.Cutoff]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1171
                self.match(XplorMRParser.Cutoff)
                self.state = 1172
                self.number_s()
                pass
            elif token in [XplorMRParser.ForceConstant]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1173
                self.match(XplorMRParser.ForceConstant)
                self.state = 1174
                self.number_s()
                pass
            elif token in [XplorMRParser.Gaussian]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1175
                self.match(XplorMRParser.Gaussian)
                self.state = 1176
                self.number_s()
                self.state = 1177
                self.number_s()
                self.state = 1178
                self.number_s()
                self.state = 1183
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,106,self._ctx)
                if la_ == 1:
                    self.state = 1179
                    self.number_s()
                    self.state = 1180
                    self.number_s()
                    self.state = 1181
                    self.number_s()


                self.state = 1189
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,107,self._ctx)
                if la_ == 1:
                    self.state = 1185
                    self.number_s()
                    self.state = 1186
                    self.number_s()
                    self.state = 1187
                    self.number_s()


                self.state = 1195
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 178)) & ~0x3f) == 0 and ((1 << (_la - 178)) & ((1 << (XplorMRParser.Integer - 178)) | (1 << (XplorMRParser.Real - 178)) | (1 << (XplorMRParser.Symbol_name - 178)))) != 0):
                    self.state = 1191
                    self.number_s()
                    self.state = 1192
                    self.number_s()
                    self.state = 1193
                    self.number_s()


                pass
            elif token in [XplorMRParser.Nrestraints]:
                self.enterOuterAlt(localctx, 6)
                self.state = 1197
                self.match(XplorMRParser.Nrestraints)
                self.state = 1198
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.Phase]:
                self.enterOuterAlt(localctx, 7)
                self.state = 1199
                self.match(XplorMRParser.Phase)
                self.state = 1200
                self.number_s()
                self.state = 1201
                self.number_s()
                self.state = 1202
                self.number_s()
                self.state = 1207
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,109,self._ctx)
                if la_ == 1:
                    self.state = 1203
                    self.number_s()
                    self.state = 1204
                    self.number_s()
                    self.state = 1205
                    self.number_s()


                self.state = 1213
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,110,self._ctx)
                if la_ == 1:
                    self.state = 1209
                    self.number_s()
                    self.state = 1210
                    self.number_s()
                    self.state = 1211
                    self.number_s()


                self.state = 1219
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 178)) & ~0x3f) == 0 and ((1 << (_la - 178)) & ((1 << (XplorMRParser.Integer - 178)) | (1 << (XplorMRParser.Real - 178)) | (1 << (XplorMRParser.Symbol_name - 178)))) != 0):
                    self.state = 1215
                    self.number_s()
                    self.state = 1216
                    self.number_s()
                    self.state = 1217
                    self.number_s()


                pass
            elif token in [XplorMRParser.Print]:
                self.enterOuterAlt(localctx, 8)
                self.state = 1221
                self.match(XplorMRParser.Print)
                self.state = 1222
                self.match(XplorMRParser.Threshold)
                self.state = 1223
                self.number_s()
                self.state = 1227
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [XplorMRParser.All]:
                    self.state = 1224
                    self.match(XplorMRParser.All)
                    pass
                elif token in [XplorMRParser.Classification]:
                    self.state = 1225
                    self.match(XplorMRParser.Classification)
                    self.state = 1226
                    self.match(XplorMRParser.Simple_name)
                    pass
                else:
                    raise NoViableAltException(self)

                pass
            elif token in [XplorMRParser.Quartic]:
                self.enterOuterAlt(localctx, 9)
                self.state = 1229
                self.match(XplorMRParser.Quartic)
                self.state = 1230
                self.number_s()
                self.state = 1231
                self.number_s()
                self.state = 1232
                self.number_s()
                self.state = 1237
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,113,self._ctx)
                if la_ == 1:
                    self.state = 1233
                    self.number_s()
                    self.state = 1234
                    self.number_s()
                    self.state = 1235
                    self.number_s()


                self.state = 1243
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,114,self._ctx)
                if la_ == 1:
                    self.state = 1239
                    self.number_s()
                    self.state = 1240
                    self.number_s()
                    self.state = 1241
                    self.number_s()


                self.state = 1249
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 178)) & ~0x3f) == 0 and ((1 << (_la - 178)) & ((1 << (XplorMRParser.Integer - 178)) | (1 << (XplorMRParser.Real - 178)) | (1 << (XplorMRParser.Symbol_name - 178)))) != 0):
                    self.state = 1245
                    self.number_s()
                    self.state = 1246
                    self.number_s()
                    self.state = 1247
                    self.number_s()


                pass
            elif token in [XplorMRParser.Reset]:
                self.enterOuterAlt(localctx, 10)
                self.state = 1251
                self.match(XplorMRParser.Reset)
                pass
            elif token in [XplorMRParser.Scale]:
                self.enterOuterAlt(localctx, 11)
                self.state = 1252
                self.match(XplorMRParser.Scale)
                self.state = 1253
                self.number_s()
                pass
            elif token in [XplorMRParser.Shape]:
                self.enterOuterAlt(localctx, 12)
                self.state = 1254
                self.match(XplorMRParser.Shape)
                self.state = 1255
                self.match(XplorMRParser.Gauss_or_Quart)
                pass
            elif token in [XplorMRParser.Size]:
                self.enterOuterAlt(localctx, 13)
                self.state = 1256
                self.match(XplorMRParser.Size)
                self.state = 1257
                self.match(XplorMRParser.Dimensions)
                self.state = 1258
                self.number_s()
                self.state = 1260
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,116,self._ctx)
                if la_ == 1:
                    self.state = 1259
                    self.number_s()


                self.state = 1263
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,117,self._ctx)
                if la_ == 1:
                    self.state = 1262
                    self.number_s()


                self.state = 1266
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 178)) & ~0x3f) == 0 and ((1 << (_la - 178)) & ((1 << (XplorMRParser.Integer - 178)) | (1 << (XplorMRParser.Real - 178)) | (1 << (XplorMRParser.Symbol_name - 178)))) != 0):
                    self.state = 1265
                    self.number_s()


                pass
            elif token in [XplorMRParser.Sort]:
                self.enterOuterAlt(localctx, 14)
                self.state = 1268
                self.match(XplorMRParser.Sort)
                pass
            elif token in [XplorMRParser.Zero]:
                self.enterOuterAlt(localctx, 15)
                self.state = 1269
                self.match(XplorMRParser.Zero)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Rama_assignContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Assign(self):
            return self.getToken(XplorMRParser.Assign, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.SelectionContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_rama_assign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRama_assign" ):
                listener.enterRama_assign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRama_assign" ):
                listener.exitRama_assign(self)




    def rama_assign(self):

        localctx = XplorMRParser.Rama_assignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 126, self.RULE_rama_assign)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1272
            self.match(XplorMRParser.Assign)
            self.state = 1273
            self.selection()
            self.state = 1274
            self.selection()
            self.state = 1275
            self.selection()
            self.state = 1276
            self.selection()
            self.state = 1282
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,120,self._ctx)
            if la_ == 1:
                self.state = 1277
                self.selection()
                self.state = 1278
                self.selection()
                self.state = 1279
                self.selection()
                self.state = 1280
                self.selection()


            self.state = 1289
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,121,self._ctx)
            if la_ == 1:
                self.state = 1284
                self.selection()
                self.state = 1285
                self.selection()
                self.state = 1286
                self.selection()
                self.state = 1287
                self.selection()


            self.state = 1296
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==XplorMRParser.L_paren:
                self.state = 1291
                self.selection()
                self.state = 1292
                self.selection()
                self.state = 1293
                self.selection()
                self.state = 1294
                self.selection()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Collapse_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def coll_assign(self):
            return self.getTypedRuleContext(XplorMRParser.Coll_assignContext,0)


        def Scale(self):
            return self.getToken(XplorMRParser.Scale, 0)

        def number_s(self):
            return self.getTypedRuleContext(XplorMRParser.Number_sContext,0)


        def Print(self):
            return self.getToken(XplorMRParser.Print, 0)

        def Reset(self):
            return self.getToken(XplorMRParser.Reset, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_collapse_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCollapse_statement" ):
                listener.enterCollapse_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCollapse_statement" ):
                listener.exitCollapse_statement(self)




    def collapse_statement(self):

        localctx = XplorMRParser.Collapse_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 128, self.RULE_collapse_statement)
        try:
            self.state = 1303
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [XplorMRParser.Assign]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1298
                self.coll_assign()
                pass
            elif token in [XplorMRParser.Scale]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1299
                self.match(XplorMRParser.Scale)
                self.state = 1300
                self.number_s()
                pass
            elif token in [XplorMRParser.Print]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1301
                self.match(XplorMRParser.Print)
                pass
            elif token in [XplorMRParser.Reset]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1302
                self.match(XplorMRParser.Reset)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Coll_assignContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Assign(self):
            return self.getToken(XplorMRParser.Assign, 0)

        def selection(self):
            return self.getTypedRuleContext(XplorMRParser.SelectionContext,0)


        def number(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.NumberContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.NumberContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_coll_assign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColl_assign" ):
                listener.enterColl_assign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColl_assign" ):
                listener.exitColl_assign(self)




    def coll_assign(self):

        localctx = XplorMRParser.Coll_assignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 130, self.RULE_coll_assign)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1305
            self.match(XplorMRParser.Assign)
            self.state = 1306
            self.selection()
            self.state = 1307
            self.number()
            self.state = 1308
            self.number()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Diffusion_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def dani_assign(self):
            return self.getTypedRuleContext(XplorMRParser.Dani_assignContext,0)


        def Classification(self):
            return self.getToken(XplorMRParser.Classification, 0)

        def Simple_name(self):
            return self.getToken(XplorMRParser.Simple_name, 0)

        def Coefficients(self):
            return self.getToken(XplorMRParser.Coefficients, 0)

        def number_s(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Number_sContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Number_sContext,i)


        def ForceConstant(self):
            return self.getToken(XplorMRParser.ForceConstant, 0)

        def Nrestraints(self):
            return self.getToken(XplorMRParser.Nrestraints, 0)

        def Integer(self):
            return self.getToken(XplorMRParser.Integer, 0)

        def Potential(self):
            return self.getToken(XplorMRParser.Potential, 0)

        def Potential_types(self):
            return self.getToken(XplorMRParser.Potential_types, 0)

        def Print(self):
            return self.getToken(XplorMRParser.Print, 0)

        def Threshold(self):
            return self.getToken(XplorMRParser.Threshold, 0)

        def Reset(self):
            return self.getToken(XplorMRParser.Reset, 0)

        def Type(self):
            return self.getToken(XplorMRParser.Type, 0)

        def Rdc_or_Diff_anis_types(self):
            return self.getToken(XplorMRParser.Rdc_or_Diff_anis_types, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_diffusion_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDiffusion_statement" ):
                listener.enterDiffusion_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDiffusion_statement" ):
                listener.exitDiffusion_statement(self)




    def diffusion_statement(self):

        localctx = XplorMRParser.Diffusion_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 132, self.RULE_diffusion_statement)
        try:
            self.state = 1332
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [XplorMRParser.Assign]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1310
                self.dani_assign()
                pass
            elif token in [XplorMRParser.Classification]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1311
                self.match(XplorMRParser.Classification)
                self.state = 1312
                self.match(XplorMRParser.Simple_name)
                pass
            elif token in [XplorMRParser.Coefficients]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1313
                self.match(XplorMRParser.Coefficients)
                self.state = 1314
                self.number_s()
                self.state = 1315
                self.number_s()
                self.state = 1316
                self.number_s()
                self.state = 1317
                self.number_s()
                self.state = 1318
                self.number_s()
                pass
            elif token in [XplorMRParser.ForceConstant]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1320
                self.match(XplorMRParser.ForceConstant)
                self.state = 1321
                self.number_s()
                pass
            elif token in [XplorMRParser.Nrestraints]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1322
                self.match(XplorMRParser.Nrestraints)
                self.state = 1323
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.Potential]:
                self.enterOuterAlt(localctx, 6)
                self.state = 1324
                self.match(XplorMRParser.Potential)
                self.state = 1325
                self.match(XplorMRParser.Potential_types)
                pass
            elif token in [XplorMRParser.Print]:
                self.enterOuterAlt(localctx, 7)
                self.state = 1326
                self.match(XplorMRParser.Print)
                self.state = 1327
                self.match(XplorMRParser.Threshold)
                self.state = 1328
                self.number_s()
                pass
            elif token in [XplorMRParser.Reset]:
                self.enterOuterAlt(localctx, 8)
                self.state = 1329
                self.match(XplorMRParser.Reset)
                pass
            elif token in [XplorMRParser.Type]:
                self.enterOuterAlt(localctx, 9)
                self.state = 1330
                self.match(XplorMRParser.Type)
                self.state = 1331
                self.match(XplorMRParser.Rdc_or_Diff_anis_types)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Dani_assignContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Assign(self):
            return self.getToken(XplorMRParser.Assign, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.SelectionContext,i)


        def number(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.NumberContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.NumberContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_dani_assign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDani_assign" ):
                listener.enterDani_assign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDani_assign" ):
                listener.exitDani_assign(self)




    def dani_assign(self):

        localctx = XplorMRParser.Dani_assignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 134, self.RULE_dani_assign)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1334
            self.match(XplorMRParser.Assign)
            self.state = 1335
            self.selection()
            self.state = 1336
            self.selection()
            self.state = 1337
            self.selection()
            self.state = 1338
            self.selection()
            self.state = 1339
            self.selection()
            self.state = 1340
            self.selection()
            self.state = 1341
            self.number()
            self.state = 1343
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 178)) & ~0x3f) == 0 and ((1 << (_la - 178)) & ((1 << (XplorMRParser.Integer - 178)) | (1 << (XplorMRParser.Real - 178)) | (1 << (XplorMRParser.Symbol_name - 178)))) != 0):
                self.state = 1342
                self.number()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Orientation_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def orie_assign(self):
            return self.getTypedRuleContext(XplorMRParser.Orie_assignContext,0)


        def Classification(self):
            return self.getToken(XplorMRParser.Classification, 0)

        def Simple_name(self):
            return self.getToken(XplorMRParser.Simple_name, 0)

        def Cutoff(self):
            return self.getToken(XplorMRParser.Cutoff, 0)

        def number_s(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Number_sContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Number_sContext,i)


        def Height(self):
            return self.getToken(XplorMRParser.Height, 0)

        def ForceConstant(self):
            return self.getToken(XplorMRParser.ForceConstant, 0)

        def Gaussian(self):
            return self.getToken(XplorMRParser.Gaussian, 0)

        def MaxGaussians(self):
            return self.getToken(XplorMRParser.MaxGaussians, 0)

        def Integer(self):
            return self.getToken(XplorMRParser.Integer, 0)

        def NewGaussian(self):
            return self.getToken(XplorMRParser.NewGaussian, 0)

        def Nrestraints(self):
            return self.getToken(XplorMRParser.Nrestraints, 0)

        def Print(self):
            return self.getToken(XplorMRParser.Print, 0)

        def Threshold(self):
            return self.getToken(XplorMRParser.Threshold, 0)

        def All(self):
            return self.getToken(XplorMRParser.All, 0)

        def Quartic(self):
            return self.getToken(XplorMRParser.Quartic, 0)

        def Reset(self):
            return self.getToken(XplorMRParser.Reset, 0)

        def Residue(self):
            return self.getToken(XplorMRParser.Residue, 0)

        def Size(self):
            return self.getToken(XplorMRParser.Size, 0)

        def Zero(self):
            return self.getToken(XplorMRParser.Zero, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_orientation_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOrientation_statement" ):
                listener.enterOrientation_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOrientation_statement" ):
                listener.exitOrientation_statement(self)




    def orientation_statement(self):

        localctx = XplorMRParser.Orientation_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 136, self.RULE_orientation_statement)
        try:
            self.state = 1402
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [XplorMRParser.Assign]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1345
                self.orie_assign()
                pass
            elif token in [XplorMRParser.Classification]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1346
                self.match(XplorMRParser.Classification)
                self.state = 1347
                self.match(XplorMRParser.Simple_name)
                pass
            elif token in [XplorMRParser.Cutoff]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1348
                self.match(XplorMRParser.Cutoff)
                self.state = 1349
                self.number_s()
                pass
            elif token in [XplorMRParser.Height]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1350
                self.match(XplorMRParser.Height)
                self.state = 1351
                self.number_s()
                pass
            elif token in [XplorMRParser.ForceConstant]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1352
                self.match(XplorMRParser.ForceConstant)
                self.state = 1353
                self.number_s()
                pass
            elif token in [XplorMRParser.Gaussian]:
                self.enterOuterAlt(localctx, 6)
                self.state = 1354
                self.match(XplorMRParser.Gaussian)
                self.state = 1355
                self.number_s()
                self.state = 1356
                self.number_s()
                self.state = 1357
                self.number_s()
                self.state = 1358
                self.number_s()
                self.state = 1359
                self.number_s()
                self.state = 1360
                self.number_s()
                self.state = 1361
                self.number_s()
                pass
            elif token in [XplorMRParser.MaxGaussians]:
                self.enterOuterAlt(localctx, 7)
                self.state = 1363
                self.match(XplorMRParser.MaxGaussians)
                self.state = 1364
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.NewGaussian]:
                self.enterOuterAlt(localctx, 8)
                self.state = 1365
                self.match(XplorMRParser.NewGaussian)
                self.state = 1366
                self.number_s()
                self.state = 1367
                self.number_s()
                self.state = 1368
                self.number_s()
                self.state = 1369
                self.number_s()
                self.state = 1370
                self.number_s()
                self.state = 1371
                self.number_s()
                self.state = 1372
                self.number_s()
                self.state = 1373
                self.number_s()
                pass
            elif token in [XplorMRParser.Nrestraints]:
                self.enterOuterAlt(localctx, 9)
                self.state = 1375
                self.match(XplorMRParser.Nrestraints)
                self.state = 1376
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.Print]:
                self.enterOuterAlt(localctx, 10)
                self.state = 1377
                self.match(XplorMRParser.Print)
                self.state = 1378
                self.match(XplorMRParser.Threshold)
                self.state = 1379
                self.number_s()
                self.state = 1383
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [XplorMRParser.All]:
                    self.state = 1380
                    self.match(XplorMRParser.All)
                    pass
                elif token in [XplorMRParser.Classification]:
                    self.state = 1381
                    self.match(XplorMRParser.Classification)
                    self.state = 1382
                    self.match(XplorMRParser.Simple_name)
                    pass
                else:
                    raise NoViableAltException(self)

                pass
            elif token in [XplorMRParser.Quartic]:
                self.enterOuterAlt(localctx, 11)
                self.state = 1385
                self.match(XplorMRParser.Quartic)
                self.state = 1386
                self.number_s()
                self.state = 1387
                self.number_s()
                self.state = 1388
                self.number_s()
                self.state = 1389
                self.number_s()
                self.state = 1390
                self.number_s()
                self.state = 1391
                self.number_s()
                self.state = 1392
                self.number_s()
                pass
            elif token in [XplorMRParser.Reset]:
                self.enterOuterAlt(localctx, 12)
                self.state = 1394
                self.match(XplorMRParser.Reset)
                pass
            elif token in [XplorMRParser.Residue]:
                self.enterOuterAlt(localctx, 13)
                self.state = 1395
                self.match(XplorMRParser.Residue)
                self.state = 1396
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.Size]:
                self.enterOuterAlt(localctx, 14)
                self.state = 1397
                self.match(XplorMRParser.Size)
                self.state = 1398
                self.number_s()
                self.state = 1399
                self.number_s()
                pass
            elif token in [XplorMRParser.Zero]:
                self.enterOuterAlt(localctx, 15)
                self.state = 1401
                self.match(XplorMRParser.Zero)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Orie_assignContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Assign(self):
            return self.getToken(XplorMRParser.Assign, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.SelectionContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_orie_assign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOrie_assign" ):
                listener.enterOrie_assign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOrie_assign" ):
                listener.exitOrie_assign(self)




    def orie_assign(self):

        localctx = XplorMRParser.Orie_assignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 138, self.RULE_orie_assign)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1404
            self.match(XplorMRParser.Assign)
            self.state = 1405
            self.selection()
            self.state = 1406
            self.selection()
            self.state = 1407
            self.selection()
            self.state = 1408
            self.selection()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Csa_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def csa_assign(self):
            return self.getTypedRuleContext(XplorMRParser.Csa_assignContext,0)


        def Classification(self):
            return self.getToken(XplorMRParser.Classification, 0)

        def Simple_name(self):
            return self.getToken(XplorMRParser.Simple_name, 0)

        def Scale(self):
            return self.getToken(XplorMRParser.Scale, 0)

        def number_s(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Number_sContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Number_sContext,i)


        def Type(self):
            return self.getToken(XplorMRParser.Type, 0)

        def Csa_types(self):
            return self.getToken(XplorMRParser.Csa_types, 0)

        def Coefficients(self):
            return self.getToken(XplorMRParser.Coefficients, 0)

        def Sigma(self):
            return self.getToken(XplorMRParser.Sigma, 0)

        def ForceConstant(self):
            return self.getToken(XplorMRParser.ForceConstant, 0)

        def Nrestraints(self):
            return self.getToken(XplorMRParser.Nrestraints, 0)

        def Integer(self):
            return self.getToken(XplorMRParser.Integer, 0)

        def Potential(self):
            return self.getToken(XplorMRParser.Potential, 0)

        def Potential_types(self):
            return self.getToken(XplorMRParser.Potential_types, 0)

        def Print(self):
            return self.getToken(XplorMRParser.Print, 0)

        def Threshold(self):
            return self.getToken(XplorMRParser.Threshold, 0)

        def Reset(self):
            return self.getToken(XplorMRParser.Reset, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_csa_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCsa_statement" ):
                listener.enterCsa_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCsa_statement" ):
                listener.exitCsa_statement(self)




    def csa_statement(self):

        localctx = XplorMRParser.Csa_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 140, self.RULE_csa_statement)
        try:
            self.state = 1437
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [XplorMRParser.Assign]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1410
                self.csa_assign()
                pass
            elif token in [XplorMRParser.Classification]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1411
                self.match(XplorMRParser.Classification)
                self.state = 1412
                self.match(XplorMRParser.Simple_name)
                pass
            elif token in [XplorMRParser.Scale]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1413
                self.match(XplorMRParser.Scale)
                self.state = 1414
                self.number_s()
                pass
            elif token in [XplorMRParser.Type]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1415
                self.match(XplorMRParser.Type)
                self.state = 1416
                self.match(XplorMRParser.Csa_types)
                pass
            elif token in [XplorMRParser.Coefficients]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1417
                self.match(XplorMRParser.Coefficients)
                self.state = 1418
                self.number_s()
                self.state = 1419
                self.number_s()
                self.state = 1420
                self.number_s()
                pass
            elif token in [XplorMRParser.Sigma]:
                self.enterOuterAlt(localctx, 6)
                self.state = 1422
                self.match(XplorMRParser.Sigma)
                self.state = 1423
                self.number_s()
                self.state = 1424
                self.number_s()
                self.state = 1425
                self.number_s()
                pass
            elif token in [XplorMRParser.ForceConstant]:
                self.enterOuterAlt(localctx, 7)
                self.state = 1427
                self.match(XplorMRParser.ForceConstant)
                self.state = 1428
                self.number_s()
                pass
            elif token in [XplorMRParser.Nrestraints]:
                self.enterOuterAlt(localctx, 8)
                self.state = 1429
                self.match(XplorMRParser.Nrestraints)
                self.state = 1430
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.Potential]:
                self.enterOuterAlt(localctx, 9)
                self.state = 1431
                self.match(XplorMRParser.Potential)
                self.state = 1432
                self.match(XplorMRParser.Potential_types)
                pass
            elif token in [XplorMRParser.Print]:
                self.enterOuterAlt(localctx, 10)
                self.state = 1433
                self.match(XplorMRParser.Print)
                self.state = 1434
                self.match(XplorMRParser.Threshold)
                self.state = 1435
                self.number_s()
                pass
            elif token in [XplorMRParser.Reset]:
                self.enterOuterAlt(localctx, 11)
                self.state = 1436
                self.match(XplorMRParser.Reset)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Csa_assignContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Assign(self):
            return self.getToken(XplorMRParser.Assign, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.SelectionContext,i)


        def number(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.NumberContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.NumberContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_csa_assign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCsa_assign" ):
                listener.enterCsa_assign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCsa_assign" ):
                listener.exitCsa_assign(self)




    def csa_assign(self):

        localctx = XplorMRParser.Csa_assignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 142, self.RULE_csa_assign)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1439
            self.match(XplorMRParser.Assign)
            self.state = 1440
            self.selection()
            self.state = 1441
            self.selection()
            self.state = 1442
            self.selection()
            self.state = 1443
            self.selection()
            self.state = 1444
            self.selection()
            self.state = 1445
            self.selection()
            self.state = 1446
            self.selection()
            self.state = 1447
            self.number()
            self.state = 1449
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,129,self._ctx)
            if la_ == 1:
                self.state = 1448
                self.number()


            self.state = 1452
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 178)) & ~0x3f) == 0 and ((1 << (_la - 178)) & ((1 << (XplorMRParser.Integer - 178)) | (1 << (XplorMRParser.Real - 178)) | (1 << (XplorMRParser.Symbol_name - 178)))) != 0):
                self.state = 1451
                self.number()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pcsa_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def csa_assign(self):
            return self.getTypedRuleContext(XplorMRParser.Csa_assignContext,0)


        def Classification(self):
            return self.getToken(XplorMRParser.Classification, 0)

        def Simple_name(self):
            return self.getToken(XplorMRParser.Simple_name, 0)

        def Scale(self):
            return self.getToken(XplorMRParser.Scale, 0)

        def number_s(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Number_sContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Number_sContext,i)


        def Coefficients(self):
            return self.getToken(XplorMRParser.Coefficients, 0)

        def Sigma(self):
            return self.getToken(XplorMRParser.Sigma, 0)

        def ForceConstant(self):
            return self.getToken(XplorMRParser.ForceConstant, 0)

        def Nrestraints(self):
            return self.getToken(XplorMRParser.Nrestraints, 0)

        def Integer(self):
            return self.getToken(XplorMRParser.Integer, 0)

        def Potential(self):
            return self.getToken(XplorMRParser.Potential, 0)

        def Potential_types(self):
            return self.getToken(XplorMRParser.Potential_types, 0)

        def Print(self):
            return self.getToken(XplorMRParser.Print, 0)

        def Threshold(self):
            return self.getToken(XplorMRParser.Threshold, 0)

        def Reset(self):
            return self.getToken(XplorMRParser.Reset, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_pcsa_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPcsa_statement" ):
                listener.enterPcsa_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPcsa_statement" ):
                listener.exitPcsa_statement(self)




    def pcsa_statement(self):

        localctx = XplorMRParser.Pcsa_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 144, self.RULE_pcsa_statement)
        try:
            self.state = 1480
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [XplorMRParser.Assign]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1454
                self.csa_assign()
                pass
            elif token in [XplorMRParser.Classification]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1455
                self.match(XplorMRParser.Classification)
                self.state = 1456
                self.match(XplorMRParser.Simple_name)
                pass
            elif token in [XplorMRParser.Scale]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1457
                self.match(XplorMRParser.Scale)
                self.state = 1458
                self.number_s()
                pass
            elif token in [XplorMRParser.Coefficients]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1459
                self.match(XplorMRParser.Coefficients)
                self.state = 1460
                self.number_s()
                self.state = 1461
                self.number_s()
                self.state = 1462
                self.number_s()
                pass
            elif token in [XplorMRParser.Sigma]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1464
                self.match(XplorMRParser.Sigma)
                self.state = 1465
                self.number_s()
                self.state = 1466
                self.number_s()
                self.state = 1467
                self.number_s()
                self.state = 1468
                self.number_s()
                pass
            elif token in [XplorMRParser.ForceConstant]:
                self.enterOuterAlt(localctx, 6)
                self.state = 1470
                self.match(XplorMRParser.ForceConstant)
                self.state = 1471
                self.number_s()
                pass
            elif token in [XplorMRParser.Nrestraints]:
                self.enterOuterAlt(localctx, 7)
                self.state = 1472
                self.match(XplorMRParser.Nrestraints)
                self.state = 1473
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.Potential]:
                self.enterOuterAlt(localctx, 8)
                self.state = 1474
                self.match(XplorMRParser.Potential)
                self.state = 1475
                self.match(XplorMRParser.Potential_types)
                pass
            elif token in [XplorMRParser.Print]:
                self.enterOuterAlt(localctx, 9)
                self.state = 1476
                self.match(XplorMRParser.Print)
                self.state = 1477
                self.match(XplorMRParser.Threshold)
                self.state = 1478
                self.number_s()
                pass
            elif token in [XplorMRParser.Reset]:
                self.enterOuterAlt(localctx, 10)
                self.state = 1479
                self.match(XplorMRParser.Reset)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class One_bond_coupling_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def one_bond_assign(self):
            return self.getTypedRuleContext(XplorMRParser.One_bond_assignContext,0)


        def Classification(self):
            return self.getToken(XplorMRParser.Classification, 0)

        def Simple_name(self):
            return self.getToken(XplorMRParser.Simple_name, 0)

        def Coefficients(self):
            return self.getToken(XplorMRParser.Coefficients, 0)

        def number_s(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Number_sContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Number_sContext,i)


        def ForceConstant(self):
            return self.getToken(XplorMRParser.ForceConstant, 0)

        def Nrestraints(self):
            return self.getToken(XplorMRParser.Nrestraints, 0)

        def Integer(self):
            return self.getToken(XplorMRParser.Integer, 0)

        def Potential(self):
            return self.getToken(XplorMRParser.Potential, 0)

        def Potential_types(self):
            return self.getToken(XplorMRParser.Potential_types, 0)

        def Print(self):
            return self.getToken(XplorMRParser.Print, 0)

        def Threshold(self):
            return self.getToken(XplorMRParser.Threshold, 0)

        def Reset(self):
            return self.getToken(XplorMRParser.Reset, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_one_bond_coupling_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOne_bond_coupling_statement" ):
                listener.enterOne_bond_coupling_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOne_bond_coupling_statement" ):
                listener.exitOne_bond_coupling_statement(self)




    def one_bond_coupling_statement(self):

        localctx = XplorMRParser.One_bond_coupling_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 146, self.RULE_one_bond_coupling_statement)
        try:
            self.state = 1504
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [XplorMRParser.Assign]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1482
                self.one_bond_assign()
                pass
            elif token in [XplorMRParser.Classification]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1483
                self.match(XplorMRParser.Classification)
                self.state = 1484
                self.match(XplorMRParser.Simple_name)
                pass
            elif token in [XplorMRParser.Coefficients]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1485
                self.match(XplorMRParser.Coefficients)
                self.state = 1486
                self.number_s()
                self.state = 1487
                self.number_s()
                self.state = 1488
                self.number_s()
                self.state = 1489
                self.number_s()
                self.state = 1490
                self.number_s()
                self.state = 1491
                self.number_s()
                self.state = 1492
                self.number_s()
                pass
            elif token in [XplorMRParser.ForceConstant]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1494
                self.match(XplorMRParser.ForceConstant)
                self.state = 1495
                self.number_s()
                pass
            elif token in [XplorMRParser.Nrestraints]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1496
                self.match(XplorMRParser.Nrestraints)
                self.state = 1497
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.Potential]:
                self.enterOuterAlt(localctx, 6)
                self.state = 1498
                self.match(XplorMRParser.Potential)
                self.state = 1499
                self.match(XplorMRParser.Potential_types)
                pass
            elif token in [XplorMRParser.Print]:
                self.enterOuterAlt(localctx, 7)
                self.state = 1500
                self.match(XplorMRParser.Print)
                self.state = 1501
                self.match(XplorMRParser.Threshold)
                self.state = 1502
                self.number_s()
                pass
            elif token in [XplorMRParser.Reset]:
                self.enterOuterAlt(localctx, 8)
                self.state = 1503
                self.match(XplorMRParser.Reset)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class One_bond_assignContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Assign(self):
            return self.getToken(XplorMRParser.Assign, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.SelectionContext,i)


        def number(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.NumberContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.NumberContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_one_bond_assign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOne_bond_assign" ):
                listener.enterOne_bond_assign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOne_bond_assign" ):
                listener.exitOne_bond_assign(self)




    def one_bond_assign(self):

        localctx = XplorMRParser.One_bond_assignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 148, self.RULE_one_bond_assign)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1506
            self.match(XplorMRParser.Assign)
            self.state = 1507
            self.selection()
            self.state = 1508
            self.selection()
            self.state = 1509
            self.selection()
            self.state = 1510
            self.selection()
            self.state = 1511
            self.selection()
            self.state = 1512
            self.selection()
            self.state = 1513
            self.selection()
            self.state = 1514
            self.selection()
            self.state = 1515
            self.number()
            self.state = 1516
            self.number()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Angle_db_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def angle_db_assign(self):
            return self.getTypedRuleContext(XplorMRParser.Angle_db_assignContext,0)


        def Classification(self):
            return self.getToken(XplorMRParser.Classification, 0)

        def Simple_name(self):
            return self.getToken(XplorMRParser.Simple_name, 0)

        def DerivFlag(self):
            return self.getToken(XplorMRParser.DerivFlag, 0)

        def Expectation(self):
            return self.getToken(XplorMRParser.Expectation, 0)

        def Integer(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Integer)
            else:
                return self.getToken(XplorMRParser.Integer, i)

        def number_s(self):
            return self.getTypedRuleContext(XplorMRParser.Number_sContext,0)


        def Error(self):
            return self.getToken(XplorMRParser.Error, 0)

        def ForceConstant(self):
            return self.getToken(XplorMRParser.ForceConstant, 0)

        def Nrestraints(self):
            return self.getToken(XplorMRParser.Nrestraints, 0)

        def Potential(self):
            return self.getToken(XplorMRParser.Potential, 0)

        def Potential_types(self):
            return self.getToken(XplorMRParser.Potential_types, 0)

        def Print(self):
            return self.getToken(XplorMRParser.Print, 0)

        def Threshold(self):
            return self.getToken(XplorMRParser.Threshold, 0)

        def All(self):
            return self.getToken(XplorMRParser.All, 0)

        def Reset(self):
            return self.getToken(XplorMRParser.Reset, 0)

        def Size(self):
            return self.getToken(XplorMRParser.Size, 0)

        def Angle_or_Dihedral(self):
            return self.getToken(XplorMRParser.Angle_or_Dihedral, 0)

        def Zero(self):
            return self.getToken(XplorMRParser.Zero, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_angle_db_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAngle_db_statement" ):
                listener.enterAngle_db_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAngle_db_statement" ):
                listener.exitAngle_db_statement(self)




    def angle_db_statement(self):

        localctx = XplorMRParser.Angle_db_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 150, self.RULE_angle_db_statement)
        try:
            self.state = 1549
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [XplorMRParser.Assign]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1518
                self.angle_db_assign()
                pass
            elif token in [XplorMRParser.Classification]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1519
                self.match(XplorMRParser.Classification)
                self.state = 1520
                self.match(XplorMRParser.Simple_name)
                pass
            elif token in [XplorMRParser.DerivFlag]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1521
                self.match(XplorMRParser.DerivFlag)
                self.state = 1522
                self.match(XplorMRParser.Simple_name)
                pass
            elif token in [XplorMRParser.Expectation]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1523
                self.match(XplorMRParser.Expectation)
                self.state = 1524
                self.match(XplorMRParser.Integer)
                self.state = 1525
                self.match(XplorMRParser.Integer)
                self.state = 1526
                self.number_s()
                pass
            elif token in [XplorMRParser.Error]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1527
                self.match(XplorMRParser.Error)
                self.state = 1528
                self.number_s()
                pass
            elif token in [XplorMRParser.ForceConstant]:
                self.enterOuterAlt(localctx, 6)
                self.state = 1529
                self.match(XplorMRParser.ForceConstant)
                self.state = 1530
                self.number_s()
                pass
            elif token in [XplorMRParser.Nrestraints]:
                self.enterOuterAlt(localctx, 7)
                self.state = 1531
                self.match(XplorMRParser.Nrestraints)
                self.state = 1532
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.Potential]:
                self.enterOuterAlt(localctx, 8)
                self.state = 1533
                self.match(XplorMRParser.Potential)
                self.state = 1534
                self.match(XplorMRParser.Potential_types)
                pass
            elif token in [XplorMRParser.Print]:
                self.enterOuterAlt(localctx, 9)
                self.state = 1535
                self.match(XplorMRParser.Print)
                self.state = 1536
                self.match(XplorMRParser.Threshold)
                self.state = 1537
                self.number_s()
                self.state = 1541
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [XplorMRParser.All]:
                    self.state = 1538
                    self.match(XplorMRParser.All)
                    pass
                elif token in [XplorMRParser.Classification]:
                    self.state = 1539
                    self.match(XplorMRParser.Classification)
                    self.state = 1540
                    self.match(XplorMRParser.Simple_name)
                    pass
                else:
                    raise NoViableAltException(self)

                pass
            elif token in [XplorMRParser.Reset]:
                self.enterOuterAlt(localctx, 10)
                self.state = 1543
                self.match(XplorMRParser.Reset)
                pass
            elif token in [XplorMRParser.Size]:
                self.enterOuterAlt(localctx, 11)
                self.state = 1544
                self.match(XplorMRParser.Size)
                self.state = 1545
                self.match(XplorMRParser.Angle_or_Dihedral)
                self.state = 1546
                self.match(XplorMRParser.Integer)
                self.state = 1547
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.Zero]:
                self.enterOuterAlt(localctx, 12)
                self.state = 1548
                self.match(XplorMRParser.Zero)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Angle_db_assignContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Assign(self):
            return self.getToken(XplorMRParser.Assign, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.SelectionContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_angle_db_assign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAngle_db_assign" ):
                listener.enterAngle_db_assign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAngle_db_assign" ):
                listener.exitAngle_db_assign(self)




    def angle_db_assign(self):

        localctx = XplorMRParser.Angle_db_assignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 152, self.RULE_angle_db_assign)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1551
            self.match(XplorMRParser.Assign)
            self.state = 1552
            self.selection()
            self.state = 1553
            self.selection()
            self.state = 1554
            self.selection()
            self.state = 1555
            self.selection()
            self.state = 1556
            self.selection()
            self.state = 1557
            self.selection()
            self.state = 1558
            self.selection()
            self.state = 1559
            self.selection()
            self.state = 1560
            self.selection()
            self.state = 1561
            self.selection()
            self.state = 1562
            self.selection()
            self.state = 1564
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==XplorMRParser.L_paren:
                self.state = 1563
                self.selection()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pre_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def pre_assign(self):
            return self.getTypedRuleContext(XplorMRParser.Pre_assignContext,0)


        def Classification(self):
            return self.getToken(XplorMRParser.Classification, 0)

        def Simple_name(self):
            return self.getToken(XplorMRParser.Simple_name, 0)

        def Equ_op(self):
            return self.getToken(XplorMRParser.Equ_op, 0)

        def ForceConstant(self):
            return self.getToken(XplorMRParser.ForceConstant, 0)

        def number_s(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Number_sContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Number_sContext,i)


        def Nrestraints(self):
            return self.getToken(XplorMRParser.Nrestraints, 0)

        def Integer(self):
            return self.getToken(XplorMRParser.Integer, 0)

        def Potential(self):
            return self.getToken(XplorMRParser.Potential, 0)

        def Simple_name_P(self):
            return self.getToken(XplorMRParser.Simple_name_P, 0)

        def Potential_types(self):
            return self.getToken(XplorMRParser.Potential_types, 0)

        def Equ_op_P(self):
            return self.getToken(XplorMRParser.Equ_op_P, 0)

        def Kconst(self):
            return self.getToken(XplorMRParser.Kconst, 0)

        def Omega(self):
            return self.getToken(XplorMRParser.Omega, 0)

        def Tauc(self):
            return self.getToken(XplorMRParser.Tauc, 0)

        def Print(self):
            return self.getToken(XplorMRParser.Print, 0)

        def Threshold(self):
            return self.getToken(XplorMRParser.Threshold, 0)

        def All(self):
            return self.getToken(XplorMRParser.All, 0)

        def Reset(self):
            return self.getToken(XplorMRParser.Reset, 0)

        def Debug(self):
            return self.getToken(XplorMRParser.Debug, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_pre_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPre_statement" ):
                listener.enterPre_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPre_statement" ):
                listener.exitPre_statement(self)




    def pre_statement(self):

        localctx = XplorMRParser.Pre_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 154, self.RULE_pre_statement)
        self._la = 0 # Token type
        try:
            self.state = 1619
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [XplorMRParser.Assign]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1566
                self.pre_assign()
                pass
            elif token in [XplorMRParser.Classification]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1567
                self.match(XplorMRParser.Classification)
                self.state = 1569
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 1568
                    self.match(XplorMRParser.Equ_op)


                self.state = 1571
                self.match(XplorMRParser.Simple_name)
                pass
            elif token in [XplorMRParser.ForceConstant]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1572
                self.match(XplorMRParser.ForceConstant)
                self.state = 1574
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 1573
                    self.match(XplorMRParser.Equ_op)


                self.state = 1576
                self.match(XplorMRParser.Simple_name)
                self.state = 1577
                self.number_s()
                pass
            elif token in [XplorMRParser.Nrestraints]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1578
                self.match(XplorMRParser.Nrestraints)
                self.state = 1580
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 1579
                    self.match(XplorMRParser.Equ_op)


                self.state = 1582
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.Potential]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1583
                self.match(XplorMRParser.Potential)
                self.state = 1585
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op_P:
                    self.state = 1584
                    self.match(XplorMRParser.Equ_op_P)


                self.state = 1587
                self.match(XplorMRParser.Simple_name_P)
                self.state = 1588
                self.match(XplorMRParser.Potential_types)
                pass
            elif token in [XplorMRParser.Kconst]:
                self.enterOuterAlt(localctx, 6)
                self.state = 1589
                self.match(XplorMRParser.Kconst)
                self.state = 1591
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 1590
                    self.match(XplorMRParser.Equ_op)


                self.state = 1593
                self.match(XplorMRParser.Simple_name)
                self.state = 1594
                self.number_s()
                pass
            elif token in [XplorMRParser.Omega]:
                self.enterOuterAlt(localctx, 7)
                self.state = 1595
                self.match(XplorMRParser.Omega)
                self.state = 1597
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 1596
                    self.match(XplorMRParser.Equ_op)


                self.state = 1599
                self.match(XplorMRParser.Simple_name)
                self.state = 1600
                self.number_s()
                pass
            elif token in [XplorMRParser.Tauc]:
                self.enterOuterAlt(localctx, 8)
                self.state = 1601
                self.match(XplorMRParser.Tauc)
                self.state = 1603
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 1602
                    self.match(XplorMRParser.Equ_op)


                self.state = 1605
                self.match(XplorMRParser.Simple_name)
                self.state = 1606
                self.number_s()
                self.state = 1607
                self.number_s()
                pass
            elif token in [XplorMRParser.Print]:
                self.enterOuterAlt(localctx, 9)
                self.state = 1609
                self.match(XplorMRParser.Print)
                self.state = 1610
                self.match(XplorMRParser.Threshold)
                self.state = 1611
                self.number_s()
                self.state = 1615
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [XplorMRParser.All]:
                    self.state = 1612
                    self.match(XplorMRParser.All)
                    pass
                elif token in [XplorMRParser.Classification]:
                    self.state = 1613
                    self.match(XplorMRParser.Classification)
                    self.state = 1614
                    self.match(XplorMRParser.Simple_name)
                    pass
                else:
                    raise NoViableAltException(self)

                pass
            elif token in [XplorMRParser.Reset]:
                self.enterOuterAlt(localctx, 10)
                self.state = 1617
                self.match(XplorMRParser.Reset)
                pass
            elif token in [XplorMRParser.Debug]:
                self.enterOuterAlt(localctx, 11)
                self.state = 1618
                self.match(XplorMRParser.Debug)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pre_assignContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Assign(self):
            return self.getToken(XplorMRParser.Assign, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.SelectionContext,i)


        def number(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.NumberContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.NumberContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_pre_assign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPre_assign" ):
                listener.enterPre_assign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPre_assign" ):
                listener.exitPre_assign(self)




    def pre_assign(self):

        localctx = XplorMRParser.Pre_assignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 156, self.RULE_pre_assign)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1621
            self.match(XplorMRParser.Assign)
            self.state = 1622
            self.selection()
            self.state = 1623
            self.selection()
            self.state = 1624
            self.number()
            self.state = 1626
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 178)) & ~0x3f) == 0 and ((1 << (_la - 178)) & ((1 << (XplorMRParser.Integer - 178)) | (1 << (XplorMRParser.Real - 178)) | (1 << (XplorMRParser.Symbol_name - 178)))) != 0):
                self.state = 1625
                self.number()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pcs_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def pcs_assign(self):
            return self.getTypedRuleContext(XplorMRParser.Pcs_assignContext,0)


        def Classification(self):
            return self.getToken(XplorMRParser.Classification, 0)

        def Simple_name(self):
            return self.getToken(XplorMRParser.Simple_name, 0)

        def Tolerance(self):
            return self.getToken(XplorMRParser.Tolerance, 0)

        def Integer(self):
            return self.getToken(XplorMRParser.Integer, 0)

        def Coefficients(self):
            return self.getToken(XplorMRParser.Coefficients, 0)

        def number_s(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Number_sContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Number_sContext,i)


        def ForceConstant(self):
            return self.getToken(XplorMRParser.ForceConstant, 0)

        def Nrestraints(self):
            return self.getToken(XplorMRParser.Nrestraints, 0)

        def Print(self):
            return self.getToken(XplorMRParser.Print, 0)

        def Threshold(self):
            return self.getToken(XplorMRParser.Threshold, 0)

        def All(self):
            return self.getToken(XplorMRParser.All, 0)

        def Reset(self):
            return self.getToken(XplorMRParser.Reset, 0)

        def Save(self):
            return self.getToken(XplorMRParser.Save, 0)

        def Fmed(self):
            return self.getToken(XplorMRParser.Fmed, 0)

        def ErrOn(self):
            return self.getToken(XplorMRParser.ErrOn, 0)

        def ErrOff(self):
            return self.getToken(XplorMRParser.ErrOff, 0)

        def Fon(self):
            return self.getToken(XplorMRParser.Fon, 0)

        def Foff(self):
            return self.getToken(XplorMRParser.Foff, 0)

        def Son(self):
            return self.getToken(XplorMRParser.Son, 0)

        def Soff(self):
            return self.getToken(XplorMRParser.Soff, 0)

        def Frun(self):
            return self.getToken(XplorMRParser.Frun, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_pcs_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPcs_statement" ):
                listener.enterPcs_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPcs_statement" ):
                listener.exitPcs_statement(self)




    def pcs_statement(self):

        localctx = XplorMRParser.Pcs_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 158, self.RULE_pcs_statement)
        try:
            self.state = 1664
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [XplorMRParser.Assign]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1628
                self.pcs_assign()
                pass
            elif token in [XplorMRParser.Classification]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1629
                self.match(XplorMRParser.Classification)
                self.state = 1630
                self.match(XplorMRParser.Simple_name)
                pass
            elif token in [XplorMRParser.Tolerance]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1631
                self.match(XplorMRParser.Tolerance)
                self.state = 1632
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.Coefficients]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1633
                self.match(XplorMRParser.Coefficients)
                self.state = 1634
                self.number_s()
                self.state = 1635
                self.number_s()
                pass
            elif token in [XplorMRParser.ForceConstant]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1637
                self.match(XplorMRParser.ForceConstant)
                self.state = 1638
                self.number_s()
                pass
            elif token in [XplorMRParser.Nrestraints]:
                self.enterOuterAlt(localctx, 6)
                self.state = 1639
                self.match(XplorMRParser.Nrestraints)
                self.state = 1640
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.Print]:
                self.enterOuterAlt(localctx, 7)
                self.state = 1641
                self.match(XplorMRParser.Print)
                self.state = 1642
                self.match(XplorMRParser.Threshold)
                self.state = 1643
                self.number_s()
                self.state = 1647
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [XplorMRParser.All]:
                    self.state = 1644
                    self.match(XplorMRParser.All)
                    pass
                elif token in [XplorMRParser.Classification]:
                    self.state = 1645
                    self.match(XplorMRParser.Classification)
                    self.state = 1646
                    self.match(XplorMRParser.Simple_name)
                    pass
                else:
                    raise NoViableAltException(self)

                pass
            elif token in [XplorMRParser.Reset]:
                self.enterOuterAlt(localctx, 8)
                self.state = 1649
                self.match(XplorMRParser.Reset)
                pass
            elif token in [XplorMRParser.Save]:
                self.enterOuterAlt(localctx, 9)
                self.state = 1650
                self.match(XplorMRParser.Save)
                self.state = 1651
                self.match(XplorMRParser.Simple_name)
                pass
            elif token in [XplorMRParser.Fmed]:
                self.enterOuterAlt(localctx, 10)
                self.state = 1652
                self.match(XplorMRParser.Fmed)
                self.state = 1653
                self.number_s()
                self.state = 1654
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.ErrOn]:
                self.enterOuterAlt(localctx, 11)
                self.state = 1656
                self.match(XplorMRParser.ErrOn)
                pass
            elif token in [XplorMRParser.ErrOff]:
                self.enterOuterAlt(localctx, 12)
                self.state = 1657
                self.match(XplorMRParser.ErrOff)
                pass
            elif token in [XplorMRParser.Fon]:
                self.enterOuterAlt(localctx, 13)
                self.state = 1658
                self.match(XplorMRParser.Fon)
                pass
            elif token in [XplorMRParser.Foff]:
                self.enterOuterAlt(localctx, 14)
                self.state = 1659
                self.match(XplorMRParser.Foff)
                pass
            elif token in [XplorMRParser.Son]:
                self.enterOuterAlt(localctx, 15)
                self.state = 1660
                self.match(XplorMRParser.Son)
                pass
            elif token in [XplorMRParser.Soff]:
                self.enterOuterAlt(localctx, 16)
                self.state = 1661
                self.match(XplorMRParser.Soff)
                pass
            elif token in [XplorMRParser.Frun]:
                self.enterOuterAlt(localctx, 17)
                self.state = 1662
                self.match(XplorMRParser.Frun)
                self.state = 1663
                self.match(XplorMRParser.Integer)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pcs_assignContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Assign(self):
            return self.getToken(XplorMRParser.Assign, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.SelectionContext,i)


        def number(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.NumberContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.NumberContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_pcs_assign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPcs_assign" ):
                listener.enterPcs_assign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPcs_assign" ):
                listener.exitPcs_assign(self)




    def pcs_assign(self):

        localctx = XplorMRParser.Pcs_assignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 160, self.RULE_pcs_assign)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1666
            self.match(XplorMRParser.Assign)
            self.state = 1667
            self.selection()
            self.state = 1668
            self.selection()
            self.state = 1669
            self.selection()
            self.state = 1670
            self.selection()
            self.state = 1671
            self.selection()
            self.state = 1672
            self.number()
            self.state = 1674
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 178)) & ~0x3f) == 0 and ((1 << (_la - 178)) & ((1 << (XplorMRParser.Integer - 178)) | (1 << (XplorMRParser.Real - 178)) | (1 << (XplorMRParser.Symbol_name - 178)))) != 0):
                self.state = 1673
                self.number()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Prdc_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def prdc_assign(self):
            return self.getTypedRuleContext(XplorMRParser.Prdc_assignContext,0)


        def Classification(self):
            return self.getToken(XplorMRParser.Classification, 0)

        def Simple_name(self):
            return self.getToken(XplorMRParser.Simple_name, 0)

        def Tolerance(self):
            return self.getToken(XplorMRParser.Tolerance, 0)

        def Integer(self):
            return self.getToken(XplorMRParser.Integer, 0)

        def Coefficients(self):
            return self.getToken(XplorMRParser.Coefficients, 0)

        def number_s(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Number_sContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Number_sContext,i)


        def ForceConstant(self):
            return self.getToken(XplorMRParser.ForceConstant, 0)

        def Nrestraints(self):
            return self.getToken(XplorMRParser.Nrestraints, 0)

        def ErrOn(self):
            return self.getToken(XplorMRParser.ErrOn, 0)

        def ErrOff(self):
            return self.getToken(XplorMRParser.ErrOff, 0)

        def Fmed(self):
            return self.getToken(XplorMRParser.Fmed, 0)

        def Fon(self):
            return self.getToken(XplorMRParser.Fon, 0)

        def Foff(self):
            return self.getToken(XplorMRParser.Foff, 0)

        def Frun(self):
            return self.getToken(XplorMRParser.Frun, 0)

        def Print(self):
            return self.getToken(XplorMRParser.Print, 0)

        def Threshold(self):
            return self.getToken(XplorMRParser.Threshold, 0)

        def Reset(self):
            return self.getToken(XplorMRParser.Reset, 0)

        def Save(self):
            return self.getToken(XplorMRParser.Save, 0)

        def Son(self):
            return self.getToken(XplorMRParser.Son, 0)

        def Soff(self):
            return self.getToken(XplorMRParser.Soff, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_prdc_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrdc_statement" ):
                listener.enterPrdc_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrdc_statement" ):
                listener.exitPrdc_statement(self)




    def prdc_statement(self):

        localctx = XplorMRParser.Prdc_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 162, self.RULE_prdc_statement)
        try:
            self.state = 1702
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [XplorMRParser.Assign]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1676
                self.prdc_assign()
                pass
            elif token in [XplorMRParser.Classification]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1677
                self.match(XplorMRParser.Classification)
                self.state = 1678
                self.match(XplorMRParser.Simple_name)
                pass
            elif token in [XplorMRParser.Tolerance]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1679
                self.match(XplorMRParser.Tolerance)
                self.state = 1680
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.Coefficients]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1681
                self.match(XplorMRParser.Coefficients)
                self.state = 1682
                self.number_s()
                self.state = 1683
                self.number_s()
                pass
            elif token in [XplorMRParser.ForceConstant]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1685
                self.match(XplorMRParser.ForceConstant)
                self.state = 1686
                self.number_s()
                pass
            elif token in [XplorMRParser.Nrestraints]:
                self.enterOuterAlt(localctx, 6)
                self.state = 1687
                self.match(XplorMRParser.Nrestraints)
                self.state = 1688
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.ErrOn]:
                self.enterOuterAlt(localctx, 7)
                self.state = 1689
                self.match(XplorMRParser.ErrOn)
                pass
            elif token in [XplorMRParser.ErrOff]:
                self.enterOuterAlt(localctx, 8)
                self.state = 1690
                self.match(XplorMRParser.ErrOff)
                pass
            elif token in [XplorMRParser.Fmed]:
                self.enterOuterAlt(localctx, 9)
                self.state = 1691
                self.match(XplorMRParser.Fmed)
                pass
            elif token in [XplorMRParser.Fon]:
                self.enterOuterAlt(localctx, 10)
                self.state = 1692
                self.match(XplorMRParser.Fon)
                pass
            elif token in [XplorMRParser.Foff]:
                self.enterOuterAlt(localctx, 11)
                self.state = 1693
                self.match(XplorMRParser.Foff)
                pass
            elif token in [XplorMRParser.Frun]:
                self.enterOuterAlt(localctx, 12)
                self.state = 1694
                self.match(XplorMRParser.Frun)
                pass
            elif token in [XplorMRParser.Print]:
                self.enterOuterAlt(localctx, 13)
                self.state = 1695
                self.match(XplorMRParser.Print)
                self.state = 1696
                self.match(XplorMRParser.Threshold)
                pass
            elif token in [XplorMRParser.Reset]:
                self.enterOuterAlt(localctx, 14)
                self.state = 1697
                self.match(XplorMRParser.Reset)
                pass
            elif token in [XplorMRParser.Save]:
                self.enterOuterAlt(localctx, 15)
                self.state = 1698
                self.match(XplorMRParser.Save)
                self.state = 1699
                self.match(XplorMRParser.Simple_name)
                pass
            elif token in [XplorMRParser.Son]:
                self.enterOuterAlt(localctx, 16)
                self.state = 1700
                self.match(XplorMRParser.Son)
                pass
            elif token in [XplorMRParser.Soff]:
                self.enterOuterAlt(localctx, 17)
                self.state = 1701
                self.match(XplorMRParser.Soff)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Prdc_assignContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Assign(self):
            return self.getToken(XplorMRParser.Assign, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.SelectionContext,i)


        def number(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.NumberContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.NumberContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_prdc_assign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrdc_assign" ):
                listener.enterPrdc_assign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrdc_assign" ):
                listener.exitPrdc_assign(self)




    def prdc_assign(self):

        localctx = XplorMRParser.Prdc_assignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 164, self.RULE_prdc_assign)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1704
            self.match(XplorMRParser.Assign)
            self.state = 1705
            self.selection()
            self.state = 1706
            self.selection()
            self.state = 1707
            self.selection()
            self.state = 1708
            self.selection()
            self.state = 1709
            self.selection()
            self.state = 1710
            self.selection()
            self.state = 1711
            self.number()
            self.state = 1713
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 178)) & ~0x3f) == 0 and ((1 << (_la - 178)) & ((1 << (XplorMRParser.Integer - 178)) | (1 << (XplorMRParser.Real - 178)) | (1 << (XplorMRParser.Symbol_name - 178)))) != 0):
                self.state = 1712
                self.number()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Porientation_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def porientation_assign(self):
            return self.getTypedRuleContext(XplorMRParser.Porientation_assignContext,0)


        def Classification(self):
            return self.getToken(XplorMRParser.Classification, 0)

        def Simple_name(self):
            return self.getToken(XplorMRParser.Simple_name, 0)

        def ForceConstant(self):
            return self.getToken(XplorMRParser.ForceConstant, 0)

        def number_s(self):
            return self.getTypedRuleContext(XplorMRParser.Number_sContext,0)


        def Nrestraints(self):
            return self.getToken(XplorMRParser.Nrestraints, 0)

        def Integer(self):
            return self.getToken(XplorMRParser.Integer, 0)

        def Print(self):
            return self.getToken(XplorMRParser.Print, 0)

        def Threshold(self):
            return self.getToken(XplorMRParser.Threshold, 0)

        def Reset(self):
            return self.getToken(XplorMRParser.Reset, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_porientation_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPorientation_statement" ):
                listener.enterPorientation_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPorientation_statement" ):
                listener.exitPorientation_statement(self)




    def porientation_statement(self):

        localctx = XplorMRParser.Porientation_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 166, self.RULE_porientation_statement)
        try:
            self.state = 1726
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [XplorMRParser.Assign]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1715
                self.porientation_assign()
                pass
            elif token in [XplorMRParser.Classification]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1716
                self.match(XplorMRParser.Classification)
                self.state = 1717
                self.match(XplorMRParser.Simple_name)
                pass
            elif token in [XplorMRParser.ForceConstant]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1718
                self.match(XplorMRParser.ForceConstant)
                self.state = 1719
                self.number_s()
                pass
            elif token in [XplorMRParser.Nrestraints]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1720
                self.match(XplorMRParser.Nrestraints)
                self.state = 1721
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.Print]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1722
                self.match(XplorMRParser.Print)
                self.state = 1723
                self.match(XplorMRParser.Threshold)
                self.state = 1724
                self.number_s()
                pass
            elif token in [XplorMRParser.Reset]:
                self.enterOuterAlt(localctx, 6)
                self.state = 1725
                self.match(XplorMRParser.Reset)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Porientation_assignContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Assign(self):
            return self.getToken(XplorMRParser.Assign, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.SelectionContext,i)


        def number(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.NumberContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.NumberContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_porientation_assign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPorientation_assign" ):
                listener.enterPorientation_assign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPorientation_assign" ):
                listener.exitPorientation_assign(self)




    def porientation_assign(self):

        localctx = XplorMRParser.Porientation_assignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 168, self.RULE_porientation_assign)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1728
            self.match(XplorMRParser.Assign)
            self.state = 1729
            self.selection()
            self.state = 1730
            self.selection()
            self.state = 1731
            self.number()
            self.state = 1732
            self.number()
            self.state = 1733
            self.number()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pccr_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def pccr_assign(self):
            return self.getTypedRuleContext(XplorMRParser.Pccr_assignContext,0)


        def Classification(self):
            return self.getToken(XplorMRParser.Classification, 0)

        def Simple_name(self):
            return self.getToken(XplorMRParser.Simple_name, 0)

        def Weip(self):
            return self.getToken(XplorMRParser.Weip, 0)

        def Integer(self):
            return self.getToken(XplorMRParser.Integer, 0)

        def Coefficients(self):
            return self.getToken(XplorMRParser.Coefficients, 0)

        def number_s(self):
            return self.getTypedRuleContext(XplorMRParser.Number_sContext,0)


        def ForceConstant(self):
            return self.getToken(XplorMRParser.ForceConstant, 0)

        def Nrestraints(self):
            return self.getToken(XplorMRParser.Nrestraints, 0)

        def Print(self):
            return self.getToken(XplorMRParser.Print, 0)

        def Threshold(self):
            return self.getToken(XplorMRParser.Threshold, 0)

        def Reset(self):
            return self.getToken(XplorMRParser.Reset, 0)

        def Frun(self):
            return self.getToken(XplorMRParser.Frun, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_pccr_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPccr_statement" ):
                listener.enterPccr_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPccr_statement" ):
                listener.exitPccr_statement(self)




    def pccr_statement(self):

        localctx = XplorMRParser.Pccr_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 170, self.RULE_pccr_statement)
        try:
            self.state = 1752
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [XplorMRParser.Assign]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1735
                self.pccr_assign()
                pass
            elif token in [XplorMRParser.Classification]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1736
                self.match(XplorMRParser.Classification)
                self.state = 1737
                self.match(XplorMRParser.Simple_name)
                pass
            elif token in [XplorMRParser.Weip]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1738
                self.match(XplorMRParser.Weip)
                self.state = 1739
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.Coefficients]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1740
                self.match(XplorMRParser.Coefficients)
                self.state = 1741
                self.number_s()
                pass
            elif token in [XplorMRParser.ForceConstant]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1742
                self.match(XplorMRParser.ForceConstant)
                self.state = 1743
                self.number_s()
                pass
            elif token in [XplorMRParser.Nrestraints]:
                self.enterOuterAlt(localctx, 6)
                self.state = 1744
                self.match(XplorMRParser.Nrestraints)
                self.state = 1745
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.Print]:
                self.enterOuterAlt(localctx, 7)
                self.state = 1746
                self.match(XplorMRParser.Print)
                self.state = 1747
                self.match(XplorMRParser.Threshold)
                self.state = 1748
                self.number_s()
                pass
            elif token in [XplorMRParser.Reset]:
                self.enterOuterAlt(localctx, 8)
                self.state = 1749
                self.match(XplorMRParser.Reset)
                pass
            elif token in [XplorMRParser.Frun]:
                self.enterOuterAlt(localctx, 9)
                self.state = 1750
                self.match(XplorMRParser.Frun)
                self.state = 1751
                self.match(XplorMRParser.Integer)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pccr_assignContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Assign(self):
            return self.getToken(XplorMRParser.Assign, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.SelectionContext,i)


        def number(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.NumberContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.NumberContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_pccr_assign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPccr_assign" ):
                listener.enterPccr_assign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPccr_assign" ):
                listener.exitPccr_assign(self)




    def pccr_assign(self):

        localctx = XplorMRParser.Pccr_assignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 172, self.RULE_pccr_assign)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1754
            self.match(XplorMRParser.Assign)
            self.state = 1755
            self.selection()
            self.state = 1756
            self.selection()
            self.state = 1757
            self.selection()
            self.state = 1758
            self.number()
            self.state = 1760
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 178)) & ~0x3f) == 0 and ((1 << (_la - 178)) & ((1 << (XplorMRParser.Integer - 178)) | (1 << (XplorMRParser.Real - 178)) | (1 << (XplorMRParser.Symbol_name - 178)))) != 0):
                self.state = 1759
                self.number()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Hbond_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def hbond_assign(self):
            return self.getTypedRuleContext(XplorMRParser.Hbond_assignContext,0)


        def Classification(self):
            return self.getToken(XplorMRParser.Classification, 0)

        def Simple_name(self):
            return self.getToken(XplorMRParser.Simple_name, 0)

        def ForceConstant(self):
            return self.getToken(XplorMRParser.ForceConstant, 0)

        def number_s(self):
            return self.getTypedRuleContext(XplorMRParser.Number_sContext,0)


        def Nrestraints(self):
            return self.getToken(XplorMRParser.Nrestraints, 0)

        def Integer(self):
            return self.getToken(XplorMRParser.Integer, 0)

        def Print(self):
            return self.getToken(XplorMRParser.Print, 0)

        def Threshold(self):
            return self.getToken(XplorMRParser.Threshold, 0)

        def Reset(self):
            return self.getToken(XplorMRParser.Reset, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_hbond_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHbond_statement" ):
                listener.enterHbond_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHbond_statement" ):
                listener.exitHbond_statement(self)




    def hbond_statement(self):

        localctx = XplorMRParser.Hbond_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 174, self.RULE_hbond_statement)
        try:
            self.state = 1773
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [XplorMRParser.Assign]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1762
                self.hbond_assign()
                pass
            elif token in [XplorMRParser.Classification]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1763
                self.match(XplorMRParser.Classification)
                self.state = 1764
                self.match(XplorMRParser.Simple_name)
                pass
            elif token in [XplorMRParser.ForceConstant]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1765
                self.match(XplorMRParser.ForceConstant)
                self.state = 1766
                self.number_s()
                pass
            elif token in [XplorMRParser.Nrestraints]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1767
                self.match(XplorMRParser.Nrestraints)
                self.state = 1768
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.Print]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1769
                self.match(XplorMRParser.Print)
                self.state = 1770
                self.match(XplorMRParser.Threshold)
                self.state = 1771
                self.number_s()
                pass
            elif token in [XplorMRParser.Reset]:
                self.enterOuterAlt(localctx, 6)
                self.state = 1772
                self.match(XplorMRParser.Reset)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Hbond_assignContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Assign(self):
            return self.getToken(XplorMRParser.Assign, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.SelectionContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_hbond_assign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHbond_assign" ):
                listener.enterHbond_assign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHbond_assign" ):
                listener.exitHbond_assign(self)




    def hbond_assign(self):

        localctx = XplorMRParser.Hbond_assignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 176, self.RULE_hbond_assign)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1775
            self.match(XplorMRParser.Assign)
            self.state = 1776
            self.selection()
            self.state = 1777
            self.selection()
            self.state = 1778
            self.selection()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Hbond_db_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def hbond_db_assign(self):
            return self.getTypedRuleContext(XplorMRParser.Hbond_db_assignContext,0)


        def Kdir(self):
            return self.getToken(XplorMRParser.Kdir, 0)

        def number_s(self):
            return self.getTypedRuleContext(XplorMRParser.Number_sContext,0)


        def Equ_op(self):
            return self.getToken(XplorMRParser.Equ_op, 0)

        def Klin(self):
            return self.getToken(XplorMRParser.Klin, 0)

        def Nseg(self):
            return self.getToken(XplorMRParser.Nseg, 0)

        def Integer(self):
            return self.getToken(XplorMRParser.Integer, 0)

        def Nmin(self):
            return self.getToken(XplorMRParser.Nmin, 0)

        def Nmax(self):
            return self.getToken(XplorMRParser.Nmax, 0)

        def Segm(self):
            return self.getToken(XplorMRParser.Segm, 0)

        def Simple_name(self):
            return self.getToken(XplorMRParser.Simple_name, 0)

        def Ohcut(self):
            return self.getToken(XplorMRParser.Ohcut, 0)

        def Coh1cut(self):
            return self.getToken(XplorMRParser.Coh1cut, 0)

        def Coh2cut(self):
            return self.getToken(XplorMRParser.Coh2cut, 0)

        def Ohncut(self):
            return self.getToken(XplorMRParser.Ohncut, 0)

        def Updfrq(self):
            return self.getToken(XplorMRParser.Updfrq, 0)

        def Prnfrq(self):
            return self.getToken(XplorMRParser.Prnfrq, 0)

        def Freemode(self):
            return self.getToken(XplorMRParser.Freemode, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_hbond_db_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHbond_db_statement" ):
                listener.enterHbond_db_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHbond_db_statement" ):
                listener.exitHbond_db_statement(self)




    def hbond_db_statement(self):

        localctx = XplorMRParser.Hbond_db_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 178, self.RULE_hbond_db_statement)
        self._la = 0 # Token type
        try:
            self.state = 1846
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [XplorMRParser.Assign]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1780
                self.hbond_db_assign()
                pass
            elif token in [XplorMRParser.Kdir]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1781
                self.match(XplorMRParser.Kdir)
                self.state = 1783
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 1782
                    self.match(XplorMRParser.Equ_op)


                self.state = 1785
                self.number_s()
                pass
            elif token in [XplorMRParser.Klin]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1786
                self.match(XplorMRParser.Klin)
                self.state = 1788
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 1787
                    self.match(XplorMRParser.Equ_op)


                self.state = 1790
                self.number_s()
                pass
            elif token in [XplorMRParser.Nseg]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1791
                self.match(XplorMRParser.Nseg)
                self.state = 1793
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 1792
                    self.match(XplorMRParser.Equ_op)


                self.state = 1795
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.Nmin]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1796
                self.match(XplorMRParser.Nmin)
                self.state = 1798
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 1797
                    self.match(XplorMRParser.Equ_op)


                self.state = 1800
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.Nmax]:
                self.enterOuterAlt(localctx, 6)
                self.state = 1801
                self.match(XplorMRParser.Nmax)
                self.state = 1803
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 1802
                    self.match(XplorMRParser.Equ_op)


                self.state = 1805
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.Segm]:
                self.enterOuterAlt(localctx, 7)
                self.state = 1806
                self.match(XplorMRParser.Segm)
                self.state = 1808
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 1807
                    self.match(XplorMRParser.Equ_op)


                self.state = 1810
                self.match(XplorMRParser.Simple_name)
                pass
            elif token in [XplorMRParser.Ohcut]:
                self.enterOuterAlt(localctx, 8)
                self.state = 1811
                self.match(XplorMRParser.Ohcut)
                self.state = 1813
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 1812
                    self.match(XplorMRParser.Equ_op)


                self.state = 1815
                self.number_s()
                pass
            elif token in [XplorMRParser.Coh1cut]:
                self.enterOuterAlt(localctx, 9)
                self.state = 1816
                self.match(XplorMRParser.Coh1cut)
                self.state = 1818
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 1817
                    self.match(XplorMRParser.Equ_op)


                self.state = 1820
                self.number_s()
                pass
            elif token in [XplorMRParser.Coh2cut]:
                self.enterOuterAlt(localctx, 10)
                self.state = 1821
                self.match(XplorMRParser.Coh2cut)
                self.state = 1823
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 1822
                    self.match(XplorMRParser.Equ_op)


                self.state = 1825
                self.number_s()
                pass
            elif token in [XplorMRParser.Ohncut]:
                self.enterOuterAlt(localctx, 11)
                self.state = 1826
                self.match(XplorMRParser.Ohncut)
                self.state = 1828
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 1827
                    self.match(XplorMRParser.Equ_op)


                self.state = 1830
                self.number_s()
                pass
            elif token in [XplorMRParser.Updfrq]:
                self.enterOuterAlt(localctx, 12)
                self.state = 1831
                self.match(XplorMRParser.Updfrq)
                self.state = 1833
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 1832
                    self.match(XplorMRParser.Equ_op)


                self.state = 1835
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.Prnfrq]:
                self.enterOuterAlt(localctx, 13)
                self.state = 1836
                self.match(XplorMRParser.Prnfrq)
                self.state = 1838
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 1837
                    self.match(XplorMRParser.Equ_op)


                self.state = 1840
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.Freemode]:
                self.enterOuterAlt(localctx, 14)
                self.state = 1841
                self.match(XplorMRParser.Freemode)
                self.state = 1843
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 1842
                    self.match(XplorMRParser.Equ_op)


                self.state = 1845
                self.match(XplorMRParser.Integer)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Hbond_db_assignContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Assign(self):
            return self.getToken(XplorMRParser.Assign, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.SelectionContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_hbond_db_assign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHbond_db_assign" ):
                listener.enterHbond_db_assign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHbond_db_assign" ):
                listener.exitHbond_db_assign(self)




    def hbond_db_assign(self):

        localctx = XplorMRParser.Hbond_db_assignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 180, self.RULE_hbond_db_assign)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1848
            self.match(XplorMRParser.Assign)
            self.state = 1849
            self.selection()
            self.state = 1850
            self.selection()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SelectionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def L_paren(self):
            return self.getToken(XplorMRParser.L_paren, 0)

        def selection_expression(self):
            return self.getTypedRuleContext(XplorMRParser.Selection_expressionContext,0)


        def R_paren(self):
            return self.getToken(XplorMRParser.R_paren, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_selection

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSelection" ):
                listener.enterSelection(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSelection" ):
                listener.exitSelection(self)




    def selection(self):

        localctx = XplorMRParser.SelectionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 182, self.RULE_selection)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1852
            self.match(XplorMRParser.L_paren)
            self.state = 1853
            self.selection_expression()
            self.state = 1854
            self.match(XplorMRParser.R_paren)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Selection_expressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def term(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.TermContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.TermContext,i)


        def Or_op(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Or_op)
            else:
                return self.getToken(XplorMRParser.Or_op, i)

        def getRuleIndex(self):
            return XplorMRParser.RULE_selection_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSelection_expression" ):
                listener.enterSelection_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSelection_expression" ):
                listener.exitSelection_expression(self)




    def selection_expression(self):

        localctx = XplorMRParser.Selection_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 184, self.RULE_selection_expression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1856
            self.term()
            self.state = 1861
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==XplorMRParser.Or_op:
                self.state = 1857
                self.match(XplorMRParser.Or_op)
                self.state = 1858
                self.term()
                self.state = 1863
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TermContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def factor(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.FactorContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.FactorContext,i)


        def And_op(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.And_op)
            else:
                return self.getToken(XplorMRParser.And_op, i)

        def getRuleIndex(self):
            return XplorMRParser.RULE_term

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTerm" ):
                listener.enterTerm(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTerm" ):
                listener.exitTerm(self)




    def term(self):

        localctx = XplorMRParser.TermContext(self, self._ctx, self.state)
        self.enterRule(localctx, 186, self.RULE_term)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1864
            self.factor(0)
            self.state = 1869
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==XplorMRParser.And_op:
                self.state = 1865
                self.match(XplorMRParser.And_op)
                self.state = 1866
                self.factor(0)
                self.state = 1871
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FactorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def L_paren(self):
            return self.getToken(XplorMRParser.L_paren, 0)

        def selection_expression(self):
            return self.getTypedRuleContext(XplorMRParser.Selection_expressionContext,0)


        def R_paren(self):
            return self.getToken(XplorMRParser.R_paren, 0)

        def All(self):
            return self.getToken(XplorMRParser.All, 0)

        def Atom(self):
            return self.getToken(XplorMRParser.Atom, 0)

        def Simple_names(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Simple_names)
            else:
                return self.getToken(XplorMRParser.Simple_names, i)

        def Simple_name(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Simple_name)
            else:
                return self.getToken(XplorMRParser.Simple_name, i)

        def Integers(self):
            return self.getToken(XplorMRParser.Integers, 0)

        def Integer(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Integer)
            else:
                return self.getToken(XplorMRParser.Integer, i)

        def Attribute(self):
            return self.getToken(XplorMRParser.Attribute, 0)

        def Attr_properties(self):
            return self.getToken(XplorMRParser.Attr_properties, 0)

        def Comparison_ops(self):
            return self.getToken(XplorMRParser.Comparison_ops, 0)

        def number_f(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Number_fContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Number_fContext,i)


        def Abs(self):
            return self.getToken(XplorMRParser.Abs, 0)

        def BondedTo(self):
            return self.getToken(XplorMRParser.BondedTo, 0)

        def factor(self):
            return self.getTypedRuleContext(XplorMRParser.FactorContext,0)


        def ByGroup(self):
            return self.getToken(XplorMRParser.ByGroup, 0)

        def ByRes(self):
            return self.getToken(XplorMRParser.ByRes, 0)

        def Chemical(self):
            return self.getToken(XplorMRParser.Chemical, 0)

        def Colon(self):
            return self.getToken(XplorMRParser.Colon, 0)

        def Hydrogen(self):
            return self.getToken(XplorMRParser.Hydrogen, 0)

        def Id(self):
            return self.getToken(XplorMRParser.Id, 0)

        def Known(self):
            return self.getToken(XplorMRParser.Known, 0)

        def Name(self):
            return self.getToken(XplorMRParser.Name, 0)

        def Double_quote_string(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Double_quote_string)
            else:
                return self.getToken(XplorMRParser.Double_quote_string, i)

        def Not_op(self):
            return self.getToken(XplorMRParser.Not_op, 0)

        def Point(self):
            return self.getToken(XplorMRParser.Point, 0)

        def Cut(self):
            return self.getToken(XplorMRParser.Cut, 0)

        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Comma)
            else:
                return self.getToken(XplorMRParser.Comma, i)

        def Tail(self):
            return self.getToken(XplorMRParser.Tail, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.SelectionContext,i)


        def Equ_op(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Equ_op)
            else:
                return self.getToken(XplorMRParser.Equ_op, i)

        def Head(self):
            return self.getToken(XplorMRParser.Head, 0)

        def Previous(self):
            return self.getToken(XplorMRParser.Previous, 0)

        def Pseudo(self):
            return self.getToken(XplorMRParser.Pseudo, 0)

        def Residue(self):
            return self.getToken(XplorMRParser.Residue, 0)

        def Symbol_name(self):
            return self.getToken(XplorMRParser.Symbol_name, 0)

        def Resname(self):
            return self.getToken(XplorMRParser.Resname, 0)

        def SegIdentifier(self):
            return self.getToken(XplorMRParser.SegIdentifier, 0)

        def Store_1(self):
            return self.getToken(XplorMRParser.Store_1, 0)

        def Store_2(self):
            return self.getToken(XplorMRParser.Store_2, 0)

        def Store_3(self):
            return self.getToken(XplorMRParser.Store_3, 0)

        def Store_4(self):
            return self.getToken(XplorMRParser.Store_4, 0)

        def Store_5(self):
            return self.getToken(XplorMRParser.Store_5, 0)

        def Store_6(self):
            return self.getToken(XplorMRParser.Store_6, 0)

        def Store_7(self):
            return self.getToken(XplorMRParser.Store_7, 0)

        def Store_8(self):
            return self.getToken(XplorMRParser.Store_8, 0)

        def Store_9(self):
            return self.getToken(XplorMRParser.Store_9, 0)

        def Tag(self):
            return self.getToken(XplorMRParser.Tag, 0)

        def Donor(self):
            return self.getToken(XplorMRParser.Donor, 0)

        def Acceptor(self):
            return self.getToken(XplorMRParser.Acceptor, 0)

        def Around(self):
            return self.getToken(XplorMRParser.Around, 0)

        def Saround(self):
            return self.getToken(XplorMRParser.Saround, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_factor

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFactor" ):
                listener.enterFactor(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFactor" ):
                listener.exitFactor(self)



    def factor(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = XplorMRParser.FactorContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 188
        self.enterRecursionRule(localctx, 188, self.RULE_factor, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2007
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,190,self._ctx)
            if la_ == 1:
                self.state = 1873
                self.match(XplorMRParser.L_paren)
                self.state = 1874
                self.selection_expression()
                self.state = 1875
                self.match(XplorMRParser.R_paren)
                pass

            elif la_ == 2:
                self.state = 1877
                self.match(XplorMRParser.All)
                pass

            elif la_ == 3:
                self.state = 1878
                self.match(XplorMRParser.Atom)
                self.state = 1879
                _la = self._input.LA(1)
                if not(_la==XplorMRParser.Simple_name or _la==XplorMRParser.Simple_names):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1880
                _la = self._input.LA(1)
                if not(_la==XplorMRParser.Integer or _la==XplorMRParser.Integers):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1881
                _la = self._input.LA(1)
                if not(_la==XplorMRParser.Simple_name or _la==XplorMRParser.Simple_names):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass

            elif la_ == 4:
                self.state = 1882
                self.match(XplorMRParser.Attribute)
                self.state = 1884
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Abs:
                    self.state = 1883
                    self.match(XplorMRParser.Abs)


                self.state = 1886
                self.match(XplorMRParser.Attr_properties)
                self.state = 1887
                self.match(XplorMRParser.Comparison_ops)
                self.state = 1888
                self.number_f()
                pass

            elif la_ == 5:
                self.state = 1889
                self.match(XplorMRParser.BondedTo)
                self.state = 1890
                self.factor(29)
                pass

            elif la_ == 6:
                self.state = 1891
                self.match(XplorMRParser.ByGroup)
                self.state = 1892
                self.factor(28)
                pass

            elif la_ == 7:
                self.state = 1893
                self.match(XplorMRParser.ByRes)
                self.state = 1894
                self.factor(27)
                pass

            elif la_ == 8:
                self.state = 1895
                self.match(XplorMRParser.Chemical)
                self.state = 1902
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [XplorMRParser.Simple_names]:
                    self.state = 1896
                    self.match(XplorMRParser.Simple_names)
                    pass
                elif token in [XplorMRParser.Simple_name]:
                    self.state = 1897
                    self.match(XplorMRParser.Simple_name)
                    self.state = 1900
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,172,self._ctx)
                    if la_ == 1:
                        self.state = 1898
                        self.match(XplorMRParser.Colon)
                        self.state = 1899
                        self.match(XplorMRParser.Simple_name)


                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 9:
                self.state = 1904
                self.match(XplorMRParser.Hydrogen)
                pass

            elif la_ == 10:
                self.state = 1905
                self.match(XplorMRParser.Id)
                self.state = 1906
                self.match(XplorMRParser.Integer)
                pass

            elif la_ == 11:
                self.state = 1907
                self.match(XplorMRParser.Known)
                pass

            elif la_ == 12:
                self.state = 1908
                self.match(XplorMRParser.Name)
                self.state = 1920
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [XplorMRParser.Simple_names]:
                    self.state = 1909
                    self.match(XplorMRParser.Simple_names)
                    pass
                elif token in [XplorMRParser.Simple_name]:
                    self.state = 1910
                    self.match(XplorMRParser.Simple_name)
                    self.state = 1913
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,174,self._ctx)
                    if la_ == 1:
                        self.state = 1911
                        self.match(XplorMRParser.Colon)
                        self.state = 1912
                        self.match(XplorMRParser.Simple_name)


                    pass
                elif token in [XplorMRParser.Double_quote_string]:
                    self.state = 1915
                    self.match(XplorMRParser.Double_quote_string)
                    self.state = 1918
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,175,self._ctx)
                    if la_ == 1:
                        self.state = 1916
                        self.match(XplorMRParser.Colon)
                        self.state = 1917
                        self.match(XplorMRParser.Double_quote_string)


                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 13:
                self.state = 1922
                self.match(XplorMRParser.Not_op)
                self.state = 1923
                self.factor(21)
                pass

            elif la_ == 14:
                self.state = 1924
                self.match(XplorMRParser.Point)
                self.state = 1925
                self.match(XplorMRParser.L_paren)
                self.state = 1926
                self.number_f()
                self.state = 1928
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Comma:
                    self.state = 1927
                    self.match(XplorMRParser.Comma)


                self.state = 1930
                self.number_f()
                self.state = 1932
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Comma:
                    self.state = 1931
                    self.match(XplorMRParser.Comma)


                self.state = 1934
                self.number_f()
                self.state = 1935
                self.match(XplorMRParser.R_paren)
                self.state = 1936
                self.match(XplorMRParser.Cut)
                self.state = 1937
                self.number_f()
                pass

            elif la_ == 15:
                self.state = 1939
                self.match(XplorMRParser.Point)
                self.state = 1940
                self.match(XplorMRParser.L_paren)
                self.state = 1941
                self.match(XplorMRParser.Tail)
                self.state = 1943
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 1942
                    self.match(XplorMRParser.Equ_op)


                self.state = 1945
                self.selection()
                self.state = 1947
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Comma:
                    self.state = 1946
                    self.match(XplorMRParser.Comma)


                self.state = 1954
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Head:
                    self.state = 1949
                    self.match(XplorMRParser.Head)
                    self.state = 1951
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==XplorMRParser.Equ_op:
                        self.state = 1950
                        self.match(XplorMRParser.Equ_op)


                    self.state = 1953
                    self.selection()


                self.state = 1956
                self.match(XplorMRParser.R_paren)
                self.state = 1957
                self.match(XplorMRParser.Cut)
                self.state = 1958
                self.number_f()
                pass

            elif la_ == 16:
                self.state = 1960
                self.match(XplorMRParser.Previous)
                pass

            elif la_ == 17:
                self.state = 1961
                self.match(XplorMRParser.Pseudo)
                pass

            elif la_ == 18:
                self.state = 1962
                self.match(XplorMRParser.Residue)
                self.state = 1970
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [XplorMRParser.Integers]:
                    self.state = 1963
                    self.match(XplorMRParser.Integers)
                    pass
                elif token in [XplorMRParser.Integer]:
                    self.state = 1964
                    self.match(XplorMRParser.Integer)
                    self.state = 1967
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,183,self._ctx)
                    if la_ == 1:
                        self.state = 1965
                        self.match(XplorMRParser.Colon)
                        self.state = 1966
                        self.match(XplorMRParser.Integer)


                    pass
                elif token in [XplorMRParser.Symbol_name]:
                    self.state = 1969
                    self.match(XplorMRParser.Symbol_name)
                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 19:
                self.state = 1972
                self.match(XplorMRParser.Resname)
                self.state = 1979
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [XplorMRParser.Simple_names]:
                    self.state = 1973
                    self.match(XplorMRParser.Simple_names)
                    pass
                elif token in [XplorMRParser.Simple_name]:
                    self.state = 1974
                    self.match(XplorMRParser.Simple_name)
                    self.state = 1977
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,185,self._ctx)
                    if la_ == 1:
                        self.state = 1975
                        self.match(XplorMRParser.Colon)
                        self.state = 1976
                        self.match(XplorMRParser.Simple_name)


                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 20:
                self.state = 1981
                self.match(XplorMRParser.SegIdentifier)
                self.state = 1993
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [XplorMRParser.Simple_names]:
                    self.state = 1982
                    self.match(XplorMRParser.Simple_names)
                    pass
                elif token in [XplorMRParser.Simple_name]:
                    self.state = 1983
                    self.match(XplorMRParser.Simple_name)
                    self.state = 1986
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,187,self._ctx)
                    if la_ == 1:
                        self.state = 1984
                        self.match(XplorMRParser.Colon)
                        self.state = 1985
                        self.match(XplorMRParser.Simple_name)


                    pass
                elif token in [XplorMRParser.Double_quote_string]:
                    self.state = 1988
                    self.match(XplorMRParser.Double_quote_string)
                    self.state = 1991
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,188,self._ctx)
                    if la_ == 1:
                        self.state = 1989
                        self.match(XplorMRParser.Colon)
                        self.state = 1990
                        self.match(XplorMRParser.Double_quote_string)


                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 21:
                self.state = 1995
                self.match(XplorMRParser.Store_1)
                pass

            elif la_ == 22:
                self.state = 1996
                self.match(XplorMRParser.Store_2)
                pass

            elif la_ == 23:
                self.state = 1997
                self.match(XplorMRParser.Store_3)
                pass

            elif la_ == 24:
                self.state = 1998
                self.match(XplorMRParser.Store_4)
                pass

            elif la_ == 25:
                self.state = 1999
                self.match(XplorMRParser.Store_5)
                pass

            elif la_ == 26:
                self.state = 2000
                self.match(XplorMRParser.Store_6)
                pass

            elif la_ == 27:
                self.state = 2001
                self.match(XplorMRParser.Store_7)
                pass

            elif la_ == 28:
                self.state = 2002
                self.match(XplorMRParser.Store_8)
                pass

            elif la_ == 29:
                self.state = 2003
                self.match(XplorMRParser.Store_9)
                pass

            elif la_ == 30:
                self.state = 2004
                self.match(XplorMRParser.Tag)
                pass

            elif la_ == 31:
                self.state = 2005
                self.match(XplorMRParser.Donor)
                pass

            elif la_ == 32:
                self.state = 2006
                self.match(XplorMRParser.Acceptor)
                pass


            self._ctx.stop = self._input.LT(-1)
            self.state = 2017
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,192,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 2015
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,191,self._ctx)
                    if la_ == 1:
                        localctx = XplorMRParser.FactorContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_factor)
                        self.state = 2009
                        if not self.precpred(self._ctx, 32):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 32)")
                        self.state = 2010
                        self.match(XplorMRParser.Around)
                        self.state = 2011
                        self.number_f()
                        pass

                    elif la_ == 2:
                        localctx = XplorMRParser.FactorContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_factor)
                        self.state = 2012
                        if not self.precpred(self._ctx, 14):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 14)")
                        self.state = 2013
                        self.match(XplorMRParser.Saround)
                        self.state = 2014
                        self.number_f()
                        pass

             
                self.state = 2019
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,192,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class NumberContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Real(self):
            return self.getToken(XplorMRParser.Real, 0)

        def Integer(self):
            return self.getToken(XplorMRParser.Integer, 0)

        def Symbol_name(self):
            return self.getToken(XplorMRParser.Symbol_name, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_number

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNumber" ):
                listener.enterNumber(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNumber" ):
                listener.exitNumber(self)




    def number(self):

        localctx = XplorMRParser.NumberContext(self, self._ctx, self.state)
        self.enterRule(localctx, 190, self.RULE_number)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2020
            _la = self._input.LA(1)
            if not(((((_la - 178)) & ~0x3f) == 0 and ((1 << (_la - 178)) & ((1 << (XplorMRParser.Integer - 178)) | (1 << (XplorMRParser.Real - 178)) | (1 << (XplorMRParser.Symbol_name - 178)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Number_fContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Real(self):
            return self.getToken(XplorMRParser.Real, 0)

        def Integer(self):
            return self.getToken(XplorMRParser.Integer, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_number_f

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNumber_f" ):
                listener.enterNumber_f(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNumber_f" ):
                listener.exitNumber_f(self)




    def number_f(self):

        localctx = XplorMRParser.Number_fContext(self, self._ctx, self.state)
        self.enterRule(localctx, 192, self.RULE_number_f)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2022
            _la = self._input.LA(1)
            if not(_la==XplorMRParser.Integer or _la==XplorMRParser.Real):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Number_sContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Real(self):
            return self.getToken(XplorMRParser.Real, 0)

        def Integer(self):
            return self.getToken(XplorMRParser.Integer, 0)

        def Symbol_name(self):
            return self.getToken(XplorMRParser.Symbol_name, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_number_s

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNumber_s" ):
                listener.enterNumber_s(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNumber_s" ):
                listener.exitNumber_s(self)




    def number_s(self):

        localctx = XplorMRParser.Number_sContext(self, self._ctx, self.state)
        self.enterRule(localctx, 194, self.RULE_number_s)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2024
            _la = self._input.LA(1)
            if not(((((_la - 178)) & ~0x3f) == 0 and ((1 << (_la - 178)) & ((1 << (XplorMRParser.Integer - 178)) | (1 << (XplorMRParser.Real - 178)) | (1 << (XplorMRParser.Symbol_name - 178)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Number_aContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Real(self):
            return self.getToken(XplorMRParser.Real, 0)

        def Integer(self):
            return self.getToken(XplorMRParser.Integer, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_number_a

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNumber_a" ):
                listener.enterNumber_a(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNumber_a" ):
                listener.exitNumber_a(self)




    def number_a(self):

        localctx = XplorMRParser.Number_aContext(self, self._ctx, self.state)
        self.enterRule(localctx, 196, self.RULE_number_a)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2026
            _la = self._input.LA(1)
            if not(_la==XplorMRParser.Integer or _la==XplorMRParser.Real):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Flag_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Flags(self):
            return self.getToken(XplorMRParser.Flags, 0)

        def Include(self):
            return self.getToken(XplorMRParser.Include, 0)

        def End_F(self):
            return self.getToken(XplorMRParser.End_F, 0)

        def Exclude(self):
            return self.getToken(XplorMRParser.Exclude, 0)

        def Class_name(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Class_name)
            else:
                return self.getToken(XplorMRParser.Class_name, i)

        def Any_class(self):
            return self.getToken(XplorMRParser.Any_class, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_flag_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFlag_statement" ):
                listener.enterFlag_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFlag_statement" ):
                listener.exitFlag_statement(self)




    def flag_statement(self):

        localctx = XplorMRParser.Flag_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 198, self.RULE_flag_statement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2028
            self.match(XplorMRParser.Flags)
            self.state = 2039
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==XplorMRParser.Exclude:
                self.state = 2029
                self.match(XplorMRParser.Exclude)
                self.state = 2037
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [XplorMRParser.Include, XplorMRParser.Class_name]:
                    self.state = 2033
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==XplorMRParser.Class_name:
                        self.state = 2030
                        self.match(XplorMRParser.Class_name)
                        self.state = 2035
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    pass
                elif token in [XplorMRParser.Any_class]:
                    self.state = 2036
                    self.match(XplorMRParser.Any_class)
                    pass
                else:
                    raise NoViableAltException(self)



            self.state = 2041
            self.match(XplorMRParser.Include)
            self.state = 2045
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==XplorMRParser.Class_name:
                self.state = 2042
                self.match(XplorMRParser.Class_name)
                self.state = 2047
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2048
            self.match(XplorMRParser.End_F)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Vector_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Vector(self):
            return self.getToken(XplorMRParser.Vector, 0)

        def vector_mode(self):
            return self.getTypedRuleContext(XplorMRParser.Vector_modeContext,0)


        def selection(self):
            return self.getTypedRuleContext(XplorMRParser.SelectionContext,0)


        def getRuleIndex(self):
            return XplorMRParser.RULE_vector_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVector_statement" ):
                listener.enterVector_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVector_statement" ):
                listener.exitVector_statement(self)




    def vector_statement(self):

        localctx = XplorMRParser.Vector_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 200, self.RULE_vector_statement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2050
            self.match(XplorMRParser.Vector)
            self.state = 2051
            self.vector_mode()
            self.state = 2052
            self.selection()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Vector_modeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def vector_expression(self):
            return self.getTypedRuleContext(XplorMRParser.Vector_expressionContext,0)


        def R_paren_VE(self):
            return self.getToken(XplorMRParser.R_paren_VE, 0)

        def Do_Lp(self):
            return self.getToken(XplorMRParser.Do_Lp, 0)

        def Identify_Lp(self):
            return self.getToken(XplorMRParser.Identify_Lp, 0)

        def Show(self):
            return self.getToken(XplorMRParser.Show, 0)

        def vector_show_property(self):
            return self.getTypedRuleContext(XplorMRParser.Vector_show_propertyContext,0)


        def getRuleIndex(self):
            return XplorMRParser.RULE_vector_mode

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVector_mode" ):
                listener.enterVector_mode(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVector_mode" ):
                listener.exitVector_mode(self)




    def vector_mode(self):

        localctx = XplorMRParser.Vector_modeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 202, self.RULE_vector_mode)
        self._la = 0 # Token type
        try:
            self.state = 2060
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [XplorMRParser.Do_Lp, XplorMRParser.Identify_Lp]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2054
                _la = self._input.LA(1)
                if not(_la==XplorMRParser.Do_Lp or _la==XplorMRParser.Identify_Lp):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 2055
                self.vector_expression()
                self.state = 2056
                self.match(XplorMRParser.R_paren_VE)
                pass
            elif token in [XplorMRParser.Show]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2058
                self.match(XplorMRParser.Show)
                self.state = 2059
                self.vector_show_property()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Vector_expressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Atom_properties_VE(self):
            return self.getToken(XplorMRParser.Atom_properties_VE, 0)

        def Equ_op_VE(self):
            return self.getToken(XplorMRParser.Equ_op_VE, 0)

        def vector_operation(self):
            return self.getTypedRuleContext(XplorMRParser.Vector_operationContext,0)


        def getRuleIndex(self):
            return XplorMRParser.RULE_vector_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVector_expression" ):
                listener.enterVector_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVector_expression" ):
                listener.exitVector_expression(self)




    def vector_expression(self):

        localctx = XplorMRParser.Vector_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 204, self.RULE_vector_expression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2062
            self.match(XplorMRParser.Atom_properties_VE)
            self.state = 2065
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==XplorMRParser.Equ_op_VE:
                self.state = 2063
                self.match(XplorMRParser.Equ_op_VE)
                self.state = 2064
                self.vector_operation()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Vector_operationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def vflc(self):
            return self.getTypedRuleContext(XplorMRParser.VflcContext,0)


        def vector_operation(self):
            return self.getTypedRuleContext(XplorMRParser.Vector_operationContext,0)


        def Add_op_VE(self):
            return self.getToken(XplorMRParser.Add_op_VE, 0)

        def Sub_op_VE(self):
            return self.getToken(XplorMRParser.Sub_op_VE, 0)

        def Mul_op_VE(self):
            return self.getToken(XplorMRParser.Mul_op_VE, 0)

        def Div_op_VE(self):
            return self.getToken(XplorMRParser.Div_op_VE, 0)

        def Exp_op_VE(self):
            return self.getToken(XplorMRParser.Exp_op_VE, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_vector_operation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVector_operation" ):
                listener.enterVector_operation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVector_operation" ):
                listener.exitVector_operation(self)




    def vector_operation(self):

        localctx = XplorMRParser.Vector_operationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 206, self.RULE_vector_operation)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2067
            self.vflc()
            self.state = 2070
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 230)) & ~0x3f) == 0 and ((1 << (_la - 230)) & ((1 << (XplorMRParser.Add_op_VE - 230)) | (1 << (XplorMRParser.Sub_op_VE - 230)) | (1 << (XplorMRParser.Mul_op_VE - 230)) | (1 << (XplorMRParser.Div_op_VE - 230)) | (1 << (XplorMRParser.Exp_op_VE - 230)))) != 0):
                self.state = 2068
                _la = self._input.LA(1)
                if not(((((_la - 230)) & ~0x3f) == 0 and ((1 << (_la - 230)) & ((1 << (XplorMRParser.Add_op_VE - 230)) | (1 << (XplorMRParser.Sub_op_VE - 230)) | (1 << (XplorMRParser.Mul_op_VE - 230)) | (1 << (XplorMRParser.Div_op_VE - 230)) | (1 << (XplorMRParser.Exp_op_VE - 230)))) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 2069
                self.vector_operation()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VflcContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Atom_properties_VE(self):
            return self.getToken(XplorMRParser.Atom_properties_VE, 0)

        def vector_func_call(self):
            return self.getTypedRuleContext(XplorMRParser.Vector_func_callContext,0)


        def Integer_VE(self):
            return self.getToken(XplorMRParser.Integer_VE, 0)

        def Real_VE(self):
            return self.getToken(XplorMRParser.Real_VE, 0)

        def Simple_name_VE(self):
            return self.getToken(XplorMRParser.Simple_name_VE, 0)

        def Symbol_name_VE(self):
            return self.getToken(XplorMRParser.Symbol_name_VE, 0)

        def Double_quote_string_VE(self):
            return self.getToken(XplorMRParser.Double_quote_string_VE, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_vflc

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVflc" ):
                listener.enterVflc(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVflc" ):
                listener.exitVflc(self)




    def vflc(self):

        localctx = XplorMRParser.VflcContext(self, self._ctx, self.state)
        self.enterRule(localctx, 208, self.RULE_vflc)
        try:
            self.state = 2079
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [XplorMRParser.Atom_properties_VE]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2072
                self.match(XplorMRParser.Atom_properties_VE)
                pass
            elif token in [XplorMRParser.Abs_VE, XplorMRParser.Acos_VE, XplorMRParser.Cos_VE, XplorMRParser.Decode_VE, XplorMRParser.Encode_VE, XplorMRParser.Exp_VE, XplorMRParser.Gauss_VE, XplorMRParser.Heavy_VE, XplorMRParser.Int_VE, XplorMRParser.Log10_VE, XplorMRParser.Log_VE, XplorMRParser.Max_VE, XplorMRParser.Maxw_VE, XplorMRParser.Min_VE, XplorMRParser.Mod_VE, XplorMRParser.Norm_VE, XplorMRParser.Random_VE, XplorMRParser.Sign_VE, XplorMRParser.Sin_VE, XplorMRParser.Sqrt_VE, XplorMRParser.Tan_VE]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2073
                self.vector_func_call()
                pass
            elif token in [XplorMRParser.Integer_VE]:
                self.enterOuterAlt(localctx, 3)
                self.state = 2074
                self.match(XplorMRParser.Integer_VE)
                pass
            elif token in [XplorMRParser.Real_VE]:
                self.enterOuterAlt(localctx, 4)
                self.state = 2075
                self.match(XplorMRParser.Real_VE)
                pass
            elif token in [XplorMRParser.Simple_name_VE]:
                self.enterOuterAlt(localctx, 5)
                self.state = 2076
                self.match(XplorMRParser.Simple_name_VE)
                pass
            elif token in [XplorMRParser.Symbol_name_VE]:
                self.enterOuterAlt(localctx, 6)
                self.state = 2077
                self.match(XplorMRParser.Symbol_name_VE)
                pass
            elif token in [XplorMRParser.Double_quote_string_VE]:
                self.enterOuterAlt(localctx, 7)
                self.state = 2078
                self.match(XplorMRParser.Double_quote_string_VE)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Vector_func_callContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Abs_VE(self):
            return self.getToken(XplorMRParser.Abs_VE, 0)

        def L_paren_VF(self):
            return self.getToken(XplorMRParser.L_paren_VF, 0)

        def vflc(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.VflcContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.VflcContext,i)


        def R_paren_VE(self):
            return self.getToken(XplorMRParser.R_paren_VE, 0)

        def Acos_VE(self):
            return self.getToken(XplorMRParser.Acos_VE, 0)

        def Cos_VE(self):
            return self.getToken(XplorMRParser.Cos_VE, 0)

        def Decode_VE(self):
            return self.getToken(XplorMRParser.Decode_VE, 0)

        def Encode_VE(self):
            return self.getToken(XplorMRParser.Encode_VE, 0)

        def Exp_VE(self):
            return self.getToken(XplorMRParser.Exp_VE, 0)

        def Gauss_VE(self):
            return self.getToken(XplorMRParser.Gauss_VE, 0)

        def Heavy_VE(self):
            return self.getToken(XplorMRParser.Heavy_VE, 0)

        def Int_VE(self):
            return self.getToken(XplorMRParser.Int_VE, 0)

        def Log10_VE(self):
            return self.getToken(XplorMRParser.Log10_VE, 0)

        def Log_VE(self):
            return self.getToken(XplorMRParser.Log_VE, 0)

        def Max_VE(self):
            return self.getToken(XplorMRParser.Max_VE, 0)

        def Comma_VE(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Comma_VE)
            else:
                return self.getToken(XplorMRParser.Comma_VE, i)

        def Maxw_VE(self):
            return self.getToken(XplorMRParser.Maxw_VE, 0)

        def Min_VE(self):
            return self.getToken(XplorMRParser.Min_VE, 0)

        def Mod_VE(self):
            return self.getToken(XplorMRParser.Mod_VE, 0)

        def Norm_VE(self):
            return self.getToken(XplorMRParser.Norm_VE, 0)

        def Random_VE(self):
            return self.getToken(XplorMRParser.Random_VE, 0)

        def Sign_VE(self):
            return self.getToken(XplorMRParser.Sign_VE, 0)

        def Sin_VE(self):
            return self.getToken(XplorMRParser.Sin_VE, 0)

        def Sqrt_VE(self):
            return self.getToken(XplorMRParser.Sqrt_VE, 0)

        def Tan_VE(self):
            return self.getToken(XplorMRParser.Tan_VE, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_vector_func_call

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVector_func_call" ):
                listener.enterVector_func_call(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVector_func_call" ):
                listener.exitVector_func_call(self)




    def vector_func_call(self):

        localctx = XplorMRParser.Vector_func_callContext(self, self._ctx, self.state)
        self.enterRule(localctx, 210, self.RULE_vector_func_call)
        self._la = 0 # Token type
        try:
            self.state = 2200
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [XplorMRParser.Abs_VE]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2081
                self.match(XplorMRParser.Abs_VE)
                self.state = 2082
                self.match(XplorMRParser.L_paren_VF)
                self.state = 2083
                self.vflc()
                self.state = 2084
                self.match(XplorMRParser.R_paren_VE)
                pass
            elif token in [XplorMRParser.Acos_VE]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2086
                self.match(XplorMRParser.Acos_VE)
                self.state = 2087
                self.match(XplorMRParser.L_paren_VF)
                self.state = 2088
                self.vflc()
                self.state = 2089
                self.match(XplorMRParser.R_paren_VE)
                pass
            elif token in [XplorMRParser.Cos_VE]:
                self.enterOuterAlt(localctx, 3)
                self.state = 2091
                self.match(XplorMRParser.Cos_VE)
                self.state = 2092
                self.match(XplorMRParser.L_paren_VF)
                self.state = 2093
                self.vflc()
                self.state = 2094
                self.match(XplorMRParser.R_paren_VE)
                pass
            elif token in [XplorMRParser.Decode_VE]:
                self.enterOuterAlt(localctx, 4)
                self.state = 2096
                self.match(XplorMRParser.Decode_VE)
                self.state = 2097
                self.match(XplorMRParser.L_paren_VF)
                self.state = 2098
                self.vflc()
                self.state = 2099
                self.match(XplorMRParser.R_paren_VE)
                pass
            elif token in [XplorMRParser.Encode_VE]:
                self.enterOuterAlt(localctx, 5)
                self.state = 2101
                self.match(XplorMRParser.Encode_VE)
                self.state = 2102
                self.match(XplorMRParser.L_paren_VF)
                self.state = 2103
                self.vflc()
                self.state = 2104
                self.match(XplorMRParser.R_paren_VE)
                pass
            elif token in [XplorMRParser.Exp_VE]:
                self.enterOuterAlt(localctx, 6)
                self.state = 2106
                self.match(XplorMRParser.Exp_VE)
                self.state = 2107
                self.match(XplorMRParser.L_paren_VF)
                self.state = 2108
                self.vflc()
                self.state = 2109
                self.match(XplorMRParser.R_paren_VE)
                pass
            elif token in [XplorMRParser.Gauss_VE]:
                self.enterOuterAlt(localctx, 7)
                self.state = 2111
                self.match(XplorMRParser.Gauss_VE)
                self.state = 2112
                self.match(XplorMRParser.L_paren_VF)
                self.state = 2113
                self.vflc()
                self.state = 2114
                self.match(XplorMRParser.R_paren_VE)
                pass
            elif token in [XplorMRParser.Heavy_VE]:
                self.enterOuterAlt(localctx, 8)
                self.state = 2116
                self.match(XplorMRParser.Heavy_VE)
                self.state = 2117
                self.match(XplorMRParser.L_paren_VF)
                self.state = 2118
                self.vflc()
                self.state = 2119
                self.match(XplorMRParser.R_paren_VE)
                pass
            elif token in [XplorMRParser.Int_VE]:
                self.enterOuterAlt(localctx, 9)
                self.state = 2121
                self.match(XplorMRParser.Int_VE)
                self.state = 2122
                self.match(XplorMRParser.L_paren_VF)
                self.state = 2123
                self.vflc()
                self.state = 2124
                self.match(XplorMRParser.R_paren_VE)
                pass
            elif token in [XplorMRParser.Log10_VE]:
                self.enterOuterAlt(localctx, 10)
                self.state = 2126
                self.match(XplorMRParser.Log10_VE)
                self.state = 2127
                self.match(XplorMRParser.L_paren_VF)
                self.state = 2128
                self.vflc()
                self.state = 2129
                self.match(XplorMRParser.R_paren_VE)
                pass
            elif token in [XplorMRParser.Log_VE]:
                self.enterOuterAlt(localctx, 11)
                self.state = 2131
                self.match(XplorMRParser.Log_VE)
                self.state = 2132
                self.match(XplorMRParser.L_paren_VF)
                self.state = 2133
                self.vflc()
                self.state = 2134
                self.match(XplorMRParser.R_paren_VE)
                pass
            elif token in [XplorMRParser.Max_VE]:
                self.enterOuterAlt(localctx, 12)
                self.state = 2136
                self.match(XplorMRParser.Max_VE)
                self.state = 2137
                self.match(XplorMRParser.L_paren_VF)
                self.state = 2138
                self.vflc()
                self.state = 2143
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==XplorMRParser.Comma_VE:
                    self.state = 2139
                    self.match(XplorMRParser.Comma_VE)
                    self.state = 2140
                    self.vflc()
                    self.state = 2145
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 2146
                self.match(XplorMRParser.R_paren_VE)
                pass
            elif token in [XplorMRParser.Maxw_VE]:
                self.enterOuterAlt(localctx, 13)
                self.state = 2148
                self.match(XplorMRParser.Maxw_VE)
                self.state = 2149
                self.match(XplorMRParser.L_paren_VF)
                self.state = 2150
                self.vflc()
                self.state = 2151
                self.match(XplorMRParser.R_paren_VE)
                pass
            elif token in [XplorMRParser.Min_VE]:
                self.enterOuterAlt(localctx, 14)
                self.state = 2153
                self.match(XplorMRParser.Min_VE)
                self.state = 2154
                self.match(XplorMRParser.L_paren_VF)
                self.state = 2155
                self.vflc()
                self.state = 2160
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==XplorMRParser.Comma_VE:
                    self.state = 2156
                    self.match(XplorMRParser.Comma_VE)
                    self.state = 2157
                    self.vflc()
                    self.state = 2162
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 2163
                self.match(XplorMRParser.R_paren_VE)
                pass
            elif token in [XplorMRParser.Mod_VE]:
                self.enterOuterAlt(localctx, 15)
                self.state = 2165
                self.match(XplorMRParser.Mod_VE)
                self.state = 2166
                self.match(XplorMRParser.L_paren_VF)
                self.state = 2167
                self.vflc()
                self.state = 2168
                self.match(XplorMRParser.Comma_VE)
                self.state = 2169
                self.vflc()
                self.state = 2170
                self.match(XplorMRParser.R_paren_VE)
                pass
            elif token in [XplorMRParser.Norm_VE]:
                self.enterOuterAlt(localctx, 16)
                self.state = 2172
                self.match(XplorMRParser.Norm_VE)
                self.state = 2173
                self.match(XplorMRParser.L_paren_VF)
                self.state = 2174
                self.vflc()
                self.state = 2175
                self.match(XplorMRParser.R_paren_VE)
                pass
            elif token in [XplorMRParser.Random_VE]:
                self.enterOuterAlt(localctx, 17)
                self.state = 2177
                self.match(XplorMRParser.Random_VE)
                self.state = 2178
                self.match(XplorMRParser.L_paren_VF)
                self.state = 2179
                self.match(XplorMRParser.R_paren_VE)
                pass
            elif token in [XplorMRParser.Sign_VE]:
                self.enterOuterAlt(localctx, 18)
                self.state = 2180
                self.match(XplorMRParser.Sign_VE)
                self.state = 2181
                self.match(XplorMRParser.L_paren_VF)
                self.state = 2182
                self.vflc()
                self.state = 2183
                self.match(XplorMRParser.R_paren_VE)
                pass
            elif token in [XplorMRParser.Sin_VE]:
                self.enterOuterAlt(localctx, 19)
                self.state = 2185
                self.match(XplorMRParser.Sin_VE)
                self.state = 2186
                self.match(XplorMRParser.L_paren_VF)
                self.state = 2187
                self.vflc()
                self.state = 2188
                self.match(XplorMRParser.R_paren_VE)
                pass
            elif token in [XplorMRParser.Sqrt_VE]:
                self.enterOuterAlt(localctx, 20)
                self.state = 2190
                self.match(XplorMRParser.Sqrt_VE)
                self.state = 2191
                self.match(XplorMRParser.L_paren_VF)
                self.state = 2192
                self.vflc()
                self.state = 2193
                self.match(XplorMRParser.R_paren_VE)
                pass
            elif token in [XplorMRParser.Tan_VE]:
                self.enterOuterAlt(localctx, 21)
                self.state = 2195
                self.match(XplorMRParser.Tan_VE)
                self.state = 2196
                self.match(XplorMRParser.L_paren_VF)
                self.state = 2197
                self.vflc()
                self.state = 2198
                self.match(XplorMRParser.R_paren_VE)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Vector_show_propertyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def L_paren_VS(self):
            return self.getToken(XplorMRParser.L_paren_VS, 0)

        def Atom_properties_VS(self):
            return self.getToken(XplorMRParser.Atom_properties_VS, 0)

        def R_paren_VS(self):
            return self.getToken(XplorMRParser.R_paren_VS, 0)

        def Average_VS(self):
            return self.getToken(XplorMRParser.Average_VS, 0)

        def Element_VS(self):
            return self.getToken(XplorMRParser.Element_VS, 0)

        def Max_VS(self):
            return self.getToken(XplorMRParser.Max_VS, 0)

        def Min_VS(self):
            return self.getToken(XplorMRParser.Min_VS, 0)

        def Norm_VS(self):
            return self.getToken(XplorMRParser.Norm_VS, 0)

        def Rms_VS(self):
            return self.getToken(XplorMRParser.Rms_VS, 0)

        def Sum_VS(self):
            return self.getToken(XplorMRParser.Sum_VS, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_vector_show_property

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVector_show_property" ):
                listener.enterVector_show_property(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVector_show_property" ):
                listener.exitVector_show_property(self)




    def vector_show_property(self):

        localctx = XplorMRParser.Vector_show_propertyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 212, self.RULE_vector_show_property)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2202
            _la = self._input.LA(1)
            if not(((((_la - 269)) & ~0x3f) == 0 and ((1 << (_la - 269)) & ((1 << (XplorMRParser.Average_VS - 269)) | (1 << (XplorMRParser.Element_VS - 269)) | (1 << (XplorMRParser.Max_VS - 269)) | (1 << (XplorMRParser.Min_VS - 269)) | (1 << (XplorMRParser.Norm_VS - 269)) | (1 << (XplorMRParser.Rms_VS - 269)) | (1 << (XplorMRParser.Sum_VS - 269)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 2203
            self.match(XplorMRParser.L_paren_VS)
            self.state = 2204
            self.match(XplorMRParser.Atom_properties_VS)
            self.state = 2205
            self.match(XplorMRParser.R_paren_VS)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Evaluate_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Evaluate_Lp(self):
            return self.getToken(XplorMRParser.Evaluate_Lp, 0)

        def Symbol_name_VE(self):
            return self.getToken(XplorMRParser.Symbol_name_VE, 0)

        def Equ_op_VE(self):
            return self.getToken(XplorMRParser.Equ_op_VE, 0)

        def evaluate_operation(self):
            return self.getTypedRuleContext(XplorMRParser.Evaluate_operationContext,0)


        def R_paren_VE(self):
            return self.getToken(XplorMRParser.R_paren_VE, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_evaluate_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEvaluate_statement" ):
                listener.enterEvaluate_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEvaluate_statement" ):
                listener.exitEvaluate_statement(self)




    def evaluate_statement(self):

        localctx = XplorMRParser.Evaluate_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 214, self.RULE_evaluate_statement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2207
            self.match(XplorMRParser.Evaluate_Lp)
            self.state = 2208
            self.match(XplorMRParser.Symbol_name_VE)
            self.state = 2209
            self.match(XplorMRParser.Equ_op_VE)
            self.state = 2210
            self.evaluate_operation()
            self.state = 2211
            self.match(XplorMRParser.R_paren_VE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Evaluate_operationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def vflc(self):
            return self.getTypedRuleContext(XplorMRParser.VflcContext,0)


        def evaluate_operation(self):
            return self.getTypedRuleContext(XplorMRParser.Evaluate_operationContext,0)


        def Add_op_VE(self):
            return self.getToken(XplorMRParser.Add_op_VE, 0)

        def Sub_op_VE(self):
            return self.getToken(XplorMRParser.Sub_op_VE, 0)

        def Mul_op_VE(self):
            return self.getToken(XplorMRParser.Mul_op_VE, 0)

        def Div_op_VE(self):
            return self.getToken(XplorMRParser.Div_op_VE, 0)

        def Exp_op_VE(self):
            return self.getToken(XplorMRParser.Exp_op_VE, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_evaluate_operation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEvaluate_operation" ):
                listener.enterEvaluate_operation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEvaluate_operation" ):
                listener.exitEvaluate_operation(self)




    def evaluate_operation(self):

        localctx = XplorMRParser.Evaluate_operationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 216, self.RULE_evaluate_operation)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2213
            self.vflc()
            self.state = 2216
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 230)) & ~0x3f) == 0 and ((1 << (_la - 230)) & ((1 << (XplorMRParser.Add_op_VE - 230)) | (1 << (XplorMRParser.Sub_op_VE - 230)) | (1 << (XplorMRParser.Mul_op_VE - 230)) | (1 << (XplorMRParser.Div_op_VE - 230)) | (1 << (XplorMRParser.Exp_op_VE - 230)))) != 0):
                self.state = 2214
                _la = self._input.LA(1)
                if not(((((_la - 230)) & ~0x3f) == 0 and ((1 << (_la - 230)) & ((1 << (XplorMRParser.Add_op_VE - 230)) | (1 << (XplorMRParser.Sub_op_VE - 230)) | (1 << (XplorMRParser.Mul_op_VE - 230)) | (1 << (XplorMRParser.Div_op_VE - 230)) | (1 << (XplorMRParser.Exp_op_VE - 230)))) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 2215
                self.evaluate_operation()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Dihedral_assign_loopContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def For(self):
            return self.getToken(XplorMRParser.For, 0)

        def Symbol_name_CF(self):
            return self.getToken(XplorMRParser.Symbol_name_CF, 0)

        def In_CF(self):
            return self.getToken(XplorMRParser.In_CF, 0)

        def L_paren_CF(self):
            return self.getToken(XplorMRParser.L_paren_CF, 0)

        def R_paren_CF(self):
            return self.getToken(XplorMRParser.R_paren_CF, 0)

        def Loop(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Loop)
            else:
                return self.getToken(XplorMRParser.Loop, i)

        def Simple_name_LL(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Simple_name_LL)
            else:
                return self.getToken(XplorMRParser.Simple_name_LL, i)

        def End(self):
            return self.getToken(XplorMRParser.End, 0)

        def evaluate_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Evaluate_statementContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Evaluate_statementContext,i)


        def dihedral_assign(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Dihedral_assignContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Dihedral_assignContext,i)


        def Integer_CF(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Integer_CF)
            else:
                return self.getToken(XplorMRParser.Integer_CF, i)

        def Real_CF(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Real_CF)
            else:
                return self.getToken(XplorMRParser.Real_CF, i)

        def Simple_name_CF(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Simple_name_CF)
            else:
                return self.getToken(XplorMRParser.Simple_name_CF, i)

        def getRuleIndex(self):
            return XplorMRParser.RULE_dihedral_assign_loop

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDihedral_assign_loop" ):
                listener.enterDihedral_assign_loop(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDihedral_assign_loop" ):
                listener.exitDihedral_assign_loop(self)




    def dihedral_assign_loop(self):

        localctx = XplorMRParser.Dihedral_assign_loopContext(self, self._ctx, self.state)
        self.enterRule(localctx, 218, self.RULE_dihedral_assign_loop)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2218
            self.match(XplorMRParser.For)
            self.state = 2219
            self.match(XplorMRParser.Symbol_name_CF)
            self.state = 2220
            self.match(XplorMRParser.In_CF)
            self.state = 2221
            self.match(XplorMRParser.L_paren_CF)
            self.state = 2240
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,208,self._ctx)
            if la_ == 1:
                self.state = 2225
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==XplorMRParser.Integer_CF:
                    self.state = 2222
                    self.match(XplorMRParser.Integer_CF)
                    self.state = 2227
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 2:
                self.state = 2231
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==XplorMRParser.Real_CF:
                    self.state = 2228
                    self.match(XplorMRParser.Real_CF)
                    self.state = 2233
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 3:
                self.state = 2237
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==XplorMRParser.Simple_name_CF:
                    self.state = 2234
                    self.match(XplorMRParser.Simple_name_CF)
                    self.state = 2239
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass


            self.state = 2242
            self.match(XplorMRParser.R_paren_CF)
            self.state = 2243
            self.match(XplorMRParser.Loop)
            self.state = 2244
            self.match(XplorMRParser.Simple_name_LL)
            self.state = 2249
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==XplorMRParser.Assign or _la==XplorMRParser.Evaluate_Lp:
                self.state = 2247
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [XplorMRParser.Evaluate_Lp]:
                    self.state = 2245
                    self.evaluate_statement()
                    pass
                elif token in [XplorMRParser.Assign]:
                    self.state = 2246
                    self.dihedral_assign()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 2251
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2252
            self.match(XplorMRParser.End)
            self.state = 2253
            self.match(XplorMRParser.Loop)
            self.state = 2254
            self.match(XplorMRParser.Simple_name_LL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx



    def sempred(self, localctx:RuleContext, ruleIndex:int, predIndex:int):
        if self._predicates == None:
            self._predicates = dict()
        self._predicates[94] = self.factor_sempred
        pred = self._predicates.get(ruleIndex, None)
        if pred is None:
            raise Exception("No predicate with index:" + str(ruleIndex))
        else:
            return pred(localctx, predIndex)

    def factor_sempred(self, localctx:FactorContext, predIndex:int):
            if predIndex == 0:
                return self.precpred(self._ctx, 32)
         

            if predIndex == 1:
                return self.precpred(self._ctx, 14)
         




