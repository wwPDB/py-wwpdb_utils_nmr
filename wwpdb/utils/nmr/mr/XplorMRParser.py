# Generated from XplorMRParser.g4 by ANTLR 4.10.1
# encoding: utf-8
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
	from typing import TextIO
else:
	from typing.io import TextIO

def serializedATN():
    return [
        4,1,302,3048,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,
        7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,
        13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,
        20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,
        26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,
        33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,
        39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,
        46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,52,7,
        52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,2,57,7,57,2,58,7,58,2,
        59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,2,64,7,64,2,65,7,
        65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,2,71,7,71,2,
        72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,7,77,2,78,7,
        78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,2,84,7,84,2,
        85,7,85,2,86,7,86,2,87,7,87,2,88,7,88,2,89,7,89,2,90,7,90,2,91,7,
        91,2,92,7,92,2,93,7,93,2,94,7,94,2,95,7,95,2,96,7,96,2,97,7,97,2,
        98,7,98,2,99,7,99,2,100,7,100,2,101,7,101,2,102,7,102,2,103,7,103,
        2,104,7,104,2,105,7,105,2,106,7,106,2,107,7,107,2,108,7,108,2,109,
        7,109,2,110,7,110,2,111,7,111,2,112,7,112,2,113,7,113,2,114,7,114,
        2,115,7,115,2,116,7,116,2,117,7,117,2,118,7,118,2,119,7,119,2,120,
        7,120,2,121,7,121,2,122,7,122,2,123,7,123,2,124,7,124,2,125,7,125,
        1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,
        1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,
        1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,
        1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,5,0,309,8,0,10,0,12,0,312,9,0,1,
        0,1,0,1,1,1,1,5,1,318,8,1,10,1,12,1,321,9,1,1,1,1,1,1,2,3,2,326,
        8,2,1,2,1,2,5,2,330,8,2,10,2,12,2,333,9,2,1,2,1,2,1,3,1,3,5,3,339,
        8,3,10,3,12,3,342,9,3,1,3,1,3,1,3,5,3,347,8,3,10,3,12,3,350,9,3,
        1,3,1,3,1,3,5,3,355,8,3,10,3,12,3,358,9,3,1,3,1,3,1,3,5,3,363,8,
        3,10,3,12,3,366,9,3,1,3,1,3,1,3,5,3,371,8,3,10,3,12,3,374,9,3,1,
        3,3,3,377,8,3,1,4,3,4,380,8,4,1,4,1,4,5,4,384,8,4,10,4,12,4,387,
        9,4,1,4,1,4,1,5,3,5,392,8,5,1,5,1,5,5,5,396,8,5,10,5,12,5,399,9,
        5,1,5,1,5,1,6,1,6,5,6,405,8,6,10,6,12,6,408,9,6,1,6,1,6,1,7,1,7,
        5,7,414,8,7,10,7,12,7,417,9,7,1,7,1,7,1,8,1,8,5,8,423,8,8,10,8,12,
        8,426,9,8,1,8,1,8,1,9,1,9,5,9,432,8,9,10,9,12,9,435,9,9,1,9,1,9,
        1,10,1,10,5,10,441,8,10,10,10,12,10,444,9,10,1,10,1,10,1,11,1,11,
        5,11,450,8,11,10,11,12,11,453,9,11,1,11,1,11,1,12,1,12,5,12,459,
        8,12,10,12,12,12,462,9,12,1,12,1,12,1,13,1,13,5,13,468,8,13,10,13,
        12,13,471,9,13,1,13,1,13,1,14,1,14,5,14,477,8,14,10,14,12,14,480,
        9,14,1,14,1,14,1,15,1,15,5,15,486,8,15,10,15,12,15,489,9,15,1,15,
        1,15,1,16,1,16,5,16,495,8,16,10,16,12,16,498,9,16,1,16,1,16,1,17,
        1,17,5,17,504,8,17,10,17,12,17,507,9,17,1,17,1,17,1,18,1,18,5,18,
        513,8,18,10,18,12,18,516,9,18,1,18,1,18,1,19,1,19,5,19,522,8,19,
        10,19,12,19,525,9,19,1,19,1,19,1,20,1,20,5,20,531,8,20,10,20,12,
        20,534,9,20,1,20,1,20,1,21,1,21,5,21,540,8,21,10,21,12,21,543,9,
        21,1,21,1,21,1,22,1,22,5,22,549,8,22,10,22,12,22,552,9,22,1,22,1,
        22,1,23,1,23,5,23,558,8,23,10,23,12,23,561,9,23,1,23,1,23,1,24,1,
        24,5,24,567,8,24,10,24,12,24,570,9,24,1,24,1,24,1,25,1,25,1,25,1,
        25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,3,25,587,8,25,1,
        25,1,25,1,25,3,25,592,8,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,
        25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,3,25,609,8,25,1,25,1,25,1,
        25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,3,25,622,8,25,1,25,1,
        25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,
        25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,3,25,646,8,25,1,25,3,25,649,
        8,25,1,26,1,26,1,26,1,26,1,26,3,26,656,8,26,1,26,3,26,659,8,26,1,
        26,5,26,662,8,26,10,26,12,26,665,9,26,1,26,1,26,3,26,669,8,26,1,
        26,1,26,1,26,3,26,674,8,26,1,26,3,26,677,8,26,1,26,3,26,680,8,26,
        5,26,682,8,26,10,26,12,26,685,9,26,1,27,1,27,3,27,689,8,27,1,27,
        1,27,1,27,3,27,694,8,27,1,27,1,27,1,27,1,27,1,27,3,27,701,8,27,1,
        28,1,28,3,28,705,8,28,1,28,1,28,1,28,3,28,710,8,28,1,28,1,28,1,28,
        3,28,715,8,28,1,28,1,28,1,28,3,28,720,8,28,1,28,1,28,1,28,3,28,725,
        8,28,1,28,1,28,1,28,3,28,730,8,28,1,28,1,28,1,28,3,28,735,8,28,1,
        28,3,28,738,8,28,1,29,1,29,1,29,1,29,1,29,3,29,745,8,29,1,29,1,29,
        1,29,1,29,3,29,751,8,29,1,29,1,29,3,29,755,8,29,1,30,1,30,1,30,1,
        30,1,30,1,30,1,30,1,30,1,30,1,30,1,31,1,31,1,31,1,31,3,31,771,8,
        31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,3,31,781,8,31,1,31,1,
        31,1,31,3,31,786,8,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,3,31,795,
        8,31,1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,3,32,806,8,32,
        1,32,3,32,809,8,32,1,33,1,33,1,33,3,33,814,8,33,1,33,1,33,1,33,1,
        33,1,33,3,33,821,8,33,1,33,1,33,1,33,1,33,1,33,1,33,1,33,1,33,1,
        33,1,33,1,33,1,33,3,33,835,8,33,1,33,1,33,1,33,3,33,840,8,33,1,33,
        1,33,1,33,1,33,1,33,1,33,1,33,3,33,849,8,33,1,34,1,34,1,34,1,34,
        1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,3,34,866,
        8,34,1,35,1,35,1,35,3,35,871,8,35,1,35,1,35,1,35,3,35,876,8,35,1,
        35,1,35,1,35,3,35,881,8,35,1,35,1,35,1,35,1,35,1,35,3,35,888,8,35,
        1,35,1,35,1,35,3,35,893,8,35,1,35,1,35,1,35,1,35,1,35,3,35,900,8,
        35,1,36,1,36,1,36,1,36,1,36,1,36,1,36,1,36,1,36,1,36,3,36,912,8,
        36,1,37,1,37,1,37,3,37,917,8,37,1,37,1,37,1,37,1,37,1,37,3,37,924,
        8,37,1,37,1,37,1,37,1,37,1,37,1,37,1,37,3,37,933,8,37,1,38,1,38,
        1,38,1,38,1,38,3,38,940,8,38,1,39,1,39,1,39,3,39,945,8,39,1,39,1,
        39,1,39,1,39,1,39,1,39,1,39,1,39,1,39,3,39,956,8,39,1,39,1,39,1,
        39,3,39,961,8,39,1,39,1,39,1,39,1,39,1,39,1,39,1,39,1,39,1,39,3,
        39,972,8,39,1,40,1,40,1,40,1,40,1,40,1,40,1,40,3,40,981,8,40,1,41,
        1,41,1,41,5,41,986,8,41,10,41,12,41,989,9,41,1,41,1,41,1,41,3,41,
        994,8,41,1,42,1,42,3,42,998,8,42,1,42,1,42,1,42,3,42,1003,8,42,1,
        42,3,42,1006,8,42,1,43,1,43,1,43,3,43,1011,8,43,1,43,1,43,1,43,3,
        43,1016,8,43,1,43,1,43,1,43,3,43,1021,8,43,1,43,1,43,3,43,1025,8,
        43,1,43,1,43,1,43,1,43,3,43,1031,8,43,1,43,1,43,3,43,1035,8,43,1,
        43,1,43,3,43,1039,8,43,1,43,3,43,1042,8,43,3,43,1044,8,43,1,43,1,
        43,3,43,1048,8,43,1,44,1,44,1,44,1,44,1,44,1,44,1,45,1,45,1,45,1,
        45,3,45,1060,8,45,1,45,1,45,1,45,1,45,1,45,1,45,3,45,1068,8,45,1,
        45,1,45,1,45,3,45,1073,8,45,1,45,1,45,1,45,1,45,1,45,1,45,1,45,3,
        45,1082,8,45,1,45,3,45,1085,8,45,1,45,1,45,1,45,1,45,1,45,1,45,3,
        45,1093,8,45,1,46,1,46,1,46,1,46,1,47,1,47,1,47,1,47,3,47,1103,8,
        47,1,47,1,47,1,47,1,47,1,47,1,47,1,47,1,47,1,47,3,47,1114,8,47,1,
        47,1,47,1,47,1,47,1,47,1,47,3,47,1122,8,47,1,47,1,47,3,47,1126,8,
        47,1,47,1,47,1,47,3,47,1131,8,47,1,47,1,47,1,47,1,47,1,47,1,47,1,
        47,1,47,1,47,3,47,1142,8,47,1,47,3,47,1145,8,47,1,47,3,47,1148,8,
        47,1,48,1,48,1,48,1,48,1,48,1,48,1,48,1,48,1,48,1,48,3,48,1160,8,
        48,1,48,1,48,1,48,1,48,1,48,3,48,1167,8,48,1,49,1,49,1,49,3,49,1172,
        8,49,1,49,1,49,1,49,1,49,1,49,1,49,1,49,1,49,1,49,1,49,3,49,1184,
        8,49,1,49,1,49,1,49,3,49,1189,8,49,1,49,1,49,1,49,1,49,1,49,1,49,
        1,49,1,49,1,49,1,49,1,49,1,49,1,49,3,49,1204,8,49,1,50,1,50,1,50,
        1,50,1,50,1,50,1,50,1,50,1,50,1,51,1,51,1,51,1,51,1,51,1,52,1,52,
        1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,3,52,1231,8,52,1,52,
        1,52,1,52,1,52,1,52,1,52,1,52,1,52,3,52,1241,8,52,1,52,1,52,1,52,
        1,52,1,52,1,52,1,52,1,52,3,52,1251,8,52,1,52,3,52,1254,8,52,1,52,
        1,52,1,52,3,52,1259,8,52,1,53,1,53,1,53,3,53,1264,8,53,1,53,1,53,
        3,53,1268,8,53,1,54,1,54,1,54,1,54,1,55,1,55,1,55,1,55,1,55,1,55,
        3,55,1280,8,55,1,55,1,55,1,56,1,56,1,56,1,57,1,57,1,57,1,58,1,58,
        1,58,1,59,1,59,1,59,1,60,1,60,1,60,1,60,1,60,1,60,1,60,1,60,3,60,
        1304,8,60,1,61,1,61,1,61,1,62,1,62,1,62,3,62,1312,8,62,1,62,1,62,
        1,62,1,62,1,62,3,62,1319,8,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,
        1,62,1,62,3,62,1330,8,62,1,62,1,62,1,62,1,62,3,62,1336,8,62,1,62,
        1,62,1,62,1,62,3,62,1342,8,62,1,62,1,62,3,62,1346,8,62,1,62,1,62,
        1,62,1,62,1,62,1,62,1,62,1,62,1,62,3,62,1357,8,62,1,62,1,62,1,62,
        1,62,3,62,1363,8,62,1,62,1,62,1,62,1,62,3,62,1369,8,62,1,62,1,62,
        1,62,1,62,1,62,1,62,3,62,1377,8,62,1,62,3,62,1380,8,62,1,62,1,62,
        1,62,1,62,1,62,1,62,1,62,1,62,3,62,1390,8,62,1,62,1,62,1,62,1,62,
        3,62,1396,8,62,1,62,1,62,1,62,1,62,3,62,1402,8,62,1,62,1,62,1,62,
        3,62,1407,8,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,3,62,1416,8,62,
        1,62,3,62,1419,8,62,1,62,3,62,1422,8,62,1,62,1,62,3,62,1426,8,62,
        1,63,1,63,1,63,1,63,1,63,1,63,1,63,1,63,1,63,1,63,3,63,1438,8,63,
        1,63,1,63,1,63,1,63,1,63,3,63,1445,8,63,1,63,1,63,1,63,1,63,1,63,
        3,63,1452,8,63,1,64,1,64,1,64,1,64,3,64,1458,8,64,1,64,1,64,1,64,
        3,64,1463,8,64,1,65,1,65,1,65,1,65,1,65,1,66,1,66,1,66,3,66,1473,
        8,66,1,66,1,66,1,66,1,66,1,66,1,66,1,66,1,66,1,66,1,66,3,66,1485,
        8,66,1,66,1,66,1,66,3,66,1490,8,66,1,66,1,66,1,66,1,66,1,66,1,66,
        1,66,1,66,1,66,3,66,1501,8,66,1,67,1,67,1,67,1,67,1,67,1,67,1,67,
        1,67,1,67,3,67,1512,8,67,1,68,1,68,1,68,3,68,1517,8,68,1,68,1,68,
        1,68,1,68,1,68,1,68,1,68,3,68,1526,8,68,1,68,1,68,1,68,1,68,1,68,
        1,68,1,68,1,68,1,68,1,68,1,68,1,68,1,68,1,68,1,68,1,68,1,68,1,68,
        1,68,1,68,1,68,1,68,1,68,1,68,3,68,1552,8,68,1,68,1,68,1,68,1,68,
        1,68,1,68,1,68,3,68,1561,8,68,1,68,3,68,1564,8,68,1,68,1,68,1,68,
        1,68,1,68,1,68,1,68,1,68,1,68,1,68,1,68,1,68,1,68,1,68,1,68,1,68,
        1,68,3,68,1583,8,68,1,69,1,69,1,69,1,69,1,69,1,69,1,70,1,70,1,70,
        1,70,3,70,1595,8,70,1,70,1,70,1,70,3,70,1600,8,70,1,70,1,70,1,70,
        1,70,1,70,1,70,1,70,1,70,1,70,1,70,1,70,1,70,1,70,1,70,1,70,3,70,
        1617,8,70,1,70,1,70,1,70,3,70,1622,8,70,1,70,1,70,1,70,1,70,1,70,
        1,70,1,70,3,70,1631,8,70,1,71,1,71,1,71,1,71,1,71,1,71,1,71,1,71,
        1,71,1,71,3,71,1643,8,71,1,71,3,71,1646,8,71,1,72,1,72,1,72,3,72,
        1651,8,72,1,72,1,72,1,72,3,72,1656,8,72,1,72,1,72,1,72,1,72,1,72,
        1,72,1,72,1,72,1,72,1,72,1,72,1,72,1,72,1,72,3,72,1672,8,72,1,72,
        1,72,1,72,3,72,1677,8,72,1,72,1,72,1,72,1,72,1,72,1,72,1,72,3,72,
        1686,8,72,1,73,1,73,1,73,3,73,1691,8,73,1,73,1,73,1,73,1,73,1,73,
        1,73,1,73,1,73,1,73,1,73,1,73,1,73,3,73,1705,8,73,1,73,1,73,1,73,
        3,73,1710,8,73,1,73,1,73,1,73,1,73,1,73,1,73,1,73,3,73,1719,8,73,
        1,74,1,74,1,74,1,74,1,74,1,74,1,74,1,74,1,74,1,74,1,74,1,74,1,75,
        1,75,1,75,3,75,1736,8,75,1,75,1,75,1,75,1,75,1,75,1,75,1,75,1,75,
        1,75,1,75,1,75,3,75,1749,8,75,1,75,1,75,1,75,3,75,1754,8,75,1,75,
        1,75,1,75,1,75,1,75,1,75,1,75,1,75,1,75,3,75,1765,8,75,1,75,3,75,
        1768,8,75,1,75,1,75,1,75,1,75,1,75,1,75,3,75,1776,8,75,1,76,1,76,
        1,76,1,76,1,76,1,76,1,76,1,76,1,76,1,76,1,76,1,76,1,76,3,76,1791,
        8,76,1,77,1,77,1,77,1,77,3,77,1797,8,77,1,77,1,77,1,77,3,77,1802,
        8,77,1,77,1,77,1,77,1,77,3,77,1808,8,77,1,77,1,77,1,77,3,77,1813,
        8,77,1,77,1,77,1,77,1,77,3,77,1819,8,77,1,77,1,77,1,77,1,77,3,77,
        1825,8,77,1,77,1,77,1,77,1,77,3,77,1831,8,77,1,77,1,77,1,77,1,77,
        1,77,1,77,1,77,1,77,1,77,1,77,3,77,1843,8,77,1,77,3,77,1846,8,77,
        1,77,1,77,3,77,1850,8,77,1,78,1,78,1,78,1,78,1,78,3,78,1857,8,78,
        1,79,1,79,1,79,1,79,3,79,1863,8,79,1,79,1,79,1,79,1,79,1,79,1,79,
        1,79,1,79,1,79,3,79,1874,8,79,1,79,1,79,1,79,3,79,1879,8,79,1,79,
        1,79,1,79,1,79,1,79,1,79,1,79,3,79,1888,8,79,1,79,3,79,1891,8,79,
        1,79,1,79,1,79,1,79,1,79,1,79,1,79,1,79,1,79,1,79,1,79,1,79,1,79,
        1,79,1,79,3,79,1908,8,79,1,80,1,80,1,80,1,80,1,80,1,80,1,80,1,80,
        3,80,1918,8,80,1,80,3,80,1921,8,80,1,81,1,81,1,81,3,81,1926,8,81,
        1,81,1,81,1,81,1,81,1,81,1,81,1,81,1,81,1,81,3,81,1937,8,81,1,81,
        1,81,1,81,3,81,1942,8,81,1,81,1,81,1,81,1,81,1,81,1,81,1,81,1,81,
        1,81,1,81,1,81,1,81,1,81,1,81,3,81,1958,8,81,1,82,1,82,1,82,1,82,
        1,82,1,82,1,82,1,82,1,82,3,82,1969,8,82,1,83,1,83,1,83,3,83,1974,
        8,83,1,83,1,83,1,83,3,83,1979,8,83,1,83,1,83,1,83,3,83,1984,8,83,
        1,83,1,83,1,83,1,83,1,83,3,83,1991,8,83,1,84,1,84,1,84,1,84,1,84,
        1,84,1,84,1,85,1,85,1,85,3,85,2003,8,85,1,85,1,85,1,85,1,85,1,85,
        1,85,1,85,3,85,2012,8,85,1,85,1,85,1,85,3,85,2017,8,85,1,85,1,85,
        1,85,1,85,1,85,1,85,1,85,3,85,2026,8,85,1,86,1,86,1,86,1,86,1,86,
        1,86,3,86,2034,8,86,1,87,1,87,1,87,1,87,3,87,2040,8,87,1,87,1,87,
        1,87,3,87,2045,8,87,1,87,1,87,1,87,3,87,2050,8,87,1,87,1,87,1,87,
        1,87,1,87,3,87,2057,8,87,1,88,1,88,1,88,1,88,1,88,1,89,1,89,1,89,
        1,89,3,89,2068,8,89,1,89,1,89,1,89,3,89,2073,8,89,1,89,1,89,1,89,
        3,89,2078,8,89,1,89,1,89,1,89,3,89,2083,8,89,1,89,1,89,1,89,3,89,
        2088,8,89,1,89,1,89,1,89,3,89,2093,8,89,1,89,1,89,1,89,3,89,2098,
        8,89,1,89,1,89,1,89,3,89,2103,8,89,1,89,1,89,1,89,3,89,2108,8,89,
        1,89,1,89,1,89,3,89,2113,8,89,1,89,1,89,1,89,3,89,2118,8,89,1,89,
        1,89,1,89,3,89,2123,8,89,1,89,1,89,1,89,3,89,2128,8,89,1,89,3,89,
        2131,8,89,1,90,1,90,1,90,1,90,1,91,1,91,1,91,5,91,2140,8,91,10,91,
        12,91,2143,9,91,1,91,1,91,1,92,1,92,5,92,2149,8,92,10,92,12,92,2152,
        9,92,1,92,1,92,1,92,3,92,2157,8,92,1,93,1,93,3,93,2161,8,93,1,93,
        1,93,1,93,3,93,2166,8,93,1,93,1,93,1,93,3,93,2171,8,93,1,93,3,93,
        2174,8,93,1,94,1,94,1,94,1,94,1,95,1,95,1,95,5,95,2183,8,95,10,95,
        12,95,2186,9,95,1,96,1,96,1,96,5,96,2191,8,96,10,96,12,96,2194,9,
        96,1,97,1,97,1,97,1,97,1,97,1,97,1,97,1,97,1,97,1,97,1,97,1,97,3,
        97,2208,8,97,1,97,1,97,1,97,1,97,1,97,1,97,1,97,1,97,1,97,1,97,1,
        97,1,97,1,97,1,97,3,97,2224,8,97,1,97,3,97,2227,8,97,1,97,1,97,1,
        97,1,97,1,97,1,97,1,97,1,97,1,97,3,97,2238,8,97,1,97,1,97,1,97,3,
        97,2243,8,97,1,97,3,97,2246,8,97,1,97,1,97,1,97,1,97,1,97,1,97,3,
        97,2254,8,97,1,97,1,97,3,97,2258,8,97,1,97,1,97,1,97,1,97,1,97,1,
        97,1,97,1,97,1,97,3,97,2269,8,97,1,97,1,97,3,97,2273,8,97,1,97,1,
        97,3,97,2277,8,97,1,97,3,97,2280,8,97,1,97,1,97,1,97,1,97,1,97,1,
        97,1,97,1,97,1,97,1,97,1,97,3,97,2293,8,97,1,97,3,97,2296,8,97,1,
        97,1,97,1,97,1,97,1,97,3,97,2303,8,97,1,97,3,97,2306,8,97,1,97,1,
        97,1,97,1,97,1,97,3,97,2313,8,97,1,97,1,97,1,97,3,97,2318,8,97,1,
        97,3,97,2321,8,97,1,97,1,97,1,97,1,97,1,97,1,97,1,97,1,97,1,97,1,
        97,1,97,1,97,3,97,2335,8,97,1,97,1,97,1,97,1,97,1,97,1,97,5,97,2343,
        8,97,10,97,12,97,2346,9,97,1,98,1,98,1,99,1,99,1,100,1,100,1,101,
        1,101,1,102,1,102,1,102,5,102,2359,8,102,10,102,12,102,2362,9,102,
        1,102,3,102,2365,8,102,3,102,2367,8,102,1,102,1,102,5,102,2371,8,
        102,10,102,12,102,2374,9,102,1,102,1,102,1,103,1,103,1,103,1,103,
        1,104,1,104,1,104,1,104,1,104,1,104,3,104,2388,8,104,1,105,1,105,
        1,105,3,105,2393,8,105,1,106,1,106,1,106,3,106,2398,8,106,1,107,
        1,107,1,107,1,107,1,107,1,107,1,107,3,107,2407,8,107,1,108,1,108,
        1,108,1,108,1,108,1,108,1,108,1,108,1,108,1,108,1,108,1,108,1,108,
        1,108,1,108,1,108,1,108,1,108,1,108,1,108,1,108,1,108,1,108,1,108,
        1,108,1,108,1,108,1,108,1,108,1,108,1,108,1,108,1,108,1,108,1,108,
        1,108,1,108,1,108,1,108,1,108,1,108,1,108,1,108,1,108,1,108,1,108,
        1,108,1,108,1,108,1,108,1,108,1,108,1,108,1,108,1,108,1,108,1,108,
        1,108,1,108,1,108,5,108,2469,8,108,10,108,12,108,2472,9,108,1,108,
        1,108,1,108,1,108,1,108,1,108,1,108,1,108,1,108,1,108,1,108,1,108,
        5,108,2486,8,108,10,108,12,108,2489,9,108,1,108,1,108,1,108,1,108,
        1,108,1,108,1,108,1,108,1,108,1,108,1,108,1,108,1,108,1,108,1,108,
        1,108,1,108,1,108,1,108,1,108,1,108,1,108,1,108,1,108,1,108,1,108,
        1,108,1,108,1,108,1,108,1,108,1,108,1,108,1,108,1,108,1,108,1,108,
        3,108,2528,8,108,1,109,1,109,1,109,1,109,1,109,1,110,1,110,1,110,
        1,110,1,110,1,110,1,111,1,111,1,111,3,111,2544,8,111,1,112,1,112,
        3,112,2548,8,112,1,112,1,112,1,112,1,112,1,112,1,112,1,112,1,112,
        1,112,1,112,3,112,2560,8,112,1,112,1,112,1,113,1,113,5,113,2566,
        8,113,10,113,12,113,2569,9,113,1,113,1,113,1,114,1,114,1,114,1,114,
        1,114,1,114,1,114,1,114,1,114,1,114,3,114,2583,8,114,1,114,1,114,
        1,114,1,114,1,114,1,114,1,114,1,114,1,114,1,114,1,114,1,114,1,114,
        3,114,2598,8,114,1,114,1,114,1,114,1,114,1,114,1,114,1,114,1,114,
        1,114,1,114,1,114,1,114,1,114,1,114,1,114,1,114,1,114,1,114,1,114,
        1,114,1,114,1,114,1,114,1,114,1,114,1,114,1,114,1,114,3,114,2628,
        8,114,1,115,1,115,1,115,1,115,1,115,5,115,2635,8,115,10,115,12,115,
        2638,9,115,1,115,5,115,2641,8,115,10,115,12,115,2644,9,115,1,115,
        5,115,2647,8,115,10,115,12,115,2650,9,115,3,115,2652,8,115,1,115,
        1,115,1,115,1,115,1,115,5,115,2659,8,115,10,115,12,115,2662,9,115,
        1,115,1,115,1,115,1,115,1,116,1,116,1,116,1,116,1,116,5,116,2673,
        8,116,10,116,12,116,2676,9,116,1,116,5,116,2679,8,116,10,116,12,
        116,2682,9,116,1,116,5,116,2685,8,116,10,116,12,116,2688,9,116,3,
        116,2690,8,116,1,116,1,116,1,116,1,116,1,116,5,116,2697,8,116,10,
        116,12,116,2700,9,116,1,116,1,116,1,116,1,116,1,117,1,117,1,117,
        1,117,1,117,5,117,2711,8,117,10,117,12,117,2714,9,117,1,117,5,117,
        2717,8,117,10,117,12,117,2720,9,117,1,117,5,117,2723,8,117,10,117,
        12,117,2726,9,117,3,117,2728,8,117,1,117,1,117,1,117,1,117,1,117,
        5,117,2735,8,117,10,117,12,117,2738,9,117,1,117,1,117,1,117,1,117,
        1,118,1,118,1,118,1,118,1,118,5,118,2749,8,118,10,118,12,118,2752,
        9,118,1,118,5,118,2755,8,118,10,118,12,118,2758,9,118,1,118,5,118,
        2761,8,118,10,118,12,118,2764,9,118,3,118,2766,8,118,1,118,1,118,
        1,118,1,118,1,118,5,118,2773,8,118,10,118,12,118,2776,9,118,1,118,
        1,118,1,118,1,118,1,119,1,119,1,119,1,119,1,119,5,119,2787,8,119,
        10,119,12,119,2790,9,119,1,119,5,119,2793,8,119,10,119,12,119,2796,
        9,119,1,119,5,119,2799,8,119,10,119,12,119,2802,9,119,3,119,2804,
        8,119,1,119,1,119,1,119,1,119,1,119,5,119,2811,8,119,10,119,12,119,
        2814,9,119,1,119,1,119,1,119,1,119,1,120,1,120,1,120,1,120,1,120,
        5,120,2825,8,120,10,120,12,120,2828,9,120,1,120,5,120,2831,8,120,
        10,120,12,120,2834,9,120,1,120,5,120,2837,8,120,10,120,12,120,2840,
        9,120,3,120,2842,8,120,1,120,1,120,1,120,1,120,1,120,5,120,2849,
        8,120,10,120,12,120,2852,9,120,1,120,1,120,1,120,1,120,1,121,1,121,
        1,121,1,121,1,121,5,121,2863,8,121,10,121,12,121,2866,9,121,1,121,
        5,121,2869,8,121,10,121,12,121,2872,9,121,1,121,5,121,2875,8,121,
        10,121,12,121,2878,9,121,3,121,2880,8,121,1,121,1,121,1,121,1,121,
        1,121,5,121,2887,8,121,10,121,12,121,2890,9,121,1,121,1,121,1,121,
        1,121,1,122,1,122,1,122,1,122,1,122,5,122,2901,8,122,10,122,12,122,
        2904,9,122,1,122,5,122,2907,8,122,10,122,12,122,2910,9,122,1,122,
        5,122,2913,8,122,10,122,12,122,2916,9,122,3,122,2918,8,122,1,122,
        1,122,1,122,1,122,1,122,5,122,2925,8,122,10,122,12,122,2928,9,122,
        1,122,1,122,1,122,1,122,1,123,1,123,1,123,1,123,1,123,5,123,2939,
        8,123,10,123,12,123,2942,9,123,1,123,5,123,2945,8,123,10,123,12,
        123,2948,9,123,1,123,5,123,2951,8,123,10,123,12,123,2954,9,123,3,
        123,2956,8,123,1,123,1,123,1,123,1,123,1,123,5,123,2963,8,123,10,
        123,12,123,2966,9,123,1,123,1,123,1,123,1,123,1,124,1,124,1,124,
        1,124,1,124,5,124,2977,8,124,10,124,12,124,2980,9,124,1,124,5,124,
        2983,8,124,10,124,12,124,2986,9,124,1,124,5,124,2989,8,124,10,124,
        12,124,2992,9,124,3,124,2994,8,124,1,124,1,124,1,124,1,124,1,124,
        5,124,3001,8,124,10,124,12,124,3004,9,124,1,124,1,124,1,124,1,124,
        1,125,1,125,1,125,1,125,1,125,5,125,3015,8,125,10,125,12,125,3018,
        9,125,1,125,5,125,3021,8,125,10,125,12,125,3024,9,125,1,125,5,125,
        3027,8,125,10,125,12,125,3030,9,125,3,125,3032,8,125,1,125,1,125,
        1,125,1,125,1,125,5,125,3039,8,125,10,125,12,125,3042,9,125,1,125,
        1,125,1,125,1,125,1,125,0,1,194,126,0,2,4,6,8,10,12,14,16,18,20,
        22,24,26,28,30,32,34,36,38,40,42,44,46,48,50,52,54,56,58,60,62,64,
        66,68,70,72,74,76,78,80,82,84,86,88,90,92,94,96,98,100,102,104,106,
        108,110,112,114,116,118,120,122,124,126,128,130,132,134,136,138,
        140,142,144,146,148,150,152,154,156,158,160,162,164,166,168,170,
        172,174,176,178,180,182,184,186,188,190,192,194,196,198,200,202,
        204,206,208,210,212,214,216,218,220,222,224,226,228,230,232,234,
        236,238,240,242,244,246,248,250,0,13,1,0,43,44,2,0,37,37,95,95,1,
        0,199,200,2,0,192,192,201,201,3,0,192,192,194,194,213,213,2,0,192,
        192,194,194,1,0,167,168,1,0,244,248,1,0,283,289,4,0,37,37,95,95,
        177,178,199,199,2,0,173,173,192,192,2,0,37,37,178,178,2,0,19,19,
        181,181,3670,0,310,1,0,0,0,2,315,1,0,0,0,4,325,1,0,0,0,6,376,1,0,
        0,0,8,379,1,0,0,0,10,391,1,0,0,0,12,402,1,0,0,0,14,411,1,0,0,0,16,
        420,1,0,0,0,18,429,1,0,0,0,20,438,1,0,0,0,22,447,1,0,0,0,24,456,
        1,0,0,0,26,465,1,0,0,0,28,474,1,0,0,0,30,483,1,0,0,0,32,492,1,0,
        0,0,34,501,1,0,0,0,36,510,1,0,0,0,38,519,1,0,0,0,40,528,1,0,0,0,
        42,537,1,0,0,0,44,546,1,0,0,0,46,555,1,0,0,0,48,564,1,0,0,0,50,648,
        1,0,0,0,52,650,1,0,0,0,54,700,1,0,0,0,56,737,1,0,0,0,58,754,1,0,
        0,0,60,756,1,0,0,0,62,794,1,0,0,0,64,796,1,0,0,0,66,848,1,0,0,0,
        68,850,1,0,0,0,70,899,1,0,0,0,72,901,1,0,0,0,74,932,1,0,0,0,76,934,
        1,0,0,0,78,971,1,0,0,0,80,973,1,0,0,0,82,993,1,0,0,0,84,1005,1,0,
        0,0,86,1047,1,0,0,0,88,1049,1,0,0,0,90,1092,1,0,0,0,92,1094,1,0,
        0,0,94,1147,1,0,0,0,96,1149,1,0,0,0,98,1203,1,0,0,0,100,1205,1,0,
        0,0,102,1214,1,0,0,0,104,1258,1,0,0,0,106,1260,1,0,0,0,108,1269,
        1,0,0,0,110,1273,1,0,0,0,112,1283,1,0,0,0,114,1286,1,0,0,0,116,1289,
        1,0,0,0,118,1292,1,0,0,0,120,1295,1,0,0,0,122,1305,1,0,0,0,124,1425,
        1,0,0,0,126,1427,1,0,0,0,128,1462,1,0,0,0,130,1464,1,0,0,0,132,1500,
        1,0,0,0,134,1502,1,0,0,0,136,1582,1,0,0,0,138,1584,1,0,0,0,140,1630,
        1,0,0,0,142,1632,1,0,0,0,144,1685,1,0,0,0,146,1718,1,0,0,0,148,1720,
        1,0,0,0,150,1775,1,0,0,0,152,1777,1,0,0,0,154,1849,1,0,0,0,156,1851,
        1,0,0,0,158,1907,1,0,0,0,160,1909,1,0,0,0,162,1957,1,0,0,0,164,1959,
        1,0,0,0,166,1990,1,0,0,0,168,1992,1,0,0,0,170,2025,1,0,0,0,172,2027,
        1,0,0,0,174,2056,1,0,0,0,176,2058,1,0,0,0,178,2130,1,0,0,0,180,2132,
        1,0,0,0,182,2136,1,0,0,0,184,2156,1,0,0,0,186,2173,1,0,0,0,188,2175,
        1,0,0,0,190,2179,1,0,0,0,192,2187,1,0,0,0,194,2334,1,0,0,0,196,2347,
        1,0,0,0,198,2349,1,0,0,0,200,2351,1,0,0,0,202,2353,1,0,0,0,204,2355,
        1,0,0,0,206,2377,1,0,0,0,208,2387,1,0,0,0,210,2389,1,0,0,0,212,2394,
        1,0,0,0,214,2406,1,0,0,0,216,2527,1,0,0,0,218,2529,1,0,0,0,220,2534,
        1,0,0,0,222,2540,1,0,0,0,224,2545,1,0,0,0,226,2563,1,0,0,0,228,2627,
        1,0,0,0,230,2629,1,0,0,0,232,2667,1,0,0,0,234,2705,1,0,0,0,236,2743,
        1,0,0,0,238,2781,1,0,0,0,240,2819,1,0,0,0,242,2857,1,0,0,0,244,2895,
        1,0,0,0,246,2933,1,0,0,0,248,2971,1,0,0,0,250,3009,1,0,0,0,252,309,
        3,2,1,0,253,309,3,4,2,0,254,309,3,6,3,0,255,309,3,8,4,0,256,309,
        3,10,5,0,257,309,3,12,6,0,258,309,3,14,7,0,259,309,3,16,8,0,260,
        309,3,18,9,0,261,309,3,20,10,0,262,309,3,22,11,0,263,309,3,24,12,
        0,264,309,3,26,13,0,265,309,3,28,14,0,266,309,3,30,15,0,267,309,
        3,32,16,0,268,309,3,34,17,0,269,309,3,36,18,0,270,309,3,38,19,0,
        271,309,3,40,20,0,272,309,3,42,21,0,273,309,3,44,22,0,274,309,3,
        46,23,0,275,309,3,48,24,0,276,309,3,182,91,0,277,309,3,204,102,0,
        278,309,3,206,103,0,279,309,3,220,110,0,280,309,3,224,112,0,281,
        309,3,226,113,0,282,309,3,230,115,0,283,309,3,232,116,0,284,309,
        3,234,117,0,285,309,3,248,124,0,286,309,3,250,125,0,287,309,3,238,
        119,0,288,309,3,236,118,0,289,309,3,240,120,0,290,309,3,242,121,
        0,291,309,3,244,122,0,292,309,3,246,123,0,293,309,3,52,26,0,294,
        309,3,60,30,0,295,309,3,64,32,0,296,309,3,82,41,0,297,309,3,88,44,
        0,298,309,3,176,88,0,299,309,3,180,90,0,300,309,3,96,48,0,301,309,
        3,92,46,0,302,309,3,130,65,0,303,309,3,142,71,0,304,309,3,156,78,
        0,305,309,3,160,80,0,306,309,3,106,53,0,307,309,3,228,114,0,308,
        252,1,0,0,0,308,253,1,0,0,0,308,254,1,0,0,0,308,255,1,0,0,0,308,
        256,1,0,0,0,308,257,1,0,0,0,308,258,1,0,0,0,308,259,1,0,0,0,308,
        260,1,0,0,0,308,261,1,0,0,0,308,262,1,0,0,0,308,263,1,0,0,0,308,
        264,1,0,0,0,308,265,1,0,0,0,308,266,1,0,0,0,308,267,1,0,0,0,308,
        268,1,0,0,0,308,269,1,0,0,0,308,270,1,0,0,0,308,271,1,0,0,0,308,
        272,1,0,0,0,308,273,1,0,0,0,308,274,1,0,0,0,308,275,1,0,0,0,308,
        276,1,0,0,0,308,277,1,0,0,0,308,278,1,0,0,0,308,279,1,0,0,0,308,
        280,1,0,0,0,308,281,1,0,0,0,308,282,1,0,0,0,308,283,1,0,0,0,308,
        284,1,0,0,0,308,285,1,0,0,0,308,286,1,0,0,0,308,287,1,0,0,0,308,
        288,1,0,0,0,308,289,1,0,0,0,308,290,1,0,0,0,308,291,1,0,0,0,308,
        292,1,0,0,0,308,293,1,0,0,0,308,294,1,0,0,0,308,295,1,0,0,0,308,
        296,1,0,0,0,308,297,1,0,0,0,308,298,1,0,0,0,308,299,1,0,0,0,308,
        300,1,0,0,0,308,301,1,0,0,0,308,302,1,0,0,0,308,303,1,0,0,0,308,
        304,1,0,0,0,308,305,1,0,0,0,308,306,1,0,0,0,308,307,1,0,0,0,309,
        312,1,0,0,0,310,308,1,0,0,0,310,311,1,0,0,0,311,313,1,0,0,0,312,
        310,1,0,0,0,313,314,5,0,0,1,314,1,1,0,0,0,315,319,5,3,0,0,316,318,
        3,50,25,0,317,316,1,0,0,0,318,321,1,0,0,0,319,317,1,0,0,0,319,320,
        1,0,0,0,320,322,1,0,0,0,321,319,1,0,0,0,322,323,5,2,0,0,323,3,1,
        0,0,0,324,326,5,36,0,0,325,324,1,0,0,0,325,326,1,0,0,0,326,327,1,
        0,0,0,327,331,5,37,0,0,328,330,3,58,29,0,329,328,1,0,0,0,330,333,
        1,0,0,0,331,329,1,0,0,0,331,332,1,0,0,0,332,334,1,0,0,0,333,331,
        1,0,0,0,334,335,5,2,0,0,335,5,1,0,0,0,336,340,5,40,0,0,337,339,3,
        62,31,0,338,337,1,0,0,0,339,342,1,0,0,0,340,338,1,0,0,0,340,341,
        1,0,0,0,341,343,1,0,0,0,342,340,1,0,0,0,343,377,5,2,0,0,344,348,
        7,0,0,0,345,347,3,66,33,0,346,345,1,0,0,0,347,350,1,0,0,0,348,346,
        1,0,0,0,348,349,1,0,0,0,349,351,1,0,0,0,350,348,1,0,0,0,351,377,
        5,2,0,0,352,356,5,47,0,0,353,355,3,70,35,0,354,353,1,0,0,0,355,358,
        1,0,0,0,356,354,1,0,0,0,356,357,1,0,0,0,357,359,1,0,0,0,358,356,
        1,0,0,0,359,377,5,2,0,0,360,364,5,50,0,0,361,363,3,74,37,0,362,361,
        1,0,0,0,363,366,1,0,0,0,364,362,1,0,0,0,364,365,1,0,0,0,365,367,
        1,0,0,0,366,364,1,0,0,0,367,377,5,2,0,0,368,372,5,51,0,0,369,371,
        3,78,39,0,370,369,1,0,0,0,371,374,1,0,0,0,372,370,1,0,0,0,372,373,
        1,0,0,0,373,375,1,0,0,0,374,372,1,0,0,0,375,377,5,2,0,0,376,336,
        1,0,0,0,376,344,1,0,0,0,376,352,1,0,0,0,376,360,1,0,0,0,376,368,
        1,0,0,0,377,7,1,0,0,0,378,380,5,36,0,0,379,378,1,0,0,0,379,380,1,
        0,0,0,380,381,1,0,0,0,381,385,5,52,0,0,382,384,3,82,41,0,383,382,
        1,0,0,0,384,387,1,0,0,0,385,383,1,0,0,0,385,386,1,0,0,0,386,388,
        1,0,0,0,387,385,1,0,0,0,388,389,5,2,0,0,389,9,1,0,0,0,390,392,5,
        36,0,0,391,390,1,0,0,0,391,392,1,0,0,0,392,393,1,0,0,0,393,397,5,
        57,0,0,394,396,3,86,43,0,395,394,1,0,0,0,396,399,1,0,0,0,397,395,
        1,0,0,0,397,398,1,0,0,0,398,400,1,0,0,0,399,397,1,0,0,0,400,401,
        5,2,0,0,401,11,1,0,0,0,402,406,5,60,0,0,403,405,3,90,45,0,404,403,
        1,0,0,0,405,408,1,0,0,0,406,404,1,0,0,0,406,407,1,0,0,0,407,409,
        1,0,0,0,408,406,1,0,0,0,409,410,5,2,0,0,410,13,1,0,0,0,411,415,5,
        64,0,0,412,414,3,94,47,0,413,412,1,0,0,0,414,417,1,0,0,0,415,413,
        1,0,0,0,415,416,1,0,0,0,416,418,1,0,0,0,417,415,1,0,0,0,418,419,
        5,2,0,0,419,15,1,0,0,0,420,424,5,66,0,0,421,423,3,98,49,0,422,421,
        1,0,0,0,423,426,1,0,0,0,424,422,1,0,0,0,424,425,1,0,0,0,425,427,
        1,0,0,0,426,424,1,0,0,0,427,428,5,2,0,0,428,17,1,0,0,0,429,433,5,
        70,0,0,430,432,3,104,52,0,431,430,1,0,0,0,432,435,1,0,0,0,433,431,
        1,0,0,0,433,434,1,0,0,0,434,436,1,0,0,0,435,433,1,0,0,0,436,437,
        5,2,0,0,437,19,1,0,0,0,438,442,5,78,0,0,439,441,3,124,62,0,440,439,
        1,0,0,0,441,444,1,0,0,0,442,440,1,0,0,0,442,443,1,0,0,0,443,445,
        1,0,0,0,444,442,1,0,0,0,445,446,5,2,0,0,446,21,1,0,0,0,447,451,5,
        85,0,0,448,450,3,128,64,0,449,448,1,0,0,0,450,453,1,0,0,0,451,449,
        1,0,0,0,451,452,1,0,0,0,452,454,1,0,0,0,453,451,1,0,0,0,454,455,
        5,2,0,0,455,23,1,0,0,0,456,460,5,86,0,0,457,459,3,132,66,0,458,457,
        1,0,0,0,459,462,1,0,0,0,460,458,1,0,0,0,460,461,1,0,0,0,461,463,
        1,0,0,0,462,460,1,0,0,0,463,464,5,2,0,0,464,25,1,0,0,0,465,469,5,
        87,0,0,466,468,3,136,68,0,467,466,1,0,0,0,468,471,1,0,0,0,469,467,
        1,0,0,0,469,470,1,0,0,0,470,472,1,0,0,0,471,469,1,0,0,0,472,473,
        5,2,0,0,473,27,1,0,0,0,474,478,5,91,0,0,475,477,3,140,70,0,476,475,
        1,0,0,0,477,480,1,0,0,0,478,476,1,0,0,0,478,479,1,0,0,0,479,481,
        1,0,0,0,480,478,1,0,0,0,481,482,5,2,0,0,482,29,1,0,0,0,483,487,5,
        93,0,0,484,486,3,144,72,0,485,484,1,0,0,0,486,489,1,0,0,0,487,485,
        1,0,0,0,487,488,1,0,0,0,488,490,1,0,0,0,489,487,1,0,0,0,490,491,
        5,2,0,0,491,31,1,0,0,0,492,496,5,94,0,0,493,495,3,146,73,0,494,493,
        1,0,0,0,495,498,1,0,0,0,496,494,1,0,0,0,496,497,1,0,0,0,497,499,
        1,0,0,0,498,496,1,0,0,0,499,500,5,2,0,0,500,33,1,0,0,0,501,505,5,
        95,0,0,502,504,3,150,75,0,503,502,1,0,0,0,504,507,1,0,0,0,505,503,
        1,0,0,0,505,506,1,0,0,0,506,508,1,0,0,0,507,505,1,0,0,0,508,509,
        5,2,0,0,509,35,1,0,0,0,510,514,5,97,0,0,511,513,3,154,77,0,512,511,
        1,0,0,0,513,516,1,0,0,0,514,512,1,0,0,0,514,515,1,0,0,0,515,517,
        1,0,0,0,516,514,1,0,0,0,517,518,5,2,0,0,518,37,1,0,0,0,519,523,5,
        102,0,0,520,522,3,158,79,0,521,520,1,0,0,0,522,525,1,0,0,0,523,521,
        1,0,0,0,523,524,1,0,0,0,524,526,1,0,0,0,525,523,1,0,0,0,526,527,
        5,2,0,0,527,39,1,0,0,0,528,532,5,113,0,0,529,531,3,162,81,0,530,
        529,1,0,0,0,531,534,1,0,0,0,532,530,1,0,0,0,532,533,1,0,0,0,533,
        535,1,0,0,0,534,532,1,0,0,0,535,536,5,2,0,0,536,41,1,0,0,0,537,541,
        5,114,0,0,538,540,3,166,83,0,539,538,1,0,0,0,540,543,1,0,0,0,541,
        539,1,0,0,0,541,542,1,0,0,0,542,544,1,0,0,0,543,541,1,0,0,0,544,
        545,5,2,0,0,545,43,1,0,0,0,546,550,5,115,0,0,547,549,3,170,85,0,
        548,547,1,0,0,0,549,552,1,0,0,0,550,548,1,0,0,0,550,551,1,0,0,0,
        551,553,1,0,0,0,552,550,1,0,0,0,553,554,5,2,0,0,554,45,1,0,0,0,555,
        559,5,202,0,0,556,558,3,174,87,0,557,556,1,0,0,0,558,561,1,0,0,0,
        559,557,1,0,0,0,559,560,1,0,0,0,560,562,1,0,0,0,561,559,1,0,0,0,
        562,563,5,2,0,0,563,47,1,0,0,0,564,568,5,203,0,0,565,567,3,178,89,
        0,566,565,1,0,0,0,567,570,1,0,0,0,568,566,1,0,0,0,568,569,1,0,0,
        0,569,571,1,0,0,0,570,568,1,0,0,0,571,572,5,2,0,0,572,49,1,0,0,0,
        573,649,3,52,26,0,574,649,3,230,115,0,575,576,5,5,0,0,576,577,5,
        199,0,0,577,649,3,200,100,0,578,579,5,6,0,0,579,580,5,224,0,0,580,
        649,5,223,0,0,581,582,5,7,0,0,582,583,5,199,0,0,583,649,3,200,100,
        0,584,586,5,8,0,0,585,587,5,207,0,0,586,585,1,0,0,0,586,587,1,0,
        0,0,587,588,1,0,0,0,588,649,3,200,100,0,589,591,5,9,0,0,590,592,
        5,207,0,0,591,590,1,0,0,0,591,592,1,0,0,0,592,593,1,0,0,0,593,649,
        5,199,0,0,594,595,5,10,0,0,595,649,5,199,0,0,596,597,5,11,0,0,597,
        598,5,199,0,0,598,599,5,199,0,0,599,649,3,200,100,0,600,601,5,12,
        0,0,601,602,5,199,0,0,602,649,5,192,0,0,603,604,5,13,0,0,604,605,
        5,199,0,0,605,649,5,192,0,0,606,608,5,14,0,0,607,609,5,207,0,0,608,
        607,1,0,0,0,608,609,1,0,0,0,609,610,1,0,0,0,610,649,5,192,0,0,611,
        612,5,15,0,0,612,613,5,228,0,0,613,649,5,227,0,0,614,615,5,16,0,
        0,615,616,3,54,27,0,616,617,5,2,0,0,617,649,1,0,0,0,618,619,5,17,
        0,0,619,621,5,18,0,0,620,622,5,207,0,0,621,620,1,0,0,0,621,622,1,
        0,0,0,622,623,1,0,0,0,623,649,3,200,100,0,624,649,5,19,0,0,625,626,
        5,20,0,0,626,627,5,199,0,0,627,649,3,200,100,0,628,629,5,21,0,0,
        629,630,5,199,0,0,630,649,3,200,100,0,631,632,5,22,0,0,632,633,5,
        199,0,0,633,649,3,200,100,0,634,635,5,23,0,0,635,636,5,199,0,0,636,
        649,3,200,100,0,637,638,5,24,0,0,638,639,5,199,0,0,639,649,3,200,
        100,0,640,641,5,25,0,0,641,642,5,199,0,0,642,649,3,200,100,0,643,
        645,5,26,0,0,644,646,5,207,0,0,645,644,1,0,0,0,645,646,1,0,0,0,646,
        647,1,0,0,0,647,649,3,200,100,0,648,573,1,0,0,0,648,574,1,0,0,0,
        648,575,1,0,0,0,648,578,1,0,0,0,648,581,1,0,0,0,648,584,1,0,0,0,
        648,589,1,0,0,0,648,594,1,0,0,0,648,596,1,0,0,0,648,600,1,0,0,0,
        648,603,1,0,0,0,648,606,1,0,0,0,648,611,1,0,0,0,648,614,1,0,0,0,
        648,618,1,0,0,0,648,624,1,0,0,0,648,625,1,0,0,0,648,628,1,0,0,0,
        648,631,1,0,0,0,648,634,1,0,0,0,648,637,1,0,0,0,648,640,1,0,0,0,
        648,643,1,0,0,0,649,51,1,0,0,0,650,651,5,4,0,0,651,652,3,188,94,
        0,652,653,3,188,94,0,653,655,3,196,98,0,654,656,3,196,98,0,655,654,
        1,0,0,0,655,656,1,0,0,0,656,658,1,0,0,0,657,659,3,196,98,0,658,657,
        1,0,0,0,658,659,1,0,0,0,659,663,1,0,0,0,660,662,3,56,28,0,661,660,
        1,0,0,0,662,665,1,0,0,0,663,661,1,0,0,0,663,664,1,0,0,0,664,683,
        1,0,0,0,665,663,1,0,0,0,666,668,5,187,0,0,667,669,5,4,0,0,668,667,
        1,0,0,0,668,669,1,0,0,0,669,670,1,0,0,0,670,671,3,188,94,0,671,673,
        3,188,94,0,672,674,3,196,98,0,673,672,1,0,0,0,673,674,1,0,0,0,674,
        676,1,0,0,0,675,677,3,196,98,0,676,675,1,0,0,0,676,677,1,0,0,0,677,
        679,1,0,0,0,678,680,3,196,98,0,679,678,1,0,0,0,679,680,1,0,0,0,680,
        682,1,0,0,0,681,666,1,0,0,0,682,685,1,0,0,0,683,681,1,0,0,0,683,
        684,1,0,0,0,684,53,1,0,0,0,685,683,1,0,0,0,686,688,5,27,0,0,687,
        689,5,207,0,0,688,687,1,0,0,0,688,689,1,0,0,0,689,690,1,0,0,0,690,
        701,3,200,100,0,691,693,5,28,0,0,692,694,5,207,0,0,693,692,1,0,0,
        0,693,694,1,0,0,0,694,695,1,0,0,0,695,701,3,200,100,0,696,697,5,
        29,0,0,697,701,3,188,94,0,698,699,5,30,0,0,699,701,3,188,94,0,700,
        686,1,0,0,0,700,691,1,0,0,0,700,696,1,0,0,0,700,698,1,0,0,0,701,
        55,1,0,0,0,702,704,5,31,0,0,703,705,5,207,0,0,704,703,1,0,0,0,704,
        705,1,0,0,0,705,706,1,0,0,0,706,738,3,202,101,0,707,709,5,32,0,0,
        708,710,5,207,0,0,709,708,1,0,0,0,709,710,1,0,0,0,710,711,1,0,0,
        0,711,738,3,202,101,0,712,714,5,56,0,0,713,715,5,207,0,0,714,713,
        1,0,0,0,714,715,1,0,0,0,715,716,1,0,0,0,716,738,3,202,101,0,717,
        719,5,33,0,0,718,720,5,207,0,0,719,718,1,0,0,0,719,720,1,0,0,0,720,
        721,1,0,0,0,721,738,3,202,101,0,722,724,5,34,0,0,723,725,5,207,0,
        0,724,723,1,0,0,0,724,725,1,0,0,0,725,726,1,0,0,0,726,738,3,202,
        101,0,727,729,5,35,0,0,728,730,5,207,0,0,729,728,1,0,0,0,729,730,
        1,0,0,0,730,731,1,0,0,0,731,738,3,202,101,0,732,734,5,48,0,0,733,
        735,5,207,0,0,734,733,1,0,0,0,734,735,1,0,0,0,735,736,1,0,0,0,736,
        738,3,202,101,0,737,702,1,0,0,0,737,707,1,0,0,0,737,712,1,0,0,0,
        737,717,1,0,0,0,737,722,1,0,0,0,737,727,1,0,0,0,737,732,1,0,0,0,
        738,57,1,0,0,0,739,755,3,206,103,0,740,755,3,60,30,0,741,755,3,232,
        116,0,742,744,5,38,0,0,743,745,5,207,0,0,744,743,1,0,0,0,744,745,
        1,0,0,0,745,746,1,0,0,0,746,755,5,192,0,0,747,755,5,19,0,0,748,750,
        5,21,0,0,749,751,5,207,0,0,750,749,1,0,0,0,750,751,1,0,0,0,751,752,
        1,0,0,0,752,755,3,200,100,0,753,755,5,39,0,0,754,739,1,0,0,0,754,
        740,1,0,0,0,754,741,1,0,0,0,754,742,1,0,0,0,754,747,1,0,0,0,754,
        748,1,0,0,0,754,753,1,0,0,0,755,59,1,0,0,0,756,757,5,4,0,0,757,758,
        3,188,94,0,758,759,3,188,94,0,759,760,3,188,94,0,760,761,3,188,94,
        0,761,762,3,196,98,0,762,763,3,196,98,0,763,764,3,196,98,0,764,765,
        5,192,0,0,765,61,1,0,0,0,766,795,3,64,32,0,767,795,3,234,117,0,768,
        770,5,9,0,0,769,771,5,207,0,0,770,769,1,0,0,0,770,771,1,0,0,0,771,
        772,1,0,0,0,772,795,5,199,0,0,773,774,5,41,0,0,774,775,3,200,100,
        0,775,776,3,200,100,0,776,777,3,200,100,0,777,795,1,0,0,0,778,780,
        5,42,0,0,779,781,5,207,0,0,780,779,1,0,0,0,780,781,1,0,0,0,781,782,
        1,0,0,0,782,795,3,200,100,0,783,785,5,14,0,0,784,786,5,207,0,0,785,
        784,1,0,0,0,785,786,1,0,0,0,786,787,1,0,0,0,787,795,5,192,0,0,788,
        789,5,15,0,0,789,795,5,227,0,0,790,791,5,17,0,0,791,792,5,18,0,0,
        792,795,3,200,100,0,793,795,5,19,0,0,794,766,1,0,0,0,794,767,1,0,
        0,0,794,768,1,0,0,0,794,773,1,0,0,0,794,778,1,0,0,0,794,783,1,0,
        0,0,794,788,1,0,0,0,794,790,1,0,0,0,794,793,1,0,0,0,795,63,1,0,0,
        0,796,797,5,4,0,0,797,798,3,188,94,0,798,799,3,188,94,0,799,800,
        3,188,94,0,800,801,3,188,94,0,801,802,3,188,94,0,802,803,3,188,94,
        0,803,805,3,196,98,0,804,806,3,196,98,0,805,804,1,0,0,0,805,806,
        1,0,0,0,806,808,1,0,0,0,807,809,3,196,98,0,808,807,1,0,0,0,808,809,
        1,0,0,0,809,65,1,0,0,0,810,849,3,68,34,0,811,813,5,9,0,0,812,814,
        5,207,0,0,813,812,1,0,0,0,813,814,1,0,0,0,814,815,1,0,0,0,815,849,
        5,199,0,0,816,817,5,45,0,0,817,849,5,230,0,0,818,820,5,21,0,0,819,
        821,5,207,0,0,820,819,1,0,0,0,820,821,1,0,0,0,821,822,1,0,0,0,822,
        849,3,200,100,0,823,824,5,46,0,0,824,849,5,193,0,0,825,826,5,6,0,
        0,826,849,5,223,0,0,827,828,5,41,0,0,828,829,3,200,100,0,829,830,
        3,200,100,0,830,831,3,200,100,0,831,849,1,0,0,0,832,834,5,42,0,0,
        833,835,5,207,0,0,834,833,1,0,0,0,834,835,1,0,0,0,835,836,1,0,0,
        0,836,849,3,200,100,0,837,839,5,14,0,0,838,840,5,207,0,0,839,838,
        1,0,0,0,839,840,1,0,0,0,840,841,1,0,0,0,841,849,5,192,0,0,842,843,
        5,15,0,0,843,849,5,227,0,0,844,845,5,17,0,0,845,846,5,18,0,0,846,
        849,3,200,100,0,847,849,5,19,0,0,848,810,1,0,0,0,848,811,1,0,0,0,
        848,816,1,0,0,0,848,818,1,0,0,0,848,823,1,0,0,0,848,825,1,0,0,0,
        848,827,1,0,0,0,848,832,1,0,0,0,848,837,1,0,0,0,848,842,1,0,0,0,
        848,844,1,0,0,0,848,847,1,0,0,0,849,67,1,0,0,0,850,851,5,4,0,0,851,
        852,3,188,94,0,852,853,3,188,94,0,853,854,3,188,94,0,854,855,3,188,
        94,0,855,856,3,188,94,0,856,857,3,188,94,0,857,858,3,196,98,0,858,
        865,3,196,98,0,859,866,3,196,98,0,860,861,3,196,98,0,861,862,3,196,
        98,0,862,863,3,196,98,0,863,864,3,196,98,0,864,866,1,0,0,0,865,859,
        1,0,0,0,865,860,1,0,0,0,865,866,1,0,0,0,866,69,1,0,0,0,867,900,3,
        72,36,0,868,870,5,48,0,0,869,871,5,207,0,0,870,869,1,0,0,0,870,871,
        1,0,0,0,871,872,1,0,0,0,872,900,5,192,0,0,873,875,5,9,0,0,874,876,
        5,207,0,0,875,874,1,0,0,0,875,876,1,0,0,0,876,877,1,0,0,0,877,900,
        5,199,0,0,878,880,5,42,0,0,879,881,5,207,0,0,880,879,1,0,0,0,880,
        881,1,0,0,0,881,882,1,0,0,0,882,883,3,200,100,0,883,884,3,200,100,
        0,884,900,1,0,0,0,885,887,5,14,0,0,886,888,5,207,0,0,887,886,1,0,
        0,0,887,888,1,0,0,0,888,889,1,0,0,0,889,900,5,192,0,0,890,892,5,
        49,0,0,891,893,5,207,0,0,892,891,1,0,0,0,892,893,1,0,0,0,893,894,
        1,0,0,0,894,900,5,192,0,0,895,896,5,17,0,0,896,897,5,18,0,0,897,
        900,3,200,100,0,898,900,5,19,0,0,899,867,1,0,0,0,899,868,1,0,0,0,
        899,873,1,0,0,0,899,878,1,0,0,0,899,885,1,0,0,0,899,890,1,0,0,0,
        899,895,1,0,0,0,899,898,1,0,0,0,900,71,1,0,0,0,901,902,5,4,0,0,902,
        903,3,188,94,0,903,904,3,188,94,0,904,905,3,188,94,0,905,906,3,188,
        94,0,906,907,3,196,98,0,907,911,3,196,98,0,908,909,3,196,98,0,909,
        910,3,196,98,0,910,912,1,0,0,0,911,908,1,0,0,0,911,912,1,0,0,0,912,
        73,1,0,0,0,913,933,3,76,38,0,914,916,5,9,0,0,915,917,5,207,0,0,916,
        915,1,0,0,0,916,917,1,0,0,0,917,918,1,0,0,0,918,933,5,199,0,0,919,
        920,5,41,0,0,920,933,3,200,100,0,921,923,5,14,0,0,922,924,5,207,
        0,0,923,922,1,0,0,0,923,924,1,0,0,0,924,925,1,0,0,0,925,933,5,192,
        0,0,926,927,5,15,0,0,927,933,5,227,0,0,928,929,5,17,0,0,929,930,
        5,18,0,0,930,933,3,200,100,0,931,933,5,19,0,0,932,913,1,0,0,0,932,
        914,1,0,0,0,932,919,1,0,0,0,932,921,1,0,0,0,932,926,1,0,0,0,932,
        928,1,0,0,0,932,931,1,0,0,0,933,75,1,0,0,0,934,935,5,4,0,0,935,936,
        3,188,94,0,936,937,3,188,94,0,937,939,3,196,98,0,938,940,3,196,98,
        0,939,938,1,0,0,0,939,940,1,0,0,0,940,77,1,0,0,0,941,972,3,80,40,
        0,942,944,5,9,0,0,943,945,5,207,0,0,944,943,1,0,0,0,944,945,1,0,
        0,0,945,946,1,0,0,0,946,972,5,199,0,0,947,948,5,41,0,0,948,949,3,
        200,100,0,949,950,3,200,100,0,950,951,3,200,100,0,951,952,3,200,
        100,0,952,972,1,0,0,0,953,955,5,42,0,0,954,956,5,207,0,0,955,954,
        1,0,0,0,955,956,1,0,0,0,956,957,1,0,0,0,957,972,3,200,100,0,958,
        960,5,14,0,0,959,961,5,207,0,0,960,959,1,0,0,0,960,961,1,0,0,0,961,
        962,1,0,0,0,962,972,5,192,0,0,963,964,5,15,0,0,964,972,5,227,0,0,
        965,966,5,17,0,0,966,967,5,18,0,0,967,972,3,200,100,0,968,972,5,
        19,0,0,969,970,5,45,0,0,970,972,5,231,0,0,971,941,1,0,0,0,971,942,
        1,0,0,0,971,947,1,0,0,0,971,953,1,0,0,0,971,958,1,0,0,0,971,963,
        1,0,0,0,971,965,1,0,0,0,971,968,1,0,0,0,971,969,1,0,0,0,972,79,1,
        0,0,0,973,974,5,4,0,0,974,975,3,188,94,0,975,976,3,188,94,0,976,
        977,3,188,94,0,977,978,3,188,94,0,978,980,3,196,98,0,979,981,3,196,
        98,0,980,979,1,0,0,0,980,981,1,0,0,0,981,81,1,0,0,0,982,994,3,206,
        103,0,983,987,5,53,0,0,984,986,3,84,42,0,985,984,1,0,0,0,986,989,
        1,0,0,0,987,985,1,0,0,0,987,988,1,0,0,0,988,990,1,0,0,0,989,987,
        1,0,0,0,990,994,5,2,0,0,991,994,5,54,0,0,992,994,5,39,0,0,993,982,
        1,0,0,0,993,983,1,0,0,0,993,991,1,0,0,0,993,992,1,0,0,0,994,83,1,
        0,0,0,995,997,5,55,0,0,996,998,5,207,0,0,997,996,1,0,0,0,997,998,
        1,0,0,0,998,999,1,0,0,0,999,1006,3,188,94,0,1000,1002,5,56,0,0,1001,
        1003,5,207,0,0,1002,1001,1,0,0,0,1002,1003,1,0,0,0,1003,1004,1,0,
        0,0,1004,1006,3,200,100,0,1005,995,1,0,0,0,1005,1000,1,0,0,0,1006,
        85,1,0,0,0,1007,1048,3,206,103,0,1008,1010,5,58,0,0,1009,1011,5,
        207,0,0,1010,1009,1,0,0,0,1010,1011,1,0,0,0,1011,1012,1,0,0,0,1012,
        1048,5,192,0,0,1013,1015,5,59,0,0,1014,1016,5,207,0,0,1015,1014,
        1,0,0,0,1015,1016,1,0,0,0,1016,1017,1,0,0,0,1017,1043,5,204,0,0,
        1018,1020,3,200,100,0,1019,1021,5,190,0,0,1020,1019,1,0,0,0,1020,
        1021,1,0,0,0,1021,1022,1,0,0,0,1022,1024,3,200,100,0,1023,1025,5,
        190,0,0,1024,1023,1,0,0,0,1024,1025,1,0,0,0,1025,1026,1,0,0,0,1026,
        1027,3,200,100,0,1027,1044,1,0,0,0,1028,1030,5,185,0,0,1029,1031,
        5,207,0,0,1030,1029,1,0,0,0,1030,1031,1,0,0,0,1031,1032,1,0,0,0,
        1032,1034,3,188,94,0,1033,1035,5,190,0,0,1034,1033,1,0,0,0,1034,
        1035,1,0,0,0,1035,1041,1,0,0,0,1036,1038,5,186,0,0,1037,1039,5,207,
        0,0,1038,1037,1,0,0,0,1038,1039,1,0,0,0,1039,1040,1,0,0,0,1040,1042,
        3,188,94,0,1041,1036,1,0,0,0,1041,1042,1,0,0,0,1042,1044,1,0,0,0,
        1043,1018,1,0,0,0,1043,1028,1,0,0,0,1044,1045,1,0,0,0,1045,1046,
        5,205,0,0,1046,1048,1,0,0,0,1047,1007,1,0,0,0,1047,1008,1,0,0,0,
        1047,1013,1,0,0,0,1048,87,1,0,0,0,1049,1050,5,4,0,0,1050,1051,3,
        188,94,0,1051,1052,3,196,98,0,1052,1053,3,196,98,0,1053,1054,3,196,
        98,0,1054,89,1,0,0,0,1055,1093,3,92,46,0,1056,1093,3,236,118,0,1057,
        1059,5,9,0,0,1058,1060,5,207,0,0,1059,1058,1,0,0,0,1059,1060,1,0,
        0,0,1060,1061,1,0,0,0,1061,1093,5,199,0,0,1062,1063,5,61,0,0,1063,
        1064,5,192,0,0,1064,1093,3,200,100,0,1065,1067,5,42,0,0,1066,1068,
        5,207,0,0,1067,1066,1,0,0,0,1067,1068,1,0,0,0,1068,1069,1,0,0,0,
        1069,1093,3,200,100,0,1070,1072,5,14,0,0,1071,1073,5,207,0,0,1072,
        1071,1,0,0,0,1072,1073,1,0,0,0,1073,1074,1,0,0,0,1074,1093,5,192,
        0,0,1075,1076,5,17,0,0,1076,1077,5,18,0,0,1077,1084,3,200,100,0,
        1078,1085,5,136,0,0,1079,1081,5,9,0,0,1080,1082,5,207,0,0,1081,1080,
        1,0,0,0,1081,1082,1,0,0,0,1082,1083,1,0,0,0,1083,1085,5,199,0,0,
        1084,1078,1,0,0,0,1084,1079,1,0,0,0,1085,1093,1,0,0,0,1086,1093,
        5,19,0,0,1087,1088,5,62,0,0,1088,1089,3,200,100,0,1089,1090,5,192,
        0,0,1090,1093,1,0,0,0,1091,1093,5,63,0,0,1092,1055,1,0,0,0,1092,
        1056,1,0,0,0,1092,1057,1,0,0,0,1092,1062,1,0,0,0,1092,1065,1,0,0,
        0,1092,1070,1,0,0,0,1092,1075,1,0,0,0,1092,1086,1,0,0,0,1092,1087,
        1,0,0,0,1092,1091,1,0,0,0,1093,91,1,0,0,0,1094,1095,5,4,0,0,1095,
        1096,3,188,94,0,1096,1097,3,188,94,0,1097,93,1,0,0,0,1098,1148,3,
        96,48,0,1099,1148,3,238,119,0,1100,1102,5,9,0,0,1101,1103,5,207,
        0,0,1102,1101,1,0,0,0,1102,1103,1,0,0,0,1103,1104,1,0,0,0,1104,1148,
        5,199,0,0,1105,1106,5,41,0,0,1106,1107,3,200,100,0,1107,1108,3,200,
        100,0,1108,1109,3,200,100,0,1109,1110,3,200,100,0,1110,1148,1,0,
        0,0,1111,1113,5,48,0,0,1112,1114,5,207,0,0,1113,1112,1,0,0,0,1113,
        1114,1,0,0,0,1114,1115,1,0,0,0,1115,1148,5,192,0,0,1116,1117,5,65,
        0,0,1117,1148,5,192,0,0,1118,1119,5,42,0,0,1119,1121,3,200,100,0,
        1120,1122,3,200,100,0,1121,1120,1,0,0,0,1121,1122,1,0,0,0,1122,1148,
        1,0,0,0,1123,1125,5,14,0,0,1124,1126,5,207,0,0,1125,1124,1,0,0,0,
        1125,1126,1,0,0,0,1126,1127,1,0,0,0,1127,1148,5,192,0,0,1128,1130,
        5,49,0,0,1129,1131,5,207,0,0,1130,1129,1,0,0,0,1130,1131,1,0,0,0,
        1131,1132,1,0,0,0,1132,1148,5,192,0,0,1133,1134,5,15,0,0,1134,1148,
        5,227,0,0,1135,1136,5,17,0,0,1136,1137,5,18,0,0,1137,1144,3,200,
        100,0,1138,1145,5,136,0,0,1139,1141,5,9,0,0,1140,1142,5,207,0,0,
        1141,1140,1,0,0,0,1141,1142,1,0,0,0,1142,1143,1,0,0,0,1143,1145,
        5,199,0,0,1144,1138,1,0,0,0,1144,1139,1,0,0,0,1145,1148,1,0,0,0,
        1146,1148,5,19,0,0,1147,1098,1,0,0,0,1147,1099,1,0,0,0,1147,1100,
        1,0,0,0,1147,1105,1,0,0,0,1147,1111,1,0,0,0,1147,1116,1,0,0,0,1147,
        1118,1,0,0,0,1147,1123,1,0,0,0,1147,1128,1,0,0,0,1147,1133,1,0,0,
        0,1147,1135,1,0,0,0,1147,1146,1,0,0,0,1148,95,1,0,0,0,1149,1150,
        5,4,0,0,1150,1151,3,188,94,0,1151,1152,3,188,94,0,1152,1153,3,188,
        94,0,1153,1159,3,188,94,0,1154,1155,3,188,94,0,1155,1156,3,188,94,
        0,1156,1157,3,188,94,0,1157,1158,3,188,94,0,1158,1160,1,0,0,0,1159,
        1154,1,0,0,0,1159,1160,1,0,0,0,1160,1161,1,0,0,0,1161,1162,3,196,
        98,0,1162,1166,3,196,98,0,1163,1164,3,196,98,0,1164,1165,3,196,98,
        0,1165,1167,1,0,0,0,1166,1163,1,0,0,0,1166,1167,1,0,0,0,1167,97,
        1,0,0,0,1168,1204,3,100,50,0,1169,1171,5,9,0,0,1170,1172,5,207,0,
        0,1171,1170,1,0,0,0,1171,1172,1,0,0,0,1172,1173,1,0,0,0,1173,1204,
        5,199,0,0,1174,1175,5,61,0,0,1175,1176,5,192,0,0,1176,1177,5,192,
        0,0,1177,1178,3,200,100,0,1178,1179,3,200,100,0,1179,1180,3,200,
        100,0,1180,1204,1,0,0,0,1181,1183,5,42,0,0,1182,1184,5,207,0,0,1183,
        1182,1,0,0,0,1183,1184,1,0,0,0,1184,1185,1,0,0,0,1185,1204,3,200,
        100,0,1186,1188,5,14,0,0,1187,1189,5,207,0,0,1188,1187,1,0,0,0,1188,
        1189,1,0,0,0,1189,1190,1,0,0,0,1190,1204,5,192,0,0,1191,1192,5,67,
        0,0,1192,1204,3,200,100,0,1193,1194,5,68,0,0,1194,1204,3,200,100,
        0,1195,1196,5,15,0,0,1196,1204,5,227,0,0,1197,1198,5,17,0,0,1198,
        1199,5,18,0,0,1199,1204,3,200,100,0,1200,1204,3,102,51,0,1201,1204,
        5,19,0,0,1202,1204,5,63,0,0,1203,1168,1,0,0,0,1203,1169,1,0,0,0,
        1203,1174,1,0,0,0,1203,1181,1,0,0,0,1203,1186,1,0,0,0,1203,1191,
        1,0,0,0,1203,1193,1,0,0,0,1203,1195,1,0,0,0,1203,1197,1,0,0,0,1203,
        1200,1,0,0,0,1203,1201,1,0,0,0,1203,1202,1,0,0,0,1204,99,1,0,0,0,
        1205,1206,5,4,0,0,1206,1207,3,188,94,0,1207,1208,3,188,94,0,1208,
        1209,3,188,94,0,1209,1210,3,188,94,0,1210,1211,3,188,94,0,1211,1212,
        3,196,98,0,1212,1213,3,196,98,0,1213,101,1,0,0,0,1214,1215,5,69,
        0,0,1215,1216,3,188,94,0,1216,1217,3,196,98,0,1217,1218,3,196,98,
        0,1218,103,1,0,0,0,1219,1259,3,106,53,0,1220,1259,3,108,54,0,1221,
        1259,3,110,55,0,1222,1259,3,112,56,0,1223,1259,3,114,57,0,1224,1259,
        3,116,58,0,1225,1259,3,118,59,0,1226,1259,3,120,60,0,1227,1259,3,
        122,61,0,1228,1230,5,9,0,0,1229,1231,5,207,0,0,1230,1229,1,0,0,0,
        1230,1231,1,0,0,0,1231,1232,1,0,0,0,1232,1259,5,199,0,0,1233,1234,
        5,77,0,0,1234,1259,3,200,100,0,1235,1236,5,65,0,0,1236,1259,5,192,
        0,0,1237,1238,5,42,0,0,1238,1240,3,200,100,0,1239,1241,3,200,100,
        0,1240,1239,1,0,0,0,1240,1241,1,0,0,0,1241,1259,1,0,0,0,1242,1243,
        5,15,0,0,1243,1259,5,227,0,0,1244,1245,5,17,0,0,1245,1246,5,18,0,
        0,1246,1253,3,200,100,0,1247,1254,5,136,0,0,1248,1250,5,9,0,0,1249,
        1251,5,207,0,0,1250,1249,1,0,0,0,1250,1251,1,0,0,0,1251,1252,1,0,
        0,0,1252,1254,5,199,0,0,1253,1247,1,0,0,0,1253,1248,1,0,0,0,1254,
        1255,1,0,0,0,1255,1256,5,199,0,0,1256,1259,1,0,0,0,1257,1259,5,19,
        0,0,1258,1219,1,0,0,0,1258,1220,1,0,0,0,1258,1221,1,0,0,0,1258,1222,
        1,0,0,0,1258,1223,1,0,0,0,1258,1224,1,0,0,0,1258,1225,1,0,0,0,1258,
        1226,1,0,0,0,1258,1227,1,0,0,0,1258,1228,1,0,0,0,1258,1233,1,0,0,
        0,1258,1235,1,0,0,0,1258,1237,1,0,0,0,1258,1242,1,0,0,0,1258,1244,
        1,0,0,0,1258,1257,1,0,0,0,1259,105,1,0,0,0,1260,1261,5,71,0,0,1261,
        1263,3,188,94,0,1262,1264,3,188,94,0,1263,1262,1,0,0,0,1263,1264,
        1,0,0,0,1264,1265,1,0,0,0,1265,1267,3,196,98,0,1266,1268,3,196,98,
        0,1267,1266,1,0,0,0,1267,1268,1,0,0,0,1268,107,1,0,0,0,1269,1270,
        5,69,0,0,1270,1271,3,188,94,0,1271,1272,3,196,98,0,1272,109,1,0,
        0,0,1273,1274,5,51,0,0,1274,1275,3,188,94,0,1275,1276,3,188,94,0,
        1276,1277,3,188,94,0,1277,1279,5,199,0,0,1278,1280,5,193,0,0,1279,
        1278,1,0,0,0,1279,1280,1,0,0,0,1280,1281,1,0,0,0,1281,1282,5,199,
        0,0,1282,111,1,0,0,0,1283,1284,5,72,0,0,1284,1285,3,188,94,0,1285,
        113,1,0,0,0,1286,1287,5,66,0,0,1287,1288,3,188,94,0,1288,115,1,0,
        0,0,1289,1290,5,73,0,0,1290,1291,3,188,94,0,1291,117,1,0,0,0,1292,
        1293,5,74,0,0,1293,1294,3,188,94,0,1294,119,1,0,0,0,1295,1296,5,
        75,0,0,1296,1297,5,199,0,0,1297,1298,3,188,94,0,1298,1299,3,188,
        94,0,1299,1300,3,188,94,0,1300,1301,3,188,94,0,1301,1303,3,188,94,
        0,1302,1304,3,188,94,0,1303,1302,1,0,0,0,1303,1304,1,0,0,0,1304,
        121,1,0,0,0,1305,1306,5,76,0,0,1306,1307,3,188,94,0,1307,123,1,0,
        0,0,1308,1426,3,126,63,0,1309,1311,5,9,0,0,1310,1312,5,207,0,0,1311,
        1310,1,0,0,0,1311,1312,1,0,0,0,1312,1313,1,0,0,0,1313,1426,5,199,
        0,0,1314,1315,5,27,0,0,1315,1426,3,200,100,0,1316,1318,5,42,0,0,
        1317,1319,5,207,0,0,1318,1317,1,0,0,0,1318,1319,1,0,0,0,1319,1320,
        1,0,0,0,1320,1426,3,200,100,0,1321,1322,5,79,0,0,1322,1323,3,200,
        100,0,1323,1324,3,200,100,0,1324,1329,3,200,100,0,1325,1326,3,200,
        100,0,1326,1327,3,200,100,0,1327,1328,3,200,100,0,1328,1330,1,0,
        0,0,1329,1325,1,0,0,0,1329,1330,1,0,0,0,1330,1335,1,0,0,0,1331,1332,
        3,200,100,0,1332,1333,3,200,100,0,1333,1334,3,200,100,0,1334,1336,
        1,0,0,0,1335,1331,1,0,0,0,1335,1336,1,0,0,0,1336,1341,1,0,0,0,1337,
        1338,3,200,100,0,1338,1339,3,200,100,0,1339,1340,3,200,100,0,1340,
        1342,1,0,0,0,1341,1337,1,0,0,0,1341,1342,1,0,0,0,1342,1426,1,0,0,
        0,1343,1345,5,14,0,0,1344,1346,5,207,0,0,1345,1344,1,0,0,0,1345,
        1346,1,0,0,0,1346,1347,1,0,0,0,1347,1426,5,192,0,0,1348,1349,5,80,
        0,0,1349,1350,3,200,100,0,1350,1351,3,200,100,0,1351,1356,3,200,
        100,0,1352,1353,3,200,100,0,1353,1354,3,200,100,0,1354,1355,3,200,
        100,0,1355,1357,1,0,0,0,1356,1352,1,0,0,0,1356,1357,1,0,0,0,1357,
        1362,1,0,0,0,1358,1359,3,200,100,0,1359,1360,3,200,100,0,1360,1361,
        3,200,100,0,1361,1363,1,0,0,0,1362,1358,1,0,0,0,1362,1363,1,0,0,
        0,1363,1368,1,0,0,0,1364,1365,3,200,100,0,1365,1366,3,200,100,0,
        1366,1367,3,200,100,0,1367,1369,1,0,0,0,1368,1364,1,0,0,0,1368,1369,
        1,0,0,0,1369,1426,1,0,0,0,1370,1371,5,17,0,0,1371,1372,5,18,0,0,
        1372,1379,3,200,100,0,1373,1380,5,136,0,0,1374,1376,5,9,0,0,1375,
        1377,5,207,0,0,1376,1375,1,0,0,0,1376,1377,1,0,0,0,1377,1378,1,0,
        0,0,1378,1380,5,199,0,0,1379,1373,1,0,0,0,1379,1374,1,0,0,0,1380,
        1426,1,0,0,0,1381,1382,5,81,0,0,1382,1383,3,200,100,0,1383,1384,
        3,200,100,0,1384,1389,3,200,100,0,1385,1386,3,200,100,0,1386,1387,
        3,200,100,0,1387,1388,3,200,100,0,1388,1390,1,0,0,0,1389,1385,1,
        0,0,0,1389,1390,1,0,0,0,1390,1395,1,0,0,0,1391,1392,3,200,100,0,
        1392,1393,3,200,100,0,1393,1394,3,200,100,0,1394,1396,1,0,0,0,1395,
        1391,1,0,0,0,1395,1396,1,0,0,0,1396,1401,1,0,0,0,1397,1398,3,200,
        100,0,1398,1399,3,200,100,0,1399,1400,3,200,100,0,1400,1402,1,0,
        0,0,1401,1397,1,0,0,0,1401,1402,1,0,0,0,1402,1426,1,0,0,0,1403,1426,
        5,19,0,0,1404,1406,5,21,0,0,1405,1407,5,207,0,0,1406,1405,1,0,0,
        0,1406,1407,1,0,0,0,1407,1408,1,0,0,0,1408,1426,3,200,100,0,1409,
        1410,5,82,0,0,1410,1426,5,234,0,0,1411,1412,5,62,0,0,1412,1413,5,
        84,0,0,1413,1415,3,200,100,0,1414,1416,3,200,100,0,1415,1414,1,0,
        0,0,1415,1416,1,0,0,0,1416,1418,1,0,0,0,1417,1419,3,200,100,0,1418,
        1417,1,0,0,0,1418,1419,1,0,0,0,1419,1421,1,0,0,0,1420,1422,3,200,
        100,0,1421,1420,1,0,0,0,1421,1422,1,0,0,0,1422,1426,1,0,0,0,1423,
        1426,5,83,0,0,1424,1426,5,63,0,0,1425,1308,1,0,0,0,1425,1309,1,0,
        0,0,1425,1314,1,0,0,0,1425,1316,1,0,0,0,1425,1321,1,0,0,0,1425,1343,
        1,0,0,0,1425,1348,1,0,0,0,1425,1370,1,0,0,0,1425,1381,1,0,0,0,1425,
        1403,1,0,0,0,1425,1404,1,0,0,0,1425,1409,1,0,0,0,1425,1411,1,0,0,
        0,1425,1423,1,0,0,0,1425,1424,1,0,0,0,1426,125,1,0,0,0,1427,1428,
        5,4,0,0,1428,1429,3,188,94,0,1429,1430,3,188,94,0,1430,1431,3,188,
        94,0,1431,1437,3,188,94,0,1432,1433,3,188,94,0,1433,1434,3,188,94,
        0,1434,1435,3,188,94,0,1435,1436,3,188,94,0,1436,1438,1,0,0,0,1437,
        1432,1,0,0,0,1437,1438,1,0,0,0,1438,1444,1,0,0,0,1439,1440,3,188,
        94,0,1440,1441,3,188,94,0,1441,1442,3,188,94,0,1442,1443,3,188,94,
        0,1443,1445,1,0,0,0,1444,1439,1,0,0,0,1444,1445,1,0,0,0,1445,1451,
        1,0,0,0,1446,1447,3,188,94,0,1447,1448,3,188,94,0,1448,1449,3,188,
        94,0,1449,1450,3,188,94,0,1450,1452,1,0,0,0,1451,1446,1,0,0,0,1451,
        1452,1,0,0,0,1452,127,1,0,0,0,1453,1463,3,130,65,0,1454,1463,3,240,
        120,0,1455,1457,5,21,0,0,1456,1458,5,207,0,0,1457,1456,1,0,0,0,1457,
        1458,1,0,0,0,1458,1459,1,0,0,0,1459,1463,3,200,100,0,1460,1463,5,
        17,0,0,1461,1463,5,19,0,0,1462,1453,1,0,0,0,1462,1454,1,0,0,0,1462,
        1455,1,0,0,0,1462,1460,1,0,0,0,1462,1461,1,0,0,0,1463,129,1,0,0,
        0,1464,1465,5,4,0,0,1465,1466,3,188,94,0,1466,1467,3,196,98,0,1467,
        1468,3,196,98,0,1468,131,1,0,0,0,1469,1501,3,134,67,0,1470,1472,
        5,9,0,0,1471,1473,5,207,0,0,1472,1471,1,0,0,0,1472,1473,1,0,0,0,
        1473,1474,1,0,0,0,1474,1501,5,199,0,0,1475,1476,5,41,0,0,1476,1477,
        3,200,100,0,1477,1478,3,200,100,0,1478,1479,3,200,100,0,1479,1480,
        3,200,100,0,1480,1481,3,200,100,0,1481,1501,1,0,0,0,1482,1484,5,
        42,0,0,1483,1485,5,207,0,0,1484,1483,1,0,0,0,1484,1485,1,0,0,0,1485,
        1486,1,0,0,0,1486,1501,3,200,100,0,1487,1489,5,14,0,0,1488,1490,
        5,207,0,0,1489,1488,1,0,0,0,1489,1490,1,0,0,0,1490,1491,1,0,0,0,
        1491,1501,5,192,0,0,1492,1493,5,15,0,0,1493,1501,5,227,0,0,1494,
        1495,5,17,0,0,1495,1496,5,18,0,0,1496,1501,3,200,100,0,1497,1501,
        5,19,0,0,1498,1499,5,45,0,0,1499,1501,5,231,0,0,1500,1469,1,0,0,
        0,1500,1470,1,0,0,0,1500,1475,1,0,0,0,1500,1482,1,0,0,0,1500,1487,
        1,0,0,0,1500,1492,1,0,0,0,1500,1494,1,0,0,0,1500,1497,1,0,0,0,1500,
        1498,1,0,0,0,1501,133,1,0,0,0,1502,1503,5,4,0,0,1503,1504,3,188,
        94,0,1504,1505,3,188,94,0,1505,1506,3,188,94,0,1506,1507,3,188,94,
        0,1507,1508,3,188,94,0,1508,1509,3,188,94,0,1509,1511,3,196,98,0,
        1510,1512,3,196,98,0,1511,1510,1,0,0,0,1511,1512,1,0,0,0,1512,135,
        1,0,0,0,1513,1583,3,138,69,0,1514,1516,5,9,0,0,1515,1517,5,207,0,
        0,1516,1515,1,0,0,0,1516,1517,1,0,0,0,1517,1518,1,0,0,0,1518,1583,
        5,199,0,0,1519,1520,5,27,0,0,1520,1583,3,200,100,0,1521,1522,5,88,
        0,0,1522,1583,3,200,100,0,1523,1525,5,42,0,0,1524,1526,5,207,0,0,
        1525,1524,1,0,0,0,1525,1526,1,0,0,0,1526,1527,1,0,0,0,1527,1583,
        3,200,100,0,1528,1529,5,79,0,0,1529,1530,3,200,100,0,1530,1531,3,
        200,100,0,1531,1532,3,200,100,0,1532,1533,3,200,100,0,1533,1534,
        3,200,100,0,1534,1535,3,200,100,0,1535,1536,3,200,100,0,1536,1583,
        1,0,0,0,1537,1538,5,89,0,0,1538,1583,5,192,0,0,1539,1540,5,90,0,
        0,1540,1541,3,200,100,0,1541,1542,3,200,100,0,1542,1543,3,200,100,
        0,1543,1544,3,200,100,0,1544,1545,3,200,100,0,1545,1546,3,200,100,
        0,1546,1547,3,200,100,0,1547,1548,3,200,100,0,1548,1583,1,0,0,0,
        1549,1551,5,14,0,0,1550,1552,5,207,0,0,1551,1550,1,0,0,0,1551,1552,
        1,0,0,0,1552,1553,1,0,0,0,1553,1583,5,192,0,0,1554,1555,5,17,0,0,
        1555,1556,5,18,0,0,1556,1563,3,200,100,0,1557,1564,5,136,0,0,1558,
        1560,5,9,0,0,1559,1561,5,207,0,0,1560,1559,1,0,0,0,1560,1561,1,0,
        0,0,1561,1562,1,0,0,0,1562,1564,5,199,0,0,1563,1557,1,0,0,0,1563,
        1558,1,0,0,0,1564,1583,1,0,0,0,1565,1566,5,81,0,0,1566,1567,3,200,
        100,0,1567,1568,3,200,100,0,1568,1569,3,200,100,0,1569,1570,3,200,
        100,0,1570,1571,3,200,100,0,1571,1572,3,200,100,0,1572,1573,3,200,
        100,0,1573,1583,1,0,0,0,1574,1583,5,19,0,0,1575,1576,5,152,0,0,1576,
        1583,5,192,0,0,1577,1578,5,62,0,0,1578,1579,3,200,100,0,1579,1580,
        3,200,100,0,1580,1583,1,0,0,0,1581,1583,5,63,0,0,1582,1513,1,0,0,
        0,1582,1514,1,0,0,0,1582,1519,1,0,0,0,1582,1521,1,0,0,0,1582,1523,
        1,0,0,0,1582,1528,1,0,0,0,1582,1537,1,0,0,0,1582,1539,1,0,0,0,1582,
        1549,1,0,0,0,1582,1554,1,0,0,0,1582,1565,1,0,0,0,1582,1574,1,0,0,
        0,1582,1575,1,0,0,0,1582,1577,1,0,0,0,1582,1581,1,0,0,0,1583,137,
        1,0,0,0,1584,1585,5,4,0,0,1585,1586,3,188,94,0,1586,1587,3,188,94,
        0,1587,1588,3,188,94,0,1588,1589,3,188,94,0,1589,139,1,0,0,0,1590,
        1631,3,142,71,0,1591,1631,3,242,121,0,1592,1594,5,9,0,0,1593,1595,
        5,207,0,0,1594,1593,1,0,0,0,1594,1595,1,0,0,0,1595,1596,1,0,0,0,
        1596,1631,5,199,0,0,1597,1599,5,21,0,0,1598,1600,5,207,0,0,1599,
        1598,1,0,0,0,1599,1600,1,0,0,0,1600,1601,1,0,0,0,1601,1631,3,200,
        100,0,1602,1603,5,45,0,0,1603,1631,5,232,0,0,1604,1605,5,41,0,0,
        1605,1606,3,200,100,0,1606,1607,3,200,100,0,1607,1608,3,200,100,
        0,1608,1631,1,0,0,0,1609,1610,5,92,0,0,1610,1611,3,200,100,0,1611,
        1612,3,200,100,0,1612,1613,3,200,100,0,1613,1631,1,0,0,0,1614,1616,
        5,42,0,0,1615,1617,5,207,0,0,1616,1615,1,0,0,0,1616,1617,1,0,0,0,
        1617,1618,1,0,0,0,1618,1631,3,200,100,0,1619,1621,5,14,0,0,1620,
        1622,5,207,0,0,1621,1620,1,0,0,0,1621,1622,1,0,0,0,1622,1623,1,0,
        0,0,1623,1631,5,192,0,0,1624,1625,5,15,0,0,1625,1631,5,227,0,0,1626,
        1627,5,17,0,0,1627,1628,5,18,0,0,1628,1631,3,200,100,0,1629,1631,
        5,19,0,0,1630,1590,1,0,0,0,1630,1591,1,0,0,0,1630,1592,1,0,0,0,1630,
        1597,1,0,0,0,1630,1602,1,0,0,0,1630,1604,1,0,0,0,1630,1609,1,0,0,
        0,1630,1614,1,0,0,0,1630,1619,1,0,0,0,1630,1624,1,0,0,0,1630,1626,
        1,0,0,0,1630,1629,1,0,0,0,1631,141,1,0,0,0,1632,1633,5,4,0,0,1633,
        1634,3,188,94,0,1634,1635,3,188,94,0,1635,1636,3,188,94,0,1636,1637,
        3,188,94,0,1637,1638,3,188,94,0,1638,1639,3,188,94,0,1639,1640,3,
        188,94,0,1640,1642,3,196,98,0,1641,1643,3,196,98,0,1642,1641,1,0,
        0,0,1642,1643,1,0,0,0,1643,1645,1,0,0,0,1644,1646,3,196,98,0,1645,
        1644,1,0,0,0,1645,1646,1,0,0,0,1646,143,1,0,0,0,1647,1686,3,142,
        71,0,1648,1650,5,9,0,0,1649,1651,5,207,0,0,1650,1649,1,0,0,0,1650,
        1651,1,0,0,0,1651,1652,1,0,0,0,1652,1686,5,199,0,0,1653,1655,5,21,
        0,0,1654,1656,5,207,0,0,1655,1654,1,0,0,0,1655,1656,1,0,0,0,1656,
        1657,1,0,0,0,1657,1686,3,200,100,0,1658,1659,5,41,0,0,1659,1660,
        3,200,100,0,1660,1661,3,200,100,0,1661,1662,3,200,100,0,1662,1686,
        1,0,0,0,1663,1664,5,92,0,0,1664,1665,3,200,100,0,1665,1666,3,200,
        100,0,1666,1667,3,200,100,0,1667,1668,3,200,100,0,1668,1686,1,0,
        0,0,1669,1671,5,42,0,0,1670,1672,5,207,0,0,1671,1670,1,0,0,0,1671,
        1672,1,0,0,0,1672,1673,1,0,0,0,1673,1686,3,200,100,0,1674,1676,5,
        14,0,0,1675,1677,5,207,0,0,1676,1675,1,0,0,0,1676,1677,1,0,0,0,1677,
        1678,1,0,0,0,1678,1686,5,192,0,0,1679,1680,5,15,0,0,1680,1686,5,
        227,0,0,1681,1682,5,17,0,0,1682,1683,5,18,0,0,1683,1686,3,200,100,
        0,1684,1686,5,19,0,0,1685,1647,1,0,0,0,1685,1648,1,0,0,0,1685,1653,
        1,0,0,0,1685,1658,1,0,0,0,1685,1663,1,0,0,0,1685,1669,1,0,0,0,1685,
        1674,1,0,0,0,1685,1679,1,0,0,0,1685,1681,1,0,0,0,1685,1684,1,0,0,
        0,1686,145,1,0,0,0,1687,1719,3,148,74,0,1688,1690,5,9,0,0,1689,1691,
        5,207,0,0,1690,1689,1,0,0,0,1690,1691,1,0,0,0,1691,1692,1,0,0,0,
        1692,1719,5,199,0,0,1693,1694,5,41,0,0,1694,1695,3,200,100,0,1695,
        1696,3,200,100,0,1696,1697,3,200,100,0,1697,1698,3,200,100,0,1698,
        1699,3,200,100,0,1699,1700,3,200,100,0,1700,1701,3,200,100,0,1701,
        1719,1,0,0,0,1702,1704,5,42,0,0,1703,1705,5,207,0,0,1704,1703,1,
        0,0,0,1704,1705,1,0,0,0,1705,1706,1,0,0,0,1706,1719,3,200,100,0,
        1707,1709,5,14,0,0,1708,1710,5,207,0,0,1709,1708,1,0,0,0,1709,1710,
        1,0,0,0,1710,1711,1,0,0,0,1711,1719,5,192,0,0,1712,1713,5,15,0,0,
        1713,1719,5,227,0,0,1714,1715,5,17,0,0,1715,1716,5,18,0,0,1716,1719,
        3,200,100,0,1717,1719,5,19,0,0,1718,1687,1,0,0,0,1718,1688,1,0,0,
        0,1718,1693,1,0,0,0,1718,1702,1,0,0,0,1718,1707,1,0,0,0,1718,1712,
        1,0,0,0,1718,1714,1,0,0,0,1718,1717,1,0,0,0,1719,147,1,0,0,0,1720,
        1721,5,4,0,0,1721,1722,3,188,94,0,1722,1723,3,188,94,0,1723,1724,
        3,188,94,0,1724,1725,3,188,94,0,1725,1726,3,188,94,0,1726,1727,3,
        188,94,0,1727,1728,3,188,94,0,1728,1729,3,188,94,0,1729,1730,3,196,
        98,0,1730,1731,3,196,98,0,1731,149,1,0,0,0,1732,1776,3,152,76,0,
        1733,1735,5,9,0,0,1734,1736,5,207,0,0,1735,1734,1,0,0,0,1735,1736,
        1,0,0,0,1736,1737,1,0,0,0,1737,1776,5,199,0,0,1738,1739,5,96,0,0,
        1739,1776,5,199,0,0,1740,1741,5,61,0,0,1741,1742,5,192,0,0,1742,
        1743,5,192,0,0,1743,1776,3,200,100,0,1744,1745,5,77,0,0,1745,1776,
        3,200,100,0,1746,1748,5,42,0,0,1747,1749,5,207,0,0,1748,1747,1,0,
        0,0,1748,1749,1,0,0,0,1749,1750,1,0,0,0,1750,1776,3,200,100,0,1751,
        1753,5,14,0,0,1752,1754,5,207,0,0,1753,1752,1,0,0,0,1753,1754,1,
        0,0,0,1754,1755,1,0,0,0,1755,1776,5,192,0,0,1756,1757,5,15,0,0,1757,
        1776,5,227,0,0,1758,1759,5,17,0,0,1759,1760,5,18,0,0,1760,1767,3,
        200,100,0,1761,1768,5,136,0,0,1762,1764,5,9,0,0,1763,1765,5,207,
        0,0,1764,1763,1,0,0,0,1764,1765,1,0,0,0,1765,1766,1,0,0,0,1766,1768,
        5,199,0,0,1767,1761,1,0,0,0,1767,1762,1,0,0,0,1768,1776,1,0,0,0,
        1769,1776,5,19,0,0,1770,1771,5,62,0,0,1771,1772,7,1,0,0,1772,1773,
        5,192,0,0,1773,1776,5,192,0,0,1774,1776,5,63,0,0,1775,1732,1,0,0,
        0,1775,1733,1,0,0,0,1775,1738,1,0,0,0,1775,1740,1,0,0,0,1775,1744,
        1,0,0,0,1775,1746,1,0,0,0,1775,1751,1,0,0,0,1775,1756,1,0,0,0,1775,
        1758,1,0,0,0,1775,1769,1,0,0,0,1775,1770,1,0,0,0,1775,1774,1,0,0,
        0,1776,151,1,0,0,0,1777,1778,5,4,0,0,1778,1779,3,188,94,0,1779,1780,
        3,188,94,0,1780,1781,3,188,94,0,1781,1782,3,188,94,0,1782,1783,3,
        188,94,0,1783,1784,3,188,94,0,1784,1785,3,188,94,0,1785,1786,3,188,
        94,0,1786,1787,3,188,94,0,1787,1788,3,188,94,0,1788,1790,3,188,94,
        0,1789,1791,3,188,94,0,1790,1789,1,0,0,0,1790,1791,1,0,0,0,1791,
        153,1,0,0,0,1792,1850,3,156,78,0,1793,1850,3,244,122,0,1794,1796,
        5,9,0,0,1795,1797,5,207,0,0,1796,1795,1,0,0,0,1796,1797,1,0,0,0,
        1797,1798,1,0,0,0,1798,1850,5,199,0,0,1799,1801,5,42,0,0,1800,1802,
        5,207,0,0,1801,1800,1,0,0,0,1801,1802,1,0,0,0,1802,1803,1,0,0,0,
        1803,1804,5,199,0,0,1804,1850,3,200,100,0,1805,1807,5,14,0,0,1806,
        1808,5,207,0,0,1807,1806,1,0,0,0,1807,1808,1,0,0,0,1808,1809,1,0,
        0,0,1809,1850,5,192,0,0,1810,1812,5,15,0,0,1811,1813,5,226,0,0,1812,
        1811,1,0,0,0,1812,1813,1,0,0,0,1813,1814,1,0,0,0,1814,1815,5,228,
        0,0,1815,1850,5,227,0,0,1816,1818,5,98,0,0,1817,1819,5,207,0,0,1818,
        1817,1,0,0,0,1818,1819,1,0,0,0,1819,1820,1,0,0,0,1820,1821,5,199,
        0,0,1821,1850,3,200,100,0,1822,1824,5,99,0,0,1823,1825,5,207,0,0,
        1824,1823,1,0,0,0,1824,1825,1,0,0,0,1825,1826,1,0,0,0,1826,1827,
        5,199,0,0,1827,1850,3,200,100,0,1828,1830,5,100,0,0,1829,1831,5,
        207,0,0,1830,1829,1,0,0,0,1830,1831,1,0,0,0,1831,1832,1,0,0,0,1832,
        1833,5,199,0,0,1833,1834,3,200,100,0,1834,1835,3,200,100,0,1835,
        1850,1,0,0,0,1836,1837,5,17,0,0,1837,1838,5,18,0,0,1838,1845,3,200,
        100,0,1839,1846,5,136,0,0,1840,1842,5,9,0,0,1841,1843,5,207,0,0,
        1842,1841,1,0,0,0,1842,1843,1,0,0,0,1843,1844,1,0,0,0,1844,1846,
        5,199,0,0,1845,1839,1,0,0,0,1845,1840,1,0,0,0,1846,1850,1,0,0,0,
        1847,1850,5,19,0,0,1848,1850,5,101,0,0,1849,1792,1,0,0,0,1849,1793,
        1,0,0,0,1849,1794,1,0,0,0,1849,1799,1,0,0,0,1849,1805,1,0,0,0,1849,
        1810,1,0,0,0,1849,1816,1,0,0,0,1849,1822,1,0,0,0,1849,1828,1,0,0,
        0,1849,1836,1,0,0,0,1849,1847,1,0,0,0,1849,1848,1,0,0,0,1850,155,
        1,0,0,0,1851,1852,5,4,0,0,1852,1853,3,188,94,0,1853,1854,3,188,94,
        0,1854,1856,3,196,98,0,1855,1857,3,196,98,0,1856,1855,1,0,0,0,1856,
        1857,1,0,0,0,1857,157,1,0,0,0,1858,1908,3,160,80,0,1859,1908,3,246,
        123,0,1860,1862,5,9,0,0,1861,1863,5,207,0,0,1862,1861,1,0,0,0,1862,
        1863,1,0,0,0,1863,1864,1,0,0,0,1864,1908,5,199,0,0,1865,1866,5,103,
        0,0,1866,1908,5,192,0,0,1867,1868,5,41,0,0,1868,1869,3,200,100,0,
        1869,1870,3,200,100,0,1870,1908,1,0,0,0,1871,1873,5,42,0,0,1872,
        1874,5,207,0,0,1873,1872,1,0,0,0,1873,1874,1,0,0,0,1874,1875,1,0,
        0,0,1875,1908,3,200,100,0,1876,1878,5,14,0,0,1877,1879,5,207,0,0,
        1878,1877,1,0,0,0,1878,1879,1,0,0,0,1879,1880,1,0,0,0,1880,1908,
        5,192,0,0,1881,1882,5,17,0,0,1882,1883,5,18,0,0,1883,1890,3,200,
        100,0,1884,1891,5,136,0,0,1885,1887,5,9,0,0,1886,1888,5,207,0,0,
        1887,1886,1,0,0,0,1887,1888,1,0,0,0,1888,1889,1,0,0,0,1889,1891,
        5,199,0,0,1890,1884,1,0,0,0,1890,1885,1,0,0,0,1891,1908,1,0,0,0,
        1892,1908,5,19,0,0,1893,1894,5,104,0,0,1894,1908,5,199,0,0,1895,
        1896,5,105,0,0,1896,1897,3,200,100,0,1897,1898,5,192,0,0,1898,1908,
        1,0,0,0,1899,1908,5,106,0,0,1900,1908,5,107,0,0,1901,1908,5,108,
        0,0,1902,1908,5,109,0,0,1903,1908,5,110,0,0,1904,1908,5,111,0,0,
        1905,1906,5,112,0,0,1906,1908,5,192,0,0,1907,1858,1,0,0,0,1907,1859,
        1,0,0,0,1907,1860,1,0,0,0,1907,1865,1,0,0,0,1907,1867,1,0,0,0,1907,
        1871,1,0,0,0,1907,1876,1,0,0,0,1907,1881,1,0,0,0,1907,1892,1,0,0,
        0,1907,1893,1,0,0,0,1907,1895,1,0,0,0,1907,1899,1,0,0,0,1907,1900,
        1,0,0,0,1907,1901,1,0,0,0,1907,1902,1,0,0,0,1907,1903,1,0,0,0,1907,
        1904,1,0,0,0,1907,1905,1,0,0,0,1908,159,1,0,0,0,1909,1910,5,4,0,
        0,1910,1911,3,188,94,0,1911,1912,3,188,94,0,1912,1913,3,188,94,0,
        1913,1914,3,188,94,0,1914,1915,3,188,94,0,1915,1917,3,196,98,0,1916,
        1918,3,196,98,0,1917,1916,1,0,0,0,1917,1918,1,0,0,0,1918,1920,1,
        0,0,0,1919,1921,3,196,98,0,1920,1919,1,0,0,0,1920,1921,1,0,0,0,1921,
        161,1,0,0,0,1922,1958,3,164,82,0,1923,1925,5,9,0,0,1924,1926,5,207,
        0,0,1925,1924,1,0,0,0,1925,1926,1,0,0,0,1926,1927,1,0,0,0,1927,1958,
        5,199,0,0,1928,1929,5,103,0,0,1929,1958,5,192,0,0,1930,1931,5,41,
        0,0,1931,1932,3,200,100,0,1932,1933,3,200,100,0,1933,1958,1,0,0,
        0,1934,1936,5,42,0,0,1935,1937,5,207,0,0,1936,1935,1,0,0,0,1936,
        1937,1,0,0,0,1937,1938,1,0,0,0,1938,1958,3,200,100,0,1939,1941,5,
        14,0,0,1940,1942,5,207,0,0,1941,1940,1,0,0,0,1941,1942,1,0,0,0,1942,
        1943,1,0,0,0,1943,1958,5,192,0,0,1944,1958,5,106,0,0,1945,1958,5,
        107,0,0,1946,1958,5,105,0,0,1947,1958,5,108,0,0,1948,1958,5,109,
        0,0,1949,1958,5,112,0,0,1950,1951,5,17,0,0,1951,1958,5,18,0,0,1952,
        1958,5,19,0,0,1953,1954,5,104,0,0,1954,1958,5,199,0,0,1955,1958,
        5,110,0,0,1956,1958,5,111,0,0,1957,1922,1,0,0,0,1957,1923,1,0,0,
        0,1957,1928,1,0,0,0,1957,1930,1,0,0,0,1957,1934,1,0,0,0,1957,1939,
        1,0,0,0,1957,1944,1,0,0,0,1957,1945,1,0,0,0,1957,1946,1,0,0,0,1957,
        1947,1,0,0,0,1957,1948,1,0,0,0,1957,1949,1,0,0,0,1957,1950,1,0,0,
        0,1957,1952,1,0,0,0,1957,1953,1,0,0,0,1957,1955,1,0,0,0,1957,1956,
        1,0,0,0,1958,163,1,0,0,0,1959,1960,5,4,0,0,1960,1961,3,188,94,0,
        1961,1962,3,188,94,0,1962,1963,3,188,94,0,1963,1964,3,188,94,0,1964,
        1965,3,188,94,0,1965,1966,3,188,94,0,1966,1968,3,196,98,0,1967,1969,
        3,196,98,0,1968,1967,1,0,0,0,1968,1969,1,0,0,0,1969,165,1,0,0,0,
        1970,1991,3,168,84,0,1971,1973,5,9,0,0,1972,1974,5,207,0,0,1973,
        1972,1,0,0,0,1973,1974,1,0,0,0,1974,1975,1,0,0,0,1975,1991,5,199,
        0,0,1976,1978,5,42,0,0,1977,1979,5,207,0,0,1978,1977,1,0,0,0,1978,
        1979,1,0,0,0,1979,1980,1,0,0,0,1980,1991,3,200,100,0,1981,1983,5,
        14,0,0,1982,1984,5,207,0,0,1983,1982,1,0,0,0,1983,1984,1,0,0,0,1984,
        1985,1,0,0,0,1985,1991,5,192,0,0,1986,1987,5,17,0,0,1987,1988,5,
        18,0,0,1988,1991,3,200,100,0,1989,1991,5,19,0,0,1990,1970,1,0,0,
        0,1990,1971,1,0,0,0,1990,1976,1,0,0,0,1990,1981,1,0,0,0,1990,1986,
        1,0,0,0,1990,1989,1,0,0,0,1991,167,1,0,0,0,1992,1993,5,4,0,0,1993,
        1994,3,188,94,0,1994,1995,3,188,94,0,1995,1996,3,196,98,0,1996,1997,
        3,196,98,0,1997,1998,3,196,98,0,1998,169,1,0,0,0,1999,2026,3,172,
        86,0,2000,2002,5,9,0,0,2001,2003,5,207,0,0,2002,2001,1,0,0,0,2002,
        2003,1,0,0,0,2003,2004,1,0,0,0,2004,2026,5,199,0,0,2005,2006,5,116,
        0,0,2006,2026,5,192,0,0,2007,2008,5,41,0,0,2008,2026,3,200,100,0,
        2009,2011,5,42,0,0,2010,2012,5,207,0,0,2011,2010,1,0,0,0,2011,2012,
        1,0,0,0,2012,2013,1,0,0,0,2013,2026,3,200,100,0,2014,2016,5,14,0,
        0,2015,2017,5,207,0,0,2016,2015,1,0,0,0,2016,2017,1,0,0,0,2017,2018,
        1,0,0,0,2018,2026,5,192,0,0,2019,2020,5,17,0,0,2020,2021,5,18,0,
        0,2021,2026,3,200,100,0,2022,2026,5,19,0,0,2023,2024,5,112,0,0,2024,
        2026,5,192,0,0,2025,1999,1,0,0,0,2025,2000,1,0,0,0,2025,2005,1,0,
        0,0,2025,2007,1,0,0,0,2025,2009,1,0,0,0,2025,2014,1,0,0,0,2025,2019,
        1,0,0,0,2025,2022,1,0,0,0,2025,2023,1,0,0,0,2026,171,1,0,0,0,2027,
        2028,5,4,0,0,2028,2029,3,188,94,0,2029,2030,3,188,94,0,2030,2031,
        3,188,94,0,2031,2033,3,196,98,0,2032,2034,3,196,98,0,2033,2032,1,
        0,0,0,2033,2034,1,0,0,0,2034,173,1,0,0,0,2035,2057,3,176,88,0,2036,
        2057,3,248,124,0,2037,2039,5,9,0,0,2038,2040,5,207,0,0,2039,2038,
        1,0,0,0,2039,2040,1,0,0,0,2040,2041,1,0,0,0,2041,2057,5,199,0,0,
        2042,2044,5,42,0,0,2043,2045,5,207,0,0,2044,2043,1,0,0,0,2044,2045,
        1,0,0,0,2045,2046,1,0,0,0,2046,2057,3,200,100,0,2047,2049,5,14,0,
        0,2048,2050,5,207,0,0,2049,2048,1,0,0,0,2049,2050,1,0,0,0,2050,2051,
        1,0,0,0,2051,2057,5,192,0,0,2052,2053,5,17,0,0,2053,2054,5,18,0,
        0,2054,2057,3,200,100,0,2055,2057,5,19,0,0,2056,2035,1,0,0,0,2056,
        2036,1,0,0,0,2056,2037,1,0,0,0,2056,2042,1,0,0,0,2056,2047,1,0,0,
        0,2056,2052,1,0,0,0,2056,2055,1,0,0,0,2057,175,1,0,0,0,2058,2059,
        5,4,0,0,2059,2060,3,188,94,0,2060,2061,3,188,94,0,2061,2062,3,188,
        94,0,2062,177,1,0,0,0,2063,2131,3,180,90,0,2064,2131,3,250,125,0,
        2065,2067,5,117,0,0,2066,2068,5,207,0,0,2067,2066,1,0,0,0,2067,2068,
        1,0,0,0,2068,2069,1,0,0,0,2069,2131,3,200,100,0,2070,2072,5,118,
        0,0,2071,2073,5,207,0,0,2072,2071,1,0,0,0,2072,2073,1,0,0,0,2073,
        2074,1,0,0,0,2074,2131,3,200,100,0,2075,2077,5,119,0,0,2076,2078,
        5,207,0,0,2077,2076,1,0,0,0,2077,2078,1,0,0,0,2078,2079,1,0,0,0,
        2079,2131,5,192,0,0,2080,2082,5,120,0,0,2081,2083,5,207,0,0,2082,
        2081,1,0,0,0,2082,2083,1,0,0,0,2083,2084,1,0,0,0,2084,2131,5,192,
        0,0,2085,2087,5,121,0,0,2086,2088,5,207,0,0,2087,2086,1,0,0,0,2087,
        2088,1,0,0,0,2088,2089,1,0,0,0,2089,2131,5,192,0,0,2090,2092,5,122,
        0,0,2091,2093,5,207,0,0,2092,2091,1,0,0,0,2092,2093,1,0,0,0,2093,
        2094,1,0,0,0,2094,2131,5,199,0,0,2095,2097,5,123,0,0,2096,2098,5,
        207,0,0,2097,2096,1,0,0,0,2097,2098,1,0,0,0,2098,2099,1,0,0,0,2099,
        2131,3,200,100,0,2100,2102,5,124,0,0,2101,2103,5,207,0,0,2102,2101,
        1,0,0,0,2102,2103,1,0,0,0,2103,2104,1,0,0,0,2104,2131,3,200,100,
        0,2105,2107,5,125,0,0,2106,2108,5,207,0,0,2107,2106,1,0,0,0,2107,
        2108,1,0,0,0,2108,2109,1,0,0,0,2109,2131,3,200,100,0,2110,2112,5,
        126,0,0,2111,2113,5,207,0,0,2112,2111,1,0,0,0,2112,2113,1,0,0,0,
        2113,2114,1,0,0,0,2114,2131,3,200,100,0,2115,2117,5,127,0,0,2116,
        2118,5,207,0,0,2117,2116,1,0,0,0,2117,2118,1,0,0,0,2118,2119,1,0,
        0,0,2119,2131,5,192,0,0,2120,2122,5,128,0,0,2121,2123,5,207,0,0,
        2122,2121,1,0,0,0,2122,2123,1,0,0,0,2123,2124,1,0,0,0,2124,2131,
        5,192,0,0,2125,2127,5,129,0,0,2126,2128,5,207,0,0,2127,2126,1,0,
        0,0,2127,2128,1,0,0,0,2128,2129,1,0,0,0,2129,2131,5,192,0,0,2130,
        2063,1,0,0,0,2130,2064,1,0,0,0,2130,2065,1,0,0,0,2130,2070,1,0,0,
        0,2130,2075,1,0,0,0,2130,2080,1,0,0,0,2130,2085,1,0,0,0,2130,2090,
        1,0,0,0,2130,2095,1,0,0,0,2130,2100,1,0,0,0,2130,2105,1,0,0,0,2130,
        2110,1,0,0,0,2130,2115,1,0,0,0,2130,2120,1,0,0,0,2130,2125,1,0,0,
        0,2131,179,1,0,0,0,2132,2133,5,4,0,0,2133,2134,3,188,94,0,2134,2135,
        3,188,94,0,2135,181,1,0,0,0,2136,2137,5,132,0,0,2137,2141,5,36,0,
        0,2138,2140,3,184,92,0,2139,2138,1,0,0,0,2140,2143,1,0,0,0,2141,
        2139,1,0,0,0,2141,2142,1,0,0,0,2142,2144,1,0,0,0,2143,2141,1,0,0,
        0,2144,2145,5,2,0,0,2145,183,1,0,0,0,2146,2150,5,53,0,0,2147,2149,
        3,186,93,0,2148,2147,1,0,0,0,2149,2152,1,0,0,0,2150,2148,1,0,0,0,
        2150,2151,1,0,0,0,2151,2153,1,0,0,0,2152,2150,1,0,0,0,2153,2157,
        5,2,0,0,2154,2157,5,54,0,0,2155,2157,5,39,0,0,2156,2146,1,0,0,0,
        2156,2154,1,0,0,0,2156,2155,1,0,0,0,2157,185,1,0,0,0,2158,2160,5,
        133,0,0,2159,2161,5,207,0,0,2160,2159,1,0,0,0,2160,2161,1,0,0,0,
        2161,2162,1,0,0,0,2162,2174,3,188,94,0,2163,2165,5,134,0,0,2164,
        2166,5,207,0,0,2165,2164,1,0,0,0,2165,2166,1,0,0,0,2166,2167,1,0,
        0,0,2167,2174,3,200,100,0,2168,2170,5,56,0,0,2169,2171,5,207,0,0,
        2170,2169,1,0,0,0,2170,2171,1,0,0,0,2171,2172,1,0,0,0,2172,2174,
        3,200,100,0,2173,2158,1,0,0,0,2173,2163,1,0,0,0,2173,2168,1,0,0,
        0,2174,187,1,0,0,0,2175,2176,5,204,0,0,2176,2177,3,190,95,0,2177,
        2178,5,205,0,0,2178,189,1,0,0,0,2179,2184,3,192,96,0,2180,2181,5,
        187,0,0,2181,2183,3,192,96,0,2182,2180,1,0,0,0,2183,2186,1,0,0,0,
        2184,2182,1,0,0,0,2184,2185,1,0,0,0,2185,191,1,0,0,0,2186,2184,1,
        0,0,0,2187,2192,3,194,97,0,2188,2189,5,188,0,0,2189,2191,3,194,97,
        0,2190,2188,1,0,0,0,2191,2194,1,0,0,0,2192,2190,1,0,0,0,2192,2193,
        1,0,0,0,2193,193,1,0,0,0,2194,2192,1,0,0,0,2195,2196,6,97,-1,0,2196,
        2197,5,204,0,0,2197,2198,3,190,95,0,2198,2199,5,205,0,0,2199,2335,
        1,0,0,0,2200,2335,5,136,0,0,2201,2202,5,138,0,0,2202,2203,7,2,0,
        0,2203,2204,7,3,0,0,2204,2335,7,2,0,0,2205,2207,5,139,0,0,2206,2208,
        5,219,0,0,2207,2206,1,0,0,0,2207,2208,1,0,0,0,2208,2209,1,0,0,0,
        2209,2210,5,220,0,0,2210,2211,5,221,0,0,2211,2335,3,198,99,0,2212,
        2213,5,140,0,0,2213,2335,3,194,97,29,2214,2215,5,141,0,0,2215,2335,
        3,194,97,28,2216,2217,5,142,0,0,2217,2335,3,194,97,27,2218,2226,
        5,143,0,0,2219,2227,5,200,0,0,2220,2223,5,199,0,0,2221,2222,5,206,
        0,0,2222,2224,5,199,0,0,2223,2221,1,0,0,0,2223,2224,1,0,0,0,2224,
        2227,1,0,0,0,2225,2227,5,213,0,0,2226,2219,1,0,0,0,2226,2220,1,0,
        0,0,2226,2225,1,0,0,0,2227,2335,1,0,0,0,2228,2335,5,144,0,0,2229,
        2230,5,145,0,0,2230,2335,5,192,0,0,2231,2335,5,146,0,0,2232,2245,
        5,147,0,0,2233,2246,5,200,0,0,2234,2237,5,199,0,0,2235,2236,5,206,
        0,0,2236,2238,5,199,0,0,2237,2235,1,0,0,0,2237,2238,1,0,0,0,2238,
        2246,1,0,0,0,2239,2242,5,195,0,0,2240,2241,5,206,0,0,2241,2243,5,
        195,0,0,2242,2240,1,0,0,0,2242,2243,1,0,0,0,2243,2246,1,0,0,0,2244,
        2246,5,213,0,0,2245,2233,1,0,0,0,2245,2234,1,0,0,0,2245,2239,1,0,
        0,0,2245,2244,1,0,0,0,2246,2335,1,0,0,0,2247,2248,5,189,0,0,2248,
        2335,3,194,97,21,2249,2250,5,148,0,0,2250,2251,5,204,0,0,2251,2253,
        3,198,99,0,2252,2254,5,190,0,0,2253,2252,1,0,0,0,2253,2254,1,0,0,
        0,2254,2255,1,0,0,0,2255,2257,3,198,99,0,2256,2258,5,190,0,0,2257,
        2256,1,0,0,0,2257,2258,1,0,0,0,2258,2259,1,0,0,0,2259,2260,3,198,
        99,0,2260,2261,5,205,0,0,2261,2262,5,149,0,0,2262,2263,3,198,99,
        0,2263,2335,1,0,0,0,2264,2265,5,148,0,0,2265,2266,5,204,0,0,2266,
        2268,5,185,0,0,2267,2269,5,207,0,0,2268,2267,1,0,0,0,2268,2269,1,
        0,0,0,2269,2270,1,0,0,0,2270,2272,3,188,94,0,2271,2273,5,190,0,0,
        2272,2271,1,0,0,0,2272,2273,1,0,0,0,2273,2279,1,0,0,0,2274,2276,
        5,186,0,0,2275,2277,5,207,0,0,2276,2275,1,0,0,0,2276,2277,1,0,0,
        0,2277,2278,1,0,0,0,2278,2280,3,188,94,0,2279,2274,1,0,0,0,2279,
        2280,1,0,0,0,2280,2281,1,0,0,0,2281,2282,5,205,0,0,2282,2283,5,149,
        0,0,2283,2284,3,198,99,0,2284,2335,1,0,0,0,2285,2335,5,150,0,0,2286,
        2335,5,151,0,0,2287,2295,5,152,0,0,2288,2296,5,201,0,0,2289,2292,
        5,192,0,0,2290,2291,5,206,0,0,2291,2293,5,192,0,0,2292,2290,1,0,
        0,0,2292,2293,1,0,0,0,2293,2296,1,0,0,0,2294,2296,5,213,0,0,2295,
        2288,1,0,0,0,2295,2289,1,0,0,0,2295,2294,1,0,0,0,2296,2335,1,0,0,
        0,2297,2305,5,153,0,0,2298,2306,5,200,0,0,2299,2302,5,199,0,0,2300,
        2301,5,206,0,0,2301,2303,5,199,0,0,2302,2300,1,0,0,0,2302,2303,1,
        0,0,0,2303,2306,1,0,0,0,2304,2306,5,213,0,0,2305,2298,1,0,0,0,2305,
        2299,1,0,0,0,2305,2304,1,0,0,0,2306,2335,1,0,0,0,2307,2320,5,155,
        0,0,2308,2321,5,200,0,0,2309,2312,5,199,0,0,2310,2311,5,206,0,0,
        2311,2313,5,199,0,0,2312,2310,1,0,0,0,2312,2313,1,0,0,0,2313,2321,
        1,0,0,0,2314,2317,5,195,0,0,2315,2316,5,206,0,0,2316,2318,5,195,
        0,0,2317,2315,1,0,0,0,2317,2318,1,0,0,0,2318,2321,1,0,0,0,2319,2321,
        5,213,0,0,2320,2308,1,0,0,0,2320,2309,1,0,0,0,2320,2314,1,0,0,0,
        2320,2319,1,0,0,0,2321,2335,1,0,0,0,2322,2335,5,156,0,0,2323,2335,
        5,157,0,0,2324,2335,5,158,0,0,2325,2335,5,159,0,0,2326,2335,5,160,
        0,0,2327,2335,5,161,0,0,2328,2335,5,162,0,0,2329,2335,5,163,0,0,
        2330,2335,5,164,0,0,2331,2335,5,165,0,0,2332,2335,5,130,0,0,2333,
        2335,5,131,0,0,2334,2195,1,0,0,0,2334,2200,1,0,0,0,2334,2201,1,0,
        0,0,2334,2205,1,0,0,0,2334,2212,1,0,0,0,2334,2214,1,0,0,0,2334,2216,
        1,0,0,0,2334,2218,1,0,0,0,2334,2228,1,0,0,0,2334,2229,1,0,0,0,2334,
        2231,1,0,0,0,2334,2232,1,0,0,0,2334,2247,1,0,0,0,2334,2249,1,0,0,
        0,2334,2264,1,0,0,0,2334,2285,1,0,0,0,2334,2286,1,0,0,0,2334,2287,
        1,0,0,0,2334,2297,1,0,0,0,2334,2307,1,0,0,0,2334,2322,1,0,0,0,2334,
        2323,1,0,0,0,2334,2324,1,0,0,0,2334,2325,1,0,0,0,2334,2326,1,0,0,
        0,2334,2327,1,0,0,0,2334,2328,1,0,0,0,2334,2329,1,0,0,0,2334,2330,
        1,0,0,0,2334,2331,1,0,0,0,2334,2332,1,0,0,0,2334,2333,1,0,0,0,2335,
        2344,1,0,0,0,2336,2337,10,32,0,0,2337,2338,5,137,0,0,2338,2343,3,
        198,99,0,2339,2340,10,14,0,0,2340,2341,5,154,0,0,2341,2343,3,198,
        99,0,2342,2336,1,0,0,0,2342,2339,1,0,0,0,2343,2346,1,0,0,0,2344,
        2342,1,0,0,0,2344,2345,1,0,0,0,2345,195,1,0,0,0,2346,2344,1,0,0,
        0,2347,2348,7,4,0,0,2348,197,1,0,0,0,2349,2350,7,5,0,0,2350,199,
        1,0,0,0,2351,2352,7,4,0,0,2352,201,1,0,0,0,2353,2354,7,5,0,0,2354,
        203,1,0,0,0,2355,2366,5,135,0,0,2356,2364,5,236,0,0,2357,2359,5,
        239,0,0,2358,2357,1,0,0,0,2359,2362,1,0,0,0,2360,2358,1,0,0,0,2360,
        2361,1,0,0,0,2361,2365,1,0,0,0,2362,2360,1,0,0,0,2363,2365,5,240,
        0,0,2364,2360,1,0,0,0,2364,2363,1,0,0,0,2365,2367,1,0,0,0,2366,2356,
        1,0,0,0,2366,2367,1,0,0,0,2367,2368,1,0,0,0,2368,2372,5,237,0,0,
        2369,2371,5,239,0,0,2370,2369,1,0,0,0,2371,2374,1,0,0,0,2372,2370,
        1,0,0,0,2372,2373,1,0,0,0,2373,2375,1,0,0,0,2374,2372,1,0,0,0,2375,
        2376,5,238,0,0,2376,205,1,0,0,0,2377,2378,5,166,0,0,2378,2379,3,
        208,104,0,2379,2380,3,188,94,0,2380,207,1,0,0,0,2381,2382,7,6,0,
        0,2382,2383,3,210,105,0,2383,2384,5,242,0,0,2384,2388,1,0,0,0,2385,
        2386,5,169,0,0,2386,2388,3,218,109,0,2387,2381,1,0,0,0,2387,2385,
        1,0,0,0,2388,209,1,0,0,0,2389,2392,5,252,0,0,2390,2391,5,243,0,0,
        2391,2393,3,212,106,0,2392,2390,1,0,0,0,2392,2393,1,0,0,0,2393,211,
        1,0,0,0,2394,2397,3,214,107,0,2395,2396,7,7,0,0,2396,2398,3,212,
        106,0,2397,2395,1,0,0,0,2397,2398,1,0,0,0,2398,213,1,0,0,0,2399,
        2407,5,252,0,0,2400,2407,3,216,108,0,2401,2407,5,250,0,0,2402,2407,
        5,251,0,0,2403,2407,5,276,0,0,2404,2407,5,275,0,0,2405,2407,5,277,
        0,0,2406,2399,1,0,0,0,2406,2400,1,0,0,0,2406,2401,1,0,0,0,2406,2402,
        1,0,0,0,2406,2403,1,0,0,0,2406,2404,1,0,0,0,2406,2405,1,0,0,0,2407,
        215,1,0,0,0,2408,2409,5,253,0,0,2409,2410,5,279,0,0,2410,2411,3,
        214,107,0,2411,2412,5,242,0,0,2412,2528,1,0,0,0,2413,2414,5,254,
        0,0,2414,2415,5,279,0,0,2415,2416,3,214,107,0,2416,2417,5,242,0,
        0,2417,2528,1,0,0,0,2418,2419,5,256,0,0,2419,2420,5,279,0,0,2420,
        2421,3,214,107,0,2421,2422,5,242,0,0,2422,2528,1,0,0,0,2423,2424,
        5,257,0,0,2424,2425,5,279,0,0,2425,2426,3,214,107,0,2426,2427,5,
        242,0,0,2427,2528,1,0,0,0,2428,2429,5,258,0,0,2429,2430,5,279,0,
        0,2430,2431,3,214,107,0,2431,2432,5,242,0,0,2432,2528,1,0,0,0,2433,
        2434,5,259,0,0,2434,2435,5,279,0,0,2435,2436,3,214,107,0,2436,2437,
        5,242,0,0,2437,2528,1,0,0,0,2438,2439,5,260,0,0,2439,2440,5,279,
        0,0,2440,2441,3,214,107,0,2441,2442,5,242,0,0,2442,2528,1,0,0,0,
        2443,2444,5,261,0,0,2444,2445,5,279,0,0,2445,2446,3,214,107,0,2446,
        2447,5,242,0,0,2447,2528,1,0,0,0,2448,2449,5,262,0,0,2449,2450,5,
        279,0,0,2450,2451,3,214,107,0,2451,2452,5,242,0,0,2452,2528,1,0,
        0,0,2453,2454,5,263,0,0,2454,2455,5,279,0,0,2455,2456,3,214,107,
        0,2456,2457,5,242,0,0,2457,2528,1,0,0,0,2458,2459,5,264,0,0,2459,
        2460,5,279,0,0,2460,2461,3,214,107,0,2461,2462,5,242,0,0,2462,2528,
        1,0,0,0,2463,2464,5,265,0,0,2464,2465,5,279,0,0,2465,2470,3,214,
        107,0,2466,2467,5,249,0,0,2467,2469,3,214,107,0,2468,2466,1,0,0,
        0,2469,2472,1,0,0,0,2470,2468,1,0,0,0,2470,2471,1,0,0,0,2471,2473,
        1,0,0,0,2472,2470,1,0,0,0,2473,2474,5,242,0,0,2474,2528,1,0,0,0,
        2475,2476,5,266,0,0,2476,2477,5,279,0,0,2477,2478,3,214,107,0,2478,
        2479,5,242,0,0,2479,2528,1,0,0,0,2480,2481,5,267,0,0,2481,2482,5,
        279,0,0,2482,2487,3,214,107,0,2483,2484,5,249,0,0,2484,2486,3,214,
        107,0,2485,2483,1,0,0,0,2486,2489,1,0,0,0,2487,2485,1,0,0,0,2487,
        2488,1,0,0,0,2488,2490,1,0,0,0,2489,2487,1,0,0,0,2490,2491,5,242,
        0,0,2491,2528,1,0,0,0,2492,2493,5,268,0,0,2493,2494,5,279,0,0,2494,
        2495,3,214,107,0,2495,2496,5,249,0,0,2496,2497,3,214,107,0,2497,
        2498,5,242,0,0,2498,2528,1,0,0,0,2499,2500,5,269,0,0,2500,2501,5,
        279,0,0,2501,2502,3,214,107,0,2502,2503,5,242,0,0,2503,2528,1,0,
        0,0,2504,2505,5,270,0,0,2505,2506,5,279,0,0,2506,2528,5,242,0,0,
        2507,2508,5,271,0,0,2508,2509,5,279,0,0,2509,2510,3,214,107,0,2510,
        2511,5,242,0,0,2511,2528,1,0,0,0,2512,2513,5,272,0,0,2513,2514,5,
        279,0,0,2514,2515,3,214,107,0,2515,2516,5,242,0,0,2516,2528,1,0,
        0,0,2517,2518,5,273,0,0,2518,2519,5,279,0,0,2519,2520,3,214,107,
        0,2520,2521,5,242,0,0,2521,2528,1,0,0,0,2522,2523,5,274,0,0,2523,
        2524,5,279,0,0,2524,2525,3,214,107,0,2525,2526,5,242,0,0,2526,2528,
        1,0,0,0,2527,2408,1,0,0,0,2527,2413,1,0,0,0,2527,2418,1,0,0,0,2527,
        2423,1,0,0,0,2527,2428,1,0,0,0,2527,2433,1,0,0,0,2527,2438,1,0,0,
        0,2527,2443,1,0,0,0,2527,2448,1,0,0,0,2527,2453,1,0,0,0,2527,2458,
        1,0,0,0,2527,2463,1,0,0,0,2527,2475,1,0,0,0,2527,2480,1,0,0,0,2527,
        2492,1,0,0,0,2527,2499,1,0,0,0,2527,2504,1,0,0,0,2527,2507,1,0,0,
        0,2527,2512,1,0,0,0,2527,2517,1,0,0,0,2527,2522,1,0,0,0,2528,217,
        1,0,0,0,2529,2530,7,8,0,0,2530,2531,5,281,0,0,2531,2532,5,290,0,
        0,2532,2533,5,282,0,0,2533,219,1,0,0,0,2534,2535,5,170,0,0,2535,
        2536,5,275,0,0,2536,2537,5,243,0,0,2537,2538,3,222,111,0,2538,2539,
        5,242,0,0,2539,221,1,0,0,0,2540,2543,3,214,107,0,2541,2542,7,7,0,
        0,2542,2544,3,222,111,0,2543,2541,1,0,0,0,2543,2544,1,0,0,0,2544,
        223,1,0,0,0,2545,2547,5,171,0,0,2546,2548,7,9,0,0,2547,2546,1,0,
        0,0,2547,2548,1,0,0,0,2548,2549,1,0,0,0,2549,2550,5,172,0,0,2550,
        2551,5,207,0,0,2551,2552,7,10,0,0,2552,2553,5,207,0,0,2553,2559,
        3,188,94,0,2554,2555,5,172,0,0,2555,2556,5,207,0,0,2556,2557,7,10,
        0,0,2557,2558,5,207,0,0,2558,2560,3,188,94,0,2559,2554,1,0,0,0,2559,
        2560,1,0,0,0,2560,2561,1,0,0,0,2561,2562,5,2,0,0,2562,225,1,0,0,
        0,2563,2567,5,174,0,0,2564,2566,3,228,114,0,2565,2564,1,0,0,0,2566,
        2569,1,0,0,0,2567,2565,1,0,0,0,2567,2568,1,0,0,0,2568,2570,1,0,0,
        0,2569,2567,1,0,0,0,2570,2571,5,2,0,0,2571,227,1,0,0,0,2572,2573,
        5,95,0,0,2573,2574,5,199,0,0,2574,2575,5,199,0,0,2575,2576,5,199,
        0,0,2576,2577,3,200,100,0,2577,2582,3,200,100,0,2578,2579,5,175,
        0,0,2579,2580,3,200,100,0,2580,2581,3,200,100,0,2581,2583,1,0,0,
        0,2582,2578,1,0,0,0,2582,2583,1,0,0,0,2583,2628,1,0,0,0,2584,2585,
        5,140,0,0,2585,2586,5,199,0,0,2586,2587,5,199,0,0,2587,2588,3,200,
        100,0,2588,2589,3,200,100,0,2589,2628,1,0,0,0,2590,2591,7,11,0,0,
        2591,2592,5,199,0,0,2592,2593,5,199,0,0,2593,2594,5,199,0,0,2594,
        2597,5,199,0,0,2595,2596,5,176,0,0,2596,2598,5,192,0,0,2597,2595,
        1,0,0,0,2597,2598,1,0,0,0,2598,2599,1,0,0,0,2599,2600,3,200,100,
        0,2600,2601,5,192,0,0,2601,2602,3,200,100,0,2602,2628,1,0,0,0,2603,
        2604,5,177,0,0,2604,2605,5,200,0,0,2605,2606,5,200,0,0,2606,2607,
        3,200,100,0,2607,2608,3,200,100,0,2608,2628,1,0,0,0,2609,2610,5,
        179,0,0,2610,2611,5,199,0,0,2611,2612,5,199,0,0,2612,2613,3,200,
        100,0,2613,2614,3,200,100,0,2614,2615,3,200,100,0,2615,2616,3,200,
        100,0,2616,2628,1,0,0,0,2617,2618,5,180,0,0,2618,2619,5,199,0,0,
        2619,2620,3,200,100,0,2620,2621,3,200,100,0,2621,2622,3,200,100,
        0,2622,2623,3,200,100,0,2623,2628,1,0,0,0,2624,2625,7,12,0,0,2625,
        2628,5,199,0,0,2626,2628,5,182,0,0,2627,2572,1,0,0,0,2627,2584,1,
        0,0,0,2627,2590,1,0,0,0,2627,2603,1,0,0,0,2627,2609,1,0,0,0,2627,
        2617,1,0,0,0,2627,2624,1,0,0,0,2627,2626,1,0,0,0,2628,229,1,0,0,
        0,2629,2630,5,183,0,0,2630,2631,5,297,0,0,2631,2632,5,294,0,0,2632,
        2651,5,292,0,0,2633,2635,5,295,0,0,2634,2633,1,0,0,0,2635,2638,1,
        0,0,0,2636,2634,1,0,0,0,2636,2637,1,0,0,0,2637,2652,1,0,0,0,2638,
        2636,1,0,0,0,2639,2641,5,296,0,0,2640,2639,1,0,0,0,2641,2644,1,0,
        0,0,2642,2640,1,0,0,0,2642,2643,1,0,0,0,2643,2652,1,0,0,0,2644,2642,
        1,0,0,0,2645,2647,5,298,0,0,2646,2645,1,0,0,0,2647,2650,1,0,0,0,
        2648,2646,1,0,0,0,2648,2649,1,0,0,0,2649,2652,1,0,0,0,2650,2648,
        1,0,0,0,2651,2636,1,0,0,0,2651,2642,1,0,0,0,2651,2648,1,0,0,0,2652,
        2653,1,0,0,0,2653,2654,5,293,0,0,2654,2655,5,184,0,0,2655,2660,5,
        301,0,0,2656,2659,3,220,110,0,2657,2659,3,52,26,0,2658,2656,1,0,
        0,0,2658,2657,1,0,0,0,2659,2662,1,0,0,0,2660,2658,1,0,0,0,2660,2661,
        1,0,0,0,2661,2663,1,0,0,0,2662,2660,1,0,0,0,2663,2664,5,2,0,0,2664,
        2665,5,184,0,0,2665,2666,5,301,0,0,2666,231,1,0,0,0,2667,2668,5,
        183,0,0,2668,2669,5,297,0,0,2669,2670,5,294,0,0,2670,2689,5,292,
        0,0,2671,2673,5,295,0,0,2672,2671,1,0,0,0,2673,2676,1,0,0,0,2674,
        2672,1,0,0,0,2674,2675,1,0,0,0,2675,2690,1,0,0,0,2676,2674,1,0,0,
        0,2677,2679,5,296,0,0,2678,2677,1,0,0,0,2679,2682,1,0,0,0,2680,2678,
        1,0,0,0,2680,2681,1,0,0,0,2681,2690,1,0,0,0,2682,2680,1,0,0,0,2683,
        2685,5,298,0,0,2684,2683,1,0,0,0,2685,2688,1,0,0,0,2686,2684,1,0,
        0,0,2686,2687,1,0,0,0,2687,2690,1,0,0,0,2688,2686,1,0,0,0,2689,2674,
        1,0,0,0,2689,2680,1,0,0,0,2689,2686,1,0,0,0,2690,2691,1,0,0,0,2691,
        2692,5,293,0,0,2692,2693,5,184,0,0,2693,2698,5,301,0,0,2694,2697,
        3,220,110,0,2695,2697,3,60,30,0,2696,2694,1,0,0,0,2696,2695,1,0,
        0,0,2697,2700,1,0,0,0,2698,2696,1,0,0,0,2698,2699,1,0,0,0,2699,2701,
        1,0,0,0,2700,2698,1,0,0,0,2701,2702,5,2,0,0,2702,2703,5,184,0,0,
        2703,2704,5,301,0,0,2704,233,1,0,0,0,2705,2706,5,183,0,0,2706,2707,
        5,297,0,0,2707,2708,5,294,0,0,2708,2727,5,292,0,0,2709,2711,5,295,
        0,0,2710,2709,1,0,0,0,2711,2714,1,0,0,0,2712,2710,1,0,0,0,2712,2713,
        1,0,0,0,2713,2728,1,0,0,0,2714,2712,1,0,0,0,2715,2717,5,296,0,0,
        2716,2715,1,0,0,0,2717,2720,1,0,0,0,2718,2716,1,0,0,0,2718,2719,
        1,0,0,0,2719,2728,1,0,0,0,2720,2718,1,0,0,0,2721,2723,5,298,0,0,
        2722,2721,1,0,0,0,2723,2726,1,0,0,0,2724,2722,1,0,0,0,2724,2725,
        1,0,0,0,2725,2728,1,0,0,0,2726,2724,1,0,0,0,2727,2712,1,0,0,0,2727,
        2718,1,0,0,0,2727,2724,1,0,0,0,2728,2729,1,0,0,0,2729,2730,5,293,
        0,0,2730,2731,5,184,0,0,2731,2736,5,301,0,0,2732,2735,3,220,110,
        0,2733,2735,3,64,32,0,2734,2732,1,0,0,0,2734,2733,1,0,0,0,2735,2738,
        1,0,0,0,2736,2734,1,0,0,0,2736,2737,1,0,0,0,2737,2739,1,0,0,0,2738,
        2736,1,0,0,0,2739,2740,5,2,0,0,2740,2741,5,184,0,0,2741,2742,5,301,
        0,0,2742,235,1,0,0,0,2743,2744,5,183,0,0,2744,2745,5,297,0,0,2745,
        2746,5,294,0,0,2746,2765,5,292,0,0,2747,2749,5,295,0,0,2748,2747,
        1,0,0,0,2749,2752,1,0,0,0,2750,2748,1,0,0,0,2750,2751,1,0,0,0,2751,
        2766,1,0,0,0,2752,2750,1,0,0,0,2753,2755,5,296,0,0,2754,2753,1,0,
        0,0,2755,2758,1,0,0,0,2756,2754,1,0,0,0,2756,2757,1,0,0,0,2757,2766,
        1,0,0,0,2758,2756,1,0,0,0,2759,2761,5,298,0,0,2760,2759,1,0,0,0,
        2761,2764,1,0,0,0,2762,2760,1,0,0,0,2762,2763,1,0,0,0,2763,2766,
        1,0,0,0,2764,2762,1,0,0,0,2765,2750,1,0,0,0,2765,2756,1,0,0,0,2765,
        2762,1,0,0,0,2766,2767,1,0,0,0,2767,2768,5,293,0,0,2768,2769,5,184,
        0,0,2769,2774,5,301,0,0,2770,2773,3,220,110,0,2771,2773,3,92,46,
        0,2772,2770,1,0,0,0,2772,2771,1,0,0,0,2773,2776,1,0,0,0,2774,2772,
        1,0,0,0,2774,2775,1,0,0,0,2775,2777,1,0,0,0,2776,2774,1,0,0,0,2777,
        2778,5,2,0,0,2778,2779,5,184,0,0,2779,2780,5,301,0,0,2780,237,1,
        0,0,0,2781,2782,5,183,0,0,2782,2783,5,297,0,0,2783,2784,5,294,0,
        0,2784,2803,5,292,0,0,2785,2787,5,295,0,0,2786,2785,1,0,0,0,2787,
        2790,1,0,0,0,2788,2786,1,0,0,0,2788,2789,1,0,0,0,2789,2804,1,0,0,
        0,2790,2788,1,0,0,0,2791,2793,5,296,0,0,2792,2791,1,0,0,0,2793,2796,
        1,0,0,0,2794,2792,1,0,0,0,2794,2795,1,0,0,0,2795,2804,1,0,0,0,2796,
        2794,1,0,0,0,2797,2799,5,298,0,0,2798,2797,1,0,0,0,2799,2802,1,0,
        0,0,2800,2798,1,0,0,0,2800,2801,1,0,0,0,2801,2804,1,0,0,0,2802,2800,
        1,0,0,0,2803,2788,1,0,0,0,2803,2794,1,0,0,0,2803,2800,1,0,0,0,2804,
        2805,1,0,0,0,2805,2806,5,293,0,0,2806,2807,5,184,0,0,2807,2812,5,
        301,0,0,2808,2811,3,220,110,0,2809,2811,3,96,48,0,2810,2808,1,0,
        0,0,2810,2809,1,0,0,0,2811,2814,1,0,0,0,2812,2810,1,0,0,0,2812,2813,
        1,0,0,0,2813,2815,1,0,0,0,2814,2812,1,0,0,0,2815,2816,5,2,0,0,2816,
        2817,5,184,0,0,2817,2818,5,301,0,0,2818,239,1,0,0,0,2819,2820,5,
        183,0,0,2820,2821,5,297,0,0,2821,2822,5,294,0,0,2822,2841,5,292,
        0,0,2823,2825,5,295,0,0,2824,2823,1,0,0,0,2825,2828,1,0,0,0,2826,
        2824,1,0,0,0,2826,2827,1,0,0,0,2827,2842,1,0,0,0,2828,2826,1,0,0,
        0,2829,2831,5,296,0,0,2830,2829,1,0,0,0,2831,2834,1,0,0,0,2832,2830,
        1,0,0,0,2832,2833,1,0,0,0,2833,2842,1,0,0,0,2834,2832,1,0,0,0,2835,
        2837,5,298,0,0,2836,2835,1,0,0,0,2837,2840,1,0,0,0,2838,2836,1,0,
        0,0,2838,2839,1,0,0,0,2839,2842,1,0,0,0,2840,2838,1,0,0,0,2841,2826,
        1,0,0,0,2841,2832,1,0,0,0,2841,2838,1,0,0,0,2842,2843,1,0,0,0,2843,
        2844,5,293,0,0,2844,2845,5,184,0,0,2845,2850,5,301,0,0,2846,2849,
        3,220,110,0,2847,2849,3,130,65,0,2848,2846,1,0,0,0,2848,2847,1,0,
        0,0,2849,2852,1,0,0,0,2850,2848,1,0,0,0,2850,2851,1,0,0,0,2851,2853,
        1,0,0,0,2852,2850,1,0,0,0,2853,2854,5,2,0,0,2854,2855,5,184,0,0,
        2855,2856,5,301,0,0,2856,241,1,0,0,0,2857,2858,5,183,0,0,2858,2859,
        5,297,0,0,2859,2860,5,294,0,0,2860,2879,5,292,0,0,2861,2863,5,295,
        0,0,2862,2861,1,0,0,0,2863,2866,1,0,0,0,2864,2862,1,0,0,0,2864,2865,
        1,0,0,0,2865,2880,1,0,0,0,2866,2864,1,0,0,0,2867,2869,5,296,0,0,
        2868,2867,1,0,0,0,2869,2872,1,0,0,0,2870,2868,1,0,0,0,2870,2871,
        1,0,0,0,2871,2880,1,0,0,0,2872,2870,1,0,0,0,2873,2875,5,298,0,0,
        2874,2873,1,0,0,0,2875,2878,1,0,0,0,2876,2874,1,0,0,0,2876,2877,
        1,0,0,0,2877,2880,1,0,0,0,2878,2876,1,0,0,0,2879,2864,1,0,0,0,2879,
        2870,1,0,0,0,2879,2876,1,0,0,0,2880,2881,1,0,0,0,2881,2882,5,293,
        0,0,2882,2883,5,184,0,0,2883,2888,5,301,0,0,2884,2887,3,220,110,
        0,2885,2887,3,142,71,0,2886,2884,1,0,0,0,2886,2885,1,0,0,0,2887,
        2890,1,0,0,0,2888,2886,1,0,0,0,2888,2889,1,0,0,0,2889,2891,1,0,0,
        0,2890,2888,1,0,0,0,2891,2892,5,2,0,0,2892,2893,5,184,0,0,2893,2894,
        5,301,0,0,2894,243,1,0,0,0,2895,2896,5,183,0,0,2896,2897,5,297,0,
        0,2897,2898,5,294,0,0,2898,2917,5,292,0,0,2899,2901,5,295,0,0,2900,
        2899,1,0,0,0,2901,2904,1,0,0,0,2902,2900,1,0,0,0,2902,2903,1,0,0,
        0,2903,2918,1,0,0,0,2904,2902,1,0,0,0,2905,2907,5,296,0,0,2906,2905,
        1,0,0,0,2907,2910,1,0,0,0,2908,2906,1,0,0,0,2908,2909,1,0,0,0,2909,
        2918,1,0,0,0,2910,2908,1,0,0,0,2911,2913,5,298,0,0,2912,2911,1,0,
        0,0,2913,2916,1,0,0,0,2914,2912,1,0,0,0,2914,2915,1,0,0,0,2915,2918,
        1,0,0,0,2916,2914,1,0,0,0,2917,2902,1,0,0,0,2917,2908,1,0,0,0,2917,
        2914,1,0,0,0,2918,2919,1,0,0,0,2919,2920,5,293,0,0,2920,2921,5,184,
        0,0,2921,2926,5,301,0,0,2922,2925,3,220,110,0,2923,2925,3,156,78,
        0,2924,2922,1,0,0,0,2924,2923,1,0,0,0,2925,2928,1,0,0,0,2926,2924,
        1,0,0,0,2926,2927,1,0,0,0,2927,2929,1,0,0,0,2928,2926,1,0,0,0,2929,
        2930,5,2,0,0,2930,2931,5,184,0,0,2931,2932,5,301,0,0,2932,245,1,
        0,0,0,2933,2934,5,183,0,0,2934,2935,5,297,0,0,2935,2936,5,294,0,
        0,2936,2955,5,292,0,0,2937,2939,5,295,0,0,2938,2937,1,0,0,0,2939,
        2942,1,0,0,0,2940,2938,1,0,0,0,2940,2941,1,0,0,0,2941,2956,1,0,0,
        0,2942,2940,1,0,0,0,2943,2945,5,296,0,0,2944,2943,1,0,0,0,2945,2948,
        1,0,0,0,2946,2944,1,0,0,0,2946,2947,1,0,0,0,2947,2956,1,0,0,0,2948,
        2946,1,0,0,0,2949,2951,5,298,0,0,2950,2949,1,0,0,0,2951,2954,1,0,
        0,0,2952,2950,1,0,0,0,2952,2953,1,0,0,0,2953,2956,1,0,0,0,2954,2952,
        1,0,0,0,2955,2940,1,0,0,0,2955,2946,1,0,0,0,2955,2952,1,0,0,0,2956,
        2957,1,0,0,0,2957,2958,5,293,0,0,2958,2959,5,184,0,0,2959,2964,5,
        301,0,0,2960,2963,3,220,110,0,2961,2963,3,160,80,0,2962,2960,1,0,
        0,0,2962,2961,1,0,0,0,2963,2966,1,0,0,0,2964,2962,1,0,0,0,2964,2965,
        1,0,0,0,2965,2967,1,0,0,0,2966,2964,1,0,0,0,2967,2968,5,2,0,0,2968,
        2969,5,184,0,0,2969,2970,5,301,0,0,2970,247,1,0,0,0,2971,2972,5,
        183,0,0,2972,2973,5,297,0,0,2973,2974,5,294,0,0,2974,2993,5,292,
        0,0,2975,2977,5,295,0,0,2976,2975,1,0,0,0,2977,2980,1,0,0,0,2978,
        2976,1,0,0,0,2978,2979,1,0,0,0,2979,2994,1,0,0,0,2980,2978,1,0,0,
        0,2981,2983,5,296,0,0,2982,2981,1,0,0,0,2983,2986,1,0,0,0,2984,2982,
        1,0,0,0,2984,2985,1,0,0,0,2985,2994,1,0,0,0,2986,2984,1,0,0,0,2987,
        2989,5,298,0,0,2988,2987,1,0,0,0,2989,2992,1,0,0,0,2990,2988,1,0,
        0,0,2990,2991,1,0,0,0,2991,2994,1,0,0,0,2992,2990,1,0,0,0,2993,2978,
        1,0,0,0,2993,2984,1,0,0,0,2993,2990,1,0,0,0,2994,2995,1,0,0,0,2995,
        2996,5,293,0,0,2996,2997,5,184,0,0,2997,3002,5,301,0,0,2998,3001,
        3,220,110,0,2999,3001,3,176,88,0,3000,2998,1,0,0,0,3000,2999,1,0,
        0,0,3001,3004,1,0,0,0,3002,3000,1,0,0,0,3002,3003,1,0,0,0,3003,3005,
        1,0,0,0,3004,3002,1,0,0,0,3005,3006,5,2,0,0,3006,3007,5,184,0,0,
        3007,3008,5,301,0,0,3008,249,1,0,0,0,3009,3010,5,183,0,0,3010,3011,
        5,297,0,0,3011,3012,5,294,0,0,3012,3031,5,292,0,0,3013,3015,5,295,
        0,0,3014,3013,1,0,0,0,3015,3018,1,0,0,0,3016,3014,1,0,0,0,3016,3017,
        1,0,0,0,3017,3032,1,0,0,0,3018,3016,1,0,0,0,3019,3021,5,296,0,0,
        3020,3019,1,0,0,0,3021,3024,1,0,0,0,3022,3020,1,0,0,0,3022,3023,
        1,0,0,0,3023,3032,1,0,0,0,3024,3022,1,0,0,0,3025,3027,5,298,0,0,
        3026,3025,1,0,0,0,3027,3030,1,0,0,0,3028,3026,1,0,0,0,3028,3029,
        1,0,0,0,3029,3032,1,0,0,0,3030,3028,1,0,0,0,3031,3016,1,0,0,0,3031,
        3022,1,0,0,0,3031,3028,1,0,0,0,3032,3033,1,0,0,0,3033,3034,5,293,
        0,0,3034,3035,5,184,0,0,3035,3040,5,301,0,0,3036,3039,3,220,110,
        0,3037,3039,3,180,90,0,3038,3036,1,0,0,0,3038,3037,1,0,0,0,3039,
        3042,1,0,0,0,3040,3038,1,0,0,0,3040,3041,1,0,0,0,3041,3043,1,0,0,
        0,3042,3040,1,0,0,0,3043,3044,5,2,0,0,3044,3045,5,184,0,0,3045,3046,
        5,301,0,0,3046,251,1,0,0,0,358,308,310,319,325,331,340,348,356,364,
        372,376,379,385,391,397,406,415,424,433,442,451,460,469,478,487,
        496,505,514,523,532,541,550,559,568,586,591,608,621,645,648,655,
        658,663,668,673,676,679,683,688,693,700,704,709,714,719,724,729,
        734,737,744,750,754,770,780,785,794,805,808,813,820,834,839,848,
        865,870,875,880,887,892,899,911,916,923,932,939,944,955,960,971,
        980,987,993,997,1002,1005,1010,1015,1020,1024,1030,1034,1038,1041,
        1043,1047,1059,1067,1072,1081,1084,1092,1102,1113,1121,1125,1130,
        1141,1144,1147,1159,1166,1171,1183,1188,1203,1230,1240,1250,1253,
        1258,1263,1267,1279,1303,1311,1318,1329,1335,1341,1345,1356,1362,
        1368,1376,1379,1389,1395,1401,1406,1415,1418,1421,1425,1437,1444,
        1451,1457,1462,1472,1484,1489,1500,1511,1516,1525,1551,1560,1563,
        1582,1594,1599,1616,1621,1630,1642,1645,1650,1655,1671,1676,1685,
        1690,1704,1709,1718,1735,1748,1753,1764,1767,1775,1790,1796,1801,
        1807,1812,1818,1824,1830,1842,1845,1849,1856,1862,1873,1878,1887,
        1890,1907,1917,1920,1925,1936,1941,1957,1968,1973,1978,1983,1990,
        2002,2011,2016,2025,2033,2039,2044,2049,2056,2067,2072,2077,2082,
        2087,2092,2097,2102,2107,2112,2117,2122,2127,2130,2141,2150,2156,
        2160,2165,2170,2173,2184,2192,2207,2223,2226,2237,2242,2245,2253,
        2257,2268,2272,2276,2279,2292,2295,2302,2305,2312,2317,2320,2334,
        2342,2344,2360,2364,2366,2372,2387,2392,2397,2406,2470,2487,2527,
        2543,2547,2559,2567,2582,2597,2627,2636,2642,2648,2651,2658,2660,
        2674,2680,2686,2689,2696,2698,2712,2718,2724,2727,2734,2736,2750,
        2756,2762,2765,2772,2774,2788,2794,2800,2803,2810,2812,2826,2832,
        2838,2841,2848,2850,2864,2870,2876,2879,2886,2888,2902,2908,2914,
        2917,2924,2926,2940,2946,2952,2955,2962,2964,2978,2984,2990,2993,
        3000,3002,3016,3022,3028,3031,3038,3040
    ]

class XplorMRParser ( Parser ):

    grammarFileName = "XplorMRParser.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ "<INVALID>", "'SET'", "<INVALID>", "'NOE'", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "'BHIG'", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "'CUTOFF'", "'CUTON'", "'FROM'", "'TO'", 
                     "'PEAK'", "'SPECTRUM'", "'VOLUME'", "'PPM1'", "'PPM2'", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "'?'", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "'TYPE'", "<INVALID>", "<INVALID>", "'CV'", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "'XADC'", "<INVALID>", "'SIZE'", 
                     "'ZERO'", "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "'RAMA'", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "'SORT'", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "'DCSA'", "<INVALID>", "'PCSA'", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "'TAUC'", "<INVALID>", "'XPCS'", "'TOLL'", 
                     "'SAVE'", "'FMED'", "'ERRON'", "'ERROFF'", "'FON'", 
                     "'FOFF'", "'SON'", "'SOFF'", "'FRUN'", "<INVALID>", 
                     "<INVALID>", "'XCCR'", "'WEIP'", "'KDIR'", "'KLIN'", 
                     "'NSEG'", "'NMIN'", "'NMAX'", "'SEGM'", "'OHCUT'", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "'UPDFRQ'", 
                     "'PRNFRQ'", "'FREEMODE'", "<INVALID>", "<INVALID>", 
                     "'NCS'", "<INVALID>", "'SIGB'", "<INVALID>", "'ALL'", 
                     "<INVALID>", "'ATOM'", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "'ID'", "<INVALID>", 
                     "'NAME'", "<INVALID>", "'CUT'", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "'STORE1'", "'STORE2'", "'STORE3'", "'STORE4'", "'STORE5'", 
                     "'STORE6'", "'STORE7'", "'STORE8'", "'STORE9'", "'TAG'", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "'SHOW'", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "'NIL'", "<INVALID>", "'UB'", 
                     "'MULT'", "<INVALID>", "<INVALID>", "<INVALID>", "'NONB'", 
                     "<INVALID>", "<INVALID>", "'FOR'", "'LOOP'", "'TAIL'", 
                     "'HEAD'", "'OR'", "'AND'", "'NOT'", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "'HBDA'", "'HBDB'", "<INVALID>", 
                     "<INVALID>", "':'", "<INVALID>", "'<'", "'>'", "'<='", 
                     "'>='", "'#'", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "'+'", "'-'", "<INVALID>", "'/'", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "'ACOS'", "'ASIN'", "'COS'", "'DECODE'", "'ENCODE'", 
                     "'EXP'", "'GAUSS'", "'HEAVY'", "'INT'", "'LOG10'", 
                     "'LOG'", "<INVALID>", "'MAXW'", "<INVALID>", "'MOD'", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "'SIN'", "'SQRT'", 
                     "'TAN'", "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "'RMS'", "'SUM'", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "'IN'" ]

    symbolicNames = [ "<INVALID>", "Set", "End", "Noe", "Assign", "Asymptote", 
                      "Average", "Bhig", "Ceiling", "Classification", "CountViol", 
                      "Distribute", "Monomers", "Ncount", "Nrestraints", 
                      "Potential", "Predict", "Print", "Threshold", "Reset", 
                      "Rswitch", "Scale", "SoExponent", "SqConstant", "SqExponent", 
                      "SqOffset", "Temperature", "Cutoff", "Cuton", "From", 
                      "To", "Peak", "Spectrum", "Volume", "Ppm1", "Ppm2", 
                      "Restraints", "Dihedral", "Nassign", "Print_any", 
                      "Sanisotropy", "Coefficients", "ForceConstant", "Xdipolar", 
                      "Dipolar", "Type", "Sign", "VeAngle", "Cv", "Partition", 
                      "Tensor", "Anisotropy", "Planar", "Group", "Initialize", 
                      "Selection", "Weight", "Harmonic", "Exponent", "Normal", 
                      "Xadc", "Expectation", "Size", "Zero", "Coupling", 
                      "DegEnergy", "Carbon", "PhiStep", "PsiStep", "Rcoil", 
                      "Proton", "Observed", "Amides", "Nitrogens", "Oxygens", 
                      "RingAtoms", "AlphasAndAmides", "Error", "Ramachandran", 
                      "Gaussian", "Phase", "Quartic", "Shape", "Sort", "Dimensions", 
                      "Collapse", "Danisotropy", "Orient", "Height", "MaxGaussians", 
                      "NewGaussian", "Dcsa", "Sigma", "Pcsa", "OneBond", 
                      "AngleDb", "DerivFlag", "PMagnetic", "Kconst", "Omega", 
                      "Tauc", "Debug", "Xpcs", "Tolerance", "Save", "Fmed", 
                      "ErrOn", "ErrOff", "Fon", "Foff", "Son", "Soff", "Frun", 
                      "Xrdcoupling", "Xangle", "Xccr", "Weip", "Kdir", "Klin", 
                      "Nseg", "Nmin", "Nmax", "Segm", "Ohcut", "Coh1cut", 
                      "Coh2cut", "Ohncut", "Updfrq", "Prnfrq", "Freemode", 
                      "Donor", "Acceptor", "Ncs", "Equivalence", "Sigb", 
                      "Flags", "All", "Around", "Atom", "Attribute", "BondedTo", 
                      "ByGroup", "ByRes", "Chemical", "Hydrogen", "Id", 
                      "Known", "Name", "Point", "Cut", "Previous", "Pseudo", 
                      "Residue", "Resname", "Saround", "SegIdentifier", 
                      "Store1", "Store2", "Store3", "Store4", "Store5", 
                      "Store6", "Store7", "Store8", "Store9", "Tag", "Vector", 
                      "Do_Lp", "Identity_Lp", "Show", "Evaluate_Lp", "Patch", 
                      "Reference", "Nil", "Parameter", "UB", "Mult", "HBonded", 
                      "Improper", "NBFix", "NonB", "VDWOff", "Verbose", 
                      "For", "Loop", "Tail", "Head", "Or_op", "And_op", 
                      "Not_op", "Comma", "Complex", "Integer", "Logical", 
                      "Real", "Double_quote_string", "SHARP_COMMENT", "EXCLM_COMMENT", 
                      "SMCLN_COMMENT", "Simple_name", "Simple_names", "Integers", 
                      "Hbda", "Hbdb", "L_paren", "R_paren", "Colon", "Equ_op", 
                      "Lt_op", "Gt_op", "Leq_op", "Geq_op", "Neq_op", "Symbol_name", 
                      "SPACE", "COMMENT", "SECTION_COMMENT", "LINE_COMMENT", 
                      "SET_VARIABLE", "Abs", "Attr_properties", "Comparison_ops", 
                      "SPACE_AP", "Averaging_methods", "Simple_name_AM", 
                      "SPACE_AM", "Equ_op_PT", "Potential_types", "Simple_name_PT", 
                      "SPACE_PT", "Rdc_dist_fix_types", "Rdc_or_Diff_anis_types", 
                      "Csa_types", "SPACE_TY", "Gauss_or_Quart", "SPACE_SH", 
                      "Exclude", "Include", "End_FL", "Class_name", "Any_class", 
                      "SPACE_FL", "R_paren_VE", "Equ_op_VE", "Add_op_VE", 
                      "Sub_op_VE", "Mul_op_VE", "Div_op_VE", "Exp_op_VE", 
                      "Comma_VE", "Integer_VE", "Real_VE", "Atom_properties_VE", 
                      "Abs_VE", "Acos_VE", "Asin_VE", "Cos_VE", "Decode_VE", 
                      "Encode_VE", "Exp_VE", "Gauss_VE", "Heavy_VE", "Int_VE", 
                      "Log10_VE", "Log_VE", "Max_VE", "Maxw_VE", "Min_VE", 
                      "Mod_VE", "Norm_VE", "Random_VE", "Sign_VE", "Sin_VE", 
                      "Sqrt_VE", "Tan_VE", "Symbol_name_VE", "Simple_name_VE", 
                      "Double_quote_string_VE", "SPACE_VE", "L_paren_VF", 
                      "SPACE_VF", "L_paren_VS", "R_paren_VS", "Average_VS", 
                      "Element_VS", "Max_VS", "Min_VS", "Norm_VS", "Rms_VS", 
                      "Sum_VS", "Atom_properties_VS", "SPACE_VS", "L_paren_CF", 
                      "R_paren_CF", "In_CF", "Integer_CF", "Real_CF", "Symbol_name_CF", 
                      "Simple_name_CF", "SPACE_CF", "COMMENT_CF", "Simple_name_LL", 
                      "SPACE_LL" ]

    RULE_xplor_nih_mr = 0
    RULE_distance_restraint = 1
    RULE_dihedral_angle_restraint = 2
    RULE_rdc_restraint = 3
    RULE_planar_restraint = 4
    RULE_harmonic_restraint = 5
    RULE_antidistance_restraint = 6
    RULE_coupling_restraint = 7
    RULE_carbon_shift_restraint = 8
    RULE_proton_shift_restraint = 9
    RULE_dihedral_angle_db_restraint = 10
    RULE_radius_of_gyration_restraint = 11
    RULE_diffusion_anisotropy_restraint = 12
    RULE_orientation_db_restraint = 13
    RULE_csa_restraint = 14
    RULE_pcsa_restraint = 15
    RULE_one_bond_coupling_restraint = 16
    RULE_angle_db_restraint = 17
    RULE_pre_restraint = 18
    RULE_pcs_restraint = 19
    RULE_prdc_restraint = 20
    RULE_porientation_restraint = 21
    RULE_pccr_restraint = 22
    RULE_hbond_restraint = 23
    RULE_hbond_db_restraint = 24
    RULE_noe_statement = 25
    RULE_noe_assign = 26
    RULE_predict_statement = 27
    RULE_noe_annotation = 28
    RULE_dihedral_statement = 29
    RULE_dihedral_assign = 30
    RULE_sani_statement = 31
    RULE_sani_assign = 32
    RULE_xdip_statement = 33
    RULE_xdip_assign = 34
    RULE_vean_statement = 35
    RULE_vean_assign = 36
    RULE_tenso_statement = 37
    RULE_tenso_assign = 38
    RULE_anis_statement = 39
    RULE_anis_assign = 40
    RULE_planar_statement = 41
    RULE_group_statement = 42
    RULE_harmonic_statement = 43
    RULE_harmonic_assign = 44
    RULE_antidistance_statement = 45
    RULE_xadc_assign = 46
    RULE_coupling_statement = 47
    RULE_coup_assign = 48
    RULE_carbon_shift_statement = 49
    RULE_carbon_shift_assign = 50
    RULE_carbon_shift_rcoil = 51
    RULE_proton_shift_statement = 52
    RULE_observed = 53
    RULE_proton_shift_rcoil = 54
    RULE_proton_shift_anisotropy = 55
    RULE_proton_shift_amides = 56
    RULE_proton_shift_carbons = 57
    RULE_proton_shift_nitrogens = 58
    RULE_proton_shift_oxygens = 59
    RULE_proton_shift_ring_atoms = 60
    RULE_proton_shift_alphas_and_amides = 61
    RULE_ramachandran_statement = 62
    RULE_rama_assign = 63
    RULE_collapse_statement = 64
    RULE_coll_assign = 65
    RULE_diffusion_statement = 66
    RULE_dani_assign = 67
    RULE_orientation_statement = 68
    RULE_orie_assign = 69
    RULE_csa_statement = 70
    RULE_csa_assign = 71
    RULE_pcsa_statement = 72
    RULE_one_bond_coupling_statement = 73
    RULE_one_bond_assign = 74
    RULE_angle_db_statement = 75
    RULE_angle_db_assign = 76
    RULE_pre_statement = 77
    RULE_pre_assign = 78
    RULE_pcs_statement = 79
    RULE_pcs_assign = 80
    RULE_prdc_statement = 81
    RULE_prdc_assign = 82
    RULE_porientation_statement = 83
    RULE_porientation_assign = 84
    RULE_pccr_statement = 85
    RULE_pccr_assign = 86
    RULE_hbond_statement = 87
    RULE_hbond_assign = 88
    RULE_hbond_db_statement = 89
    RULE_hbond_db_assign = 90
    RULE_ncs_restraint = 91
    RULE_ncs_statement = 92
    RULE_ncs_group_statement = 93
    RULE_selection = 94
    RULE_selection_expression = 95
    RULE_term = 96
    RULE_factor = 97
    RULE_number = 98
    RULE_number_f = 99
    RULE_number_s = 100
    RULE_number_a = 101
    RULE_flag_statement = 102
    RULE_vector_statement = 103
    RULE_vector_mode = 104
    RULE_vector_expression = 105
    RULE_vector_operation = 106
    RULE_vflc = 107
    RULE_vector_func_call = 108
    RULE_vector_show_property = 109
    RULE_evaluate_statement = 110
    RULE_evaluate_operation = 111
    RULE_patch_statement = 112
    RULE_parameter_setting = 113
    RULE_parameter_statement = 114
    RULE_noe_assign_loop = 115
    RULE_dihedral_assign_loop = 116
    RULE_sani_assign_loop = 117
    RULE_xadc_assign_loop = 118
    RULE_coup_assign_loop = 119
    RULE_coll_assign_loop = 120
    RULE_csa_assign_loop = 121
    RULE_pre_assign_loop = 122
    RULE_pcs_assign_loop = 123
    RULE_hbond_assign_loop = 124
    RULE_hbond_db_assign_loop = 125

    ruleNames =  [ "xplor_nih_mr", "distance_restraint", "dihedral_angle_restraint", 
                   "rdc_restraint", "planar_restraint", "harmonic_restraint", 
                   "antidistance_restraint", "coupling_restraint", "carbon_shift_restraint", 
                   "proton_shift_restraint", "dihedral_angle_db_restraint", 
                   "radius_of_gyration_restraint", "diffusion_anisotropy_restraint", 
                   "orientation_db_restraint", "csa_restraint", "pcsa_restraint", 
                   "one_bond_coupling_restraint", "angle_db_restraint", 
                   "pre_restraint", "pcs_restraint", "prdc_restraint", "porientation_restraint", 
                   "pccr_restraint", "hbond_restraint", "hbond_db_restraint", 
                   "noe_statement", "noe_assign", "predict_statement", "noe_annotation", 
                   "dihedral_statement", "dihedral_assign", "sani_statement", 
                   "sani_assign", "xdip_statement", "xdip_assign", "vean_statement", 
                   "vean_assign", "tenso_statement", "tenso_assign", "anis_statement", 
                   "anis_assign", "planar_statement", "group_statement", 
                   "harmonic_statement", "harmonic_assign", "antidistance_statement", 
                   "xadc_assign", "coupling_statement", "coup_assign", "carbon_shift_statement", 
                   "carbon_shift_assign", "carbon_shift_rcoil", "proton_shift_statement", 
                   "observed", "proton_shift_rcoil", "proton_shift_anisotropy", 
                   "proton_shift_amides", "proton_shift_carbons", "proton_shift_nitrogens", 
                   "proton_shift_oxygens", "proton_shift_ring_atoms", "proton_shift_alphas_and_amides", 
                   "ramachandran_statement", "rama_assign", "collapse_statement", 
                   "coll_assign", "diffusion_statement", "dani_assign", 
                   "orientation_statement", "orie_assign", "csa_statement", 
                   "csa_assign", "pcsa_statement", "one_bond_coupling_statement", 
                   "one_bond_assign", "angle_db_statement", "angle_db_assign", 
                   "pre_statement", "pre_assign", "pcs_statement", "pcs_assign", 
                   "prdc_statement", "prdc_assign", "porientation_statement", 
                   "porientation_assign", "pccr_statement", "pccr_assign", 
                   "hbond_statement", "hbond_assign", "hbond_db_statement", 
                   "hbond_db_assign", "ncs_restraint", "ncs_statement", 
                   "ncs_group_statement", "selection", "selection_expression", 
                   "term", "factor", "number", "number_f", "number_s", "number_a", 
                   "flag_statement", "vector_statement", "vector_mode", 
                   "vector_expression", "vector_operation", "vflc", "vector_func_call", 
                   "vector_show_property", "evaluate_statement", "evaluate_operation", 
                   "patch_statement", "parameter_setting", "parameter_statement", 
                   "noe_assign_loop", "dihedral_assign_loop", "sani_assign_loop", 
                   "xadc_assign_loop", "coup_assign_loop", "coll_assign_loop", 
                   "csa_assign_loop", "pre_assign_loop", "pcs_assign_loop", 
                   "hbond_assign_loop", "hbond_db_assign_loop" ]

    EOF = Token.EOF
    Set=1
    End=2
    Noe=3
    Assign=4
    Asymptote=5
    Average=6
    Bhig=7
    Ceiling=8
    Classification=9
    CountViol=10
    Distribute=11
    Monomers=12
    Ncount=13
    Nrestraints=14
    Potential=15
    Predict=16
    Print=17
    Threshold=18
    Reset=19
    Rswitch=20
    Scale=21
    SoExponent=22
    SqConstant=23
    SqExponent=24
    SqOffset=25
    Temperature=26
    Cutoff=27
    Cuton=28
    From=29
    To=30
    Peak=31
    Spectrum=32
    Volume=33
    Ppm1=34
    Ppm2=35
    Restraints=36
    Dihedral=37
    Nassign=38
    Print_any=39
    Sanisotropy=40
    Coefficients=41
    ForceConstant=42
    Xdipolar=43
    Dipolar=44
    Type=45
    Sign=46
    VeAngle=47
    Cv=48
    Partition=49
    Tensor=50
    Anisotropy=51
    Planar=52
    Group=53
    Initialize=54
    Selection=55
    Weight=56
    Harmonic=57
    Exponent=58
    Normal=59
    Xadc=60
    Expectation=61
    Size=62
    Zero=63
    Coupling=64
    DegEnergy=65
    Carbon=66
    PhiStep=67
    PsiStep=68
    Rcoil=69
    Proton=70
    Observed=71
    Amides=72
    Nitrogens=73
    Oxygens=74
    RingAtoms=75
    AlphasAndAmides=76
    Error=77
    Ramachandran=78
    Gaussian=79
    Phase=80
    Quartic=81
    Shape=82
    Sort=83
    Dimensions=84
    Collapse=85
    Danisotropy=86
    Orient=87
    Height=88
    MaxGaussians=89
    NewGaussian=90
    Dcsa=91
    Sigma=92
    Pcsa=93
    OneBond=94
    AngleDb=95
    DerivFlag=96
    PMagnetic=97
    Kconst=98
    Omega=99
    Tauc=100
    Debug=101
    Xpcs=102
    Tolerance=103
    Save=104
    Fmed=105
    ErrOn=106
    ErrOff=107
    Fon=108
    Foff=109
    Son=110
    Soff=111
    Frun=112
    Xrdcoupling=113
    Xangle=114
    Xccr=115
    Weip=116
    Kdir=117
    Klin=118
    Nseg=119
    Nmin=120
    Nmax=121
    Segm=122
    Ohcut=123
    Coh1cut=124
    Coh2cut=125
    Ohncut=126
    Updfrq=127
    Prnfrq=128
    Freemode=129
    Donor=130
    Acceptor=131
    Ncs=132
    Equivalence=133
    Sigb=134
    Flags=135
    All=136
    Around=137
    Atom=138
    Attribute=139
    BondedTo=140
    ByGroup=141
    ByRes=142
    Chemical=143
    Hydrogen=144
    Id=145
    Known=146
    Name=147
    Point=148
    Cut=149
    Previous=150
    Pseudo=151
    Residue=152
    Resname=153
    Saround=154
    SegIdentifier=155
    Store1=156
    Store2=157
    Store3=158
    Store4=159
    Store5=160
    Store6=161
    Store7=162
    Store8=163
    Store9=164
    Tag=165
    Vector=166
    Do_Lp=167
    Identity_Lp=168
    Show=169
    Evaluate_Lp=170
    Patch=171
    Reference=172
    Nil=173
    Parameter=174
    UB=175
    Mult=176
    HBonded=177
    Improper=178
    NBFix=179
    NonB=180
    VDWOff=181
    Verbose=182
    For=183
    Loop=184
    Tail=185
    Head=186
    Or_op=187
    And_op=188
    Not_op=189
    Comma=190
    Complex=191
    Integer=192
    Logical=193
    Real=194
    Double_quote_string=195
    SHARP_COMMENT=196
    EXCLM_COMMENT=197
    SMCLN_COMMENT=198
    Simple_name=199
    Simple_names=200
    Integers=201
    Hbda=202
    Hbdb=203
    L_paren=204
    R_paren=205
    Colon=206
    Equ_op=207
    Lt_op=208
    Gt_op=209
    Leq_op=210
    Geq_op=211
    Neq_op=212
    Symbol_name=213
    SPACE=214
    COMMENT=215
    SECTION_COMMENT=216
    LINE_COMMENT=217
    SET_VARIABLE=218
    Abs=219
    Attr_properties=220
    Comparison_ops=221
    SPACE_AP=222
    Averaging_methods=223
    Simple_name_AM=224
    SPACE_AM=225
    Equ_op_PT=226
    Potential_types=227
    Simple_name_PT=228
    SPACE_PT=229
    Rdc_dist_fix_types=230
    Rdc_or_Diff_anis_types=231
    Csa_types=232
    SPACE_TY=233
    Gauss_or_Quart=234
    SPACE_SH=235
    Exclude=236
    Include=237
    End_FL=238
    Class_name=239
    Any_class=240
    SPACE_FL=241
    R_paren_VE=242
    Equ_op_VE=243
    Add_op_VE=244
    Sub_op_VE=245
    Mul_op_VE=246
    Div_op_VE=247
    Exp_op_VE=248
    Comma_VE=249
    Integer_VE=250
    Real_VE=251
    Atom_properties_VE=252
    Abs_VE=253
    Acos_VE=254
    Asin_VE=255
    Cos_VE=256
    Decode_VE=257
    Encode_VE=258
    Exp_VE=259
    Gauss_VE=260
    Heavy_VE=261
    Int_VE=262
    Log10_VE=263
    Log_VE=264
    Max_VE=265
    Maxw_VE=266
    Min_VE=267
    Mod_VE=268
    Norm_VE=269
    Random_VE=270
    Sign_VE=271
    Sin_VE=272
    Sqrt_VE=273
    Tan_VE=274
    Symbol_name_VE=275
    Simple_name_VE=276
    Double_quote_string_VE=277
    SPACE_VE=278
    L_paren_VF=279
    SPACE_VF=280
    L_paren_VS=281
    R_paren_VS=282
    Average_VS=283
    Element_VS=284
    Max_VS=285
    Min_VS=286
    Norm_VS=287
    Rms_VS=288
    Sum_VS=289
    Atom_properties_VS=290
    SPACE_VS=291
    L_paren_CF=292
    R_paren_CF=293
    In_CF=294
    Integer_CF=295
    Real_CF=296
    Symbol_name_CF=297
    Simple_name_CF=298
    SPACE_CF=299
    COMMENT_CF=300
    Simple_name_LL=301
    SPACE_LL=302

    def __init__(self, input:TokenStream, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.10.1")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None




    class Xplor_nih_mrContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EOF(self):
            return self.getToken(XplorMRParser.EOF, 0)

        def distance_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Distance_restraintContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Distance_restraintContext,i)


        def dihedral_angle_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Dihedral_angle_restraintContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Dihedral_angle_restraintContext,i)


        def rdc_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Rdc_restraintContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Rdc_restraintContext,i)


        def planar_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Planar_restraintContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Planar_restraintContext,i)


        def harmonic_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Harmonic_restraintContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Harmonic_restraintContext,i)


        def antidistance_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Antidistance_restraintContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Antidistance_restraintContext,i)


        def coupling_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Coupling_restraintContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Coupling_restraintContext,i)


        def carbon_shift_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Carbon_shift_restraintContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Carbon_shift_restraintContext,i)


        def proton_shift_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Proton_shift_restraintContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Proton_shift_restraintContext,i)


        def dihedral_angle_db_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Dihedral_angle_db_restraintContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Dihedral_angle_db_restraintContext,i)


        def radius_of_gyration_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Radius_of_gyration_restraintContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Radius_of_gyration_restraintContext,i)


        def diffusion_anisotropy_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Diffusion_anisotropy_restraintContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Diffusion_anisotropy_restraintContext,i)


        def orientation_db_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Orientation_db_restraintContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Orientation_db_restraintContext,i)


        def csa_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Csa_restraintContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Csa_restraintContext,i)


        def pcsa_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Pcsa_restraintContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Pcsa_restraintContext,i)


        def one_bond_coupling_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.One_bond_coupling_restraintContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.One_bond_coupling_restraintContext,i)


        def angle_db_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Angle_db_restraintContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Angle_db_restraintContext,i)


        def pre_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Pre_restraintContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Pre_restraintContext,i)


        def pcs_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Pcs_restraintContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Pcs_restraintContext,i)


        def prdc_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Prdc_restraintContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Prdc_restraintContext,i)


        def porientation_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Porientation_restraintContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Porientation_restraintContext,i)


        def pccr_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Pccr_restraintContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Pccr_restraintContext,i)


        def hbond_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Hbond_restraintContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Hbond_restraintContext,i)


        def hbond_db_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Hbond_db_restraintContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Hbond_db_restraintContext,i)


        def ncs_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Ncs_restraintContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Ncs_restraintContext,i)


        def flag_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Flag_statementContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Flag_statementContext,i)


        def vector_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Vector_statementContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Vector_statementContext,i)


        def evaluate_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Evaluate_statementContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Evaluate_statementContext,i)


        def patch_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Patch_statementContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Patch_statementContext,i)


        def parameter_setting(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Parameter_settingContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Parameter_settingContext,i)


        def noe_assign_loop(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Noe_assign_loopContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Noe_assign_loopContext,i)


        def dihedral_assign_loop(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Dihedral_assign_loopContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Dihedral_assign_loopContext,i)


        def sani_assign_loop(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Sani_assign_loopContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Sani_assign_loopContext,i)


        def hbond_assign_loop(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Hbond_assign_loopContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Hbond_assign_loopContext,i)


        def hbond_db_assign_loop(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Hbond_db_assign_loopContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Hbond_db_assign_loopContext,i)


        def coup_assign_loop(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Coup_assign_loopContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Coup_assign_loopContext,i)


        def xadc_assign_loop(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Xadc_assign_loopContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Xadc_assign_loopContext,i)


        def coll_assign_loop(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Coll_assign_loopContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Coll_assign_loopContext,i)


        def csa_assign_loop(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Csa_assign_loopContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Csa_assign_loopContext,i)


        def pre_assign_loop(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Pre_assign_loopContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Pre_assign_loopContext,i)


        def pcs_assign_loop(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Pcs_assign_loopContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Pcs_assign_loopContext,i)


        def noe_assign(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Noe_assignContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Noe_assignContext,i)


        def dihedral_assign(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Dihedral_assignContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Dihedral_assignContext,i)


        def sani_assign(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Sani_assignContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Sani_assignContext,i)


        def planar_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Planar_statementContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Planar_statementContext,i)


        def harmonic_assign(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Harmonic_assignContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Harmonic_assignContext,i)


        def hbond_assign(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Hbond_assignContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Hbond_assignContext,i)


        def hbond_db_assign(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Hbond_db_assignContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Hbond_db_assignContext,i)


        def coup_assign(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Coup_assignContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Coup_assignContext,i)


        def xadc_assign(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Xadc_assignContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Xadc_assignContext,i)


        def coll_assign(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Coll_assignContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Coll_assignContext,i)


        def csa_assign(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Csa_assignContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Csa_assignContext,i)


        def pre_assign(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Pre_assignContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Pre_assignContext,i)


        def pcs_assign(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Pcs_assignContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Pcs_assignContext,i)


        def observed(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.ObservedContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.ObservedContext,i)


        def parameter_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Parameter_statementContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Parameter_statementContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_xplor_nih_mr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterXplor_nih_mr" ):
                listener.enterXplor_nih_mr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitXplor_nih_mr" ):
                listener.exitXplor_nih_mr(self)




    def xplor_nih_mr(self):

        localctx = XplorMRParser.Xplor_nih_mrContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_xplor_nih_mr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 310
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << XplorMRParser.Noe) | (1 << XplorMRParser.Assign) | (1 << XplorMRParser.Reset) | (1 << XplorMRParser.Restraints) | (1 << XplorMRParser.Dihedral) | (1 << XplorMRParser.Print_any) | (1 << XplorMRParser.Sanisotropy) | (1 << XplorMRParser.Xdipolar) | (1 << XplorMRParser.Dipolar) | (1 << XplorMRParser.VeAngle) | (1 << XplorMRParser.Tensor) | (1 << XplorMRParser.Anisotropy) | (1 << XplorMRParser.Planar) | (1 << XplorMRParser.Group) | (1 << XplorMRParser.Initialize) | (1 << XplorMRParser.Harmonic) | (1 << XplorMRParser.Xadc))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (XplorMRParser.Coupling - 64)) | (1 << (XplorMRParser.Carbon - 64)) | (1 << (XplorMRParser.Proton - 64)) | (1 << (XplorMRParser.Observed - 64)) | (1 << (XplorMRParser.Ramachandran - 64)) | (1 << (XplorMRParser.Collapse - 64)) | (1 << (XplorMRParser.Danisotropy - 64)) | (1 << (XplorMRParser.Orient - 64)) | (1 << (XplorMRParser.Dcsa - 64)) | (1 << (XplorMRParser.Pcsa - 64)) | (1 << (XplorMRParser.OneBond - 64)) | (1 << (XplorMRParser.AngleDb - 64)) | (1 << (XplorMRParser.PMagnetic - 64)) | (1 << (XplorMRParser.Xpcs - 64)) | (1 << (XplorMRParser.Xrdcoupling - 64)) | (1 << (XplorMRParser.Xangle - 64)) | (1 << (XplorMRParser.Xccr - 64)))) != 0) or ((((_la - 132)) & ~0x3f) == 0 and ((1 << (_la - 132)) & ((1 << (XplorMRParser.Ncs - 132)) | (1 << (XplorMRParser.Flags - 132)) | (1 << (XplorMRParser.BondedTo - 132)) | (1 << (XplorMRParser.Vector - 132)) | (1 << (XplorMRParser.Evaluate_Lp - 132)) | (1 << (XplorMRParser.Patch - 132)) | (1 << (XplorMRParser.Parameter - 132)) | (1 << (XplorMRParser.HBonded - 132)) | (1 << (XplorMRParser.Improper - 132)) | (1 << (XplorMRParser.NBFix - 132)) | (1 << (XplorMRParser.NonB - 132)) | (1 << (XplorMRParser.VDWOff - 132)) | (1 << (XplorMRParser.Verbose - 132)) | (1 << (XplorMRParser.For - 132)))) != 0) or _la==XplorMRParser.Hbda or _la==XplorMRParser.Hbdb:
                self.state = 308
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,0,self._ctx)
                if la_ == 1:
                    self.state = 252
                    self.distance_restraint()
                    pass

                elif la_ == 2:
                    self.state = 253
                    self.dihedral_angle_restraint()
                    pass

                elif la_ == 3:
                    self.state = 254
                    self.rdc_restraint()
                    pass

                elif la_ == 4:
                    self.state = 255
                    self.planar_restraint()
                    pass

                elif la_ == 5:
                    self.state = 256
                    self.harmonic_restraint()
                    pass

                elif la_ == 6:
                    self.state = 257
                    self.antidistance_restraint()
                    pass

                elif la_ == 7:
                    self.state = 258
                    self.coupling_restraint()
                    pass

                elif la_ == 8:
                    self.state = 259
                    self.carbon_shift_restraint()
                    pass

                elif la_ == 9:
                    self.state = 260
                    self.proton_shift_restraint()
                    pass

                elif la_ == 10:
                    self.state = 261
                    self.dihedral_angle_db_restraint()
                    pass

                elif la_ == 11:
                    self.state = 262
                    self.radius_of_gyration_restraint()
                    pass

                elif la_ == 12:
                    self.state = 263
                    self.diffusion_anisotropy_restraint()
                    pass

                elif la_ == 13:
                    self.state = 264
                    self.orientation_db_restraint()
                    pass

                elif la_ == 14:
                    self.state = 265
                    self.csa_restraint()
                    pass

                elif la_ == 15:
                    self.state = 266
                    self.pcsa_restraint()
                    pass

                elif la_ == 16:
                    self.state = 267
                    self.one_bond_coupling_restraint()
                    pass

                elif la_ == 17:
                    self.state = 268
                    self.angle_db_restraint()
                    pass

                elif la_ == 18:
                    self.state = 269
                    self.pre_restraint()
                    pass

                elif la_ == 19:
                    self.state = 270
                    self.pcs_restraint()
                    pass

                elif la_ == 20:
                    self.state = 271
                    self.prdc_restraint()
                    pass

                elif la_ == 21:
                    self.state = 272
                    self.porientation_restraint()
                    pass

                elif la_ == 22:
                    self.state = 273
                    self.pccr_restraint()
                    pass

                elif la_ == 23:
                    self.state = 274
                    self.hbond_restraint()
                    pass

                elif la_ == 24:
                    self.state = 275
                    self.hbond_db_restraint()
                    pass

                elif la_ == 25:
                    self.state = 276
                    self.ncs_restraint()
                    pass

                elif la_ == 26:
                    self.state = 277
                    self.flag_statement()
                    pass

                elif la_ == 27:
                    self.state = 278
                    self.vector_statement()
                    pass

                elif la_ == 28:
                    self.state = 279
                    self.evaluate_statement()
                    pass

                elif la_ == 29:
                    self.state = 280
                    self.patch_statement()
                    pass

                elif la_ == 30:
                    self.state = 281
                    self.parameter_setting()
                    pass

                elif la_ == 31:
                    self.state = 282
                    self.noe_assign_loop()
                    pass

                elif la_ == 32:
                    self.state = 283
                    self.dihedral_assign_loop()
                    pass

                elif la_ == 33:
                    self.state = 284
                    self.sani_assign_loop()
                    pass

                elif la_ == 34:
                    self.state = 285
                    self.hbond_assign_loop()
                    pass

                elif la_ == 35:
                    self.state = 286
                    self.hbond_db_assign_loop()
                    pass

                elif la_ == 36:
                    self.state = 287
                    self.coup_assign_loop()
                    pass

                elif la_ == 37:
                    self.state = 288
                    self.xadc_assign_loop()
                    pass

                elif la_ == 38:
                    self.state = 289
                    self.coll_assign_loop()
                    pass

                elif la_ == 39:
                    self.state = 290
                    self.csa_assign_loop()
                    pass

                elif la_ == 40:
                    self.state = 291
                    self.pre_assign_loop()
                    pass

                elif la_ == 41:
                    self.state = 292
                    self.pcs_assign_loop()
                    pass

                elif la_ == 42:
                    self.state = 293
                    self.noe_assign()
                    pass

                elif la_ == 43:
                    self.state = 294
                    self.dihedral_assign()
                    pass

                elif la_ == 44:
                    self.state = 295
                    self.sani_assign()
                    pass

                elif la_ == 45:
                    self.state = 296
                    self.planar_statement()
                    pass

                elif la_ == 46:
                    self.state = 297
                    self.harmonic_assign()
                    pass

                elif la_ == 47:
                    self.state = 298
                    self.hbond_assign()
                    pass

                elif la_ == 48:
                    self.state = 299
                    self.hbond_db_assign()
                    pass

                elif la_ == 49:
                    self.state = 300
                    self.coup_assign()
                    pass

                elif la_ == 50:
                    self.state = 301
                    self.xadc_assign()
                    pass

                elif la_ == 51:
                    self.state = 302
                    self.coll_assign()
                    pass

                elif la_ == 52:
                    self.state = 303
                    self.csa_assign()
                    pass

                elif la_ == 53:
                    self.state = 304
                    self.pre_assign()
                    pass

                elif la_ == 54:
                    self.state = 305
                    self.pcs_assign()
                    pass

                elif la_ == 55:
                    self.state = 306
                    self.observed()
                    pass

                elif la_ == 56:
                    self.state = 307
                    self.parameter_statement()
                    pass


                self.state = 312
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 313
            self.match(XplorMRParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Distance_restraintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Noe(self):
            return self.getToken(XplorMRParser.Noe, 0)

        def End(self):
            return self.getToken(XplorMRParser.End, 0)

        def noe_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Noe_statementContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Noe_statementContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_distance_restraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDistance_restraint" ):
                listener.enterDistance_restraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDistance_restraint" ):
                listener.exitDistance_restraint(self)




    def distance_restraint(self):

        localctx = XplorMRParser.Distance_restraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_distance_restraint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 315
            self.match(XplorMRParser.Noe)
            self.state = 319
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << XplorMRParser.Assign) | (1 << XplorMRParser.Asymptote) | (1 << XplorMRParser.Average) | (1 << XplorMRParser.Bhig) | (1 << XplorMRParser.Ceiling) | (1 << XplorMRParser.Classification) | (1 << XplorMRParser.CountViol) | (1 << XplorMRParser.Distribute) | (1 << XplorMRParser.Monomers) | (1 << XplorMRParser.Ncount) | (1 << XplorMRParser.Nrestraints) | (1 << XplorMRParser.Potential) | (1 << XplorMRParser.Predict) | (1 << XplorMRParser.Print) | (1 << XplorMRParser.Reset) | (1 << XplorMRParser.Rswitch) | (1 << XplorMRParser.Scale) | (1 << XplorMRParser.SoExponent) | (1 << XplorMRParser.SqConstant) | (1 << XplorMRParser.SqExponent) | (1 << XplorMRParser.SqOffset) | (1 << XplorMRParser.Temperature))) != 0) or _la==XplorMRParser.For:
                self.state = 316
                self.noe_statement()
                self.state = 321
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 322
            self.match(XplorMRParser.End)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Dihedral_angle_restraintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Dihedral(self):
            return self.getToken(XplorMRParser.Dihedral, 0)

        def End(self):
            return self.getToken(XplorMRParser.End, 0)

        def Restraints(self):
            return self.getToken(XplorMRParser.Restraints, 0)

        def dihedral_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Dihedral_statementContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Dihedral_statementContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_dihedral_angle_restraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDihedral_angle_restraint" ):
                listener.enterDihedral_angle_restraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDihedral_angle_restraint" ):
                listener.exitDihedral_angle_restraint(self)




    def dihedral_angle_restraint(self):

        localctx = XplorMRParser.Dihedral_angle_restraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_dihedral_angle_restraint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 325
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==XplorMRParser.Restraints:
                self.state = 324
                self.match(XplorMRParser.Restraints)


            self.state = 327
            self.match(XplorMRParser.Dihedral)
            self.state = 331
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << XplorMRParser.Assign) | (1 << XplorMRParser.Reset) | (1 << XplorMRParser.Scale) | (1 << XplorMRParser.Nassign) | (1 << XplorMRParser.Print_any))) != 0) or _la==XplorMRParser.Vector or _la==XplorMRParser.For:
                self.state = 328
                self.dihedral_statement()
                self.state = 333
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 334
            self.match(XplorMRParser.End)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Rdc_restraintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Sanisotropy(self):
            return self.getToken(XplorMRParser.Sanisotropy, 0)

        def End(self):
            return self.getToken(XplorMRParser.End, 0)

        def sani_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Sani_statementContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Sani_statementContext,i)


        def Xdipolar(self):
            return self.getToken(XplorMRParser.Xdipolar, 0)

        def Dipolar(self):
            return self.getToken(XplorMRParser.Dipolar, 0)

        def xdip_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Xdip_statementContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Xdip_statementContext,i)


        def VeAngle(self):
            return self.getToken(XplorMRParser.VeAngle, 0)

        def vean_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Vean_statementContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Vean_statementContext,i)


        def Tensor(self):
            return self.getToken(XplorMRParser.Tensor, 0)

        def tenso_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Tenso_statementContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Tenso_statementContext,i)


        def Anisotropy(self):
            return self.getToken(XplorMRParser.Anisotropy, 0)

        def anis_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Anis_statementContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Anis_statementContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_rdc_restraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRdc_restraint" ):
                listener.enterRdc_restraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRdc_restraint" ):
                listener.exitRdc_restraint(self)




    def rdc_restraint(self):

        localctx = XplorMRParser.Rdc_restraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_rdc_restraint)
        self._la = 0 # Token type
        try:
            self.state = 376
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [XplorMRParser.Sanisotropy]:
                self.enterOuterAlt(localctx, 1)
                self.state = 336
                self.match(XplorMRParser.Sanisotropy)
                self.state = 340
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << XplorMRParser.Assign) | (1 << XplorMRParser.Classification) | (1 << XplorMRParser.Nrestraints) | (1 << XplorMRParser.Potential) | (1 << XplorMRParser.Print) | (1 << XplorMRParser.Reset) | (1 << XplorMRParser.Coefficients) | (1 << XplorMRParser.ForceConstant))) != 0) or _la==XplorMRParser.For:
                    self.state = 337
                    self.sani_statement()
                    self.state = 342
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 343
                self.match(XplorMRParser.End)
                pass
            elif token in [XplorMRParser.Xdipolar, XplorMRParser.Dipolar]:
                self.enterOuterAlt(localctx, 2)
                self.state = 344
                _la = self._input.LA(1)
                if not(_la==XplorMRParser.Xdipolar or _la==XplorMRParser.Dipolar):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 348
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << XplorMRParser.Assign) | (1 << XplorMRParser.Average) | (1 << XplorMRParser.Classification) | (1 << XplorMRParser.Nrestraints) | (1 << XplorMRParser.Potential) | (1 << XplorMRParser.Print) | (1 << XplorMRParser.Reset) | (1 << XplorMRParser.Scale) | (1 << XplorMRParser.Coefficients) | (1 << XplorMRParser.ForceConstant) | (1 << XplorMRParser.Type) | (1 << XplorMRParser.Sign))) != 0):
                    self.state = 345
                    self.xdip_statement()
                    self.state = 350
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 351
                self.match(XplorMRParser.End)
                pass
            elif token in [XplorMRParser.VeAngle]:
                self.enterOuterAlt(localctx, 3)
                self.state = 352
                self.match(XplorMRParser.VeAngle)
                self.state = 356
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << XplorMRParser.Assign) | (1 << XplorMRParser.Classification) | (1 << XplorMRParser.Nrestraints) | (1 << XplorMRParser.Print) | (1 << XplorMRParser.Reset) | (1 << XplorMRParser.ForceConstant) | (1 << XplorMRParser.Cv) | (1 << XplorMRParser.Partition))) != 0):
                    self.state = 353
                    self.vean_statement()
                    self.state = 358
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 359
                self.match(XplorMRParser.End)
                pass
            elif token in [XplorMRParser.Tensor]:
                self.enterOuterAlt(localctx, 4)
                self.state = 360
                self.match(XplorMRParser.Tensor)
                self.state = 364
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << XplorMRParser.Assign) | (1 << XplorMRParser.Classification) | (1 << XplorMRParser.Nrestraints) | (1 << XplorMRParser.Potential) | (1 << XplorMRParser.Print) | (1 << XplorMRParser.Reset) | (1 << XplorMRParser.Coefficients))) != 0):
                    self.state = 361
                    self.tenso_statement()
                    self.state = 366
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 367
                self.match(XplorMRParser.End)
                pass
            elif token in [XplorMRParser.Anisotropy]:
                self.enterOuterAlt(localctx, 5)
                self.state = 368
                self.match(XplorMRParser.Anisotropy)
                self.state = 372
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << XplorMRParser.Assign) | (1 << XplorMRParser.Classification) | (1 << XplorMRParser.Nrestraints) | (1 << XplorMRParser.Potential) | (1 << XplorMRParser.Print) | (1 << XplorMRParser.Reset) | (1 << XplorMRParser.Coefficients) | (1 << XplorMRParser.ForceConstant) | (1 << XplorMRParser.Type))) != 0):
                    self.state = 369
                    self.anis_statement()
                    self.state = 374
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 375
                self.match(XplorMRParser.End)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Planar_restraintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Planar(self):
            return self.getToken(XplorMRParser.Planar, 0)

        def End(self):
            return self.getToken(XplorMRParser.End, 0)

        def Restraints(self):
            return self.getToken(XplorMRParser.Restraints, 0)

        def planar_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Planar_statementContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Planar_statementContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_planar_restraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPlanar_restraint" ):
                listener.enterPlanar_restraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPlanar_restraint" ):
                listener.exitPlanar_restraint(self)




    def planar_restraint(self):

        localctx = XplorMRParser.Planar_restraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_planar_restraint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 379
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==XplorMRParser.Restraints:
                self.state = 378
                self.match(XplorMRParser.Restraints)


            self.state = 381
            self.match(XplorMRParser.Planar)
            self.state = 385
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << XplorMRParser.Print_any) | (1 << XplorMRParser.Group) | (1 << XplorMRParser.Initialize))) != 0) or _la==XplorMRParser.Vector:
                self.state = 382
                self.planar_statement()
                self.state = 387
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 388
            self.match(XplorMRParser.End)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Harmonic_restraintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Harmonic(self):
            return self.getToken(XplorMRParser.Harmonic, 0)

        def End(self):
            return self.getToken(XplorMRParser.End, 0)

        def Restraints(self):
            return self.getToken(XplorMRParser.Restraints, 0)

        def harmonic_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Harmonic_statementContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Harmonic_statementContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_harmonic_restraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHarmonic_restraint" ):
                listener.enterHarmonic_restraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHarmonic_restraint" ):
                listener.exitHarmonic_restraint(self)




    def harmonic_restraint(self):

        localctx = XplorMRParser.Harmonic_restraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_harmonic_restraint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 391
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==XplorMRParser.Restraints:
                self.state = 390
                self.match(XplorMRParser.Restraints)


            self.state = 393
            self.match(XplorMRParser.Harmonic)
            self.state = 397
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==XplorMRParser.Exponent or _la==XplorMRParser.Normal or _la==XplorMRParser.Vector:
                self.state = 394
                self.harmonic_statement()
                self.state = 399
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 400
            self.match(XplorMRParser.End)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Antidistance_restraintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Xadc(self):
            return self.getToken(XplorMRParser.Xadc, 0)

        def End(self):
            return self.getToken(XplorMRParser.End, 0)

        def antidistance_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Antidistance_statementContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Antidistance_statementContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_antidistance_restraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAntidistance_restraint" ):
                listener.enterAntidistance_restraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAntidistance_restraint" ):
                listener.exitAntidistance_restraint(self)




    def antidistance_restraint(self):

        localctx = XplorMRParser.Antidistance_restraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_antidistance_restraint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 402
            self.match(XplorMRParser.Xadc)
            self.state = 406
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << XplorMRParser.Assign) | (1 << XplorMRParser.Classification) | (1 << XplorMRParser.Nrestraints) | (1 << XplorMRParser.Print) | (1 << XplorMRParser.Reset) | (1 << XplorMRParser.ForceConstant) | (1 << XplorMRParser.Expectation) | (1 << XplorMRParser.Size) | (1 << XplorMRParser.Zero))) != 0) or _la==XplorMRParser.For:
                self.state = 403
                self.antidistance_statement()
                self.state = 408
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 409
            self.match(XplorMRParser.End)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Coupling_restraintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Coupling(self):
            return self.getToken(XplorMRParser.Coupling, 0)

        def End(self):
            return self.getToken(XplorMRParser.End, 0)

        def coupling_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Coupling_statementContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Coupling_statementContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_coupling_restraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCoupling_restraint" ):
                listener.enterCoupling_restraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCoupling_restraint" ):
                listener.exitCoupling_restraint(self)




    def coupling_restraint(self):

        localctx = XplorMRParser.Coupling_restraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_coupling_restraint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 411
            self.match(XplorMRParser.Coupling)
            self.state = 415
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((((_la - 4)) & ~0x3f) == 0 and ((1 << (_la - 4)) & ((1 << (XplorMRParser.Assign - 4)) | (1 << (XplorMRParser.Classification - 4)) | (1 << (XplorMRParser.Nrestraints - 4)) | (1 << (XplorMRParser.Potential - 4)) | (1 << (XplorMRParser.Print - 4)) | (1 << (XplorMRParser.Reset - 4)) | (1 << (XplorMRParser.Coefficients - 4)) | (1 << (XplorMRParser.ForceConstant - 4)) | (1 << (XplorMRParser.Cv - 4)) | (1 << (XplorMRParser.Partition - 4)) | (1 << (XplorMRParser.DegEnergy - 4)))) != 0) or _la==XplorMRParser.For:
                self.state = 412
                self.coupling_statement()
                self.state = 417
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 418
            self.match(XplorMRParser.End)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Carbon_shift_restraintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Carbon(self):
            return self.getToken(XplorMRParser.Carbon, 0)

        def End(self):
            return self.getToken(XplorMRParser.End, 0)

        def carbon_shift_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Carbon_shift_statementContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Carbon_shift_statementContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_carbon_shift_restraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCarbon_shift_restraint" ):
                listener.enterCarbon_shift_restraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCarbon_shift_restraint" ):
                listener.exitCarbon_shift_restraint(self)




    def carbon_shift_restraint(self):

        localctx = XplorMRParser.Carbon_shift_restraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_carbon_shift_restraint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 420
            self.match(XplorMRParser.Carbon)
            self.state = 424
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << XplorMRParser.Assign) | (1 << XplorMRParser.Classification) | (1 << XplorMRParser.Nrestraints) | (1 << XplorMRParser.Potential) | (1 << XplorMRParser.Print) | (1 << XplorMRParser.Reset) | (1 << XplorMRParser.ForceConstant) | (1 << XplorMRParser.Expectation) | (1 << XplorMRParser.Zero))) != 0) or ((((_la - 67)) & ~0x3f) == 0 and ((1 << (_la - 67)) & ((1 << (XplorMRParser.PhiStep - 67)) | (1 << (XplorMRParser.PsiStep - 67)) | (1 << (XplorMRParser.Rcoil - 67)))) != 0):
                self.state = 421
                self.carbon_shift_statement()
                self.state = 426
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 427
            self.match(XplorMRParser.End)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Proton_shift_restraintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Proton(self):
            return self.getToken(XplorMRParser.Proton, 0)

        def End(self):
            return self.getToken(XplorMRParser.End, 0)

        def proton_shift_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Proton_shift_statementContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Proton_shift_statementContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_proton_shift_restraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProton_shift_restraint" ):
                listener.enterProton_shift_restraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProton_shift_restraint" ):
                listener.exitProton_shift_restraint(self)




    def proton_shift_restraint(self):

        localctx = XplorMRParser.Proton_shift_restraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_proton_shift_restraint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 429
            self.match(XplorMRParser.Proton)
            self.state = 433
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << XplorMRParser.Classification) | (1 << XplorMRParser.Potential) | (1 << XplorMRParser.Print) | (1 << XplorMRParser.Reset) | (1 << XplorMRParser.ForceConstant) | (1 << XplorMRParser.Anisotropy))) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & ((1 << (XplorMRParser.DegEnergy - 65)) | (1 << (XplorMRParser.Carbon - 65)) | (1 << (XplorMRParser.Rcoil - 65)) | (1 << (XplorMRParser.Observed - 65)) | (1 << (XplorMRParser.Amides - 65)) | (1 << (XplorMRParser.Nitrogens - 65)) | (1 << (XplorMRParser.Oxygens - 65)) | (1 << (XplorMRParser.RingAtoms - 65)) | (1 << (XplorMRParser.AlphasAndAmides - 65)) | (1 << (XplorMRParser.Error - 65)))) != 0):
                self.state = 430
                self.proton_shift_statement()
                self.state = 435
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 436
            self.match(XplorMRParser.End)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Dihedral_angle_db_restraintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Ramachandran(self):
            return self.getToken(XplorMRParser.Ramachandran, 0)

        def End(self):
            return self.getToken(XplorMRParser.End, 0)

        def ramachandran_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Ramachandran_statementContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Ramachandran_statementContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_dihedral_angle_db_restraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDihedral_angle_db_restraint" ):
                listener.enterDihedral_angle_db_restraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDihedral_angle_db_restraint" ):
                listener.exitDihedral_angle_db_restraint(self)




    def dihedral_angle_db_restraint(self):

        localctx = XplorMRParser.Dihedral_angle_db_restraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_dihedral_angle_db_restraint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 438
            self.match(XplorMRParser.Ramachandran)
            self.state = 442
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << XplorMRParser.Assign) | (1 << XplorMRParser.Classification) | (1 << XplorMRParser.Nrestraints) | (1 << XplorMRParser.Print) | (1 << XplorMRParser.Reset) | (1 << XplorMRParser.Scale) | (1 << XplorMRParser.Cutoff) | (1 << XplorMRParser.ForceConstant) | (1 << XplorMRParser.Size) | (1 << XplorMRParser.Zero))) != 0) or ((((_la - 79)) & ~0x3f) == 0 and ((1 << (_la - 79)) & ((1 << (XplorMRParser.Gaussian - 79)) | (1 << (XplorMRParser.Phase - 79)) | (1 << (XplorMRParser.Quartic - 79)) | (1 << (XplorMRParser.Shape - 79)) | (1 << (XplorMRParser.Sort - 79)))) != 0):
                self.state = 439
                self.ramachandran_statement()
                self.state = 444
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 445
            self.match(XplorMRParser.End)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Radius_of_gyration_restraintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Collapse(self):
            return self.getToken(XplorMRParser.Collapse, 0)

        def End(self):
            return self.getToken(XplorMRParser.End, 0)

        def collapse_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Collapse_statementContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Collapse_statementContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_radius_of_gyration_restraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRadius_of_gyration_restraint" ):
                listener.enterRadius_of_gyration_restraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRadius_of_gyration_restraint" ):
                listener.exitRadius_of_gyration_restraint(self)




    def radius_of_gyration_restraint(self):

        localctx = XplorMRParser.Radius_of_gyration_restraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_radius_of_gyration_restraint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 447
            self.match(XplorMRParser.Collapse)
            self.state = 451
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << XplorMRParser.Assign) | (1 << XplorMRParser.Print) | (1 << XplorMRParser.Reset) | (1 << XplorMRParser.Scale))) != 0) or _la==XplorMRParser.For:
                self.state = 448
                self.collapse_statement()
                self.state = 453
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 454
            self.match(XplorMRParser.End)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Diffusion_anisotropy_restraintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Danisotropy(self):
            return self.getToken(XplorMRParser.Danisotropy, 0)

        def End(self):
            return self.getToken(XplorMRParser.End, 0)

        def diffusion_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Diffusion_statementContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Diffusion_statementContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_diffusion_anisotropy_restraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDiffusion_anisotropy_restraint" ):
                listener.enterDiffusion_anisotropy_restraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDiffusion_anisotropy_restraint" ):
                listener.exitDiffusion_anisotropy_restraint(self)




    def diffusion_anisotropy_restraint(self):

        localctx = XplorMRParser.Diffusion_anisotropy_restraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_diffusion_anisotropy_restraint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 456
            self.match(XplorMRParser.Danisotropy)
            self.state = 460
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << XplorMRParser.Assign) | (1 << XplorMRParser.Classification) | (1 << XplorMRParser.Nrestraints) | (1 << XplorMRParser.Potential) | (1 << XplorMRParser.Print) | (1 << XplorMRParser.Reset) | (1 << XplorMRParser.Coefficients) | (1 << XplorMRParser.ForceConstant) | (1 << XplorMRParser.Type))) != 0):
                self.state = 457
                self.diffusion_statement()
                self.state = 462
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 463
            self.match(XplorMRParser.End)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Orientation_db_restraintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Orient(self):
            return self.getToken(XplorMRParser.Orient, 0)

        def End(self):
            return self.getToken(XplorMRParser.End, 0)

        def orientation_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Orientation_statementContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Orientation_statementContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_orientation_db_restraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOrientation_db_restraint" ):
                listener.enterOrientation_db_restraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOrientation_db_restraint" ):
                listener.exitOrientation_db_restraint(self)




    def orientation_db_restraint(self):

        localctx = XplorMRParser.Orientation_db_restraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_orientation_db_restraint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 465
            self.match(XplorMRParser.Orient)
            self.state = 469
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << XplorMRParser.Assign) | (1 << XplorMRParser.Classification) | (1 << XplorMRParser.Nrestraints) | (1 << XplorMRParser.Print) | (1 << XplorMRParser.Reset) | (1 << XplorMRParser.Cutoff) | (1 << XplorMRParser.ForceConstant) | (1 << XplorMRParser.Size) | (1 << XplorMRParser.Zero))) != 0) or ((((_la - 79)) & ~0x3f) == 0 and ((1 << (_la - 79)) & ((1 << (XplorMRParser.Gaussian - 79)) | (1 << (XplorMRParser.Quartic - 79)) | (1 << (XplorMRParser.Height - 79)) | (1 << (XplorMRParser.MaxGaussians - 79)) | (1 << (XplorMRParser.NewGaussian - 79)))) != 0) or _la==XplorMRParser.Residue:
                self.state = 466
                self.orientation_statement()
                self.state = 471
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 472
            self.match(XplorMRParser.End)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Csa_restraintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Dcsa(self):
            return self.getToken(XplorMRParser.Dcsa, 0)

        def End(self):
            return self.getToken(XplorMRParser.End, 0)

        def csa_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Csa_statementContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Csa_statementContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_csa_restraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCsa_restraint" ):
                listener.enterCsa_restraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCsa_restraint" ):
                listener.exitCsa_restraint(self)




    def csa_restraint(self):

        localctx = XplorMRParser.Csa_restraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_csa_restraint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 474
            self.match(XplorMRParser.Dcsa)
            self.state = 478
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << XplorMRParser.Assign) | (1 << XplorMRParser.Classification) | (1 << XplorMRParser.Nrestraints) | (1 << XplorMRParser.Potential) | (1 << XplorMRParser.Print) | (1 << XplorMRParser.Reset) | (1 << XplorMRParser.Scale) | (1 << XplorMRParser.Coefficients) | (1 << XplorMRParser.ForceConstant) | (1 << XplorMRParser.Type))) != 0) or _la==XplorMRParser.Sigma or _la==XplorMRParser.For:
                self.state = 475
                self.csa_statement()
                self.state = 480
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 481
            self.match(XplorMRParser.End)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pcsa_restraintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Pcsa(self):
            return self.getToken(XplorMRParser.Pcsa, 0)

        def End(self):
            return self.getToken(XplorMRParser.End, 0)

        def pcsa_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Pcsa_statementContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Pcsa_statementContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_pcsa_restraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPcsa_restraint" ):
                listener.enterPcsa_restraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPcsa_restraint" ):
                listener.exitPcsa_restraint(self)




    def pcsa_restraint(self):

        localctx = XplorMRParser.Pcsa_restraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_pcsa_restraint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 483
            self.match(XplorMRParser.Pcsa)
            self.state = 487
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << XplorMRParser.Assign) | (1 << XplorMRParser.Classification) | (1 << XplorMRParser.Nrestraints) | (1 << XplorMRParser.Potential) | (1 << XplorMRParser.Print) | (1 << XplorMRParser.Reset) | (1 << XplorMRParser.Scale) | (1 << XplorMRParser.Coefficients) | (1 << XplorMRParser.ForceConstant))) != 0) or _la==XplorMRParser.Sigma:
                self.state = 484
                self.pcsa_statement()
                self.state = 489
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 490
            self.match(XplorMRParser.End)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class One_bond_coupling_restraintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OneBond(self):
            return self.getToken(XplorMRParser.OneBond, 0)

        def End(self):
            return self.getToken(XplorMRParser.End, 0)

        def one_bond_coupling_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.One_bond_coupling_statementContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.One_bond_coupling_statementContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_one_bond_coupling_restraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOne_bond_coupling_restraint" ):
                listener.enterOne_bond_coupling_restraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOne_bond_coupling_restraint" ):
                listener.exitOne_bond_coupling_restraint(self)




    def one_bond_coupling_restraint(self):

        localctx = XplorMRParser.One_bond_coupling_restraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_one_bond_coupling_restraint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 492
            self.match(XplorMRParser.OneBond)
            self.state = 496
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << XplorMRParser.Assign) | (1 << XplorMRParser.Classification) | (1 << XplorMRParser.Nrestraints) | (1 << XplorMRParser.Potential) | (1 << XplorMRParser.Print) | (1 << XplorMRParser.Reset) | (1 << XplorMRParser.Coefficients) | (1 << XplorMRParser.ForceConstant))) != 0):
                self.state = 493
                self.one_bond_coupling_statement()
                self.state = 498
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 499
            self.match(XplorMRParser.End)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Angle_db_restraintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AngleDb(self):
            return self.getToken(XplorMRParser.AngleDb, 0)

        def End(self):
            return self.getToken(XplorMRParser.End, 0)

        def angle_db_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Angle_db_statementContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Angle_db_statementContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_angle_db_restraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAngle_db_restraint" ):
                listener.enterAngle_db_restraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAngle_db_restraint" ):
                listener.exitAngle_db_restraint(self)




    def angle_db_restraint(self):

        localctx = XplorMRParser.Angle_db_restraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_angle_db_restraint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 501
            self.match(XplorMRParser.AngleDb)
            self.state = 505
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << XplorMRParser.Assign) | (1 << XplorMRParser.Classification) | (1 << XplorMRParser.Nrestraints) | (1 << XplorMRParser.Potential) | (1 << XplorMRParser.Print) | (1 << XplorMRParser.Reset) | (1 << XplorMRParser.ForceConstant) | (1 << XplorMRParser.Expectation) | (1 << XplorMRParser.Size) | (1 << XplorMRParser.Zero))) != 0) or _la==XplorMRParser.Error or _la==XplorMRParser.DerivFlag:
                self.state = 502
                self.angle_db_statement()
                self.state = 507
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 508
            self.match(XplorMRParser.End)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pre_restraintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PMagnetic(self):
            return self.getToken(XplorMRParser.PMagnetic, 0)

        def End(self):
            return self.getToken(XplorMRParser.End, 0)

        def pre_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Pre_statementContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Pre_statementContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_pre_restraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPre_restraint" ):
                listener.enterPre_restraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPre_restraint" ):
                listener.exitPre_restraint(self)




    def pre_restraint(self):

        localctx = XplorMRParser.Pre_restraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_pre_restraint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 510
            self.match(XplorMRParser.PMagnetic)
            self.state = 514
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << XplorMRParser.Assign) | (1 << XplorMRParser.Classification) | (1 << XplorMRParser.Nrestraints) | (1 << XplorMRParser.Potential) | (1 << XplorMRParser.Print) | (1 << XplorMRParser.Reset) | (1 << XplorMRParser.ForceConstant))) != 0) or ((((_la - 98)) & ~0x3f) == 0 and ((1 << (_la - 98)) & ((1 << (XplorMRParser.Kconst - 98)) | (1 << (XplorMRParser.Omega - 98)) | (1 << (XplorMRParser.Tauc - 98)) | (1 << (XplorMRParser.Debug - 98)))) != 0) or _la==XplorMRParser.For:
                self.state = 511
                self.pre_statement()
                self.state = 516
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 517
            self.match(XplorMRParser.End)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pcs_restraintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Xpcs(self):
            return self.getToken(XplorMRParser.Xpcs, 0)

        def End(self):
            return self.getToken(XplorMRParser.End, 0)

        def pcs_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Pcs_statementContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Pcs_statementContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_pcs_restraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPcs_restraint" ):
                listener.enterPcs_restraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPcs_restraint" ):
                listener.exitPcs_restraint(self)




    def pcs_restraint(self):

        localctx = XplorMRParser.Pcs_restraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_pcs_restraint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 519
            self.match(XplorMRParser.Xpcs)
            self.state = 523
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << XplorMRParser.Assign) | (1 << XplorMRParser.Classification) | (1 << XplorMRParser.Nrestraints) | (1 << XplorMRParser.Print) | (1 << XplorMRParser.Reset) | (1 << XplorMRParser.Coefficients) | (1 << XplorMRParser.ForceConstant))) != 0) or ((((_la - 103)) & ~0x3f) == 0 and ((1 << (_la - 103)) & ((1 << (XplorMRParser.Tolerance - 103)) | (1 << (XplorMRParser.Save - 103)) | (1 << (XplorMRParser.Fmed - 103)) | (1 << (XplorMRParser.ErrOn - 103)) | (1 << (XplorMRParser.ErrOff - 103)) | (1 << (XplorMRParser.Fon - 103)) | (1 << (XplorMRParser.Foff - 103)) | (1 << (XplorMRParser.Son - 103)) | (1 << (XplorMRParser.Soff - 103)) | (1 << (XplorMRParser.Frun - 103)))) != 0) or _la==XplorMRParser.For:
                self.state = 520
                self.pcs_statement()
                self.state = 525
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 526
            self.match(XplorMRParser.End)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Prdc_restraintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Xrdcoupling(self):
            return self.getToken(XplorMRParser.Xrdcoupling, 0)

        def End(self):
            return self.getToken(XplorMRParser.End, 0)

        def prdc_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Prdc_statementContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Prdc_statementContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_prdc_restraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrdc_restraint" ):
                listener.enterPrdc_restraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrdc_restraint" ):
                listener.exitPrdc_restraint(self)




    def prdc_restraint(self):

        localctx = XplorMRParser.Prdc_restraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_prdc_restraint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 528
            self.match(XplorMRParser.Xrdcoupling)
            self.state = 532
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << XplorMRParser.Assign) | (1 << XplorMRParser.Classification) | (1 << XplorMRParser.Nrestraints) | (1 << XplorMRParser.Print) | (1 << XplorMRParser.Reset) | (1 << XplorMRParser.Coefficients) | (1 << XplorMRParser.ForceConstant))) != 0) or ((((_la - 103)) & ~0x3f) == 0 and ((1 << (_la - 103)) & ((1 << (XplorMRParser.Tolerance - 103)) | (1 << (XplorMRParser.Save - 103)) | (1 << (XplorMRParser.Fmed - 103)) | (1 << (XplorMRParser.ErrOn - 103)) | (1 << (XplorMRParser.ErrOff - 103)) | (1 << (XplorMRParser.Fon - 103)) | (1 << (XplorMRParser.Foff - 103)) | (1 << (XplorMRParser.Son - 103)) | (1 << (XplorMRParser.Soff - 103)) | (1 << (XplorMRParser.Frun - 103)))) != 0):
                self.state = 529
                self.prdc_statement()
                self.state = 534
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 535
            self.match(XplorMRParser.End)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Porientation_restraintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Xangle(self):
            return self.getToken(XplorMRParser.Xangle, 0)

        def End(self):
            return self.getToken(XplorMRParser.End, 0)

        def porientation_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Porientation_statementContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Porientation_statementContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_porientation_restraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPorientation_restraint" ):
                listener.enterPorientation_restraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPorientation_restraint" ):
                listener.exitPorientation_restraint(self)




    def porientation_restraint(self):

        localctx = XplorMRParser.Porientation_restraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_porientation_restraint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 537
            self.match(XplorMRParser.Xangle)
            self.state = 541
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << XplorMRParser.Assign) | (1 << XplorMRParser.Classification) | (1 << XplorMRParser.Nrestraints) | (1 << XplorMRParser.Print) | (1 << XplorMRParser.Reset) | (1 << XplorMRParser.ForceConstant))) != 0):
                self.state = 538
                self.porientation_statement()
                self.state = 543
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 544
            self.match(XplorMRParser.End)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pccr_restraintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Xccr(self):
            return self.getToken(XplorMRParser.Xccr, 0)

        def End(self):
            return self.getToken(XplorMRParser.End, 0)

        def pccr_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Pccr_statementContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Pccr_statementContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_pccr_restraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPccr_restraint" ):
                listener.enterPccr_restraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPccr_restraint" ):
                listener.exitPccr_restraint(self)




    def pccr_restraint(self):

        localctx = XplorMRParser.Pccr_restraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_pccr_restraint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 546
            self.match(XplorMRParser.Xccr)
            self.state = 550
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << XplorMRParser.Assign) | (1 << XplorMRParser.Classification) | (1 << XplorMRParser.Nrestraints) | (1 << XplorMRParser.Print) | (1 << XplorMRParser.Reset) | (1 << XplorMRParser.Coefficients) | (1 << XplorMRParser.ForceConstant))) != 0) or _la==XplorMRParser.Frun or _la==XplorMRParser.Weip:
                self.state = 547
                self.pccr_statement()
                self.state = 552
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 553
            self.match(XplorMRParser.End)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Hbond_restraintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Hbda(self):
            return self.getToken(XplorMRParser.Hbda, 0)

        def End(self):
            return self.getToken(XplorMRParser.End, 0)

        def hbond_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Hbond_statementContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Hbond_statementContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_hbond_restraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHbond_restraint" ):
                listener.enterHbond_restraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHbond_restraint" ):
                listener.exitHbond_restraint(self)




    def hbond_restraint(self):

        localctx = XplorMRParser.Hbond_restraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_hbond_restraint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 555
            self.match(XplorMRParser.Hbda)
            self.state = 559
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << XplorMRParser.Assign) | (1 << XplorMRParser.Classification) | (1 << XplorMRParser.Nrestraints) | (1 << XplorMRParser.Print) | (1 << XplorMRParser.Reset) | (1 << XplorMRParser.ForceConstant))) != 0) or _la==XplorMRParser.For:
                self.state = 556
                self.hbond_statement()
                self.state = 561
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 562
            self.match(XplorMRParser.End)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Hbond_db_restraintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Hbdb(self):
            return self.getToken(XplorMRParser.Hbdb, 0)

        def End(self):
            return self.getToken(XplorMRParser.End, 0)

        def hbond_db_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Hbond_db_statementContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Hbond_db_statementContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_hbond_db_restraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHbond_db_restraint" ):
                listener.enterHbond_db_restraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHbond_db_restraint" ):
                listener.exitHbond_db_restraint(self)




    def hbond_db_restraint(self):

        localctx = XplorMRParser.Hbond_db_restraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_hbond_db_restraint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 564
            self.match(XplorMRParser.Hbdb)
            self.state = 568
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==XplorMRParser.Assign or ((((_la - 117)) & ~0x3f) == 0 and ((1 << (_la - 117)) & ((1 << (XplorMRParser.Kdir - 117)) | (1 << (XplorMRParser.Klin - 117)) | (1 << (XplorMRParser.Nseg - 117)) | (1 << (XplorMRParser.Nmin - 117)) | (1 << (XplorMRParser.Nmax - 117)) | (1 << (XplorMRParser.Segm - 117)) | (1 << (XplorMRParser.Ohcut - 117)) | (1 << (XplorMRParser.Coh1cut - 117)) | (1 << (XplorMRParser.Coh2cut - 117)) | (1 << (XplorMRParser.Ohncut - 117)) | (1 << (XplorMRParser.Updfrq - 117)) | (1 << (XplorMRParser.Prnfrq - 117)) | (1 << (XplorMRParser.Freemode - 117)))) != 0) or _la==XplorMRParser.For:
                self.state = 565
                self.hbond_db_statement()
                self.state = 570
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 571
            self.match(XplorMRParser.End)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Noe_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def noe_assign(self):
            return self.getTypedRuleContext(XplorMRParser.Noe_assignContext,0)


        def noe_assign_loop(self):
            return self.getTypedRuleContext(XplorMRParser.Noe_assign_loopContext,0)


        def Asymptote(self):
            return self.getToken(XplorMRParser.Asymptote, 0)

        def Simple_name(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Simple_name)
            else:
                return self.getToken(XplorMRParser.Simple_name, i)

        def number_s(self):
            return self.getTypedRuleContext(XplorMRParser.Number_sContext,0)


        def Average(self):
            return self.getToken(XplorMRParser.Average, 0)

        def Simple_name_AM(self):
            return self.getToken(XplorMRParser.Simple_name_AM, 0)

        def Averaging_methods(self):
            return self.getToken(XplorMRParser.Averaging_methods, 0)

        def Bhig(self):
            return self.getToken(XplorMRParser.Bhig, 0)

        def Ceiling(self):
            return self.getToken(XplorMRParser.Ceiling, 0)

        def Equ_op(self):
            return self.getToken(XplorMRParser.Equ_op, 0)

        def Classification(self):
            return self.getToken(XplorMRParser.Classification, 0)

        def CountViol(self):
            return self.getToken(XplorMRParser.CountViol, 0)

        def Distribute(self):
            return self.getToken(XplorMRParser.Distribute, 0)

        def Monomers(self):
            return self.getToken(XplorMRParser.Monomers, 0)

        def Integer(self):
            return self.getToken(XplorMRParser.Integer, 0)

        def Ncount(self):
            return self.getToken(XplorMRParser.Ncount, 0)

        def Nrestraints(self):
            return self.getToken(XplorMRParser.Nrestraints, 0)

        def Potential(self):
            return self.getToken(XplorMRParser.Potential, 0)

        def Simple_name_PT(self):
            return self.getToken(XplorMRParser.Simple_name_PT, 0)

        def Potential_types(self):
            return self.getToken(XplorMRParser.Potential_types, 0)

        def Predict(self):
            return self.getToken(XplorMRParser.Predict, 0)

        def predict_statement(self):
            return self.getTypedRuleContext(XplorMRParser.Predict_statementContext,0)


        def End(self):
            return self.getToken(XplorMRParser.End, 0)

        def Print(self):
            return self.getToken(XplorMRParser.Print, 0)

        def Threshold(self):
            return self.getToken(XplorMRParser.Threshold, 0)

        def Reset(self):
            return self.getToken(XplorMRParser.Reset, 0)

        def Rswitch(self):
            return self.getToken(XplorMRParser.Rswitch, 0)

        def Scale(self):
            return self.getToken(XplorMRParser.Scale, 0)

        def SoExponent(self):
            return self.getToken(XplorMRParser.SoExponent, 0)

        def SqConstant(self):
            return self.getToken(XplorMRParser.SqConstant, 0)

        def SqExponent(self):
            return self.getToken(XplorMRParser.SqExponent, 0)

        def SqOffset(self):
            return self.getToken(XplorMRParser.SqOffset, 0)

        def Temperature(self):
            return self.getToken(XplorMRParser.Temperature, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_noe_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNoe_statement" ):
                listener.enterNoe_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNoe_statement" ):
                listener.exitNoe_statement(self)




    def noe_statement(self):

        localctx = XplorMRParser.Noe_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_noe_statement)
        self._la = 0 # Token type
        try:
            self.state = 648
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [XplorMRParser.Assign]:
                self.enterOuterAlt(localctx, 1)
                self.state = 573
                self.noe_assign()
                pass
            elif token in [XplorMRParser.For]:
                self.enterOuterAlt(localctx, 2)
                self.state = 574
                self.noe_assign_loop()
                pass
            elif token in [XplorMRParser.Asymptote]:
                self.enterOuterAlt(localctx, 3)
                self.state = 575
                self.match(XplorMRParser.Asymptote)
                self.state = 576
                self.match(XplorMRParser.Simple_name)
                self.state = 577
                self.number_s()
                pass
            elif token in [XplorMRParser.Average]:
                self.enterOuterAlt(localctx, 4)
                self.state = 578
                self.match(XplorMRParser.Average)
                self.state = 579
                self.match(XplorMRParser.Simple_name_AM)
                self.state = 580
                self.match(XplorMRParser.Averaging_methods)
                pass
            elif token in [XplorMRParser.Bhig]:
                self.enterOuterAlt(localctx, 5)
                self.state = 581
                self.match(XplorMRParser.Bhig)
                self.state = 582
                self.match(XplorMRParser.Simple_name)
                self.state = 583
                self.number_s()
                pass
            elif token in [XplorMRParser.Ceiling]:
                self.enterOuterAlt(localctx, 6)
                self.state = 584
                self.match(XplorMRParser.Ceiling)
                self.state = 586
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 585
                    self.match(XplorMRParser.Equ_op)


                self.state = 588
                self.number_s()
                pass
            elif token in [XplorMRParser.Classification]:
                self.enterOuterAlt(localctx, 7)
                self.state = 589
                self.match(XplorMRParser.Classification)
                self.state = 591
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 590
                    self.match(XplorMRParser.Equ_op)


                self.state = 593
                self.match(XplorMRParser.Simple_name)
                pass
            elif token in [XplorMRParser.CountViol]:
                self.enterOuterAlt(localctx, 8)
                self.state = 594
                self.match(XplorMRParser.CountViol)
                self.state = 595
                self.match(XplorMRParser.Simple_name)
                pass
            elif token in [XplorMRParser.Distribute]:
                self.enterOuterAlt(localctx, 9)
                self.state = 596
                self.match(XplorMRParser.Distribute)
                self.state = 597
                self.match(XplorMRParser.Simple_name)
                self.state = 598
                self.match(XplorMRParser.Simple_name)
                self.state = 599
                self.number_s()
                pass
            elif token in [XplorMRParser.Monomers]:
                self.enterOuterAlt(localctx, 10)
                self.state = 600
                self.match(XplorMRParser.Monomers)
                self.state = 601
                self.match(XplorMRParser.Simple_name)
                self.state = 602
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.Ncount]:
                self.enterOuterAlt(localctx, 11)
                self.state = 603
                self.match(XplorMRParser.Ncount)
                self.state = 604
                self.match(XplorMRParser.Simple_name)
                self.state = 605
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.Nrestraints]:
                self.enterOuterAlt(localctx, 12)
                self.state = 606
                self.match(XplorMRParser.Nrestraints)
                self.state = 608
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 607
                    self.match(XplorMRParser.Equ_op)


                self.state = 610
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.Potential]:
                self.enterOuterAlt(localctx, 13)
                self.state = 611
                self.match(XplorMRParser.Potential)
                self.state = 612
                self.match(XplorMRParser.Simple_name_PT)
                self.state = 613
                self.match(XplorMRParser.Potential_types)
                pass
            elif token in [XplorMRParser.Predict]:
                self.enterOuterAlt(localctx, 14)
                self.state = 614
                self.match(XplorMRParser.Predict)
                self.state = 615
                self.predict_statement()
                self.state = 616
                self.match(XplorMRParser.End)
                pass
            elif token in [XplorMRParser.Print]:
                self.enterOuterAlt(localctx, 15)
                self.state = 618
                self.match(XplorMRParser.Print)
                self.state = 619
                self.match(XplorMRParser.Threshold)
                self.state = 621
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 620
                    self.match(XplorMRParser.Equ_op)


                self.state = 623
                self.number_s()
                pass
            elif token in [XplorMRParser.Reset]:
                self.enterOuterAlt(localctx, 16)
                self.state = 624
                self.match(XplorMRParser.Reset)
                pass
            elif token in [XplorMRParser.Rswitch]:
                self.enterOuterAlt(localctx, 17)
                self.state = 625
                self.match(XplorMRParser.Rswitch)
                self.state = 626
                self.match(XplorMRParser.Simple_name)
                self.state = 627
                self.number_s()
                pass
            elif token in [XplorMRParser.Scale]:
                self.enterOuterAlt(localctx, 18)
                self.state = 628
                self.match(XplorMRParser.Scale)
                self.state = 629
                self.match(XplorMRParser.Simple_name)
                self.state = 630
                self.number_s()
                pass
            elif token in [XplorMRParser.SoExponent]:
                self.enterOuterAlt(localctx, 19)
                self.state = 631
                self.match(XplorMRParser.SoExponent)
                self.state = 632
                self.match(XplorMRParser.Simple_name)
                self.state = 633
                self.number_s()
                pass
            elif token in [XplorMRParser.SqConstant]:
                self.enterOuterAlt(localctx, 20)
                self.state = 634
                self.match(XplorMRParser.SqConstant)
                self.state = 635
                self.match(XplorMRParser.Simple_name)
                self.state = 636
                self.number_s()
                pass
            elif token in [XplorMRParser.SqExponent]:
                self.enterOuterAlt(localctx, 21)
                self.state = 637
                self.match(XplorMRParser.SqExponent)
                self.state = 638
                self.match(XplorMRParser.Simple_name)
                self.state = 639
                self.number_s()
                pass
            elif token in [XplorMRParser.SqOffset]:
                self.enterOuterAlt(localctx, 22)
                self.state = 640
                self.match(XplorMRParser.SqOffset)
                self.state = 641
                self.match(XplorMRParser.Simple_name)
                self.state = 642
                self.number_s()
                pass
            elif token in [XplorMRParser.Temperature]:
                self.enterOuterAlt(localctx, 23)
                self.state = 643
                self.match(XplorMRParser.Temperature)
                self.state = 645
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 644
                    self.match(XplorMRParser.Equ_op)


                self.state = 647
                self.number_s()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Noe_assignContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Assign(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Assign)
            else:
                return self.getToken(XplorMRParser.Assign, i)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.SelectionContext,i)


        def number(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.NumberContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.NumberContext,i)


        def noe_annotation(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Noe_annotationContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Noe_annotationContext,i)


        def Or_op(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Or_op)
            else:
                return self.getToken(XplorMRParser.Or_op, i)

        def getRuleIndex(self):
            return XplorMRParser.RULE_noe_assign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNoe_assign" ):
                listener.enterNoe_assign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNoe_assign" ):
                listener.exitNoe_assign(self)




    def noe_assign(self):

        localctx = XplorMRParser.Noe_assignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_noe_assign)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 650
            self.match(XplorMRParser.Assign)
            self.state = 651
            self.selection()
            self.state = 652
            self.selection()
            self.state = 653
            self.number()
            self.state = 655
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,40,self._ctx)
            if la_ == 1:
                self.state = 654
                self.number()


            self.state = 658
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 192)) & ~0x3f) == 0 and ((1 << (_la - 192)) & ((1 << (XplorMRParser.Integer - 192)) | (1 << (XplorMRParser.Real - 192)) | (1 << (XplorMRParser.Symbol_name - 192)))) != 0):
                self.state = 657
                self.number()


            self.state = 663
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << XplorMRParser.Peak) | (1 << XplorMRParser.Spectrum) | (1 << XplorMRParser.Volume) | (1 << XplorMRParser.Ppm1) | (1 << XplorMRParser.Ppm2) | (1 << XplorMRParser.Cv) | (1 << XplorMRParser.Weight))) != 0):
                self.state = 660
                self.noe_annotation()
                self.state = 665
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 683
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==XplorMRParser.Or_op:
                self.state = 666
                self.match(XplorMRParser.Or_op)
                self.state = 668
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Assign:
                    self.state = 667
                    self.match(XplorMRParser.Assign)


                self.state = 670
                self.selection()
                self.state = 671
                self.selection()
                self.state = 673
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,44,self._ctx)
                if la_ == 1:
                    self.state = 672
                    self.number()


                self.state = 676
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,45,self._ctx)
                if la_ == 1:
                    self.state = 675
                    self.number()


                self.state = 679
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 192)) & ~0x3f) == 0 and ((1 << (_la - 192)) & ((1 << (XplorMRParser.Integer - 192)) | (1 << (XplorMRParser.Real - 192)) | (1 << (XplorMRParser.Symbol_name - 192)))) != 0):
                    self.state = 678
                    self.number()


                self.state = 685
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Predict_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Cutoff(self):
            return self.getToken(XplorMRParser.Cutoff, 0)

        def number_s(self):
            return self.getTypedRuleContext(XplorMRParser.Number_sContext,0)


        def Equ_op(self):
            return self.getToken(XplorMRParser.Equ_op, 0)

        def Cuton(self):
            return self.getToken(XplorMRParser.Cuton, 0)

        def From(self):
            return self.getToken(XplorMRParser.From, 0)

        def selection(self):
            return self.getTypedRuleContext(XplorMRParser.SelectionContext,0)


        def To(self):
            return self.getToken(XplorMRParser.To, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_predict_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPredict_statement" ):
                listener.enterPredict_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPredict_statement" ):
                listener.exitPredict_statement(self)




    def predict_statement(self):

        localctx = XplorMRParser.Predict_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_predict_statement)
        self._la = 0 # Token type
        try:
            self.state = 700
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [XplorMRParser.Cutoff]:
                self.enterOuterAlt(localctx, 1)
                self.state = 686
                self.match(XplorMRParser.Cutoff)
                self.state = 688
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 687
                    self.match(XplorMRParser.Equ_op)


                self.state = 690
                self.number_s()
                pass
            elif token in [XplorMRParser.Cuton]:
                self.enterOuterAlt(localctx, 2)
                self.state = 691
                self.match(XplorMRParser.Cuton)
                self.state = 693
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 692
                    self.match(XplorMRParser.Equ_op)


                self.state = 695
                self.number_s()
                pass
            elif token in [XplorMRParser.From]:
                self.enterOuterAlt(localctx, 3)
                self.state = 696
                self.match(XplorMRParser.From)
                self.state = 697
                self.selection()
                pass
            elif token in [XplorMRParser.To]:
                self.enterOuterAlt(localctx, 4)
                self.state = 698
                self.match(XplorMRParser.To)
                self.state = 699
                self.selection()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Noe_annotationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Peak(self):
            return self.getToken(XplorMRParser.Peak, 0)

        def number_a(self):
            return self.getTypedRuleContext(XplorMRParser.Number_aContext,0)


        def Equ_op(self):
            return self.getToken(XplorMRParser.Equ_op, 0)

        def Spectrum(self):
            return self.getToken(XplorMRParser.Spectrum, 0)

        def Weight(self):
            return self.getToken(XplorMRParser.Weight, 0)

        def Volume(self):
            return self.getToken(XplorMRParser.Volume, 0)

        def Ppm1(self):
            return self.getToken(XplorMRParser.Ppm1, 0)

        def Ppm2(self):
            return self.getToken(XplorMRParser.Ppm2, 0)

        def Cv(self):
            return self.getToken(XplorMRParser.Cv, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_noe_annotation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNoe_annotation" ):
                listener.enterNoe_annotation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNoe_annotation" ):
                listener.exitNoe_annotation(self)




    def noe_annotation(self):

        localctx = XplorMRParser.Noe_annotationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_noe_annotation)
        self._la = 0 # Token type
        try:
            self.state = 737
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [XplorMRParser.Peak]:
                self.enterOuterAlt(localctx, 1)
                self.state = 702
                self.match(XplorMRParser.Peak)
                self.state = 704
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 703
                    self.match(XplorMRParser.Equ_op)


                self.state = 706
                self.number_a()
                pass
            elif token in [XplorMRParser.Spectrum]:
                self.enterOuterAlt(localctx, 2)
                self.state = 707
                self.match(XplorMRParser.Spectrum)
                self.state = 709
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 708
                    self.match(XplorMRParser.Equ_op)


                self.state = 711
                self.number_a()
                pass
            elif token in [XplorMRParser.Weight]:
                self.enterOuterAlt(localctx, 3)
                self.state = 712
                self.match(XplorMRParser.Weight)
                self.state = 714
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 713
                    self.match(XplorMRParser.Equ_op)


                self.state = 716
                self.number_a()
                pass
            elif token in [XplorMRParser.Volume]:
                self.enterOuterAlt(localctx, 4)
                self.state = 717
                self.match(XplorMRParser.Volume)
                self.state = 719
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 718
                    self.match(XplorMRParser.Equ_op)


                self.state = 721
                self.number_a()
                pass
            elif token in [XplorMRParser.Ppm1]:
                self.enterOuterAlt(localctx, 5)
                self.state = 722
                self.match(XplorMRParser.Ppm1)
                self.state = 724
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 723
                    self.match(XplorMRParser.Equ_op)


                self.state = 726
                self.number_a()
                pass
            elif token in [XplorMRParser.Ppm2]:
                self.enterOuterAlt(localctx, 6)
                self.state = 727
                self.match(XplorMRParser.Ppm2)
                self.state = 729
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 728
                    self.match(XplorMRParser.Equ_op)


                self.state = 731
                self.number_a()
                pass
            elif token in [XplorMRParser.Cv]:
                self.enterOuterAlt(localctx, 7)
                self.state = 732
                self.match(XplorMRParser.Cv)
                self.state = 734
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 733
                    self.match(XplorMRParser.Equ_op)


                self.state = 736
                self.number_a()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Dihedral_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def vector_statement(self):
            return self.getTypedRuleContext(XplorMRParser.Vector_statementContext,0)


        def dihedral_assign(self):
            return self.getTypedRuleContext(XplorMRParser.Dihedral_assignContext,0)


        def dihedral_assign_loop(self):
            return self.getTypedRuleContext(XplorMRParser.Dihedral_assign_loopContext,0)


        def Nassign(self):
            return self.getToken(XplorMRParser.Nassign, 0)

        def Integer(self):
            return self.getToken(XplorMRParser.Integer, 0)

        def Equ_op(self):
            return self.getToken(XplorMRParser.Equ_op, 0)

        def Reset(self):
            return self.getToken(XplorMRParser.Reset, 0)

        def Scale(self):
            return self.getToken(XplorMRParser.Scale, 0)

        def number_s(self):
            return self.getTypedRuleContext(XplorMRParser.Number_sContext,0)


        def Print_any(self):
            return self.getToken(XplorMRParser.Print_any, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_dihedral_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDihedral_statement" ):
                listener.enterDihedral_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDihedral_statement" ):
                listener.exitDihedral_statement(self)




    def dihedral_statement(self):

        localctx = XplorMRParser.Dihedral_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_dihedral_statement)
        self._la = 0 # Token type
        try:
            self.state = 754
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [XplorMRParser.Vector]:
                self.enterOuterAlt(localctx, 1)
                self.state = 739
                self.vector_statement()
                pass
            elif token in [XplorMRParser.Assign]:
                self.enterOuterAlt(localctx, 2)
                self.state = 740
                self.dihedral_assign()
                pass
            elif token in [XplorMRParser.For]:
                self.enterOuterAlt(localctx, 3)
                self.state = 741
                self.dihedral_assign_loop()
                pass
            elif token in [XplorMRParser.Nassign]:
                self.enterOuterAlt(localctx, 4)
                self.state = 742
                self.match(XplorMRParser.Nassign)
                self.state = 744
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 743
                    self.match(XplorMRParser.Equ_op)


                self.state = 746
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.Reset]:
                self.enterOuterAlt(localctx, 5)
                self.state = 747
                self.match(XplorMRParser.Reset)
                pass
            elif token in [XplorMRParser.Scale]:
                self.enterOuterAlt(localctx, 6)
                self.state = 748
                self.match(XplorMRParser.Scale)
                self.state = 750
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 749
                    self.match(XplorMRParser.Equ_op)


                self.state = 752
                self.number_s()
                pass
            elif token in [XplorMRParser.Print_any]:
                self.enterOuterAlt(localctx, 7)
                self.state = 753
                self.match(XplorMRParser.Print_any)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Dihedral_assignContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Assign(self):
            return self.getToken(XplorMRParser.Assign, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.SelectionContext,i)


        def number(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.NumberContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.NumberContext,i)


        def Integer(self):
            return self.getToken(XplorMRParser.Integer, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_dihedral_assign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDihedral_assign" ):
                listener.enterDihedral_assign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDihedral_assign" ):
                listener.exitDihedral_assign(self)




    def dihedral_assign(self):

        localctx = XplorMRParser.Dihedral_assignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_dihedral_assign)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 756
            self.match(XplorMRParser.Assign)
            self.state = 757
            self.selection()
            self.state = 758
            self.selection()
            self.state = 759
            self.selection()
            self.state = 760
            self.selection()
            self.state = 761
            self.number()
            self.state = 762
            self.number()
            self.state = 763
            self.number()
            self.state = 764
            self.match(XplorMRParser.Integer)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Sani_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def sani_assign(self):
            return self.getTypedRuleContext(XplorMRParser.Sani_assignContext,0)


        def sani_assign_loop(self):
            return self.getTypedRuleContext(XplorMRParser.Sani_assign_loopContext,0)


        def Classification(self):
            return self.getToken(XplorMRParser.Classification, 0)

        def Simple_name(self):
            return self.getToken(XplorMRParser.Simple_name, 0)

        def Equ_op(self):
            return self.getToken(XplorMRParser.Equ_op, 0)

        def Coefficients(self):
            return self.getToken(XplorMRParser.Coefficients, 0)

        def number_s(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Number_sContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Number_sContext,i)


        def ForceConstant(self):
            return self.getToken(XplorMRParser.ForceConstant, 0)

        def Nrestraints(self):
            return self.getToken(XplorMRParser.Nrestraints, 0)

        def Integer(self):
            return self.getToken(XplorMRParser.Integer, 0)

        def Potential(self):
            return self.getToken(XplorMRParser.Potential, 0)

        def Potential_types(self):
            return self.getToken(XplorMRParser.Potential_types, 0)

        def Print(self):
            return self.getToken(XplorMRParser.Print, 0)

        def Threshold(self):
            return self.getToken(XplorMRParser.Threshold, 0)

        def Reset(self):
            return self.getToken(XplorMRParser.Reset, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_sani_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSani_statement" ):
                listener.enterSani_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSani_statement" ):
                listener.exitSani_statement(self)




    def sani_statement(self):

        localctx = XplorMRParser.Sani_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_sani_statement)
        self._la = 0 # Token type
        try:
            self.state = 794
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [XplorMRParser.Assign]:
                self.enterOuterAlt(localctx, 1)
                self.state = 766
                self.sani_assign()
                pass
            elif token in [XplorMRParser.For]:
                self.enterOuterAlt(localctx, 2)
                self.state = 767
                self.sani_assign_loop()
                pass
            elif token in [XplorMRParser.Classification]:
                self.enterOuterAlt(localctx, 3)
                self.state = 768
                self.match(XplorMRParser.Classification)
                self.state = 770
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 769
                    self.match(XplorMRParser.Equ_op)


                self.state = 772
                self.match(XplorMRParser.Simple_name)
                pass
            elif token in [XplorMRParser.Coefficients]:
                self.enterOuterAlt(localctx, 4)
                self.state = 773
                self.match(XplorMRParser.Coefficients)
                self.state = 774
                self.number_s()
                self.state = 775
                self.number_s()
                self.state = 776
                self.number_s()
                pass
            elif token in [XplorMRParser.ForceConstant]:
                self.enterOuterAlt(localctx, 5)
                self.state = 778
                self.match(XplorMRParser.ForceConstant)
                self.state = 780
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 779
                    self.match(XplorMRParser.Equ_op)


                self.state = 782
                self.number_s()
                pass
            elif token in [XplorMRParser.Nrestraints]:
                self.enterOuterAlt(localctx, 6)
                self.state = 783
                self.match(XplorMRParser.Nrestraints)
                self.state = 785
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 784
                    self.match(XplorMRParser.Equ_op)


                self.state = 787
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.Potential]:
                self.enterOuterAlt(localctx, 7)
                self.state = 788
                self.match(XplorMRParser.Potential)
                self.state = 789
                self.match(XplorMRParser.Potential_types)
                pass
            elif token in [XplorMRParser.Print]:
                self.enterOuterAlt(localctx, 8)
                self.state = 790
                self.match(XplorMRParser.Print)
                self.state = 791
                self.match(XplorMRParser.Threshold)
                self.state = 792
                self.number_s()
                pass
            elif token in [XplorMRParser.Reset]:
                self.enterOuterAlt(localctx, 9)
                self.state = 793
                self.match(XplorMRParser.Reset)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Sani_assignContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Assign(self):
            return self.getToken(XplorMRParser.Assign, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.SelectionContext,i)


        def number(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.NumberContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.NumberContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_sani_assign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSani_assign" ):
                listener.enterSani_assign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSani_assign" ):
                listener.exitSani_assign(self)




    def sani_assign(self):

        localctx = XplorMRParser.Sani_assignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_sani_assign)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 796
            self.match(XplorMRParser.Assign)
            self.state = 797
            self.selection()
            self.state = 798
            self.selection()
            self.state = 799
            self.selection()
            self.state = 800
            self.selection()
            self.state = 801
            self.selection()
            self.state = 802
            self.selection()
            self.state = 803
            self.number()
            self.state = 805
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,66,self._ctx)
            if la_ == 1:
                self.state = 804
                self.number()


            self.state = 808
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 192)) & ~0x3f) == 0 and ((1 << (_la - 192)) & ((1 << (XplorMRParser.Integer - 192)) | (1 << (XplorMRParser.Real - 192)) | (1 << (XplorMRParser.Symbol_name - 192)))) != 0):
                self.state = 807
                self.number()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Xdip_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def xdip_assign(self):
            return self.getTypedRuleContext(XplorMRParser.Xdip_assignContext,0)


        def Classification(self):
            return self.getToken(XplorMRParser.Classification, 0)

        def Simple_name(self):
            return self.getToken(XplorMRParser.Simple_name, 0)

        def Equ_op(self):
            return self.getToken(XplorMRParser.Equ_op, 0)

        def Type(self):
            return self.getToken(XplorMRParser.Type, 0)

        def Rdc_dist_fix_types(self):
            return self.getToken(XplorMRParser.Rdc_dist_fix_types, 0)

        def Scale(self):
            return self.getToken(XplorMRParser.Scale, 0)

        def number_s(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Number_sContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Number_sContext,i)


        def Sign(self):
            return self.getToken(XplorMRParser.Sign, 0)

        def Logical(self):
            return self.getToken(XplorMRParser.Logical, 0)

        def Average(self):
            return self.getToken(XplorMRParser.Average, 0)

        def Averaging_methods(self):
            return self.getToken(XplorMRParser.Averaging_methods, 0)

        def Coefficients(self):
            return self.getToken(XplorMRParser.Coefficients, 0)

        def ForceConstant(self):
            return self.getToken(XplorMRParser.ForceConstant, 0)

        def Nrestraints(self):
            return self.getToken(XplorMRParser.Nrestraints, 0)

        def Integer(self):
            return self.getToken(XplorMRParser.Integer, 0)

        def Potential(self):
            return self.getToken(XplorMRParser.Potential, 0)

        def Potential_types(self):
            return self.getToken(XplorMRParser.Potential_types, 0)

        def Print(self):
            return self.getToken(XplorMRParser.Print, 0)

        def Threshold(self):
            return self.getToken(XplorMRParser.Threshold, 0)

        def Reset(self):
            return self.getToken(XplorMRParser.Reset, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_xdip_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterXdip_statement" ):
                listener.enterXdip_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitXdip_statement" ):
                listener.exitXdip_statement(self)




    def xdip_statement(self):

        localctx = XplorMRParser.Xdip_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_xdip_statement)
        self._la = 0 # Token type
        try:
            self.state = 848
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [XplorMRParser.Assign]:
                self.enterOuterAlt(localctx, 1)
                self.state = 810
                self.xdip_assign()
                pass
            elif token in [XplorMRParser.Classification]:
                self.enterOuterAlt(localctx, 2)
                self.state = 811
                self.match(XplorMRParser.Classification)
                self.state = 813
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 812
                    self.match(XplorMRParser.Equ_op)


                self.state = 815
                self.match(XplorMRParser.Simple_name)
                pass
            elif token in [XplorMRParser.Type]:
                self.enterOuterAlt(localctx, 3)
                self.state = 816
                self.match(XplorMRParser.Type)
                self.state = 817
                self.match(XplorMRParser.Rdc_dist_fix_types)
                pass
            elif token in [XplorMRParser.Scale]:
                self.enterOuterAlt(localctx, 4)
                self.state = 818
                self.match(XplorMRParser.Scale)
                self.state = 820
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 819
                    self.match(XplorMRParser.Equ_op)


                self.state = 822
                self.number_s()
                pass
            elif token in [XplorMRParser.Sign]:
                self.enterOuterAlt(localctx, 5)
                self.state = 823
                self.match(XplorMRParser.Sign)
                self.state = 824
                self.match(XplorMRParser.Logical)
                pass
            elif token in [XplorMRParser.Average]:
                self.enterOuterAlt(localctx, 6)
                self.state = 825
                self.match(XplorMRParser.Average)
                self.state = 826
                self.match(XplorMRParser.Averaging_methods)
                pass
            elif token in [XplorMRParser.Coefficients]:
                self.enterOuterAlt(localctx, 7)
                self.state = 827
                self.match(XplorMRParser.Coefficients)
                self.state = 828
                self.number_s()
                self.state = 829
                self.number_s()
                self.state = 830
                self.number_s()
                pass
            elif token in [XplorMRParser.ForceConstant]:
                self.enterOuterAlt(localctx, 8)
                self.state = 832
                self.match(XplorMRParser.ForceConstant)
                self.state = 834
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 833
                    self.match(XplorMRParser.Equ_op)


                self.state = 836
                self.number_s()
                pass
            elif token in [XplorMRParser.Nrestraints]:
                self.enterOuterAlt(localctx, 9)
                self.state = 837
                self.match(XplorMRParser.Nrestraints)
                self.state = 839
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 838
                    self.match(XplorMRParser.Equ_op)


                self.state = 841
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.Potential]:
                self.enterOuterAlt(localctx, 10)
                self.state = 842
                self.match(XplorMRParser.Potential)
                self.state = 843
                self.match(XplorMRParser.Potential_types)
                pass
            elif token in [XplorMRParser.Print]:
                self.enterOuterAlt(localctx, 11)
                self.state = 844
                self.match(XplorMRParser.Print)
                self.state = 845
                self.match(XplorMRParser.Threshold)
                self.state = 846
                self.number_s()
                pass
            elif token in [XplorMRParser.Reset]:
                self.enterOuterAlt(localctx, 12)
                self.state = 847
                self.match(XplorMRParser.Reset)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Xdip_assignContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Assign(self):
            return self.getToken(XplorMRParser.Assign, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.SelectionContext,i)


        def number(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.NumberContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.NumberContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_xdip_assign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterXdip_assign" ):
                listener.enterXdip_assign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitXdip_assign" ):
                listener.exitXdip_assign(self)




    def xdip_assign(self):

        localctx = XplorMRParser.Xdip_assignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 68, self.RULE_xdip_assign)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 850
            self.match(XplorMRParser.Assign)
            self.state = 851
            self.selection()
            self.state = 852
            self.selection()
            self.state = 853
            self.selection()
            self.state = 854
            self.selection()
            self.state = 855
            self.selection()
            self.state = 856
            self.selection()
            self.state = 857
            self.number()
            self.state = 858
            self.number()
            self.state = 865
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,73,self._ctx)
            if la_ == 1:
                self.state = 859
                self.number()

            elif la_ == 2:
                self.state = 860
                self.number()
                self.state = 861
                self.number()
                self.state = 862
                self.number()
                self.state = 863
                self.number()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Vean_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def vean_assign(self):
            return self.getTypedRuleContext(XplorMRParser.Vean_assignContext,0)


        def Cv(self):
            return self.getToken(XplorMRParser.Cv, 0)

        def Integer(self):
            return self.getToken(XplorMRParser.Integer, 0)

        def Equ_op(self):
            return self.getToken(XplorMRParser.Equ_op, 0)

        def Classification(self):
            return self.getToken(XplorMRParser.Classification, 0)

        def Simple_name(self):
            return self.getToken(XplorMRParser.Simple_name, 0)

        def ForceConstant(self):
            return self.getToken(XplorMRParser.ForceConstant, 0)

        def number_s(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Number_sContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Number_sContext,i)


        def Nrestraints(self):
            return self.getToken(XplorMRParser.Nrestraints, 0)

        def Partition(self):
            return self.getToken(XplorMRParser.Partition, 0)

        def Print(self):
            return self.getToken(XplorMRParser.Print, 0)

        def Threshold(self):
            return self.getToken(XplorMRParser.Threshold, 0)

        def Reset(self):
            return self.getToken(XplorMRParser.Reset, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_vean_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVean_statement" ):
                listener.enterVean_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVean_statement" ):
                listener.exitVean_statement(self)




    def vean_statement(self):

        localctx = XplorMRParser.Vean_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_vean_statement)
        self._la = 0 # Token type
        try:
            self.state = 899
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [XplorMRParser.Assign]:
                self.enterOuterAlt(localctx, 1)
                self.state = 867
                self.vean_assign()
                pass
            elif token in [XplorMRParser.Cv]:
                self.enterOuterAlt(localctx, 2)
                self.state = 868
                self.match(XplorMRParser.Cv)
                self.state = 870
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 869
                    self.match(XplorMRParser.Equ_op)


                self.state = 872
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.Classification]:
                self.enterOuterAlt(localctx, 3)
                self.state = 873
                self.match(XplorMRParser.Classification)
                self.state = 875
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 874
                    self.match(XplorMRParser.Equ_op)


                self.state = 877
                self.match(XplorMRParser.Simple_name)
                pass
            elif token in [XplorMRParser.ForceConstant]:
                self.enterOuterAlt(localctx, 4)
                self.state = 878
                self.match(XplorMRParser.ForceConstant)
                self.state = 880
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 879
                    self.match(XplorMRParser.Equ_op)


                self.state = 882
                self.number_s()
                self.state = 883
                self.number_s()
                pass
            elif token in [XplorMRParser.Nrestraints]:
                self.enterOuterAlt(localctx, 5)
                self.state = 885
                self.match(XplorMRParser.Nrestraints)
                self.state = 887
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 886
                    self.match(XplorMRParser.Equ_op)


                self.state = 889
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.Partition]:
                self.enterOuterAlt(localctx, 6)
                self.state = 890
                self.match(XplorMRParser.Partition)
                self.state = 892
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 891
                    self.match(XplorMRParser.Equ_op)


                self.state = 894
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.Print]:
                self.enterOuterAlt(localctx, 7)
                self.state = 895
                self.match(XplorMRParser.Print)
                self.state = 896
                self.match(XplorMRParser.Threshold)
                self.state = 897
                self.number_s()
                pass
            elif token in [XplorMRParser.Reset]:
                self.enterOuterAlt(localctx, 8)
                self.state = 898
                self.match(XplorMRParser.Reset)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Vean_assignContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Assign(self):
            return self.getToken(XplorMRParser.Assign, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.SelectionContext,i)


        def number(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.NumberContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.NumberContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_vean_assign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVean_assign" ):
                listener.enterVean_assign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVean_assign" ):
                listener.exitVean_assign(self)




    def vean_assign(self):

        localctx = XplorMRParser.Vean_assignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_vean_assign)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 901
            self.match(XplorMRParser.Assign)
            self.state = 902
            self.selection()
            self.state = 903
            self.selection()
            self.state = 904
            self.selection()
            self.state = 905
            self.selection()
            self.state = 906
            self.number()
            self.state = 907
            self.number()
            self.state = 911
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 192)) & ~0x3f) == 0 and ((1 << (_la - 192)) & ((1 << (XplorMRParser.Integer - 192)) | (1 << (XplorMRParser.Real - 192)) | (1 << (XplorMRParser.Symbol_name - 192)))) != 0):
                self.state = 908
                self.number()
                self.state = 909
                self.number()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Tenso_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def tenso_assign(self):
            return self.getTypedRuleContext(XplorMRParser.Tenso_assignContext,0)


        def Classification(self):
            return self.getToken(XplorMRParser.Classification, 0)

        def Simple_name(self):
            return self.getToken(XplorMRParser.Simple_name, 0)

        def Equ_op(self):
            return self.getToken(XplorMRParser.Equ_op, 0)

        def Coefficients(self):
            return self.getToken(XplorMRParser.Coefficients, 0)

        def number_s(self):
            return self.getTypedRuleContext(XplorMRParser.Number_sContext,0)


        def Nrestraints(self):
            return self.getToken(XplorMRParser.Nrestraints, 0)

        def Integer(self):
            return self.getToken(XplorMRParser.Integer, 0)

        def Potential(self):
            return self.getToken(XplorMRParser.Potential, 0)

        def Potential_types(self):
            return self.getToken(XplorMRParser.Potential_types, 0)

        def Print(self):
            return self.getToken(XplorMRParser.Print, 0)

        def Threshold(self):
            return self.getToken(XplorMRParser.Threshold, 0)

        def Reset(self):
            return self.getToken(XplorMRParser.Reset, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_tenso_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTenso_statement" ):
                listener.enterTenso_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTenso_statement" ):
                listener.exitTenso_statement(self)




    def tenso_statement(self):

        localctx = XplorMRParser.Tenso_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_tenso_statement)
        self._la = 0 # Token type
        try:
            self.state = 932
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [XplorMRParser.Assign]:
                self.enterOuterAlt(localctx, 1)
                self.state = 913
                self.tenso_assign()
                pass
            elif token in [XplorMRParser.Classification]:
                self.enterOuterAlt(localctx, 2)
                self.state = 914
                self.match(XplorMRParser.Classification)
                self.state = 916
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 915
                    self.match(XplorMRParser.Equ_op)


                self.state = 918
                self.match(XplorMRParser.Simple_name)
                pass
            elif token in [XplorMRParser.Coefficients]:
                self.enterOuterAlt(localctx, 3)
                self.state = 919
                self.match(XplorMRParser.Coefficients)
                self.state = 920
                self.number_s()
                pass
            elif token in [XplorMRParser.Nrestraints]:
                self.enterOuterAlt(localctx, 4)
                self.state = 921
                self.match(XplorMRParser.Nrestraints)
                self.state = 923
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 922
                    self.match(XplorMRParser.Equ_op)


                self.state = 925
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.Potential]:
                self.enterOuterAlt(localctx, 5)
                self.state = 926
                self.match(XplorMRParser.Potential)
                self.state = 927
                self.match(XplorMRParser.Potential_types)
                pass
            elif token in [XplorMRParser.Print]:
                self.enterOuterAlt(localctx, 6)
                self.state = 928
                self.match(XplorMRParser.Print)
                self.state = 929
                self.match(XplorMRParser.Threshold)
                self.state = 930
                self.number_s()
                pass
            elif token in [XplorMRParser.Reset]:
                self.enterOuterAlt(localctx, 7)
                self.state = 931
                self.match(XplorMRParser.Reset)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Tenso_assignContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Assign(self):
            return self.getToken(XplorMRParser.Assign, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.SelectionContext,i)


        def number(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.NumberContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.NumberContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_tenso_assign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTenso_assign" ):
                listener.enterTenso_assign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTenso_assign" ):
                listener.exitTenso_assign(self)




    def tenso_assign(self):

        localctx = XplorMRParser.Tenso_assignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 76, self.RULE_tenso_assign)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 934
            self.match(XplorMRParser.Assign)
            self.state = 935
            self.selection()
            self.state = 936
            self.selection()
            self.state = 937
            self.number()
            self.state = 939
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 192)) & ~0x3f) == 0 and ((1 << (_la - 192)) & ((1 << (XplorMRParser.Integer - 192)) | (1 << (XplorMRParser.Real - 192)) | (1 << (XplorMRParser.Symbol_name - 192)))) != 0):
                self.state = 938
                self.number()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Anis_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def anis_assign(self):
            return self.getTypedRuleContext(XplorMRParser.Anis_assignContext,0)


        def Classification(self):
            return self.getToken(XplorMRParser.Classification, 0)

        def Simple_name(self):
            return self.getToken(XplorMRParser.Simple_name, 0)

        def Equ_op(self):
            return self.getToken(XplorMRParser.Equ_op, 0)

        def Coefficients(self):
            return self.getToken(XplorMRParser.Coefficients, 0)

        def number_s(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Number_sContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Number_sContext,i)


        def ForceConstant(self):
            return self.getToken(XplorMRParser.ForceConstant, 0)

        def Nrestraints(self):
            return self.getToken(XplorMRParser.Nrestraints, 0)

        def Integer(self):
            return self.getToken(XplorMRParser.Integer, 0)

        def Potential(self):
            return self.getToken(XplorMRParser.Potential, 0)

        def Potential_types(self):
            return self.getToken(XplorMRParser.Potential_types, 0)

        def Print(self):
            return self.getToken(XplorMRParser.Print, 0)

        def Threshold(self):
            return self.getToken(XplorMRParser.Threshold, 0)

        def Reset(self):
            return self.getToken(XplorMRParser.Reset, 0)

        def Type(self):
            return self.getToken(XplorMRParser.Type, 0)

        def Rdc_or_Diff_anis_types(self):
            return self.getToken(XplorMRParser.Rdc_or_Diff_anis_types, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_anis_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAnis_statement" ):
                listener.enterAnis_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAnis_statement" ):
                listener.exitAnis_statement(self)




    def anis_statement(self):

        localctx = XplorMRParser.Anis_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 78, self.RULE_anis_statement)
        self._la = 0 # Token type
        try:
            self.state = 971
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [XplorMRParser.Assign]:
                self.enterOuterAlt(localctx, 1)
                self.state = 941
                self.anis_assign()
                pass
            elif token in [XplorMRParser.Classification]:
                self.enterOuterAlt(localctx, 2)
                self.state = 942
                self.match(XplorMRParser.Classification)
                self.state = 944
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 943
                    self.match(XplorMRParser.Equ_op)


                self.state = 946
                self.match(XplorMRParser.Simple_name)
                pass
            elif token in [XplorMRParser.Coefficients]:
                self.enterOuterAlt(localctx, 3)
                self.state = 947
                self.match(XplorMRParser.Coefficients)
                self.state = 948
                self.number_s()
                self.state = 949
                self.number_s()
                self.state = 950
                self.number_s()
                self.state = 951
                self.number_s()
                pass
            elif token in [XplorMRParser.ForceConstant]:
                self.enterOuterAlt(localctx, 4)
                self.state = 953
                self.match(XplorMRParser.ForceConstant)
                self.state = 955
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 954
                    self.match(XplorMRParser.Equ_op)


                self.state = 957
                self.number_s()
                pass
            elif token in [XplorMRParser.Nrestraints]:
                self.enterOuterAlt(localctx, 5)
                self.state = 958
                self.match(XplorMRParser.Nrestraints)
                self.state = 960
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 959
                    self.match(XplorMRParser.Equ_op)


                self.state = 962
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.Potential]:
                self.enterOuterAlt(localctx, 6)
                self.state = 963
                self.match(XplorMRParser.Potential)
                self.state = 964
                self.match(XplorMRParser.Potential_types)
                pass
            elif token in [XplorMRParser.Print]:
                self.enterOuterAlt(localctx, 7)
                self.state = 965
                self.match(XplorMRParser.Print)
                self.state = 966
                self.match(XplorMRParser.Threshold)
                self.state = 967
                self.number_s()
                pass
            elif token in [XplorMRParser.Reset]:
                self.enterOuterAlt(localctx, 8)
                self.state = 968
                self.match(XplorMRParser.Reset)
                pass
            elif token in [XplorMRParser.Type]:
                self.enterOuterAlt(localctx, 9)
                self.state = 969
                self.match(XplorMRParser.Type)
                self.state = 970
                self.match(XplorMRParser.Rdc_or_Diff_anis_types)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Anis_assignContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Assign(self):
            return self.getToken(XplorMRParser.Assign, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.SelectionContext,i)


        def number(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.NumberContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.NumberContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_anis_assign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAnis_assign" ):
                listener.enterAnis_assign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAnis_assign" ):
                listener.exitAnis_assign(self)




    def anis_assign(self):

        localctx = XplorMRParser.Anis_assignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 80, self.RULE_anis_assign)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 973
            self.match(XplorMRParser.Assign)
            self.state = 974
            self.selection()
            self.state = 975
            self.selection()
            self.state = 976
            self.selection()
            self.state = 977
            self.selection()
            self.state = 978
            self.number()
            self.state = 980
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 192)) & ~0x3f) == 0 and ((1 << (_la - 192)) & ((1 << (XplorMRParser.Integer - 192)) | (1 << (XplorMRParser.Real - 192)) | (1 << (XplorMRParser.Symbol_name - 192)))) != 0):
                self.state = 979
                self.number()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Planar_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def vector_statement(self):
            return self.getTypedRuleContext(XplorMRParser.Vector_statementContext,0)


        def Group(self):
            return self.getToken(XplorMRParser.Group, 0)

        def End(self):
            return self.getToken(XplorMRParser.End, 0)

        def group_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Group_statementContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Group_statementContext,i)


        def Initialize(self):
            return self.getToken(XplorMRParser.Initialize, 0)

        def Print_any(self):
            return self.getToken(XplorMRParser.Print_any, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_planar_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPlanar_statement" ):
                listener.enterPlanar_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPlanar_statement" ):
                listener.exitPlanar_statement(self)




    def planar_statement(self):

        localctx = XplorMRParser.Planar_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 82, self.RULE_planar_statement)
        self._la = 0 # Token type
        try:
            self.state = 993
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [XplorMRParser.Vector]:
                self.enterOuterAlt(localctx, 1)
                self.state = 982
                self.vector_statement()
                pass
            elif token in [XplorMRParser.Group]:
                self.enterOuterAlt(localctx, 2)
                self.state = 983
                self.match(XplorMRParser.Group)
                self.state = 987
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==XplorMRParser.Selection or _la==XplorMRParser.Weight:
                    self.state = 984
                    self.group_statement()
                    self.state = 989
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 990
                self.match(XplorMRParser.End)
                pass
            elif token in [XplorMRParser.Initialize]:
                self.enterOuterAlt(localctx, 3)
                self.state = 991
                self.match(XplorMRParser.Initialize)
                pass
            elif token in [XplorMRParser.Print_any]:
                self.enterOuterAlt(localctx, 4)
                self.state = 992
                self.match(XplorMRParser.Print_any)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Group_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Selection(self):
            return self.getToken(XplorMRParser.Selection, 0)

        def selection(self):
            return self.getTypedRuleContext(XplorMRParser.SelectionContext,0)


        def Equ_op(self):
            return self.getToken(XplorMRParser.Equ_op, 0)

        def Weight(self):
            return self.getToken(XplorMRParser.Weight, 0)

        def number_s(self):
            return self.getTypedRuleContext(XplorMRParser.Number_sContext,0)


        def getRuleIndex(self):
            return XplorMRParser.RULE_group_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGroup_statement" ):
                listener.enterGroup_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGroup_statement" ):
                listener.exitGroup_statement(self)




    def group_statement(self):

        localctx = XplorMRParser.Group_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 84, self.RULE_group_statement)
        self._la = 0 # Token type
        try:
            self.state = 1005
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [XplorMRParser.Selection]:
                self.enterOuterAlt(localctx, 1)
                self.state = 995
                self.match(XplorMRParser.Selection)
                self.state = 997
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 996
                    self.match(XplorMRParser.Equ_op)


                self.state = 999
                self.selection()
                pass
            elif token in [XplorMRParser.Weight]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1000
                self.match(XplorMRParser.Weight)
                self.state = 1002
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 1001
                    self.match(XplorMRParser.Equ_op)


                self.state = 1004
                self.number_s()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Harmonic_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def vector_statement(self):
            return self.getTypedRuleContext(XplorMRParser.Vector_statementContext,0)


        def Exponent(self):
            return self.getToken(XplorMRParser.Exponent, 0)

        def Integer(self):
            return self.getToken(XplorMRParser.Integer, 0)

        def Equ_op(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Equ_op)
            else:
                return self.getToken(XplorMRParser.Equ_op, i)

        def Normal(self):
            return self.getToken(XplorMRParser.Normal, 0)

        def L_paren(self):
            return self.getToken(XplorMRParser.L_paren, 0)

        def R_paren(self):
            return self.getToken(XplorMRParser.R_paren, 0)

        def number_s(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Number_sContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Number_sContext,i)


        def Tail(self):
            return self.getToken(XplorMRParser.Tail, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.SelectionContext,i)


        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Comma)
            else:
                return self.getToken(XplorMRParser.Comma, i)

        def Head(self):
            return self.getToken(XplorMRParser.Head, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_harmonic_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHarmonic_statement" ):
                listener.enterHarmonic_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHarmonic_statement" ):
                listener.exitHarmonic_statement(self)




    def harmonic_statement(self):

        localctx = XplorMRParser.Harmonic_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 86, self.RULE_harmonic_statement)
        self._la = 0 # Token type
        try:
            self.state = 1047
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [XplorMRParser.Vector]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1007
                self.vector_statement()
                pass
            elif token in [XplorMRParser.Exponent]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1008
                self.match(XplorMRParser.Exponent)
                self.state = 1010
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 1009
                    self.match(XplorMRParser.Equ_op)


                self.state = 1012
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.Normal]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1013
                self.match(XplorMRParser.Normal)
                self.state = 1015
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 1014
                    self.match(XplorMRParser.Equ_op)


                self.state = 1017
                self.match(XplorMRParser.L_paren)
                self.state = 1043
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [XplorMRParser.Integer, XplorMRParser.Real, XplorMRParser.Symbol_name]:
                    self.state = 1018
                    self.number_s()
                    self.state = 1020
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==XplorMRParser.Comma:
                        self.state = 1019
                        self.match(XplorMRParser.Comma)


                    self.state = 1022
                    self.number_s()
                    self.state = 1024
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==XplorMRParser.Comma:
                        self.state = 1023
                        self.match(XplorMRParser.Comma)


                    self.state = 1026
                    self.number_s()
                    pass
                elif token in [XplorMRParser.Tail]:
                    self.state = 1028
                    self.match(XplorMRParser.Tail)
                    self.state = 1030
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==XplorMRParser.Equ_op:
                        self.state = 1029
                        self.match(XplorMRParser.Equ_op)


                    self.state = 1032
                    self.selection()
                    self.state = 1034
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==XplorMRParser.Comma:
                        self.state = 1033
                        self.match(XplorMRParser.Comma)


                    self.state = 1041
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==XplorMRParser.Head:
                        self.state = 1036
                        self.match(XplorMRParser.Head)
                        self.state = 1038
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==XplorMRParser.Equ_op:
                            self.state = 1037
                            self.match(XplorMRParser.Equ_op)


                        self.state = 1040
                        self.selection()


                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 1045
                self.match(XplorMRParser.R_paren)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Harmonic_assignContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Assign(self):
            return self.getToken(XplorMRParser.Assign, 0)

        def selection(self):
            return self.getTypedRuleContext(XplorMRParser.SelectionContext,0)


        def number(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.NumberContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.NumberContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_harmonic_assign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHarmonic_assign" ):
                listener.enterHarmonic_assign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHarmonic_assign" ):
                listener.exitHarmonic_assign(self)




    def harmonic_assign(self):

        localctx = XplorMRParser.Harmonic_assignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 88, self.RULE_harmonic_assign)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1049
            self.match(XplorMRParser.Assign)
            self.state = 1050
            self.selection()
            self.state = 1051
            self.number()
            self.state = 1052
            self.number()
            self.state = 1053
            self.number()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Antidistance_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def xadc_assign(self):
            return self.getTypedRuleContext(XplorMRParser.Xadc_assignContext,0)


        def xadc_assign_loop(self):
            return self.getTypedRuleContext(XplorMRParser.Xadc_assign_loopContext,0)


        def Classification(self):
            return self.getToken(XplorMRParser.Classification, 0)

        def Simple_name(self):
            return self.getToken(XplorMRParser.Simple_name, 0)

        def Equ_op(self):
            return self.getToken(XplorMRParser.Equ_op, 0)

        def Expectation(self):
            return self.getToken(XplorMRParser.Expectation, 0)

        def Integer(self):
            return self.getToken(XplorMRParser.Integer, 0)

        def number_s(self):
            return self.getTypedRuleContext(XplorMRParser.Number_sContext,0)


        def ForceConstant(self):
            return self.getToken(XplorMRParser.ForceConstant, 0)

        def Nrestraints(self):
            return self.getToken(XplorMRParser.Nrestraints, 0)

        def Print(self):
            return self.getToken(XplorMRParser.Print, 0)

        def Threshold(self):
            return self.getToken(XplorMRParser.Threshold, 0)

        def All(self):
            return self.getToken(XplorMRParser.All, 0)

        def Reset(self):
            return self.getToken(XplorMRParser.Reset, 0)

        def Size(self):
            return self.getToken(XplorMRParser.Size, 0)

        def Zero(self):
            return self.getToken(XplorMRParser.Zero, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_antidistance_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAntidistance_statement" ):
                listener.enterAntidistance_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAntidistance_statement" ):
                listener.exitAntidistance_statement(self)




    def antidistance_statement(self):

        localctx = XplorMRParser.Antidistance_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 90, self.RULE_antidistance_statement)
        self._la = 0 # Token type
        try:
            self.state = 1092
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [XplorMRParser.Assign]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1055
                self.xadc_assign()
                pass
            elif token in [XplorMRParser.For]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1056
                self.xadc_assign_loop()
                pass
            elif token in [XplorMRParser.Classification]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1057
                self.match(XplorMRParser.Classification)
                self.state = 1059
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 1058
                    self.match(XplorMRParser.Equ_op)


                self.state = 1061
                self.match(XplorMRParser.Simple_name)
                pass
            elif token in [XplorMRParser.Expectation]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1062
                self.match(XplorMRParser.Expectation)
                self.state = 1063
                self.match(XplorMRParser.Integer)
                self.state = 1064
                self.number_s()
                pass
            elif token in [XplorMRParser.ForceConstant]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1065
                self.match(XplorMRParser.ForceConstant)
                self.state = 1067
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 1066
                    self.match(XplorMRParser.Equ_op)


                self.state = 1069
                self.number_s()
                pass
            elif token in [XplorMRParser.Nrestraints]:
                self.enterOuterAlt(localctx, 6)
                self.state = 1070
                self.match(XplorMRParser.Nrestraints)
                self.state = 1072
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 1071
                    self.match(XplorMRParser.Equ_op)


                self.state = 1074
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.Print]:
                self.enterOuterAlt(localctx, 7)
                self.state = 1075
                self.match(XplorMRParser.Print)
                self.state = 1076
                self.match(XplorMRParser.Threshold)
                self.state = 1077
                self.number_s()
                self.state = 1084
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [XplorMRParser.All]:
                    self.state = 1078
                    self.match(XplorMRParser.All)
                    pass
                elif token in [XplorMRParser.Classification]:
                    self.state = 1079
                    self.match(XplorMRParser.Classification)
                    self.state = 1081
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==XplorMRParser.Equ_op:
                        self.state = 1080
                        self.match(XplorMRParser.Equ_op)


                    self.state = 1083
                    self.match(XplorMRParser.Simple_name)
                    pass
                else:
                    raise NoViableAltException(self)

                pass
            elif token in [XplorMRParser.Reset]:
                self.enterOuterAlt(localctx, 8)
                self.state = 1086
                self.match(XplorMRParser.Reset)
                pass
            elif token in [XplorMRParser.Size]:
                self.enterOuterAlt(localctx, 9)
                self.state = 1087
                self.match(XplorMRParser.Size)
                self.state = 1088
                self.number_s()
                self.state = 1089
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.Zero]:
                self.enterOuterAlt(localctx, 10)
                self.state = 1091
                self.match(XplorMRParser.Zero)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Xadc_assignContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Assign(self):
            return self.getToken(XplorMRParser.Assign, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.SelectionContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_xadc_assign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterXadc_assign" ):
                listener.enterXadc_assign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitXadc_assign" ):
                listener.exitXadc_assign(self)




    def xadc_assign(self):

        localctx = XplorMRParser.Xadc_assignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 92, self.RULE_xadc_assign)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1094
            self.match(XplorMRParser.Assign)
            self.state = 1095
            self.selection()
            self.state = 1096
            self.selection()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Coupling_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def coup_assign(self):
            return self.getTypedRuleContext(XplorMRParser.Coup_assignContext,0)


        def coup_assign_loop(self):
            return self.getTypedRuleContext(XplorMRParser.Coup_assign_loopContext,0)


        def Classification(self):
            return self.getToken(XplorMRParser.Classification, 0)

        def Simple_name(self):
            return self.getToken(XplorMRParser.Simple_name, 0)

        def Equ_op(self):
            return self.getToken(XplorMRParser.Equ_op, 0)

        def Coefficients(self):
            return self.getToken(XplorMRParser.Coefficients, 0)

        def number_s(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Number_sContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Number_sContext,i)


        def Cv(self):
            return self.getToken(XplorMRParser.Cv, 0)

        def Integer(self):
            return self.getToken(XplorMRParser.Integer, 0)

        def DegEnergy(self):
            return self.getToken(XplorMRParser.DegEnergy, 0)

        def ForceConstant(self):
            return self.getToken(XplorMRParser.ForceConstant, 0)

        def Nrestraints(self):
            return self.getToken(XplorMRParser.Nrestraints, 0)

        def Partition(self):
            return self.getToken(XplorMRParser.Partition, 0)

        def Potential(self):
            return self.getToken(XplorMRParser.Potential, 0)

        def Potential_types(self):
            return self.getToken(XplorMRParser.Potential_types, 0)

        def Print(self):
            return self.getToken(XplorMRParser.Print, 0)

        def Threshold(self):
            return self.getToken(XplorMRParser.Threshold, 0)

        def All(self):
            return self.getToken(XplorMRParser.All, 0)

        def Reset(self):
            return self.getToken(XplorMRParser.Reset, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_coupling_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCoupling_statement" ):
                listener.enterCoupling_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCoupling_statement" ):
                listener.exitCoupling_statement(self)




    def coupling_statement(self):

        localctx = XplorMRParser.Coupling_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 94, self.RULE_coupling_statement)
        self._la = 0 # Token type
        try:
            self.state = 1147
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [XplorMRParser.Assign]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1098
                self.coup_assign()
                pass
            elif token in [XplorMRParser.For]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1099
                self.coup_assign_loop()
                pass
            elif token in [XplorMRParser.Classification]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1100
                self.match(XplorMRParser.Classification)
                self.state = 1102
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 1101
                    self.match(XplorMRParser.Equ_op)


                self.state = 1104
                self.match(XplorMRParser.Simple_name)
                pass
            elif token in [XplorMRParser.Coefficients]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1105
                self.match(XplorMRParser.Coefficients)
                self.state = 1106
                self.number_s()
                self.state = 1107
                self.number_s()
                self.state = 1108
                self.number_s()
                self.state = 1109
                self.number_s()
                pass
            elif token in [XplorMRParser.Cv]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1111
                self.match(XplorMRParser.Cv)
                self.state = 1113
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 1112
                    self.match(XplorMRParser.Equ_op)


                self.state = 1115
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.DegEnergy]:
                self.enterOuterAlt(localctx, 6)
                self.state = 1116
                self.match(XplorMRParser.DegEnergy)
                self.state = 1117
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.ForceConstant]:
                self.enterOuterAlt(localctx, 7)
                self.state = 1118
                self.match(XplorMRParser.ForceConstant)
                self.state = 1119
                self.number_s()
                self.state = 1121
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 192)) & ~0x3f) == 0 and ((1 << (_la - 192)) & ((1 << (XplorMRParser.Integer - 192)) | (1 << (XplorMRParser.Real - 192)) | (1 << (XplorMRParser.Symbol_name - 192)))) != 0):
                    self.state = 1120
                    self.number_s()


                pass
            elif token in [XplorMRParser.Nrestraints]:
                self.enterOuterAlt(localctx, 8)
                self.state = 1123
                self.match(XplorMRParser.Nrestraints)
                self.state = 1125
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 1124
                    self.match(XplorMRParser.Equ_op)


                self.state = 1127
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.Partition]:
                self.enterOuterAlt(localctx, 9)
                self.state = 1128
                self.match(XplorMRParser.Partition)
                self.state = 1130
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 1129
                    self.match(XplorMRParser.Equ_op)


                self.state = 1132
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.Potential]:
                self.enterOuterAlt(localctx, 10)
                self.state = 1133
                self.match(XplorMRParser.Potential)
                self.state = 1134
                self.match(XplorMRParser.Potential_types)
                pass
            elif token in [XplorMRParser.Print]:
                self.enterOuterAlt(localctx, 11)
                self.state = 1135
                self.match(XplorMRParser.Print)
                self.state = 1136
                self.match(XplorMRParser.Threshold)
                self.state = 1137
                self.number_s()
                self.state = 1144
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [XplorMRParser.All]:
                    self.state = 1138
                    self.match(XplorMRParser.All)
                    pass
                elif token in [XplorMRParser.Classification]:
                    self.state = 1139
                    self.match(XplorMRParser.Classification)
                    self.state = 1141
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==XplorMRParser.Equ_op:
                        self.state = 1140
                        self.match(XplorMRParser.Equ_op)


                    self.state = 1143
                    self.match(XplorMRParser.Simple_name)
                    pass
                else:
                    raise NoViableAltException(self)

                pass
            elif token in [XplorMRParser.Reset]:
                self.enterOuterAlt(localctx, 12)
                self.state = 1146
                self.match(XplorMRParser.Reset)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Coup_assignContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Assign(self):
            return self.getToken(XplorMRParser.Assign, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.SelectionContext,i)


        def number(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.NumberContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.NumberContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_coup_assign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCoup_assign" ):
                listener.enterCoup_assign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCoup_assign" ):
                listener.exitCoup_assign(self)




    def coup_assign(self):

        localctx = XplorMRParser.Coup_assignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 96, self.RULE_coup_assign)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1149
            self.match(XplorMRParser.Assign)
            self.state = 1150
            self.selection()
            self.state = 1151
            self.selection()
            self.state = 1152
            self.selection()
            self.state = 1153
            self.selection()
            self.state = 1159
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==XplorMRParser.L_paren:
                self.state = 1154
                self.selection()
                self.state = 1155
                self.selection()
                self.state = 1156
                self.selection()
                self.state = 1157
                self.selection()


            self.state = 1161
            self.number()
            self.state = 1162
            self.number()
            self.state = 1166
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 192)) & ~0x3f) == 0 and ((1 << (_la - 192)) & ((1 << (XplorMRParser.Integer - 192)) | (1 << (XplorMRParser.Real - 192)) | (1 << (XplorMRParser.Symbol_name - 192)))) != 0):
                self.state = 1163
                self.number()
                self.state = 1164
                self.number()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Carbon_shift_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def carbon_shift_assign(self):
            return self.getTypedRuleContext(XplorMRParser.Carbon_shift_assignContext,0)


        def Classification(self):
            return self.getToken(XplorMRParser.Classification, 0)

        def Simple_name(self):
            return self.getToken(XplorMRParser.Simple_name, 0)

        def Equ_op(self):
            return self.getToken(XplorMRParser.Equ_op, 0)

        def Expectation(self):
            return self.getToken(XplorMRParser.Expectation, 0)

        def Integer(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Integer)
            else:
                return self.getToken(XplorMRParser.Integer, i)

        def number_s(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Number_sContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Number_sContext,i)


        def ForceConstant(self):
            return self.getToken(XplorMRParser.ForceConstant, 0)

        def Nrestraints(self):
            return self.getToken(XplorMRParser.Nrestraints, 0)

        def PhiStep(self):
            return self.getToken(XplorMRParser.PhiStep, 0)

        def PsiStep(self):
            return self.getToken(XplorMRParser.PsiStep, 0)

        def Potential(self):
            return self.getToken(XplorMRParser.Potential, 0)

        def Potential_types(self):
            return self.getToken(XplorMRParser.Potential_types, 0)

        def Print(self):
            return self.getToken(XplorMRParser.Print, 0)

        def Threshold(self):
            return self.getToken(XplorMRParser.Threshold, 0)

        def carbon_shift_rcoil(self):
            return self.getTypedRuleContext(XplorMRParser.Carbon_shift_rcoilContext,0)


        def Reset(self):
            return self.getToken(XplorMRParser.Reset, 0)

        def Zero(self):
            return self.getToken(XplorMRParser.Zero, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_carbon_shift_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCarbon_shift_statement" ):
                listener.enterCarbon_shift_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCarbon_shift_statement" ):
                listener.exitCarbon_shift_statement(self)




    def carbon_shift_statement(self):

        localctx = XplorMRParser.Carbon_shift_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 98, self.RULE_carbon_shift_statement)
        self._la = 0 # Token type
        try:
            self.state = 1203
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [XplorMRParser.Assign]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1168
                self.carbon_shift_assign()
                pass
            elif token in [XplorMRParser.Classification]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1169
                self.match(XplorMRParser.Classification)
                self.state = 1171
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 1170
                    self.match(XplorMRParser.Equ_op)


                self.state = 1173
                self.match(XplorMRParser.Simple_name)
                pass
            elif token in [XplorMRParser.Expectation]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1174
                self.match(XplorMRParser.Expectation)
                self.state = 1175
                self.match(XplorMRParser.Integer)
                self.state = 1176
                self.match(XplorMRParser.Integer)
                self.state = 1177
                self.number_s()
                self.state = 1178
                self.number_s()
                self.state = 1179
                self.number_s()
                pass
            elif token in [XplorMRParser.ForceConstant]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1181
                self.match(XplorMRParser.ForceConstant)
                self.state = 1183
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 1182
                    self.match(XplorMRParser.Equ_op)


                self.state = 1185
                self.number_s()
                pass
            elif token in [XplorMRParser.Nrestraints]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1186
                self.match(XplorMRParser.Nrestraints)
                self.state = 1188
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 1187
                    self.match(XplorMRParser.Equ_op)


                self.state = 1190
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.PhiStep]:
                self.enterOuterAlt(localctx, 6)
                self.state = 1191
                self.match(XplorMRParser.PhiStep)
                self.state = 1192
                self.number_s()
                pass
            elif token in [XplorMRParser.PsiStep]:
                self.enterOuterAlt(localctx, 7)
                self.state = 1193
                self.match(XplorMRParser.PsiStep)
                self.state = 1194
                self.number_s()
                pass
            elif token in [XplorMRParser.Potential]:
                self.enterOuterAlt(localctx, 8)
                self.state = 1195
                self.match(XplorMRParser.Potential)
                self.state = 1196
                self.match(XplorMRParser.Potential_types)
                pass
            elif token in [XplorMRParser.Print]:
                self.enterOuterAlt(localctx, 9)
                self.state = 1197
                self.match(XplorMRParser.Print)
                self.state = 1198
                self.match(XplorMRParser.Threshold)
                self.state = 1199
                self.number_s()
                pass
            elif token in [XplorMRParser.Rcoil]:
                self.enterOuterAlt(localctx, 10)
                self.state = 1200
                self.carbon_shift_rcoil()
                pass
            elif token in [XplorMRParser.Reset]:
                self.enterOuterAlt(localctx, 11)
                self.state = 1201
                self.match(XplorMRParser.Reset)
                pass
            elif token in [XplorMRParser.Zero]:
                self.enterOuterAlt(localctx, 12)
                self.state = 1202
                self.match(XplorMRParser.Zero)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Carbon_shift_assignContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Assign(self):
            return self.getToken(XplorMRParser.Assign, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.SelectionContext,i)


        def number(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.NumberContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.NumberContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_carbon_shift_assign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCarbon_shift_assign" ):
                listener.enterCarbon_shift_assign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCarbon_shift_assign" ):
                listener.exitCarbon_shift_assign(self)




    def carbon_shift_assign(self):

        localctx = XplorMRParser.Carbon_shift_assignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 100, self.RULE_carbon_shift_assign)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1205
            self.match(XplorMRParser.Assign)
            self.state = 1206
            self.selection()
            self.state = 1207
            self.selection()
            self.state = 1208
            self.selection()
            self.state = 1209
            self.selection()
            self.state = 1210
            self.selection()
            self.state = 1211
            self.number()
            self.state = 1212
            self.number()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Carbon_shift_rcoilContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Rcoil(self):
            return self.getToken(XplorMRParser.Rcoil, 0)

        def selection(self):
            return self.getTypedRuleContext(XplorMRParser.SelectionContext,0)


        def number(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.NumberContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.NumberContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_carbon_shift_rcoil

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCarbon_shift_rcoil" ):
                listener.enterCarbon_shift_rcoil(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCarbon_shift_rcoil" ):
                listener.exitCarbon_shift_rcoil(self)




    def carbon_shift_rcoil(self):

        localctx = XplorMRParser.Carbon_shift_rcoilContext(self, self._ctx, self.state)
        self.enterRule(localctx, 102, self.RULE_carbon_shift_rcoil)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1214
            self.match(XplorMRParser.Rcoil)
            self.state = 1215
            self.selection()
            self.state = 1216
            self.number()
            self.state = 1217
            self.number()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Proton_shift_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def observed(self):
            return self.getTypedRuleContext(XplorMRParser.ObservedContext,0)


        def proton_shift_rcoil(self):
            return self.getTypedRuleContext(XplorMRParser.Proton_shift_rcoilContext,0)


        def proton_shift_anisotropy(self):
            return self.getTypedRuleContext(XplorMRParser.Proton_shift_anisotropyContext,0)


        def proton_shift_amides(self):
            return self.getTypedRuleContext(XplorMRParser.Proton_shift_amidesContext,0)


        def proton_shift_carbons(self):
            return self.getTypedRuleContext(XplorMRParser.Proton_shift_carbonsContext,0)


        def proton_shift_nitrogens(self):
            return self.getTypedRuleContext(XplorMRParser.Proton_shift_nitrogensContext,0)


        def proton_shift_oxygens(self):
            return self.getTypedRuleContext(XplorMRParser.Proton_shift_oxygensContext,0)


        def proton_shift_ring_atoms(self):
            return self.getTypedRuleContext(XplorMRParser.Proton_shift_ring_atomsContext,0)


        def proton_shift_alphas_and_amides(self):
            return self.getTypedRuleContext(XplorMRParser.Proton_shift_alphas_and_amidesContext,0)


        def Classification(self):
            return self.getToken(XplorMRParser.Classification, 0)

        def Simple_name(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Simple_name)
            else:
                return self.getToken(XplorMRParser.Simple_name, i)

        def Equ_op(self):
            return self.getToken(XplorMRParser.Equ_op, 0)

        def Error(self):
            return self.getToken(XplorMRParser.Error, 0)

        def number_s(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Number_sContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Number_sContext,i)


        def DegEnergy(self):
            return self.getToken(XplorMRParser.DegEnergy, 0)

        def Integer(self):
            return self.getToken(XplorMRParser.Integer, 0)

        def ForceConstant(self):
            return self.getToken(XplorMRParser.ForceConstant, 0)

        def Potential(self):
            return self.getToken(XplorMRParser.Potential, 0)

        def Potential_types(self):
            return self.getToken(XplorMRParser.Potential_types, 0)

        def Print(self):
            return self.getToken(XplorMRParser.Print, 0)

        def Threshold(self):
            return self.getToken(XplorMRParser.Threshold, 0)

        def All(self):
            return self.getToken(XplorMRParser.All, 0)

        def Reset(self):
            return self.getToken(XplorMRParser.Reset, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_proton_shift_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProton_shift_statement" ):
                listener.enterProton_shift_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProton_shift_statement" ):
                listener.exitProton_shift_statement(self)




    def proton_shift_statement(self):

        localctx = XplorMRParser.Proton_shift_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 104, self.RULE_proton_shift_statement)
        self._la = 0 # Token type
        try:
            self.state = 1258
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [XplorMRParser.Observed]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1219
                self.observed()
                pass
            elif token in [XplorMRParser.Rcoil]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1220
                self.proton_shift_rcoil()
                pass
            elif token in [XplorMRParser.Anisotropy]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1221
                self.proton_shift_anisotropy()
                pass
            elif token in [XplorMRParser.Amides]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1222
                self.proton_shift_amides()
                pass
            elif token in [XplorMRParser.Carbon]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1223
                self.proton_shift_carbons()
                pass
            elif token in [XplorMRParser.Nitrogens]:
                self.enterOuterAlt(localctx, 6)
                self.state = 1224
                self.proton_shift_nitrogens()
                pass
            elif token in [XplorMRParser.Oxygens]:
                self.enterOuterAlt(localctx, 7)
                self.state = 1225
                self.proton_shift_oxygens()
                pass
            elif token in [XplorMRParser.RingAtoms]:
                self.enterOuterAlt(localctx, 8)
                self.state = 1226
                self.proton_shift_ring_atoms()
                pass
            elif token in [XplorMRParser.AlphasAndAmides]:
                self.enterOuterAlt(localctx, 9)
                self.state = 1227
                self.proton_shift_alphas_and_amides()
                pass
            elif token in [XplorMRParser.Classification]:
                self.enterOuterAlt(localctx, 10)
                self.state = 1228
                self.match(XplorMRParser.Classification)
                self.state = 1230
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 1229
                    self.match(XplorMRParser.Equ_op)


                self.state = 1232
                self.match(XplorMRParser.Simple_name)
                pass
            elif token in [XplorMRParser.Error]:
                self.enterOuterAlt(localctx, 11)
                self.state = 1233
                self.match(XplorMRParser.Error)
                self.state = 1234
                self.number_s()
                pass
            elif token in [XplorMRParser.DegEnergy]:
                self.enterOuterAlt(localctx, 12)
                self.state = 1235
                self.match(XplorMRParser.DegEnergy)
                self.state = 1236
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.ForceConstant]:
                self.enterOuterAlt(localctx, 13)
                self.state = 1237
                self.match(XplorMRParser.ForceConstant)
                self.state = 1238
                self.number_s()
                self.state = 1240
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 192)) & ~0x3f) == 0 and ((1 << (_la - 192)) & ((1 << (XplorMRParser.Integer - 192)) | (1 << (XplorMRParser.Real - 192)) | (1 << (XplorMRParser.Symbol_name - 192)))) != 0):
                    self.state = 1239
                    self.number_s()


                pass
            elif token in [XplorMRParser.Potential]:
                self.enterOuterAlt(localctx, 14)
                self.state = 1242
                self.match(XplorMRParser.Potential)
                self.state = 1243
                self.match(XplorMRParser.Potential_types)
                pass
            elif token in [XplorMRParser.Print]:
                self.enterOuterAlt(localctx, 15)
                self.state = 1244
                self.match(XplorMRParser.Print)
                self.state = 1245
                self.match(XplorMRParser.Threshold)
                self.state = 1246
                self.number_s()
                self.state = 1253
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [XplorMRParser.All]:
                    self.state = 1247
                    self.match(XplorMRParser.All)
                    pass
                elif token in [XplorMRParser.Classification]:
                    self.state = 1248
                    self.match(XplorMRParser.Classification)
                    self.state = 1250
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==XplorMRParser.Equ_op:
                        self.state = 1249
                        self.match(XplorMRParser.Equ_op)


                    self.state = 1252
                    self.match(XplorMRParser.Simple_name)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 1255
                self.match(XplorMRParser.Simple_name)
                pass
            elif token in [XplorMRParser.Reset]:
                self.enterOuterAlt(localctx, 16)
                self.state = 1257
                self.match(XplorMRParser.Reset)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ObservedContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Observed(self):
            return self.getToken(XplorMRParser.Observed, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.SelectionContext,i)


        def number(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.NumberContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.NumberContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_observed

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterObserved" ):
                listener.enterObserved(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitObserved" ):
                listener.exitObserved(self)




    def observed(self):

        localctx = XplorMRParser.ObservedContext(self, self._ctx, self.state)
        self.enterRule(localctx, 106, self.RULE_observed)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1260
            self.match(XplorMRParser.Observed)
            self.state = 1261
            self.selection()
            self.state = 1263
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==XplorMRParser.L_paren:
                self.state = 1262
                self.selection()


            self.state = 1265
            self.number()
            self.state = 1267
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 192)) & ~0x3f) == 0 and ((1 << (_la - 192)) & ((1 << (XplorMRParser.Integer - 192)) | (1 << (XplorMRParser.Real - 192)) | (1 << (XplorMRParser.Symbol_name - 192)))) != 0):
                self.state = 1266
                self.number()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Proton_shift_rcoilContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Rcoil(self):
            return self.getToken(XplorMRParser.Rcoil, 0)

        def selection(self):
            return self.getTypedRuleContext(XplorMRParser.SelectionContext,0)


        def number(self):
            return self.getTypedRuleContext(XplorMRParser.NumberContext,0)


        def getRuleIndex(self):
            return XplorMRParser.RULE_proton_shift_rcoil

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProton_shift_rcoil" ):
                listener.enterProton_shift_rcoil(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProton_shift_rcoil" ):
                listener.exitProton_shift_rcoil(self)




    def proton_shift_rcoil(self):

        localctx = XplorMRParser.Proton_shift_rcoilContext(self, self._ctx, self.state)
        self.enterRule(localctx, 108, self.RULE_proton_shift_rcoil)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1269
            self.match(XplorMRParser.Rcoil)
            self.state = 1270
            self.selection()
            self.state = 1271
            self.number()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Proton_shift_anisotropyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Anisotropy(self):
            return self.getToken(XplorMRParser.Anisotropy, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.SelectionContext,i)


        def Simple_name(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Simple_name)
            else:
                return self.getToken(XplorMRParser.Simple_name, i)

        def Logical(self):
            return self.getToken(XplorMRParser.Logical, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_proton_shift_anisotropy

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProton_shift_anisotropy" ):
                listener.enterProton_shift_anisotropy(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProton_shift_anisotropy" ):
                listener.exitProton_shift_anisotropy(self)




    def proton_shift_anisotropy(self):

        localctx = XplorMRParser.Proton_shift_anisotropyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 110, self.RULE_proton_shift_anisotropy)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1273
            self.match(XplorMRParser.Anisotropy)
            self.state = 1274
            self.selection()
            self.state = 1275
            self.selection()
            self.state = 1276
            self.selection()
            self.state = 1277
            self.match(XplorMRParser.Simple_name)
            self.state = 1279
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==XplorMRParser.Logical:
                self.state = 1278
                self.match(XplorMRParser.Logical)


            self.state = 1281
            self.match(XplorMRParser.Simple_name)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Proton_shift_amidesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Amides(self):
            return self.getToken(XplorMRParser.Amides, 0)

        def selection(self):
            return self.getTypedRuleContext(XplorMRParser.SelectionContext,0)


        def getRuleIndex(self):
            return XplorMRParser.RULE_proton_shift_amides

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProton_shift_amides" ):
                listener.enterProton_shift_amides(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProton_shift_amides" ):
                listener.exitProton_shift_amides(self)




    def proton_shift_amides(self):

        localctx = XplorMRParser.Proton_shift_amidesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 112, self.RULE_proton_shift_amides)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1283
            self.match(XplorMRParser.Amides)
            self.state = 1284
            self.selection()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Proton_shift_carbonsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Carbon(self):
            return self.getToken(XplorMRParser.Carbon, 0)

        def selection(self):
            return self.getTypedRuleContext(XplorMRParser.SelectionContext,0)


        def getRuleIndex(self):
            return XplorMRParser.RULE_proton_shift_carbons

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProton_shift_carbons" ):
                listener.enterProton_shift_carbons(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProton_shift_carbons" ):
                listener.exitProton_shift_carbons(self)




    def proton_shift_carbons(self):

        localctx = XplorMRParser.Proton_shift_carbonsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 114, self.RULE_proton_shift_carbons)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1286
            self.match(XplorMRParser.Carbon)
            self.state = 1287
            self.selection()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Proton_shift_nitrogensContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Nitrogens(self):
            return self.getToken(XplorMRParser.Nitrogens, 0)

        def selection(self):
            return self.getTypedRuleContext(XplorMRParser.SelectionContext,0)


        def getRuleIndex(self):
            return XplorMRParser.RULE_proton_shift_nitrogens

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProton_shift_nitrogens" ):
                listener.enterProton_shift_nitrogens(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProton_shift_nitrogens" ):
                listener.exitProton_shift_nitrogens(self)




    def proton_shift_nitrogens(self):

        localctx = XplorMRParser.Proton_shift_nitrogensContext(self, self._ctx, self.state)
        self.enterRule(localctx, 116, self.RULE_proton_shift_nitrogens)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1289
            self.match(XplorMRParser.Nitrogens)
            self.state = 1290
            self.selection()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Proton_shift_oxygensContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Oxygens(self):
            return self.getToken(XplorMRParser.Oxygens, 0)

        def selection(self):
            return self.getTypedRuleContext(XplorMRParser.SelectionContext,0)


        def getRuleIndex(self):
            return XplorMRParser.RULE_proton_shift_oxygens

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProton_shift_oxygens" ):
                listener.enterProton_shift_oxygens(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProton_shift_oxygens" ):
                listener.exitProton_shift_oxygens(self)




    def proton_shift_oxygens(self):

        localctx = XplorMRParser.Proton_shift_oxygensContext(self, self._ctx, self.state)
        self.enterRule(localctx, 118, self.RULE_proton_shift_oxygens)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1292
            self.match(XplorMRParser.Oxygens)
            self.state = 1293
            self.selection()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Proton_shift_ring_atomsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RingAtoms(self):
            return self.getToken(XplorMRParser.RingAtoms, 0)

        def Simple_name(self):
            return self.getToken(XplorMRParser.Simple_name, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.SelectionContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_proton_shift_ring_atoms

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProton_shift_ring_atoms" ):
                listener.enterProton_shift_ring_atoms(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProton_shift_ring_atoms" ):
                listener.exitProton_shift_ring_atoms(self)




    def proton_shift_ring_atoms(self):

        localctx = XplorMRParser.Proton_shift_ring_atomsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 120, self.RULE_proton_shift_ring_atoms)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1295
            self.match(XplorMRParser.RingAtoms)
            self.state = 1296
            self.match(XplorMRParser.Simple_name)
            self.state = 1297
            self.selection()
            self.state = 1298
            self.selection()
            self.state = 1299
            self.selection()
            self.state = 1300
            self.selection()
            self.state = 1301
            self.selection()
            self.state = 1303
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==XplorMRParser.L_paren:
                self.state = 1302
                self.selection()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Proton_shift_alphas_and_amidesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AlphasAndAmides(self):
            return self.getToken(XplorMRParser.AlphasAndAmides, 0)

        def selection(self):
            return self.getTypedRuleContext(XplorMRParser.SelectionContext,0)


        def getRuleIndex(self):
            return XplorMRParser.RULE_proton_shift_alphas_and_amides

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProton_shift_alphas_and_amides" ):
                listener.enterProton_shift_alphas_and_amides(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProton_shift_alphas_and_amides" ):
                listener.exitProton_shift_alphas_and_amides(self)




    def proton_shift_alphas_and_amides(self):

        localctx = XplorMRParser.Proton_shift_alphas_and_amidesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 122, self.RULE_proton_shift_alphas_and_amides)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1305
            self.match(XplorMRParser.AlphasAndAmides)
            self.state = 1306
            self.selection()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Ramachandran_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def rama_assign(self):
            return self.getTypedRuleContext(XplorMRParser.Rama_assignContext,0)


        def Classification(self):
            return self.getToken(XplorMRParser.Classification, 0)

        def Simple_name(self):
            return self.getToken(XplorMRParser.Simple_name, 0)

        def Equ_op(self):
            return self.getToken(XplorMRParser.Equ_op, 0)

        def Cutoff(self):
            return self.getToken(XplorMRParser.Cutoff, 0)

        def number_s(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Number_sContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Number_sContext,i)


        def ForceConstant(self):
            return self.getToken(XplorMRParser.ForceConstant, 0)

        def Gaussian(self):
            return self.getToken(XplorMRParser.Gaussian, 0)

        def Nrestraints(self):
            return self.getToken(XplorMRParser.Nrestraints, 0)

        def Integer(self):
            return self.getToken(XplorMRParser.Integer, 0)

        def Phase(self):
            return self.getToken(XplorMRParser.Phase, 0)

        def Print(self):
            return self.getToken(XplorMRParser.Print, 0)

        def Threshold(self):
            return self.getToken(XplorMRParser.Threshold, 0)

        def All(self):
            return self.getToken(XplorMRParser.All, 0)

        def Quartic(self):
            return self.getToken(XplorMRParser.Quartic, 0)

        def Reset(self):
            return self.getToken(XplorMRParser.Reset, 0)

        def Scale(self):
            return self.getToken(XplorMRParser.Scale, 0)

        def Shape(self):
            return self.getToken(XplorMRParser.Shape, 0)

        def Gauss_or_Quart(self):
            return self.getToken(XplorMRParser.Gauss_or_Quart, 0)

        def Size(self):
            return self.getToken(XplorMRParser.Size, 0)

        def Dimensions(self):
            return self.getToken(XplorMRParser.Dimensions, 0)

        def Sort(self):
            return self.getToken(XplorMRParser.Sort, 0)

        def Zero(self):
            return self.getToken(XplorMRParser.Zero, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_ramachandran_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRamachandran_statement" ):
                listener.enterRamachandran_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRamachandran_statement" ):
                listener.exitRamachandran_statement(self)




    def ramachandran_statement(self):

        localctx = XplorMRParser.Ramachandran_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 124, self.RULE_ramachandran_statement)
        self._la = 0 # Token type
        try:
            self.state = 1425
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [XplorMRParser.Assign]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1308
                self.rama_assign()
                pass
            elif token in [XplorMRParser.Classification]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1309
                self.match(XplorMRParser.Classification)
                self.state = 1311
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 1310
                    self.match(XplorMRParser.Equ_op)


                self.state = 1313
                self.match(XplorMRParser.Simple_name)
                pass
            elif token in [XplorMRParser.Cutoff]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1314
                self.match(XplorMRParser.Cutoff)
                self.state = 1315
                self.number_s()
                pass
            elif token in [XplorMRParser.ForceConstant]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1316
                self.match(XplorMRParser.ForceConstant)
                self.state = 1318
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 1317
                    self.match(XplorMRParser.Equ_op)


                self.state = 1320
                self.number_s()
                pass
            elif token in [XplorMRParser.Gaussian]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1321
                self.match(XplorMRParser.Gaussian)
                self.state = 1322
                self.number_s()
                self.state = 1323
                self.number_s()
                self.state = 1324
                self.number_s()
                self.state = 1329
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,136,self._ctx)
                if la_ == 1:
                    self.state = 1325
                    self.number_s()
                    self.state = 1326
                    self.number_s()
                    self.state = 1327
                    self.number_s()


                self.state = 1335
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,137,self._ctx)
                if la_ == 1:
                    self.state = 1331
                    self.number_s()
                    self.state = 1332
                    self.number_s()
                    self.state = 1333
                    self.number_s()


                self.state = 1341
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 192)) & ~0x3f) == 0 and ((1 << (_la - 192)) & ((1 << (XplorMRParser.Integer - 192)) | (1 << (XplorMRParser.Real - 192)) | (1 << (XplorMRParser.Symbol_name - 192)))) != 0):
                    self.state = 1337
                    self.number_s()
                    self.state = 1338
                    self.number_s()
                    self.state = 1339
                    self.number_s()


                pass
            elif token in [XplorMRParser.Nrestraints]:
                self.enterOuterAlt(localctx, 6)
                self.state = 1343
                self.match(XplorMRParser.Nrestraints)
                self.state = 1345
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 1344
                    self.match(XplorMRParser.Equ_op)


                self.state = 1347
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.Phase]:
                self.enterOuterAlt(localctx, 7)
                self.state = 1348
                self.match(XplorMRParser.Phase)
                self.state = 1349
                self.number_s()
                self.state = 1350
                self.number_s()
                self.state = 1351
                self.number_s()
                self.state = 1356
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,140,self._ctx)
                if la_ == 1:
                    self.state = 1352
                    self.number_s()
                    self.state = 1353
                    self.number_s()
                    self.state = 1354
                    self.number_s()


                self.state = 1362
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,141,self._ctx)
                if la_ == 1:
                    self.state = 1358
                    self.number_s()
                    self.state = 1359
                    self.number_s()
                    self.state = 1360
                    self.number_s()


                self.state = 1368
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 192)) & ~0x3f) == 0 and ((1 << (_la - 192)) & ((1 << (XplorMRParser.Integer - 192)) | (1 << (XplorMRParser.Real - 192)) | (1 << (XplorMRParser.Symbol_name - 192)))) != 0):
                    self.state = 1364
                    self.number_s()
                    self.state = 1365
                    self.number_s()
                    self.state = 1366
                    self.number_s()


                pass
            elif token in [XplorMRParser.Print]:
                self.enterOuterAlt(localctx, 8)
                self.state = 1370
                self.match(XplorMRParser.Print)
                self.state = 1371
                self.match(XplorMRParser.Threshold)
                self.state = 1372
                self.number_s()
                self.state = 1379
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [XplorMRParser.All]:
                    self.state = 1373
                    self.match(XplorMRParser.All)
                    pass
                elif token in [XplorMRParser.Classification]:
                    self.state = 1374
                    self.match(XplorMRParser.Classification)
                    self.state = 1376
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==XplorMRParser.Equ_op:
                        self.state = 1375
                        self.match(XplorMRParser.Equ_op)


                    self.state = 1378
                    self.match(XplorMRParser.Simple_name)
                    pass
                else:
                    raise NoViableAltException(self)

                pass
            elif token in [XplorMRParser.Quartic]:
                self.enterOuterAlt(localctx, 9)
                self.state = 1381
                self.match(XplorMRParser.Quartic)
                self.state = 1382
                self.number_s()
                self.state = 1383
                self.number_s()
                self.state = 1384
                self.number_s()
                self.state = 1389
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,145,self._ctx)
                if la_ == 1:
                    self.state = 1385
                    self.number_s()
                    self.state = 1386
                    self.number_s()
                    self.state = 1387
                    self.number_s()


                self.state = 1395
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,146,self._ctx)
                if la_ == 1:
                    self.state = 1391
                    self.number_s()
                    self.state = 1392
                    self.number_s()
                    self.state = 1393
                    self.number_s()


                self.state = 1401
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 192)) & ~0x3f) == 0 and ((1 << (_la - 192)) & ((1 << (XplorMRParser.Integer - 192)) | (1 << (XplorMRParser.Real - 192)) | (1 << (XplorMRParser.Symbol_name - 192)))) != 0):
                    self.state = 1397
                    self.number_s()
                    self.state = 1398
                    self.number_s()
                    self.state = 1399
                    self.number_s()


                pass
            elif token in [XplorMRParser.Reset]:
                self.enterOuterAlt(localctx, 10)
                self.state = 1403
                self.match(XplorMRParser.Reset)
                pass
            elif token in [XplorMRParser.Scale]:
                self.enterOuterAlt(localctx, 11)
                self.state = 1404
                self.match(XplorMRParser.Scale)
                self.state = 1406
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 1405
                    self.match(XplorMRParser.Equ_op)


                self.state = 1408
                self.number_s()
                pass
            elif token in [XplorMRParser.Shape]:
                self.enterOuterAlt(localctx, 12)
                self.state = 1409
                self.match(XplorMRParser.Shape)
                self.state = 1410
                self.match(XplorMRParser.Gauss_or_Quart)
                pass
            elif token in [XplorMRParser.Size]:
                self.enterOuterAlt(localctx, 13)
                self.state = 1411
                self.match(XplorMRParser.Size)
                self.state = 1412
                self.match(XplorMRParser.Dimensions)
                self.state = 1413
                self.number_s()
                self.state = 1415
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,149,self._ctx)
                if la_ == 1:
                    self.state = 1414
                    self.number_s()


                self.state = 1418
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,150,self._ctx)
                if la_ == 1:
                    self.state = 1417
                    self.number_s()


                self.state = 1421
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 192)) & ~0x3f) == 0 and ((1 << (_la - 192)) & ((1 << (XplorMRParser.Integer - 192)) | (1 << (XplorMRParser.Real - 192)) | (1 << (XplorMRParser.Symbol_name - 192)))) != 0):
                    self.state = 1420
                    self.number_s()


                pass
            elif token in [XplorMRParser.Sort]:
                self.enterOuterAlt(localctx, 14)
                self.state = 1423
                self.match(XplorMRParser.Sort)
                pass
            elif token in [XplorMRParser.Zero]:
                self.enterOuterAlt(localctx, 15)
                self.state = 1424
                self.match(XplorMRParser.Zero)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Rama_assignContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Assign(self):
            return self.getToken(XplorMRParser.Assign, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.SelectionContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_rama_assign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRama_assign" ):
                listener.enterRama_assign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRama_assign" ):
                listener.exitRama_assign(self)




    def rama_assign(self):

        localctx = XplorMRParser.Rama_assignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 126, self.RULE_rama_assign)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1427
            self.match(XplorMRParser.Assign)
            self.state = 1428
            self.selection()
            self.state = 1429
            self.selection()
            self.state = 1430
            self.selection()
            self.state = 1431
            self.selection()
            self.state = 1437
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,153,self._ctx)
            if la_ == 1:
                self.state = 1432
                self.selection()
                self.state = 1433
                self.selection()
                self.state = 1434
                self.selection()
                self.state = 1435
                self.selection()


            self.state = 1444
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,154,self._ctx)
            if la_ == 1:
                self.state = 1439
                self.selection()
                self.state = 1440
                self.selection()
                self.state = 1441
                self.selection()
                self.state = 1442
                self.selection()


            self.state = 1451
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==XplorMRParser.L_paren:
                self.state = 1446
                self.selection()
                self.state = 1447
                self.selection()
                self.state = 1448
                self.selection()
                self.state = 1449
                self.selection()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Collapse_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def coll_assign(self):
            return self.getTypedRuleContext(XplorMRParser.Coll_assignContext,0)


        def coll_assign_loop(self):
            return self.getTypedRuleContext(XplorMRParser.Coll_assign_loopContext,0)


        def Scale(self):
            return self.getToken(XplorMRParser.Scale, 0)

        def number_s(self):
            return self.getTypedRuleContext(XplorMRParser.Number_sContext,0)


        def Equ_op(self):
            return self.getToken(XplorMRParser.Equ_op, 0)

        def Print(self):
            return self.getToken(XplorMRParser.Print, 0)

        def Reset(self):
            return self.getToken(XplorMRParser.Reset, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_collapse_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCollapse_statement" ):
                listener.enterCollapse_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCollapse_statement" ):
                listener.exitCollapse_statement(self)




    def collapse_statement(self):

        localctx = XplorMRParser.Collapse_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 128, self.RULE_collapse_statement)
        self._la = 0 # Token type
        try:
            self.state = 1462
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [XplorMRParser.Assign]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1453
                self.coll_assign()
                pass
            elif token in [XplorMRParser.For]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1454
                self.coll_assign_loop()
                pass
            elif token in [XplorMRParser.Scale]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1455
                self.match(XplorMRParser.Scale)
                self.state = 1457
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 1456
                    self.match(XplorMRParser.Equ_op)


                self.state = 1459
                self.number_s()
                pass
            elif token in [XplorMRParser.Print]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1460
                self.match(XplorMRParser.Print)
                pass
            elif token in [XplorMRParser.Reset]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1461
                self.match(XplorMRParser.Reset)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Coll_assignContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Assign(self):
            return self.getToken(XplorMRParser.Assign, 0)

        def selection(self):
            return self.getTypedRuleContext(XplorMRParser.SelectionContext,0)


        def number(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.NumberContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.NumberContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_coll_assign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColl_assign" ):
                listener.enterColl_assign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColl_assign" ):
                listener.exitColl_assign(self)




    def coll_assign(self):

        localctx = XplorMRParser.Coll_assignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 130, self.RULE_coll_assign)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1464
            self.match(XplorMRParser.Assign)
            self.state = 1465
            self.selection()
            self.state = 1466
            self.number()
            self.state = 1467
            self.number()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Diffusion_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def dani_assign(self):
            return self.getTypedRuleContext(XplorMRParser.Dani_assignContext,0)


        def Classification(self):
            return self.getToken(XplorMRParser.Classification, 0)

        def Simple_name(self):
            return self.getToken(XplorMRParser.Simple_name, 0)

        def Equ_op(self):
            return self.getToken(XplorMRParser.Equ_op, 0)

        def Coefficients(self):
            return self.getToken(XplorMRParser.Coefficients, 0)

        def number_s(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Number_sContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Number_sContext,i)


        def ForceConstant(self):
            return self.getToken(XplorMRParser.ForceConstant, 0)

        def Nrestraints(self):
            return self.getToken(XplorMRParser.Nrestraints, 0)

        def Integer(self):
            return self.getToken(XplorMRParser.Integer, 0)

        def Potential(self):
            return self.getToken(XplorMRParser.Potential, 0)

        def Potential_types(self):
            return self.getToken(XplorMRParser.Potential_types, 0)

        def Print(self):
            return self.getToken(XplorMRParser.Print, 0)

        def Threshold(self):
            return self.getToken(XplorMRParser.Threshold, 0)

        def Reset(self):
            return self.getToken(XplorMRParser.Reset, 0)

        def Type(self):
            return self.getToken(XplorMRParser.Type, 0)

        def Rdc_or_Diff_anis_types(self):
            return self.getToken(XplorMRParser.Rdc_or_Diff_anis_types, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_diffusion_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDiffusion_statement" ):
                listener.enterDiffusion_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDiffusion_statement" ):
                listener.exitDiffusion_statement(self)




    def diffusion_statement(self):

        localctx = XplorMRParser.Diffusion_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 132, self.RULE_diffusion_statement)
        self._la = 0 # Token type
        try:
            self.state = 1500
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [XplorMRParser.Assign]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1469
                self.dani_assign()
                pass
            elif token in [XplorMRParser.Classification]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1470
                self.match(XplorMRParser.Classification)
                self.state = 1472
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 1471
                    self.match(XplorMRParser.Equ_op)


                self.state = 1474
                self.match(XplorMRParser.Simple_name)
                pass
            elif token in [XplorMRParser.Coefficients]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1475
                self.match(XplorMRParser.Coefficients)
                self.state = 1476
                self.number_s()
                self.state = 1477
                self.number_s()
                self.state = 1478
                self.number_s()
                self.state = 1479
                self.number_s()
                self.state = 1480
                self.number_s()
                pass
            elif token in [XplorMRParser.ForceConstant]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1482
                self.match(XplorMRParser.ForceConstant)
                self.state = 1484
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 1483
                    self.match(XplorMRParser.Equ_op)


                self.state = 1486
                self.number_s()
                pass
            elif token in [XplorMRParser.Nrestraints]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1487
                self.match(XplorMRParser.Nrestraints)
                self.state = 1489
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 1488
                    self.match(XplorMRParser.Equ_op)


                self.state = 1491
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.Potential]:
                self.enterOuterAlt(localctx, 6)
                self.state = 1492
                self.match(XplorMRParser.Potential)
                self.state = 1493
                self.match(XplorMRParser.Potential_types)
                pass
            elif token in [XplorMRParser.Print]:
                self.enterOuterAlt(localctx, 7)
                self.state = 1494
                self.match(XplorMRParser.Print)
                self.state = 1495
                self.match(XplorMRParser.Threshold)
                self.state = 1496
                self.number_s()
                pass
            elif token in [XplorMRParser.Reset]:
                self.enterOuterAlt(localctx, 8)
                self.state = 1497
                self.match(XplorMRParser.Reset)
                pass
            elif token in [XplorMRParser.Type]:
                self.enterOuterAlt(localctx, 9)
                self.state = 1498
                self.match(XplorMRParser.Type)
                self.state = 1499
                self.match(XplorMRParser.Rdc_or_Diff_anis_types)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Dani_assignContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Assign(self):
            return self.getToken(XplorMRParser.Assign, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.SelectionContext,i)


        def number(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.NumberContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.NumberContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_dani_assign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDani_assign" ):
                listener.enterDani_assign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDani_assign" ):
                listener.exitDani_assign(self)




    def dani_assign(self):

        localctx = XplorMRParser.Dani_assignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 134, self.RULE_dani_assign)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1502
            self.match(XplorMRParser.Assign)
            self.state = 1503
            self.selection()
            self.state = 1504
            self.selection()
            self.state = 1505
            self.selection()
            self.state = 1506
            self.selection()
            self.state = 1507
            self.selection()
            self.state = 1508
            self.selection()
            self.state = 1509
            self.number()
            self.state = 1511
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 192)) & ~0x3f) == 0 and ((1 << (_la - 192)) & ((1 << (XplorMRParser.Integer - 192)) | (1 << (XplorMRParser.Real - 192)) | (1 << (XplorMRParser.Symbol_name - 192)))) != 0):
                self.state = 1510
                self.number()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Orientation_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def orie_assign(self):
            return self.getTypedRuleContext(XplorMRParser.Orie_assignContext,0)


        def Classification(self):
            return self.getToken(XplorMRParser.Classification, 0)

        def Simple_name(self):
            return self.getToken(XplorMRParser.Simple_name, 0)

        def Equ_op(self):
            return self.getToken(XplorMRParser.Equ_op, 0)

        def Cutoff(self):
            return self.getToken(XplorMRParser.Cutoff, 0)

        def number_s(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Number_sContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Number_sContext,i)


        def Height(self):
            return self.getToken(XplorMRParser.Height, 0)

        def ForceConstant(self):
            return self.getToken(XplorMRParser.ForceConstant, 0)

        def Gaussian(self):
            return self.getToken(XplorMRParser.Gaussian, 0)

        def MaxGaussians(self):
            return self.getToken(XplorMRParser.MaxGaussians, 0)

        def Integer(self):
            return self.getToken(XplorMRParser.Integer, 0)

        def NewGaussian(self):
            return self.getToken(XplorMRParser.NewGaussian, 0)

        def Nrestraints(self):
            return self.getToken(XplorMRParser.Nrestraints, 0)

        def Print(self):
            return self.getToken(XplorMRParser.Print, 0)

        def Threshold(self):
            return self.getToken(XplorMRParser.Threshold, 0)

        def All(self):
            return self.getToken(XplorMRParser.All, 0)

        def Quartic(self):
            return self.getToken(XplorMRParser.Quartic, 0)

        def Reset(self):
            return self.getToken(XplorMRParser.Reset, 0)

        def Residue(self):
            return self.getToken(XplorMRParser.Residue, 0)

        def Size(self):
            return self.getToken(XplorMRParser.Size, 0)

        def Zero(self):
            return self.getToken(XplorMRParser.Zero, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_orientation_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOrientation_statement" ):
                listener.enterOrientation_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOrientation_statement" ):
                listener.exitOrientation_statement(self)




    def orientation_statement(self):

        localctx = XplorMRParser.Orientation_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 136, self.RULE_orientation_statement)
        self._la = 0 # Token type
        try:
            self.state = 1582
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [XplorMRParser.Assign]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1513
                self.orie_assign()
                pass
            elif token in [XplorMRParser.Classification]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1514
                self.match(XplorMRParser.Classification)
                self.state = 1516
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 1515
                    self.match(XplorMRParser.Equ_op)


                self.state = 1518
                self.match(XplorMRParser.Simple_name)
                pass
            elif token in [XplorMRParser.Cutoff]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1519
                self.match(XplorMRParser.Cutoff)
                self.state = 1520
                self.number_s()
                pass
            elif token in [XplorMRParser.Height]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1521
                self.match(XplorMRParser.Height)
                self.state = 1522
                self.number_s()
                pass
            elif token in [XplorMRParser.ForceConstant]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1523
                self.match(XplorMRParser.ForceConstant)
                self.state = 1525
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 1524
                    self.match(XplorMRParser.Equ_op)


                self.state = 1527
                self.number_s()
                pass
            elif token in [XplorMRParser.Gaussian]:
                self.enterOuterAlt(localctx, 6)
                self.state = 1528
                self.match(XplorMRParser.Gaussian)
                self.state = 1529
                self.number_s()
                self.state = 1530
                self.number_s()
                self.state = 1531
                self.number_s()
                self.state = 1532
                self.number_s()
                self.state = 1533
                self.number_s()
                self.state = 1534
                self.number_s()
                self.state = 1535
                self.number_s()
                pass
            elif token in [XplorMRParser.MaxGaussians]:
                self.enterOuterAlt(localctx, 7)
                self.state = 1537
                self.match(XplorMRParser.MaxGaussians)
                self.state = 1538
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.NewGaussian]:
                self.enterOuterAlt(localctx, 8)
                self.state = 1539
                self.match(XplorMRParser.NewGaussian)
                self.state = 1540
                self.number_s()
                self.state = 1541
                self.number_s()
                self.state = 1542
                self.number_s()
                self.state = 1543
                self.number_s()
                self.state = 1544
                self.number_s()
                self.state = 1545
                self.number_s()
                self.state = 1546
                self.number_s()
                self.state = 1547
                self.number_s()
                pass
            elif token in [XplorMRParser.Nrestraints]:
                self.enterOuterAlt(localctx, 9)
                self.state = 1549
                self.match(XplorMRParser.Nrestraints)
                self.state = 1551
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 1550
                    self.match(XplorMRParser.Equ_op)


                self.state = 1553
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.Print]:
                self.enterOuterAlt(localctx, 10)
                self.state = 1554
                self.match(XplorMRParser.Print)
                self.state = 1555
                self.match(XplorMRParser.Threshold)
                self.state = 1556
                self.number_s()
                self.state = 1563
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [XplorMRParser.All]:
                    self.state = 1557
                    self.match(XplorMRParser.All)
                    pass
                elif token in [XplorMRParser.Classification]:
                    self.state = 1558
                    self.match(XplorMRParser.Classification)
                    self.state = 1560
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==XplorMRParser.Equ_op:
                        self.state = 1559
                        self.match(XplorMRParser.Equ_op)


                    self.state = 1562
                    self.match(XplorMRParser.Simple_name)
                    pass
                else:
                    raise NoViableAltException(self)

                pass
            elif token in [XplorMRParser.Quartic]:
                self.enterOuterAlt(localctx, 11)
                self.state = 1565
                self.match(XplorMRParser.Quartic)
                self.state = 1566
                self.number_s()
                self.state = 1567
                self.number_s()
                self.state = 1568
                self.number_s()
                self.state = 1569
                self.number_s()
                self.state = 1570
                self.number_s()
                self.state = 1571
                self.number_s()
                self.state = 1572
                self.number_s()
                pass
            elif token in [XplorMRParser.Reset]:
                self.enterOuterAlt(localctx, 12)
                self.state = 1574
                self.match(XplorMRParser.Reset)
                pass
            elif token in [XplorMRParser.Residue]:
                self.enterOuterAlt(localctx, 13)
                self.state = 1575
                self.match(XplorMRParser.Residue)
                self.state = 1576
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.Size]:
                self.enterOuterAlt(localctx, 14)
                self.state = 1577
                self.match(XplorMRParser.Size)
                self.state = 1578
                self.number_s()
                self.state = 1579
                self.number_s()
                pass
            elif token in [XplorMRParser.Zero]:
                self.enterOuterAlt(localctx, 15)
                self.state = 1581
                self.match(XplorMRParser.Zero)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Orie_assignContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Assign(self):
            return self.getToken(XplorMRParser.Assign, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.SelectionContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_orie_assign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOrie_assign" ):
                listener.enterOrie_assign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOrie_assign" ):
                listener.exitOrie_assign(self)




    def orie_assign(self):

        localctx = XplorMRParser.Orie_assignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 138, self.RULE_orie_assign)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1584
            self.match(XplorMRParser.Assign)
            self.state = 1585
            self.selection()
            self.state = 1586
            self.selection()
            self.state = 1587
            self.selection()
            self.state = 1588
            self.selection()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Csa_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def csa_assign(self):
            return self.getTypedRuleContext(XplorMRParser.Csa_assignContext,0)


        def csa_assign_loop(self):
            return self.getTypedRuleContext(XplorMRParser.Csa_assign_loopContext,0)


        def Classification(self):
            return self.getToken(XplorMRParser.Classification, 0)

        def Simple_name(self):
            return self.getToken(XplorMRParser.Simple_name, 0)

        def Equ_op(self):
            return self.getToken(XplorMRParser.Equ_op, 0)

        def Scale(self):
            return self.getToken(XplorMRParser.Scale, 0)

        def number_s(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Number_sContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Number_sContext,i)


        def Type(self):
            return self.getToken(XplorMRParser.Type, 0)

        def Csa_types(self):
            return self.getToken(XplorMRParser.Csa_types, 0)

        def Coefficients(self):
            return self.getToken(XplorMRParser.Coefficients, 0)

        def Sigma(self):
            return self.getToken(XplorMRParser.Sigma, 0)

        def ForceConstant(self):
            return self.getToken(XplorMRParser.ForceConstant, 0)

        def Nrestraints(self):
            return self.getToken(XplorMRParser.Nrestraints, 0)

        def Integer(self):
            return self.getToken(XplorMRParser.Integer, 0)

        def Potential(self):
            return self.getToken(XplorMRParser.Potential, 0)

        def Potential_types(self):
            return self.getToken(XplorMRParser.Potential_types, 0)

        def Print(self):
            return self.getToken(XplorMRParser.Print, 0)

        def Threshold(self):
            return self.getToken(XplorMRParser.Threshold, 0)

        def Reset(self):
            return self.getToken(XplorMRParser.Reset, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_csa_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCsa_statement" ):
                listener.enterCsa_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCsa_statement" ):
                listener.exitCsa_statement(self)




    def csa_statement(self):

        localctx = XplorMRParser.Csa_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 140, self.RULE_csa_statement)
        self._la = 0 # Token type
        try:
            self.state = 1630
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [XplorMRParser.Assign]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1590
                self.csa_assign()
                pass
            elif token in [XplorMRParser.For]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1591
                self.csa_assign_loop()
                pass
            elif token in [XplorMRParser.Classification]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1592
                self.match(XplorMRParser.Classification)
                self.state = 1594
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 1593
                    self.match(XplorMRParser.Equ_op)


                self.state = 1596
                self.match(XplorMRParser.Simple_name)
                pass
            elif token in [XplorMRParser.Scale]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1597
                self.match(XplorMRParser.Scale)
                self.state = 1599
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 1598
                    self.match(XplorMRParser.Equ_op)


                self.state = 1601
                self.number_s()
                pass
            elif token in [XplorMRParser.Type]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1602
                self.match(XplorMRParser.Type)
                self.state = 1603
                self.match(XplorMRParser.Csa_types)
                pass
            elif token in [XplorMRParser.Coefficients]:
                self.enterOuterAlt(localctx, 6)
                self.state = 1604
                self.match(XplorMRParser.Coefficients)
                self.state = 1605
                self.number_s()
                self.state = 1606
                self.number_s()
                self.state = 1607
                self.number_s()
                pass
            elif token in [XplorMRParser.Sigma]:
                self.enterOuterAlt(localctx, 7)
                self.state = 1609
                self.match(XplorMRParser.Sigma)
                self.state = 1610
                self.number_s()
                self.state = 1611
                self.number_s()
                self.state = 1612
                self.number_s()
                pass
            elif token in [XplorMRParser.ForceConstant]:
                self.enterOuterAlt(localctx, 8)
                self.state = 1614
                self.match(XplorMRParser.ForceConstant)
                self.state = 1616
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 1615
                    self.match(XplorMRParser.Equ_op)


                self.state = 1618
                self.number_s()
                pass
            elif token in [XplorMRParser.Nrestraints]:
                self.enterOuterAlt(localctx, 9)
                self.state = 1619
                self.match(XplorMRParser.Nrestraints)
                self.state = 1621
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 1620
                    self.match(XplorMRParser.Equ_op)


                self.state = 1623
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.Potential]:
                self.enterOuterAlt(localctx, 10)
                self.state = 1624
                self.match(XplorMRParser.Potential)
                self.state = 1625
                self.match(XplorMRParser.Potential_types)
                pass
            elif token in [XplorMRParser.Print]:
                self.enterOuterAlt(localctx, 11)
                self.state = 1626
                self.match(XplorMRParser.Print)
                self.state = 1627
                self.match(XplorMRParser.Threshold)
                self.state = 1628
                self.number_s()
                pass
            elif token in [XplorMRParser.Reset]:
                self.enterOuterAlt(localctx, 12)
                self.state = 1629
                self.match(XplorMRParser.Reset)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Csa_assignContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Assign(self):
            return self.getToken(XplorMRParser.Assign, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.SelectionContext,i)


        def number(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.NumberContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.NumberContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_csa_assign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCsa_assign" ):
                listener.enterCsa_assign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCsa_assign" ):
                listener.exitCsa_assign(self)




    def csa_assign(self):

        localctx = XplorMRParser.Csa_assignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 142, self.RULE_csa_assign)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1632
            self.match(XplorMRParser.Assign)
            self.state = 1633
            self.selection()
            self.state = 1634
            self.selection()
            self.state = 1635
            self.selection()
            self.state = 1636
            self.selection()
            self.state = 1637
            self.selection()
            self.state = 1638
            self.selection()
            self.state = 1639
            self.selection()
            self.state = 1640
            self.number()
            self.state = 1642
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,174,self._ctx)
            if la_ == 1:
                self.state = 1641
                self.number()


            self.state = 1645
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 192)) & ~0x3f) == 0 and ((1 << (_la - 192)) & ((1 << (XplorMRParser.Integer - 192)) | (1 << (XplorMRParser.Real - 192)) | (1 << (XplorMRParser.Symbol_name - 192)))) != 0):
                self.state = 1644
                self.number()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pcsa_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def csa_assign(self):
            return self.getTypedRuleContext(XplorMRParser.Csa_assignContext,0)


        def Classification(self):
            return self.getToken(XplorMRParser.Classification, 0)

        def Simple_name(self):
            return self.getToken(XplorMRParser.Simple_name, 0)

        def Equ_op(self):
            return self.getToken(XplorMRParser.Equ_op, 0)

        def Scale(self):
            return self.getToken(XplorMRParser.Scale, 0)

        def number_s(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Number_sContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Number_sContext,i)


        def Coefficients(self):
            return self.getToken(XplorMRParser.Coefficients, 0)

        def Sigma(self):
            return self.getToken(XplorMRParser.Sigma, 0)

        def ForceConstant(self):
            return self.getToken(XplorMRParser.ForceConstant, 0)

        def Nrestraints(self):
            return self.getToken(XplorMRParser.Nrestraints, 0)

        def Integer(self):
            return self.getToken(XplorMRParser.Integer, 0)

        def Potential(self):
            return self.getToken(XplorMRParser.Potential, 0)

        def Potential_types(self):
            return self.getToken(XplorMRParser.Potential_types, 0)

        def Print(self):
            return self.getToken(XplorMRParser.Print, 0)

        def Threshold(self):
            return self.getToken(XplorMRParser.Threshold, 0)

        def Reset(self):
            return self.getToken(XplorMRParser.Reset, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_pcsa_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPcsa_statement" ):
                listener.enterPcsa_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPcsa_statement" ):
                listener.exitPcsa_statement(self)




    def pcsa_statement(self):

        localctx = XplorMRParser.Pcsa_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 144, self.RULE_pcsa_statement)
        self._la = 0 # Token type
        try:
            self.state = 1685
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [XplorMRParser.Assign]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1647
                self.csa_assign()
                pass
            elif token in [XplorMRParser.Classification]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1648
                self.match(XplorMRParser.Classification)
                self.state = 1650
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 1649
                    self.match(XplorMRParser.Equ_op)


                self.state = 1652
                self.match(XplorMRParser.Simple_name)
                pass
            elif token in [XplorMRParser.Scale]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1653
                self.match(XplorMRParser.Scale)
                self.state = 1655
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 1654
                    self.match(XplorMRParser.Equ_op)


                self.state = 1657
                self.number_s()
                pass
            elif token in [XplorMRParser.Coefficients]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1658
                self.match(XplorMRParser.Coefficients)
                self.state = 1659
                self.number_s()
                self.state = 1660
                self.number_s()
                self.state = 1661
                self.number_s()
                pass
            elif token in [XplorMRParser.Sigma]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1663
                self.match(XplorMRParser.Sigma)
                self.state = 1664
                self.number_s()
                self.state = 1665
                self.number_s()
                self.state = 1666
                self.number_s()
                self.state = 1667
                self.number_s()
                pass
            elif token in [XplorMRParser.ForceConstant]:
                self.enterOuterAlt(localctx, 6)
                self.state = 1669
                self.match(XplorMRParser.ForceConstant)
                self.state = 1671
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 1670
                    self.match(XplorMRParser.Equ_op)


                self.state = 1673
                self.number_s()
                pass
            elif token in [XplorMRParser.Nrestraints]:
                self.enterOuterAlt(localctx, 7)
                self.state = 1674
                self.match(XplorMRParser.Nrestraints)
                self.state = 1676
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 1675
                    self.match(XplorMRParser.Equ_op)


                self.state = 1678
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.Potential]:
                self.enterOuterAlt(localctx, 8)
                self.state = 1679
                self.match(XplorMRParser.Potential)
                self.state = 1680
                self.match(XplorMRParser.Potential_types)
                pass
            elif token in [XplorMRParser.Print]:
                self.enterOuterAlt(localctx, 9)
                self.state = 1681
                self.match(XplorMRParser.Print)
                self.state = 1682
                self.match(XplorMRParser.Threshold)
                self.state = 1683
                self.number_s()
                pass
            elif token in [XplorMRParser.Reset]:
                self.enterOuterAlt(localctx, 10)
                self.state = 1684
                self.match(XplorMRParser.Reset)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class One_bond_coupling_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def one_bond_assign(self):
            return self.getTypedRuleContext(XplorMRParser.One_bond_assignContext,0)


        def Classification(self):
            return self.getToken(XplorMRParser.Classification, 0)

        def Simple_name(self):
            return self.getToken(XplorMRParser.Simple_name, 0)

        def Equ_op(self):
            return self.getToken(XplorMRParser.Equ_op, 0)

        def Coefficients(self):
            return self.getToken(XplorMRParser.Coefficients, 0)

        def number_s(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Number_sContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Number_sContext,i)


        def ForceConstant(self):
            return self.getToken(XplorMRParser.ForceConstant, 0)

        def Nrestraints(self):
            return self.getToken(XplorMRParser.Nrestraints, 0)

        def Integer(self):
            return self.getToken(XplorMRParser.Integer, 0)

        def Potential(self):
            return self.getToken(XplorMRParser.Potential, 0)

        def Potential_types(self):
            return self.getToken(XplorMRParser.Potential_types, 0)

        def Print(self):
            return self.getToken(XplorMRParser.Print, 0)

        def Threshold(self):
            return self.getToken(XplorMRParser.Threshold, 0)

        def Reset(self):
            return self.getToken(XplorMRParser.Reset, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_one_bond_coupling_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOne_bond_coupling_statement" ):
                listener.enterOne_bond_coupling_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOne_bond_coupling_statement" ):
                listener.exitOne_bond_coupling_statement(self)




    def one_bond_coupling_statement(self):

        localctx = XplorMRParser.One_bond_coupling_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 146, self.RULE_one_bond_coupling_statement)
        self._la = 0 # Token type
        try:
            self.state = 1718
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [XplorMRParser.Assign]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1687
                self.one_bond_assign()
                pass
            elif token in [XplorMRParser.Classification]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1688
                self.match(XplorMRParser.Classification)
                self.state = 1690
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 1689
                    self.match(XplorMRParser.Equ_op)


                self.state = 1692
                self.match(XplorMRParser.Simple_name)
                pass
            elif token in [XplorMRParser.Coefficients]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1693
                self.match(XplorMRParser.Coefficients)
                self.state = 1694
                self.number_s()
                self.state = 1695
                self.number_s()
                self.state = 1696
                self.number_s()
                self.state = 1697
                self.number_s()
                self.state = 1698
                self.number_s()
                self.state = 1699
                self.number_s()
                self.state = 1700
                self.number_s()
                pass
            elif token in [XplorMRParser.ForceConstant]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1702
                self.match(XplorMRParser.ForceConstant)
                self.state = 1704
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 1703
                    self.match(XplorMRParser.Equ_op)


                self.state = 1706
                self.number_s()
                pass
            elif token in [XplorMRParser.Nrestraints]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1707
                self.match(XplorMRParser.Nrestraints)
                self.state = 1709
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 1708
                    self.match(XplorMRParser.Equ_op)


                self.state = 1711
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.Potential]:
                self.enterOuterAlt(localctx, 6)
                self.state = 1712
                self.match(XplorMRParser.Potential)
                self.state = 1713
                self.match(XplorMRParser.Potential_types)
                pass
            elif token in [XplorMRParser.Print]:
                self.enterOuterAlt(localctx, 7)
                self.state = 1714
                self.match(XplorMRParser.Print)
                self.state = 1715
                self.match(XplorMRParser.Threshold)
                self.state = 1716
                self.number_s()
                pass
            elif token in [XplorMRParser.Reset]:
                self.enterOuterAlt(localctx, 8)
                self.state = 1717
                self.match(XplorMRParser.Reset)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class One_bond_assignContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Assign(self):
            return self.getToken(XplorMRParser.Assign, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.SelectionContext,i)


        def number(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.NumberContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.NumberContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_one_bond_assign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOne_bond_assign" ):
                listener.enterOne_bond_assign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOne_bond_assign" ):
                listener.exitOne_bond_assign(self)




    def one_bond_assign(self):

        localctx = XplorMRParser.One_bond_assignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 148, self.RULE_one_bond_assign)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1720
            self.match(XplorMRParser.Assign)
            self.state = 1721
            self.selection()
            self.state = 1722
            self.selection()
            self.state = 1723
            self.selection()
            self.state = 1724
            self.selection()
            self.state = 1725
            self.selection()
            self.state = 1726
            self.selection()
            self.state = 1727
            self.selection()
            self.state = 1728
            self.selection()
            self.state = 1729
            self.number()
            self.state = 1730
            self.number()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Angle_db_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def angle_db_assign(self):
            return self.getTypedRuleContext(XplorMRParser.Angle_db_assignContext,0)


        def Classification(self):
            return self.getToken(XplorMRParser.Classification, 0)

        def Simple_name(self):
            return self.getToken(XplorMRParser.Simple_name, 0)

        def Equ_op(self):
            return self.getToken(XplorMRParser.Equ_op, 0)

        def DerivFlag(self):
            return self.getToken(XplorMRParser.DerivFlag, 0)

        def Expectation(self):
            return self.getToken(XplorMRParser.Expectation, 0)

        def Integer(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Integer)
            else:
                return self.getToken(XplorMRParser.Integer, i)

        def number_s(self):
            return self.getTypedRuleContext(XplorMRParser.Number_sContext,0)


        def Error(self):
            return self.getToken(XplorMRParser.Error, 0)

        def ForceConstant(self):
            return self.getToken(XplorMRParser.ForceConstant, 0)

        def Nrestraints(self):
            return self.getToken(XplorMRParser.Nrestraints, 0)

        def Potential(self):
            return self.getToken(XplorMRParser.Potential, 0)

        def Potential_types(self):
            return self.getToken(XplorMRParser.Potential_types, 0)

        def Print(self):
            return self.getToken(XplorMRParser.Print, 0)

        def Threshold(self):
            return self.getToken(XplorMRParser.Threshold, 0)

        def All(self):
            return self.getToken(XplorMRParser.All, 0)

        def Reset(self):
            return self.getToken(XplorMRParser.Reset, 0)

        def Size(self):
            return self.getToken(XplorMRParser.Size, 0)

        def AngleDb(self):
            return self.getToken(XplorMRParser.AngleDb, 0)

        def Dihedral(self):
            return self.getToken(XplorMRParser.Dihedral, 0)

        def Zero(self):
            return self.getToken(XplorMRParser.Zero, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_angle_db_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAngle_db_statement" ):
                listener.enterAngle_db_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAngle_db_statement" ):
                listener.exitAngle_db_statement(self)




    def angle_db_statement(self):

        localctx = XplorMRParser.Angle_db_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 150, self.RULE_angle_db_statement)
        self._la = 0 # Token type
        try:
            self.state = 1775
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [XplorMRParser.Assign]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1732
                self.angle_db_assign()
                pass
            elif token in [XplorMRParser.Classification]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1733
                self.match(XplorMRParser.Classification)
                self.state = 1735
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 1734
                    self.match(XplorMRParser.Equ_op)


                self.state = 1737
                self.match(XplorMRParser.Simple_name)
                pass
            elif token in [XplorMRParser.DerivFlag]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1738
                self.match(XplorMRParser.DerivFlag)
                self.state = 1739
                self.match(XplorMRParser.Simple_name)
                pass
            elif token in [XplorMRParser.Expectation]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1740
                self.match(XplorMRParser.Expectation)
                self.state = 1741
                self.match(XplorMRParser.Integer)
                self.state = 1742
                self.match(XplorMRParser.Integer)
                self.state = 1743
                self.number_s()
                pass
            elif token in [XplorMRParser.Error]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1744
                self.match(XplorMRParser.Error)
                self.state = 1745
                self.number_s()
                pass
            elif token in [XplorMRParser.ForceConstant]:
                self.enterOuterAlt(localctx, 6)
                self.state = 1746
                self.match(XplorMRParser.ForceConstant)
                self.state = 1748
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 1747
                    self.match(XplorMRParser.Equ_op)


                self.state = 1750
                self.number_s()
                pass
            elif token in [XplorMRParser.Nrestraints]:
                self.enterOuterAlt(localctx, 7)
                self.state = 1751
                self.match(XplorMRParser.Nrestraints)
                self.state = 1753
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 1752
                    self.match(XplorMRParser.Equ_op)


                self.state = 1755
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.Potential]:
                self.enterOuterAlt(localctx, 8)
                self.state = 1756
                self.match(XplorMRParser.Potential)
                self.state = 1757
                self.match(XplorMRParser.Potential_types)
                pass
            elif token in [XplorMRParser.Print]:
                self.enterOuterAlt(localctx, 9)
                self.state = 1758
                self.match(XplorMRParser.Print)
                self.state = 1759
                self.match(XplorMRParser.Threshold)
                self.state = 1760
                self.number_s()
                self.state = 1767
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [XplorMRParser.All]:
                    self.state = 1761
                    self.match(XplorMRParser.All)
                    pass
                elif token in [XplorMRParser.Classification]:
                    self.state = 1762
                    self.match(XplorMRParser.Classification)
                    self.state = 1764
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==XplorMRParser.Equ_op:
                        self.state = 1763
                        self.match(XplorMRParser.Equ_op)


                    self.state = 1766
                    self.match(XplorMRParser.Simple_name)
                    pass
                else:
                    raise NoViableAltException(self)

                pass
            elif token in [XplorMRParser.Reset]:
                self.enterOuterAlt(localctx, 10)
                self.state = 1769
                self.match(XplorMRParser.Reset)
                pass
            elif token in [XplorMRParser.Size]:
                self.enterOuterAlt(localctx, 11)
                self.state = 1770
                self.match(XplorMRParser.Size)
                self.state = 1771
                _la = self._input.LA(1)
                if not(_la==XplorMRParser.Dihedral or _la==XplorMRParser.AngleDb):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1772
                self.match(XplorMRParser.Integer)
                self.state = 1773
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.Zero]:
                self.enterOuterAlt(localctx, 12)
                self.state = 1774
                self.match(XplorMRParser.Zero)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Angle_db_assignContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Assign(self):
            return self.getToken(XplorMRParser.Assign, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.SelectionContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_angle_db_assign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAngle_db_assign" ):
                listener.enterAngle_db_assign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAngle_db_assign" ):
                listener.exitAngle_db_assign(self)




    def angle_db_assign(self):

        localctx = XplorMRParser.Angle_db_assignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 152, self.RULE_angle_db_assign)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1777
            self.match(XplorMRParser.Assign)
            self.state = 1778
            self.selection()
            self.state = 1779
            self.selection()
            self.state = 1780
            self.selection()
            self.state = 1781
            self.selection()
            self.state = 1782
            self.selection()
            self.state = 1783
            self.selection()
            self.state = 1784
            self.selection()
            self.state = 1785
            self.selection()
            self.state = 1786
            self.selection()
            self.state = 1787
            self.selection()
            self.state = 1788
            self.selection()
            self.state = 1790
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==XplorMRParser.L_paren:
                self.state = 1789
                self.selection()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pre_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def pre_assign(self):
            return self.getTypedRuleContext(XplorMRParser.Pre_assignContext,0)


        def pre_assign_loop(self):
            return self.getTypedRuleContext(XplorMRParser.Pre_assign_loopContext,0)


        def Classification(self):
            return self.getToken(XplorMRParser.Classification, 0)

        def Simple_name(self):
            return self.getToken(XplorMRParser.Simple_name, 0)

        def Equ_op(self):
            return self.getToken(XplorMRParser.Equ_op, 0)

        def ForceConstant(self):
            return self.getToken(XplorMRParser.ForceConstant, 0)

        def number_s(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Number_sContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Number_sContext,i)


        def Nrestraints(self):
            return self.getToken(XplorMRParser.Nrestraints, 0)

        def Integer(self):
            return self.getToken(XplorMRParser.Integer, 0)

        def Potential(self):
            return self.getToken(XplorMRParser.Potential, 0)

        def Simple_name_PT(self):
            return self.getToken(XplorMRParser.Simple_name_PT, 0)

        def Potential_types(self):
            return self.getToken(XplorMRParser.Potential_types, 0)

        def Equ_op_PT(self):
            return self.getToken(XplorMRParser.Equ_op_PT, 0)

        def Kconst(self):
            return self.getToken(XplorMRParser.Kconst, 0)

        def Omega(self):
            return self.getToken(XplorMRParser.Omega, 0)

        def Tauc(self):
            return self.getToken(XplorMRParser.Tauc, 0)

        def Print(self):
            return self.getToken(XplorMRParser.Print, 0)

        def Threshold(self):
            return self.getToken(XplorMRParser.Threshold, 0)

        def All(self):
            return self.getToken(XplorMRParser.All, 0)

        def Reset(self):
            return self.getToken(XplorMRParser.Reset, 0)

        def Debug(self):
            return self.getToken(XplorMRParser.Debug, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_pre_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPre_statement" ):
                listener.enterPre_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPre_statement" ):
                listener.exitPre_statement(self)




    def pre_statement(self):

        localctx = XplorMRParser.Pre_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 154, self.RULE_pre_statement)
        self._la = 0 # Token type
        try:
            self.state = 1849
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [XplorMRParser.Assign]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1792
                self.pre_assign()
                pass
            elif token in [XplorMRParser.For]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1793
                self.pre_assign_loop()
                pass
            elif token in [XplorMRParser.Classification]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1794
                self.match(XplorMRParser.Classification)
                self.state = 1796
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 1795
                    self.match(XplorMRParser.Equ_op)


                self.state = 1798
                self.match(XplorMRParser.Simple_name)
                pass
            elif token in [XplorMRParser.ForceConstant]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1799
                self.match(XplorMRParser.ForceConstant)
                self.state = 1801
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 1800
                    self.match(XplorMRParser.Equ_op)


                self.state = 1803
                self.match(XplorMRParser.Simple_name)
                self.state = 1804
                self.number_s()
                pass
            elif token in [XplorMRParser.Nrestraints]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1805
                self.match(XplorMRParser.Nrestraints)
                self.state = 1807
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 1806
                    self.match(XplorMRParser.Equ_op)


                self.state = 1809
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.Potential]:
                self.enterOuterAlt(localctx, 6)
                self.state = 1810
                self.match(XplorMRParser.Potential)
                self.state = 1812
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op_PT:
                    self.state = 1811
                    self.match(XplorMRParser.Equ_op_PT)


                self.state = 1814
                self.match(XplorMRParser.Simple_name_PT)
                self.state = 1815
                self.match(XplorMRParser.Potential_types)
                pass
            elif token in [XplorMRParser.Kconst]:
                self.enterOuterAlt(localctx, 7)
                self.state = 1816
                self.match(XplorMRParser.Kconst)
                self.state = 1818
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 1817
                    self.match(XplorMRParser.Equ_op)


                self.state = 1820
                self.match(XplorMRParser.Simple_name)
                self.state = 1821
                self.number_s()
                pass
            elif token in [XplorMRParser.Omega]:
                self.enterOuterAlt(localctx, 8)
                self.state = 1822
                self.match(XplorMRParser.Omega)
                self.state = 1824
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 1823
                    self.match(XplorMRParser.Equ_op)


                self.state = 1826
                self.match(XplorMRParser.Simple_name)
                self.state = 1827
                self.number_s()
                pass
            elif token in [XplorMRParser.Tauc]:
                self.enterOuterAlt(localctx, 9)
                self.state = 1828
                self.match(XplorMRParser.Tauc)
                self.state = 1830
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 1829
                    self.match(XplorMRParser.Equ_op)


                self.state = 1832
                self.match(XplorMRParser.Simple_name)
                self.state = 1833
                self.number_s()
                self.state = 1834
                self.number_s()
                pass
            elif token in [XplorMRParser.Print]:
                self.enterOuterAlt(localctx, 10)
                self.state = 1836
                self.match(XplorMRParser.Print)
                self.state = 1837
                self.match(XplorMRParser.Threshold)
                self.state = 1838
                self.number_s()
                self.state = 1845
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [XplorMRParser.All]:
                    self.state = 1839
                    self.match(XplorMRParser.All)
                    pass
                elif token in [XplorMRParser.Classification]:
                    self.state = 1840
                    self.match(XplorMRParser.Classification)
                    self.state = 1842
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==XplorMRParser.Equ_op:
                        self.state = 1841
                        self.match(XplorMRParser.Equ_op)


                    self.state = 1844
                    self.match(XplorMRParser.Simple_name)
                    pass
                else:
                    raise NoViableAltException(self)

                pass
            elif token in [XplorMRParser.Reset]:
                self.enterOuterAlt(localctx, 11)
                self.state = 1847
                self.match(XplorMRParser.Reset)
                pass
            elif token in [XplorMRParser.Debug]:
                self.enterOuterAlt(localctx, 12)
                self.state = 1848
                self.match(XplorMRParser.Debug)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pre_assignContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Assign(self):
            return self.getToken(XplorMRParser.Assign, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.SelectionContext,i)


        def number(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.NumberContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.NumberContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_pre_assign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPre_assign" ):
                listener.enterPre_assign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPre_assign" ):
                listener.exitPre_assign(self)




    def pre_assign(self):

        localctx = XplorMRParser.Pre_assignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 156, self.RULE_pre_assign)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1851
            self.match(XplorMRParser.Assign)
            self.state = 1852
            self.selection()
            self.state = 1853
            self.selection()
            self.state = 1854
            self.number()
            self.state = 1856
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 192)) & ~0x3f) == 0 and ((1 << (_la - 192)) & ((1 << (XplorMRParser.Integer - 192)) | (1 << (XplorMRParser.Real - 192)) | (1 << (XplorMRParser.Symbol_name - 192)))) != 0):
                self.state = 1855
                self.number()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pcs_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def pcs_assign(self):
            return self.getTypedRuleContext(XplorMRParser.Pcs_assignContext,0)


        def pcs_assign_loop(self):
            return self.getTypedRuleContext(XplorMRParser.Pcs_assign_loopContext,0)


        def Classification(self):
            return self.getToken(XplorMRParser.Classification, 0)

        def Simple_name(self):
            return self.getToken(XplorMRParser.Simple_name, 0)

        def Equ_op(self):
            return self.getToken(XplorMRParser.Equ_op, 0)

        def Tolerance(self):
            return self.getToken(XplorMRParser.Tolerance, 0)

        def Integer(self):
            return self.getToken(XplorMRParser.Integer, 0)

        def Coefficients(self):
            return self.getToken(XplorMRParser.Coefficients, 0)

        def number_s(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Number_sContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Number_sContext,i)


        def ForceConstant(self):
            return self.getToken(XplorMRParser.ForceConstant, 0)

        def Nrestraints(self):
            return self.getToken(XplorMRParser.Nrestraints, 0)

        def Print(self):
            return self.getToken(XplorMRParser.Print, 0)

        def Threshold(self):
            return self.getToken(XplorMRParser.Threshold, 0)

        def All(self):
            return self.getToken(XplorMRParser.All, 0)

        def Reset(self):
            return self.getToken(XplorMRParser.Reset, 0)

        def Save(self):
            return self.getToken(XplorMRParser.Save, 0)

        def Fmed(self):
            return self.getToken(XplorMRParser.Fmed, 0)

        def ErrOn(self):
            return self.getToken(XplorMRParser.ErrOn, 0)

        def ErrOff(self):
            return self.getToken(XplorMRParser.ErrOff, 0)

        def Fon(self):
            return self.getToken(XplorMRParser.Fon, 0)

        def Foff(self):
            return self.getToken(XplorMRParser.Foff, 0)

        def Son(self):
            return self.getToken(XplorMRParser.Son, 0)

        def Soff(self):
            return self.getToken(XplorMRParser.Soff, 0)

        def Frun(self):
            return self.getToken(XplorMRParser.Frun, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_pcs_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPcs_statement" ):
                listener.enterPcs_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPcs_statement" ):
                listener.exitPcs_statement(self)




    def pcs_statement(self):

        localctx = XplorMRParser.Pcs_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 158, self.RULE_pcs_statement)
        self._la = 0 # Token type
        try:
            self.state = 1907
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [XplorMRParser.Assign]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1858
                self.pcs_assign()
                pass
            elif token in [XplorMRParser.For]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1859
                self.pcs_assign_loop()
                pass
            elif token in [XplorMRParser.Classification]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1860
                self.match(XplorMRParser.Classification)
                self.state = 1862
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 1861
                    self.match(XplorMRParser.Equ_op)


                self.state = 1864
                self.match(XplorMRParser.Simple_name)
                pass
            elif token in [XplorMRParser.Tolerance]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1865
                self.match(XplorMRParser.Tolerance)
                self.state = 1866
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.Coefficients]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1867
                self.match(XplorMRParser.Coefficients)
                self.state = 1868
                self.number_s()
                self.state = 1869
                self.number_s()
                pass
            elif token in [XplorMRParser.ForceConstant]:
                self.enterOuterAlt(localctx, 6)
                self.state = 1871
                self.match(XplorMRParser.ForceConstant)
                self.state = 1873
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 1872
                    self.match(XplorMRParser.Equ_op)


                self.state = 1875
                self.number_s()
                pass
            elif token in [XplorMRParser.Nrestraints]:
                self.enterOuterAlt(localctx, 7)
                self.state = 1876
                self.match(XplorMRParser.Nrestraints)
                self.state = 1878
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 1877
                    self.match(XplorMRParser.Equ_op)


                self.state = 1880
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.Print]:
                self.enterOuterAlt(localctx, 8)
                self.state = 1881
                self.match(XplorMRParser.Print)
                self.state = 1882
                self.match(XplorMRParser.Threshold)
                self.state = 1883
                self.number_s()
                self.state = 1890
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [XplorMRParser.All]:
                    self.state = 1884
                    self.match(XplorMRParser.All)
                    pass
                elif token in [XplorMRParser.Classification]:
                    self.state = 1885
                    self.match(XplorMRParser.Classification)
                    self.state = 1887
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==XplorMRParser.Equ_op:
                        self.state = 1886
                        self.match(XplorMRParser.Equ_op)


                    self.state = 1889
                    self.match(XplorMRParser.Simple_name)
                    pass
                else:
                    raise NoViableAltException(self)

                pass
            elif token in [XplorMRParser.Reset]:
                self.enterOuterAlt(localctx, 9)
                self.state = 1892
                self.match(XplorMRParser.Reset)
                pass
            elif token in [XplorMRParser.Save]:
                self.enterOuterAlt(localctx, 10)
                self.state = 1893
                self.match(XplorMRParser.Save)
                self.state = 1894
                self.match(XplorMRParser.Simple_name)
                pass
            elif token in [XplorMRParser.Fmed]:
                self.enterOuterAlt(localctx, 11)
                self.state = 1895
                self.match(XplorMRParser.Fmed)
                self.state = 1896
                self.number_s()
                self.state = 1897
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.ErrOn]:
                self.enterOuterAlt(localctx, 12)
                self.state = 1899
                self.match(XplorMRParser.ErrOn)
                pass
            elif token in [XplorMRParser.ErrOff]:
                self.enterOuterAlt(localctx, 13)
                self.state = 1900
                self.match(XplorMRParser.ErrOff)
                pass
            elif token in [XplorMRParser.Fon]:
                self.enterOuterAlt(localctx, 14)
                self.state = 1901
                self.match(XplorMRParser.Fon)
                pass
            elif token in [XplorMRParser.Foff]:
                self.enterOuterAlt(localctx, 15)
                self.state = 1902
                self.match(XplorMRParser.Foff)
                pass
            elif token in [XplorMRParser.Son]:
                self.enterOuterAlt(localctx, 16)
                self.state = 1903
                self.match(XplorMRParser.Son)
                pass
            elif token in [XplorMRParser.Soff]:
                self.enterOuterAlt(localctx, 17)
                self.state = 1904
                self.match(XplorMRParser.Soff)
                pass
            elif token in [XplorMRParser.Frun]:
                self.enterOuterAlt(localctx, 18)
                self.state = 1905
                self.match(XplorMRParser.Frun)
                self.state = 1906
                self.match(XplorMRParser.Integer)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pcs_assignContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Assign(self):
            return self.getToken(XplorMRParser.Assign, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.SelectionContext,i)


        def number(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.NumberContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.NumberContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_pcs_assign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPcs_assign" ):
                listener.enterPcs_assign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPcs_assign" ):
                listener.exitPcs_assign(self)




    def pcs_assign(self):

        localctx = XplorMRParser.Pcs_assignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 160, self.RULE_pcs_assign)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1909
            self.match(XplorMRParser.Assign)
            self.state = 1910
            self.selection()
            self.state = 1911
            self.selection()
            self.state = 1912
            self.selection()
            self.state = 1913
            self.selection()
            self.state = 1914
            self.selection()
            self.state = 1915
            self.number()
            self.state = 1917
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,209,self._ctx)
            if la_ == 1:
                self.state = 1916
                self.number()


            self.state = 1920
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 192)) & ~0x3f) == 0 and ((1 << (_la - 192)) & ((1 << (XplorMRParser.Integer - 192)) | (1 << (XplorMRParser.Real - 192)) | (1 << (XplorMRParser.Symbol_name - 192)))) != 0):
                self.state = 1919
                self.number()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Prdc_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def prdc_assign(self):
            return self.getTypedRuleContext(XplorMRParser.Prdc_assignContext,0)


        def Classification(self):
            return self.getToken(XplorMRParser.Classification, 0)

        def Simple_name(self):
            return self.getToken(XplorMRParser.Simple_name, 0)

        def Equ_op(self):
            return self.getToken(XplorMRParser.Equ_op, 0)

        def Tolerance(self):
            return self.getToken(XplorMRParser.Tolerance, 0)

        def Integer(self):
            return self.getToken(XplorMRParser.Integer, 0)

        def Coefficients(self):
            return self.getToken(XplorMRParser.Coefficients, 0)

        def number_s(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Number_sContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Number_sContext,i)


        def ForceConstant(self):
            return self.getToken(XplorMRParser.ForceConstant, 0)

        def Nrestraints(self):
            return self.getToken(XplorMRParser.Nrestraints, 0)

        def ErrOn(self):
            return self.getToken(XplorMRParser.ErrOn, 0)

        def ErrOff(self):
            return self.getToken(XplorMRParser.ErrOff, 0)

        def Fmed(self):
            return self.getToken(XplorMRParser.Fmed, 0)

        def Fon(self):
            return self.getToken(XplorMRParser.Fon, 0)

        def Foff(self):
            return self.getToken(XplorMRParser.Foff, 0)

        def Frun(self):
            return self.getToken(XplorMRParser.Frun, 0)

        def Print(self):
            return self.getToken(XplorMRParser.Print, 0)

        def Threshold(self):
            return self.getToken(XplorMRParser.Threshold, 0)

        def Reset(self):
            return self.getToken(XplorMRParser.Reset, 0)

        def Save(self):
            return self.getToken(XplorMRParser.Save, 0)

        def Son(self):
            return self.getToken(XplorMRParser.Son, 0)

        def Soff(self):
            return self.getToken(XplorMRParser.Soff, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_prdc_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrdc_statement" ):
                listener.enterPrdc_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrdc_statement" ):
                listener.exitPrdc_statement(self)




    def prdc_statement(self):

        localctx = XplorMRParser.Prdc_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 162, self.RULE_prdc_statement)
        self._la = 0 # Token type
        try:
            self.state = 1957
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [XplorMRParser.Assign]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1922
                self.prdc_assign()
                pass
            elif token in [XplorMRParser.Classification]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1923
                self.match(XplorMRParser.Classification)
                self.state = 1925
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 1924
                    self.match(XplorMRParser.Equ_op)


                self.state = 1927
                self.match(XplorMRParser.Simple_name)
                pass
            elif token in [XplorMRParser.Tolerance]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1928
                self.match(XplorMRParser.Tolerance)
                self.state = 1929
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.Coefficients]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1930
                self.match(XplorMRParser.Coefficients)
                self.state = 1931
                self.number_s()
                self.state = 1932
                self.number_s()
                pass
            elif token in [XplorMRParser.ForceConstant]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1934
                self.match(XplorMRParser.ForceConstant)
                self.state = 1936
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 1935
                    self.match(XplorMRParser.Equ_op)


                self.state = 1938
                self.number_s()
                pass
            elif token in [XplorMRParser.Nrestraints]:
                self.enterOuterAlt(localctx, 6)
                self.state = 1939
                self.match(XplorMRParser.Nrestraints)
                self.state = 1941
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 1940
                    self.match(XplorMRParser.Equ_op)


                self.state = 1943
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.ErrOn]:
                self.enterOuterAlt(localctx, 7)
                self.state = 1944
                self.match(XplorMRParser.ErrOn)
                pass
            elif token in [XplorMRParser.ErrOff]:
                self.enterOuterAlt(localctx, 8)
                self.state = 1945
                self.match(XplorMRParser.ErrOff)
                pass
            elif token in [XplorMRParser.Fmed]:
                self.enterOuterAlt(localctx, 9)
                self.state = 1946
                self.match(XplorMRParser.Fmed)
                pass
            elif token in [XplorMRParser.Fon]:
                self.enterOuterAlt(localctx, 10)
                self.state = 1947
                self.match(XplorMRParser.Fon)
                pass
            elif token in [XplorMRParser.Foff]:
                self.enterOuterAlt(localctx, 11)
                self.state = 1948
                self.match(XplorMRParser.Foff)
                pass
            elif token in [XplorMRParser.Frun]:
                self.enterOuterAlt(localctx, 12)
                self.state = 1949
                self.match(XplorMRParser.Frun)
                pass
            elif token in [XplorMRParser.Print]:
                self.enterOuterAlt(localctx, 13)
                self.state = 1950
                self.match(XplorMRParser.Print)
                self.state = 1951
                self.match(XplorMRParser.Threshold)
                pass
            elif token in [XplorMRParser.Reset]:
                self.enterOuterAlt(localctx, 14)
                self.state = 1952
                self.match(XplorMRParser.Reset)
                pass
            elif token in [XplorMRParser.Save]:
                self.enterOuterAlt(localctx, 15)
                self.state = 1953
                self.match(XplorMRParser.Save)
                self.state = 1954
                self.match(XplorMRParser.Simple_name)
                pass
            elif token in [XplorMRParser.Son]:
                self.enterOuterAlt(localctx, 16)
                self.state = 1955
                self.match(XplorMRParser.Son)
                pass
            elif token in [XplorMRParser.Soff]:
                self.enterOuterAlt(localctx, 17)
                self.state = 1956
                self.match(XplorMRParser.Soff)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Prdc_assignContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Assign(self):
            return self.getToken(XplorMRParser.Assign, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.SelectionContext,i)


        def number(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.NumberContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.NumberContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_prdc_assign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrdc_assign" ):
                listener.enterPrdc_assign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrdc_assign" ):
                listener.exitPrdc_assign(self)




    def prdc_assign(self):

        localctx = XplorMRParser.Prdc_assignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 164, self.RULE_prdc_assign)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1959
            self.match(XplorMRParser.Assign)
            self.state = 1960
            self.selection()
            self.state = 1961
            self.selection()
            self.state = 1962
            self.selection()
            self.state = 1963
            self.selection()
            self.state = 1964
            self.selection()
            self.state = 1965
            self.selection()
            self.state = 1966
            self.number()
            self.state = 1968
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 192)) & ~0x3f) == 0 and ((1 << (_la - 192)) & ((1 << (XplorMRParser.Integer - 192)) | (1 << (XplorMRParser.Real - 192)) | (1 << (XplorMRParser.Symbol_name - 192)))) != 0):
                self.state = 1967
                self.number()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Porientation_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def porientation_assign(self):
            return self.getTypedRuleContext(XplorMRParser.Porientation_assignContext,0)


        def Classification(self):
            return self.getToken(XplorMRParser.Classification, 0)

        def Simple_name(self):
            return self.getToken(XplorMRParser.Simple_name, 0)

        def Equ_op(self):
            return self.getToken(XplorMRParser.Equ_op, 0)

        def ForceConstant(self):
            return self.getToken(XplorMRParser.ForceConstant, 0)

        def number_s(self):
            return self.getTypedRuleContext(XplorMRParser.Number_sContext,0)


        def Nrestraints(self):
            return self.getToken(XplorMRParser.Nrestraints, 0)

        def Integer(self):
            return self.getToken(XplorMRParser.Integer, 0)

        def Print(self):
            return self.getToken(XplorMRParser.Print, 0)

        def Threshold(self):
            return self.getToken(XplorMRParser.Threshold, 0)

        def Reset(self):
            return self.getToken(XplorMRParser.Reset, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_porientation_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPorientation_statement" ):
                listener.enterPorientation_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPorientation_statement" ):
                listener.exitPorientation_statement(self)




    def porientation_statement(self):

        localctx = XplorMRParser.Porientation_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 166, self.RULE_porientation_statement)
        self._la = 0 # Token type
        try:
            self.state = 1990
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [XplorMRParser.Assign]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1970
                self.porientation_assign()
                pass
            elif token in [XplorMRParser.Classification]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1971
                self.match(XplorMRParser.Classification)
                self.state = 1973
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 1972
                    self.match(XplorMRParser.Equ_op)


                self.state = 1975
                self.match(XplorMRParser.Simple_name)
                pass
            elif token in [XplorMRParser.ForceConstant]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1976
                self.match(XplorMRParser.ForceConstant)
                self.state = 1978
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 1977
                    self.match(XplorMRParser.Equ_op)


                self.state = 1980
                self.number_s()
                pass
            elif token in [XplorMRParser.Nrestraints]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1981
                self.match(XplorMRParser.Nrestraints)
                self.state = 1983
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 1982
                    self.match(XplorMRParser.Equ_op)


                self.state = 1985
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.Print]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1986
                self.match(XplorMRParser.Print)
                self.state = 1987
                self.match(XplorMRParser.Threshold)
                self.state = 1988
                self.number_s()
                pass
            elif token in [XplorMRParser.Reset]:
                self.enterOuterAlt(localctx, 6)
                self.state = 1989
                self.match(XplorMRParser.Reset)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Porientation_assignContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Assign(self):
            return self.getToken(XplorMRParser.Assign, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.SelectionContext,i)


        def number(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.NumberContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.NumberContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_porientation_assign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPorientation_assign" ):
                listener.enterPorientation_assign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPorientation_assign" ):
                listener.exitPorientation_assign(self)




    def porientation_assign(self):

        localctx = XplorMRParser.Porientation_assignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 168, self.RULE_porientation_assign)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1992
            self.match(XplorMRParser.Assign)
            self.state = 1993
            self.selection()
            self.state = 1994
            self.selection()
            self.state = 1995
            self.number()
            self.state = 1996
            self.number()
            self.state = 1997
            self.number()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pccr_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def pccr_assign(self):
            return self.getTypedRuleContext(XplorMRParser.Pccr_assignContext,0)


        def Classification(self):
            return self.getToken(XplorMRParser.Classification, 0)

        def Simple_name(self):
            return self.getToken(XplorMRParser.Simple_name, 0)

        def Equ_op(self):
            return self.getToken(XplorMRParser.Equ_op, 0)

        def Weip(self):
            return self.getToken(XplorMRParser.Weip, 0)

        def Integer(self):
            return self.getToken(XplorMRParser.Integer, 0)

        def Coefficients(self):
            return self.getToken(XplorMRParser.Coefficients, 0)

        def number_s(self):
            return self.getTypedRuleContext(XplorMRParser.Number_sContext,0)


        def ForceConstant(self):
            return self.getToken(XplorMRParser.ForceConstant, 0)

        def Nrestraints(self):
            return self.getToken(XplorMRParser.Nrestraints, 0)

        def Print(self):
            return self.getToken(XplorMRParser.Print, 0)

        def Threshold(self):
            return self.getToken(XplorMRParser.Threshold, 0)

        def Reset(self):
            return self.getToken(XplorMRParser.Reset, 0)

        def Frun(self):
            return self.getToken(XplorMRParser.Frun, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_pccr_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPccr_statement" ):
                listener.enterPccr_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPccr_statement" ):
                listener.exitPccr_statement(self)




    def pccr_statement(self):

        localctx = XplorMRParser.Pccr_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 170, self.RULE_pccr_statement)
        self._la = 0 # Token type
        try:
            self.state = 2025
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [XplorMRParser.Assign]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1999
                self.pccr_assign()
                pass
            elif token in [XplorMRParser.Classification]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2000
                self.match(XplorMRParser.Classification)
                self.state = 2002
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 2001
                    self.match(XplorMRParser.Equ_op)


                self.state = 2004
                self.match(XplorMRParser.Simple_name)
                pass
            elif token in [XplorMRParser.Weip]:
                self.enterOuterAlt(localctx, 3)
                self.state = 2005
                self.match(XplorMRParser.Weip)
                self.state = 2006
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.Coefficients]:
                self.enterOuterAlt(localctx, 4)
                self.state = 2007
                self.match(XplorMRParser.Coefficients)
                self.state = 2008
                self.number_s()
                pass
            elif token in [XplorMRParser.ForceConstant]:
                self.enterOuterAlt(localctx, 5)
                self.state = 2009
                self.match(XplorMRParser.ForceConstant)
                self.state = 2011
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 2010
                    self.match(XplorMRParser.Equ_op)


                self.state = 2013
                self.number_s()
                pass
            elif token in [XplorMRParser.Nrestraints]:
                self.enterOuterAlt(localctx, 6)
                self.state = 2014
                self.match(XplorMRParser.Nrestraints)
                self.state = 2016
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 2015
                    self.match(XplorMRParser.Equ_op)


                self.state = 2018
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.Print]:
                self.enterOuterAlt(localctx, 7)
                self.state = 2019
                self.match(XplorMRParser.Print)
                self.state = 2020
                self.match(XplorMRParser.Threshold)
                self.state = 2021
                self.number_s()
                pass
            elif token in [XplorMRParser.Reset]:
                self.enterOuterAlt(localctx, 8)
                self.state = 2022
                self.match(XplorMRParser.Reset)
                pass
            elif token in [XplorMRParser.Frun]:
                self.enterOuterAlt(localctx, 9)
                self.state = 2023
                self.match(XplorMRParser.Frun)
                self.state = 2024
                self.match(XplorMRParser.Integer)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pccr_assignContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Assign(self):
            return self.getToken(XplorMRParser.Assign, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.SelectionContext,i)


        def number(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.NumberContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.NumberContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_pccr_assign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPccr_assign" ):
                listener.enterPccr_assign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPccr_assign" ):
                listener.exitPccr_assign(self)




    def pccr_assign(self):

        localctx = XplorMRParser.Pccr_assignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 172, self.RULE_pccr_assign)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2027
            self.match(XplorMRParser.Assign)
            self.state = 2028
            self.selection()
            self.state = 2029
            self.selection()
            self.state = 2030
            self.selection()
            self.state = 2031
            self.number()
            self.state = 2033
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 192)) & ~0x3f) == 0 and ((1 << (_la - 192)) & ((1 << (XplorMRParser.Integer - 192)) | (1 << (XplorMRParser.Real - 192)) | (1 << (XplorMRParser.Symbol_name - 192)))) != 0):
                self.state = 2032
                self.number()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Hbond_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def hbond_assign(self):
            return self.getTypedRuleContext(XplorMRParser.Hbond_assignContext,0)


        def hbond_assign_loop(self):
            return self.getTypedRuleContext(XplorMRParser.Hbond_assign_loopContext,0)


        def Classification(self):
            return self.getToken(XplorMRParser.Classification, 0)

        def Simple_name(self):
            return self.getToken(XplorMRParser.Simple_name, 0)

        def Equ_op(self):
            return self.getToken(XplorMRParser.Equ_op, 0)

        def ForceConstant(self):
            return self.getToken(XplorMRParser.ForceConstant, 0)

        def number_s(self):
            return self.getTypedRuleContext(XplorMRParser.Number_sContext,0)


        def Nrestraints(self):
            return self.getToken(XplorMRParser.Nrestraints, 0)

        def Integer(self):
            return self.getToken(XplorMRParser.Integer, 0)

        def Print(self):
            return self.getToken(XplorMRParser.Print, 0)

        def Threshold(self):
            return self.getToken(XplorMRParser.Threshold, 0)

        def Reset(self):
            return self.getToken(XplorMRParser.Reset, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_hbond_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHbond_statement" ):
                listener.enterHbond_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHbond_statement" ):
                listener.exitHbond_statement(self)




    def hbond_statement(self):

        localctx = XplorMRParser.Hbond_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 174, self.RULE_hbond_statement)
        self._la = 0 # Token type
        try:
            self.state = 2056
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [XplorMRParser.Assign]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2035
                self.hbond_assign()
                pass
            elif token in [XplorMRParser.For]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2036
                self.hbond_assign_loop()
                pass
            elif token in [XplorMRParser.Classification]:
                self.enterOuterAlt(localctx, 3)
                self.state = 2037
                self.match(XplorMRParser.Classification)
                self.state = 2039
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 2038
                    self.match(XplorMRParser.Equ_op)


                self.state = 2041
                self.match(XplorMRParser.Simple_name)
                pass
            elif token in [XplorMRParser.ForceConstant]:
                self.enterOuterAlt(localctx, 4)
                self.state = 2042
                self.match(XplorMRParser.ForceConstant)
                self.state = 2044
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 2043
                    self.match(XplorMRParser.Equ_op)


                self.state = 2046
                self.number_s()
                pass
            elif token in [XplorMRParser.Nrestraints]:
                self.enterOuterAlt(localctx, 5)
                self.state = 2047
                self.match(XplorMRParser.Nrestraints)
                self.state = 2049
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 2048
                    self.match(XplorMRParser.Equ_op)


                self.state = 2051
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.Print]:
                self.enterOuterAlt(localctx, 6)
                self.state = 2052
                self.match(XplorMRParser.Print)
                self.state = 2053
                self.match(XplorMRParser.Threshold)
                self.state = 2054
                self.number_s()
                pass
            elif token in [XplorMRParser.Reset]:
                self.enterOuterAlt(localctx, 7)
                self.state = 2055
                self.match(XplorMRParser.Reset)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Hbond_assignContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Assign(self):
            return self.getToken(XplorMRParser.Assign, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.SelectionContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_hbond_assign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHbond_assign" ):
                listener.enterHbond_assign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHbond_assign" ):
                listener.exitHbond_assign(self)




    def hbond_assign(self):

        localctx = XplorMRParser.Hbond_assignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 176, self.RULE_hbond_assign)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2058
            self.match(XplorMRParser.Assign)
            self.state = 2059
            self.selection()
            self.state = 2060
            self.selection()
            self.state = 2061
            self.selection()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Hbond_db_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def hbond_db_assign(self):
            return self.getTypedRuleContext(XplorMRParser.Hbond_db_assignContext,0)


        def hbond_db_assign_loop(self):
            return self.getTypedRuleContext(XplorMRParser.Hbond_db_assign_loopContext,0)


        def Kdir(self):
            return self.getToken(XplorMRParser.Kdir, 0)

        def number_s(self):
            return self.getTypedRuleContext(XplorMRParser.Number_sContext,0)


        def Equ_op(self):
            return self.getToken(XplorMRParser.Equ_op, 0)

        def Klin(self):
            return self.getToken(XplorMRParser.Klin, 0)

        def Nseg(self):
            return self.getToken(XplorMRParser.Nseg, 0)

        def Integer(self):
            return self.getToken(XplorMRParser.Integer, 0)

        def Nmin(self):
            return self.getToken(XplorMRParser.Nmin, 0)

        def Nmax(self):
            return self.getToken(XplorMRParser.Nmax, 0)

        def Segm(self):
            return self.getToken(XplorMRParser.Segm, 0)

        def Simple_name(self):
            return self.getToken(XplorMRParser.Simple_name, 0)

        def Ohcut(self):
            return self.getToken(XplorMRParser.Ohcut, 0)

        def Coh1cut(self):
            return self.getToken(XplorMRParser.Coh1cut, 0)

        def Coh2cut(self):
            return self.getToken(XplorMRParser.Coh2cut, 0)

        def Ohncut(self):
            return self.getToken(XplorMRParser.Ohncut, 0)

        def Updfrq(self):
            return self.getToken(XplorMRParser.Updfrq, 0)

        def Prnfrq(self):
            return self.getToken(XplorMRParser.Prnfrq, 0)

        def Freemode(self):
            return self.getToken(XplorMRParser.Freemode, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_hbond_db_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHbond_db_statement" ):
                listener.enterHbond_db_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHbond_db_statement" ):
                listener.exitHbond_db_statement(self)




    def hbond_db_statement(self):

        localctx = XplorMRParser.Hbond_db_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 178, self.RULE_hbond_db_statement)
        self._la = 0 # Token type
        try:
            self.state = 2130
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [XplorMRParser.Assign]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2063
                self.hbond_db_assign()
                pass
            elif token in [XplorMRParser.For]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2064
                self.hbond_db_assign_loop()
                pass
            elif token in [XplorMRParser.Kdir]:
                self.enterOuterAlt(localctx, 3)
                self.state = 2065
                self.match(XplorMRParser.Kdir)
                self.state = 2067
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 2066
                    self.match(XplorMRParser.Equ_op)


                self.state = 2069
                self.number_s()
                pass
            elif token in [XplorMRParser.Klin]:
                self.enterOuterAlt(localctx, 4)
                self.state = 2070
                self.match(XplorMRParser.Klin)
                self.state = 2072
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 2071
                    self.match(XplorMRParser.Equ_op)


                self.state = 2074
                self.number_s()
                pass
            elif token in [XplorMRParser.Nseg]:
                self.enterOuterAlt(localctx, 5)
                self.state = 2075
                self.match(XplorMRParser.Nseg)
                self.state = 2077
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 2076
                    self.match(XplorMRParser.Equ_op)


                self.state = 2079
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.Nmin]:
                self.enterOuterAlt(localctx, 6)
                self.state = 2080
                self.match(XplorMRParser.Nmin)
                self.state = 2082
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 2081
                    self.match(XplorMRParser.Equ_op)


                self.state = 2084
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.Nmax]:
                self.enterOuterAlt(localctx, 7)
                self.state = 2085
                self.match(XplorMRParser.Nmax)
                self.state = 2087
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 2086
                    self.match(XplorMRParser.Equ_op)


                self.state = 2089
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.Segm]:
                self.enterOuterAlt(localctx, 8)
                self.state = 2090
                self.match(XplorMRParser.Segm)
                self.state = 2092
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 2091
                    self.match(XplorMRParser.Equ_op)


                self.state = 2094
                self.match(XplorMRParser.Simple_name)
                pass
            elif token in [XplorMRParser.Ohcut]:
                self.enterOuterAlt(localctx, 9)
                self.state = 2095
                self.match(XplorMRParser.Ohcut)
                self.state = 2097
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 2096
                    self.match(XplorMRParser.Equ_op)


                self.state = 2099
                self.number_s()
                pass
            elif token in [XplorMRParser.Coh1cut]:
                self.enterOuterAlt(localctx, 10)
                self.state = 2100
                self.match(XplorMRParser.Coh1cut)
                self.state = 2102
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 2101
                    self.match(XplorMRParser.Equ_op)


                self.state = 2104
                self.number_s()
                pass
            elif token in [XplorMRParser.Coh2cut]:
                self.enterOuterAlt(localctx, 11)
                self.state = 2105
                self.match(XplorMRParser.Coh2cut)
                self.state = 2107
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 2106
                    self.match(XplorMRParser.Equ_op)


                self.state = 2109
                self.number_s()
                pass
            elif token in [XplorMRParser.Ohncut]:
                self.enterOuterAlt(localctx, 12)
                self.state = 2110
                self.match(XplorMRParser.Ohncut)
                self.state = 2112
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 2111
                    self.match(XplorMRParser.Equ_op)


                self.state = 2114
                self.number_s()
                pass
            elif token in [XplorMRParser.Updfrq]:
                self.enterOuterAlt(localctx, 13)
                self.state = 2115
                self.match(XplorMRParser.Updfrq)
                self.state = 2117
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 2116
                    self.match(XplorMRParser.Equ_op)


                self.state = 2119
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.Prnfrq]:
                self.enterOuterAlt(localctx, 14)
                self.state = 2120
                self.match(XplorMRParser.Prnfrq)
                self.state = 2122
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 2121
                    self.match(XplorMRParser.Equ_op)


                self.state = 2124
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.Freemode]:
                self.enterOuterAlt(localctx, 15)
                self.state = 2125
                self.match(XplorMRParser.Freemode)
                self.state = 2127
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 2126
                    self.match(XplorMRParser.Equ_op)


                self.state = 2129
                self.match(XplorMRParser.Integer)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Hbond_db_assignContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Assign(self):
            return self.getToken(XplorMRParser.Assign, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.SelectionContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_hbond_db_assign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHbond_db_assign" ):
                listener.enterHbond_db_assign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHbond_db_assign" ):
                listener.exitHbond_db_assign(self)




    def hbond_db_assign(self):

        localctx = XplorMRParser.Hbond_db_assignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 180, self.RULE_hbond_db_assign)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2132
            self.match(XplorMRParser.Assign)
            self.state = 2133
            self.selection()
            self.state = 2134
            self.selection()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Ncs_restraintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Ncs(self):
            return self.getToken(XplorMRParser.Ncs, 0)

        def Restraints(self):
            return self.getToken(XplorMRParser.Restraints, 0)

        def End(self):
            return self.getToken(XplorMRParser.End, 0)

        def ncs_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Ncs_statementContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Ncs_statementContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_ncs_restraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNcs_restraint" ):
                listener.enterNcs_restraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNcs_restraint" ):
                listener.exitNcs_restraint(self)




    def ncs_restraint(self):

        localctx = XplorMRParser.Ncs_restraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 182, self.RULE_ncs_restraint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2136
            self.match(XplorMRParser.Ncs)
            self.state = 2137
            self.match(XplorMRParser.Restraints)
            self.state = 2141
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << XplorMRParser.Print_any) | (1 << XplorMRParser.Group) | (1 << XplorMRParser.Initialize))) != 0):
                self.state = 2138
                self.ncs_statement()
                self.state = 2143
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2144
            self.match(XplorMRParser.End)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Ncs_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Group(self):
            return self.getToken(XplorMRParser.Group, 0)

        def End(self):
            return self.getToken(XplorMRParser.End, 0)

        def ncs_group_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Ncs_group_statementContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Ncs_group_statementContext,i)


        def Initialize(self):
            return self.getToken(XplorMRParser.Initialize, 0)

        def Print_any(self):
            return self.getToken(XplorMRParser.Print_any, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_ncs_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNcs_statement" ):
                listener.enterNcs_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNcs_statement" ):
                listener.exitNcs_statement(self)




    def ncs_statement(self):

        localctx = XplorMRParser.Ncs_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 184, self.RULE_ncs_statement)
        self._la = 0 # Token type
        try:
            self.state = 2156
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [XplorMRParser.Group]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2146
                self.match(XplorMRParser.Group)
                self.state = 2150
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==XplorMRParser.Weight or _la==XplorMRParser.Equivalence or _la==XplorMRParser.Sigb:
                    self.state = 2147
                    self.ncs_group_statement()
                    self.state = 2152
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 2153
                self.match(XplorMRParser.End)
                pass
            elif token in [XplorMRParser.Initialize]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2154
                self.match(XplorMRParser.Initialize)
                pass
            elif token in [XplorMRParser.Print_any]:
                self.enterOuterAlt(localctx, 3)
                self.state = 2155
                self.match(XplorMRParser.Print_any)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Ncs_group_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Equivalence(self):
            return self.getToken(XplorMRParser.Equivalence, 0)

        def selection(self):
            return self.getTypedRuleContext(XplorMRParser.SelectionContext,0)


        def Equ_op(self):
            return self.getToken(XplorMRParser.Equ_op, 0)

        def Sigb(self):
            return self.getToken(XplorMRParser.Sigb, 0)

        def number_s(self):
            return self.getTypedRuleContext(XplorMRParser.Number_sContext,0)


        def Weight(self):
            return self.getToken(XplorMRParser.Weight, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_ncs_group_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNcs_group_statement" ):
                listener.enterNcs_group_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNcs_group_statement" ):
                listener.exitNcs_group_statement(self)




    def ncs_group_statement(self):

        localctx = XplorMRParser.Ncs_group_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 186, self.RULE_ncs_group_statement)
        self._la = 0 # Token type
        try:
            self.state = 2173
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [XplorMRParser.Equivalence]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2158
                self.match(XplorMRParser.Equivalence)
                self.state = 2160
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 2159
                    self.match(XplorMRParser.Equ_op)


                self.state = 2162
                self.selection()
                pass
            elif token in [XplorMRParser.Sigb]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2163
                self.match(XplorMRParser.Sigb)
                self.state = 2165
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 2164
                    self.match(XplorMRParser.Equ_op)


                self.state = 2167
                self.number_s()
                pass
            elif token in [XplorMRParser.Weight]:
                self.enterOuterAlt(localctx, 3)
                self.state = 2168
                self.match(XplorMRParser.Weight)
                self.state = 2170
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 2169
                    self.match(XplorMRParser.Equ_op)


                self.state = 2172
                self.number_s()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SelectionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def L_paren(self):
            return self.getToken(XplorMRParser.L_paren, 0)

        def selection_expression(self):
            return self.getTypedRuleContext(XplorMRParser.Selection_expressionContext,0)


        def R_paren(self):
            return self.getToken(XplorMRParser.R_paren, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_selection

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSelection" ):
                listener.enterSelection(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSelection" ):
                listener.exitSelection(self)




    def selection(self):

        localctx = XplorMRParser.SelectionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 188, self.RULE_selection)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2175
            self.match(XplorMRParser.L_paren)
            self.state = 2176
            self.selection_expression()
            self.state = 2177
            self.match(XplorMRParser.R_paren)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Selection_expressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def term(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.TermContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.TermContext,i)


        def Or_op(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Or_op)
            else:
                return self.getToken(XplorMRParser.Or_op, i)

        def getRuleIndex(self):
            return XplorMRParser.RULE_selection_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSelection_expression" ):
                listener.enterSelection_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSelection_expression" ):
                listener.exitSelection_expression(self)




    def selection_expression(self):

        localctx = XplorMRParser.Selection_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 190, self.RULE_selection_expression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2179
            self.term()
            self.state = 2184
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==XplorMRParser.Or_op:
                self.state = 2180
                self.match(XplorMRParser.Or_op)
                self.state = 2181
                self.term()
                self.state = 2186
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TermContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def factor(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.FactorContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.FactorContext,i)


        def And_op(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.And_op)
            else:
                return self.getToken(XplorMRParser.And_op, i)

        def getRuleIndex(self):
            return XplorMRParser.RULE_term

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTerm" ):
                listener.enterTerm(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTerm" ):
                listener.exitTerm(self)




    def term(self):

        localctx = XplorMRParser.TermContext(self, self._ctx, self.state)
        self.enterRule(localctx, 192, self.RULE_term)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2187
            self.factor(0)
            self.state = 2192
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==XplorMRParser.And_op:
                self.state = 2188
                self.match(XplorMRParser.And_op)
                self.state = 2189
                self.factor(0)
                self.state = 2194
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FactorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def L_paren(self):
            return self.getToken(XplorMRParser.L_paren, 0)

        def selection_expression(self):
            return self.getTypedRuleContext(XplorMRParser.Selection_expressionContext,0)


        def R_paren(self):
            return self.getToken(XplorMRParser.R_paren, 0)

        def All(self):
            return self.getToken(XplorMRParser.All, 0)

        def Atom(self):
            return self.getToken(XplorMRParser.Atom, 0)

        def Simple_names(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Simple_names)
            else:
                return self.getToken(XplorMRParser.Simple_names, i)

        def Simple_name(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Simple_name)
            else:
                return self.getToken(XplorMRParser.Simple_name, i)

        def Integers(self):
            return self.getToken(XplorMRParser.Integers, 0)

        def Integer(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Integer)
            else:
                return self.getToken(XplorMRParser.Integer, i)

        def Attribute(self):
            return self.getToken(XplorMRParser.Attribute, 0)

        def Attr_properties(self):
            return self.getToken(XplorMRParser.Attr_properties, 0)

        def Comparison_ops(self):
            return self.getToken(XplorMRParser.Comparison_ops, 0)

        def number_f(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Number_fContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Number_fContext,i)


        def Abs(self):
            return self.getToken(XplorMRParser.Abs, 0)

        def BondedTo(self):
            return self.getToken(XplorMRParser.BondedTo, 0)

        def factor(self):
            return self.getTypedRuleContext(XplorMRParser.FactorContext,0)


        def ByGroup(self):
            return self.getToken(XplorMRParser.ByGroup, 0)

        def ByRes(self):
            return self.getToken(XplorMRParser.ByRes, 0)

        def Chemical(self):
            return self.getToken(XplorMRParser.Chemical, 0)

        def Symbol_name(self):
            return self.getToken(XplorMRParser.Symbol_name, 0)

        def Colon(self):
            return self.getToken(XplorMRParser.Colon, 0)

        def Hydrogen(self):
            return self.getToken(XplorMRParser.Hydrogen, 0)

        def Id(self):
            return self.getToken(XplorMRParser.Id, 0)

        def Known(self):
            return self.getToken(XplorMRParser.Known, 0)

        def Name(self):
            return self.getToken(XplorMRParser.Name, 0)

        def Double_quote_string(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Double_quote_string)
            else:
                return self.getToken(XplorMRParser.Double_quote_string, i)

        def Not_op(self):
            return self.getToken(XplorMRParser.Not_op, 0)

        def Point(self):
            return self.getToken(XplorMRParser.Point, 0)

        def Cut(self):
            return self.getToken(XplorMRParser.Cut, 0)

        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Comma)
            else:
                return self.getToken(XplorMRParser.Comma, i)

        def Tail(self):
            return self.getToken(XplorMRParser.Tail, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.SelectionContext,i)


        def Equ_op(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Equ_op)
            else:
                return self.getToken(XplorMRParser.Equ_op, i)

        def Head(self):
            return self.getToken(XplorMRParser.Head, 0)

        def Previous(self):
            return self.getToken(XplorMRParser.Previous, 0)

        def Pseudo(self):
            return self.getToken(XplorMRParser.Pseudo, 0)

        def Residue(self):
            return self.getToken(XplorMRParser.Residue, 0)

        def Resname(self):
            return self.getToken(XplorMRParser.Resname, 0)

        def SegIdentifier(self):
            return self.getToken(XplorMRParser.SegIdentifier, 0)

        def Store1(self):
            return self.getToken(XplorMRParser.Store1, 0)

        def Store2(self):
            return self.getToken(XplorMRParser.Store2, 0)

        def Store3(self):
            return self.getToken(XplorMRParser.Store3, 0)

        def Store4(self):
            return self.getToken(XplorMRParser.Store4, 0)

        def Store5(self):
            return self.getToken(XplorMRParser.Store5, 0)

        def Store6(self):
            return self.getToken(XplorMRParser.Store6, 0)

        def Store7(self):
            return self.getToken(XplorMRParser.Store7, 0)

        def Store8(self):
            return self.getToken(XplorMRParser.Store8, 0)

        def Store9(self):
            return self.getToken(XplorMRParser.Store9, 0)

        def Tag(self):
            return self.getToken(XplorMRParser.Tag, 0)

        def Donor(self):
            return self.getToken(XplorMRParser.Donor, 0)

        def Acceptor(self):
            return self.getToken(XplorMRParser.Acceptor, 0)

        def Around(self):
            return self.getToken(XplorMRParser.Around, 0)

        def Saround(self):
            return self.getToken(XplorMRParser.Saround, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_factor

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFactor" ):
                listener.enterFactor(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFactor" ):
                listener.exitFactor(self)



    def factor(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = XplorMRParser.FactorContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 194
        self.enterRecursionRule(localctx, 194, self.RULE_factor, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2334
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,271,self._ctx)
            if la_ == 1:
                self.state = 2196
                self.match(XplorMRParser.L_paren)
                self.state = 2197
                self.selection_expression()
                self.state = 2198
                self.match(XplorMRParser.R_paren)
                pass

            elif la_ == 2:
                self.state = 2200
                self.match(XplorMRParser.All)
                pass

            elif la_ == 3:
                self.state = 2201
                self.match(XplorMRParser.Atom)
                self.state = 2202
                _la = self._input.LA(1)
                if not(_la==XplorMRParser.Simple_name or _la==XplorMRParser.Simple_names):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 2203
                _la = self._input.LA(1)
                if not(_la==XplorMRParser.Integer or _la==XplorMRParser.Integers):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 2204
                _la = self._input.LA(1)
                if not(_la==XplorMRParser.Simple_name or _la==XplorMRParser.Simple_names):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass

            elif la_ == 4:
                self.state = 2205
                self.match(XplorMRParser.Attribute)
                self.state = 2207
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Abs:
                    self.state = 2206
                    self.match(XplorMRParser.Abs)


                self.state = 2209
                self.match(XplorMRParser.Attr_properties)
                self.state = 2210
                self.match(XplorMRParser.Comparison_ops)
                self.state = 2211
                self.number_f()
                pass

            elif la_ == 5:
                self.state = 2212
                self.match(XplorMRParser.BondedTo)
                self.state = 2213
                self.factor(29)
                pass

            elif la_ == 6:
                self.state = 2214
                self.match(XplorMRParser.ByGroup)
                self.state = 2215
                self.factor(28)
                pass

            elif la_ == 7:
                self.state = 2216
                self.match(XplorMRParser.ByRes)
                self.state = 2217
                self.factor(27)
                pass

            elif la_ == 8:
                self.state = 2218
                self.match(XplorMRParser.Chemical)
                self.state = 2226
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [XplorMRParser.Simple_names]:
                    self.state = 2219
                    self.match(XplorMRParser.Simple_names)
                    pass
                elif token in [XplorMRParser.Simple_name]:
                    self.state = 2220
                    self.match(XplorMRParser.Simple_name)
                    self.state = 2223
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,253,self._ctx)
                    if la_ == 1:
                        self.state = 2221
                        self.match(XplorMRParser.Colon)
                        self.state = 2222
                        self.match(XplorMRParser.Simple_name)


                    pass
                elif token in [XplorMRParser.Symbol_name]:
                    self.state = 2225
                    self.match(XplorMRParser.Symbol_name)
                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 9:
                self.state = 2228
                self.match(XplorMRParser.Hydrogen)
                pass

            elif la_ == 10:
                self.state = 2229
                self.match(XplorMRParser.Id)
                self.state = 2230
                self.match(XplorMRParser.Integer)
                pass

            elif la_ == 11:
                self.state = 2231
                self.match(XplorMRParser.Known)
                pass

            elif la_ == 12:
                self.state = 2232
                self.match(XplorMRParser.Name)
                self.state = 2245
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [XplorMRParser.Simple_names]:
                    self.state = 2233
                    self.match(XplorMRParser.Simple_names)
                    pass
                elif token in [XplorMRParser.Simple_name]:
                    self.state = 2234
                    self.match(XplorMRParser.Simple_name)
                    self.state = 2237
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,255,self._ctx)
                    if la_ == 1:
                        self.state = 2235
                        self.match(XplorMRParser.Colon)
                        self.state = 2236
                        self.match(XplorMRParser.Simple_name)


                    pass
                elif token in [XplorMRParser.Double_quote_string]:
                    self.state = 2239
                    self.match(XplorMRParser.Double_quote_string)
                    self.state = 2242
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,256,self._ctx)
                    if la_ == 1:
                        self.state = 2240
                        self.match(XplorMRParser.Colon)
                        self.state = 2241
                        self.match(XplorMRParser.Double_quote_string)


                    pass
                elif token in [XplorMRParser.Symbol_name]:
                    self.state = 2244
                    self.match(XplorMRParser.Symbol_name)
                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 13:
                self.state = 2247
                self.match(XplorMRParser.Not_op)
                self.state = 2248
                self.factor(21)
                pass

            elif la_ == 14:
                self.state = 2249
                self.match(XplorMRParser.Point)
                self.state = 2250
                self.match(XplorMRParser.L_paren)
                self.state = 2251
                self.number_f()
                self.state = 2253
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Comma:
                    self.state = 2252
                    self.match(XplorMRParser.Comma)


                self.state = 2255
                self.number_f()
                self.state = 2257
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Comma:
                    self.state = 2256
                    self.match(XplorMRParser.Comma)


                self.state = 2259
                self.number_f()
                self.state = 2260
                self.match(XplorMRParser.R_paren)
                self.state = 2261
                self.match(XplorMRParser.Cut)
                self.state = 2262
                self.number_f()
                pass

            elif la_ == 15:
                self.state = 2264
                self.match(XplorMRParser.Point)
                self.state = 2265
                self.match(XplorMRParser.L_paren)
                self.state = 2266
                self.match(XplorMRParser.Tail)
                self.state = 2268
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 2267
                    self.match(XplorMRParser.Equ_op)


                self.state = 2270
                self.selection()
                self.state = 2272
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Comma:
                    self.state = 2271
                    self.match(XplorMRParser.Comma)


                self.state = 2279
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Head:
                    self.state = 2274
                    self.match(XplorMRParser.Head)
                    self.state = 2276
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==XplorMRParser.Equ_op:
                        self.state = 2275
                        self.match(XplorMRParser.Equ_op)


                    self.state = 2278
                    self.selection()


                self.state = 2281
                self.match(XplorMRParser.R_paren)
                self.state = 2282
                self.match(XplorMRParser.Cut)
                self.state = 2283
                self.number_f()
                pass

            elif la_ == 16:
                self.state = 2285
                self.match(XplorMRParser.Previous)
                pass

            elif la_ == 17:
                self.state = 2286
                self.match(XplorMRParser.Pseudo)
                pass

            elif la_ == 18:
                self.state = 2287
                self.match(XplorMRParser.Residue)
                self.state = 2295
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [XplorMRParser.Integers]:
                    self.state = 2288
                    self.match(XplorMRParser.Integers)
                    pass
                elif token in [XplorMRParser.Integer]:
                    self.state = 2289
                    self.match(XplorMRParser.Integer)
                    self.state = 2292
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,264,self._ctx)
                    if la_ == 1:
                        self.state = 2290
                        self.match(XplorMRParser.Colon)
                        self.state = 2291
                        self.match(XplorMRParser.Integer)


                    pass
                elif token in [XplorMRParser.Symbol_name]:
                    self.state = 2294
                    self.match(XplorMRParser.Symbol_name)
                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 19:
                self.state = 2297
                self.match(XplorMRParser.Resname)
                self.state = 2305
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [XplorMRParser.Simple_names]:
                    self.state = 2298
                    self.match(XplorMRParser.Simple_names)
                    pass
                elif token in [XplorMRParser.Simple_name]:
                    self.state = 2299
                    self.match(XplorMRParser.Simple_name)
                    self.state = 2302
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,266,self._ctx)
                    if la_ == 1:
                        self.state = 2300
                        self.match(XplorMRParser.Colon)
                        self.state = 2301
                        self.match(XplorMRParser.Simple_name)


                    pass
                elif token in [XplorMRParser.Symbol_name]:
                    self.state = 2304
                    self.match(XplorMRParser.Symbol_name)
                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 20:
                self.state = 2307
                self.match(XplorMRParser.SegIdentifier)
                self.state = 2320
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [XplorMRParser.Simple_names]:
                    self.state = 2308
                    self.match(XplorMRParser.Simple_names)
                    pass
                elif token in [XplorMRParser.Simple_name]:
                    self.state = 2309
                    self.match(XplorMRParser.Simple_name)
                    self.state = 2312
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,268,self._ctx)
                    if la_ == 1:
                        self.state = 2310
                        self.match(XplorMRParser.Colon)
                        self.state = 2311
                        self.match(XplorMRParser.Simple_name)


                    pass
                elif token in [XplorMRParser.Double_quote_string]:
                    self.state = 2314
                    self.match(XplorMRParser.Double_quote_string)
                    self.state = 2317
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,269,self._ctx)
                    if la_ == 1:
                        self.state = 2315
                        self.match(XplorMRParser.Colon)
                        self.state = 2316
                        self.match(XplorMRParser.Double_quote_string)


                    pass
                elif token in [XplorMRParser.Symbol_name]:
                    self.state = 2319
                    self.match(XplorMRParser.Symbol_name)
                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 21:
                self.state = 2322
                self.match(XplorMRParser.Store1)
                pass

            elif la_ == 22:
                self.state = 2323
                self.match(XplorMRParser.Store2)
                pass

            elif la_ == 23:
                self.state = 2324
                self.match(XplorMRParser.Store3)
                pass

            elif la_ == 24:
                self.state = 2325
                self.match(XplorMRParser.Store4)
                pass

            elif la_ == 25:
                self.state = 2326
                self.match(XplorMRParser.Store5)
                pass

            elif la_ == 26:
                self.state = 2327
                self.match(XplorMRParser.Store6)
                pass

            elif la_ == 27:
                self.state = 2328
                self.match(XplorMRParser.Store7)
                pass

            elif la_ == 28:
                self.state = 2329
                self.match(XplorMRParser.Store8)
                pass

            elif la_ == 29:
                self.state = 2330
                self.match(XplorMRParser.Store9)
                pass

            elif la_ == 30:
                self.state = 2331
                self.match(XplorMRParser.Tag)
                pass

            elif la_ == 31:
                self.state = 2332
                self.match(XplorMRParser.Donor)
                pass

            elif la_ == 32:
                self.state = 2333
                self.match(XplorMRParser.Acceptor)
                pass


            self._ctx.stop = self._input.LT(-1)
            self.state = 2344
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,273,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 2342
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,272,self._ctx)
                    if la_ == 1:
                        localctx = XplorMRParser.FactorContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_factor)
                        self.state = 2336
                        if not self.precpred(self._ctx, 32):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 32)")
                        self.state = 2337
                        self.match(XplorMRParser.Around)
                        self.state = 2338
                        self.number_f()
                        pass

                    elif la_ == 2:
                        localctx = XplorMRParser.FactorContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_factor)
                        self.state = 2339
                        if not self.precpred(self._ctx, 14):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 14)")
                        self.state = 2340
                        self.match(XplorMRParser.Saround)
                        self.state = 2341
                        self.number_f()
                        pass

             
                self.state = 2346
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,273,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class NumberContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Real(self):
            return self.getToken(XplorMRParser.Real, 0)

        def Integer(self):
            return self.getToken(XplorMRParser.Integer, 0)

        def Symbol_name(self):
            return self.getToken(XplorMRParser.Symbol_name, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_number

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNumber" ):
                listener.enterNumber(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNumber" ):
                listener.exitNumber(self)




    def number(self):

        localctx = XplorMRParser.NumberContext(self, self._ctx, self.state)
        self.enterRule(localctx, 196, self.RULE_number)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2347
            _la = self._input.LA(1)
            if not(((((_la - 192)) & ~0x3f) == 0 and ((1 << (_la - 192)) & ((1 << (XplorMRParser.Integer - 192)) | (1 << (XplorMRParser.Real - 192)) | (1 << (XplorMRParser.Symbol_name - 192)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Number_fContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Real(self):
            return self.getToken(XplorMRParser.Real, 0)

        def Integer(self):
            return self.getToken(XplorMRParser.Integer, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_number_f

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNumber_f" ):
                listener.enterNumber_f(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNumber_f" ):
                listener.exitNumber_f(self)




    def number_f(self):

        localctx = XplorMRParser.Number_fContext(self, self._ctx, self.state)
        self.enterRule(localctx, 198, self.RULE_number_f)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2349
            _la = self._input.LA(1)
            if not(_la==XplorMRParser.Integer or _la==XplorMRParser.Real):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Number_sContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Real(self):
            return self.getToken(XplorMRParser.Real, 0)

        def Integer(self):
            return self.getToken(XplorMRParser.Integer, 0)

        def Symbol_name(self):
            return self.getToken(XplorMRParser.Symbol_name, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_number_s

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNumber_s" ):
                listener.enterNumber_s(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNumber_s" ):
                listener.exitNumber_s(self)




    def number_s(self):

        localctx = XplorMRParser.Number_sContext(self, self._ctx, self.state)
        self.enterRule(localctx, 200, self.RULE_number_s)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2351
            _la = self._input.LA(1)
            if not(((((_la - 192)) & ~0x3f) == 0 and ((1 << (_la - 192)) & ((1 << (XplorMRParser.Integer - 192)) | (1 << (XplorMRParser.Real - 192)) | (1 << (XplorMRParser.Symbol_name - 192)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Number_aContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Real(self):
            return self.getToken(XplorMRParser.Real, 0)

        def Integer(self):
            return self.getToken(XplorMRParser.Integer, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_number_a

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNumber_a" ):
                listener.enterNumber_a(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNumber_a" ):
                listener.exitNumber_a(self)




    def number_a(self):

        localctx = XplorMRParser.Number_aContext(self, self._ctx, self.state)
        self.enterRule(localctx, 202, self.RULE_number_a)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2353
            _la = self._input.LA(1)
            if not(_la==XplorMRParser.Integer or _la==XplorMRParser.Real):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Flag_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Flags(self):
            return self.getToken(XplorMRParser.Flags, 0)

        def Include(self):
            return self.getToken(XplorMRParser.Include, 0)

        def End_FL(self):
            return self.getToken(XplorMRParser.End_FL, 0)

        def Exclude(self):
            return self.getToken(XplorMRParser.Exclude, 0)

        def Class_name(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Class_name)
            else:
                return self.getToken(XplorMRParser.Class_name, i)

        def Any_class(self):
            return self.getToken(XplorMRParser.Any_class, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_flag_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFlag_statement" ):
                listener.enterFlag_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFlag_statement" ):
                listener.exitFlag_statement(self)




    def flag_statement(self):

        localctx = XplorMRParser.Flag_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 204, self.RULE_flag_statement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2355
            self.match(XplorMRParser.Flags)
            self.state = 2366
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==XplorMRParser.Exclude:
                self.state = 2356
                self.match(XplorMRParser.Exclude)
                self.state = 2364
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [XplorMRParser.Include, XplorMRParser.Class_name]:
                    self.state = 2360
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==XplorMRParser.Class_name:
                        self.state = 2357
                        self.match(XplorMRParser.Class_name)
                        self.state = 2362
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    pass
                elif token in [XplorMRParser.Any_class]:
                    self.state = 2363
                    self.match(XplorMRParser.Any_class)
                    pass
                else:
                    raise NoViableAltException(self)



            self.state = 2368
            self.match(XplorMRParser.Include)
            self.state = 2372
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==XplorMRParser.Class_name:
                self.state = 2369
                self.match(XplorMRParser.Class_name)
                self.state = 2374
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2375
            self.match(XplorMRParser.End_FL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Vector_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Vector(self):
            return self.getToken(XplorMRParser.Vector, 0)

        def vector_mode(self):
            return self.getTypedRuleContext(XplorMRParser.Vector_modeContext,0)


        def selection(self):
            return self.getTypedRuleContext(XplorMRParser.SelectionContext,0)


        def getRuleIndex(self):
            return XplorMRParser.RULE_vector_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVector_statement" ):
                listener.enterVector_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVector_statement" ):
                listener.exitVector_statement(self)




    def vector_statement(self):

        localctx = XplorMRParser.Vector_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 206, self.RULE_vector_statement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2377
            self.match(XplorMRParser.Vector)
            self.state = 2378
            self.vector_mode()
            self.state = 2379
            self.selection()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Vector_modeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def vector_expression(self):
            return self.getTypedRuleContext(XplorMRParser.Vector_expressionContext,0)


        def R_paren_VE(self):
            return self.getToken(XplorMRParser.R_paren_VE, 0)

        def Do_Lp(self):
            return self.getToken(XplorMRParser.Do_Lp, 0)

        def Identity_Lp(self):
            return self.getToken(XplorMRParser.Identity_Lp, 0)

        def Show(self):
            return self.getToken(XplorMRParser.Show, 0)

        def vector_show_property(self):
            return self.getTypedRuleContext(XplorMRParser.Vector_show_propertyContext,0)


        def getRuleIndex(self):
            return XplorMRParser.RULE_vector_mode

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVector_mode" ):
                listener.enterVector_mode(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVector_mode" ):
                listener.exitVector_mode(self)




    def vector_mode(self):

        localctx = XplorMRParser.Vector_modeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 208, self.RULE_vector_mode)
        self._la = 0 # Token type
        try:
            self.state = 2387
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [XplorMRParser.Do_Lp, XplorMRParser.Identity_Lp]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2381
                _la = self._input.LA(1)
                if not(_la==XplorMRParser.Do_Lp or _la==XplorMRParser.Identity_Lp):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 2382
                self.vector_expression()
                self.state = 2383
                self.match(XplorMRParser.R_paren_VE)
                pass
            elif token in [XplorMRParser.Show]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2385
                self.match(XplorMRParser.Show)
                self.state = 2386
                self.vector_show_property()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Vector_expressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Atom_properties_VE(self):
            return self.getToken(XplorMRParser.Atom_properties_VE, 0)

        def Equ_op_VE(self):
            return self.getToken(XplorMRParser.Equ_op_VE, 0)

        def vector_operation(self):
            return self.getTypedRuleContext(XplorMRParser.Vector_operationContext,0)


        def getRuleIndex(self):
            return XplorMRParser.RULE_vector_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVector_expression" ):
                listener.enterVector_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVector_expression" ):
                listener.exitVector_expression(self)




    def vector_expression(self):

        localctx = XplorMRParser.Vector_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 210, self.RULE_vector_expression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2389
            self.match(XplorMRParser.Atom_properties_VE)
            self.state = 2392
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==XplorMRParser.Equ_op_VE:
                self.state = 2390
                self.match(XplorMRParser.Equ_op_VE)
                self.state = 2391
                self.vector_operation()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Vector_operationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def vflc(self):
            return self.getTypedRuleContext(XplorMRParser.VflcContext,0)


        def vector_operation(self):
            return self.getTypedRuleContext(XplorMRParser.Vector_operationContext,0)


        def Add_op_VE(self):
            return self.getToken(XplorMRParser.Add_op_VE, 0)

        def Sub_op_VE(self):
            return self.getToken(XplorMRParser.Sub_op_VE, 0)

        def Mul_op_VE(self):
            return self.getToken(XplorMRParser.Mul_op_VE, 0)

        def Div_op_VE(self):
            return self.getToken(XplorMRParser.Div_op_VE, 0)

        def Exp_op_VE(self):
            return self.getToken(XplorMRParser.Exp_op_VE, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_vector_operation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVector_operation" ):
                listener.enterVector_operation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVector_operation" ):
                listener.exitVector_operation(self)




    def vector_operation(self):

        localctx = XplorMRParser.Vector_operationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 212, self.RULE_vector_operation)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2394
            self.vflc()
            self.state = 2397
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 244)) & ~0x3f) == 0 and ((1 << (_la - 244)) & ((1 << (XplorMRParser.Add_op_VE - 244)) | (1 << (XplorMRParser.Sub_op_VE - 244)) | (1 << (XplorMRParser.Mul_op_VE - 244)) | (1 << (XplorMRParser.Div_op_VE - 244)) | (1 << (XplorMRParser.Exp_op_VE - 244)))) != 0):
                self.state = 2395
                _la = self._input.LA(1)
                if not(((((_la - 244)) & ~0x3f) == 0 and ((1 << (_la - 244)) & ((1 << (XplorMRParser.Add_op_VE - 244)) | (1 << (XplorMRParser.Sub_op_VE - 244)) | (1 << (XplorMRParser.Mul_op_VE - 244)) | (1 << (XplorMRParser.Div_op_VE - 244)) | (1 << (XplorMRParser.Exp_op_VE - 244)))) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 2396
                self.vector_operation()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VflcContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Atom_properties_VE(self):
            return self.getToken(XplorMRParser.Atom_properties_VE, 0)

        def vector_func_call(self):
            return self.getTypedRuleContext(XplorMRParser.Vector_func_callContext,0)


        def Integer_VE(self):
            return self.getToken(XplorMRParser.Integer_VE, 0)

        def Real_VE(self):
            return self.getToken(XplorMRParser.Real_VE, 0)

        def Simple_name_VE(self):
            return self.getToken(XplorMRParser.Simple_name_VE, 0)

        def Symbol_name_VE(self):
            return self.getToken(XplorMRParser.Symbol_name_VE, 0)

        def Double_quote_string_VE(self):
            return self.getToken(XplorMRParser.Double_quote_string_VE, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_vflc

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVflc" ):
                listener.enterVflc(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVflc" ):
                listener.exitVflc(self)




    def vflc(self):

        localctx = XplorMRParser.VflcContext(self, self._ctx, self.state)
        self.enterRule(localctx, 214, self.RULE_vflc)
        try:
            self.state = 2406
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [XplorMRParser.Atom_properties_VE]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2399
                self.match(XplorMRParser.Atom_properties_VE)
                pass
            elif token in [XplorMRParser.Abs_VE, XplorMRParser.Acos_VE, XplorMRParser.Cos_VE, XplorMRParser.Decode_VE, XplorMRParser.Encode_VE, XplorMRParser.Exp_VE, XplorMRParser.Gauss_VE, XplorMRParser.Heavy_VE, XplorMRParser.Int_VE, XplorMRParser.Log10_VE, XplorMRParser.Log_VE, XplorMRParser.Max_VE, XplorMRParser.Maxw_VE, XplorMRParser.Min_VE, XplorMRParser.Mod_VE, XplorMRParser.Norm_VE, XplorMRParser.Random_VE, XplorMRParser.Sign_VE, XplorMRParser.Sin_VE, XplorMRParser.Sqrt_VE, XplorMRParser.Tan_VE]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2400
                self.vector_func_call()
                pass
            elif token in [XplorMRParser.Integer_VE]:
                self.enterOuterAlt(localctx, 3)
                self.state = 2401
                self.match(XplorMRParser.Integer_VE)
                pass
            elif token in [XplorMRParser.Real_VE]:
                self.enterOuterAlt(localctx, 4)
                self.state = 2402
                self.match(XplorMRParser.Real_VE)
                pass
            elif token in [XplorMRParser.Simple_name_VE]:
                self.enterOuterAlt(localctx, 5)
                self.state = 2403
                self.match(XplorMRParser.Simple_name_VE)
                pass
            elif token in [XplorMRParser.Symbol_name_VE]:
                self.enterOuterAlt(localctx, 6)
                self.state = 2404
                self.match(XplorMRParser.Symbol_name_VE)
                pass
            elif token in [XplorMRParser.Double_quote_string_VE]:
                self.enterOuterAlt(localctx, 7)
                self.state = 2405
                self.match(XplorMRParser.Double_quote_string_VE)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Vector_func_callContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Abs_VE(self):
            return self.getToken(XplorMRParser.Abs_VE, 0)

        def L_paren_VF(self):
            return self.getToken(XplorMRParser.L_paren_VF, 0)

        def vflc(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.VflcContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.VflcContext,i)


        def R_paren_VE(self):
            return self.getToken(XplorMRParser.R_paren_VE, 0)

        def Acos_VE(self):
            return self.getToken(XplorMRParser.Acos_VE, 0)

        def Cos_VE(self):
            return self.getToken(XplorMRParser.Cos_VE, 0)

        def Decode_VE(self):
            return self.getToken(XplorMRParser.Decode_VE, 0)

        def Encode_VE(self):
            return self.getToken(XplorMRParser.Encode_VE, 0)

        def Exp_VE(self):
            return self.getToken(XplorMRParser.Exp_VE, 0)

        def Gauss_VE(self):
            return self.getToken(XplorMRParser.Gauss_VE, 0)

        def Heavy_VE(self):
            return self.getToken(XplorMRParser.Heavy_VE, 0)

        def Int_VE(self):
            return self.getToken(XplorMRParser.Int_VE, 0)

        def Log10_VE(self):
            return self.getToken(XplorMRParser.Log10_VE, 0)

        def Log_VE(self):
            return self.getToken(XplorMRParser.Log_VE, 0)

        def Max_VE(self):
            return self.getToken(XplorMRParser.Max_VE, 0)

        def Comma_VE(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Comma_VE)
            else:
                return self.getToken(XplorMRParser.Comma_VE, i)

        def Maxw_VE(self):
            return self.getToken(XplorMRParser.Maxw_VE, 0)

        def Min_VE(self):
            return self.getToken(XplorMRParser.Min_VE, 0)

        def Mod_VE(self):
            return self.getToken(XplorMRParser.Mod_VE, 0)

        def Norm_VE(self):
            return self.getToken(XplorMRParser.Norm_VE, 0)

        def Random_VE(self):
            return self.getToken(XplorMRParser.Random_VE, 0)

        def Sign_VE(self):
            return self.getToken(XplorMRParser.Sign_VE, 0)

        def Sin_VE(self):
            return self.getToken(XplorMRParser.Sin_VE, 0)

        def Sqrt_VE(self):
            return self.getToken(XplorMRParser.Sqrt_VE, 0)

        def Tan_VE(self):
            return self.getToken(XplorMRParser.Tan_VE, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_vector_func_call

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVector_func_call" ):
                listener.enterVector_func_call(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVector_func_call" ):
                listener.exitVector_func_call(self)




    def vector_func_call(self):

        localctx = XplorMRParser.Vector_func_callContext(self, self._ctx, self.state)
        self.enterRule(localctx, 216, self.RULE_vector_func_call)
        self._la = 0 # Token type
        try:
            self.state = 2527
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [XplorMRParser.Abs_VE]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2408
                self.match(XplorMRParser.Abs_VE)
                self.state = 2409
                self.match(XplorMRParser.L_paren_VF)
                self.state = 2410
                self.vflc()
                self.state = 2411
                self.match(XplorMRParser.R_paren_VE)
                pass
            elif token in [XplorMRParser.Acos_VE]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2413
                self.match(XplorMRParser.Acos_VE)
                self.state = 2414
                self.match(XplorMRParser.L_paren_VF)
                self.state = 2415
                self.vflc()
                self.state = 2416
                self.match(XplorMRParser.R_paren_VE)
                pass
            elif token in [XplorMRParser.Cos_VE]:
                self.enterOuterAlt(localctx, 3)
                self.state = 2418
                self.match(XplorMRParser.Cos_VE)
                self.state = 2419
                self.match(XplorMRParser.L_paren_VF)
                self.state = 2420
                self.vflc()
                self.state = 2421
                self.match(XplorMRParser.R_paren_VE)
                pass
            elif token in [XplorMRParser.Decode_VE]:
                self.enterOuterAlt(localctx, 4)
                self.state = 2423
                self.match(XplorMRParser.Decode_VE)
                self.state = 2424
                self.match(XplorMRParser.L_paren_VF)
                self.state = 2425
                self.vflc()
                self.state = 2426
                self.match(XplorMRParser.R_paren_VE)
                pass
            elif token in [XplorMRParser.Encode_VE]:
                self.enterOuterAlt(localctx, 5)
                self.state = 2428
                self.match(XplorMRParser.Encode_VE)
                self.state = 2429
                self.match(XplorMRParser.L_paren_VF)
                self.state = 2430
                self.vflc()
                self.state = 2431
                self.match(XplorMRParser.R_paren_VE)
                pass
            elif token in [XplorMRParser.Exp_VE]:
                self.enterOuterAlt(localctx, 6)
                self.state = 2433
                self.match(XplorMRParser.Exp_VE)
                self.state = 2434
                self.match(XplorMRParser.L_paren_VF)
                self.state = 2435
                self.vflc()
                self.state = 2436
                self.match(XplorMRParser.R_paren_VE)
                pass
            elif token in [XplorMRParser.Gauss_VE]:
                self.enterOuterAlt(localctx, 7)
                self.state = 2438
                self.match(XplorMRParser.Gauss_VE)
                self.state = 2439
                self.match(XplorMRParser.L_paren_VF)
                self.state = 2440
                self.vflc()
                self.state = 2441
                self.match(XplorMRParser.R_paren_VE)
                pass
            elif token in [XplorMRParser.Heavy_VE]:
                self.enterOuterAlt(localctx, 8)
                self.state = 2443
                self.match(XplorMRParser.Heavy_VE)
                self.state = 2444
                self.match(XplorMRParser.L_paren_VF)
                self.state = 2445
                self.vflc()
                self.state = 2446
                self.match(XplorMRParser.R_paren_VE)
                pass
            elif token in [XplorMRParser.Int_VE]:
                self.enterOuterAlt(localctx, 9)
                self.state = 2448
                self.match(XplorMRParser.Int_VE)
                self.state = 2449
                self.match(XplorMRParser.L_paren_VF)
                self.state = 2450
                self.vflc()
                self.state = 2451
                self.match(XplorMRParser.R_paren_VE)
                pass
            elif token in [XplorMRParser.Log10_VE]:
                self.enterOuterAlt(localctx, 10)
                self.state = 2453
                self.match(XplorMRParser.Log10_VE)
                self.state = 2454
                self.match(XplorMRParser.L_paren_VF)
                self.state = 2455
                self.vflc()
                self.state = 2456
                self.match(XplorMRParser.R_paren_VE)
                pass
            elif token in [XplorMRParser.Log_VE]:
                self.enterOuterAlt(localctx, 11)
                self.state = 2458
                self.match(XplorMRParser.Log_VE)
                self.state = 2459
                self.match(XplorMRParser.L_paren_VF)
                self.state = 2460
                self.vflc()
                self.state = 2461
                self.match(XplorMRParser.R_paren_VE)
                pass
            elif token in [XplorMRParser.Max_VE]:
                self.enterOuterAlt(localctx, 12)
                self.state = 2463
                self.match(XplorMRParser.Max_VE)
                self.state = 2464
                self.match(XplorMRParser.L_paren_VF)
                self.state = 2465
                self.vflc()
                self.state = 2470
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==XplorMRParser.Comma_VE:
                    self.state = 2466
                    self.match(XplorMRParser.Comma_VE)
                    self.state = 2467
                    self.vflc()
                    self.state = 2472
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 2473
                self.match(XplorMRParser.R_paren_VE)
                pass
            elif token in [XplorMRParser.Maxw_VE]:
                self.enterOuterAlt(localctx, 13)
                self.state = 2475
                self.match(XplorMRParser.Maxw_VE)
                self.state = 2476
                self.match(XplorMRParser.L_paren_VF)
                self.state = 2477
                self.vflc()
                self.state = 2478
                self.match(XplorMRParser.R_paren_VE)
                pass
            elif token in [XplorMRParser.Min_VE]:
                self.enterOuterAlt(localctx, 14)
                self.state = 2480
                self.match(XplorMRParser.Min_VE)
                self.state = 2481
                self.match(XplorMRParser.L_paren_VF)
                self.state = 2482
                self.vflc()
                self.state = 2487
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==XplorMRParser.Comma_VE:
                    self.state = 2483
                    self.match(XplorMRParser.Comma_VE)
                    self.state = 2484
                    self.vflc()
                    self.state = 2489
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 2490
                self.match(XplorMRParser.R_paren_VE)
                pass
            elif token in [XplorMRParser.Mod_VE]:
                self.enterOuterAlt(localctx, 15)
                self.state = 2492
                self.match(XplorMRParser.Mod_VE)
                self.state = 2493
                self.match(XplorMRParser.L_paren_VF)
                self.state = 2494
                self.vflc()
                self.state = 2495
                self.match(XplorMRParser.Comma_VE)
                self.state = 2496
                self.vflc()
                self.state = 2497
                self.match(XplorMRParser.R_paren_VE)
                pass
            elif token in [XplorMRParser.Norm_VE]:
                self.enterOuterAlt(localctx, 16)
                self.state = 2499
                self.match(XplorMRParser.Norm_VE)
                self.state = 2500
                self.match(XplorMRParser.L_paren_VF)
                self.state = 2501
                self.vflc()
                self.state = 2502
                self.match(XplorMRParser.R_paren_VE)
                pass
            elif token in [XplorMRParser.Random_VE]:
                self.enterOuterAlt(localctx, 17)
                self.state = 2504
                self.match(XplorMRParser.Random_VE)
                self.state = 2505
                self.match(XplorMRParser.L_paren_VF)
                self.state = 2506
                self.match(XplorMRParser.R_paren_VE)
                pass
            elif token in [XplorMRParser.Sign_VE]:
                self.enterOuterAlt(localctx, 18)
                self.state = 2507
                self.match(XplorMRParser.Sign_VE)
                self.state = 2508
                self.match(XplorMRParser.L_paren_VF)
                self.state = 2509
                self.vflc()
                self.state = 2510
                self.match(XplorMRParser.R_paren_VE)
                pass
            elif token in [XplorMRParser.Sin_VE]:
                self.enterOuterAlt(localctx, 19)
                self.state = 2512
                self.match(XplorMRParser.Sin_VE)
                self.state = 2513
                self.match(XplorMRParser.L_paren_VF)
                self.state = 2514
                self.vflc()
                self.state = 2515
                self.match(XplorMRParser.R_paren_VE)
                pass
            elif token in [XplorMRParser.Sqrt_VE]:
                self.enterOuterAlt(localctx, 20)
                self.state = 2517
                self.match(XplorMRParser.Sqrt_VE)
                self.state = 2518
                self.match(XplorMRParser.L_paren_VF)
                self.state = 2519
                self.vflc()
                self.state = 2520
                self.match(XplorMRParser.R_paren_VE)
                pass
            elif token in [XplorMRParser.Tan_VE]:
                self.enterOuterAlt(localctx, 21)
                self.state = 2522
                self.match(XplorMRParser.Tan_VE)
                self.state = 2523
                self.match(XplorMRParser.L_paren_VF)
                self.state = 2524
                self.vflc()
                self.state = 2525
                self.match(XplorMRParser.R_paren_VE)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Vector_show_propertyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def L_paren_VS(self):
            return self.getToken(XplorMRParser.L_paren_VS, 0)

        def Atom_properties_VS(self):
            return self.getToken(XplorMRParser.Atom_properties_VS, 0)

        def R_paren_VS(self):
            return self.getToken(XplorMRParser.R_paren_VS, 0)

        def Average_VS(self):
            return self.getToken(XplorMRParser.Average_VS, 0)

        def Element_VS(self):
            return self.getToken(XplorMRParser.Element_VS, 0)

        def Max_VS(self):
            return self.getToken(XplorMRParser.Max_VS, 0)

        def Min_VS(self):
            return self.getToken(XplorMRParser.Min_VS, 0)

        def Norm_VS(self):
            return self.getToken(XplorMRParser.Norm_VS, 0)

        def Rms_VS(self):
            return self.getToken(XplorMRParser.Rms_VS, 0)

        def Sum_VS(self):
            return self.getToken(XplorMRParser.Sum_VS, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_vector_show_property

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVector_show_property" ):
                listener.enterVector_show_property(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVector_show_property" ):
                listener.exitVector_show_property(self)




    def vector_show_property(self):

        localctx = XplorMRParser.Vector_show_propertyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 218, self.RULE_vector_show_property)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2529
            _la = self._input.LA(1)
            if not(((((_la - 283)) & ~0x3f) == 0 and ((1 << (_la - 283)) & ((1 << (XplorMRParser.Average_VS - 283)) | (1 << (XplorMRParser.Element_VS - 283)) | (1 << (XplorMRParser.Max_VS - 283)) | (1 << (XplorMRParser.Min_VS - 283)) | (1 << (XplorMRParser.Norm_VS - 283)) | (1 << (XplorMRParser.Rms_VS - 283)) | (1 << (XplorMRParser.Sum_VS - 283)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 2530
            self.match(XplorMRParser.L_paren_VS)
            self.state = 2531
            self.match(XplorMRParser.Atom_properties_VS)
            self.state = 2532
            self.match(XplorMRParser.R_paren_VS)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Evaluate_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Evaluate_Lp(self):
            return self.getToken(XplorMRParser.Evaluate_Lp, 0)

        def Symbol_name_VE(self):
            return self.getToken(XplorMRParser.Symbol_name_VE, 0)

        def Equ_op_VE(self):
            return self.getToken(XplorMRParser.Equ_op_VE, 0)

        def evaluate_operation(self):
            return self.getTypedRuleContext(XplorMRParser.Evaluate_operationContext,0)


        def R_paren_VE(self):
            return self.getToken(XplorMRParser.R_paren_VE, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_evaluate_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEvaluate_statement" ):
                listener.enterEvaluate_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEvaluate_statement" ):
                listener.exitEvaluate_statement(self)




    def evaluate_statement(self):

        localctx = XplorMRParser.Evaluate_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 220, self.RULE_evaluate_statement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2534
            self.match(XplorMRParser.Evaluate_Lp)
            self.state = 2535
            self.match(XplorMRParser.Symbol_name_VE)
            self.state = 2536
            self.match(XplorMRParser.Equ_op_VE)
            self.state = 2537
            self.evaluate_operation()
            self.state = 2538
            self.match(XplorMRParser.R_paren_VE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Evaluate_operationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def vflc(self):
            return self.getTypedRuleContext(XplorMRParser.VflcContext,0)


        def evaluate_operation(self):
            return self.getTypedRuleContext(XplorMRParser.Evaluate_operationContext,0)


        def Add_op_VE(self):
            return self.getToken(XplorMRParser.Add_op_VE, 0)

        def Sub_op_VE(self):
            return self.getToken(XplorMRParser.Sub_op_VE, 0)

        def Mul_op_VE(self):
            return self.getToken(XplorMRParser.Mul_op_VE, 0)

        def Div_op_VE(self):
            return self.getToken(XplorMRParser.Div_op_VE, 0)

        def Exp_op_VE(self):
            return self.getToken(XplorMRParser.Exp_op_VE, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_evaluate_operation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEvaluate_operation" ):
                listener.enterEvaluate_operation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEvaluate_operation" ):
                listener.exitEvaluate_operation(self)




    def evaluate_operation(self):

        localctx = XplorMRParser.Evaluate_operationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 222, self.RULE_evaluate_operation)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2540
            self.vflc()
            self.state = 2543
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 244)) & ~0x3f) == 0 and ((1 << (_la - 244)) & ((1 << (XplorMRParser.Add_op_VE - 244)) | (1 << (XplorMRParser.Sub_op_VE - 244)) | (1 << (XplorMRParser.Mul_op_VE - 244)) | (1 << (XplorMRParser.Div_op_VE - 244)) | (1 << (XplorMRParser.Exp_op_VE - 244)))) != 0):
                self.state = 2541
                _la = self._input.LA(1)
                if not(((((_la - 244)) & ~0x3f) == 0 and ((1 << (_la - 244)) & ((1 << (XplorMRParser.Add_op_VE - 244)) | (1 << (XplorMRParser.Sub_op_VE - 244)) | (1 << (XplorMRParser.Mul_op_VE - 244)) | (1 << (XplorMRParser.Div_op_VE - 244)) | (1 << (XplorMRParser.Exp_op_VE - 244)))) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 2542
                self.evaluate_operation()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Patch_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Patch(self):
            return self.getToken(XplorMRParser.Patch, 0)

        def Reference(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Reference)
            else:
                return self.getToken(XplorMRParser.Reference, i)

        def Equ_op(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Equ_op)
            else:
                return self.getToken(XplorMRParser.Equ_op, i)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.SelectionContext,i)


        def End(self):
            return self.getToken(XplorMRParser.End, 0)

        def Nil(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Nil)
            else:
                return self.getToken(XplorMRParser.Nil, i)

        def Integer(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Integer)
            else:
                return self.getToken(XplorMRParser.Integer, i)

        def Simple_name(self):
            return self.getToken(XplorMRParser.Simple_name, 0)

        def AngleDb(self):
            return self.getToken(XplorMRParser.AngleDb, 0)

        def HBonded(self):
            return self.getToken(XplorMRParser.HBonded, 0)

        def Dihedral(self):
            return self.getToken(XplorMRParser.Dihedral, 0)

        def Improper(self):
            return self.getToken(XplorMRParser.Improper, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_patch_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPatch_statement" ):
                listener.enterPatch_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPatch_statement" ):
                listener.exitPatch_statement(self)




    def patch_statement(self):

        localctx = XplorMRParser.Patch_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 224, self.RULE_patch_statement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2545
            self.match(XplorMRParser.Patch)
            self.state = 2547
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==XplorMRParser.Dihedral or _la==XplorMRParser.AngleDb or ((((_la - 177)) & ~0x3f) == 0 and ((1 << (_la - 177)) & ((1 << (XplorMRParser.HBonded - 177)) | (1 << (XplorMRParser.Improper - 177)) | (1 << (XplorMRParser.Simple_name - 177)))) != 0):
                self.state = 2546
                _la = self._input.LA(1)
                if not(_la==XplorMRParser.Dihedral or _la==XplorMRParser.AngleDb or ((((_la - 177)) & ~0x3f) == 0 and ((1 << (_la - 177)) & ((1 << (XplorMRParser.HBonded - 177)) | (1 << (XplorMRParser.Improper - 177)) | (1 << (XplorMRParser.Simple_name - 177)))) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 2549
            self.match(XplorMRParser.Reference)
            self.state = 2550
            self.match(XplorMRParser.Equ_op)
            self.state = 2551
            _la = self._input.LA(1)
            if not(_la==XplorMRParser.Nil or _la==XplorMRParser.Integer):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 2552
            self.match(XplorMRParser.Equ_op)
            self.state = 2553
            self.selection()
            self.state = 2559
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==XplorMRParser.Reference:
                self.state = 2554
                self.match(XplorMRParser.Reference)
                self.state = 2555
                self.match(XplorMRParser.Equ_op)
                self.state = 2556
                _la = self._input.LA(1)
                if not(_la==XplorMRParser.Nil or _la==XplorMRParser.Integer):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 2557
                self.match(XplorMRParser.Equ_op)
                self.state = 2558
                self.selection()


            self.state = 2561
            self.match(XplorMRParser.End)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Parameter_settingContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Parameter(self):
            return self.getToken(XplorMRParser.Parameter, 0)

        def End(self):
            return self.getToken(XplorMRParser.End, 0)

        def parameter_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Parameter_statementContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Parameter_statementContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_parameter_setting

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParameter_setting" ):
                listener.enterParameter_setting(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParameter_setting" ):
                listener.exitParameter_setting(self)




    def parameter_setting(self):

        localctx = XplorMRParser.Parameter_settingContext(self, self._ctx, self.state)
        self.enterRule(localctx, 226, self.RULE_parameter_setting)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2563
            self.match(XplorMRParser.Parameter)
            self.state = 2567
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==XplorMRParser.Reset or _la==XplorMRParser.Dihedral or _la==XplorMRParser.AngleDb or _la==XplorMRParser.BondedTo or ((((_la - 177)) & ~0x3f) == 0 and ((1 << (_la - 177)) & ((1 << (XplorMRParser.HBonded - 177)) | (1 << (XplorMRParser.Improper - 177)) | (1 << (XplorMRParser.NBFix - 177)) | (1 << (XplorMRParser.NonB - 177)) | (1 << (XplorMRParser.VDWOff - 177)) | (1 << (XplorMRParser.Verbose - 177)))) != 0):
                self.state = 2564
                self.parameter_statement()
                self.state = 2569
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2570
            self.match(XplorMRParser.End)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Parameter_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AngleDb(self):
            return self.getToken(XplorMRParser.AngleDb, 0)

        def Simple_name(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Simple_name)
            else:
                return self.getToken(XplorMRParser.Simple_name, i)

        def number_s(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Number_sContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Number_sContext,i)


        def UB(self):
            return self.getToken(XplorMRParser.UB, 0)

        def BondedTo(self):
            return self.getToken(XplorMRParser.BondedTo, 0)

        def Integer(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Integer)
            else:
                return self.getToken(XplorMRParser.Integer, i)

        def Dihedral(self):
            return self.getToken(XplorMRParser.Dihedral, 0)

        def Improper(self):
            return self.getToken(XplorMRParser.Improper, 0)

        def Mult(self):
            return self.getToken(XplorMRParser.Mult, 0)

        def HBonded(self):
            return self.getToken(XplorMRParser.HBonded, 0)

        def Simple_names(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Simple_names)
            else:
                return self.getToken(XplorMRParser.Simple_names, i)

        def NBFix(self):
            return self.getToken(XplorMRParser.NBFix, 0)

        def NonB(self):
            return self.getToken(XplorMRParser.NonB, 0)

        def Reset(self):
            return self.getToken(XplorMRParser.Reset, 0)

        def VDWOff(self):
            return self.getToken(XplorMRParser.VDWOff, 0)

        def Verbose(self):
            return self.getToken(XplorMRParser.Verbose, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_parameter_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParameter_statement" ):
                listener.enterParameter_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParameter_statement" ):
                listener.exitParameter_statement(self)




    def parameter_statement(self):

        localctx = XplorMRParser.Parameter_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 228, self.RULE_parameter_statement)
        self._la = 0 # Token type
        try:
            self.state = 2627
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [XplorMRParser.AngleDb]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2572
                self.match(XplorMRParser.AngleDb)
                self.state = 2573
                self.match(XplorMRParser.Simple_name)
                self.state = 2574
                self.match(XplorMRParser.Simple_name)
                self.state = 2575
                self.match(XplorMRParser.Simple_name)
                self.state = 2576
                self.number_s()
                self.state = 2577
                self.number_s()
                self.state = 2582
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.UB:
                    self.state = 2578
                    self.match(XplorMRParser.UB)
                    self.state = 2579
                    self.number_s()
                    self.state = 2580
                    self.number_s()


                pass
            elif token in [XplorMRParser.BondedTo]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2584
                self.match(XplorMRParser.BondedTo)
                self.state = 2585
                self.match(XplorMRParser.Simple_name)
                self.state = 2586
                self.match(XplorMRParser.Simple_name)
                self.state = 2587
                self.number_s()
                self.state = 2588
                self.number_s()
                pass
            elif token in [XplorMRParser.Dihedral, XplorMRParser.Improper]:
                self.enterOuterAlt(localctx, 3)
                self.state = 2590
                _la = self._input.LA(1)
                if not(_la==XplorMRParser.Dihedral or _la==XplorMRParser.Improper):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 2591
                self.match(XplorMRParser.Simple_name)
                self.state = 2592
                self.match(XplorMRParser.Simple_name)
                self.state = 2593
                self.match(XplorMRParser.Simple_name)
                self.state = 2594
                self.match(XplorMRParser.Simple_name)
                self.state = 2597
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Mult:
                    self.state = 2595
                    self.match(XplorMRParser.Mult)
                    self.state = 2596
                    self.match(XplorMRParser.Integer)


                self.state = 2599
                self.number_s()
                self.state = 2600
                self.match(XplorMRParser.Integer)
                self.state = 2601
                self.number_s()
                pass
            elif token in [XplorMRParser.HBonded]:
                self.enterOuterAlt(localctx, 4)
                self.state = 2603
                self.match(XplorMRParser.HBonded)
                self.state = 2604
                self.match(XplorMRParser.Simple_names)
                self.state = 2605
                self.match(XplorMRParser.Simple_names)
                self.state = 2606
                self.number_s()
                self.state = 2607
                self.number_s()
                pass
            elif token in [XplorMRParser.NBFix]:
                self.enterOuterAlt(localctx, 5)
                self.state = 2609
                self.match(XplorMRParser.NBFix)
                self.state = 2610
                self.match(XplorMRParser.Simple_name)
                self.state = 2611
                self.match(XplorMRParser.Simple_name)
                self.state = 2612
                self.number_s()
                self.state = 2613
                self.number_s()
                self.state = 2614
                self.number_s()
                self.state = 2615
                self.number_s()
                pass
            elif token in [XplorMRParser.NonB]:
                self.enterOuterAlt(localctx, 6)
                self.state = 2617
                self.match(XplorMRParser.NonB)
                self.state = 2618
                self.match(XplorMRParser.Simple_name)
                self.state = 2619
                self.number_s()
                self.state = 2620
                self.number_s()
                self.state = 2621
                self.number_s()
                self.state = 2622
                self.number_s()
                pass
            elif token in [XplorMRParser.Reset, XplorMRParser.VDWOff]:
                self.enterOuterAlt(localctx, 7)
                self.state = 2624
                _la = self._input.LA(1)
                if not(_la==XplorMRParser.Reset or _la==XplorMRParser.VDWOff):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 2625
                self.match(XplorMRParser.Simple_name)
                pass
            elif token in [XplorMRParser.Verbose]:
                self.enterOuterAlt(localctx, 8)
                self.state = 2626
                self.match(XplorMRParser.Verbose)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Noe_assign_loopContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def For(self):
            return self.getToken(XplorMRParser.For, 0)

        def Symbol_name_CF(self):
            return self.getToken(XplorMRParser.Symbol_name_CF, 0)

        def In_CF(self):
            return self.getToken(XplorMRParser.In_CF, 0)

        def L_paren_CF(self):
            return self.getToken(XplorMRParser.L_paren_CF, 0)

        def R_paren_CF(self):
            return self.getToken(XplorMRParser.R_paren_CF, 0)

        def Loop(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Loop)
            else:
                return self.getToken(XplorMRParser.Loop, i)

        def Simple_name_LL(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Simple_name_LL)
            else:
                return self.getToken(XplorMRParser.Simple_name_LL, i)

        def End(self):
            return self.getToken(XplorMRParser.End, 0)

        def evaluate_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Evaluate_statementContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Evaluate_statementContext,i)


        def noe_assign(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Noe_assignContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Noe_assignContext,i)


        def Integer_CF(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Integer_CF)
            else:
                return self.getToken(XplorMRParser.Integer_CF, i)

        def Real_CF(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Real_CF)
            else:
                return self.getToken(XplorMRParser.Real_CF, i)

        def Simple_name_CF(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Simple_name_CF)
            else:
                return self.getToken(XplorMRParser.Simple_name_CF, i)

        def getRuleIndex(self):
            return XplorMRParser.RULE_noe_assign_loop

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNoe_assign_loop" ):
                listener.enterNoe_assign_loop(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNoe_assign_loop" ):
                listener.exitNoe_assign_loop(self)




    def noe_assign_loop(self):

        localctx = XplorMRParser.Noe_assign_loopContext(self, self._ctx, self.state)
        self.enterRule(localctx, 230, self.RULE_noe_assign_loop)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2629
            self.match(XplorMRParser.For)
            self.state = 2630
            self.match(XplorMRParser.Symbol_name_CF)
            self.state = 2631
            self.match(XplorMRParser.In_CF)
            self.state = 2632
            self.match(XplorMRParser.L_paren_CF)
            self.state = 2651
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,295,self._ctx)
            if la_ == 1:
                self.state = 2636
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==XplorMRParser.Integer_CF:
                    self.state = 2633
                    self.match(XplorMRParser.Integer_CF)
                    self.state = 2638
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 2:
                self.state = 2642
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==XplorMRParser.Real_CF:
                    self.state = 2639
                    self.match(XplorMRParser.Real_CF)
                    self.state = 2644
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 3:
                self.state = 2648
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==XplorMRParser.Simple_name_CF:
                    self.state = 2645
                    self.match(XplorMRParser.Simple_name_CF)
                    self.state = 2650
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass


            self.state = 2653
            self.match(XplorMRParser.R_paren_CF)
            self.state = 2654
            self.match(XplorMRParser.Loop)
            self.state = 2655
            self.match(XplorMRParser.Simple_name_LL)
            self.state = 2660
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==XplorMRParser.Assign or _la==XplorMRParser.Evaluate_Lp:
                self.state = 2658
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [XplorMRParser.Evaluate_Lp]:
                    self.state = 2656
                    self.evaluate_statement()
                    pass
                elif token in [XplorMRParser.Assign]:
                    self.state = 2657
                    self.noe_assign()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 2662
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2663
            self.match(XplorMRParser.End)
            self.state = 2664
            self.match(XplorMRParser.Loop)
            self.state = 2665
            self.match(XplorMRParser.Simple_name_LL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Dihedral_assign_loopContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def For(self):
            return self.getToken(XplorMRParser.For, 0)

        def Symbol_name_CF(self):
            return self.getToken(XplorMRParser.Symbol_name_CF, 0)

        def In_CF(self):
            return self.getToken(XplorMRParser.In_CF, 0)

        def L_paren_CF(self):
            return self.getToken(XplorMRParser.L_paren_CF, 0)

        def R_paren_CF(self):
            return self.getToken(XplorMRParser.R_paren_CF, 0)

        def Loop(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Loop)
            else:
                return self.getToken(XplorMRParser.Loop, i)

        def Simple_name_LL(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Simple_name_LL)
            else:
                return self.getToken(XplorMRParser.Simple_name_LL, i)

        def End(self):
            return self.getToken(XplorMRParser.End, 0)

        def evaluate_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Evaluate_statementContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Evaluate_statementContext,i)


        def dihedral_assign(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Dihedral_assignContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Dihedral_assignContext,i)


        def Integer_CF(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Integer_CF)
            else:
                return self.getToken(XplorMRParser.Integer_CF, i)

        def Real_CF(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Real_CF)
            else:
                return self.getToken(XplorMRParser.Real_CF, i)

        def Simple_name_CF(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Simple_name_CF)
            else:
                return self.getToken(XplorMRParser.Simple_name_CF, i)

        def getRuleIndex(self):
            return XplorMRParser.RULE_dihedral_assign_loop

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDihedral_assign_loop" ):
                listener.enterDihedral_assign_loop(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDihedral_assign_loop" ):
                listener.exitDihedral_assign_loop(self)




    def dihedral_assign_loop(self):

        localctx = XplorMRParser.Dihedral_assign_loopContext(self, self._ctx, self.state)
        self.enterRule(localctx, 232, self.RULE_dihedral_assign_loop)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2667
            self.match(XplorMRParser.For)
            self.state = 2668
            self.match(XplorMRParser.Symbol_name_CF)
            self.state = 2669
            self.match(XplorMRParser.In_CF)
            self.state = 2670
            self.match(XplorMRParser.L_paren_CF)
            self.state = 2689
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,301,self._ctx)
            if la_ == 1:
                self.state = 2674
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==XplorMRParser.Integer_CF:
                    self.state = 2671
                    self.match(XplorMRParser.Integer_CF)
                    self.state = 2676
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 2:
                self.state = 2680
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==XplorMRParser.Real_CF:
                    self.state = 2677
                    self.match(XplorMRParser.Real_CF)
                    self.state = 2682
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 3:
                self.state = 2686
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==XplorMRParser.Simple_name_CF:
                    self.state = 2683
                    self.match(XplorMRParser.Simple_name_CF)
                    self.state = 2688
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass


            self.state = 2691
            self.match(XplorMRParser.R_paren_CF)
            self.state = 2692
            self.match(XplorMRParser.Loop)
            self.state = 2693
            self.match(XplorMRParser.Simple_name_LL)
            self.state = 2698
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==XplorMRParser.Assign or _la==XplorMRParser.Evaluate_Lp:
                self.state = 2696
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [XplorMRParser.Evaluate_Lp]:
                    self.state = 2694
                    self.evaluate_statement()
                    pass
                elif token in [XplorMRParser.Assign]:
                    self.state = 2695
                    self.dihedral_assign()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 2700
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2701
            self.match(XplorMRParser.End)
            self.state = 2702
            self.match(XplorMRParser.Loop)
            self.state = 2703
            self.match(XplorMRParser.Simple_name_LL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Sani_assign_loopContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def For(self):
            return self.getToken(XplorMRParser.For, 0)

        def Symbol_name_CF(self):
            return self.getToken(XplorMRParser.Symbol_name_CF, 0)

        def In_CF(self):
            return self.getToken(XplorMRParser.In_CF, 0)

        def L_paren_CF(self):
            return self.getToken(XplorMRParser.L_paren_CF, 0)

        def R_paren_CF(self):
            return self.getToken(XplorMRParser.R_paren_CF, 0)

        def Loop(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Loop)
            else:
                return self.getToken(XplorMRParser.Loop, i)

        def Simple_name_LL(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Simple_name_LL)
            else:
                return self.getToken(XplorMRParser.Simple_name_LL, i)

        def End(self):
            return self.getToken(XplorMRParser.End, 0)

        def evaluate_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Evaluate_statementContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Evaluate_statementContext,i)


        def sani_assign(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Sani_assignContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Sani_assignContext,i)


        def Integer_CF(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Integer_CF)
            else:
                return self.getToken(XplorMRParser.Integer_CF, i)

        def Real_CF(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Real_CF)
            else:
                return self.getToken(XplorMRParser.Real_CF, i)

        def Simple_name_CF(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Simple_name_CF)
            else:
                return self.getToken(XplorMRParser.Simple_name_CF, i)

        def getRuleIndex(self):
            return XplorMRParser.RULE_sani_assign_loop

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSani_assign_loop" ):
                listener.enterSani_assign_loop(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSani_assign_loop" ):
                listener.exitSani_assign_loop(self)




    def sani_assign_loop(self):

        localctx = XplorMRParser.Sani_assign_loopContext(self, self._ctx, self.state)
        self.enterRule(localctx, 234, self.RULE_sani_assign_loop)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2705
            self.match(XplorMRParser.For)
            self.state = 2706
            self.match(XplorMRParser.Symbol_name_CF)
            self.state = 2707
            self.match(XplorMRParser.In_CF)
            self.state = 2708
            self.match(XplorMRParser.L_paren_CF)
            self.state = 2727
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,307,self._ctx)
            if la_ == 1:
                self.state = 2712
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==XplorMRParser.Integer_CF:
                    self.state = 2709
                    self.match(XplorMRParser.Integer_CF)
                    self.state = 2714
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 2:
                self.state = 2718
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==XplorMRParser.Real_CF:
                    self.state = 2715
                    self.match(XplorMRParser.Real_CF)
                    self.state = 2720
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 3:
                self.state = 2724
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==XplorMRParser.Simple_name_CF:
                    self.state = 2721
                    self.match(XplorMRParser.Simple_name_CF)
                    self.state = 2726
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass


            self.state = 2729
            self.match(XplorMRParser.R_paren_CF)
            self.state = 2730
            self.match(XplorMRParser.Loop)
            self.state = 2731
            self.match(XplorMRParser.Simple_name_LL)
            self.state = 2736
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==XplorMRParser.Assign or _la==XplorMRParser.Evaluate_Lp:
                self.state = 2734
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [XplorMRParser.Evaluate_Lp]:
                    self.state = 2732
                    self.evaluate_statement()
                    pass
                elif token in [XplorMRParser.Assign]:
                    self.state = 2733
                    self.sani_assign()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 2738
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2739
            self.match(XplorMRParser.End)
            self.state = 2740
            self.match(XplorMRParser.Loop)
            self.state = 2741
            self.match(XplorMRParser.Simple_name_LL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Xadc_assign_loopContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def For(self):
            return self.getToken(XplorMRParser.For, 0)

        def Symbol_name_CF(self):
            return self.getToken(XplorMRParser.Symbol_name_CF, 0)

        def In_CF(self):
            return self.getToken(XplorMRParser.In_CF, 0)

        def L_paren_CF(self):
            return self.getToken(XplorMRParser.L_paren_CF, 0)

        def R_paren_CF(self):
            return self.getToken(XplorMRParser.R_paren_CF, 0)

        def Loop(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Loop)
            else:
                return self.getToken(XplorMRParser.Loop, i)

        def Simple_name_LL(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Simple_name_LL)
            else:
                return self.getToken(XplorMRParser.Simple_name_LL, i)

        def End(self):
            return self.getToken(XplorMRParser.End, 0)

        def evaluate_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Evaluate_statementContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Evaluate_statementContext,i)


        def xadc_assign(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Xadc_assignContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Xadc_assignContext,i)


        def Integer_CF(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Integer_CF)
            else:
                return self.getToken(XplorMRParser.Integer_CF, i)

        def Real_CF(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Real_CF)
            else:
                return self.getToken(XplorMRParser.Real_CF, i)

        def Simple_name_CF(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Simple_name_CF)
            else:
                return self.getToken(XplorMRParser.Simple_name_CF, i)

        def getRuleIndex(self):
            return XplorMRParser.RULE_xadc_assign_loop

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterXadc_assign_loop" ):
                listener.enterXadc_assign_loop(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitXadc_assign_loop" ):
                listener.exitXadc_assign_loop(self)




    def xadc_assign_loop(self):

        localctx = XplorMRParser.Xadc_assign_loopContext(self, self._ctx, self.state)
        self.enterRule(localctx, 236, self.RULE_xadc_assign_loop)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2743
            self.match(XplorMRParser.For)
            self.state = 2744
            self.match(XplorMRParser.Symbol_name_CF)
            self.state = 2745
            self.match(XplorMRParser.In_CF)
            self.state = 2746
            self.match(XplorMRParser.L_paren_CF)
            self.state = 2765
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,313,self._ctx)
            if la_ == 1:
                self.state = 2750
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==XplorMRParser.Integer_CF:
                    self.state = 2747
                    self.match(XplorMRParser.Integer_CF)
                    self.state = 2752
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 2:
                self.state = 2756
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==XplorMRParser.Real_CF:
                    self.state = 2753
                    self.match(XplorMRParser.Real_CF)
                    self.state = 2758
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 3:
                self.state = 2762
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==XplorMRParser.Simple_name_CF:
                    self.state = 2759
                    self.match(XplorMRParser.Simple_name_CF)
                    self.state = 2764
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass


            self.state = 2767
            self.match(XplorMRParser.R_paren_CF)
            self.state = 2768
            self.match(XplorMRParser.Loop)
            self.state = 2769
            self.match(XplorMRParser.Simple_name_LL)
            self.state = 2774
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==XplorMRParser.Assign or _la==XplorMRParser.Evaluate_Lp:
                self.state = 2772
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [XplorMRParser.Evaluate_Lp]:
                    self.state = 2770
                    self.evaluate_statement()
                    pass
                elif token in [XplorMRParser.Assign]:
                    self.state = 2771
                    self.xadc_assign()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 2776
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2777
            self.match(XplorMRParser.End)
            self.state = 2778
            self.match(XplorMRParser.Loop)
            self.state = 2779
            self.match(XplorMRParser.Simple_name_LL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Coup_assign_loopContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def For(self):
            return self.getToken(XplorMRParser.For, 0)

        def Symbol_name_CF(self):
            return self.getToken(XplorMRParser.Symbol_name_CF, 0)

        def In_CF(self):
            return self.getToken(XplorMRParser.In_CF, 0)

        def L_paren_CF(self):
            return self.getToken(XplorMRParser.L_paren_CF, 0)

        def R_paren_CF(self):
            return self.getToken(XplorMRParser.R_paren_CF, 0)

        def Loop(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Loop)
            else:
                return self.getToken(XplorMRParser.Loop, i)

        def Simple_name_LL(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Simple_name_LL)
            else:
                return self.getToken(XplorMRParser.Simple_name_LL, i)

        def End(self):
            return self.getToken(XplorMRParser.End, 0)

        def evaluate_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Evaluate_statementContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Evaluate_statementContext,i)


        def coup_assign(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Coup_assignContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Coup_assignContext,i)


        def Integer_CF(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Integer_CF)
            else:
                return self.getToken(XplorMRParser.Integer_CF, i)

        def Real_CF(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Real_CF)
            else:
                return self.getToken(XplorMRParser.Real_CF, i)

        def Simple_name_CF(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Simple_name_CF)
            else:
                return self.getToken(XplorMRParser.Simple_name_CF, i)

        def getRuleIndex(self):
            return XplorMRParser.RULE_coup_assign_loop

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCoup_assign_loop" ):
                listener.enterCoup_assign_loop(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCoup_assign_loop" ):
                listener.exitCoup_assign_loop(self)




    def coup_assign_loop(self):

        localctx = XplorMRParser.Coup_assign_loopContext(self, self._ctx, self.state)
        self.enterRule(localctx, 238, self.RULE_coup_assign_loop)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2781
            self.match(XplorMRParser.For)
            self.state = 2782
            self.match(XplorMRParser.Symbol_name_CF)
            self.state = 2783
            self.match(XplorMRParser.In_CF)
            self.state = 2784
            self.match(XplorMRParser.L_paren_CF)
            self.state = 2803
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,319,self._ctx)
            if la_ == 1:
                self.state = 2788
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==XplorMRParser.Integer_CF:
                    self.state = 2785
                    self.match(XplorMRParser.Integer_CF)
                    self.state = 2790
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 2:
                self.state = 2794
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==XplorMRParser.Real_CF:
                    self.state = 2791
                    self.match(XplorMRParser.Real_CF)
                    self.state = 2796
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 3:
                self.state = 2800
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==XplorMRParser.Simple_name_CF:
                    self.state = 2797
                    self.match(XplorMRParser.Simple_name_CF)
                    self.state = 2802
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass


            self.state = 2805
            self.match(XplorMRParser.R_paren_CF)
            self.state = 2806
            self.match(XplorMRParser.Loop)
            self.state = 2807
            self.match(XplorMRParser.Simple_name_LL)
            self.state = 2812
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==XplorMRParser.Assign or _la==XplorMRParser.Evaluate_Lp:
                self.state = 2810
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [XplorMRParser.Evaluate_Lp]:
                    self.state = 2808
                    self.evaluate_statement()
                    pass
                elif token in [XplorMRParser.Assign]:
                    self.state = 2809
                    self.coup_assign()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 2814
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2815
            self.match(XplorMRParser.End)
            self.state = 2816
            self.match(XplorMRParser.Loop)
            self.state = 2817
            self.match(XplorMRParser.Simple_name_LL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Coll_assign_loopContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def For(self):
            return self.getToken(XplorMRParser.For, 0)

        def Symbol_name_CF(self):
            return self.getToken(XplorMRParser.Symbol_name_CF, 0)

        def In_CF(self):
            return self.getToken(XplorMRParser.In_CF, 0)

        def L_paren_CF(self):
            return self.getToken(XplorMRParser.L_paren_CF, 0)

        def R_paren_CF(self):
            return self.getToken(XplorMRParser.R_paren_CF, 0)

        def Loop(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Loop)
            else:
                return self.getToken(XplorMRParser.Loop, i)

        def Simple_name_LL(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Simple_name_LL)
            else:
                return self.getToken(XplorMRParser.Simple_name_LL, i)

        def End(self):
            return self.getToken(XplorMRParser.End, 0)

        def evaluate_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Evaluate_statementContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Evaluate_statementContext,i)


        def coll_assign(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Coll_assignContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Coll_assignContext,i)


        def Integer_CF(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Integer_CF)
            else:
                return self.getToken(XplorMRParser.Integer_CF, i)

        def Real_CF(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Real_CF)
            else:
                return self.getToken(XplorMRParser.Real_CF, i)

        def Simple_name_CF(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Simple_name_CF)
            else:
                return self.getToken(XplorMRParser.Simple_name_CF, i)

        def getRuleIndex(self):
            return XplorMRParser.RULE_coll_assign_loop

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColl_assign_loop" ):
                listener.enterColl_assign_loop(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColl_assign_loop" ):
                listener.exitColl_assign_loop(self)




    def coll_assign_loop(self):

        localctx = XplorMRParser.Coll_assign_loopContext(self, self._ctx, self.state)
        self.enterRule(localctx, 240, self.RULE_coll_assign_loop)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2819
            self.match(XplorMRParser.For)
            self.state = 2820
            self.match(XplorMRParser.Symbol_name_CF)
            self.state = 2821
            self.match(XplorMRParser.In_CF)
            self.state = 2822
            self.match(XplorMRParser.L_paren_CF)
            self.state = 2841
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,325,self._ctx)
            if la_ == 1:
                self.state = 2826
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==XplorMRParser.Integer_CF:
                    self.state = 2823
                    self.match(XplorMRParser.Integer_CF)
                    self.state = 2828
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 2:
                self.state = 2832
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==XplorMRParser.Real_CF:
                    self.state = 2829
                    self.match(XplorMRParser.Real_CF)
                    self.state = 2834
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 3:
                self.state = 2838
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==XplorMRParser.Simple_name_CF:
                    self.state = 2835
                    self.match(XplorMRParser.Simple_name_CF)
                    self.state = 2840
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass


            self.state = 2843
            self.match(XplorMRParser.R_paren_CF)
            self.state = 2844
            self.match(XplorMRParser.Loop)
            self.state = 2845
            self.match(XplorMRParser.Simple_name_LL)
            self.state = 2850
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==XplorMRParser.Assign or _la==XplorMRParser.Evaluate_Lp:
                self.state = 2848
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [XplorMRParser.Evaluate_Lp]:
                    self.state = 2846
                    self.evaluate_statement()
                    pass
                elif token in [XplorMRParser.Assign]:
                    self.state = 2847
                    self.coll_assign()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 2852
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2853
            self.match(XplorMRParser.End)
            self.state = 2854
            self.match(XplorMRParser.Loop)
            self.state = 2855
            self.match(XplorMRParser.Simple_name_LL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Csa_assign_loopContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def For(self):
            return self.getToken(XplorMRParser.For, 0)

        def Symbol_name_CF(self):
            return self.getToken(XplorMRParser.Symbol_name_CF, 0)

        def In_CF(self):
            return self.getToken(XplorMRParser.In_CF, 0)

        def L_paren_CF(self):
            return self.getToken(XplorMRParser.L_paren_CF, 0)

        def R_paren_CF(self):
            return self.getToken(XplorMRParser.R_paren_CF, 0)

        def Loop(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Loop)
            else:
                return self.getToken(XplorMRParser.Loop, i)

        def Simple_name_LL(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Simple_name_LL)
            else:
                return self.getToken(XplorMRParser.Simple_name_LL, i)

        def End(self):
            return self.getToken(XplorMRParser.End, 0)

        def evaluate_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Evaluate_statementContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Evaluate_statementContext,i)


        def csa_assign(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Csa_assignContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Csa_assignContext,i)


        def Integer_CF(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Integer_CF)
            else:
                return self.getToken(XplorMRParser.Integer_CF, i)

        def Real_CF(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Real_CF)
            else:
                return self.getToken(XplorMRParser.Real_CF, i)

        def Simple_name_CF(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Simple_name_CF)
            else:
                return self.getToken(XplorMRParser.Simple_name_CF, i)

        def getRuleIndex(self):
            return XplorMRParser.RULE_csa_assign_loop

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCsa_assign_loop" ):
                listener.enterCsa_assign_loop(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCsa_assign_loop" ):
                listener.exitCsa_assign_loop(self)




    def csa_assign_loop(self):

        localctx = XplorMRParser.Csa_assign_loopContext(self, self._ctx, self.state)
        self.enterRule(localctx, 242, self.RULE_csa_assign_loop)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2857
            self.match(XplorMRParser.For)
            self.state = 2858
            self.match(XplorMRParser.Symbol_name_CF)
            self.state = 2859
            self.match(XplorMRParser.In_CF)
            self.state = 2860
            self.match(XplorMRParser.L_paren_CF)
            self.state = 2879
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,331,self._ctx)
            if la_ == 1:
                self.state = 2864
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==XplorMRParser.Integer_CF:
                    self.state = 2861
                    self.match(XplorMRParser.Integer_CF)
                    self.state = 2866
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 2:
                self.state = 2870
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==XplorMRParser.Real_CF:
                    self.state = 2867
                    self.match(XplorMRParser.Real_CF)
                    self.state = 2872
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 3:
                self.state = 2876
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==XplorMRParser.Simple_name_CF:
                    self.state = 2873
                    self.match(XplorMRParser.Simple_name_CF)
                    self.state = 2878
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass


            self.state = 2881
            self.match(XplorMRParser.R_paren_CF)
            self.state = 2882
            self.match(XplorMRParser.Loop)
            self.state = 2883
            self.match(XplorMRParser.Simple_name_LL)
            self.state = 2888
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==XplorMRParser.Assign or _la==XplorMRParser.Evaluate_Lp:
                self.state = 2886
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [XplorMRParser.Evaluate_Lp]:
                    self.state = 2884
                    self.evaluate_statement()
                    pass
                elif token in [XplorMRParser.Assign]:
                    self.state = 2885
                    self.csa_assign()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 2890
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2891
            self.match(XplorMRParser.End)
            self.state = 2892
            self.match(XplorMRParser.Loop)
            self.state = 2893
            self.match(XplorMRParser.Simple_name_LL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pre_assign_loopContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def For(self):
            return self.getToken(XplorMRParser.For, 0)

        def Symbol_name_CF(self):
            return self.getToken(XplorMRParser.Symbol_name_CF, 0)

        def In_CF(self):
            return self.getToken(XplorMRParser.In_CF, 0)

        def L_paren_CF(self):
            return self.getToken(XplorMRParser.L_paren_CF, 0)

        def R_paren_CF(self):
            return self.getToken(XplorMRParser.R_paren_CF, 0)

        def Loop(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Loop)
            else:
                return self.getToken(XplorMRParser.Loop, i)

        def Simple_name_LL(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Simple_name_LL)
            else:
                return self.getToken(XplorMRParser.Simple_name_LL, i)

        def End(self):
            return self.getToken(XplorMRParser.End, 0)

        def evaluate_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Evaluate_statementContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Evaluate_statementContext,i)


        def pre_assign(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Pre_assignContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Pre_assignContext,i)


        def Integer_CF(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Integer_CF)
            else:
                return self.getToken(XplorMRParser.Integer_CF, i)

        def Real_CF(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Real_CF)
            else:
                return self.getToken(XplorMRParser.Real_CF, i)

        def Simple_name_CF(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Simple_name_CF)
            else:
                return self.getToken(XplorMRParser.Simple_name_CF, i)

        def getRuleIndex(self):
            return XplorMRParser.RULE_pre_assign_loop

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPre_assign_loop" ):
                listener.enterPre_assign_loop(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPre_assign_loop" ):
                listener.exitPre_assign_loop(self)




    def pre_assign_loop(self):

        localctx = XplorMRParser.Pre_assign_loopContext(self, self._ctx, self.state)
        self.enterRule(localctx, 244, self.RULE_pre_assign_loop)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2895
            self.match(XplorMRParser.For)
            self.state = 2896
            self.match(XplorMRParser.Symbol_name_CF)
            self.state = 2897
            self.match(XplorMRParser.In_CF)
            self.state = 2898
            self.match(XplorMRParser.L_paren_CF)
            self.state = 2917
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,337,self._ctx)
            if la_ == 1:
                self.state = 2902
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==XplorMRParser.Integer_CF:
                    self.state = 2899
                    self.match(XplorMRParser.Integer_CF)
                    self.state = 2904
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 2:
                self.state = 2908
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==XplorMRParser.Real_CF:
                    self.state = 2905
                    self.match(XplorMRParser.Real_CF)
                    self.state = 2910
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 3:
                self.state = 2914
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==XplorMRParser.Simple_name_CF:
                    self.state = 2911
                    self.match(XplorMRParser.Simple_name_CF)
                    self.state = 2916
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass


            self.state = 2919
            self.match(XplorMRParser.R_paren_CF)
            self.state = 2920
            self.match(XplorMRParser.Loop)
            self.state = 2921
            self.match(XplorMRParser.Simple_name_LL)
            self.state = 2926
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==XplorMRParser.Assign or _la==XplorMRParser.Evaluate_Lp:
                self.state = 2924
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [XplorMRParser.Evaluate_Lp]:
                    self.state = 2922
                    self.evaluate_statement()
                    pass
                elif token in [XplorMRParser.Assign]:
                    self.state = 2923
                    self.pre_assign()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 2928
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2929
            self.match(XplorMRParser.End)
            self.state = 2930
            self.match(XplorMRParser.Loop)
            self.state = 2931
            self.match(XplorMRParser.Simple_name_LL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pcs_assign_loopContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def For(self):
            return self.getToken(XplorMRParser.For, 0)

        def Symbol_name_CF(self):
            return self.getToken(XplorMRParser.Symbol_name_CF, 0)

        def In_CF(self):
            return self.getToken(XplorMRParser.In_CF, 0)

        def L_paren_CF(self):
            return self.getToken(XplorMRParser.L_paren_CF, 0)

        def R_paren_CF(self):
            return self.getToken(XplorMRParser.R_paren_CF, 0)

        def Loop(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Loop)
            else:
                return self.getToken(XplorMRParser.Loop, i)

        def Simple_name_LL(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Simple_name_LL)
            else:
                return self.getToken(XplorMRParser.Simple_name_LL, i)

        def End(self):
            return self.getToken(XplorMRParser.End, 0)

        def evaluate_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Evaluate_statementContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Evaluate_statementContext,i)


        def pcs_assign(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Pcs_assignContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Pcs_assignContext,i)


        def Integer_CF(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Integer_CF)
            else:
                return self.getToken(XplorMRParser.Integer_CF, i)

        def Real_CF(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Real_CF)
            else:
                return self.getToken(XplorMRParser.Real_CF, i)

        def Simple_name_CF(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Simple_name_CF)
            else:
                return self.getToken(XplorMRParser.Simple_name_CF, i)

        def getRuleIndex(self):
            return XplorMRParser.RULE_pcs_assign_loop

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPcs_assign_loop" ):
                listener.enterPcs_assign_loop(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPcs_assign_loop" ):
                listener.exitPcs_assign_loop(self)




    def pcs_assign_loop(self):

        localctx = XplorMRParser.Pcs_assign_loopContext(self, self._ctx, self.state)
        self.enterRule(localctx, 246, self.RULE_pcs_assign_loop)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2933
            self.match(XplorMRParser.For)
            self.state = 2934
            self.match(XplorMRParser.Symbol_name_CF)
            self.state = 2935
            self.match(XplorMRParser.In_CF)
            self.state = 2936
            self.match(XplorMRParser.L_paren_CF)
            self.state = 2955
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,343,self._ctx)
            if la_ == 1:
                self.state = 2940
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==XplorMRParser.Integer_CF:
                    self.state = 2937
                    self.match(XplorMRParser.Integer_CF)
                    self.state = 2942
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 2:
                self.state = 2946
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==XplorMRParser.Real_CF:
                    self.state = 2943
                    self.match(XplorMRParser.Real_CF)
                    self.state = 2948
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 3:
                self.state = 2952
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==XplorMRParser.Simple_name_CF:
                    self.state = 2949
                    self.match(XplorMRParser.Simple_name_CF)
                    self.state = 2954
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass


            self.state = 2957
            self.match(XplorMRParser.R_paren_CF)
            self.state = 2958
            self.match(XplorMRParser.Loop)
            self.state = 2959
            self.match(XplorMRParser.Simple_name_LL)
            self.state = 2964
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==XplorMRParser.Assign or _la==XplorMRParser.Evaluate_Lp:
                self.state = 2962
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [XplorMRParser.Evaluate_Lp]:
                    self.state = 2960
                    self.evaluate_statement()
                    pass
                elif token in [XplorMRParser.Assign]:
                    self.state = 2961
                    self.pcs_assign()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 2966
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2967
            self.match(XplorMRParser.End)
            self.state = 2968
            self.match(XplorMRParser.Loop)
            self.state = 2969
            self.match(XplorMRParser.Simple_name_LL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Hbond_assign_loopContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def For(self):
            return self.getToken(XplorMRParser.For, 0)

        def Symbol_name_CF(self):
            return self.getToken(XplorMRParser.Symbol_name_CF, 0)

        def In_CF(self):
            return self.getToken(XplorMRParser.In_CF, 0)

        def L_paren_CF(self):
            return self.getToken(XplorMRParser.L_paren_CF, 0)

        def R_paren_CF(self):
            return self.getToken(XplorMRParser.R_paren_CF, 0)

        def Loop(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Loop)
            else:
                return self.getToken(XplorMRParser.Loop, i)

        def Simple_name_LL(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Simple_name_LL)
            else:
                return self.getToken(XplorMRParser.Simple_name_LL, i)

        def End(self):
            return self.getToken(XplorMRParser.End, 0)

        def evaluate_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Evaluate_statementContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Evaluate_statementContext,i)


        def hbond_assign(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Hbond_assignContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Hbond_assignContext,i)


        def Integer_CF(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Integer_CF)
            else:
                return self.getToken(XplorMRParser.Integer_CF, i)

        def Real_CF(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Real_CF)
            else:
                return self.getToken(XplorMRParser.Real_CF, i)

        def Simple_name_CF(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Simple_name_CF)
            else:
                return self.getToken(XplorMRParser.Simple_name_CF, i)

        def getRuleIndex(self):
            return XplorMRParser.RULE_hbond_assign_loop

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHbond_assign_loop" ):
                listener.enterHbond_assign_loop(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHbond_assign_loop" ):
                listener.exitHbond_assign_loop(self)




    def hbond_assign_loop(self):

        localctx = XplorMRParser.Hbond_assign_loopContext(self, self._ctx, self.state)
        self.enterRule(localctx, 248, self.RULE_hbond_assign_loop)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2971
            self.match(XplorMRParser.For)
            self.state = 2972
            self.match(XplorMRParser.Symbol_name_CF)
            self.state = 2973
            self.match(XplorMRParser.In_CF)
            self.state = 2974
            self.match(XplorMRParser.L_paren_CF)
            self.state = 2993
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,349,self._ctx)
            if la_ == 1:
                self.state = 2978
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==XplorMRParser.Integer_CF:
                    self.state = 2975
                    self.match(XplorMRParser.Integer_CF)
                    self.state = 2980
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 2:
                self.state = 2984
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==XplorMRParser.Real_CF:
                    self.state = 2981
                    self.match(XplorMRParser.Real_CF)
                    self.state = 2986
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 3:
                self.state = 2990
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==XplorMRParser.Simple_name_CF:
                    self.state = 2987
                    self.match(XplorMRParser.Simple_name_CF)
                    self.state = 2992
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass


            self.state = 2995
            self.match(XplorMRParser.R_paren_CF)
            self.state = 2996
            self.match(XplorMRParser.Loop)
            self.state = 2997
            self.match(XplorMRParser.Simple_name_LL)
            self.state = 3002
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==XplorMRParser.Assign or _la==XplorMRParser.Evaluate_Lp:
                self.state = 3000
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [XplorMRParser.Evaluate_Lp]:
                    self.state = 2998
                    self.evaluate_statement()
                    pass
                elif token in [XplorMRParser.Assign]:
                    self.state = 2999
                    self.hbond_assign()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 3004
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 3005
            self.match(XplorMRParser.End)
            self.state = 3006
            self.match(XplorMRParser.Loop)
            self.state = 3007
            self.match(XplorMRParser.Simple_name_LL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Hbond_db_assign_loopContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def For(self):
            return self.getToken(XplorMRParser.For, 0)

        def Symbol_name_CF(self):
            return self.getToken(XplorMRParser.Symbol_name_CF, 0)

        def In_CF(self):
            return self.getToken(XplorMRParser.In_CF, 0)

        def L_paren_CF(self):
            return self.getToken(XplorMRParser.L_paren_CF, 0)

        def R_paren_CF(self):
            return self.getToken(XplorMRParser.R_paren_CF, 0)

        def Loop(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Loop)
            else:
                return self.getToken(XplorMRParser.Loop, i)

        def Simple_name_LL(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Simple_name_LL)
            else:
                return self.getToken(XplorMRParser.Simple_name_LL, i)

        def End(self):
            return self.getToken(XplorMRParser.End, 0)

        def evaluate_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Evaluate_statementContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Evaluate_statementContext,i)


        def hbond_db_assign(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Hbond_db_assignContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Hbond_db_assignContext,i)


        def Integer_CF(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Integer_CF)
            else:
                return self.getToken(XplorMRParser.Integer_CF, i)

        def Real_CF(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Real_CF)
            else:
                return self.getToken(XplorMRParser.Real_CF, i)

        def Simple_name_CF(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Simple_name_CF)
            else:
                return self.getToken(XplorMRParser.Simple_name_CF, i)

        def getRuleIndex(self):
            return XplorMRParser.RULE_hbond_db_assign_loop

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHbond_db_assign_loop" ):
                listener.enterHbond_db_assign_loop(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHbond_db_assign_loop" ):
                listener.exitHbond_db_assign_loop(self)




    def hbond_db_assign_loop(self):

        localctx = XplorMRParser.Hbond_db_assign_loopContext(self, self._ctx, self.state)
        self.enterRule(localctx, 250, self.RULE_hbond_db_assign_loop)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3009
            self.match(XplorMRParser.For)
            self.state = 3010
            self.match(XplorMRParser.Symbol_name_CF)
            self.state = 3011
            self.match(XplorMRParser.In_CF)
            self.state = 3012
            self.match(XplorMRParser.L_paren_CF)
            self.state = 3031
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,355,self._ctx)
            if la_ == 1:
                self.state = 3016
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==XplorMRParser.Integer_CF:
                    self.state = 3013
                    self.match(XplorMRParser.Integer_CF)
                    self.state = 3018
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 2:
                self.state = 3022
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==XplorMRParser.Real_CF:
                    self.state = 3019
                    self.match(XplorMRParser.Real_CF)
                    self.state = 3024
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 3:
                self.state = 3028
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==XplorMRParser.Simple_name_CF:
                    self.state = 3025
                    self.match(XplorMRParser.Simple_name_CF)
                    self.state = 3030
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass


            self.state = 3033
            self.match(XplorMRParser.R_paren_CF)
            self.state = 3034
            self.match(XplorMRParser.Loop)
            self.state = 3035
            self.match(XplorMRParser.Simple_name_LL)
            self.state = 3040
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==XplorMRParser.Assign or _la==XplorMRParser.Evaluate_Lp:
                self.state = 3038
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [XplorMRParser.Evaluate_Lp]:
                    self.state = 3036
                    self.evaluate_statement()
                    pass
                elif token in [XplorMRParser.Assign]:
                    self.state = 3037
                    self.hbond_db_assign()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 3042
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 3043
            self.match(XplorMRParser.End)
            self.state = 3044
            self.match(XplorMRParser.Loop)
            self.state = 3045
            self.match(XplorMRParser.Simple_name_LL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx



    def sempred(self, localctx:RuleContext, ruleIndex:int, predIndex:int):
        if self._predicates == None:
            self._predicates = dict()
        self._predicates[97] = self.factor_sempred
        pred = self._predicates.get(ruleIndex, None)
        if pred is None:
            raise Exception("No predicate with index:" + str(ruleIndex))
        else:
            return pred(localctx, predIndex)

    def factor_sempred(self, localctx:FactorContext, predIndex:int):
            if predIndex == 0:
                return self.precpred(self._ctx, 32)
         

            if predIndex == 1:
                return self.precpred(self._ctx, 14)
         




