# Generated from XplorMRParser.g4 by ANTLR 4.10.1
# encoding: utf-8
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
	from typing import TextIO
else:
	from typing.io import TextIO

def serializedATN():
    return [
        4,1,267,2163,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,
        7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,
        13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,
        20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,
        26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,
        33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,
        39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,
        46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,52,7,
        52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,2,57,7,57,2,58,7,58,2,
        59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,2,64,7,64,2,65,7,
        65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,2,71,7,71,2,
        72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,7,77,2,78,7,
        78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,2,84,7,84,2,
        85,7,85,2,86,7,86,2,87,7,87,2,88,7,88,2,89,7,89,2,90,7,90,2,91,7,
        91,2,92,7,92,2,93,7,93,2,94,7,94,2,95,7,95,2,96,7,96,2,97,7,97,2,
        98,7,98,2,99,7,99,2,100,7,100,2,101,7,101,2,102,7,102,2,103,7,103,
        2,104,7,104,2,105,7,105,2,106,7,106,1,0,1,0,1,0,1,0,1,0,1,0,1,0,
        1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,
        1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,
        5,0,254,8,0,10,0,12,0,257,9,0,1,0,1,0,1,1,1,1,5,1,263,8,1,10,1,12,
        1,266,9,1,1,1,1,1,1,2,3,2,271,8,2,1,2,1,2,5,2,275,8,2,10,2,12,2,
        278,9,2,1,2,1,2,1,3,1,3,5,3,284,8,3,10,3,12,3,287,9,3,1,3,1,3,1,
        3,5,3,292,8,3,10,3,12,3,295,9,3,1,3,1,3,1,3,5,3,300,8,3,10,3,12,
        3,303,9,3,1,3,1,3,1,3,5,3,308,8,3,10,3,12,3,311,9,3,1,3,1,3,1,3,
        5,3,316,8,3,10,3,12,3,319,9,3,1,3,3,3,322,8,3,1,4,3,4,325,8,4,1,
        4,1,4,5,4,329,8,4,10,4,12,4,332,9,4,1,4,1,4,1,5,3,5,337,8,5,1,5,
        1,5,5,5,341,8,5,10,5,12,5,344,9,5,1,5,1,5,1,6,1,6,5,6,350,8,6,10,
        6,12,6,353,9,6,1,6,1,6,1,7,1,7,5,7,359,8,7,10,7,12,7,362,9,7,1,7,
        1,7,1,8,1,8,5,8,368,8,8,10,8,12,8,371,9,8,1,8,1,8,1,9,1,9,5,9,377,
        8,9,10,9,12,9,380,9,9,1,9,1,9,1,10,1,10,5,10,386,8,10,10,10,12,10,
        389,9,10,1,10,1,10,1,11,1,11,5,11,395,8,11,10,11,12,11,398,9,11,
        1,11,1,11,1,12,1,12,5,12,404,8,12,10,12,12,12,407,9,12,1,12,1,12,
        1,13,1,13,5,13,413,8,13,10,13,12,13,416,9,13,1,13,1,13,1,14,1,14,
        5,14,422,8,14,10,14,12,14,425,9,14,1,14,1,14,1,15,1,15,5,15,431,
        8,15,10,15,12,15,434,9,15,1,15,1,15,1,16,1,16,5,16,440,8,16,10,16,
        12,16,443,9,16,1,16,1,16,1,17,1,17,5,17,449,8,17,10,17,12,17,452,
        9,17,1,17,1,17,1,18,1,18,5,18,458,8,18,10,18,12,18,461,9,18,1,18,
        1,18,1,19,1,19,5,19,467,8,19,10,19,12,19,470,9,19,1,19,1,19,1,20,
        1,20,5,20,476,8,20,10,20,12,20,479,9,20,1,20,1,20,1,21,1,21,5,21,
        485,8,21,10,21,12,21,488,9,21,1,21,1,21,1,22,1,22,5,22,494,8,22,
        10,22,12,22,497,9,22,1,22,1,22,1,23,1,23,5,23,503,8,23,10,23,12,
        23,506,9,23,1,23,1,23,1,24,1,24,5,24,512,8,24,10,24,12,24,515,9,
        24,1,24,1,24,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,
        25,1,25,3,25,531,8,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,
        25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,3,25,550,8,25,1,25,1,
        25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,3,25,563,8,25,1,
        25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,
        25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,3,25,587,8,25,1,25,3,
        25,590,8,25,1,26,1,26,1,26,1,26,1,26,1,26,1,26,5,26,599,8,26,10,
        26,12,26,602,9,26,1,26,1,26,1,26,1,26,5,26,608,8,26,10,26,12,26,
        611,9,26,1,27,1,27,3,27,615,8,27,1,27,1,27,1,27,3,27,620,8,27,1,
        27,1,27,1,27,1,27,1,27,3,27,627,8,27,1,28,1,28,3,28,631,8,28,1,28,
        1,28,1,28,3,28,636,8,28,1,28,1,28,1,28,3,28,641,8,28,1,28,1,28,1,
        28,3,28,646,8,28,1,28,1,28,1,28,3,28,651,8,28,1,28,1,28,1,28,3,28,
        656,8,28,1,28,1,28,1,28,3,28,661,8,28,1,28,3,28,664,8,28,1,29,1,
        29,1,29,3,29,669,8,29,1,29,1,29,1,29,1,29,3,29,675,8,29,1,30,1,30,
        1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,31,1,31,1,31,1,31,1,31,
        1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,
        3,31,705,8,31,1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,
        3,32,717,8,32,1,33,1,33,1,33,1,33,1,33,1,33,1,33,1,33,1,33,1,33,
        1,33,1,33,1,33,1,33,1,33,1,33,1,33,1,33,1,33,1,33,1,33,1,33,1,33,
        1,33,1,33,1,33,3,33,745,8,33,1,34,1,34,1,34,1,34,1,34,1,34,1,34,
        1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,3,34,762,8,34,1,35,1,35,
        1,35,3,35,767,8,35,1,35,1,35,1,35,1,35,1,35,1,35,1,35,1,35,1,35,
        1,35,1,35,3,35,780,8,35,1,35,1,35,1,35,1,35,1,35,3,35,787,8,35,1,
        36,1,36,1,36,1,36,1,36,1,36,1,36,1,36,1,36,1,36,1,37,1,37,1,37,1,
        37,1,37,1,37,1,37,1,37,1,37,1,37,1,37,1,37,1,37,3,37,812,8,37,1,
        38,1,38,1,38,1,38,1,38,1,38,1,39,1,39,1,39,1,39,1,39,1,39,1,39,1,
        39,1,39,1,39,1,39,1,39,1,39,1,39,1,39,1,39,1,39,1,39,1,39,1,39,1,
        39,3,39,841,8,39,1,40,1,40,1,40,1,40,1,40,1,40,1,40,1,40,1,41,1,
        41,5,41,853,8,41,10,41,12,41,856,9,41,1,41,1,41,3,41,860,8,41,1,
        42,1,42,3,42,864,8,42,1,42,1,42,1,42,3,42,869,8,42,1,42,3,42,872,
        8,42,1,43,1,43,3,43,876,8,43,1,43,1,43,1,43,3,43,881,8,43,1,43,1,
        43,1,43,3,43,886,8,43,1,43,1,43,3,43,890,8,43,1,43,1,43,1,43,1,43,
        3,43,896,8,43,1,43,1,43,3,43,900,8,43,1,43,1,43,3,43,904,8,43,1,
        43,3,43,907,8,43,3,43,909,8,43,1,43,1,43,3,43,913,8,43,1,44,1,44,
        1,44,1,44,1,44,1,44,1,45,1,45,1,45,1,45,1,45,1,45,1,45,1,45,1,45,
        1,45,1,45,1,45,1,45,1,45,1,45,1,45,3,45,937,8,45,1,45,1,45,1,45,
        1,45,1,45,1,45,3,45,945,8,45,1,46,1,46,1,46,1,46,1,47,1,47,1,47,
        1,47,1,47,1,47,1,47,1,47,1,47,1,47,1,47,3,47,962,8,47,1,47,1,47,
        1,47,1,47,1,47,1,47,3,47,970,8,47,1,47,1,47,1,47,1,47,3,47,976,8,
        47,1,47,1,47,1,47,1,47,1,47,1,47,1,47,1,47,1,47,3,47,987,8,47,1,
        47,3,47,990,8,47,1,48,1,48,1,48,1,48,1,48,1,48,1,48,1,48,1,48,1,
        48,3,48,1002,8,48,1,48,1,48,1,48,1,48,1,48,3,48,1009,8,48,1,49,1,
        49,1,49,1,49,1,49,1,49,1,49,1,49,1,49,1,49,1,49,1,49,1,49,1,49,1,
        49,1,49,1,49,1,49,1,49,1,49,1,49,1,49,1,49,1,49,1,49,1,49,3,49,1037,
        8,49,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,51,1,51,1,51,
        1,51,1,51,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,
        1,52,1,52,1,52,1,52,1,52,1,52,1,52,3,52,1071,8,52,1,52,1,52,1,52,
        1,52,1,52,1,52,1,52,1,52,3,52,1081,8,52,1,52,1,52,1,52,3,52,1086,
        8,52,1,53,1,53,1,53,3,53,1091,8,53,1,53,1,53,3,53,1095,8,53,1,54,
        1,54,1,54,1,54,1,55,1,55,1,55,1,55,1,55,1,55,3,55,1107,8,55,1,55,
        1,55,1,56,1,56,1,56,1,57,1,57,1,57,1,58,1,58,1,58,1,59,1,59,1,59,
        1,60,1,60,1,60,1,60,1,60,1,60,1,60,1,60,3,60,1131,8,60,1,61,1,61,
        1,61,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,
        1,62,1,62,1,62,3,62,1151,8,62,1,62,1,62,1,62,1,62,3,62,1157,8,62,
        1,62,1,62,1,62,1,62,3,62,1163,8,62,1,62,1,62,1,62,1,62,1,62,1,62,
        1,62,1,62,1,62,1,62,3,62,1175,8,62,1,62,1,62,1,62,1,62,3,62,1181,
        8,62,1,62,1,62,1,62,1,62,3,62,1187,8,62,1,62,1,62,1,62,1,62,1,62,
        1,62,3,62,1195,8,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,3,62,
        1205,8,62,1,62,1,62,1,62,1,62,3,62,1211,8,62,1,62,1,62,1,62,1,62,
        3,62,1217,8,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,3,62,
        1228,8,62,1,62,3,62,1231,8,62,1,62,3,62,1234,8,62,1,62,1,62,3,62,
        1238,8,62,1,63,1,63,1,63,1,63,1,63,1,63,1,63,1,63,1,63,1,63,3,63,
        1250,8,63,1,63,1,63,1,63,1,63,1,63,3,63,1257,8,63,1,63,1,63,1,63,
        1,63,1,63,3,63,1264,8,63,1,64,1,64,1,64,1,64,1,64,3,64,1271,8,64,
        1,65,1,65,1,65,1,65,1,65,1,66,1,66,1,66,1,66,1,66,1,66,1,66,1,66,
        1,66,1,66,1,66,1,66,1,66,1,66,1,66,1,66,1,66,1,66,1,66,1,66,1,66,
        1,66,3,66,1300,8,66,1,67,1,67,1,67,1,67,1,67,1,67,1,67,1,67,1,67,
        1,67,1,68,1,68,1,68,1,68,1,68,1,68,1,68,1,68,1,68,1,68,1,68,1,68,
        1,68,1,68,1,68,1,68,1,68,1,68,1,68,1,68,1,68,1,68,1,68,1,68,1,68,
        1,68,1,68,1,68,1,68,1,68,1,68,1,68,1,68,1,68,1,68,1,68,1,68,1,68,
        3,68,1350,8,68,1,68,1,68,1,68,1,68,1,68,1,68,1,68,1,68,1,68,1,68,
        1,68,1,68,1,68,1,68,1,68,1,68,1,68,3,68,1369,8,68,1,69,1,69,1,69,
        1,69,1,69,1,69,1,70,1,70,1,70,1,70,1,70,1,70,1,70,1,70,1,70,1,70,
        1,70,1,70,1,70,1,70,1,70,1,70,1,70,1,70,1,70,1,70,1,70,1,70,1,70,
        1,70,1,70,1,70,1,70,3,70,1404,8,70,1,71,1,71,1,71,1,71,1,71,1,71,
        1,71,1,71,1,71,1,71,1,71,1,71,1,72,1,72,1,72,1,72,1,72,1,72,1,72,
        1,72,1,72,1,72,1,72,1,72,1,72,1,72,1,72,1,72,1,72,1,72,1,72,1,72,
        1,72,1,72,1,72,1,72,1,72,1,72,3,72,1444,8,72,1,73,1,73,1,73,1,73,
        1,73,1,73,1,73,1,73,1,73,1,73,1,73,1,73,1,73,1,73,1,73,1,73,1,73,
        1,73,1,73,1,73,1,73,1,73,3,73,1468,8,73,1,74,1,74,1,74,1,74,1,74,
        1,74,1,74,1,74,1,74,1,74,1,74,1,74,1,75,1,75,1,75,1,75,1,75,1,75,
        1,75,1,75,1,75,1,75,1,75,1,75,1,75,1,75,1,75,1,75,1,75,1,75,1,75,
        1,75,1,75,1,75,1,75,3,75,1505,8,75,1,75,1,75,1,75,1,75,1,75,1,75,
        3,75,1513,8,75,1,76,1,76,1,76,1,76,1,76,1,76,1,76,1,76,1,76,1,76,
        1,76,1,76,1,76,3,76,1528,8,76,1,77,1,77,1,77,3,77,1533,8,77,1,77,
        1,77,1,77,3,77,1538,8,77,1,77,1,77,1,77,1,77,3,77,1544,8,77,1,77,
        1,77,1,77,3,77,1549,8,77,1,77,1,77,1,77,1,77,3,77,1555,8,77,1,77,
        1,77,1,77,1,77,3,77,1561,8,77,1,77,1,77,1,77,1,77,3,77,1567,8,77,
        1,77,1,77,1,77,1,77,1,77,1,77,1,77,1,77,1,77,1,77,3,77,1579,8,77,
        1,77,1,77,3,77,1583,8,77,1,78,1,78,1,78,1,78,1,78,1,78,1,79,1,79,
        1,79,1,79,1,79,1,79,1,79,1,79,1,79,1,79,1,79,1,79,1,79,1,79,1,79,
        1,79,1,79,1,79,1,79,3,79,1610,8,79,1,79,1,79,1,79,1,79,1,79,1,79,
        1,79,1,79,1,79,1,79,1,79,1,79,1,79,1,79,1,79,3,79,1627,8,79,1,80,
        1,80,1,80,1,80,1,80,1,80,1,80,1,80,1,80,1,81,1,81,1,81,1,81,1,81,
        1,81,1,81,1,81,1,81,1,81,1,81,1,81,1,81,1,81,1,81,1,81,1,81,1,81,
        1,81,1,81,1,81,1,81,1,81,1,81,1,81,1,81,3,81,1664,8,81,1,82,1,82,
        1,82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,1,83,1,83,1,83,1,83,1,83,
        1,83,1,83,1,83,1,83,1,83,1,83,3,83,1687,8,83,1,84,1,84,1,84,1,84,
        1,84,1,84,1,84,1,85,1,85,1,85,1,85,1,85,1,85,1,85,1,85,1,85,1,85,
        1,85,1,85,1,85,1,85,1,85,1,85,1,85,3,85,1713,8,85,1,86,1,86,1,86,
        1,86,1,86,1,86,1,86,1,87,1,87,1,87,1,87,1,87,1,87,1,87,1,87,1,87,
        1,87,1,87,3,87,1733,8,87,1,88,1,88,1,88,1,88,1,88,1,89,1,89,1,89,
        3,89,1743,8,89,1,89,1,89,1,89,3,89,1748,8,89,1,89,1,89,1,89,3,89,
        1753,8,89,1,89,1,89,1,89,3,89,1758,8,89,1,89,1,89,1,89,3,89,1763,
        8,89,1,89,1,89,1,89,3,89,1768,8,89,1,89,1,89,1,89,3,89,1773,8,89,
        1,89,1,89,1,89,3,89,1778,8,89,1,89,1,89,1,89,3,89,1783,8,89,1,89,
        1,89,1,89,3,89,1788,8,89,1,89,1,89,1,89,3,89,1793,8,89,1,89,1,89,
        1,89,3,89,1798,8,89,1,89,1,89,1,89,3,89,1803,8,89,1,89,3,89,1806,
        8,89,1,90,1,90,1,90,1,90,1,91,1,91,1,91,1,91,1,92,1,92,1,92,5,92,
        1819,8,92,10,92,12,92,1822,9,92,1,93,1,93,1,93,5,93,1827,8,93,10,
        93,12,93,1830,9,93,1,94,1,94,1,94,1,94,1,94,1,94,1,94,1,94,1,94,
        1,94,1,94,1,94,3,94,1844,8,94,1,94,1,94,1,94,1,94,1,94,1,94,1,94,
        1,94,1,94,1,94,1,94,1,94,1,94,1,94,3,94,1860,8,94,3,94,1862,8,94,
        1,94,1,94,1,94,1,94,1,94,1,94,1,94,1,94,1,94,3,94,1873,8,94,3,94,
        1875,8,94,1,94,1,94,1,94,1,94,1,94,1,94,3,94,1883,8,94,1,94,1,94,
        3,94,1887,8,94,1,94,1,94,1,94,1,94,1,94,1,94,1,94,1,94,1,94,3,94,
        1898,8,94,1,94,1,94,3,94,1902,8,94,1,94,1,94,3,94,1906,8,94,1,94,
        3,94,1909,8,94,1,94,1,94,1,94,1,94,1,94,1,94,1,94,1,94,1,94,1,94,
        1,94,3,94,1922,8,94,3,94,1924,8,94,1,94,1,94,1,94,1,94,1,94,3,94,
        1931,8,94,3,94,1933,8,94,1,94,1,94,1,94,1,94,1,94,3,94,1940,8,94,
        1,94,1,94,1,94,3,94,1945,8,94,3,94,1947,8,94,1,94,1,94,1,94,1,94,
        1,94,1,94,1,94,1,94,1,94,1,94,1,94,1,94,3,94,1961,8,94,1,94,1,94,
        1,94,1,94,1,94,1,94,5,94,1969,8,94,10,94,12,94,1972,9,94,1,95,1,
        95,1,96,1,96,1,97,1,97,1,98,1,98,1,99,1,99,1,99,5,99,1985,8,99,10,
        99,12,99,1988,9,99,1,99,3,99,1991,8,99,3,99,1993,8,99,1,99,1,99,
        5,99,1997,8,99,10,99,12,99,2000,9,99,1,99,1,99,1,100,1,100,1,100,
        1,100,1,101,1,101,1,101,1,101,1,101,1,101,3,101,2014,8,101,1,102,
        1,102,1,102,3,102,2019,8,102,1,103,1,103,1,103,5,103,2024,8,103,
        10,103,12,103,2027,9,103,1,104,1,104,1,104,1,104,1,104,1,104,3,104,
        2035,8,104,1,105,1,105,1,105,1,105,1,105,1,105,1,105,1,105,1,105,
        1,105,1,105,1,105,1,105,1,105,1,105,1,105,1,105,1,105,1,105,1,105,
        1,105,1,105,1,105,1,105,1,105,1,105,1,105,1,105,1,105,1,105,1,105,
        1,105,1,105,1,105,1,105,1,105,1,105,1,105,1,105,1,105,1,105,1,105,
        1,105,1,105,1,105,1,105,1,105,1,105,1,105,1,105,1,105,1,105,1,105,
        1,105,1,105,1,105,1,105,1,105,1,105,1,105,5,105,2097,8,105,10,105,
        12,105,2100,9,105,1,105,1,105,1,105,1,105,1,105,1,105,1,105,1,105,
        1,105,1,105,1,105,1,105,5,105,2114,8,105,10,105,12,105,2117,9,105,
        1,105,1,105,1,105,1,105,1,105,1,105,1,105,1,105,1,105,1,105,1,105,
        1,105,1,105,1,105,1,105,1,105,1,105,1,105,1,105,1,105,1,105,1,105,
        1,105,1,105,1,105,1,105,1,105,1,105,1,105,1,105,1,105,1,105,1,105,
        1,105,1,105,1,105,1,105,3,105,2156,8,105,1,106,1,106,1,106,1,106,
        1,106,1,106,0,1,188,107,0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,
        30,32,34,36,38,40,42,44,46,48,50,52,54,56,58,60,62,64,66,68,70,72,
        74,76,78,80,82,84,86,88,90,92,94,96,98,100,102,104,106,108,110,112,
        114,116,118,120,122,124,126,128,130,132,134,136,138,140,142,144,
        146,148,150,152,154,156,158,160,162,164,166,168,170,172,174,176,
        178,180,182,184,186,188,190,192,194,196,198,200,202,204,206,208,
        210,212,0,7,1,0,42,43,1,0,181,182,2,0,177,177,183,183,2,0,177,177,
        179,179,1,0,167,168,1,0,223,227,1,0,259,265,2572,0,255,1,0,0,0,2,
        260,1,0,0,0,4,270,1,0,0,0,6,321,1,0,0,0,8,324,1,0,0,0,10,336,1,0,
        0,0,12,347,1,0,0,0,14,356,1,0,0,0,16,365,1,0,0,0,18,374,1,0,0,0,
        20,383,1,0,0,0,22,392,1,0,0,0,24,401,1,0,0,0,26,410,1,0,0,0,28,419,
        1,0,0,0,30,428,1,0,0,0,32,437,1,0,0,0,34,446,1,0,0,0,36,455,1,0,
        0,0,38,464,1,0,0,0,40,473,1,0,0,0,42,482,1,0,0,0,44,491,1,0,0,0,
        46,500,1,0,0,0,48,509,1,0,0,0,50,589,1,0,0,0,52,591,1,0,0,0,54,626,
        1,0,0,0,56,663,1,0,0,0,58,674,1,0,0,0,60,676,1,0,0,0,62,704,1,0,
        0,0,64,706,1,0,0,0,66,744,1,0,0,0,68,746,1,0,0,0,70,786,1,0,0,0,
        72,788,1,0,0,0,74,811,1,0,0,0,76,813,1,0,0,0,78,840,1,0,0,0,80,842,
        1,0,0,0,82,859,1,0,0,0,84,871,1,0,0,0,86,912,1,0,0,0,88,914,1,0,
        0,0,90,944,1,0,0,0,92,946,1,0,0,0,94,989,1,0,0,0,96,991,1,0,0,0,
        98,1036,1,0,0,0,100,1038,1,0,0,0,102,1047,1,0,0,0,104,1085,1,0,0,
        0,106,1087,1,0,0,0,108,1096,1,0,0,0,110,1100,1,0,0,0,112,1110,1,
        0,0,0,114,1113,1,0,0,0,116,1116,1,0,0,0,118,1119,1,0,0,0,120,1122,
        1,0,0,0,122,1132,1,0,0,0,124,1237,1,0,0,0,126,1239,1,0,0,0,128,1270,
        1,0,0,0,130,1272,1,0,0,0,132,1299,1,0,0,0,134,1301,1,0,0,0,136,1368,
        1,0,0,0,138,1370,1,0,0,0,140,1403,1,0,0,0,142,1405,1,0,0,0,144,1443,
        1,0,0,0,146,1467,1,0,0,0,148,1469,1,0,0,0,150,1512,1,0,0,0,152,1514,
        1,0,0,0,154,1582,1,0,0,0,156,1584,1,0,0,0,158,1626,1,0,0,0,160,1628,
        1,0,0,0,162,1663,1,0,0,0,164,1665,1,0,0,0,166,1686,1,0,0,0,168,1688,
        1,0,0,0,170,1712,1,0,0,0,172,1714,1,0,0,0,174,1732,1,0,0,0,176,1734,
        1,0,0,0,178,1805,1,0,0,0,180,1807,1,0,0,0,182,1811,1,0,0,0,184,1815,
        1,0,0,0,186,1823,1,0,0,0,188,1960,1,0,0,0,190,1973,1,0,0,0,192,1975,
        1,0,0,0,194,1977,1,0,0,0,196,1979,1,0,0,0,198,1981,1,0,0,0,200,2003,
        1,0,0,0,202,2013,1,0,0,0,204,2015,1,0,0,0,206,2020,1,0,0,0,208,2034,
        1,0,0,0,210,2155,1,0,0,0,212,2157,1,0,0,0,214,254,3,2,1,0,215,254,
        3,4,2,0,216,254,3,6,3,0,217,254,3,8,4,0,218,254,3,10,5,0,219,254,
        3,12,6,0,220,254,3,14,7,0,221,254,3,16,8,0,222,254,3,18,9,0,223,
        254,3,20,10,0,224,254,3,22,11,0,225,254,3,24,12,0,226,254,3,26,13,
        0,227,254,3,28,14,0,228,254,3,30,15,0,229,254,3,32,16,0,230,254,
        3,34,17,0,231,254,3,36,18,0,232,254,3,38,19,0,233,254,3,40,20,0,
        234,254,3,42,21,0,235,254,3,44,22,0,236,254,3,46,23,0,237,254,3,
        48,24,0,238,254,3,198,99,0,239,254,3,200,100,0,240,254,3,52,26,0,
        241,254,3,60,30,0,242,254,3,64,32,0,243,254,3,82,41,0,244,254,3,
        88,44,0,245,254,3,176,88,0,246,254,3,180,90,0,247,254,3,96,48,0,
        248,254,3,92,46,0,249,254,3,130,65,0,250,254,3,142,71,0,251,254,
        3,156,78,0,252,254,3,160,80,0,253,214,1,0,0,0,253,215,1,0,0,0,253,
        216,1,0,0,0,253,217,1,0,0,0,253,218,1,0,0,0,253,219,1,0,0,0,253,
        220,1,0,0,0,253,221,1,0,0,0,253,222,1,0,0,0,253,223,1,0,0,0,253,
        224,1,0,0,0,253,225,1,0,0,0,253,226,1,0,0,0,253,227,1,0,0,0,253,
        228,1,0,0,0,253,229,1,0,0,0,253,230,1,0,0,0,253,231,1,0,0,0,253,
        232,1,0,0,0,253,233,1,0,0,0,253,234,1,0,0,0,253,235,1,0,0,0,253,
        236,1,0,0,0,253,237,1,0,0,0,253,238,1,0,0,0,253,239,1,0,0,0,253,
        240,1,0,0,0,253,241,1,0,0,0,253,242,1,0,0,0,253,243,1,0,0,0,253,
        244,1,0,0,0,253,245,1,0,0,0,253,246,1,0,0,0,253,247,1,0,0,0,253,
        248,1,0,0,0,253,249,1,0,0,0,253,250,1,0,0,0,253,251,1,0,0,0,253,
        252,1,0,0,0,254,257,1,0,0,0,255,253,1,0,0,0,255,256,1,0,0,0,256,
        258,1,0,0,0,257,255,1,0,0,0,258,259,5,0,0,1,259,1,1,0,0,0,260,264,
        5,3,0,0,261,263,3,50,25,0,262,261,1,0,0,0,263,266,1,0,0,0,264,262,
        1,0,0,0,264,265,1,0,0,0,265,267,1,0,0,0,266,264,1,0,0,0,267,268,
        5,2,0,0,268,3,1,0,0,0,269,271,5,36,0,0,270,269,1,0,0,0,270,271,1,
        0,0,0,271,272,1,0,0,0,272,276,5,37,0,0,273,275,3,58,29,0,274,273,
        1,0,0,0,275,278,1,0,0,0,276,274,1,0,0,0,276,277,1,0,0,0,277,279,
        1,0,0,0,278,276,1,0,0,0,279,280,5,2,0,0,280,5,1,0,0,0,281,285,5,
        39,0,0,282,284,3,62,31,0,283,282,1,0,0,0,284,287,1,0,0,0,285,283,
        1,0,0,0,285,286,1,0,0,0,286,288,1,0,0,0,287,285,1,0,0,0,288,322,
        5,2,0,0,289,293,7,0,0,0,290,292,3,66,33,0,291,290,1,0,0,0,292,295,
        1,0,0,0,293,291,1,0,0,0,293,294,1,0,0,0,294,296,1,0,0,0,295,293,
        1,0,0,0,296,322,5,2,0,0,297,301,5,47,0,0,298,300,3,70,35,0,299,298,
        1,0,0,0,300,303,1,0,0,0,301,299,1,0,0,0,301,302,1,0,0,0,302,304,
        1,0,0,0,303,301,1,0,0,0,304,322,5,2,0,0,305,309,5,50,0,0,306,308,
        3,74,37,0,307,306,1,0,0,0,308,311,1,0,0,0,309,307,1,0,0,0,309,310,
        1,0,0,0,310,312,1,0,0,0,311,309,1,0,0,0,312,322,5,2,0,0,313,317,
        5,51,0,0,314,316,3,78,39,0,315,314,1,0,0,0,316,319,1,0,0,0,317,315,
        1,0,0,0,317,318,1,0,0,0,318,320,1,0,0,0,319,317,1,0,0,0,320,322,
        5,2,0,0,321,281,1,0,0,0,321,289,1,0,0,0,321,297,1,0,0,0,321,305,
        1,0,0,0,321,313,1,0,0,0,322,7,1,0,0,0,323,325,5,36,0,0,324,323,1,
        0,0,0,324,325,1,0,0,0,325,326,1,0,0,0,326,330,5,52,0,0,327,329,3,
        82,41,0,328,327,1,0,0,0,329,332,1,0,0,0,330,328,1,0,0,0,330,331,
        1,0,0,0,331,333,1,0,0,0,332,330,1,0,0,0,333,334,5,2,0,0,334,9,1,
        0,0,0,335,337,5,36,0,0,336,335,1,0,0,0,336,337,1,0,0,0,337,338,1,
        0,0,0,338,342,5,57,0,0,339,341,3,86,43,0,340,339,1,0,0,0,341,344,
        1,0,0,0,342,340,1,0,0,0,342,343,1,0,0,0,343,345,1,0,0,0,344,342,
        1,0,0,0,345,346,5,2,0,0,346,11,1,0,0,0,347,351,5,60,0,0,348,350,
        3,90,45,0,349,348,1,0,0,0,350,353,1,0,0,0,351,349,1,0,0,0,351,352,
        1,0,0,0,352,354,1,0,0,0,353,351,1,0,0,0,354,355,5,2,0,0,355,13,1,
        0,0,0,356,360,5,64,0,0,357,359,3,94,47,0,358,357,1,0,0,0,359,362,
        1,0,0,0,360,358,1,0,0,0,360,361,1,0,0,0,361,363,1,0,0,0,362,360,
        1,0,0,0,363,364,5,2,0,0,364,15,1,0,0,0,365,369,5,66,0,0,366,368,
        3,98,49,0,367,366,1,0,0,0,368,371,1,0,0,0,369,367,1,0,0,0,369,370,
        1,0,0,0,370,372,1,0,0,0,371,369,1,0,0,0,372,373,5,2,0,0,373,17,1,
        0,0,0,374,378,5,70,0,0,375,377,3,104,52,0,376,375,1,0,0,0,377,380,
        1,0,0,0,378,376,1,0,0,0,378,379,1,0,0,0,379,381,1,0,0,0,380,378,
        1,0,0,0,381,382,5,2,0,0,382,19,1,0,0,0,383,387,5,78,0,0,384,386,
        3,124,62,0,385,384,1,0,0,0,386,389,1,0,0,0,387,385,1,0,0,0,387,388,
        1,0,0,0,388,390,1,0,0,0,389,387,1,0,0,0,390,391,5,2,0,0,391,21,1,
        0,0,0,392,396,5,85,0,0,393,395,3,128,64,0,394,393,1,0,0,0,395,398,
        1,0,0,0,396,394,1,0,0,0,396,397,1,0,0,0,397,399,1,0,0,0,398,396,
        1,0,0,0,399,400,5,2,0,0,400,23,1,0,0,0,401,405,5,86,0,0,402,404,
        3,132,66,0,403,402,1,0,0,0,404,407,1,0,0,0,405,403,1,0,0,0,405,406,
        1,0,0,0,406,408,1,0,0,0,407,405,1,0,0,0,408,409,5,2,0,0,409,25,1,
        0,0,0,410,414,5,87,0,0,411,413,3,136,68,0,412,411,1,0,0,0,413,416,
        1,0,0,0,414,412,1,0,0,0,414,415,1,0,0,0,415,417,1,0,0,0,416,414,
        1,0,0,0,417,418,5,2,0,0,418,27,1,0,0,0,419,423,5,91,0,0,420,422,
        3,140,70,0,421,420,1,0,0,0,422,425,1,0,0,0,423,421,1,0,0,0,423,424,
        1,0,0,0,424,426,1,0,0,0,425,423,1,0,0,0,426,427,5,2,0,0,427,29,1,
        0,0,0,428,432,5,93,0,0,429,431,3,144,72,0,430,429,1,0,0,0,431,434,
        1,0,0,0,432,430,1,0,0,0,432,433,1,0,0,0,433,435,1,0,0,0,434,432,
        1,0,0,0,435,436,5,2,0,0,436,31,1,0,0,0,437,441,5,94,0,0,438,440,
        3,146,73,0,439,438,1,0,0,0,440,443,1,0,0,0,441,439,1,0,0,0,441,442,
        1,0,0,0,442,444,1,0,0,0,443,441,1,0,0,0,444,445,5,2,0,0,445,33,1,
        0,0,0,446,450,5,95,0,0,447,449,3,150,75,0,448,447,1,0,0,0,449,452,
        1,0,0,0,450,448,1,0,0,0,450,451,1,0,0,0,451,453,1,0,0,0,452,450,
        1,0,0,0,453,454,5,2,0,0,454,35,1,0,0,0,455,459,5,98,0,0,456,458,
        3,154,77,0,457,456,1,0,0,0,458,461,1,0,0,0,459,457,1,0,0,0,459,460,
        1,0,0,0,460,462,1,0,0,0,461,459,1,0,0,0,462,463,5,2,0,0,463,37,1,
        0,0,0,464,468,5,103,0,0,465,467,3,158,79,0,466,465,1,0,0,0,467,470,
        1,0,0,0,468,466,1,0,0,0,468,469,1,0,0,0,469,471,1,0,0,0,470,468,
        1,0,0,0,471,472,5,2,0,0,472,39,1,0,0,0,473,477,5,114,0,0,474,476,
        3,162,81,0,475,474,1,0,0,0,476,479,1,0,0,0,477,475,1,0,0,0,477,478,
        1,0,0,0,478,480,1,0,0,0,479,477,1,0,0,0,480,481,5,2,0,0,481,41,1,
        0,0,0,482,486,5,115,0,0,483,485,3,166,83,0,484,483,1,0,0,0,485,488,
        1,0,0,0,486,484,1,0,0,0,486,487,1,0,0,0,487,489,1,0,0,0,488,486,
        1,0,0,0,489,490,5,2,0,0,490,43,1,0,0,0,491,495,5,116,0,0,492,494,
        3,170,85,0,493,492,1,0,0,0,494,497,1,0,0,0,495,493,1,0,0,0,495,496,
        1,0,0,0,496,498,1,0,0,0,497,495,1,0,0,0,498,499,5,2,0,0,499,45,1,
        0,0,0,500,504,5,118,0,0,501,503,3,174,87,0,502,501,1,0,0,0,503,506,
        1,0,0,0,504,502,1,0,0,0,504,505,1,0,0,0,505,507,1,0,0,0,506,504,
        1,0,0,0,507,508,5,2,0,0,508,47,1,0,0,0,509,513,5,119,0,0,510,512,
        3,178,89,0,511,510,1,0,0,0,512,515,1,0,0,0,513,511,1,0,0,0,513,514,
        1,0,0,0,514,516,1,0,0,0,515,513,1,0,0,0,516,517,5,2,0,0,517,49,1,
        0,0,0,518,590,3,52,26,0,519,520,5,5,0,0,520,521,5,181,0,0,521,590,
        3,194,97,0,522,523,5,6,0,0,523,524,5,203,0,0,524,590,5,202,0,0,525,
        526,5,7,0,0,526,527,5,181,0,0,527,590,3,194,97,0,528,530,5,8,0,0,
        529,531,5,187,0,0,530,529,1,0,0,0,530,531,1,0,0,0,531,532,1,0,0,
        0,532,590,3,194,97,0,533,534,5,9,0,0,534,590,5,181,0,0,535,536,5,
        10,0,0,536,590,5,181,0,0,537,538,5,11,0,0,538,539,5,181,0,0,539,
        540,5,181,0,0,540,590,3,194,97,0,541,542,5,12,0,0,542,543,5,181,
        0,0,543,590,5,177,0,0,544,545,5,13,0,0,545,546,5,181,0,0,546,590,
        5,177,0,0,547,549,5,14,0,0,548,550,5,187,0,0,549,548,1,0,0,0,549,
        550,1,0,0,0,550,551,1,0,0,0,551,590,5,177,0,0,552,553,5,15,0,0,553,
        554,5,207,0,0,554,590,5,206,0,0,555,556,5,16,0,0,556,557,3,54,27,
        0,557,558,5,2,0,0,558,590,1,0,0,0,559,560,5,17,0,0,560,562,5,18,
        0,0,561,563,5,187,0,0,562,561,1,0,0,0,562,563,1,0,0,0,563,564,1,
        0,0,0,564,590,3,194,97,0,565,590,5,19,0,0,566,567,5,20,0,0,567,568,
        5,181,0,0,568,590,3,194,97,0,569,570,5,21,0,0,570,571,5,181,0,0,
        571,590,3,194,97,0,572,573,5,22,0,0,573,574,5,181,0,0,574,590,3,
        194,97,0,575,576,5,23,0,0,576,577,5,181,0,0,577,590,3,194,97,0,578,
        579,5,24,0,0,579,580,5,181,0,0,580,590,3,194,97,0,581,582,5,25,0,
        0,582,583,5,181,0,0,583,590,3,194,97,0,584,586,5,26,0,0,585,587,
        5,187,0,0,586,585,1,0,0,0,586,587,1,0,0,0,587,588,1,0,0,0,588,590,
        3,194,97,0,589,518,1,0,0,0,589,519,1,0,0,0,589,522,1,0,0,0,589,525,
        1,0,0,0,589,528,1,0,0,0,589,533,1,0,0,0,589,535,1,0,0,0,589,537,
        1,0,0,0,589,541,1,0,0,0,589,544,1,0,0,0,589,547,1,0,0,0,589,552,
        1,0,0,0,589,555,1,0,0,0,589,559,1,0,0,0,589,565,1,0,0,0,589,566,
        1,0,0,0,589,569,1,0,0,0,589,572,1,0,0,0,589,575,1,0,0,0,589,578,
        1,0,0,0,589,581,1,0,0,0,589,584,1,0,0,0,590,51,1,0,0,0,591,592,5,
        4,0,0,592,593,3,182,91,0,593,594,3,182,91,0,594,595,3,190,95,0,595,
        596,3,190,95,0,596,600,3,190,95,0,597,599,3,56,28,0,598,597,1,0,
        0,0,599,602,1,0,0,0,600,598,1,0,0,0,600,601,1,0,0,0,601,609,1,0,
        0,0,602,600,1,0,0,0,603,604,5,172,0,0,604,605,3,182,91,0,605,606,
        3,182,91,0,606,608,1,0,0,0,607,603,1,0,0,0,608,611,1,0,0,0,609,607,
        1,0,0,0,609,610,1,0,0,0,610,53,1,0,0,0,611,609,1,0,0,0,612,614,5,
        27,0,0,613,615,5,187,0,0,614,613,1,0,0,0,614,615,1,0,0,0,615,616,
        1,0,0,0,616,627,3,194,97,0,617,619,5,28,0,0,618,620,5,187,0,0,619,
        618,1,0,0,0,619,620,1,0,0,0,620,621,1,0,0,0,621,627,3,194,97,0,622,
        623,5,29,0,0,623,627,3,182,91,0,624,625,5,30,0,0,625,627,3,182,91,
        0,626,612,1,0,0,0,626,617,1,0,0,0,626,622,1,0,0,0,626,624,1,0,0,
        0,627,55,1,0,0,0,628,630,5,31,0,0,629,631,5,187,0,0,630,629,1,0,
        0,0,630,631,1,0,0,0,631,632,1,0,0,0,632,664,3,196,98,0,633,635,5,
        32,0,0,634,636,5,187,0,0,635,634,1,0,0,0,635,636,1,0,0,0,636,637,
        1,0,0,0,637,664,3,196,98,0,638,640,5,56,0,0,639,641,5,187,0,0,640,
        639,1,0,0,0,640,641,1,0,0,0,641,642,1,0,0,0,642,664,3,196,98,0,643,
        645,5,33,0,0,644,646,5,187,0,0,645,644,1,0,0,0,645,646,1,0,0,0,646,
        647,1,0,0,0,647,664,3,196,98,0,648,650,5,34,0,0,649,651,5,187,0,
        0,650,649,1,0,0,0,650,651,1,0,0,0,651,652,1,0,0,0,652,664,3,196,
        98,0,653,655,5,35,0,0,654,656,5,187,0,0,655,654,1,0,0,0,655,656,
        1,0,0,0,656,657,1,0,0,0,657,664,3,196,98,0,658,660,5,48,0,0,659,
        661,5,187,0,0,660,659,1,0,0,0,660,661,1,0,0,0,661,662,1,0,0,0,662,
        664,3,196,98,0,663,628,1,0,0,0,663,633,1,0,0,0,663,638,1,0,0,0,663,
        643,1,0,0,0,663,648,1,0,0,0,663,653,1,0,0,0,663,658,1,0,0,0,664,
        57,1,0,0,0,665,675,3,60,30,0,666,668,5,38,0,0,667,669,5,187,0,0,
        668,667,1,0,0,0,668,669,1,0,0,0,669,670,1,0,0,0,670,675,5,177,0,
        0,671,675,5,19,0,0,672,673,5,21,0,0,673,675,3,194,97,0,674,665,1,
        0,0,0,674,666,1,0,0,0,674,671,1,0,0,0,674,672,1,0,0,0,675,59,1,0,
        0,0,676,677,5,4,0,0,677,678,3,182,91,0,678,679,3,182,91,0,679,680,
        3,182,91,0,680,681,3,182,91,0,681,682,3,190,95,0,682,683,3,190,95,
        0,683,684,3,190,95,0,684,685,5,177,0,0,685,61,1,0,0,0,686,705,3,
        64,32,0,687,688,5,9,0,0,688,705,5,181,0,0,689,690,5,40,0,0,690,691,
        3,194,97,0,691,692,3,194,97,0,692,693,3,194,97,0,693,705,1,0,0,0,
        694,695,5,41,0,0,695,705,3,194,97,0,696,697,5,14,0,0,697,705,5,177,
        0,0,698,699,5,15,0,0,699,705,5,206,0,0,700,701,5,17,0,0,701,702,
        5,18,0,0,702,705,3,194,97,0,703,705,5,19,0,0,704,686,1,0,0,0,704,
        687,1,0,0,0,704,689,1,0,0,0,704,694,1,0,0,0,704,696,1,0,0,0,704,
        698,1,0,0,0,704,700,1,0,0,0,704,703,1,0,0,0,705,63,1,0,0,0,706,707,
        5,4,0,0,707,708,3,182,91,0,708,709,3,182,91,0,709,710,3,182,91,0,
        710,711,3,182,91,0,711,712,3,182,91,0,712,713,3,182,91,0,713,714,
        3,190,95,0,714,716,3,190,95,0,715,717,3,190,95,0,716,715,1,0,0,0,
        716,717,1,0,0,0,717,65,1,0,0,0,718,745,3,68,34,0,719,720,5,9,0,0,
        720,745,5,181,0,0,721,722,5,44,0,0,722,745,5,209,0,0,723,724,5,21,
        0,0,724,745,3,194,97,0,725,726,5,45,0,0,726,745,5,178,0,0,727,728,
        5,46,0,0,728,745,5,202,0,0,729,730,5,40,0,0,730,731,3,194,97,0,731,
        732,3,194,97,0,732,733,3,194,97,0,733,745,1,0,0,0,734,735,5,41,0,
        0,735,745,3,194,97,0,736,737,5,14,0,0,737,745,5,177,0,0,738,739,
        5,15,0,0,739,745,5,206,0,0,740,741,5,17,0,0,741,742,5,18,0,0,742,
        745,3,194,97,0,743,745,5,19,0,0,744,718,1,0,0,0,744,719,1,0,0,0,
        744,721,1,0,0,0,744,723,1,0,0,0,744,725,1,0,0,0,744,727,1,0,0,0,
        744,729,1,0,0,0,744,734,1,0,0,0,744,736,1,0,0,0,744,738,1,0,0,0,
        744,740,1,0,0,0,744,743,1,0,0,0,745,67,1,0,0,0,746,747,5,4,0,0,747,
        748,3,182,91,0,748,749,3,182,91,0,749,750,3,182,91,0,750,751,3,182,
        91,0,751,752,3,182,91,0,752,753,3,182,91,0,753,754,3,190,95,0,754,
        761,3,190,95,0,755,762,3,190,95,0,756,757,3,190,95,0,757,758,3,190,
        95,0,758,759,3,190,95,0,759,760,3,190,95,0,760,762,1,0,0,0,761,755,
        1,0,0,0,761,756,1,0,0,0,761,762,1,0,0,0,762,69,1,0,0,0,763,787,3,
        72,36,0,764,766,5,48,0,0,765,767,5,187,0,0,766,765,1,0,0,0,766,767,
        1,0,0,0,767,768,1,0,0,0,768,787,5,177,0,0,769,770,5,9,0,0,770,787,
        5,181,0,0,771,772,5,41,0,0,772,773,3,194,97,0,773,774,3,194,97,0,
        774,787,1,0,0,0,775,776,5,14,0,0,776,787,5,177,0,0,777,779,5,49,
        0,0,778,780,5,187,0,0,779,778,1,0,0,0,779,780,1,0,0,0,780,781,1,
        0,0,0,781,787,5,177,0,0,782,783,5,17,0,0,783,784,5,18,0,0,784,787,
        3,194,97,0,785,787,5,19,0,0,786,763,1,0,0,0,786,764,1,0,0,0,786,
        769,1,0,0,0,786,771,1,0,0,0,786,775,1,0,0,0,786,777,1,0,0,0,786,
        782,1,0,0,0,786,785,1,0,0,0,787,71,1,0,0,0,788,789,5,4,0,0,789,790,
        3,182,91,0,790,791,3,182,91,0,791,792,3,182,91,0,792,793,3,182,91,
        0,793,794,3,190,95,0,794,795,3,190,95,0,795,796,3,190,95,0,796,797,
        3,190,95,0,797,73,1,0,0,0,798,812,3,76,38,0,799,800,5,9,0,0,800,
        812,5,181,0,0,801,802,5,40,0,0,802,812,3,194,97,0,803,804,5,14,0,
        0,804,812,5,177,0,0,805,806,5,15,0,0,806,812,5,206,0,0,807,808,5,
        17,0,0,808,809,5,18,0,0,809,812,3,194,97,0,810,812,5,19,0,0,811,
        798,1,0,0,0,811,799,1,0,0,0,811,801,1,0,0,0,811,803,1,0,0,0,811,
        805,1,0,0,0,811,807,1,0,0,0,811,810,1,0,0,0,812,75,1,0,0,0,813,814,
        5,4,0,0,814,815,3,182,91,0,815,816,3,182,91,0,816,817,3,190,95,0,
        817,818,3,190,95,0,818,77,1,0,0,0,819,841,3,80,40,0,820,821,5,9,
        0,0,821,841,5,181,0,0,822,823,5,40,0,0,823,824,3,194,97,0,824,825,
        3,194,97,0,825,826,3,194,97,0,826,827,3,194,97,0,827,841,1,0,0,0,
        828,829,5,41,0,0,829,841,3,194,97,0,830,831,5,14,0,0,831,841,5,177,
        0,0,832,833,5,15,0,0,833,841,5,206,0,0,834,835,5,17,0,0,835,836,
        5,18,0,0,836,841,3,194,97,0,837,841,5,19,0,0,838,839,5,44,0,0,839,
        841,5,210,0,0,840,819,1,0,0,0,840,820,1,0,0,0,840,822,1,0,0,0,840,
        828,1,0,0,0,840,830,1,0,0,0,840,832,1,0,0,0,840,834,1,0,0,0,840,
        837,1,0,0,0,840,838,1,0,0,0,841,79,1,0,0,0,842,843,5,4,0,0,843,844,
        3,182,91,0,844,845,3,182,91,0,845,846,3,182,91,0,846,847,3,182,91,
        0,847,848,3,190,95,0,848,849,3,190,95,0,849,81,1,0,0,0,850,854,5,
        53,0,0,851,853,3,84,42,0,852,851,1,0,0,0,853,856,1,0,0,0,854,852,
        1,0,0,0,854,855,1,0,0,0,855,857,1,0,0,0,856,854,1,0,0,0,857,860,
        5,2,0,0,858,860,5,54,0,0,859,850,1,0,0,0,859,858,1,0,0,0,860,83,
        1,0,0,0,861,863,5,55,0,0,862,864,5,187,0,0,863,862,1,0,0,0,863,864,
        1,0,0,0,864,865,1,0,0,0,865,872,3,182,91,0,866,868,5,56,0,0,867,
        869,5,187,0,0,868,867,1,0,0,0,868,869,1,0,0,0,869,870,1,0,0,0,870,
        872,3,194,97,0,871,861,1,0,0,0,871,866,1,0,0,0,872,85,1,0,0,0,873,
        875,5,58,0,0,874,876,5,187,0,0,875,874,1,0,0,0,875,876,1,0,0,0,876,
        877,1,0,0,0,877,913,5,177,0,0,878,880,5,59,0,0,879,881,5,187,0,0,
        880,879,1,0,0,0,880,881,1,0,0,0,881,882,1,0,0,0,882,908,5,184,0,
        0,883,885,3,194,97,0,884,886,5,175,0,0,885,884,1,0,0,0,885,886,1,
        0,0,0,886,887,1,0,0,0,887,889,3,194,97,0,888,890,5,175,0,0,889,888,
        1,0,0,0,889,890,1,0,0,0,890,891,1,0,0,0,891,892,3,194,97,0,892,909,
        1,0,0,0,893,895,5,170,0,0,894,896,5,187,0,0,895,894,1,0,0,0,895,
        896,1,0,0,0,896,897,1,0,0,0,897,899,3,182,91,0,898,900,5,175,0,0,
        899,898,1,0,0,0,899,900,1,0,0,0,900,906,1,0,0,0,901,903,5,171,0,
        0,902,904,5,187,0,0,903,902,1,0,0,0,903,904,1,0,0,0,904,905,1,0,
        0,0,905,907,3,182,91,0,906,901,1,0,0,0,906,907,1,0,0,0,907,909,1,
        0,0,0,908,883,1,0,0,0,908,893,1,0,0,0,909,910,1,0,0,0,910,911,5,
        185,0,0,911,913,1,0,0,0,912,873,1,0,0,0,912,878,1,0,0,0,913,87,1,
        0,0,0,914,915,5,4,0,0,915,916,3,182,91,0,916,917,3,190,95,0,917,
        918,3,190,95,0,918,919,3,190,95,0,919,89,1,0,0,0,920,945,3,92,46,
        0,921,922,5,9,0,0,922,945,5,181,0,0,923,924,5,61,0,0,924,925,5,177,
        0,0,925,945,3,194,97,0,926,927,5,41,0,0,927,945,3,194,97,0,928,929,
        5,14,0,0,929,945,5,177,0,0,930,931,5,17,0,0,931,932,5,18,0,0,932,
        936,3,194,97,0,933,937,5,136,0,0,934,935,5,9,0,0,935,937,5,181,0,
        0,936,933,1,0,0,0,936,934,1,0,0,0,937,945,1,0,0,0,938,945,5,19,0,
        0,939,940,5,62,0,0,940,941,3,194,97,0,941,942,5,177,0,0,942,945,
        1,0,0,0,943,945,5,63,0,0,944,920,1,0,0,0,944,921,1,0,0,0,944,923,
        1,0,0,0,944,926,1,0,0,0,944,928,1,0,0,0,944,930,1,0,0,0,944,938,
        1,0,0,0,944,939,1,0,0,0,944,943,1,0,0,0,945,91,1,0,0,0,946,947,5,
        4,0,0,947,948,3,182,91,0,948,949,3,182,91,0,949,93,1,0,0,0,950,990,
        3,96,48,0,951,952,5,9,0,0,952,990,5,181,0,0,953,954,5,40,0,0,954,
        955,3,194,97,0,955,956,3,194,97,0,956,957,3,194,97,0,957,958,3,194,
        97,0,958,990,1,0,0,0,959,961,5,48,0,0,960,962,5,187,0,0,961,960,
        1,0,0,0,961,962,1,0,0,0,962,963,1,0,0,0,963,990,5,177,0,0,964,965,
        5,65,0,0,965,990,5,177,0,0,966,967,5,41,0,0,967,969,3,194,97,0,968,
        970,3,194,97,0,969,968,1,0,0,0,969,970,1,0,0,0,970,990,1,0,0,0,971,
        972,5,14,0,0,972,990,5,177,0,0,973,975,5,49,0,0,974,976,5,187,0,
        0,975,974,1,0,0,0,975,976,1,0,0,0,976,977,1,0,0,0,977,990,5,177,
        0,0,978,979,5,15,0,0,979,990,5,206,0,0,980,981,5,17,0,0,981,982,
        5,18,0,0,982,986,3,194,97,0,983,987,5,136,0,0,984,985,5,9,0,0,985,
        987,5,181,0,0,986,983,1,0,0,0,986,984,1,0,0,0,987,990,1,0,0,0,988,
        990,5,19,0,0,989,950,1,0,0,0,989,951,1,0,0,0,989,953,1,0,0,0,989,
        959,1,0,0,0,989,964,1,0,0,0,989,966,1,0,0,0,989,971,1,0,0,0,989,
        973,1,0,0,0,989,978,1,0,0,0,989,980,1,0,0,0,989,988,1,0,0,0,990,
        95,1,0,0,0,991,992,5,4,0,0,992,993,3,182,91,0,993,994,3,182,91,0,
        994,995,3,182,91,0,995,1001,3,182,91,0,996,997,3,182,91,0,997,998,
        3,182,91,0,998,999,3,182,91,0,999,1000,3,182,91,0,1000,1002,1,0,
        0,0,1001,996,1,0,0,0,1001,1002,1,0,0,0,1002,1003,1,0,0,0,1003,1004,
        3,190,95,0,1004,1008,3,190,95,0,1005,1006,3,190,95,0,1006,1007,3,
        190,95,0,1007,1009,1,0,0,0,1008,1005,1,0,0,0,1008,1009,1,0,0,0,1009,
        97,1,0,0,0,1010,1037,3,100,50,0,1011,1012,5,9,0,0,1012,1037,5,181,
        0,0,1013,1014,5,61,0,0,1014,1015,5,177,0,0,1015,1016,5,177,0,0,1016,
        1017,3,194,97,0,1017,1018,3,194,97,0,1018,1019,3,194,97,0,1019,1037,
        1,0,0,0,1020,1021,5,41,0,0,1021,1037,3,194,97,0,1022,1023,5,14,0,
        0,1023,1037,5,177,0,0,1024,1025,5,67,0,0,1025,1037,3,194,97,0,1026,
        1027,5,68,0,0,1027,1037,3,194,97,0,1028,1029,5,15,0,0,1029,1037,
        5,206,0,0,1030,1031,5,17,0,0,1031,1032,5,18,0,0,1032,1037,3,194,
        97,0,1033,1037,3,102,51,0,1034,1037,5,19,0,0,1035,1037,5,63,0,0,
        1036,1010,1,0,0,0,1036,1011,1,0,0,0,1036,1013,1,0,0,0,1036,1020,
        1,0,0,0,1036,1022,1,0,0,0,1036,1024,1,0,0,0,1036,1026,1,0,0,0,1036,
        1028,1,0,0,0,1036,1030,1,0,0,0,1036,1033,1,0,0,0,1036,1034,1,0,0,
        0,1036,1035,1,0,0,0,1037,99,1,0,0,0,1038,1039,5,4,0,0,1039,1040,
        3,182,91,0,1040,1041,3,182,91,0,1041,1042,3,182,91,0,1042,1043,3,
        182,91,0,1043,1044,3,182,91,0,1044,1045,3,190,95,0,1045,1046,3,190,
        95,0,1046,101,1,0,0,0,1047,1048,5,69,0,0,1048,1049,3,182,91,0,1049,
        1050,3,194,97,0,1050,1051,3,194,97,0,1051,103,1,0,0,0,1052,1086,
        3,106,53,0,1053,1086,3,108,54,0,1054,1086,3,110,55,0,1055,1086,3,
        112,56,0,1056,1086,3,114,57,0,1057,1086,3,116,58,0,1058,1086,3,118,
        59,0,1059,1086,3,120,60,0,1060,1086,3,122,61,0,1061,1062,5,9,0,0,
        1062,1086,5,181,0,0,1063,1064,5,77,0,0,1064,1086,3,194,97,0,1065,
        1066,5,65,0,0,1066,1086,5,177,0,0,1067,1068,5,41,0,0,1068,1070,3,
        194,97,0,1069,1071,3,194,97,0,1070,1069,1,0,0,0,1070,1071,1,0,0,
        0,1071,1086,1,0,0,0,1072,1073,5,15,0,0,1073,1086,5,206,0,0,1074,
        1075,5,17,0,0,1075,1076,5,18,0,0,1076,1080,3,194,97,0,1077,1081,
        5,136,0,0,1078,1079,5,9,0,0,1079,1081,5,181,0,0,1080,1077,1,0,0,
        0,1080,1078,1,0,0,0,1081,1082,1,0,0,0,1082,1083,5,181,0,0,1083,1086,
        1,0,0,0,1084,1086,5,19,0,0,1085,1052,1,0,0,0,1085,1053,1,0,0,0,1085,
        1054,1,0,0,0,1085,1055,1,0,0,0,1085,1056,1,0,0,0,1085,1057,1,0,0,
        0,1085,1058,1,0,0,0,1085,1059,1,0,0,0,1085,1060,1,0,0,0,1085,1061,
        1,0,0,0,1085,1063,1,0,0,0,1085,1065,1,0,0,0,1085,1067,1,0,0,0,1085,
        1072,1,0,0,0,1085,1074,1,0,0,0,1085,1084,1,0,0,0,1086,105,1,0,0,
        0,1087,1088,5,71,0,0,1088,1090,3,182,91,0,1089,1091,3,182,91,0,1090,
        1089,1,0,0,0,1090,1091,1,0,0,0,1091,1092,1,0,0,0,1092,1094,3,194,
        97,0,1093,1095,3,194,97,0,1094,1093,1,0,0,0,1094,1095,1,0,0,0,1095,
        107,1,0,0,0,1096,1097,5,69,0,0,1097,1098,3,182,91,0,1098,1099,3,
        194,97,0,1099,109,1,0,0,0,1100,1101,5,51,0,0,1101,1102,3,182,91,
        0,1102,1103,3,182,91,0,1103,1104,3,182,91,0,1104,1106,5,181,0,0,
        1105,1107,5,178,0,0,1106,1105,1,0,0,0,1106,1107,1,0,0,0,1107,1108,
        1,0,0,0,1108,1109,5,181,0,0,1109,111,1,0,0,0,1110,1111,5,72,0,0,
        1111,1112,3,182,91,0,1112,113,1,0,0,0,1113,1114,5,66,0,0,1114,1115,
        3,182,91,0,1115,115,1,0,0,0,1116,1117,5,73,0,0,1117,1118,3,182,91,
        0,1118,117,1,0,0,0,1119,1120,5,74,0,0,1120,1121,3,182,91,0,1121,
        119,1,0,0,0,1122,1123,5,75,0,0,1123,1124,5,181,0,0,1124,1125,3,182,
        91,0,1125,1126,3,182,91,0,1126,1127,3,182,91,0,1127,1128,3,182,91,
        0,1128,1130,3,182,91,0,1129,1131,3,182,91,0,1130,1129,1,0,0,0,1130,
        1131,1,0,0,0,1131,121,1,0,0,0,1132,1133,5,76,0,0,1133,1134,3,182,
        91,0,1134,123,1,0,0,0,1135,1238,3,126,63,0,1136,1137,5,9,0,0,1137,
        1238,5,181,0,0,1138,1139,5,27,0,0,1139,1238,3,194,97,0,1140,1141,
        5,41,0,0,1141,1238,3,194,97,0,1142,1143,5,79,0,0,1143,1144,3,194,
        97,0,1144,1145,3,194,97,0,1145,1150,3,194,97,0,1146,1147,3,194,97,
        0,1147,1148,3,194,97,0,1148,1149,3,194,97,0,1149,1151,1,0,0,0,1150,
        1146,1,0,0,0,1150,1151,1,0,0,0,1151,1156,1,0,0,0,1152,1153,3,194,
        97,0,1153,1154,3,194,97,0,1154,1155,3,194,97,0,1155,1157,1,0,0,0,
        1156,1152,1,0,0,0,1156,1157,1,0,0,0,1157,1162,1,0,0,0,1158,1159,
        3,194,97,0,1159,1160,3,194,97,0,1160,1161,3,194,97,0,1161,1163,1,
        0,0,0,1162,1158,1,0,0,0,1162,1163,1,0,0,0,1163,1238,1,0,0,0,1164,
        1165,5,14,0,0,1165,1238,5,177,0,0,1166,1167,5,80,0,0,1167,1168,3,
        194,97,0,1168,1169,3,194,97,0,1169,1174,3,194,97,0,1170,1171,3,194,
        97,0,1171,1172,3,194,97,0,1172,1173,3,194,97,0,1173,1175,1,0,0,0,
        1174,1170,1,0,0,0,1174,1175,1,0,0,0,1175,1180,1,0,0,0,1176,1177,
        3,194,97,0,1177,1178,3,194,97,0,1178,1179,3,194,97,0,1179,1181,1,
        0,0,0,1180,1176,1,0,0,0,1180,1181,1,0,0,0,1181,1186,1,0,0,0,1182,
        1183,3,194,97,0,1183,1184,3,194,97,0,1184,1185,3,194,97,0,1185,1187,
        1,0,0,0,1186,1182,1,0,0,0,1186,1187,1,0,0,0,1187,1238,1,0,0,0,1188,
        1189,5,17,0,0,1189,1190,5,18,0,0,1190,1194,3,194,97,0,1191,1195,
        5,136,0,0,1192,1193,5,9,0,0,1193,1195,5,181,0,0,1194,1191,1,0,0,
        0,1194,1192,1,0,0,0,1195,1238,1,0,0,0,1196,1197,5,81,0,0,1197,1198,
        3,194,97,0,1198,1199,3,194,97,0,1199,1204,3,194,97,0,1200,1201,3,
        194,97,0,1201,1202,3,194,97,0,1202,1203,3,194,97,0,1203,1205,1,0,
        0,0,1204,1200,1,0,0,0,1204,1205,1,0,0,0,1205,1210,1,0,0,0,1206,1207,
        3,194,97,0,1207,1208,3,194,97,0,1208,1209,3,194,97,0,1209,1211,1,
        0,0,0,1210,1206,1,0,0,0,1210,1211,1,0,0,0,1211,1216,1,0,0,0,1212,
        1213,3,194,97,0,1213,1214,3,194,97,0,1214,1215,3,194,97,0,1215,1217,
        1,0,0,0,1216,1212,1,0,0,0,1216,1217,1,0,0,0,1217,1238,1,0,0,0,1218,
        1238,5,19,0,0,1219,1220,5,21,0,0,1220,1238,3,194,97,0,1221,1222,
        5,82,0,0,1222,1238,5,213,0,0,1223,1224,5,62,0,0,1224,1225,5,84,0,
        0,1225,1227,3,194,97,0,1226,1228,3,194,97,0,1227,1226,1,0,0,0,1227,
        1228,1,0,0,0,1228,1230,1,0,0,0,1229,1231,3,194,97,0,1230,1229,1,
        0,0,0,1230,1231,1,0,0,0,1231,1233,1,0,0,0,1232,1234,3,194,97,0,1233,
        1232,1,0,0,0,1233,1234,1,0,0,0,1234,1238,1,0,0,0,1235,1238,5,83,
        0,0,1236,1238,5,63,0,0,1237,1135,1,0,0,0,1237,1136,1,0,0,0,1237,
        1138,1,0,0,0,1237,1140,1,0,0,0,1237,1142,1,0,0,0,1237,1164,1,0,0,
        0,1237,1166,1,0,0,0,1237,1188,1,0,0,0,1237,1196,1,0,0,0,1237,1218,
        1,0,0,0,1237,1219,1,0,0,0,1237,1221,1,0,0,0,1237,1223,1,0,0,0,1237,
        1235,1,0,0,0,1237,1236,1,0,0,0,1238,125,1,0,0,0,1239,1240,5,4,0,
        0,1240,1241,3,182,91,0,1241,1242,3,182,91,0,1242,1243,3,182,91,0,
        1243,1249,3,182,91,0,1244,1245,3,182,91,0,1245,1246,3,182,91,0,1246,
        1247,3,182,91,0,1247,1248,3,182,91,0,1248,1250,1,0,0,0,1249,1244,
        1,0,0,0,1249,1250,1,0,0,0,1250,1256,1,0,0,0,1251,1252,3,182,91,0,
        1252,1253,3,182,91,0,1253,1254,3,182,91,0,1254,1255,3,182,91,0,1255,
        1257,1,0,0,0,1256,1251,1,0,0,0,1256,1257,1,0,0,0,1257,1263,1,0,0,
        0,1258,1259,3,182,91,0,1259,1260,3,182,91,0,1260,1261,3,182,91,0,
        1261,1262,3,182,91,0,1262,1264,1,0,0,0,1263,1258,1,0,0,0,1263,1264,
        1,0,0,0,1264,127,1,0,0,0,1265,1271,3,130,65,0,1266,1267,5,21,0,0,
        1267,1271,3,194,97,0,1268,1271,5,17,0,0,1269,1271,5,19,0,0,1270,
        1265,1,0,0,0,1270,1266,1,0,0,0,1270,1268,1,0,0,0,1270,1269,1,0,0,
        0,1271,129,1,0,0,0,1272,1273,5,4,0,0,1273,1274,3,182,91,0,1274,1275,
        3,190,95,0,1275,1276,3,190,95,0,1276,131,1,0,0,0,1277,1300,3,134,
        67,0,1278,1279,5,9,0,0,1279,1300,5,181,0,0,1280,1281,5,40,0,0,1281,
        1282,3,194,97,0,1282,1283,3,194,97,0,1283,1284,3,194,97,0,1284,1285,
        3,194,97,0,1285,1286,3,194,97,0,1286,1300,1,0,0,0,1287,1288,5,41,
        0,0,1288,1300,3,194,97,0,1289,1290,5,14,0,0,1290,1300,5,177,0,0,
        1291,1292,5,15,0,0,1292,1300,5,206,0,0,1293,1294,5,17,0,0,1294,1295,
        5,18,0,0,1295,1300,3,194,97,0,1296,1300,5,19,0,0,1297,1298,5,44,
        0,0,1298,1300,5,210,0,0,1299,1277,1,0,0,0,1299,1278,1,0,0,0,1299,
        1280,1,0,0,0,1299,1287,1,0,0,0,1299,1289,1,0,0,0,1299,1291,1,0,0,
        0,1299,1293,1,0,0,0,1299,1296,1,0,0,0,1299,1297,1,0,0,0,1300,133,
        1,0,0,0,1301,1302,5,4,0,0,1302,1303,3,182,91,0,1303,1304,3,182,91,
        0,1304,1305,3,182,91,0,1305,1306,3,182,91,0,1306,1307,3,182,91,0,
        1307,1308,3,182,91,0,1308,1309,3,190,95,0,1309,1310,3,190,95,0,1310,
        135,1,0,0,0,1311,1369,3,138,69,0,1312,1313,5,9,0,0,1313,1369,5,181,
        0,0,1314,1315,5,27,0,0,1315,1369,3,194,97,0,1316,1317,5,88,0,0,1317,
        1369,3,194,97,0,1318,1319,5,41,0,0,1319,1369,3,194,97,0,1320,1321,
        5,79,0,0,1321,1322,3,194,97,0,1322,1323,3,194,97,0,1323,1324,3,194,
        97,0,1324,1325,3,194,97,0,1325,1326,3,194,97,0,1326,1327,3,194,97,
        0,1327,1328,3,194,97,0,1328,1369,1,0,0,0,1329,1330,5,89,0,0,1330,
        1369,5,177,0,0,1331,1332,5,90,0,0,1332,1333,3,194,97,0,1333,1334,
        3,194,97,0,1334,1335,3,194,97,0,1335,1336,3,194,97,0,1336,1337,3,
        194,97,0,1337,1338,3,194,97,0,1338,1339,3,194,97,0,1339,1340,3,194,
        97,0,1340,1369,1,0,0,0,1341,1342,5,14,0,0,1342,1369,5,177,0,0,1343,
        1344,5,17,0,0,1344,1345,5,18,0,0,1345,1349,3,194,97,0,1346,1350,
        5,136,0,0,1347,1348,5,9,0,0,1348,1350,5,181,0,0,1349,1346,1,0,0,
        0,1349,1347,1,0,0,0,1350,1369,1,0,0,0,1351,1352,5,81,0,0,1352,1353,
        3,194,97,0,1353,1354,3,194,97,0,1354,1355,3,194,97,0,1355,1356,3,
        194,97,0,1356,1357,3,194,97,0,1357,1358,3,194,97,0,1358,1359,3,194,
        97,0,1359,1369,1,0,0,0,1360,1369,5,19,0,0,1361,1362,5,152,0,0,1362,
        1369,5,177,0,0,1363,1364,5,62,0,0,1364,1365,3,194,97,0,1365,1366,
        3,194,97,0,1366,1369,1,0,0,0,1367,1369,5,63,0,0,1368,1311,1,0,0,
        0,1368,1312,1,0,0,0,1368,1314,1,0,0,0,1368,1316,1,0,0,0,1368,1318,
        1,0,0,0,1368,1320,1,0,0,0,1368,1329,1,0,0,0,1368,1331,1,0,0,0,1368,
        1341,1,0,0,0,1368,1343,1,0,0,0,1368,1351,1,0,0,0,1368,1360,1,0,0,
        0,1368,1361,1,0,0,0,1368,1363,1,0,0,0,1368,1367,1,0,0,0,1369,137,
        1,0,0,0,1370,1371,5,4,0,0,1371,1372,3,182,91,0,1372,1373,3,182,91,
        0,1373,1374,3,182,91,0,1374,1375,3,182,91,0,1375,139,1,0,0,0,1376,
        1404,3,142,71,0,1377,1378,5,9,0,0,1378,1404,5,181,0,0,1379,1380,
        5,21,0,0,1380,1404,3,194,97,0,1381,1382,5,44,0,0,1382,1404,5,211,
        0,0,1383,1384,5,40,0,0,1384,1385,3,194,97,0,1385,1386,3,194,97,0,
        1386,1387,3,194,97,0,1387,1404,1,0,0,0,1388,1389,5,92,0,0,1389,1390,
        3,194,97,0,1390,1391,3,194,97,0,1391,1392,3,194,97,0,1392,1404,1,
        0,0,0,1393,1394,5,41,0,0,1394,1404,3,194,97,0,1395,1396,5,14,0,0,
        1396,1404,5,177,0,0,1397,1398,5,15,0,0,1398,1404,5,206,0,0,1399,
        1400,5,17,0,0,1400,1401,5,18,0,0,1401,1404,3,194,97,0,1402,1404,
        5,19,0,0,1403,1376,1,0,0,0,1403,1377,1,0,0,0,1403,1379,1,0,0,0,1403,
        1381,1,0,0,0,1403,1383,1,0,0,0,1403,1388,1,0,0,0,1403,1393,1,0,0,
        0,1403,1395,1,0,0,0,1403,1397,1,0,0,0,1403,1399,1,0,0,0,1403,1402,
        1,0,0,0,1404,141,1,0,0,0,1405,1406,5,4,0,0,1406,1407,3,182,91,0,
        1407,1408,3,182,91,0,1408,1409,3,182,91,0,1409,1410,3,182,91,0,1410,
        1411,3,182,91,0,1411,1412,3,182,91,0,1412,1413,3,182,91,0,1413,1414,
        3,190,95,0,1414,1415,3,190,95,0,1415,1416,3,190,95,0,1416,143,1,
        0,0,0,1417,1444,3,142,71,0,1418,1419,5,9,0,0,1419,1444,5,181,0,0,
        1420,1421,5,21,0,0,1421,1444,3,194,97,0,1422,1423,5,40,0,0,1423,
        1424,3,194,97,0,1424,1425,3,194,97,0,1425,1426,3,194,97,0,1426,1444,
        1,0,0,0,1427,1428,5,92,0,0,1428,1429,3,194,97,0,1429,1430,3,194,
        97,0,1430,1431,3,194,97,0,1431,1432,3,194,97,0,1432,1444,1,0,0,0,
        1433,1434,5,41,0,0,1434,1444,3,194,97,0,1435,1436,5,14,0,0,1436,
        1444,5,177,0,0,1437,1438,5,15,0,0,1438,1444,5,206,0,0,1439,1440,
        5,17,0,0,1440,1441,5,18,0,0,1441,1444,3,194,97,0,1442,1444,5,19,
        0,0,1443,1417,1,0,0,0,1443,1418,1,0,0,0,1443,1420,1,0,0,0,1443,1422,
        1,0,0,0,1443,1427,1,0,0,0,1443,1433,1,0,0,0,1443,1435,1,0,0,0,1443,
        1437,1,0,0,0,1443,1439,1,0,0,0,1443,1442,1,0,0,0,1444,145,1,0,0,
        0,1445,1468,3,148,74,0,1446,1447,5,9,0,0,1447,1468,5,181,0,0,1448,
        1449,5,40,0,0,1449,1450,3,194,97,0,1450,1451,3,194,97,0,1451,1452,
        3,194,97,0,1452,1453,3,194,97,0,1453,1454,3,194,97,0,1454,1455,3,
        194,97,0,1455,1456,3,194,97,0,1456,1468,1,0,0,0,1457,1458,5,41,0,
        0,1458,1468,3,194,97,0,1459,1460,5,14,0,0,1460,1468,5,177,0,0,1461,
        1462,5,15,0,0,1462,1468,5,206,0,0,1463,1464,5,17,0,0,1464,1465,5,
        18,0,0,1465,1468,3,194,97,0,1466,1468,5,19,0,0,1467,1445,1,0,0,0,
        1467,1446,1,0,0,0,1467,1448,1,0,0,0,1467,1457,1,0,0,0,1467,1459,
        1,0,0,0,1467,1461,1,0,0,0,1467,1463,1,0,0,0,1467,1466,1,0,0,0,1468,
        147,1,0,0,0,1469,1470,5,4,0,0,1470,1471,3,182,91,0,1471,1472,3,182,
        91,0,1472,1473,3,182,91,0,1473,1474,3,182,91,0,1474,1475,3,182,91,
        0,1475,1476,3,182,91,0,1476,1477,3,182,91,0,1477,1478,3,182,91,0,
        1478,1479,3,190,95,0,1479,1480,3,190,95,0,1480,149,1,0,0,0,1481,
        1513,3,152,76,0,1482,1483,5,9,0,0,1483,1513,5,181,0,0,1484,1485,
        5,96,0,0,1485,1513,5,181,0,0,1486,1487,5,61,0,0,1487,1488,5,177,
        0,0,1488,1489,5,177,0,0,1489,1513,3,194,97,0,1490,1491,5,77,0,0,
        1491,1513,3,194,97,0,1492,1493,5,41,0,0,1493,1513,3,194,97,0,1494,
        1495,5,14,0,0,1495,1513,5,177,0,0,1496,1497,5,15,0,0,1497,1513,5,
        206,0,0,1498,1499,5,17,0,0,1499,1500,5,18,0,0,1500,1504,3,194,97,
        0,1501,1505,5,136,0,0,1502,1503,5,9,0,0,1503,1505,5,181,0,0,1504,
        1501,1,0,0,0,1504,1502,1,0,0,0,1505,1513,1,0,0,0,1506,1513,5,19,
        0,0,1507,1508,5,62,0,0,1508,1509,5,97,0,0,1509,1510,5,177,0,0,1510,
        1513,5,177,0,0,1511,1513,5,63,0,0,1512,1481,1,0,0,0,1512,1482,1,
        0,0,0,1512,1484,1,0,0,0,1512,1486,1,0,0,0,1512,1490,1,0,0,0,1512,
        1492,1,0,0,0,1512,1494,1,0,0,0,1512,1496,1,0,0,0,1512,1498,1,0,0,
        0,1512,1506,1,0,0,0,1512,1507,1,0,0,0,1512,1511,1,0,0,0,1513,151,
        1,0,0,0,1514,1515,5,4,0,0,1515,1516,3,182,91,0,1516,1517,3,182,91,
        0,1517,1518,3,182,91,0,1518,1519,3,182,91,0,1519,1520,3,182,91,0,
        1520,1521,3,182,91,0,1521,1522,3,182,91,0,1522,1523,3,182,91,0,1523,
        1524,3,182,91,0,1524,1525,3,182,91,0,1525,1527,3,182,91,0,1526,1528,
        3,182,91,0,1527,1526,1,0,0,0,1527,1528,1,0,0,0,1528,153,1,0,0,0,
        1529,1583,3,156,78,0,1530,1532,5,9,0,0,1531,1533,5,187,0,0,1532,
        1531,1,0,0,0,1532,1533,1,0,0,0,1533,1534,1,0,0,0,1534,1583,5,181,
        0,0,1535,1537,5,41,0,0,1536,1538,5,187,0,0,1537,1536,1,0,0,0,1537,
        1538,1,0,0,0,1538,1539,1,0,0,0,1539,1540,5,181,0,0,1540,1583,3,194,
        97,0,1541,1543,5,14,0,0,1542,1544,5,187,0,0,1543,1542,1,0,0,0,1543,
        1544,1,0,0,0,1544,1545,1,0,0,0,1545,1583,5,177,0,0,1546,1548,5,15,
        0,0,1547,1549,5,205,0,0,1548,1547,1,0,0,0,1548,1549,1,0,0,0,1549,
        1550,1,0,0,0,1550,1551,5,207,0,0,1551,1583,5,206,0,0,1552,1554,5,
        99,0,0,1553,1555,5,187,0,0,1554,1553,1,0,0,0,1554,1555,1,0,0,0,1555,
        1556,1,0,0,0,1556,1557,5,181,0,0,1557,1583,3,194,97,0,1558,1560,
        5,100,0,0,1559,1561,5,187,0,0,1560,1559,1,0,0,0,1560,1561,1,0,0,
        0,1561,1562,1,0,0,0,1562,1563,5,181,0,0,1563,1583,3,194,97,0,1564,
        1566,5,101,0,0,1565,1567,5,187,0,0,1566,1565,1,0,0,0,1566,1567,1,
        0,0,0,1567,1568,1,0,0,0,1568,1569,5,181,0,0,1569,1570,3,194,97,0,
        1570,1571,3,194,97,0,1571,1583,1,0,0,0,1572,1573,5,17,0,0,1573,1574,
        5,18,0,0,1574,1578,3,194,97,0,1575,1579,5,136,0,0,1576,1577,5,9,
        0,0,1577,1579,5,181,0,0,1578,1575,1,0,0,0,1578,1576,1,0,0,0,1579,
        1583,1,0,0,0,1580,1583,5,19,0,0,1581,1583,5,102,0,0,1582,1529,1,
        0,0,0,1582,1530,1,0,0,0,1582,1535,1,0,0,0,1582,1541,1,0,0,0,1582,
        1546,1,0,0,0,1582,1552,1,0,0,0,1582,1558,1,0,0,0,1582,1564,1,0,0,
        0,1582,1572,1,0,0,0,1582,1580,1,0,0,0,1582,1581,1,0,0,0,1583,155,
        1,0,0,0,1584,1585,5,4,0,0,1585,1586,3,182,91,0,1586,1587,3,182,91,
        0,1587,1588,3,190,95,0,1588,1589,3,190,95,0,1589,157,1,0,0,0,1590,
        1627,3,160,80,0,1591,1592,5,9,0,0,1592,1627,5,181,0,0,1593,1594,
        5,104,0,0,1594,1627,5,177,0,0,1595,1596,5,40,0,0,1596,1597,3,194,
        97,0,1597,1598,3,194,97,0,1598,1627,1,0,0,0,1599,1600,5,41,0,0,1600,
        1627,3,194,97,0,1601,1602,5,14,0,0,1602,1627,5,177,0,0,1603,1604,
        5,17,0,0,1604,1605,5,18,0,0,1605,1609,3,194,97,0,1606,1610,5,136,
        0,0,1607,1608,5,9,0,0,1608,1610,5,181,0,0,1609,1606,1,0,0,0,1609,
        1607,1,0,0,0,1610,1627,1,0,0,0,1611,1627,5,19,0,0,1612,1613,5,105,
        0,0,1613,1627,5,181,0,0,1614,1615,5,106,0,0,1615,1616,3,194,97,0,
        1616,1617,5,177,0,0,1617,1627,1,0,0,0,1618,1627,5,107,0,0,1619,1627,
        5,108,0,0,1620,1627,5,109,0,0,1621,1627,5,110,0,0,1622,1627,5,111,
        0,0,1623,1627,5,112,0,0,1624,1625,5,113,0,0,1625,1627,5,177,0,0,
        1626,1590,1,0,0,0,1626,1591,1,0,0,0,1626,1593,1,0,0,0,1626,1595,
        1,0,0,0,1626,1599,1,0,0,0,1626,1601,1,0,0,0,1626,1603,1,0,0,0,1626,
        1611,1,0,0,0,1626,1612,1,0,0,0,1626,1614,1,0,0,0,1626,1618,1,0,0,
        0,1626,1619,1,0,0,0,1626,1620,1,0,0,0,1626,1621,1,0,0,0,1626,1622,
        1,0,0,0,1626,1623,1,0,0,0,1626,1624,1,0,0,0,1627,159,1,0,0,0,1628,
        1629,5,4,0,0,1629,1630,3,182,91,0,1630,1631,3,182,91,0,1631,1632,
        3,182,91,0,1632,1633,3,182,91,0,1633,1634,3,182,91,0,1634,1635,3,
        190,95,0,1635,1636,3,190,95,0,1636,161,1,0,0,0,1637,1664,3,164,82,
        0,1638,1639,5,9,0,0,1639,1664,5,181,0,0,1640,1641,5,104,0,0,1641,
        1664,5,177,0,0,1642,1643,5,40,0,0,1643,1644,3,194,97,0,1644,1645,
        3,194,97,0,1645,1664,1,0,0,0,1646,1647,5,41,0,0,1647,1664,3,194,
        97,0,1648,1649,5,14,0,0,1649,1664,5,177,0,0,1650,1664,5,107,0,0,
        1651,1664,5,108,0,0,1652,1664,5,106,0,0,1653,1664,5,109,0,0,1654,
        1664,5,110,0,0,1655,1664,5,113,0,0,1656,1657,5,17,0,0,1657,1664,
        5,18,0,0,1658,1664,5,19,0,0,1659,1660,5,105,0,0,1660,1664,5,181,
        0,0,1661,1664,5,111,0,0,1662,1664,5,112,0,0,1663,1637,1,0,0,0,1663,
        1638,1,0,0,0,1663,1640,1,0,0,0,1663,1642,1,0,0,0,1663,1646,1,0,0,
        0,1663,1648,1,0,0,0,1663,1650,1,0,0,0,1663,1651,1,0,0,0,1663,1652,
        1,0,0,0,1663,1653,1,0,0,0,1663,1654,1,0,0,0,1663,1655,1,0,0,0,1663,
        1656,1,0,0,0,1663,1658,1,0,0,0,1663,1659,1,0,0,0,1663,1661,1,0,0,
        0,1663,1662,1,0,0,0,1664,163,1,0,0,0,1665,1666,5,4,0,0,1666,1667,
        3,182,91,0,1667,1668,3,182,91,0,1668,1669,3,182,91,0,1669,1670,3,
        182,91,0,1670,1671,3,182,91,0,1671,1672,3,182,91,0,1672,1673,3,190,
        95,0,1673,1674,3,190,95,0,1674,165,1,0,0,0,1675,1687,3,168,84,0,
        1676,1677,5,9,0,0,1677,1687,5,181,0,0,1678,1679,5,41,0,0,1679,1687,
        3,194,97,0,1680,1681,5,14,0,0,1681,1687,5,177,0,0,1682,1683,5,17,
        0,0,1683,1684,5,18,0,0,1684,1687,3,194,97,0,1685,1687,5,19,0,0,1686,
        1675,1,0,0,0,1686,1676,1,0,0,0,1686,1678,1,0,0,0,1686,1680,1,0,0,
        0,1686,1682,1,0,0,0,1686,1685,1,0,0,0,1687,167,1,0,0,0,1688,1689,
        5,4,0,0,1689,1690,3,182,91,0,1690,1691,3,182,91,0,1691,1692,3,190,
        95,0,1692,1693,3,190,95,0,1693,1694,3,190,95,0,1694,169,1,0,0,0,
        1695,1713,3,172,86,0,1696,1697,5,9,0,0,1697,1713,5,181,0,0,1698,
        1699,5,117,0,0,1699,1713,5,177,0,0,1700,1701,5,40,0,0,1701,1713,
        3,194,97,0,1702,1703,5,41,0,0,1703,1713,3,194,97,0,1704,1705,5,14,
        0,0,1705,1713,5,177,0,0,1706,1707,5,17,0,0,1707,1708,5,18,0,0,1708,
        1713,3,194,97,0,1709,1713,5,19,0,0,1710,1711,5,113,0,0,1711,1713,
        5,177,0,0,1712,1695,1,0,0,0,1712,1696,1,0,0,0,1712,1698,1,0,0,0,
        1712,1700,1,0,0,0,1712,1702,1,0,0,0,1712,1704,1,0,0,0,1712,1706,
        1,0,0,0,1712,1709,1,0,0,0,1712,1710,1,0,0,0,1713,171,1,0,0,0,1714,
        1715,5,4,0,0,1715,1716,3,182,91,0,1716,1717,3,182,91,0,1717,1718,
        3,182,91,0,1718,1719,3,190,95,0,1719,1720,3,190,95,0,1720,173,1,
        0,0,0,1721,1733,3,176,88,0,1722,1723,5,9,0,0,1723,1733,5,181,0,0,
        1724,1725,5,41,0,0,1725,1733,3,194,97,0,1726,1727,5,14,0,0,1727,
        1733,5,177,0,0,1728,1729,5,17,0,0,1729,1730,5,18,0,0,1730,1733,3,
        194,97,0,1731,1733,5,19,0,0,1732,1721,1,0,0,0,1732,1722,1,0,0,0,
        1732,1724,1,0,0,0,1732,1726,1,0,0,0,1732,1728,1,0,0,0,1732,1731,
        1,0,0,0,1733,175,1,0,0,0,1734,1735,5,4,0,0,1735,1736,3,182,91,0,
        1736,1737,3,182,91,0,1737,1738,3,182,91,0,1738,177,1,0,0,0,1739,
        1806,3,180,90,0,1740,1742,5,120,0,0,1741,1743,5,187,0,0,1742,1741,
        1,0,0,0,1742,1743,1,0,0,0,1743,1744,1,0,0,0,1744,1806,3,194,97,0,
        1745,1747,5,121,0,0,1746,1748,5,187,0,0,1747,1746,1,0,0,0,1747,1748,
        1,0,0,0,1748,1749,1,0,0,0,1749,1806,3,194,97,0,1750,1752,5,122,0,
        0,1751,1753,5,187,0,0,1752,1751,1,0,0,0,1752,1753,1,0,0,0,1753,1754,
        1,0,0,0,1754,1806,5,177,0,0,1755,1757,5,123,0,0,1756,1758,5,187,
        0,0,1757,1756,1,0,0,0,1757,1758,1,0,0,0,1758,1759,1,0,0,0,1759,1806,
        5,177,0,0,1760,1762,5,124,0,0,1761,1763,5,187,0,0,1762,1761,1,0,
        0,0,1762,1763,1,0,0,0,1763,1764,1,0,0,0,1764,1806,5,177,0,0,1765,
        1767,5,125,0,0,1766,1768,5,187,0,0,1767,1766,1,0,0,0,1767,1768,1,
        0,0,0,1768,1769,1,0,0,0,1769,1806,5,181,0,0,1770,1772,5,126,0,0,
        1771,1773,5,187,0,0,1772,1771,1,0,0,0,1772,1773,1,0,0,0,1773,1774,
        1,0,0,0,1774,1806,3,194,97,0,1775,1777,5,127,0,0,1776,1778,5,187,
        0,0,1777,1776,1,0,0,0,1777,1778,1,0,0,0,1778,1779,1,0,0,0,1779,1806,
        3,194,97,0,1780,1782,5,128,0,0,1781,1783,5,187,0,0,1782,1781,1,0,
        0,0,1782,1783,1,0,0,0,1783,1784,1,0,0,0,1784,1806,3,194,97,0,1785,
        1787,5,129,0,0,1786,1788,5,187,0,0,1787,1786,1,0,0,0,1787,1788,1,
        0,0,0,1788,1789,1,0,0,0,1789,1806,3,194,97,0,1790,1792,5,130,0,0,
        1791,1793,5,187,0,0,1792,1791,1,0,0,0,1792,1793,1,0,0,0,1793,1794,
        1,0,0,0,1794,1806,5,177,0,0,1795,1797,5,131,0,0,1796,1798,5,187,
        0,0,1797,1796,1,0,0,0,1797,1798,1,0,0,0,1798,1799,1,0,0,0,1799,1806,
        5,177,0,0,1800,1802,5,132,0,0,1801,1803,5,187,0,0,1802,1801,1,0,
        0,0,1802,1803,1,0,0,0,1803,1804,1,0,0,0,1804,1806,5,177,0,0,1805,
        1739,1,0,0,0,1805,1740,1,0,0,0,1805,1745,1,0,0,0,1805,1750,1,0,0,
        0,1805,1755,1,0,0,0,1805,1760,1,0,0,0,1805,1765,1,0,0,0,1805,1770,
        1,0,0,0,1805,1775,1,0,0,0,1805,1780,1,0,0,0,1805,1785,1,0,0,0,1805,
        1790,1,0,0,0,1805,1795,1,0,0,0,1805,1800,1,0,0,0,1806,179,1,0,0,
        0,1807,1808,5,4,0,0,1808,1809,3,182,91,0,1809,1810,3,182,91,0,1810,
        181,1,0,0,0,1811,1812,5,184,0,0,1812,1813,3,184,92,0,1813,1814,5,
        185,0,0,1814,183,1,0,0,0,1815,1820,3,186,93,0,1816,1817,5,172,0,
        0,1817,1819,3,186,93,0,1818,1816,1,0,0,0,1819,1822,1,0,0,0,1820,
        1818,1,0,0,0,1820,1821,1,0,0,0,1821,185,1,0,0,0,1822,1820,1,0,0,
        0,1823,1828,3,188,94,0,1824,1825,5,173,0,0,1825,1827,3,188,94,0,
        1826,1824,1,0,0,0,1827,1830,1,0,0,0,1828,1826,1,0,0,0,1828,1829,
        1,0,0,0,1829,187,1,0,0,0,1830,1828,1,0,0,0,1831,1832,6,94,-1,0,1832,
        1833,5,184,0,0,1833,1834,3,184,92,0,1834,1835,5,185,0,0,1835,1961,
        1,0,0,0,1836,1961,5,136,0,0,1837,1838,5,138,0,0,1838,1839,7,1,0,
        0,1839,1840,7,2,0,0,1840,1961,7,1,0,0,1841,1843,5,139,0,0,1842,1844,
        5,198,0,0,1843,1842,1,0,0,0,1843,1844,1,0,0,0,1844,1845,1,0,0,0,
        1845,1846,5,199,0,0,1846,1847,5,200,0,0,1847,1961,3,192,96,0,1848,
        1849,5,140,0,0,1849,1961,3,188,94,29,1850,1851,5,141,0,0,1851,1961,
        3,188,94,28,1852,1853,5,142,0,0,1853,1961,3,188,94,27,1854,1861,
        5,143,0,0,1855,1862,5,182,0,0,1856,1859,5,181,0,0,1857,1858,5,186,
        0,0,1858,1860,5,181,0,0,1859,1857,1,0,0,0,1859,1860,1,0,0,0,1860,
        1862,1,0,0,0,1861,1855,1,0,0,0,1861,1856,1,0,0,0,1862,1961,1,0,0,
        0,1863,1961,5,144,0,0,1864,1865,5,145,0,0,1865,1961,5,177,0,0,1866,
        1961,5,146,0,0,1867,1874,5,147,0,0,1868,1875,5,182,0,0,1869,1872,
        5,181,0,0,1870,1871,5,186,0,0,1871,1873,5,181,0,0,1872,1870,1,0,
        0,0,1872,1873,1,0,0,0,1873,1875,1,0,0,0,1874,1868,1,0,0,0,1874,1869,
        1,0,0,0,1875,1961,1,0,0,0,1876,1877,5,174,0,0,1877,1961,3,188,94,
        21,1878,1879,5,148,0,0,1879,1880,5,184,0,0,1880,1882,3,192,96,0,
        1881,1883,5,175,0,0,1882,1881,1,0,0,0,1882,1883,1,0,0,0,1883,1884,
        1,0,0,0,1884,1886,3,192,96,0,1885,1887,5,175,0,0,1886,1885,1,0,0,
        0,1886,1887,1,0,0,0,1887,1888,1,0,0,0,1888,1889,3,192,96,0,1889,
        1890,5,185,0,0,1890,1891,5,149,0,0,1891,1892,3,192,96,0,1892,1961,
        1,0,0,0,1893,1894,5,148,0,0,1894,1895,5,184,0,0,1895,1897,5,170,
        0,0,1896,1898,5,187,0,0,1897,1896,1,0,0,0,1897,1898,1,0,0,0,1898,
        1899,1,0,0,0,1899,1901,3,182,91,0,1900,1902,5,175,0,0,1901,1900,
        1,0,0,0,1901,1902,1,0,0,0,1902,1908,1,0,0,0,1903,1905,5,171,0,0,
        1904,1906,5,187,0,0,1905,1904,1,0,0,0,1905,1906,1,0,0,0,1906,1907,
        1,0,0,0,1907,1909,3,182,91,0,1908,1903,1,0,0,0,1908,1909,1,0,0,0,
        1909,1910,1,0,0,0,1910,1911,5,185,0,0,1911,1912,5,149,0,0,1912,1913,
        3,192,96,0,1913,1961,1,0,0,0,1914,1961,5,150,0,0,1915,1961,5,151,
        0,0,1916,1923,5,152,0,0,1917,1924,5,183,0,0,1918,1921,5,177,0,0,
        1919,1920,5,186,0,0,1920,1922,5,177,0,0,1921,1919,1,0,0,0,1921,1922,
        1,0,0,0,1922,1924,1,0,0,0,1923,1917,1,0,0,0,1923,1918,1,0,0,0,1924,
        1961,1,0,0,0,1925,1932,5,153,0,0,1926,1933,5,182,0,0,1927,1930,5,
        181,0,0,1928,1929,5,186,0,0,1929,1931,5,181,0,0,1930,1928,1,0,0,
        0,1930,1931,1,0,0,0,1931,1933,1,0,0,0,1932,1926,1,0,0,0,1932,1927,
        1,0,0,0,1933,1961,1,0,0,0,1934,1946,5,155,0,0,1935,1947,5,182,0,
        0,1936,1939,5,181,0,0,1937,1938,5,186,0,0,1938,1940,5,181,0,0,1939,
        1937,1,0,0,0,1939,1940,1,0,0,0,1940,1947,1,0,0,0,1941,1944,5,180,
        0,0,1942,1943,5,186,0,0,1943,1945,5,180,0,0,1944,1942,1,0,0,0,1944,
        1945,1,0,0,0,1945,1947,1,0,0,0,1946,1935,1,0,0,0,1946,1936,1,0,0,
        0,1946,1941,1,0,0,0,1947,1961,1,0,0,0,1948,1961,5,156,0,0,1949,1961,
        5,157,0,0,1950,1961,5,158,0,0,1951,1961,5,159,0,0,1952,1961,5,160,
        0,0,1953,1961,5,161,0,0,1954,1961,5,162,0,0,1955,1961,5,163,0,0,
        1956,1961,5,164,0,0,1957,1961,5,165,0,0,1958,1961,5,133,0,0,1959,
        1961,5,134,0,0,1960,1831,1,0,0,0,1960,1836,1,0,0,0,1960,1837,1,0,
        0,0,1960,1841,1,0,0,0,1960,1848,1,0,0,0,1960,1850,1,0,0,0,1960,1852,
        1,0,0,0,1960,1854,1,0,0,0,1960,1863,1,0,0,0,1960,1864,1,0,0,0,1960,
        1866,1,0,0,0,1960,1867,1,0,0,0,1960,1876,1,0,0,0,1960,1878,1,0,0,
        0,1960,1893,1,0,0,0,1960,1914,1,0,0,0,1960,1915,1,0,0,0,1960,1916,
        1,0,0,0,1960,1925,1,0,0,0,1960,1934,1,0,0,0,1960,1948,1,0,0,0,1960,
        1949,1,0,0,0,1960,1950,1,0,0,0,1960,1951,1,0,0,0,1960,1952,1,0,0,
        0,1960,1953,1,0,0,0,1960,1954,1,0,0,0,1960,1955,1,0,0,0,1960,1956,
        1,0,0,0,1960,1957,1,0,0,0,1960,1958,1,0,0,0,1960,1959,1,0,0,0,1961,
        1970,1,0,0,0,1962,1963,10,32,0,0,1963,1964,5,137,0,0,1964,1969,3,
        192,96,0,1965,1966,10,14,0,0,1966,1967,5,154,0,0,1967,1969,3,192,
        96,0,1968,1962,1,0,0,0,1968,1965,1,0,0,0,1969,1972,1,0,0,0,1970,
        1968,1,0,0,0,1970,1971,1,0,0,0,1971,189,1,0,0,0,1972,1970,1,0,0,
        0,1973,1974,7,3,0,0,1974,191,1,0,0,0,1975,1976,7,3,0,0,1976,193,
        1,0,0,0,1977,1978,7,3,0,0,1978,195,1,0,0,0,1979,1980,7,3,0,0,1980,
        197,1,0,0,0,1981,1992,5,135,0,0,1982,1990,5,215,0,0,1983,1985,5,
        218,0,0,1984,1983,1,0,0,0,1985,1988,1,0,0,0,1986,1984,1,0,0,0,1986,
        1987,1,0,0,0,1987,1991,1,0,0,0,1988,1986,1,0,0,0,1989,1991,5,219,
        0,0,1990,1986,1,0,0,0,1990,1989,1,0,0,0,1991,1993,1,0,0,0,1992,1982,
        1,0,0,0,1992,1993,1,0,0,0,1993,1994,1,0,0,0,1994,1998,5,216,0,0,
        1995,1997,5,218,0,0,1996,1995,1,0,0,0,1997,2000,1,0,0,0,1998,1996,
        1,0,0,0,1998,1999,1,0,0,0,1999,2001,1,0,0,0,2000,1998,1,0,0,0,2001,
        2002,5,217,0,0,2002,199,1,0,0,0,2003,2004,5,166,0,0,2004,2005,3,
        202,101,0,2005,2006,3,182,91,0,2006,201,1,0,0,0,2007,2008,7,4,0,
        0,2008,2009,3,204,102,0,2009,2010,5,221,0,0,2010,2014,1,0,0,0,2011,
        2012,5,169,0,0,2012,2014,3,212,106,0,2013,2007,1,0,0,0,2013,2011,
        1,0,0,0,2014,203,1,0,0,0,2015,2018,5,231,0,0,2016,2017,5,222,0,0,
        2017,2019,3,206,103,0,2018,2016,1,0,0,0,2018,2019,1,0,0,0,2019,205,
        1,0,0,0,2020,2025,3,208,104,0,2021,2022,7,5,0,0,2022,2024,3,206,
        103,0,2023,2021,1,0,0,0,2024,2027,1,0,0,0,2025,2023,1,0,0,0,2025,
        2026,1,0,0,0,2026,207,1,0,0,0,2027,2025,1,0,0,0,2028,2035,5,231,
        0,0,2029,2035,3,210,105,0,2030,2035,5,229,0,0,2031,2035,5,230,0,
        0,2032,2035,5,254,0,0,2033,2035,5,255,0,0,2034,2028,1,0,0,0,2034,
        2029,1,0,0,0,2034,2030,1,0,0,0,2034,2031,1,0,0,0,2034,2032,1,0,0,
        0,2034,2033,1,0,0,0,2035,209,1,0,0,0,2036,2037,5,232,0,0,2037,2038,
        5,256,0,0,2038,2039,3,208,104,0,2039,2040,5,221,0,0,2040,2156,1,
        0,0,0,2041,2042,5,233,0,0,2042,2043,5,256,0,0,2043,2044,3,208,104,
        0,2044,2045,5,221,0,0,2045,2156,1,0,0,0,2046,2047,5,235,0,0,2047,
        2048,5,256,0,0,2048,2049,3,208,104,0,2049,2050,5,221,0,0,2050,2156,
        1,0,0,0,2051,2052,5,236,0,0,2052,2053,5,256,0,0,2053,2054,3,208,
        104,0,2054,2055,5,221,0,0,2055,2156,1,0,0,0,2056,2057,5,237,0,0,
        2057,2058,5,256,0,0,2058,2059,3,208,104,0,2059,2060,5,221,0,0,2060,
        2156,1,0,0,0,2061,2062,5,238,0,0,2062,2063,5,256,0,0,2063,2064,3,
        208,104,0,2064,2065,5,221,0,0,2065,2156,1,0,0,0,2066,2067,5,239,
        0,0,2067,2068,5,256,0,0,2068,2069,3,208,104,0,2069,2070,5,221,0,
        0,2070,2156,1,0,0,0,2071,2072,5,240,0,0,2072,2073,5,256,0,0,2073,
        2074,3,208,104,0,2074,2075,5,221,0,0,2075,2156,1,0,0,0,2076,2077,
        5,241,0,0,2077,2078,5,256,0,0,2078,2079,3,208,104,0,2079,2080,5,
        221,0,0,2080,2156,1,0,0,0,2081,2082,5,242,0,0,2082,2083,5,256,0,
        0,2083,2084,3,208,104,0,2084,2085,5,221,0,0,2085,2156,1,0,0,0,2086,
        2087,5,243,0,0,2087,2088,5,256,0,0,2088,2089,3,208,104,0,2089,2090,
        5,221,0,0,2090,2156,1,0,0,0,2091,2092,5,244,0,0,2092,2093,5,256,
        0,0,2093,2098,3,208,104,0,2094,2095,5,228,0,0,2095,2097,3,208,104,
        0,2096,2094,1,0,0,0,2097,2100,1,0,0,0,2098,2096,1,0,0,0,2098,2099,
        1,0,0,0,2099,2101,1,0,0,0,2100,2098,1,0,0,0,2101,2102,5,221,0,0,
        2102,2156,1,0,0,0,2103,2104,5,245,0,0,2104,2105,5,256,0,0,2105,2106,
        3,208,104,0,2106,2107,5,221,0,0,2107,2156,1,0,0,0,2108,2109,5,246,
        0,0,2109,2110,5,256,0,0,2110,2115,3,208,104,0,2111,2112,5,228,0,
        0,2112,2114,3,208,104,0,2113,2111,1,0,0,0,2114,2117,1,0,0,0,2115,
        2113,1,0,0,0,2115,2116,1,0,0,0,2116,2118,1,0,0,0,2117,2115,1,0,0,
        0,2118,2119,5,221,0,0,2119,2156,1,0,0,0,2120,2121,5,247,0,0,2121,
        2122,5,256,0,0,2122,2123,3,208,104,0,2123,2124,5,228,0,0,2124,2125,
        3,208,104,0,2125,2126,5,221,0,0,2126,2156,1,0,0,0,2127,2128,5,248,
        0,0,2128,2129,5,256,0,0,2129,2130,3,208,104,0,2130,2131,5,221,0,
        0,2131,2156,1,0,0,0,2132,2133,5,249,0,0,2133,2134,5,256,0,0,2134,
        2156,5,221,0,0,2135,2136,5,250,0,0,2136,2137,5,256,0,0,2137,2138,
        3,208,104,0,2138,2139,5,221,0,0,2139,2156,1,0,0,0,2140,2141,5,251,
        0,0,2141,2142,5,256,0,0,2142,2143,3,208,104,0,2143,2144,5,221,0,
        0,2144,2156,1,0,0,0,2145,2146,5,252,0,0,2146,2147,5,256,0,0,2147,
        2148,3,208,104,0,2148,2149,5,221,0,0,2149,2156,1,0,0,0,2150,2151,
        5,253,0,0,2151,2152,5,256,0,0,2152,2153,3,208,104,0,2153,2154,5,
        221,0,0,2154,2156,1,0,0,0,2155,2036,1,0,0,0,2155,2041,1,0,0,0,2155,
        2046,1,0,0,0,2155,2051,1,0,0,0,2155,2056,1,0,0,0,2155,2061,1,0,0,
        0,2155,2066,1,0,0,0,2155,2071,1,0,0,0,2155,2076,1,0,0,0,2155,2081,
        1,0,0,0,2155,2086,1,0,0,0,2155,2091,1,0,0,0,2155,2103,1,0,0,0,2155,
        2108,1,0,0,0,2155,2120,1,0,0,0,2155,2127,1,0,0,0,2155,2132,1,0,0,
        0,2155,2135,1,0,0,0,2155,2140,1,0,0,0,2155,2145,1,0,0,0,2155,2150,
        1,0,0,0,2156,211,1,0,0,0,2157,2158,7,6,0,0,2158,2159,5,257,0,0,2159,
        2160,5,266,0,0,2160,2161,5,258,0,0,2161,213,1,0,0,0,185,253,255,
        264,270,276,285,293,301,309,317,321,324,330,336,342,351,360,369,
        378,387,396,405,414,423,432,441,450,459,468,477,486,495,504,513,
        530,549,562,586,589,600,609,614,619,626,630,635,640,645,650,655,
        660,663,668,674,704,716,744,761,766,779,786,811,840,854,859,863,
        868,871,875,880,885,889,895,899,903,906,908,912,936,944,961,969,
        975,986,989,1001,1008,1036,1070,1080,1085,1090,1094,1106,1130,1150,
        1156,1162,1174,1180,1186,1194,1204,1210,1216,1227,1230,1233,1237,
        1249,1256,1263,1270,1299,1349,1368,1403,1443,1467,1504,1512,1527,
        1532,1537,1543,1548,1554,1560,1566,1578,1582,1609,1626,1663,1686,
        1712,1732,1742,1747,1752,1757,1762,1767,1772,1777,1782,1787,1792,
        1797,1802,1805,1820,1828,1843,1859,1861,1872,1874,1882,1886,1897,
        1901,1905,1908,1921,1923,1930,1932,1939,1944,1946,1960,1968,1970,
        1986,1990,1992,1998,2013,2018,2025,2034,2098,2115,2155
    ]

class XplorMRParser ( Parser ):

    grammarFileName = "XplorMRParser.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ "<INVALID>", "'SET'", "<INVALID>", "'NOE'", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "'BHIG'", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "'CUTOFF'", "'CUTON'", "'FROM'", "'TO'", 
                     "'PEAK'", "'SPECTRUM'", "'VOLUME'", "'PPM1'", "'PPM2'", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "'TYPE'", "<INVALID>", "<INVALID>", "<INVALID>", "'CV'", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "'XADC'", "<INVALID>", 
                     "'SIZE'", "'ZERO'", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "'RAMA'", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "'SORT'", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "'DCSA'", "<INVALID>", "'PCSA'", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "'TAUC'", "<INVALID>", 
                     "'XPCS'", "'TOLL'", "'SAVE'", "'FMED'", "'ERRON'", 
                     "'ERROFF'", "'FON'", "'FOFF'", "'SON'", "'SOFF'", "'FRUN'", 
                     "<INVALID>", "<INVALID>", "'XCCR'", "'WEIP'", "'HBDA'", 
                     "'HBDB'", "'KDIR'", "'KLIN'", "'NSEG'", "'NMIN'", "'NMAX'", 
                     "'SEGM'", "'OHCUT'", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "'UPDFRQ'", "'PRNFRQ'", "'FREEMODE'", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "'ALL'", "<INVALID>", "'ATOM'", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "'ID'", "<INVALID>", "'NAME'", 
                     "<INVALID>", "'CUT'", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "'STORE1'", 
                     "'STORE2'", "'STORE3'", "'STORE4'", "'STORE5'", "'STORE6'", 
                     "'STORE7'", "'STORE8'", "'STORE9'", "'TAG'", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "'SHOW'", "'TAIL'", "'HEAD'", 
                     "'OR'", "'AND'", "'NOT'", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "':'", "<INVALID>", "'<'", "'>'", "'<='", 
                     "'>='", "'#'", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "'+'", "'-'", 
                     "<INVALID>", "'/'", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "'ACOS'", "'ASIN'", 
                     "'COS'", "'DECODE'", "'ENCODE'", "'EXP'", "'GAUSS'", 
                     "'HEAVY'", "'INT'", "'LOG10'", "'LOG'", "<INVALID>", 
                     "'MAXW'", "<INVALID>", "'MOD'", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "'SIN'", "'SQRT'", "'TAN'", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "'RMS'", "'SUM'" ]

    symbolicNames = [ "<INVALID>", "Set", "End", "Noe", "Assign", "Asymptote", 
                      "Averaging", "Bhig", "Ceiling", "Classification", 
                      "CountViol", "Distribute", "Monomers", "Ncount", "Nrestraints", 
                      "Potential", "Predict", "Print", "Threshold", "Reset", 
                      "Rswitch", "Scale", "SoExponent", "SqConstant", "SqExponent", 
                      "SqOffset", "Temperature", "Cutoff", "Cuton", "From", 
                      "To", "Peak", "Spectrum", "Volume", "Ppm1", "Ppm2", 
                      "Restraints", "Dihedral", "Nassign", "Sanisotropy", 
                      "Coefficients", "ForceConstant", "Xdipolar", "Dipolar", 
                      "Type", "Sign", "Average", "VectorAngle", "Cv", "Partition", 
                      "Tensor", "Anisotropy", "Planar", "Group", "Initialize", 
                      "Selection", "Weight", "Harmonic", "Exponent", "Normal", 
                      "Xadc", "Expectation", "Size", "Zero", "Coupling", 
                      "DegEnergy", "Carbon", "PhiStep", "PsiStep", "Rcoil", 
                      "Proton", "Observed", "Amides", "Nitrogens", "Oxygens", 
                      "RingAtoms", "AlphasAndAmides", "Error", "Ramachandran", 
                      "Gaussian", "Phase", "Quartic", "Shape", "Sort", "Dimensions", 
                      "Collapse", "Danisotropy", "Orient", "Height", "MaxGaussians", 
                      "NewGaussian", "Dcsa", "Sigma", "Pcsa", "OneBond", 
                      "AngleDb", "DerivFlag", "Angle_or_Dihedral", "Paramagnetic", 
                      "Kconst", "Omega", "Tauc", "Debug", "Xpcs", "Tolerance", 
                      "Save", "Fmed", "ErrOn", "ErrOff", "Fon", "Foff", 
                      "Son", "Soff", "Frun", "Xrdcoupling", "Xangle", "Xccr", 
                      "Weip", "Hbda", "Hbdb", "Kdir", "Klin", "Nseg", "Nmin", 
                      "Nmax", "Segm", "Ohcut", "Coh1cut", "Coh2cut", "Ohncut", 
                      "Updfrq", "Prnfrq", "Freemode", "Donor", "Acceptor", 
                      "Flags", "All", "Around", "Atom", "Attribute", "BondedTo", 
                      "ByGroup", "ByRes", "Chemical", "Hydrogen", "Id", 
                      "Known", "Name", "Point", "Cut", "Previous", "Pseudo", 
                      "Residue", "Resname", "Saround", "SegIdentifier", 
                      "Store_1", "Store_2", "Store_3", "Store_4", "Store_5", 
                      "Store_6", "Store_7", "Store_8", "Store_9", "Tag", 
                      "Vector", "Do_Lp", "Identify_Lp", "Show", "Tail", 
                      "Head", "Or_op", "And_op", "Not_op", "Comma", "Complex", 
                      "Integer", "Logical", "Real", "Double_quote_string", 
                      "Simple_name", "Simple_names", "Integers", "L_paren", 
                      "R_paren", "Colon", "Equ_op", "Lt_op", "Gt_op", "Leq_op", 
                      "Geq_op", "Neq_op", "SPACE", "COMMENT", "SECTION_COMMENT", 
                      "LINE_COMMENT", "SET_VARIABLE", "Abs", "Attr_properties", 
                      "Comparison_ops", "SPACE_ATTR", "Averaging_methods", 
                      "Simple_name_A", "SPACE_AVER", "Equ_op_P", "Potential_types", 
                      "Simple_name_P", "SPACE_POTE", "Rdc_dist_fix_types", 
                      "Rdc_or_Diff_anis_types", "Csa_types", "SPACE_TYPE", 
                      "Gauss_or_Quart", "SPACE_SHAP", "Exclude", "Include", 
                      "End_F", "Class_name", "Any_class", "SPACE_FLAG", 
                      "R_paren_VE", "Equ_op_VE", "Add_op_VE", "Sub_op_VE", 
                      "Mul_op_VE", "Div_op_VE", "Exp_op_VE", "Comma_VE", 
                      "Integer_VE", "Real_VE", "Atom_properties_VE", "Abs_VE", 
                      "Acos_VE", "Asin_VE", "Cos_VE", "Decode_VE", "Encode_VE", 
                      "Exp_VE", "Gauss_VE", "Heavy_VE", "Int_VE", "Log10_VE", 
                      "Log_VE", "Max_VE", "Maxw_VE", "Min_VE", "Mod_VE", 
                      "Norm_VE", "Random_VE", "Sign_VE", "Sin_VE", "Sqrt_VE", 
                      "Tan_VE", "Simple_name_VE", "Double_quote_string_VE", 
                      "L_paren_VF", "L_paren_VS", "R_paren_VS", "Average_VS", 
                      "Element_VS", "Max_VS", "Min_VS", "Norm_VS", "Rms_VS", 
                      "Sum_VS", "Atom_properties_VS", "SPACE_VS" ]

    RULE_xplor_nih_mr = 0
    RULE_distance_restraint = 1
    RULE_dihedral_angle_restraint = 2
    RULE_rdc_restraint = 3
    RULE_planar_restraint = 4
    RULE_harmonic_restraint = 5
    RULE_antidistance_restraint = 6
    RULE_coupling_restraint = 7
    RULE_carbon_shift_restraint = 8
    RULE_proton_shift_restraint = 9
    RULE_dihedral_angle_db_restraint = 10
    RULE_radius_of_gyration_restraint = 11
    RULE_diffusion_anisotropy_restraint = 12
    RULE_orientation_db_restraint = 13
    RULE_csa_restraint = 14
    RULE_pcsa_restraint = 15
    RULE_one_bond_coupling_restraint = 16
    RULE_angle_db_restraint = 17
    RULE_pre_restraint = 18
    RULE_pcs_restraint = 19
    RULE_prdc_restraint = 20
    RULE_porientation_restraint = 21
    RULE_pccr_restraint = 22
    RULE_hbond_restraint = 23
    RULE_hbond_db_restraint = 24
    RULE_noe_statement = 25
    RULE_noe_assign = 26
    RULE_predict_statement = 27
    RULE_noe_annotation = 28
    RULE_dihedral_statement = 29
    RULE_dihedral_assign = 30
    RULE_sani_statement = 31
    RULE_sani_assign = 32
    RULE_xdip_statement = 33
    RULE_xdip_assign = 34
    RULE_vean_statement = 35
    RULE_vean_assign = 36
    RULE_tenso_statement = 37
    RULE_tenso_assign = 38
    RULE_anis_statement = 39
    RULE_anis_assign = 40
    RULE_planar_statement = 41
    RULE_group_statement = 42
    RULE_harmonic_statement = 43
    RULE_harmonic_assign = 44
    RULE_antidistance_statement = 45
    RULE_xadc_assign = 46
    RULE_coupling_statement = 47
    RULE_coup_assign = 48
    RULE_carbon_shift_statement = 49
    RULE_carbon_shift_assign = 50
    RULE_carbon_shift_rcoil = 51
    RULE_proton_shift_statement = 52
    RULE_observed = 53
    RULE_proton_shift_rcoil = 54
    RULE_proton_shift_anisotropy = 55
    RULE_proton_shift_amides = 56
    RULE_proton_shift_carbons = 57
    RULE_proton_shift_nitrogens = 58
    RULE_proton_shift_oxygens = 59
    RULE_proton_shift_ring_atoms = 60
    RULE_proton_shift_alphas_and_amides = 61
    RULE_ramachandran_statement = 62
    RULE_rama_assign = 63
    RULE_collapse_statement = 64
    RULE_coll_assign = 65
    RULE_diffusion_statement = 66
    RULE_dani_assign = 67
    RULE_orientation_statement = 68
    RULE_orie_assign = 69
    RULE_csa_statement = 70
    RULE_csa_assign = 71
    RULE_pcsa_statement = 72
    RULE_one_bond_coupling_statement = 73
    RULE_one_bond_assign = 74
    RULE_angle_db_statement = 75
    RULE_angle_db_assign = 76
    RULE_pre_statement = 77
    RULE_pre_assign = 78
    RULE_pcs_statement = 79
    RULE_pcs_assign = 80
    RULE_prdc_statement = 81
    RULE_prdc_assign = 82
    RULE_porientation_statement = 83
    RULE_porientation_assign = 84
    RULE_pccr_statement = 85
    RULE_pccr_assign = 86
    RULE_hbond_statement = 87
    RULE_hbond_assign = 88
    RULE_hbond_db_statement = 89
    RULE_hbond_db_assign = 90
    RULE_selection = 91
    RULE_selection_expression = 92
    RULE_term = 93
    RULE_factor = 94
    RULE_number = 95
    RULE_number_f = 96
    RULE_number_s = 97
    RULE_number_a = 98
    RULE_flag_statement = 99
    RULE_vector_statement = 100
    RULE_vector_mode = 101
    RULE_vector_expression = 102
    RULE_vector_operation = 103
    RULE_vflc = 104
    RULE_vector_func_call = 105
    RULE_vector_show_property = 106

    ruleNames =  [ "xplor_nih_mr", "distance_restraint", "dihedral_angle_restraint", 
                   "rdc_restraint", "planar_restraint", "harmonic_restraint", 
                   "antidistance_restraint", "coupling_restraint", "carbon_shift_restraint", 
                   "proton_shift_restraint", "dihedral_angle_db_restraint", 
                   "radius_of_gyration_restraint", "diffusion_anisotropy_restraint", 
                   "orientation_db_restraint", "csa_restraint", "pcsa_restraint", 
                   "one_bond_coupling_restraint", "angle_db_restraint", 
                   "pre_restraint", "pcs_restraint", "prdc_restraint", "porientation_restraint", 
                   "pccr_restraint", "hbond_restraint", "hbond_db_restraint", 
                   "noe_statement", "noe_assign", "predict_statement", "noe_annotation", 
                   "dihedral_statement", "dihedral_assign", "sani_statement", 
                   "sani_assign", "xdip_statement", "xdip_assign", "vean_statement", 
                   "vean_assign", "tenso_statement", "tenso_assign", "anis_statement", 
                   "anis_assign", "planar_statement", "group_statement", 
                   "harmonic_statement", "harmonic_assign", "antidistance_statement", 
                   "xadc_assign", "coupling_statement", "coup_assign", "carbon_shift_statement", 
                   "carbon_shift_assign", "carbon_shift_rcoil", "proton_shift_statement", 
                   "observed", "proton_shift_rcoil", "proton_shift_anisotropy", 
                   "proton_shift_amides", "proton_shift_carbons", "proton_shift_nitrogens", 
                   "proton_shift_oxygens", "proton_shift_ring_atoms", "proton_shift_alphas_and_amides", 
                   "ramachandran_statement", "rama_assign", "collapse_statement", 
                   "coll_assign", "diffusion_statement", "dani_assign", 
                   "orientation_statement", "orie_assign", "csa_statement", 
                   "csa_assign", "pcsa_statement", "one_bond_coupling_statement", 
                   "one_bond_assign", "angle_db_statement", "angle_db_assign", 
                   "pre_statement", "pre_assign", "pcs_statement", "pcs_assign", 
                   "prdc_statement", "prdc_assign", "porientation_statement", 
                   "porientation_assign", "pccr_statement", "pccr_assign", 
                   "hbond_statement", "hbond_assign", "hbond_db_statement", 
                   "hbond_db_assign", "selection", "selection_expression", 
                   "term", "factor", "number", "number_f", "number_s", "number_a", 
                   "flag_statement", "vector_statement", "vector_mode", 
                   "vector_expression", "vector_operation", "vflc", "vector_func_call", 
                   "vector_show_property" ]

    EOF = Token.EOF
    Set=1
    End=2
    Noe=3
    Assign=4
    Asymptote=5
    Averaging=6
    Bhig=7
    Ceiling=8
    Classification=9
    CountViol=10
    Distribute=11
    Monomers=12
    Ncount=13
    Nrestraints=14
    Potential=15
    Predict=16
    Print=17
    Threshold=18
    Reset=19
    Rswitch=20
    Scale=21
    SoExponent=22
    SqConstant=23
    SqExponent=24
    SqOffset=25
    Temperature=26
    Cutoff=27
    Cuton=28
    From=29
    To=30
    Peak=31
    Spectrum=32
    Volume=33
    Ppm1=34
    Ppm2=35
    Restraints=36
    Dihedral=37
    Nassign=38
    Sanisotropy=39
    Coefficients=40
    ForceConstant=41
    Xdipolar=42
    Dipolar=43
    Type=44
    Sign=45
    Average=46
    VectorAngle=47
    Cv=48
    Partition=49
    Tensor=50
    Anisotropy=51
    Planar=52
    Group=53
    Initialize=54
    Selection=55
    Weight=56
    Harmonic=57
    Exponent=58
    Normal=59
    Xadc=60
    Expectation=61
    Size=62
    Zero=63
    Coupling=64
    DegEnergy=65
    Carbon=66
    PhiStep=67
    PsiStep=68
    Rcoil=69
    Proton=70
    Observed=71
    Amides=72
    Nitrogens=73
    Oxygens=74
    RingAtoms=75
    AlphasAndAmides=76
    Error=77
    Ramachandran=78
    Gaussian=79
    Phase=80
    Quartic=81
    Shape=82
    Sort=83
    Dimensions=84
    Collapse=85
    Danisotropy=86
    Orient=87
    Height=88
    MaxGaussians=89
    NewGaussian=90
    Dcsa=91
    Sigma=92
    Pcsa=93
    OneBond=94
    AngleDb=95
    DerivFlag=96
    Angle_or_Dihedral=97
    Paramagnetic=98
    Kconst=99
    Omega=100
    Tauc=101
    Debug=102
    Xpcs=103
    Tolerance=104
    Save=105
    Fmed=106
    ErrOn=107
    ErrOff=108
    Fon=109
    Foff=110
    Son=111
    Soff=112
    Frun=113
    Xrdcoupling=114
    Xangle=115
    Xccr=116
    Weip=117
    Hbda=118
    Hbdb=119
    Kdir=120
    Klin=121
    Nseg=122
    Nmin=123
    Nmax=124
    Segm=125
    Ohcut=126
    Coh1cut=127
    Coh2cut=128
    Ohncut=129
    Updfrq=130
    Prnfrq=131
    Freemode=132
    Donor=133
    Acceptor=134
    Flags=135
    All=136
    Around=137
    Atom=138
    Attribute=139
    BondedTo=140
    ByGroup=141
    ByRes=142
    Chemical=143
    Hydrogen=144
    Id=145
    Known=146
    Name=147
    Point=148
    Cut=149
    Previous=150
    Pseudo=151
    Residue=152
    Resname=153
    Saround=154
    SegIdentifier=155
    Store_1=156
    Store_2=157
    Store_3=158
    Store_4=159
    Store_5=160
    Store_6=161
    Store_7=162
    Store_8=163
    Store_9=164
    Tag=165
    Vector=166
    Do_Lp=167
    Identify_Lp=168
    Show=169
    Tail=170
    Head=171
    Or_op=172
    And_op=173
    Not_op=174
    Comma=175
    Complex=176
    Integer=177
    Logical=178
    Real=179
    Double_quote_string=180
    Simple_name=181
    Simple_names=182
    Integers=183
    L_paren=184
    R_paren=185
    Colon=186
    Equ_op=187
    Lt_op=188
    Gt_op=189
    Leq_op=190
    Geq_op=191
    Neq_op=192
    SPACE=193
    COMMENT=194
    SECTION_COMMENT=195
    LINE_COMMENT=196
    SET_VARIABLE=197
    Abs=198
    Attr_properties=199
    Comparison_ops=200
    SPACE_ATTR=201
    Averaging_methods=202
    Simple_name_A=203
    SPACE_AVER=204
    Equ_op_P=205
    Potential_types=206
    Simple_name_P=207
    SPACE_POTE=208
    Rdc_dist_fix_types=209
    Rdc_or_Diff_anis_types=210
    Csa_types=211
    SPACE_TYPE=212
    Gauss_or_Quart=213
    SPACE_SHAP=214
    Exclude=215
    Include=216
    End_F=217
    Class_name=218
    Any_class=219
    SPACE_FLAG=220
    R_paren_VE=221
    Equ_op_VE=222
    Add_op_VE=223
    Sub_op_VE=224
    Mul_op_VE=225
    Div_op_VE=226
    Exp_op_VE=227
    Comma_VE=228
    Integer_VE=229
    Real_VE=230
    Atom_properties_VE=231
    Abs_VE=232
    Acos_VE=233
    Asin_VE=234
    Cos_VE=235
    Decode_VE=236
    Encode_VE=237
    Exp_VE=238
    Gauss_VE=239
    Heavy_VE=240
    Int_VE=241
    Log10_VE=242
    Log_VE=243
    Max_VE=244
    Maxw_VE=245
    Min_VE=246
    Mod_VE=247
    Norm_VE=248
    Random_VE=249
    Sign_VE=250
    Sin_VE=251
    Sqrt_VE=252
    Tan_VE=253
    Simple_name_VE=254
    Double_quote_string_VE=255
    L_paren_VF=256
    L_paren_VS=257
    R_paren_VS=258
    Average_VS=259
    Element_VS=260
    Max_VS=261
    Min_VS=262
    Norm_VS=263
    Rms_VS=264
    Sum_VS=265
    Atom_properties_VS=266
    SPACE_VS=267

    def __init__(self, input:TokenStream, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.10.1")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None




    class Xplor_nih_mrContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EOF(self):
            return self.getToken(XplorMRParser.EOF, 0)

        def distance_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Distance_restraintContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Distance_restraintContext,i)


        def dihedral_angle_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Dihedral_angle_restraintContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Dihedral_angle_restraintContext,i)


        def rdc_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Rdc_restraintContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Rdc_restraintContext,i)


        def planar_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Planar_restraintContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Planar_restraintContext,i)


        def harmonic_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Harmonic_restraintContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Harmonic_restraintContext,i)


        def antidistance_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Antidistance_restraintContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Antidistance_restraintContext,i)


        def coupling_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Coupling_restraintContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Coupling_restraintContext,i)


        def carbon_shift_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Carbon_shift_restraintContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Carbon_shift_restraintContext,i)


        def proton_shift_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Proton_shift_restraintContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Proton_shift_restraintContext,i)


        def dihedral_angle_db_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Dihedral_angle_db_restraintContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Dihedral_angle_db_restraintContext,i)


        def radius_of_gyration_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Radius_of_gyration_restraintContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Radius_of_gyration_restraintContext,i)


        def diffusion_anisotropy_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Diffusion_anisotropy_restraintContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Diffusion_anisotropy_restraintContext,i)


        def orientation_db_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Orientation_db_restraintContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Orientation_db_restraintContext,i)


        def csa_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Csa_restraintContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Csa_restraintContext,i)


        def pcsa_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Pcsa_restraintContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Pcsa_restraintContext,i)


        def one_bond_coupling_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.One_bond_coupling_restraintContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.One_bond_coupling_restraintContext,i)


        def angle_db_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Angle_db_restraintContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Angle_db_restraintContext,i)


        def pre_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Pre_restraintContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Pre_restraintContext,i)


        def pcs_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Pcs_restraintContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Pcs_restraintContext,i)


        def prdc_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Prdc_restraintContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Prdc_restraintContext,i)


        def porientation_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Porientation_restraintContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Porientation_restraintContext,i)


        def pccr_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Pccr_restraintContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Pccr_restraintContext,i)


        def hbond_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Hbond_restraintContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Hbond_restraintContext,i)


        def hbond_db_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Hbond_db_restraintContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Hbond_db_restraintContext,i)


        def flag_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Flag_statementContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Flag_statementContext,i)


        def vector_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Vector_statementContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Vector_statementContext,i)


        def noe_assign(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Noe_assignContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Noe_assignContext,i)


        def dihedral_assign(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Dihedral_assignContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Dihedral_assignContext,i)


        def sani_assign(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Sani_assignContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Sani_assignContext,i)


        def planar_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Planar_statementContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Planar_statementContext,i)


        def harmonic_assign(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Harmonic_assignContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Harmonic_assignContext,i)


        def hbond_assign(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Hbond_assignContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Hbond_assignContext,i)


        def hbond_db_assign(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Hbond_db_assignContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Hbond_db_assignContext,i)


        def coup_assign(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Coup_assignContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Coup_assignContext,i)


        def xadc_assign(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Xadc_assignContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Xadc_assignContext,i)


        def coll_assign(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Coll_assignContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Coll_assignContext,i)


        def csa_assign(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Csa_assignContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Csa_assignContext,i)


        def pre_assign(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Pre_assignContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Pre_assignContext,i)


        def pcs_assign(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Pcs_assignContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Pcs_assignContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_xplor_nih_mr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterXplor_nih_mr" ):
                listener.enterXplor_nih_mr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitXplor_nih_mr" ):
                listener.exitXplor_nih_mr(self)




    def xplor_nih_mr(self):

        localctx = XplorMRParser.Xplor_nih_mrContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_xplor_nih_mr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 255
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << XplorMRParser.Noe) | (1 << XplorMRParser.Assign) | (1 << XplorMRParser.Restraints) | (1 << XplorMRParser.Dihedral) | (1 << XplorMRParser.Sanisotropy) | (1 << XplorMRParser.Xdipolar) | (1 << XplorMRParser.Dipolar) | (1 << XplorMRParser.VectorAngle) | (1 << XplorMRParser.Tensor) | (1 << XplorMRParser.Anisotropy) | (1 << XplorMRParser.Planar) | (1 << XplorMRParser.Group) | (1 << XplorMRParser.Initialize) | (1 << XplorMRParser.Harmonic) | (1 << XplorMRParser.Xadc))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (XplorMRParser.Coupling - 64)) | (1 << (XplorMRParser.Carbon - 64)) | (1 << (XplorMRParser.Proton - 64)) | (1 << (XplorMRParser.Ramachandran - 64)) | (1 << (XplorMRParser.Collapse - 64)) | (1 << (XplorMRParser.Danisotropy - 64)) | (1 << (XplorMRParser.Orient - 64)) | (1 << (XplorMRParser.Dcsa - 64)) | (1 << (XplorMRParser.Pcsa - 64)) | (1 << (XplorMRParser.OneBond - 64)) | (1 << (XplorMRParser.AngleDb - 64)) | (1 << (XplorMRParser.Paramagnetic - 64)) | (1 << (XplorMRParser.Xpcs - 64)) | (1 << (XplorMRParser.Xrdcoupling - 64)) | (1 << (XplorMRParser.Xangle - 64)) | (1 << (XplorMRParser.Xccr - 64)) | (1 << (XplorMRParser.Hbda - 64)) | (1 << (XplorMRParser.Hbdb - 64)))) != 0) or _la==XplorMRParser.Flags or _la==XplorMRParser.Vector:
                self.state = 253
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,0,self._ctx)
                if la_ == 1:
                    self.state = 214
                    self.distance_restraint()
                    pass

                elif la_ == 2:
                    self.state = 215
                    self.dihedral_angle_restraint()
                    pass

                elif la_ == 3:
                    self.state = 216
                    self.rdc_restraint()
                    pass

                elif la_ == 4:
                    self.state = 217
                    self.planar_restraint()
                    pass

                elif la_ == 5:
                    self.state = 218
                    self.harmonic_restraint()
                    pass

                elif la_ == 6:
                    self.state = 219
                    self.antidistance_restraint()
                    pass

                elif la_ == 7:
                    self.state = 220
                    self.coupling_restraint()
                    pass

                elif la_ == 8:
                    self.state = 221
                    self.carbon_shift_restraint()
                    pass

                elif la_ == 9:
                    self.state = 222
                    self.proton_shift_restraint()
                    pass

                elif la_ == 10:
                    self.state = 223
                    self.dihedral_angle_db_restraint()
                    pass

                elif la_ == 11:
                    self.state = 224
                    self.radius_of_gyration_restraint()
                    pass

                elif la_ == 12:
                    self.state = 225
                    self.diffusion_anisotropy_restraint()
                    pass

                elif la_ == 13:
                    self.state = 226
                    self.orientation_db_restraint()
                    pass

                elif la_ == 14:
                    self.state = 227
                    self.csa_restraint()
                    pass

                elif la_ == 15:
                    self.state = 228
                    self.pcsa_restraint()
                    pass

                elif la_ == 16:
                    self.state = 229
                    self.one_bond_coupling_restraint()
                    pass

                elif la_ == 17:
                    self.state = 230
                    self.angle_db_restraint()
                    pass

                elif la_ == 18:
                    self.state = 231
                    self.pre_restraint()
                    pass

                elif la_ == 19:
                    self.state = 232
                    self.pcs_restraint()
                    pass

                elif la_ == 20:
                    self.state = 233
                    self.prdc_restraint()
                    pass

                elif la_ == 21:
                    self.state = 234
                    self.porientation_restraint()
                    pass

                elif la_ == 22:
                    self.state = 235
                    self.pccr_restraint()
                    pass

                elif la_ == 23:
                    self.state = 236
                    self.hbond_restraint()
                    pass

                elif la_ == 24:
                    self.state = 237
                    self.hbond_db_restraint()
                    pass

                elif la_ == 25:
                    self.state = 238
                    self.flag_statement()
                    pass

                elif la_ == 26:
                    self.state = 239
                    self.vector_statement()
                    pass

                elif la_ == 27:
                    self.state = 240
                    self.noe_assign()
                    pass

                elif la_ == 28:
                    self.state = 241
                    self.dihedral_assign()
                    pass

                elif la_ == 29:
                    self.state = 242
                    self.sani_assign()
                    pass

                elif la_ == 30:
                    self.state = 243
                    self.planar_statement()
                    pass

                elif la_ == 31:
                    self.state = 244
                    self.harmonic_assign()
                    pass

                elif la_ == 32:
                    self.state = 245
                    self.hbond_assign()
                    pass

                elif la_ == 33:
                    self.state = 246
                    self.hbond_db_assign()
                    pass

                elif la_ == 34:
                    self.state = 247
                    self.coup_assign()
                    pass

                elif la_ == 35:
                    self.state = 248
                    self.xadc_assign()
                    pass

                elif la_ == 36:
                    self.state = 249
                    self.coll_assign()
                    pass

                elif la_ == 37:
                    self.state = 250
                    self.csa_assign()
                    pass

                elif la_ == 38:
                    self.state = 251
                    self.pre_assign()
                    pass

                elif la_ == 39:
                    self.state = 252
                    self.pcs_assign()
                    pass


                self.state = 257
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 258
            self.match(XplorMRParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Distance_restraintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Noe(self):
            return self.getToken(XplorMRParser.Noe, 0)

        def End(self):
            return self.getToken(XplorMRParser.End, 0)

        def noe_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Noe_statementContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Noe_statementContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_distance_restraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDistance_restraint" ):
                listener.enterDistance_restraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDistance_restraint" ):
                listener.exitDistance_restraint(self)




    def distance_restraint(self):

        localctx = XplorMRParser.Distance_restraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_distance_restraint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 260
            self.match(XplorMRParser.Noe)
            self.state = 264
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << XplorMRParser.Assign) | (1 << XplorMRParser.Asymptote) | (1 << XplorMRParser.Averaging) | (1 << XplorMRParser.Bhig) | (1 << XplorMRParser.Ceiling) | (1 << XplorMRParser.Classification) | (1 << XplorMRParser.CountViol) | (1 << XplorMRParser.Distribute) | (1 << XplorMRParser.Monomers) | (1 << XplorMRParser.Ncount) | (1 << XplorMRParser.Nrestraints) | (1 << XplorMRParser.Potential) | (1 << XplorMRParser.Predict) | (1 << XplorMRParser.Print) | (1 << XplorMRParser.Reset) | (1 << XplorMRParser.Rswitch) | (1 << XplorMRParser.Scale) | (1 << XplorMRParser.SoExponent) | (1 << XplorMRParser.SqConstant) | (1 << XplorMRParser.SqExponent) | (1 << XplorMRParser.SqOffset) | (1 << XplorMRParser.Temperature))) != 0):
                self.state = 261
                self.noe_statement()
                self.state = 266
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 267
            self.match(XplorMRParser.End)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Dihedral_angle_restraintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Dihedral(self):
            return self.getToken(XplorMRParser.Dihedral, 0)

        def End(self):
            return self.getToken(XplorMRParser.End, 0)

        def Restraints(self):
            return self.getToken(XplorMRParser.Restraints, 0)

        def dihedral_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Dihedral_statementContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Dihedral_statementContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_dihedral_angle_restraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDihedral_angle_restraint" ):
                listener.enterDihedral_angle_restraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDihedral_angle_restraint" ):
                listener.exitDihedral_angle_restraint(self)




    def dihedral_angle_restraint(self):

        localctx = XplorMRParser.Dihedral_angle_restraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_dihedral_angle_restraint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 270
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==XplorMRParser.Restraints:
                self.state = 269
                self.match(XplorMRParser.Restraints)


            self.state = 272
            self.match(XplorMRParser.Dihedral)
            self.state = 276
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << XplorMRParser.Assign) | (1 << XplorMRParser.Reset) | (1 << XplorMRParser.Scale) | (1 << XplorMRParser.Nassign))) != 0):
                self.state = 273
                self.dihedral_statement()
                self.state = 278
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 279
            self.match(XplorMRParser.End)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Rdc_restraintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Sanisotropy(self):
            return self.getToken(XplorMRParser.Sanisotropy, 0)

        def End(self):
            return self.getToken(XplorMRParser.End, 0)

        def sani_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Sani_statementContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Sani_statementContext,i)


        def Xdipolar(self):
            return self.getToken(XplorMRParser.Xdipolar, 0)

        def Dipolar(self):
            return self.getToken(XplorMRParser.Dipolar, 0)

        def xdip_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Xdip_statementContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Xdip_statementContext,i)


        def VectorAngle(self):
            return self.getToken(XplorMRParser.VectorAngle, 0)

        def vean_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Vean_statementContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Vean_statementContext,i)


        def Tensor(self):
            return self.getToken(XplorMRParser.Tensor, 0)

        def tenso_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Tenso_statementContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Tenso_statementContext,i)


        def Anisotropy(self):
            return self.getToken(XplorMRParser.Anisotropy, 0)

        def anis_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Anis_statementContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Anis_statementContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_rdc_restraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRdc_restraint" ):
                listener.enterRdc_restraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRdc_restraint" ):
                listener.exitRdc_restraint(self)




    def rdc_restraint(self):

        localctx = XplorMRParser.Rdc_restraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_rdc_restraint)
        self._la = 0 # Token type
        try:
            self.state = 321
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [XplorMRParser.Sanisotropy]:
                self.enterOuterAlt(localctx, 1)
                self.state = 281
                self.match(XplorMRParser.Sanisotropy)
                self.state = 285
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << XplorMRParser.Assign) | (1 << XplorMRParser.Classification) | (1 << XplorMRParser.Nrestraints) | (1 << XplorMRParser.Potential) | (1 << XplorMRParser.Print) | (1 << XplorMRParser.Reset) | (1 << XplorMRParser.Coefficients) | (1 << XplorMRParser.ForceConstant))) != 0):
                    self.state = 282
                    self.sani_statement()
                    self.state = 287
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 288
                self.match(XplorMRParser.End)
                pass
            elif token in [XplorMRParser.Xdipolar, XplorMRParser.Dipolar]:
                self.enterOuterAlt(localctx, 2)
                self.state = 289
                _la = self._input.LA(1)
                if not(_la==XplorMRParser.Xdipolar or _la==XplorMRParser.Dipolar):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 293
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << XplorMRParser.Assign) | (1 << XplorMRParser.Classification) | (1 << XplorMRParser.Nrestraints) | (1 << XplorMRParser.Potential) | (1 << XplorMRParser.Print) | (1 << XplorMRParser.Reset) | (1 << XplorMRParser.Scale) | (1 << XplorMRParser.Coefficients) | (1 << XplorMRParser.ForceConstant) | (1 << XplorMRParser.Type) | (1 << XplorMRParser.Sign) | (1 << XplorMRParser.Average))) != 0):
                    self.state = 290
                    self.xdip_statement()
                    self.state = 295
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 296
                self.match(XplorMRParser.End)
                pass
            elif token in [XplorMRParser.VectorAngle]:
                self.enterOuterAlt(localctx, 3)
                self.state = 297
                self.match(XplorMRParser.VectorAngle)
                self.state = 301
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << XplorMRParser.Assign) | (1 << XplorMRParser.Classification) | (1 << XplorMRParser.Nrestraints) | (1 << XplorMRParser.Print) | (1 << XplorMRParser.Reset) | (1 << XplorMRParser.ForceConstant) | (1 << XplorMRParser.Cv) | (1 << XplorMRParser.Partition))) != 0):
                    self.state = 298
                    self.vean_statement()
                    self.state = 303
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 304
                self.match(XplorMRParser.End)
                pass
            elif token in [XplorMRParser.Tensor]:
                self.enterOuterAlt(localctx, 4)
                self.state = 305
                self.match(XplorMRParser.Tensor)
                self.state = 309
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << XplorMRParser.Assign) | (1 << XplorMRParser.Classification) | (1 << XplorMRParser.Nrestraints) | (1 << XplorMRParser.Potential) | (1 << XplorMRParser.Print) | (1 << XplorMRParser.Reset) | (1 << XplorMRParser.Coefficients))) != 0):
                    self.state = 306
                    self.tenso_statement()
                    self.state = 311
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 312
                self.match(XplorMRParser.End)
                pass
            elif token in [XplorMRParser.Anisotropy]:
                self.enterOuterAlt(localctx, 5)
                self.state = 313
                self.match(XplorMRParser.Anisotropy)
                self.state = 317
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << XplorMRParser.Assign) | (1 << XplorMRParser.Classification) | (1 << XplorMRParser.Nrestraints) | (1 << XplorMRParser.Potential) | (1 << XplorMRParser.Print) | (1 << XplorMRParser.Reset) | (1 << XplorMRParser.Coefficients) | (1 << XplorMRParser.ForceConstant) | (1 << XplorMRParser.Type))) != 0):
                    self.state = 314
                    self.anis_statement()
                    self.state = 319
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 320
                self.match(XplorMRParser.End)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Planar_restraintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Planar(self):
            return self.getToken(XplorMRParser.Planar, 0)

        def End(self):
            return self.getToken(XplorMRParser.End, 0)

        def Restraints(self):
            return self.getToken(XplorMRParser.Restraints, 0)

        def planar_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Planar_statementContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Planar_statementContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_planar_restraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPlanar_restraint" ):
                listener.enterPlanar_restraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPlanar_restraint" ):
                listener.exitPlanar_restraint(self)




    def planar_restraint(self):

        localctx = XplorMRParser.Planar_restraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_planar_restraint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 324
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==XplorMRParser.Restraints:
                self.state = 323
                self.match(XplorMRParser.Restraints)


            self.state = 326
            self.match(XplorMRParser.Planar)
            self.state = 330
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==XplorMRParser.Group or _la==XplorMRParser.Initialize:
                self.state = 327
                self.planar_statement()
                self.state = 332
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 333
            self.match(XplorMRParser.End)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Harmonic_restraintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Harmonic(self):
            return self.getToken(XplorMRParser.Harmonic, 0)

        def End(self):
            return self.getToken(XplorMRParser.End, 0)

        def Restraints(self):
            return self.getToken(XplorMRParser.Restraints, 0)

        def harmonic_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Harmonic_statementContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Harmonic_statementContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_harmonic_restraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHarmonic_restraint" ):
                listener.enterHarmonic_restraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHarmonic_restraint" ):
                listener.exitHarmonic_restraint(self)




    def harmonic_restraint(self):

        localctx = XplorMRParser.Harmonic_restraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_harmonic_restraint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 336
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==XplorMRParser.Restraints:
                self.state = 335
                self.match(XplorMRParser.Restraints)


            self.state = 338
            self.match(XplorMRParser.Harmonic)
            self.state = 342
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==XplorMRParser.Exponent or _la==XplorMRParser.Normal:
                self.state = 339
                self.harmonic_statement()
                self.state = 344
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 345
            self.match(XplorMRParser.End)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Antidistance_restraintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Xadc(self):
            return self.getToken(XplorMRParser.Xadc, 0)

        def End(self):
            return self.getToken(XplorMRParser.End, 0)

        def antidistance_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Antidistance_statementContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Antidistance_statementContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_antidistance_restraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAntidistance_restraint" ):
                listener.enterAntidistance_restraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAntidistance_restraint" ):
                listener.exitAntidistance_restraint(self)




    def antidistance_restraint(self):

        localctx = XplorMRParser.Antidistance_restraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_antidistance_restraint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 347
            self.match(XplorMRParser.Xadc)
            self.state = 351
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << XplorMRParser.Assign) | (1 << XplorMRParser.Classification) | (1 << XplorMRParser.Nrestraints) | (1 << XplorMRParser.Print) | (1 << XplorMRParser.Reset) | (1 << XplorMRParser.ForceConstant) | (1 << XplorMRParser.Expectation) | (1 << XplorMRParser.Size) | (1 << XplorMRParser.Zero))) != 0):
                self.state = 348
                self.antidistance_statement()
                self.state = 353
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 354
            self.match(XplorMRParser.End)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Coupling_restraintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Coupling(self):
            return self.getToken(XplorMRParser.Coupling, 0)

        def End(self):
            return self.getToken(XplorMRParser.End, 0)

        def coupling_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Coupling_statementContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Coupling_statementContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_coupling_restraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCoupling_restraint" ):
                listener.enterCoupling_restraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCoupling_restraint" ):
                listener.exitCoupling_restraint(self)




    def coupling_restraint(self):

        localctx = XplorMRParser.Coupling_restraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_coupling_restraint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 356
            self.match(XplorMRParser.Coupling)
            self.state = 360
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((((_la - 4)) & ~0x3f) == 0 and ((1 << (_la - 4)) & ((1 << (XplorMRParser.Assign - 4)) | (1 << (XplorMRParser.Classification - 4)) | (1 << (XplorMRParser.Nrestraints - 4)) | (1 << (XplorMRParser.Potential - 4)) | (1 << (XplorMRParser.Print - 4)) | (1 << (XplorMRParser.Reset - 4)) | (1 << (XplorMRParser.Coefficients - 4)) | (1 << (XplorMRParser.ForceConstant - 4)) | (1 << (XplorMRParser.Cv - 4)) | (1 << (XplorMRParser.Partition - 4)) | (1 << (XplorMRParser.DegEnergy - 4)))) != 0):
                self.state = 357
                self.coupling_statement()
                self.state = 362
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 363
            self.match(XplorMRParser.End)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Carbon_shift_restraintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Carbon(self):
            return self.getToken(XplorMRParser.Carbon, 0)

        def End(self):
            return self.getToken(XplorMRParser.End, 0)

        def carbon_shift_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Carbon_shift_statementContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Carbon_shift_statementContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_carbon_shift_restraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCarbon_shift_restraint" ):
                listener.enterCarbon_shift_restraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCarbon_shift_restraint" ):
                listener.exitCarbon_shift_restraint(self)




    def carbon_shift_restraint(self):

        localctx = XplorMRParser.Carbon_shift_restraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_carbon_shift_restraint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 365
            self.match(XplorMRParser.Carbon)
            self.state = 369
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << XplorMRParser.Assign) | (1 << XplorMRParser.Classification) | (1 << XplorMRParser.Nrestraints) | (1 << XplorMRParser.Potential) | (1 << XplorMRParser.Print) | (1 << XplorMRParser.Reset) | (1 << XplorMRParser.ForceConstant) | (1 << XplorMRParser.Expectation) | (1 << XplorMRParser.Zero))) != 0) or ((((_la - 67)) & ~0x3f) == 0 and ((1 << (_la - 67)) & ((1 << (XplorMRParser.PhiStep - 67)) | (1 << (XplorMRParser.PsiStep - 67)) | (1 << (XplorMRParser.Rcoil - 67)))) != 0):
                self.state = 366
                self.carbon_shift_statement()
                self.state = 371
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 372
            self.match(XplorMRParser.End)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Proton_shift_restraintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Proton(self):
            return self.getToken(XplorMRParser.Proton, 0)

        def End(self):
            return self.getToken(XplorMRParser.End, 0)

        def proton_shift_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Proton_shift_statementContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Proton_shift_statementContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_proton_shift_restraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProton_shift_restraint" ):
                listener.enterProton_shift_restraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProton_shift_restraint" ):
                listener.exitProton_shift_restraint(self)




    def proton_shift_restraint(self):

        localctx = XplorMRParser.Proton_shift_restraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_proton_shift_restraint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 374
            self.match(XplorMRParser.Proton)
            self.state = 378
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << XplorMRParser.Classification) | (1 << XplorMRParser.Potential) | (1 << XplorMRParser.Print) | (1 << XplorMRParser.Reset) | (1 << XplorMRParser.ForceConstant) | (1 << XplorMRParser.Anisotropy))) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & ((1 << (XplorMRParser.DegEnergy - 65)) | (1 << (XplorMRParser.Carbon - 65)) | (1 << (XplorMRParser.Rcoil - 65)) | (1 << (XplorMRParser.Observed - 65)) | (1 << (XplorMRParser.Amides - 65)) | (1 << (XplorMRParser.Nitrogens - 65)) | (1 << (XplorMRParser.Oxygens - 65)) | (1 << (XplorMRParser.RingAtoms - 65)) | (1 << (XplorMRParser.AlphasAndAmides - 65)) | (1 << (XplorMRParser.Error - 65)))) != 0):
                self.state = 375
                self.proton_shift_statement()
                self.state = 380
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 381
            self.match(XplorMRParser.End)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Dihedral_angle_db_restraintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Ramachandran(self):
            return self.getToken(XplorMRParser.Ramachandran, 0)

        def End(self):
            return self.getToken(XplorMRParser.End, 0)

        def ramachandran_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Ramachandran_statementContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Ramachandran_statementContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_dihedral_angle_db_restraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDihedral_angle_db_restraint" ):
                listener.enterDihedral_angle_db_restraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDihedral_angle_db_restraint" ):
                listener.exitDihedral_angle_db_restraint(self)




    def dihedral_angle_db_restraint(self):

        localctx = XplorMRParser.Dihedral_angle_db_restraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_dihedral_angle_db_restraint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 383
            self.match(XplorMRParser.Ramachandran)
            self.state = 387
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << XplorMRParser.Assign) | (1 << XplorMRParser.Classification) | (1 << XplorMRParser.Nrestraints) | (1 << XplorMRParser.Print) | (1 << XplorMRParser.Reset) | (1 << XplorMRParser.Scale) | (1 << XplorMRParser.Cutoff) | (1 << XplorMRParser.ForceConstant) | (1 << XplorMRParser.Size) | (1 << XplorMRParser.Zero))) != 0) or ((((_la - 79)) & ~0x3f) == 0 and ((1 << (_la - 79)) & ((1 << (XplorMRParser.Gaussian - 79)) | (1 << (XplorMRParser.Phase - 79)) | (1 << (XplorMRParser.Quartic - 79)) | (1 << (XplorMRParser.Shape - 79)) | (1 << (XplorMRParser.Sort - 79)))) != 0):
                self.state = 384
                self.ramachandran_statement()
                self.state = 389
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 390
            self.match(XplorMRParser.End)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Radius_of_gyration_restraintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Collapse(self):
            return self.getToken(XplorMRParser.Collapse, 0)

        def End(self):
            return self.getToken(XplorMRParser.End, 0)

        def collapse_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Collapse_statementContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Collapse_statementContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_radius_of_gyration_restraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRadius_of_gyration_restraint" ):
                listener.enterRadius_of_gyration_restraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRadius_of_gyration_restraint" ):
                listener.exitRadius_of_gyration_restraint(self)




    def radius_of_gyration_restraint(self):

        localctx = XplorMRParser.Radius_of_gyration_restraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_radius_of_gyration_restraint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 392
            self.match(XplorMRParser.Collapse)
            self.state = 396
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << XplorMRParser.Assign) | (1 << XplorMRParser.Print) | (1 << XplorMRParser.Reset) | (1 << XplorMRParser.Scale))) != 0):
                self.state = 393
                self.collapse_statement()
                self.state = 398
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 399
            self.match(XplorMRParser.End)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Diffusion_anisotropy_restraintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Danisotropy(self):
            return self.getToken(XplorMRParser.Danisotropy, 0)

        def End(self):
            return self.getToken(XplorMRParser.End, 0)

        def diffusion_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Diffusion_statementContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Diffusion_statementContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_diffusion_anisotropy_restraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDiffusion_anisotropy_restraint" ):
                listener.enterDiffusion_anisotropy_restraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDiffusion_anisotropy_restraint" ):
                listener.exitDiffusion_anisotropy_restraint(self)




    def diffusion_anisotropy_restraint(self):

        localctx = XplorMRParser.Diffusion_anisotropy_restraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_diffusion_anisotropy_restraint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 401
            self.match(XplorMRParser.Danisotropy)
            self.state = 405
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << XplorMRParser.Assign) | (1 << XplorMRParser.Classification) | (1 << XplorMRParser.Nrestraints) | (1 << XplorMRParser.Potential) | (1 << XplorMRParser.Print) | (1 << XplorMRParser.Reset) | (1 << XplorMRParser.Coefficients) | (1 << XplorMRParser.ForceConstant) | (1 << XplorMRParser.Type))) != 0):
                self.state = 402
                self.diffusion_statement()
                self.state = 407
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 408
            self.match(XplorMRParser.End)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Orientation_db_restraintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Orient(self):
            return self.getToken(XplorMRParser.Orient, 0)

        def End(self):
            return self.getToken(XplorMRParser.End, 0)

        def orientation_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Orientation_statementContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Orientation_statementContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_orientation_db_restraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOrientation_db_restraint" ):
                listener.enterOrientation_db_restraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOrientation_db_restraint" ):
                listener.exitOrientation_db_restraint(self)




    def orientation_db_restraint(self):

        localctx = XplorMRParser.Orientation_db_restraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_orientation_db_restraint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 410
            self.match(XplorMRParser.Orient)
            self.state = 414
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << XplorMRParser.Assign) | (1 << XplorMRParser.Classification) | (1 << XplorMRParser.Nrestraints) | (1 << XplorMRParser.Print) | (1 << XplorMRParser.Reset) | (1 << XplorMRParser.Cutoff) | (1 << XplorMRParser.ForceConstant) | (1 << XplorMRParser.Size) | (1 << XplorMRParser.Zero))) != 0) or ((((_la - 79)) & ~0x3f) == 0 and ((1 << (_la - 79)) & ((1 << (XplorMRParser.Gaussian - 79)) | (1 << (XplorMRParser.Quartic - 79)) | (1 << (XplorMRParser.Height - 79)) | (1 << (XplorMRParser.MaxGaussians - 79)) | (1 << (XplorMRParser.NewGaussian - 79)))) != 0) or _la==XplorMRParser.Residue:
                self.state = 411
                self.orientation_statement()
                self.state = 416
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 417
            self.match(XplorMRParser.End)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Csa_restraintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Dcsa(self):
            return self.getToken(XplorMRParser.Dcsa, 0)

        def End(self):
            return self.getToken(XplorMRParser.End, 0)

        def csa_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Csa_statementContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Csa_statementContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_csa_restraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCsa_restraint" ):
                listener.enterCsa_restraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCsa_restraint" ):
                listener.exitCsa_restraint(self)




    def csa_restraint(self):

        localctx = XplorMRParser.Csa_restraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_csa_restraint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 419
            self.match(XplorMRParser.Dcsa)
            self.state = 423
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << XplorMRParser.Assign) | (1 << XplorMRParser.Classification) | (1 << XplorMRParser.Nrestraints) | (1 << XplorMRParser.Potential) | (1 << XplorMRParser.Print) | (1 << XplorMRParser.Reset) | (1 << XplorMRParser.Scale) | (1 << XplorMRParser.Coefficients) | (1 << XplorMRParser.ForceConstant) | (1 << XplorMRParser.Type))) != 0) or _la==XplorMRParser.Sigma:
                self.state = 420
                self.csa_statement()
                self.state = 425
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 426
            self.match(XplorMRParser.End)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pcsa_restraintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Pcsa(self):
            return self.getToken(XplorMRParser.Pcsa, 0)

        def End(self):
            return self.getToken(XplorMRParser.End, 0)

        def pcsa_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Pcsa_statementContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Pcsa_statementContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_pcsa_restraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPcsa_restraint" ):
                listener.enterPcsa_restraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPcsa_restraint" ):
                listener.exitPcsa_restraint(self)




    def pcsa_restraint(self):

        localctx = XplorMRParser.Pcsa_restraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_pcsa_restraint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 428
            self.match(XplorMRParser.Pcsa)
            self.state = 432
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << XplorMRParser.Assign) | (1 << XplorMRParser.Classification) | (1 << XplorMRParser.Nrestraints) | (1 << XplorMRParser.Potential) | (1 << XplorMRParser.Print) | (1 << XplorMRParser.Reset) | (1 << XplorMRParser.Scale) | (1 << XplorMRParser.Coefficients) | (1 << XplorMRParser.ForceConstant))) != 0) or _la==XplorMRParser.Sigma:
                self.state = 429
                self.pcsa_statement()
                self.state = 434
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 435
            self.match(XplorMRParser.End)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class One_bond_coupling_restraintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OneBond(self):
            return self.getToken(XplorMRParser.OneBond, 0)

        def End(self):
            return self.getToken(XplorMRParser.End, 0)

        def one_bond_coupling_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.One_bond_coupling_statementContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.One_bond_coupling_statementContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_one_bond_coupling_restraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOne_bond_coupling_restraint" ):
                listener.enterOne_bond_coupling_restraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOne_bond_coupling_restraint" ):
                listener.exitOne_bond_coupling_restraint(self)




    def one_bond_coupling_restraint(self):

        localctx = XplorMRParser.One_bond_coupling_restraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_one_bond_coupling_restraint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 437
            self.match(XplorMRParser.OneBond)
            self.state = 441
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << XplorMRParser.Assign) | (1 << XplorMRParser.Classification) | (1 << XplorMRParser.Nrestraints) | (1 << XplorMRParser.Potential) | (1 << XplorMRParser.Print) | (1 << XplorMRParser.Reset) | (1 << XplorMRParser.Coefficients) | (1 << XplorMRParser.ForceConstant))) != 0):
                self.state = 438
                self.one_bond_coupling_statement()
                self.state = 443
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 444
            self.match(XplorMRParser.End)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Angle_db_restraintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AngleDb(self):
            return self.getToken(XplorMRParser.AngleDb, 0)

        def End(self):
            return self.getToken(XplorMRParser.End, 0)

        def angle_db_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Angle_db_statementContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Angle_db_statementContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_angle_db_restraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAngle_db_restraint" ):
                listener.enterAngle_db_restraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAngle_db_restraint" ):
                listener.exitAngle_db_restraint(self)




    def angle_db_restraint(self):

        localctx = XplorMRParser.Angle_db_restraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_angle_db_restraint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 446
            self.match(XplorMRParser.AngleDb)
            self.state = 450
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << XplorMRParser.Assign) | (1 << XplorMRParser.Classification) | (1 << XplorMRParser.Nrestraints) | (1 << XplorMRParser.Potential) | (1 << XplorMRParser.Print) | (1 << XplorMRParser.Reset) | (1 << XplorMRParser.ForceConstant) | (1 << XplorMRParser.Expectation) | (1 << XplorMRParser.Size) | (1 << XplorMRParser.Zero))) != 0) or _la==XplorMRParser.Error or _la==XplorMRParser.DerivFlag:
                self.state = 447
                self.angle_db_statement()
                self.state = 452
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 453
            self.match(XplorMRParser.End)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pre_restraintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Paramagnetic(self):
            return self.getToken(XplorMRParser.Paramagnetic, 0)

        def End(self):
            return self.getToken(XplorMRParser.End, 0)

        def pre_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Pre_statementContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Pre_statementContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_pre_restraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPre_restraint" ):
                listener.enterPre_restraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPre_restraint" ):
                listener.exitPre_restraint(self)




    def pre_restraint(self):

        localctx = XplorMRParser.Pre_restraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_pre_restraint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 455
            self.match(XplorMRParser.Paramagnetic)
            self.state = 459
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << XplorMRParser.Assign) | (1 << XplorMRParser.Classification) | (1 << XplorMRParser.Nrestraints) | (1 << XplorMRParser.Potential) | (1 << XplorMRParser.Print) | (1 << XplorMRParser.Reset) | (1 << XplorMRParser.ForceConstant))) != 0) or ((((_la - 99)) & ~0x3f) == 0 and ((1 << (_la - 99)) & ((1 << (XplorMRParser.Kconst - 99)) | (1 << (XplorMRParser.Omega - 99)) | (1 << (XplorMRParser.Tauc - 99)) | (1 << (XplorMRParser.Debug - 99)))) != 0):
                self.state = 456
                self.pre_statement()
                self.state = 461
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 462
            self.match(XplorMRParser.End)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pcs_restraintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Xpcs(self):
            return self.getToken(XplorMRParser.Xpcs, 0)

        def End(self):
            return self.getToken(XplorMRParser.End, 0)

        def pcs_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Pcs_statementContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Pcs_statementContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_pcs_restraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPcs_restraint" ):
                listener.enterPcs_restraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPcs_restraint" ):
                listener.exitPcs_restraint(self)




    def pcs_restraint(self):

        localctx = XplorMRParser.Pcs_restraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_pcs_restraint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 464
            self.match(XplorMRParser.Xpcs)
            self.state = 468
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << XplorMRParser.Assign) | (1 << XplorMRParser.Classification) | (1 << XplorMRParser.Nrestraints) | (1 << XplorMRParser.Print) | (1 << XplorMRParser.Reset) | (1 << XplorMRParser.Coefficients) | (1 << XplorMRParser.ForceConstant))) != 0) or ((((_la - 104)) & ~0x3f) == 0 and ((1 << (_la - 104)) & ((1 << (XplorMRParser.Tolerance - 104)) | (1 << (XplorMRParser.Save - 104)) | (1 << (XplorMRParser.Fmed - 104)) | (1 << (XplorMRParser.ErrOn - 104)) | (1 << (XplorMRParser.ErrOff - 104)) | (1 << (XplorMRParser.Fon - 104)) | (1 << (XplorMRParser.Foff - 104)) | (1 << (XplorMRParser.Son - 104)) | (1 << (XplorMRParser.Soff - 104)) | (1 << (XplorMRParser.Frun - 104)))) != 0):
                self.state = 465
                self.pcs_statement()
                self.state = 470
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 471
            self.match(XplorMRParser.End)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Prdc_restraintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Xrdcoupling(self):
            return self.getToken(XplorMRParser.Xrdcoupling, 0)

        def End(self):
            return self.getToken(XplorMRParser.End, 0)

        def prdc_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Prdc_statementContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Prdc_statementContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_prdc_restraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrdc_restraint" ):
                listener.enterPrdc_restraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrdc_restraint" ):
                listener.exitPrdc_restraint(self)




    def prdc_restraint(self):

        localctx = XplorMRParser.Prdc_restraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_prdc_restraint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 473
            self.match(XplorMRParser.Xrdcoupling)
            self.state = 477
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << XplorMRParser.Assign) | (1 << XplorMRParser.Classification) | (1 << XplorMRParser.Nrestraints) | (1 << XplorMRParser.Print) | (1 << XplorMRParser.Reset) | (1 << XplorMRParser.Coefficients) | (1 << XplorMRParser.ForceConstant))) != 0) or ((((_la - 104)) & ~0x3f) == 0 and ((1 << (_la - 104)) & ((1 << (XplorMRParser.Tolerance - 104)) | (1 << (XplorMRParser.Save - 104)) | (1 << (XplorMRParser.Fmed - 104)) | (1 << (XplorMRParser.ErrOn - 104)) | (1 << (XplorMRParser.ErrOff - 104)) | (1 << (XplorMRParser.Fon - 104)) | (1 << (XplorMRParser.Foff - 104)) | (1 << (XplorMRParser.Son - 104)) | (1 << (XplorMRParser.Soff - 104)) | (1 << (XplorMRParser.Frun - 104)))) != 0):
                self.state = 474
                self.prdc_statement()
                self.state = 479
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 480
            self.match(XplorMRParser.End)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Porientation_restraintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Xangle(self):
            return self.getToken(XplorMRParser.Xangle, 0)

        def End(self):
            return self.getToken(XplorMRParser.End, 0)

        def porientation_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Porientation_statementContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Porientation_statementContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_porientation_restraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPorientation_restraint" ):
                listener.enterPorientation_restraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPorientation_restraint" ):
                listener.exitPorientation_restraint(self)




    def porientation_restraint(self):

        localctx = XplorMRParser.Porientation_restraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_porientation_restraint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 482
            self.match(XplorMRParser.Xangle)
            self.state = 486
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << XplorMRParser.Assign) | (1 << XplorMRParser.Classification) | (1 << XplorMRParser.Nrestraints) | (1 << XplorMRParser.Print) | (1 << XplorMRParser.Reset) | (1 << XplorMRParser.ForceConstant))) != 0):
                self.state = 483
                self.porientation_statement()
                self.state = 488
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 489
            self.match(XplorMRParser.End)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pccr_restraintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Xccr(self):
            return self.getToken(XplorMRParser.Xccr, 0)

        def End(self):
            return self.getToken(XplorMRParser.End, 0)

        def pccr_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Pccr_statementContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Pccr_statementContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_pccr_restraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPccr_restraint" ):
                listener.enterPccr_restraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPccr_restraint" ):
                listener.exitPccr_restraint(self)




    def pccr_restraint(self):

        localctx = XplorMRParser.Pccr_restraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_pccr_restraint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 491
            self.match(XplorMRParser.Xccr)
            self.state = 495
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << XplorMRParser.Assign) | (1 << XplorMRParser.Classification) | (1 << XplorMRParser.Nrestraints) | (1 << XplorMRParser.Print) | (1 << XplorMRParser.Reset) | (1 << XplorMRParser.Coefficients) | (1 << XplorMRParser.ForceConstant))) != 0) or _la==XplorMRParser.Frun or _la==XplorMRParser.Weip:
                self.state = 492
                self.pccr_statement()
                self.state = 497
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 498
            self.match(XplorMRParser.End)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Hbond_restraintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Hbda(self):
            return self.getToken(XplorMRParser.Hbda, 0)

        def End(self):
            return self.getToken(XplorMRParser.End, 0)

        def hbond_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Hbond_statementContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Hbond_statementContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_hbond_restraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHbond_restraint" ):
                listener.enterHbond_restraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHbond_restraint" ):
                listener.exitHbond_restraint(self)




    def hbond_restraint(self):

        localctx = XplorMRParser.Hbond_restraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_hbond_restraint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 500
            self.match(XplorMRParser.Hbda)
            self.state = 504
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << XplorMRParser.Assign) | (1 << XplorMRParser.Classification) | (1 << XplorMRParser.Nrestraints) | (1 << XplorMRParser.Print) | (1 << XplorMRParser.Reset) | (1 << XplorMRParser.ForceConstant))) != 0):
                self.state = 501
                self.hbond_statement()
                self.state = 506
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 507
            self.match(XplorMRParser.End)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Hbond_db_restraintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Hbdb(self):
            return self.getToken(XplorMRParser.Hbdb, 0)

        def End(self):
            return self.getToken(XplorMRParser.End, 0)

        def hbond_db_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Hbond_db_statementContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Hbond_db_statementContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_hbond_db_restraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHbond_db_restraint" ):
                listener.enterHbond_db_restraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHbond_db_restraint" ):
                listener.exitHbond_db_restraint(self)




    def hbond_db_restraint(self):

        localctx = XplorMRParser.Hbond_db_restraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_hbond_db_restraint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 509
            self.match(XplorMRParser.Hbdb)
            self.state = 513
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==XplorMRParser.Assign or ((((_la - 120)) & ~0x3f) == 0 and ((1 << (_la - 120)) & ((1 << (XplorMRParser.Kdir - 120)) | (1 << (XplorMRParser.Klin - 120)) | (1 << (XplorMRParser.Nseg - 120)) | (1 << (XplorMRParser.Nmin - 120)) | (1 << (XplorMRParser.Nmax - 120)) | (1 << (XplorMRParser.Segm - 120)) | (1 << (XplorMRParser.Ohcut - 120)) | (1 << (XplorMRParser.Coh1cut - 120)) | (1 << (XplorMRParser.Coh2cut - 120)) | (1 << (XplorMRParser.Ohncut - 120)) | (1 << (XplorMRParser.Updfrq - 120)) | (1 << (XplorMRParser.Prnfrq - 120)) | (1 << (XplorMRParser.Freemode - 120)))) != 0):
                self.state = 510
                self.hbond_db_statement()
                self.state = 515
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 516
            self.match(XplorMRParser.End)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Noe_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def noe_assign(self):
            return self.getTypedRuleContext(XplorMRParser.Noe_assignContext,0)


        def Asymptote(self):
            return self.getToken(XplorMRParser.Asymptote, 0)

        def Simple_name(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Simple_name)
            else:
                return self.getToken(XplorMRParser.Simple_name, i)

        def number_s(self):
            return self.getTypedRuleContext(XplorMRParser.Number_sContext,0)


        def Averaging(self):
            return self.getToken(XplorMRParser.Averaging, 0)

        def Simple_name_A(self):
            return self.getToken(XplorMRParser.Simple_name_A, 0)

        def Averaging_methods(self):
            return self.getToken(XplorMRParser.Averaging_methods, 0)

        def Bhig(self):
            return self.getToken(XplorMRParser.Bhig, 0)

        def Ceiling(self):
            return self.getToken(XplorMRParser.Ceiling, 0)

        def Equ_op(self):
            return self.getToken(XplorMRParser.Equ_op, 0)

        def Classification(self):
            return self.getToken(XplorMRParser.Classification, 0)

        def CountViol(self):
            return self.getToken(XplorMRParser.CountViol, 0)

        def Distribute(self):
            return self.getToken(XplorMRParser.Distribute, 0)

        def Monomers(self):
            return self.getToken(XplorMRParser.Monomers, 0)

        def Integer(self):
            return self.getToken(XplorMRParser.Integer, 0)

        def Ncount(self):
            return self.getToken(XplorMRParser.Ncount, 0)

        def Nrestraints(self):
            return self.getToken(XplorMRParser.Nrestraints, 0)

        def Potential(self):
            return self.getToken(XplorMRParser.Potential, 0)

        def Simple_name_P(self):
            return self.getToken(XplorMRParser.Simple_name_P, 0)

        def Potential_types(self):
            return self.getToken(XplorMRParser.Potential_types, 0)

        def Predict(self):
            return self.getToken(XplorMRParser.Predict, 0)

        def predict_statement(self):
            return self.getTypedRuleContext(XplorMRParser.Predict_statementContext,0)


        def End(self):
            return self.getToken(XplorMRParser.End, 0)

        def Print(self):
            return self.getToken(XplorMRParser.Print, 0)

        def Threshold(self):
            return self.getToken(XplorMRParser.Threshold, 0)

        def Reset(self):
            return self.getToken(XplorMRParser.Reset, 0)

        def Rswitch(self):
            return self.getToken(XplorMRParser.Rswitch, 0)

        def Scale(self):
            return self.getToken(XplorMRParser.Scale, 0)

        def SoExponent(self):
            return self.getToken(XplorMRParser.SoExponent, 0)

        def SqConstant(self):
            return self.getToken(XplorMRParser.SqConstant, 0)

        def SqExponent(self):
            return self.getToken(XplorMRParser.SqExponent, 0)

        def SqOffset(self):
            return self.getToken(XplorMRParser.SqOffset, 0)

        def Temperature(self):
            return self.getToken(XplorMRParser.Temperature, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_noe_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNoe_statement" ):
                listener.enterNoe_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNoe_statement" ):
                listener.exitNoe_statement(self)




    def noe_statement(self):

        localctx = XplorMRParser.Noe_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_noe_statement)
        self._la = 0 # Token type
        try:
            self.state = 589
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [XplorMRParser.Assign]:
                self.enterOuterAlt(localctx, 1)
                self.state = 518
                self.noe_assign()
                pass
            elif token in [XplorMRParser.Asymptote]:
                self.enterOuterAlt(localctx, 2)
                self.state = 519
                self.match(XplorMRParser.Asymptote)
                self.state = 520
                self.match(XplorMRParser.Simple_name)
                self.state = 521
                self.number_s()
                pass
            elif token in [XplorMRParser.Averaging]:
                self.enterOuterAlt(localctx, 3)
                self.state = 522
                self.match(XplorMRParser.Averaging)
                self.state = 523
                self.match(XplorMRParser.Simple_name_A)
                self.state = 524
                self.match(XplorMRParser.Averaging_methods)
                pass
            elif token in [XplorMRParser.Bhig]:
                self.enterOuterAlt(localctx, 4)
                self.state = 525
                self.match(XplorMRParser.Bhig)
                self.state = 526
                self.match(XplorMRParser.Simple_name)
                self.state = 527
                self.number_s()
                pass
            elif token in [XplorMRParser.Ceiling]:
                self.enterOuterAlt(localctx, 5)
                self.state = 528
                self.match(XplorMRParser.Ceiling)
                self.state = 530
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 529
                    self.match(XplorMRParser.Equ_op)


                self.state = 532
                self.number_s()
                pass
            elif token in [XplorMRParser.Classification]:
                self.enterOuterAlt(localctx, 6)
                self.state = 533
                self.match(XplorMRParser.Classification)
                self.state = 534
                self.match(XplorMRParser.Simple_name)
                pass
            elif token in [XplorMRParser.CountViol]:
                self.enterOuterAlt(localctx, 7)
                self.state = 535
                self.match(XplorMRParser.CountViol)
                self.state = 536
                self.match(XplorMRParser.Simple_name)
                pass
            elif token in [XplorMRParser.Distribute]:
                self.enterOuterAlt(localctx, 8)
                self.state = 537
                self.match(XplorMRParser.Distribute)
                self.state = 538
                self.match(XplorMRParser.Simple_name)
                self.state = 539
                self.match(XplorMRParser.Simple_name)
                self.state = 540
                self.number_s()
                pass
            elif token in [XplorMRParser.Monomers]:
                self.enterOuterAlt(localctx, 9)
                self.state = 541
                self.match(XplorMRParser.Monomers)
                self.state = 542
                self.match(XplorMRParser.Simple_name)
                self.state = 543
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.Ncount]:
                self.enterOuterAlt(localctx, 10)
                self.state = 544
                self.match(XplorMRParser.Ncount)
                self.state = 545
                self.match(XplorMRParser.Simple_name)
                self.state = 546
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.Nrestraints]:
                self.enterOuterAlt(localctx, 11)
                self.state = 547
                self.match(XplorMRParser.Nrestraints)
                self.state = 549
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 548
                    self.match(XplorMRParser.Equ_op)


                self.state = 551
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.Potential]:
                self.enterOuterAlt(localctx, 12)
                self.state = 552
                self.match(XplorMRParser.Potential)
                self.state = 553
                self.match(XplorMRParser.Simple_name_P)
                self.state = 554
                self.match(XplorMRParser.Potential_types)
                pass
            elif token in [XplorMRParser.Predict]:
                self.enterOuterAlt(localctx, 13)
                self.state = 555
                self.match(XplorMRParser.Predict)
                self.state = 556
                self.predict_statement()
                self.state = 557
                self.match(XplorMRParser.End)
                pass
            elif token in [XplorMRParser.Print]:
                self.enterOuterAlt(localctx, 14)
                self.state = 559
                self.match(XplorMRParser.Print)
                self.state = 560
                self.match(XplorMRParser.Threshold)
                self.state = 562
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 561
                    self.match(XplorMRParser.Equ_op)


                self.state = 564
                self.number_s()
                pass
            elif token in [XplorMRParser.Reset]:
                self.enterOuterAlt(localctx, 15)
                self.state = 565
                self.match(XplorMRParser.Reset)
                pass
            elif token in [XplorMRParser.Rswitch]:
                self.enterOuterAlt(localctx, 16)
                self.state = 566
                self.match(XplorMRParser.Rswitch)
                self.state = 567
                self.match(XplorMRParser.Simple_name)
                self.state = 568
                self.number_s()
                pass
            elif token in [XplorMRParser.Scale]:
                self.enterOuterAlt(localctx, 17)
                self.state = 569
                self.match(XplorMRParser.Scale)
                self.state = 570
                self.match(XplorMRParser.Simple_name)
                self.state = 571
                self.number_s()
                pass
            elif token in [XplorMRParser.SoExponent]:
                self.enterOuterAlt(localctx, 18)
                self.state = 572
                self.match(XplorMRParser.SoExponent)
                self.state = 573
                self.match(XplorMRParser.Simple_name)
                self.state = 574
                self.number_s()
                pass
            elif token in [XplorMRParser.SqConstant]:
                self.enterOuterAlt(localctx, 19)
                self.state = 575
                self.match(XplorMRParser.SqConstant)
                self.state = 576
                self.match(XplorMRParser.Simple_name)
                self.state = 577
                self.number_s()
                pass
            elif token in [XplorMRParser.SqExponent]:
                self.enterOuterAlt(localctx, 20)
                self.state = 578
                self.match(XplorMRParser.SqExponent)
                self.state = 579
                self.match(XplorMRParser.Simple_name)
                self.state = 580
                self.number_s()
                pass
            elif token in [XplorMRParser.SqOffset]:
                self.enterOuterAlt(localctx, 21)
                self.state = 581
                self.match(XplorMRParser.SqOffset)
                self.state = 582
                self.match(XplorMRParser.Simple_name)
                self.state = 583
                self.number_s()
                pass
            elif token in [XplorMRParser.Temperature]:
                self.enterOuterAlt(localctx, 22)
                self.state = 584
                self.match(XplorMRParser.Temperature)
                self.state = 586
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 585
                    self.match(XplorMRParser.Equ_op)


                self.state = 588
                self.number_s()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Noe_assignContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Assign(self):
            return self.getToken(XplorMRParser.Assign, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.SelectionContext,i)


        def number(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.NumberContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.NumberContext,i)


        def noe_annotation(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Noe_annotationContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Noe_annotationContext,i)


        def Or_op(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Or_op)
            else:
                return self.getToken(XplorMRParser.Or_op, i)

        def getRuleIndex(self):
            return XplorMRParser.RULE_noe_assign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNoe_assign" ):
                listener.enterNoe_assign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNoe_assign" ):
                listener.exitNoe_assign(self)




    def noe_assign(self):

        localctx = XplorMRParser.Noe_assignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_noe_assign)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 591
            self.match(XplorMRParser.Assign)
            self.state = 592
            self.selection()
            self.state = 593
            self.selection()
            self.state = 594
            self.number()
            self.state = 595
            self.number()
            self.state = 596
            self.number()
            self.state = 600
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << XplorMRParser.Peak) | (1 << XplorMRParser.Spectrum) | (1 << XplorMRParser.Volume) | (1 << XplorMRParser.Ppm1) | (1 << XplorMRParser.Ppm2) | (1 << XplorMRParser.Cv) | (1 << XplorMRParser.Weight))) != 0):
                self.state = 597
                self.noe_annotation()
                self.state = 602
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 609
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==XplorMRParser.Or_op:
                self.state = 603
                self.match(XplorMRParser.Or_op)
                self.state = 604
                self.selection()
                self.state = 605
                self.selection()
                self.state = 611
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Predict_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Cutoff(self):
            return self.getToken(XplorMRParser.Cutoff, 0)

        def number_s(self):
            return self.getTypedRuleContext(XplorMRParser.Number_sContext,0)


        def Equ_op(self):
            return self.getToken(XplorMRParser.Equ_op, 0)

        def Cuton(self):
            return self.getToken(XplorMRParser.Cuton, 0)

        def From(self):
            return self.getToken(XplorMRParser.From, 0)

        def selection(self):
            return self.getTypedRuleContext(XplorMRParser.SelectionContext,0)


        def To(self):
            return self.getToken(XplorMRParser.To, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_predict_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPredict_statement" ):
                listener.enterPredict_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPredict_statement" ):
                listener.exitPredict_statement(self)




    def predict_statement(self):

        localctx = XplorMRParser.Predict_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_predict_statement)
        self._la = 0 # Token type
        try:
            self.state = 626
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [XplorMRParser.Cutoff]:
                self.enterOuterAlt(localctx, 1)
                self.state = 612
                self.match(XplorMRParser.Cutoff)
                self.state = 614
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 613
                    self.match(XplorMRParser.Equ_op)


                self.state = 616
                self.number_s()
                pass
            elif token in [XplorMRParser.Cuton]:
                self.enterOuterAlt(localctx, 2)
                self.state = 617
                self.match(XplorMRParser.Cuton)
                self.state = 619
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 618
                    self.match(XplorMRParser.Equ_op)


                self.state = 621
                self.number_s()
                pass
            elif token in [XplorMRParser.From]:
                self.enterOuterAlt(localctx, 3)
                self.state = 622
                self.match(XplorMRParser.From)
                self.state = 623
                self.selection()
                pass
            elif token in [XplorMRParser.To]:
                self.enterOuterAlt(localctx, 4)
                self.state = 624
                self.match(XplorMRParser.To)
                self.state = 625
                self.selection()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Noe_annotationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Peak(self):
            return self.getToken(XplorMRParser.Peak, 0)

        def number_a(self):
            return self.getTypedRuleContext(XplorMRParser.Number_aContext,0)


        def Equ_op(self):
            return self.getToken(XplorMRParser.Equ_op, 0)

        def Spectrum(self):
            return self.getToken(XplorMRParser.Spectrum, 0)

        def Weight(self):
            return self.getToken(XplorMRParser.Weight, 0)

        def Volume(self):
            return self.getToken(XplorMRParser.Volume, 0)

        def Ppm1(self):
            return self.getToken(XplorMRParser.Ppm1, 0)

        def Ppm2(self):
            return self.getToken(XplorMRParser.Ppm2, 0)

        def Cv(self):
            return self.getToken(XplorMRParser.Cv, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_noe_annotation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNoe_annotation" ):
                listener.enterNoe_annotation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNoe_annotation" ):
                listener.exitNoe_annotation(self)




    def noe_annotation(self):

        localctx = XplorMRParser.Noe_annotationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_noe_annotation)
        self._la = 0 # Token type
        try:
            self.state = 663
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [XplorMRParser.Peak]:
                self.enterOuterAlt(localctx, 1)
                self.state = 628
                self.match(XplorMRParser.Peak)
                self.state = 630
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 629
                    self.match(XplorMRParser.Equ_op)


                self.state = 632
                self.number_a()
                pass
            elif token in [XplorMRParser.Spectrum]:
                self.enterOuterAlt(localctx, 2)
                self.state = 633
                self.match(XplorMRParser.Spectrum)
                self.state = 635
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 634
                    self.match(XplorMRParser.Equ_op)


                self.state = 637
                self.number_a()
                pass
            elif token in [XplorMRParser.Weight]:
                self.enterOuterAlt(localctx, 3)
                self.state = 638
                self.match(XplorMRParser.Weight)
                self.state = 640
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 639
                    self.match(XplorMRParser.Equ_op)


                self.state = 642
                self.number_a()
                pass
            elif token in [XplorMRParser.Volume]:
                self.enterOuterAlt(localctx, 4)
                self.state = 643
                self.match(XplorMRParser.Volume)
                self.state = 645
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 644
                    self.match(XplorMRParser.Equ_op)


                self.state = 647
                self.number_a()
                pass
            elif token in [XplorMRParser.Ppm1]:
                self.enterOuterAlt(localctx, 5)
                self.state = 648
                self.match(XplorMRParser.Ppm1)
                self.state = 650
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 649
                    self.match(XplorMRParser.Equ_op)


                self.state = 652
                self.number_a()
                pass
            elif token in [XplorMRParser.Ppm2]:
                self.enterOuterAlt(localctx, 6)
                self.state = 653
                self.match(XplorMRParser.Ppm2)
                self.state = 655
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 654
                    self.match(XplorMRParser.Equ_op)


                self.state = 657
                self.number_a()
                pass
            elif token in [XplorMRParser.Cv]:
                self.enterOuterAlt(localctx, 7)
                self.state = 658
                self.match(XplorMRParser.Cv)
                self.state = 660
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 659
                    self.match(XplorMRParser.Equ_op)


                self.state = 662
                self.number_a()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Dihedral_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def dihedral_assign(self):
            return self.getTypedRuleContext(XplorMRParser.Dihedral_assignContext,0)


        def Nassign(self):
            return self.getToken(XplorMRParser.Nassign, 0)

        def Integer(self):
            return self.getToken(XplorMRParser.Integer, 0)

        def Equ_op(self):
            return self.getToken(XplorMRParser.Equ_op, 0)

        def Reset(self):
            return self.getToken(XplorMRParser.Reset, 0)

        def Scale(self):
            return self.getToken(XplorMRParser.Scale, 0)

        def number_s(self):
            return self.getTypedRuleContext(XplorMRParser.Number_sContext,0)


        def getRuleIndex(self):
            return XplorMRParser.RULE_dihedral_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDihedral_statement" ):
                listener.enterDihedral_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDihedral_statement" ):
                listener.exitDihedral_statement(self)




    def dihedral_statement(self):

        localctx = XplorMRParser.Dihedral_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_dihedral_statement)
        self._la = 0 # Token type
        try:
            self.state = 674
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [XplorMRParser.Assign]:
                self.enterOuterAlt(localctx, 1)
                self.state = 665
                self.dihedral_assign()
                pass
            elif token in [XplorMRParser.Nassign]:
                self.enterOuterAlt(localctx, 2)
                self.state = 666
                self.match(XplorMRParser.Nassign)
                self.state = 668
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 667
                    self.match(XplorMRParser.Equ_op)


                self.state = 670
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.Reset]:
                self.enterOuterAlt(localctx, 3)
                self.state = 671
                self.match(XplorMRParser.Reset)
                pass
            elif token in [XplorMRParser.Scale]:
                self.enterOuterAlt(localctx, 4)
                self.state = 672
                self.match(XplorMRParser.Scale)
                self.state = 673
                self.number_s()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Dihedral_assignContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Assign(self):
            return self.getToken(XplorMRParser.Assign, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.SelectionContext,i)


        def number(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.NumberContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.NumberContext,i)


        def Integer(self):
            return self.getToken(XplorMRParser.Integer, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_dihedral_assign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDihedral_assign" ):
                listener.enterDihedral_assign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDihedral_assign" ):
                listener.exitDihedral_assign(self)




    def dihedral_assign(self):

        localctx = XplorMRParser.Dihedral_assignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_dihedral_assign)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 676
            self.match(XplorMRParser.Assign)
            self.state = 677
            self.selection()
            self.state = 678
            self.selection()
            self.state = 679
            self.selection()
            self.state = 680
            self.selection()
            self.state = 681
            self.number()
            self.state = 682
            self.number()
            self.state = 683
            self.number()
            self.state = 684
            self.match(XplorMRParser.Integer)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Sani_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def sani_assign(self):
            return self.getTypedRuleContext(XplorMRParser.Sani_assignContext,0)


        def Classification(self):
            return self.getToken(XplorMRParser.Classification, 0)

        def Simple_name(self):
            return self.getToken(XplorMRParser.Simple_name, 0)

        def Coefficients(self):
            return self.getToken(XplorMRParser.Coefficients, 0)

        def number_s(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Number_sContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Number_sContext,i)


        def ForceConstant(self):
            return self.getToken(XplorMRParser.ForceConstant, 0)

        def Nrestraints(self):
            return self.getToken(XplorMRParser.Nrestraints, 0)

        def Integer(self):
            return self.getToken(XplorMRParser.Integer, 0)

        def Potential(self):
            return self.getToken(XplorMRParser.Potential, 0)

        def Potential_types(self):
            return self.getToken(XplorMRParser.Potential_types, 0)

        def Print(self):
            return self.getToken(XplorMRParser.Print, 0)

        def Threshold(self):
            return self.getToken(XplorMRParser.Threshold, 0)

        def Reset(self):
            return self.getToken(XplorMRParser.Reset, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_sani_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSani_statement" ):
                listener.enterSani_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSani_statement" ):
                listener.exitSani_statement(self)




    def sani_statement(self):

        localctx = XplorMRParser.Sani_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_sani_statement)
        try:
            self.state = 704
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [XplorMRParser.Assign]:
                self.enterOuterAlt(localctx, 1)
                self.state = 686
                self.sani_assign()
                pass
            elif token in [XplorMRParser.Classification]:
                self.enterOuterAlt(localctx, 2)
                self.state = 687
                self.match(XplorMRParser.Classification)
                self.state = 688
                self.match(XplorMRParser.Simple_name)
                pass
            elif token in [XplorMRParser.Coefficients]:
                self.enterOuterAlt(localctx, 3)
                self.state = 689
                self.match(XplorMRParser.Coefficients)
                self.state = 690
                self.number_s()
                self.state = 691
                self.number_s()
                self.state = 692
                self.number_s()
                pass
            elif token in [XplorMRParser.ForceConstant]:
                self.enterOuterAlt(localctx, 4)
                self.state = 694
                self.match(XplorMRParser.ForceConstant)
                self.state = 695
                self.number_s()
                pass
            elif token in [XplorMRParser.Nrestraints]:
                self.enterOuterAlt(localctx, 5)
                self.state = 696
                self.match(XplorMRParser.Nrestraints)
                self.state = 697
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.Potential]:
                self.enterOuterAlt(localctx, 6)
                self.state = 698
                self.match(XplorMRParser.Potential)
                self.state = 699
                self.match(XplorMRParser.Potential_types)
                pass
            elif token in [XplorMRParser.Print]:
                self.enterOuterAlt(localctx, 7)
                self.state = 700
                self.match(XplorMRParser.Print)
                self.state = 701
                self.match(XplorMRParser.Threshold)
                self.state = 702
                self.number_s()
                pass
            elif token in [XplorMRParser.Reset]:
                self.enterOuterAlt(localctx, 8)
                self.state = 703
                self.match(XplorMRParser.Reset)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Sani_assignContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Assign(self):
            return self.getToken(XplorMRParser.Assign, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.SelectionContext,i)


        def number(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.NumberContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.NumberContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_sani_assign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSani_assign" ):
                listener.enterSani_assign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSani_assign" ):
                listener.exitSani_assign(self)




    def sani_assign(self):

        localctx = XplorMRParser.Sani_assignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_sani_assign)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 706
            self.match(XplorMRParser.Assign)
            self.state = 707
            self.selection()
            self.state = 708
            self.selection()
            self.state = 709
            self.selection()
            self.state = 710
            self.selection()
            self.state = 711
            self.selection()
            self.state = 712
            self.selection()
            self.state = 713
            self.number()
            self.state = 714
            self.number()
            self.state = 716
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==XplorMRParser.Integer or _la==XplorMRParser.Real:
                self.state = 715
                self.number()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Xdip_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def xdip_assign(self):
            return self.getTypedRuleContext(XplorMRParser.Xdip_assignContext,0)


        def Classification(self):
            return self.getToken(XplorMRParser.Classification, 0)

        def Simple_name(self):
            return self.getToken(XplorMRParser.Simple_name, 0)

        def Type(self):
            return self.getToken(XplorMRParser.Type, 0)

        def Rdc_dist_fix_types(self):
            return self.getToken(XplorMRParser.Rdc_dist_fix_types, 0)

        def Scale(self):
            return self.getToken(XplorMRParser.Scale, 0)

        def number_s(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Number_sContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Number_sContext,i)


        def Sign(self):
            return self.getToken(XplorMRParser.Sign, 0)

        def Logical(self):
            return self.getToken(XplorMRParser.Logical, 0)

        def Average(self):
            return self.getToken(XplorMRParser.Average, 0)

        def Averaging_methods(self):
            return self.getToken(XplorMRParser.Averaging_methods, 0)

        def Coefficients(self):
            return self.getToken(XplorMRParser.Coefficients, 0)

        def ForceConstant(self):
            return self.getToken(XplorMRParser.ForceConstant, 0)

        def Nrestraints(self):
            return self.getToken(XplorMRParser.Nrestraints, 0)

        def Integer(self):
            return self.getToken(XplorMRParser.Integer, 0)

        def Potential(self):
            return self.getToken(XplorMRParser.Potential, 0)

        def Potential_types(self):
            return self.getToken(XplorMRParser.Potential_types, 0)

        def Print(self):
            return self.getToken(XplorMRParser.Print, 0)

        def Threshold(self):
            return self.getToken(XplorMRParser.Threshold, 0)

        def Reset(self):
            return self.getToken(XplorMRParser.Reset, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_xdip_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterXdip_statement" ):
                listener.enterXdip_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitXdip_statement" ):
                listener.exitXdip_statement(self)




    def xdip_statement(self):

        localctx = XplorMRParser.Xdip_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_xdip_statement)
        try:
            self.state = 744
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [XplorMRParser.Assign]:
                self.enterOuterAlt(localctx, 1)
                self.state = 718
                self.xdip_assign()
                pass
            elif token in [XplorMRParser.Classification]:
                self.enterOuterAlt(localctx, 2)
                self.state = 719
                self.match(XplorMRParser.Classification)
                self.state = 720
                self.match(XplorMRParser.Simple_name)
                pass
            elif token in [XplorMRParser.Type]:
                self.enterOuterAlt(localctx, 3)
                self.state = 721
                self.match(XplorMRParser.Type)
                self.state = 722
                self.match(XplorMRParser.Rdc_dist_fix_types)
                pass
            elif token in [XplorMRParser.Scale]:
                self.enterOuterAlt(localctx, 4)
                self.state = 723
                self.match(XplorMRParser.Scale)
                self.state = 724
                self.number_s()
                pass
            elif token in [XplorMRParser.Sign]:
                self.enterOuterAlt(localctx, 5)
                self.state = 725
                self.match(XplorMRParser.Sign)
                self.state = 726
                self.match(XplorMRParser.Logical)
                pass
            elif token in [XplorMRParser.Average]:
                self.enterOuterAlt(localctx, 6)
                self.state = 727
                self.match(XplorMRParser.Average)
                self.state = 728
                self.match(XplorMRParser.Averaging_methods)
                pass
            elif token in [XplorMRParser.Coefficients]:
                self.enterOuterAlt(localctx, 7)
                self.state = 729
                self.match(XplorMRParser.Coefficients)
                self.state = 730
                self.number_s()
                self.state = 731
                self.number_s()
                self.state = 732
                self.number_s()
                pass
            elif token in [XplorMRParser.ForceConstant]:
                self.enterOuterAlt(localctx, 8)
                self.state = 734
                self.match(XplorMRParser.ForceConstant)
                self.state = 735
                self.number_s()
                pass
            elif token in [XplorMRParser.Nrestraints]:
                self.enterOuterAlt(localctx, 9)
                self.state = 736
                self.match(XplorMRParser.Nrestraints)
                self.state = 737
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.Potential]:
                self.enterOuterAlt(localctx, 10)
                self.state = 738
                self.match(XplorMRParser.Potential)
                self.state = 739
                self.match(XplorMRParser.Potential_types)
                pass
            elif token in [XplorMRParser.Print]:
                self.enterOuterAlt(localctx, 11)
                self.state = 740
                self.match(XplorMRParser.Print)
                self.state = 741
                self.match(XplorMRParser.Threshold)
                self.state = 742
                self.number_s()
                pass
            elif token in [XplorMRParser.Reset]:
                self.enterOuterAlt(localctx, 12)
                self.state = 743
                self.match(XplorMRParser.Reset)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Xdip_assignContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Assign(self):
            return self.getToken(XplorMRParser.Assign, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.SelectionContext,i)


        def number(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.NumberContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.NumberContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_xdip_assign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterXdip_assign" ):
                listener.enterXdip_assign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitXdip_assign" ):
                listener.exitXdip_assign(self)




    def xdip_assign(self):

        localctx = XplorMRParser.Xdip_assignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 68, self.RULE_xdip_assign)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 746
            self.match(XplorMRParser.Assign)
            self.state = 747
            self.selection()
            self.state = 748
            self.selection()
            self.state = 749
            self.selection()
            self.state = 750
            self.selection()
            self.state = 751
            self.selection()
            self.state = 752
            self.selection()
            self.state = 753
            self.number()
            self.state = 754
            self.number()
            self.state = 761
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,57,self._ctx)
            if la_ == 1:
                self.state = 755
                self.number()

            elif la_ == 2:
                self.state = 756
                self.number()
                self.state = 757
                self.number()
                self.state = 758
                self.number()
                self.state = 759
                self.number()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Vean_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def vean_assign(self):
            return self.getTypedRuleContext(XplorMRParser.Vean_assignContext,0)


        def Cv(self):
            return self.getToken(XplorMRParser.Cv, 0)

        def Integer(self):
            return self.getToken(XplorMRParser.Integer, 0)

        def Equ_op(self):
            return self.getToken(XplorMRParser.Equ_op, 0)

        def Classification(self):
            return self.getToken(XplorMRParser.Classification, 0)

        def Simple_name(self):
            return self.getToken(XplorMRParser.Simple_name, 0)

        def ForceConstant(self):
            return self.getToken(XplorMRParser.ForceConstant, 0)

        def number_s(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Number_sContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Number_sContext,i)


        def Nrestraints(self):
            return self.getToken(XplorMRParser.Nrestraints, 0)

        def Partition(self):
            return self.getToken(XplorMRParser.Partition, 0)

        def Print(self):
            return self.getToken(XplorMRParser.Print, 0)

        def Threshold(self):
            return self.getToken(XplorMRParser.Threshold, 0)

        def Reset(self):
            return self.getToken(XplorMRParser.Reset, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_vean_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVean_statement" ):
                listener.enterVean_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVean_statement" ):
                listener.exitVean_statement(self)




    def vean_statement(self):

        localctx = XplorMRParser.Vean_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_vean_statement)
        self._la = 0 # Token type
        try:
            self.state = 786
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [XplorMRParser.Assign]:
                self.enterOuterAlt(localctx, 1)
                self.state = 763
                self.vean_assign()
                pass
            elif token in [XplorMRParser.Cv]:
                self.enterOuterAlt(localctx, 2)
                self.state = 764
                self.match(XplorMRParser.Cv)
                self.state = 766
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 765
                    self.match(XplorMRParser.Equ_op)


                self.state = 768
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.Classification]:
                self.enterOuterAlt(localctx, 3)
                self.state = 769
                self.match(XplorMRParser.Classification)
                self.state = 770
                self.match(XplorMRParser.Simple_name)
                pass
            elif token in [XplorMRParser.ForceConstant]:
                self.enterOuterAlt(localctx, 4)
                self.state = 771
                self.match(XplorMRParser.ForceConstant)
                self.state = 772
                self.number_s()
                self.state = 773
                self.number_s()
                pass
            elif token in [XplorMRParser.Nrestraints]:
                self.enterOuterAlt(localctx, 5)
                self.state = 775
                self.match(XplorMRParser.Nrestraints)
                self.state = 776
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.Partition]:
                self.enterOuterAlt(localctx, 6)
                self.state = 777
                self.match(XplorMRParser.Partition)
                self.state = 779
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 778
                    self.match(XplorMRParser.Equ_op)


                self.state = 781
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.Print]:
                self.enterOuterAlt(localctx, 7)
                self.state = 782
                self.match(XplorMRParser.Print)
                self.state = 783
                self.match(XplorMRParser.Threshold)
                self.state = 784
                self.number_s()
                pass
            elif token in [XplorMRParser.Reset]:
                self.enterOuterAlt(localctx, 8)
                self.state = 785
                self.match(XplorMRParser.Reset)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Vean_assignContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Assign(self):
            return self.getToken(XplorMRParser.Assign, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.SelectionContext,i)


        def number(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.NumberContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.NumberContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_vean_assign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVean_assign" ):
                listener.enterVean_assign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVean_assign" ):
                listener.exitVean_assign(self)




    def vean_assign(self):

        localctx = XplorMRParser.Vean_assignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_vean_assign)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 788
            self.match(XplorMRParser.Assign)
            self.state = 789
            self.selection()
            self.state = 790
            self.selection()
            self.state = 791
            self.selection()
            self.state = 792
            self.selection()
            self.state = 793
            self.number()
            self.state = 794
            self.number()
            self.state = 795
            self.number()
            self.state = 796
            self.number()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Tenso_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def tenso_assign(self):
            return self.getTypedRuleContext(XplorMRParser.Tenso_assignContext,0)


        def Classification(self):
            return self.getToken(XplorMRParser.Classification, 0)

        def Simple_name(self):
            return self.getToken(XplorMRParser.Simple_name, 0)

        def Coefficients(self):
            return self.getToken(XplorMRParser.Coefficients, 0)

        def number_s(self):
            return self.getTypedRuleContext(XplorMRParser.Number_sContext,0)


        def Nrestraints(self):
            return self.getToken(XplorMRParser.Nrestraints, 0)

        def Integer(self):
            return self.getToken(XplorMRParser.Integer, 0)

        def Potential(self):
            return self.getToken(XplorMRParser.Potential, 0)

        def Potential_types(self):
            return self.getToken(XplorMRParser.Potential_types, 0)

        def Print(self):
            return self.getToken(XplorMRParser.Print, 0)

        def Threshold(self):
            return self.getToken(XplorMRParser.Threshold, 0)

        def Reset(self):
            return self.getToken(XplorMRParser.Reset, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_tenso_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTenso_statement" ):
                listener.enterTenso_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTenso_statement" ):
                listener.exitTenso_statement(self)




    def tenso_statement(self):

        localctx = XplorMRParser.Tenso_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_tenso_statement)
        try:
            self.state = 811
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [XplorMRParser.Assign]:
                self.enterOuterAlt(localctx, 1)
                self.state = 798
                self.tenso_assign()
                pass
            elif token in [XplorMRParser.Classification]:
                self.enterOuterAlt(localctx, 2)
                self.state = 799
                self.match(XplorMRParser.Classification)
                self.state = 800
                self.match(XplorMRParser.Simple_name)
                pass
            elif token in [XplorMRParser.Coefficients]:
                self.enterOuterAlt(localctx, 3)
                self.state = 801
                self.match(XplorMRParser.Coefficients)
                self.state = 802
                self.number_s()
                pass
            elif token in [XplorMRParser.Nrestraints]:
                self.enterOuterAlt(localctx, 4)
                self.state = 803
                self.match(XplorMRParser.Nrestraints)
                self.state = 804
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.Potential]:
                self.enterOuterAlt(localctx, 5)
                self.state = 805
                self.match(XplorMRParser.Potential)
                self.state = 806
                self.match(XplorMRParser.Potential_types)
                pass
            elif token in [XplorMRParser.Print]:
                self.enterOuterAlt(localctx, 6)
                self.state = 807
                self.match(XplorMRParser.Print)
                self.state = 808
                self.match(XplorMRParser.Threshold)
                self.state = 809
                self.number_s()
                pass
            elif token in [XplorMRParser.Reset]:
                self.enterOuterAlt(localctx, 7)
                self.state = 810
                self.match(XplorMRParser.Reset)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Tenso_assignContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Assign(self):
            return self.getToken(XplorMRParser.Assign, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.SelectionContext,i)


        def number(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.NumberContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.NumberContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_tenso_assign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTenso_assign" ):
                listener.enterTenso_assign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTenso_assign" ):
                listener.exitTenso_assign(self)




    def tenso_assign(self):

        localctx = XplorMRParser.Tenso_assignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 76, self.RULE_tenso_assign)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 813
            self.match(XplorMRParser.Assign)
            self.state = 814
            self.selection()
            self.state = 815
            self.selection()
            self.state = 816
            self.number()
            self.state = 817
            self.number()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Anis_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def anis_assign(self):
            return self.getTypedRuleContext(XplorMRParser.Anis_assignContext,0)


        def Classification(self):
            return self.getToken(XplorMRParser.Classification, 0)

        def Simple_name(self):
            return self.getToken(XplorMRParser.Simple_name, 0)

        def Coefficients(self):
            return self.getToken(XplorMRParser.Coefficients, 0)

        def number_s(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Number_sContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Number_sContext,i)


        def ForceConstant(self):
            return self.getToken(XplorMRParser.ForceConstant, 0)

        def Nrestraints(self):
            return self.getToken(XplorMRParser.Nrestraints, 0)

        def Integer(self):
            return self.getToken(XplorMRParser.Integer, 0)

        def Potential(self):
            return self.getToken(XplorMRParser.Potential, 0)

        def Potential_types(self):
            return self.getToken(XplorMRParser.Potential_types, 0)

        def Print(self):
            return self.getToken(XplorMRParser.Print, 0)

        def Threshold(self):
            return self.getToken(XplorMRParser.Threshold, 0)

        def Reset(self):
            return self.getToken(XplorMRParser.Reset, 0)

        def Type(self):
            return self.getToken(XplorMRParser.Type, 0)

        def Rdc_or_Diff_anis_types(self):
            return self.getToken(XplorMRParser.Rdc_or_Diff_anis_types, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_anis_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAnis_statement" ):
                listener.enterAnis_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAnis_statement" ):
                listener.exitAnis_statement(self)




    def anis_statement(self):

        localctx = XplorMRParser.Anis_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 78, self.RULE_anis_statement)
        try:
            self.state = 840
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [XplorMRParser.Assign]:
                self.enterOuterAlt(localctx, 1)
                self.state = 819
                self.anis_assign()
                pass
            elif token in [XplorMRParser.Classification]:
                self.enterOuterAlt(localctx, 2)
                self.state = 820
                self.match(XplorMRParser.Classification)
                self.state = 821
                self.match(XplorMRParser.Simple_name)
                pass
            elif token in [XplorMRParser.Coefficients]:
                self.enterOuterAlt(localctx, 3)
                self.state = 822
                self.match(XplorMRParser.Coefficients)
                self.state = 823
                self.number_s()
                self.state = 824
                self.number_s()
                self.state = 825
                self.number_s()
                self.state = 826
                self.number_s()
                pass
            elif token in [XplorMRParser.ForceConstant]:
                self.enterOuterAlt(localctx, 4)
                self.state = 828
                self.match(XplorMRParser.ForceConstant)
                self.state = 829
                self.number_s()
                pass
            elif token in [XplorMRParser.Nrestraints]:
                self.enterOuterAlt(localctx, 5)
                self.state = 830
                self.match(XplorMRParser.Nrestraints)
                self.state = 831
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.Potential]:
                self.enterOuterAlt(localctx, 6)
                self.state = 832
                self.match(XplorMRParser.Potential)
                self.state = 833
                self.match(XplorMRParser.Potential_types)
                pass
            elif token in [XplorMRParser.Print]:
                self.enterOuterAlt(localctx, 7)
                self.state = 834
                self.match(XplorMRParser.Print)
                self.state = 835
                self.match(XplorMRParser.Threshold)
                self.state = 836
                self.number_s()
                pass
            elif token in [XplorMRParser.Reset]:
                self.enterOuterAlt(localctx, 8)
                self.state = 837
                self.match(XplorMRParser.Reset)
                pass
            elif token in [XplorMRParser.Type]:
                self.enterOuterAlt(localctx, 9)
                self.state = 838
                self.match(XplorMRParser.Type)
                self.state = 839
                self.match(XplorMRParser.Rdc_or_Diff_anis_types)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Anis_assignContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Assign(self):
            return self.getToken(XplorMRParser.Assign, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.SelectionContext,i)


        def number(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.NumberContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.NumberContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_anis_assign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAnis_assign" ):
                listener.enterAnis_assign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAnis_assign" ):
                listener.exitAnis_assign(self)




    def anis_assign(self):

        localctx = XplorMRParser.Anis_assignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 80, self.RULE_anis_assign)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 842
            self.match(XplorMRParser.Assign)
            self.state = 843
            self.selection()
            self.state = 844
            self.selection()
            self.state = 845
            self.selection()
            self.state = 846
            self.selection()
            self.state = 847
            self.number()
            self.state = 848
            self.number()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Planar_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Group(self):
            return self.getToken(XplorMRParser.Group, 0)

        def End(self):
            return self.getToken(XplorMRParser.End, 0)

        def group_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Group_statementContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Group_statementContext,i)


        def Initialize(self):
            return self.getToken(XplorMRParser.Initialize, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_planar_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPlanar_statement" ):
                listener.enterPlanar_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPlanar_statement" ):
                listener.exitPlanar_statement(self)




    def planar_statement(self):

        localctx = XplorMRParser.Planar_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 82, self.RULE_planar_statement)
        self._la = 0 # Token type
        try:
            self.state = 859
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [XplorMRParser.Group]:
                self.enterOuterAlt(localctx, 1)
                self.state = 850
                self.match(XplorMRParser.Group)
                self.state = 854
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==XplorMRParser.Selection or _la==XplorMRParser.Weight:
                    self.state = 851
                    self.group_statement()
                    self.state = 856
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 857
                self.match(XplorMRParser.End)
                pass
            elif token in [XplorMRParser.Initialize]:
                self.enterOuterAlt(localctx, 2)
                self.state = 858
                self.match(XplorMRParser.Initialize)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Group_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Selection(self):
            return self.getToken(XplorMRParser.Selection, 0)

        def selection(self):
            return self.getTypedRuleContext(XplorMRParser.SelectionContext,0)


        def Equ_op(self):
            return self.getToken(XplorMRParser.Equ_op, 0)

        def Weight(self):
            return self.getToken(XplorMRParser.Weight, 0)

        def number_s(self):
            return self.getTypedRuleContext(XplorMRParser.Number_sContext,0)


        def getRuleIndex(self):
            return XplorMRParser.RULE_group_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGroup_statement" ):
                listener.enterGroup_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGroup_statement" ):
                listener.exitGroup_statement(self)




    def group_statement(self):

        localctx = XplorMRParser.Group_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 84, self.RULE_group_statement)
        self._la = 0 # Token type
        try:
            self.state = 871
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [XplorMRParser.Selection]:
                self.enterOuterAlt(localctx, 1)
                self.state = 861
                self.match(XplorMRParser.Selection)
                self.state = 863
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 862
                    self.match(XplorMRParser.Equ_op)


                self.state = 865
                self.selection()
                pass
            elif token in [XplorMRParser.Weight]:
                self.enterOuterAlt(localctx, 2)
                self.state = 866
                self.match(XplorMRParser.Weight)
                self.state = 868
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 867
                    self.match(XplorMRParser.Equ_op)


                self.state = 870
                self.number_s()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Harmonic_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Exponent(self):
            return self.getToken(XplorMRParser.Exponent, 0)

        def Integer(self):
            return self.getToken(XplorMRParser.Integer, 0)

        def Equ_op(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Equ_op)
            else:
                return self.getToken(XplorMRParser.Equ_op, i)

        def Normal(self):
            return self.getToken(XplorMRParser.Normal, 0)

        def L_paren(self):
            return self.getToken(XplorMRParser.L_paren, 0)

        def R_paren(self):
            return self.getToken(XplorMRParser.R_paren, 0)

        def number_s(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Number_sContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Number_sContext,i)


        def Tail(self):
            return self.getToken(XplorMRParser.Tail, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.SelectionContext,i)


        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Comma)
            else:
                return self.getToken(XplorMRParser.Comma, i)

        def Head(self):
            return self.getToken(XplorMRParser.Head, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_harmonic_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHarmonic_statement" ):
                listener.enterHarmonic_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHarmonic_statement" ):
                listener.exitHarmonic_statement(self)




    def harmonic_statement(self):

        localctx = XplorMRParser.Harmonic_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 86, self.RULE_harmonic_statement)
        self._la = 0 # Token type
        try:
            self.state = 912
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [XplorMRParser.Exponent]:
                self.enterOuterAlt(localctx, 1)
                self.state = 873
                self.match(XplorMRParser.Exponent)
                self.state = 875
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 874
                    self.match(XplorMRParser.Equ_op)


                self.state = 877
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.Normal]:
                self.enterOuterAlt(localctx, 2)
                self.state = 878
                self.match(XplorMRParser.Normal)
                self.state = 880
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 879
                    self.match(XplorMRParser.Equ_op)


                self.state = 882
                self.match(XplorMRParser.L_paren)
                self.state = 908
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [XplorMRParser.Integer, XplorMRParser.Real]:
                    self.state = 883
                    self.number_s()
                    self.state = 885
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==XplorMRParser.Comma:
                        self.state = 884
                        self.match(XplorMRParser.Comma)


                    self.state = 887
                    self.number_s()
                    self.state = 889
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==XplorMRParser.Comma:
                        self.state = 888
                        self.match(XplorMRParser.Comma)


                    self.state = 891
                    self.number_s()
                    pass
                elif token in [XplorMRParser.Tail]:
                    self.state = 893
                    self.match(XplorMRParser.Tail)
                    self.state = 895
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==XplorMRParser.Equ_op:
                        self.state = 894
                        self.match(XplorMRParser.Equ_op)


                    self.state = 897
                    self.selection()
                    self.state = 899
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==XplorMRParser.Comma:
                        self.state = 898
                        self.match(XplorMRParser.Comma)


                    self.state = 906
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==XplorMRParser.Head:
                        self.state = 901
                        self.match(XplorMRParser.Head)
                        self.state = 903
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==XplorMRParser.Equ_op:
                            self.state = 902
                            self.match(XplorMRParser.Equ_op)


                        self.state = 905
                        self.selection()


                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 910
                self.match(XplorMRParser.R_paren)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Harmonic_assignContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Assign(self):
            return self.getToken(XplorMRParser.Assign, 0)

        def selection(self):
            return self.getTypedRuleContext(XplorMRParser.SelectionContext,0)


        def number(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.NumberContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.NumberContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_harmonic_assign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHarmonic_assign" ):
                listener.enterHarmonic_assign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHarmonic_assign" ):
                listener.exitHarmonic_assign(self)




    def harmonic_assign(self):

        localctx = XplorMRParser.Harmonic_assignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 88, self.RULE_harmonic_assign)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 914
            self.match(XplorMRParser.Assign)
            self.state = 915
            self.selection()
            self.state = 916
            self.number()
            self.state = 917
            self.number()
            self.state = 918
            self.number()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Antidistance_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def xadc_assign(self):
            return self.getTypedRuleContext(XplorMRParser.Xadc_assignContext,0)


        def Classification(self):
            return self.getToken(XplorMRParser.Classification, 0)

        def Simple_name(self):
            return self.getToken(XplorMRParser.Simple_name, 0)

        def Expectation(self):
            return self.getToken(XplorMRParser.Expectation, 0)

        def Integer(self):
            return self.getToken(XplorMRParser.Integer, 0)

        def number_s(self):
            return self.getTypedRuleContext(XplorMRParser.Number_sContext,0)


        def ForceConstant(self):
            return self.getToken(XplorMRParser.ForceConstant, 0)

        def Nrestraints(self):
            return self.getToken(XplorMRParser.Nrestraints, 0)

        def Print(self):
            return self.getToken(XplorMRParser.Print, 0)

        def Threshold(self):
            return self.getToken(XplorMRParser.Threshold, 0)

        def All(self):
            return self.getToken(XplorMRParser.All, 0)

        def Reset(self):
            return self.getToken(XplorMRParser.Reset, 0)

        def Size(self):
            return self.getToken(XplorMRParser.Size, 0)

        def Zero(self):
            return self.getToken(XplorMRParser.Zero, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_antidistance_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAntidistance_statement" ):
                listener.enterAntidistance_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAntidistance_statement" ):
                listener.exitAntidistance_statement(self)




    def antidistance_statement(self):

        localctx = XplorMRParser.Antidistance_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 90, self.RULE_antidistance_statement)
        try:
            self.state = 944
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [XplorMRParser.Assign]:
                self.enterOuterAlt(localctx, 1)
                self.state = 920
                self.xadc_assign()
                pass
            elif token in [XplorMRParser.Classification]:
                self.enterOuterAlt(localctx, 2)
                self.state = 921
                self.match(XplorMRParser.Classification)
                self.state = 922
                self.match(XplorMRParser.Simple_name)
                pass
            elif token in [XplorMRParser.Expectation]:
                self.enterOuterAlt(localctx, 3)
                self.state = 923
                self.match(XplorMRParser.Expectation)
                self.state = 924
                self.match(XplorMRParser.Integer)
                self.state = 925
                self.number_s()
                pass
            elif token in [XplorMRParser.ForceConstant]:
                self.enterOuterAlt(localctx, 4)
                self.state = 926
                self.match(XplorMRParser.ForceConstant)
                self.state = 927
                self.number_s()
                pass
            elif token in [XplorMRParser.Nrestraints]:
                self.enterOuterAlt(localctx, 5)
                self.state = 928
                self.match(XplorMRParser.Nrestraints)
                self.state = 929
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.Print]:
                self.enterOuterAlt(localctx, 6)
                self.state = 930
                self.match(XplorMRParser.Print)
                self.state = 931
                self.match(XplorMRParser.Threshold)
                self.state = 932
                self.number_s()
                self.state = 936
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [XplorMRParser.All]:
                    self.state = 933
                    self.match(XplorMRParser.All)
                    pass
                elif token in [XplorMRParser.Classification]:
                    self.state = 934
                    self.match(XplorMRParser.Classification)
                    self.state = 935
                    self.match(XplorMRParser.Simple_name)
                    pass
                else:
                    raise NoViableAltException(self)

                pass
            elif token in [XplorMRParser.Reset]:
                self.enterOuterAlt(localctx, 7)
                self.state = 938
                self.match(XplorMRParser.Reset)
                pass
            elif token in [XplorMRParser.Size]:
                self.enterOuterAlt(localctx, 8)
                self.state = 939
                self.match(XplorMRParser.Size)
                self.state = 940
                self.number_s()
                self.state = 941
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.Zero]:
                self.enterOuterAlt(localctx, 9)
                self.state = 943
                self.match(XplorMRParser.Zero)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Xadc_assignContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Assign(self):
            return self.getToken(XplorMRParser.Assign, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.SelectionContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_xadc_assign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterXadc_assign" ):
                listener.enterXadc_assign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitXadc_assign" ):
                listener.exitXadc_assign(self)




    def xadc_assign(self):

        localctx = XplorMRParser.Xadc_assignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 92, self.RULE_xadc_assign)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 946
            self.match(XplorMRParser.Assign)
            self.state = 947
            self.selection()
            self.state = 948
            self.selection()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Coupling_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def coup_assign(self):
            return self.getTypedRuleContext(XplorMRParser.Coup_assignContext,0)


        def Classification(self):
            return self.getToken(XplorMRParser.Classification, 0)

        def Simple_name(self):
            return self.getToken(XplorMRParser.Simple_name, 0)

        def Coefficients(self):
            return self.getToken(XplorMRParser.Coefficients, 0)

        def number_s(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Number_sContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Number_sContext,i)


        def Cv(self):
            return self.getToken(XplorMRParser.Cv, 0)

        def Integer(self):
            return self.getToken(XplorMRParser.Integer, 0)

        def Equ_op(self):
            return self.getToken(XplorMRParser.Equ_op, 0)

        def DegEnergy(self):
            return self.getToken(XplorMRParser.DegEnergy, 0)

        def ForceConstant(self):
            return self.getToken(XplorMRParser.ForceConstant, 0)

        def Nrestraints(self):
            return self.getToken(XplorMRParser.Nrestraints, 0)

        def Partition(self):
            return self.getToken(XplorMRParser.Partition, 0)

        def Potential(self):
            return self.getToken(XplorMRParser.Potential, 0)

        def Potential_types(self):
            return self.getToken(XplorMRParser.Potential_types, 0)

        def Print(self):
            return self.getToken(XplorMRParser.Print, 0)

        def Threshold(self):
            return self.getToken(XplorMRParser.Threshold, 0)

        def All(self):
            return self.getToken(XplorMRParser.All, 0)

        def Reset(self):
            return self.getToken(XplorMRParser.Reset, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_coupling_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCoupling_statement" ):
                listener.enterCoupling_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCoupling_statement" ):
                listener.exitCoupling_statement(self)




    def coupling_statement(self):

        localctx = XplorMRParser.Coupling_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 94, self.RULE_coupling_statement)
        self._la = 0 # Token type
        try:
            self.state = 989
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [XplorMRParser.Assign]:
                self.enterOuterAlt(localctx, 1)
                self.state = 950
                self.coup_assign()
                pass
            elif token in [XplorMRParser.Classification]:
                self.enterOuterAlt(localctx, 2)
                self.state = 951
                self.match(XplorMRParser.Classification)
                self.state = 952
                self.match(XplorMRParser.Simple_name)
                pass
            elif token in [XplorMRParser.Coefficients]:
                self.enterOuterAlt(localctx, 3)
                self.state = 953
                self.match(XplorMRParser.Coefficients)
                self.state = 954
                self.number_s()
                self.state = 955
                self.number_s()
                self.state = 956
                self.number_s()
                self.state = 957
                self.number_s()
                pass
            elif token in [XplorMRParser.Cv]:
                self.enterOuterAlt(localctx, 4)
                self.state = 959
                self.match(XplorMRParser.Cv)
                self.state = 961
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 960
                    self.match(XplorMRParser.Equ_op)


                self.state = 963
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.DegEnergy]:
                self.enterOuterAlt(localctx, 5)
                self.state = 964
                self.match(XplorMRParser.DegEnergy)
                self.state = 965
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.ForceConstant]:
                self.enterOuterAlt(localctx, 6)
                self.state = 966
                self.match(XplorMRParser.ForceConstant)
                self.state = 967
                self.number_s()
                self.state = 969
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Integer or _la==XplorMRParser.Real:
                    self.state = 968
                    self.number_s()


                pass
            elif token in [XplorMRParser.Nrestraints]:
                self.enterOuterAlt(localctx, 7)
                self.state = 971
                self.match(XplorMRParser.Nrestraints)
                self.state = 972
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.Partition]:
                self.enterOuterAlt(localctx, 8)
                self.state = 973
                self.match(XplorMRParser.Partition)
                self.state = 975
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 974
                    self.match(XplorMRParser.Equ_op)


                self.state = 977
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.Potential]:
                self.enterOuterAlt(localctx, 9)
                self.state = 978
                self.match(XplorMRParser.Potential)
                self.state = 979
                self.match(XplorMRParser.Potential_types)
                pass
            elif token in [XplorMRParser.Print]:
                self.enterOuterAlt(localctx, 10)
                self.state = 980
                self.match(XplorMRParser.Print)
                self.state = 981
                self.match(XplorMRParser.Threshold)
                self.state = 982
                self.number_s()
                self.state = 986
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [XplorMRParser.All]:
                    self.state = 983
                    self.match(XplorMRParser.All)
                    pass
                elif token in [XplorMRParser.Classification]:
                    self.state = 984
                    self.match(XplorMRParser.Classification)
                    self.state = 985
                    self.match(XplorMRParser.Simple_name)
                    pass
                else:
                    raise NoViableAltException(self)

                pass
            elif token in [XplorMRParser.Reset]:
                self.enterOuterAlt(localctx, 11)
                self.state = 988
                self.match(XplorMRParser.Reset)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Coup_assignContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Assign(self):
            return self.getToken(XplorMRParser.Assign, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.SelectionContext,i)


        def number(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.NumberContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.NumberContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_coup_assign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCoup_assign" ):
                listener.enterCoup_assign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCoup_assign" ):
                listener.exitCoup_assign(self)




    def coup_assign(self):

        localctx = XplorMRParser.Coup_assignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 96, self.RULE_coup_assign)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 991
            self.match(XplorMRParser.Assign)
            self.state = 992
            self.selection()
            self.state = 993
            self.selection()
            self.state = 994
            self.selection()
            self.state = 995
            self.selection()
            self.state = 1001
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==XplorMRParser.L_paren:
                self.state = 996
                self.selection()
                self.state = 997
                self.selection()
                self.state = 998
                self.selection()
                self.state = 999
                self.selection()


            self.state = 1003
            self.number()
            self.state = 1004
            self.number()
            self.state = 1008
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==XplorMRParser.Integer or _la==XplorMRParser.Real:
                self.state = 1005
                self.number()
                self.state = 1006
                self.number()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Carbon_shift_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def carbon_shift_assign(self):
            return self.getTypedRuleContext(XplorMRParser.Carbon_shift_assignContext,0)


        def Classification(self):
            return self.getToken(XplorMRParser.Classification, 0)

        def Simple_name(self):
            return self.getToken(XplorMRParser.Simple_name, 0)

        def Expectation(self):
            return self.getToken(XplorMRParser.Expectation, 0)

        def Integer(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Integer)
            else:
                return self.getToken(XplorMRParser.Integer, i)

        def number_s(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Number_sContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Number_sContext,i)


        def ForceConstant(self):
            return self.getToken(XplorMRParser.ForceConstant, 0)

        def Nrestraints(self):
            return self.getToken(XplorMRParser.Nrestraints, 0)

        def PhiStep(self):
            return self.getToken(XplorMRParser.PhiStep, 0)

        def PsiStep(self):
            return self.getToken(XplorMRParser.PsiStep, 0)

        def Potential(self):
            return self.getToken(XplorMRParser.Potential, 0)

        def Potential_types(self):
            return self.getToken(XplorMRParser.Potential_types, 0)

        def Print(self):
            return self.getToken(XplorMRParser.Print, 0)

        def Threshold(self):
            return self.getToken(XplorMRParser.Threshold, 0)

        def carbon_shift_rcoil(self):
            return self.getTypedRuleContext(XplorMRParser.Carbon_shift_rcoilContext,0)


        def Reset(self):
            return self.getToken(XplorMRParser.Reset, 0)

        def Zero(self):
            return self.getToken(XplorMRParser.Zero, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_carbon_shift_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCarbon_shift_statement" ):
                listener.enterCarbon_shift_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCarbon_shift_statement" ):
                listener.exitCarbon_shift_statement(self)




    def carbon_shift_statement(self):

        localctx = XplorMRParser.Carbon_shift_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 98, self.RULE_carbon_shift_statement)
        try:
            self.state = 1036
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [XplorMRParser.Assign]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1010
                self.carbon_shift_assign()
                pass
            elif token in [XplorMRParser.Classification]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1011
                self.match(XplorMRParser.Classification)
                self.state = 1012
                self.match(XplorMRParser.Simple_name)
                pass
            elif token in [XplorMRParser.Expectation]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1013
                self.match(XplorMRParser.Expectation)
                self.state = 1014
                self.match(XplorMRParser.Integer)
                self.state = 1015
                self.match(XplorMRParser.Integer)
                self.state = 1016
                self.number_s()
                self.state = 1017
                self.number_s()
                self.state = 1018
                self.number_s()
                pass
            elif token in [XplorMRParser.ForceConstant]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1020
                self.match(XplorMRParser.ForceConstant)
                self.state = 1021
                self.number_s()
                pass
            elif token in [XplorMRParser.Nrestraints]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1022
                self.match(XplorMRParser.Nrestraints)
                self.state = 1023
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.PhiStep]:
                self.enterOuterAlt(localctx, 6)
                self.state = 1024
                self.match(XplorMRParser.PhiStep)
                self.state = 1025
                self.number_s()
                pass
            elif token in [XplorMRParser.PsiStep]:
                self.enterOuterAlt(localctx, 7)
                self.state = 1026
                self.match(XplorMRParser.PsiStep)
                self.state = 1027
                self.number_s()
                pass
            elif token in [XplorMRParser.Potential]:
                self.enterOuterAlt(localctx, 8)
                self.state = 1028
                self.match(XplorMRParser.Potential)
                self.state = 1029
                self.match(XplorMRParser.Potential_types)
                pass
            elif token in [XplorMRParser.Print]:
                self.enterOuterAlt(localctx, 9)
                self.state = 1030
                self.match(XplorMRParser.Print)
                self.state = 1031
                self.match(XplorMRParser.Threshold)
                self.state = 1032
                self.number_s()
                pass
            elif token in [XplorMRParser.Rcoil]:
                self.enterOuterAlt(localctx, 10)
                self.state = 1033
                self.carbon_shift_rcoil()
                pass
            elif token in [XplorMRParser.Reset]:
                self.enterOuterAlt(localctx, 11)
                self.state = 1034
                self.match(XplorMRParser.Reset)
                pass
            elif token in [XplorMRParser.Zero]:
                self.enterOuterAlt(localctx, 12)
                self.state = 1035
                self.match(XplorMRParser.Zero)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Carbon_shift_assignContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Assign(self):
            return self.getToken(XplorMRParser.Assign, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.SelectionContext,i)


        def number(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.NumberContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.NumberContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_carbon_shift_assign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCarbon_shift_assign" ):
                listener.enterCarbon_shift_assign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCarbon_shift_assign" ):
                listener.exitCarbon_shift_assign(self)




    def carbon_shift_assign(self):

        localctx = XplorMRParser.Carbon_shift_assignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 100, self.RULE_carbon_shift_assign)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1038
            self.match(XplorMRParser.Assign)
            self.state = 1039
            self.selection()
            self.state = 1040
            self.selection()
            self.state = 1041
            self.selection()
            self.state = 1042
            self.selection()
            self.state = 1043
            self.selection()
            self.state = 1044
            self.number()
            self.state = 1045
            self.number()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Carbon_shift_rcoilContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Rcoil(self):
            return self.getToken(XplorMRParser.Rcoil, 0)

        def selection(self):
            return self.getTypedRuleContext(XplorMRParser.SelectionContext,0)


        def number_s(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Number_sContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Number_sContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_carbon_shift_rcoil

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCarbon_shift_rcoil" ):
                listener.enterCarbon_shift_rcoil(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCarbon_shift_rcoil" ):
                listener.exitCarbon_shift_rcoil(self)




    def carbon_shift_rcoil(self):

        localctx = XplorMRParser.Carbon_shift_rcoilContext(self, self._ctx, self.state)
        self.enterRule(localctx, 102, self.RULE_carbon_shift_rcoil)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1047
            self.match(XplorMRParser.Rcoil)
            self.state = 1048
            self.selection()
            self.state = 1049
            self.number_s()
            self.state = 1050
            self.number_s()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Proton_shift_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def observed(self):
            return self.getTypedRuleContext(XplorMRParser.ObservedContext,0)


        def proton_shift_rcoil(self):
            return self.getTypedRuleContext(XplorMRParser.Proton_shift_rcoilContext,0)


        def proton_shift_anisotropy(self):
            return self.getTypedRuleContext(XplorMRParser.Proton_shift_anisotropyContext,0)


        def proton_shift_amides(self):
            return self.getTypedRuleContext(XplorMRParser.Proton_shift_amidesContext,0)


        def proton_shift_carbons(self):
            return self.getTypedRuleContext(XplorMRParser.Proton_shift_carbonsContext,0)


        def proton_shift_nitrogens(self):
            return self.getTypedRuleContext(XplorMRParser.Proton_shift_nitrogensContext,0)


        def proton_shift_oxygens(self):
            return self.getTypedRuleContext(XplorMRParser.Proton_shift_oxygensContext,0)


        def proton_shift_ring_atoms(self):
            return self.getTypedRuleContext(XplorMRParser.Proton_shift_ring_atomsContext,0)


        def proton_shift_alphas_and_amides(self):
            return self.getTypedRuleContext(XplorMRParser.Proton_shift_alphas_and_amidesContext,0)


        def Classification(self):
            return self.getToken(XplorMRParser.Classification, 0)

        def Simple_name(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Simple_name)
            else:
                return self.getToken(XplorMRParser.Simple_name, i)

        def Error(self):
            return self.getToken(XplorMRParser.Error, 0)

        def number_s(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Number_sContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Number_sContext,i)


        def DegEnergy(self):
            return self.getToken(XplorMRParser.DegEnergy, 0)

        def Integer(self):
            return self.getToken(XplorMRParser.Integer, 0)

        def ForceConstant(self):
            return self.getToken(XplorMRParser.ForceConstant, 0)

        def Potential(self):
            return self.getToken(XplorMRParser.Potential, 0)

        def Potential_types(self):
            return self.getToken(XplorMRParser.Potential_types, 0)

        def Print(self):
            return self.getToken(XplorMRParser.Print, 0)

        def Threshold(self):
            return self.getToken(XplorMRParser.Threshold, 0)

        def All(self):
            return self.getToken(XplorMRParser.All, 0)

        def Reset(self):
            return self.getToken(XplorMRParser.Reset, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_proton_shift_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProton_shift_statement" ):
                listener.enterProton_shift_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProton_shift_statement" ):
                listener.exitProton_shift_statement(self)




    def proton_shift_statement(self):

        localctx = XplorMRParser.Proton_shift_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 104, self.RULE_proton_shift_statement)
        self._la = 0 # Token type
        try:
            self.state = 1085
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [XplorMRParser.Observed]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1052
                self.observed()
                pass
            elif token in [XplorMRParser.Rcoil]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1053
                self.proton_shift_rcoil()
                pass
            elif token in [XplorMRParser.Anisotropy]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1054
                self.proton_shift_anisotropy()
                pass
            elif token in [XplorMRParser.Amides]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1055
                self.proton_shift_amides()
                pass
            elif token in [XplorMRParser.Carbon]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1056
                self.proton_shift_carbons()
                pass
            elif token in [XplorMRParser.Nitrogens]:
                self.enterOuterAlt(localctx, 6)
                self.state = 1057
                self.proton_shift_nitrogens()
                pass
            elif token in [XplorMRParser.Oxygens]:
                self.enterOuterAlt(localctx, 7)
                self.state = 1058
                self.proton_shift_oxygens()
                pass
            elif token in [XplorMRParser.RingAtoms]:
                self.enterOuterAlt(localctx, 8)
                self.state = 1059
                self.proton_shift_ring_atoms()
                pass
            elif token in [XplorMRParser.AlphasAndAmides]:
                self.enterOuterAlt(localctx, 9)
                self.state = 1060
                self.proton_shift_alphas_and_amides()
                pass
            elif token in [XplorMRParser.Classification]:
                self.enterOuterAlt(localctx, 10)
                self.state = 1061
                self.match(XplorMRParser.Classification)
                self.state = 1062
                self.match(XplorMRParser.Simple_name)
                pass
            elif token in [XplorMRParser.Error]:
                self.enterOuterAlt(localctx, 11)
                self.state = 1063
                self.match(XplorMRParser.Error)
                self.state = 1064
                self.number_s()
                pass
            elif token in [XplorMRParser.DegEnergy]:
                self.enterOuterAlt(localctx, 12)
                self.state = 1065
                self.match(XplorMRParser.DegEnergy)
                self.state = 1066
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.ForceConstant]:
                self.enterOuterAlt(localctx, 13)
                self.state = 1067
                self.match(XplorMRParser.ForceConstant)
                self.state = 1068
                self.number_s()
                self.state = 1070
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Integer or _la==XplorMRParser.Real:
                    self.state = 1069
                    self.number_s()


                pass
            elif token in [XplorMRParser.Potential]:
                self.enterOuterAlt(localctx, 14)
                self.state = 1072
                self.match(XplorMRParser.Potential)
                self.state = 1073
                self.match(XplorMRParser.Potential_types)
                pass
            elif token in [XplorMRParser.Print]:
                self.enterOuterAlt(localctx, 15)
                self.state = 1074
                self.match(XplorMRParser.Print)
                self.state = 1075
                self.match(XplorMRParser.Threshold)
                self.state = 1076
                self.number_s()
                self.state = 1080
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [XplorMRParser.All]:
                    self.state = 1077
                    self.match(XplorMRParser.All)
                    pass
                elif token in [XplorMRParser.Classification]:
                    self.state = 1078
                    self.match(XplorMRParser.Classification)
                    self.state = 1079
                    self.match(XplorMRParser.Simple_name)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 1082
                self.match(XplorMRParser.Simple_name)
                pass
            elif token in [XplorMRParser.Reset]:
                self.enterOuterAlt(localctx, 16)
                self.state = 1084
                self.match(XplorMRParser.Reset)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ObservedContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Observed(self):
            return self.getToken(XplorMRParser.Observed, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.SelectionContext,i)


        def number_s(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Number_sContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Number_sContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_observed

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterObserved" ):
                listener.enterObserved(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitObserved" ):
                listener.exitObserved(self)




    def observed(self):

        localctx = XplorMRParser.ObservedContext(self, self._ctx, self.state)
        self.enterRule(localctx, 106, self.RULE_observed)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1087
            self.match(XplorMRParser.Observed)
            self.state = 1088
            self.selection()
            self.state = 1090
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==XplorMRParser.L_paren:
                self.state = 1089
                self.selection()


            self.state = 1092
            self.number_s()
            self.state = 1094
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==XplorMRParser.Integer or _la==XplorMRParser.Real:
                self.state = 1093
                self.number_s()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Proton_shift_rcoilContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Rcoil(self):
            return self.getToken(XplorMRParser.Rcoil, 0)

        def selection(self):
            return self.getTypedRuleContext(XplorMRParser.SelectionContext,0)


        def number_s(self):
            return self.getTypedRuleContext(XplorMRParser.Number_sContext,0)


        def getRuleIndex(self):
            return XplorMRParser.RULE_proton_shift_rcoil

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProton_shift_rcoil" ):
                listener.enterProton_shift_rcoil(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProton_shift_rcoil" ):
                listener.exitProton_shift_rcoil(self)




    def proton_shift_rcoil(self):

        localctx = XplorMRParser.Proton_shift_rcoilContext(self, self._ctx, self.state)
        self.enterRule(localctx, 108, self.RULE_proton_shift_rcoil)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1096
            self.match(XplorMRParser.Rcoil)
            self.state = 1097
            self.selection()
            self.state = 1098
            self.number_s()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Proton_shift_anisotropyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Anisotropy(self):
            return self.getToken(XplorMRParser.Anisotropy, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.SelectionContext,i)


        def Simple_name(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Simple_name)
            else:
                return self.getToken(XplorMRParser.Simple_name, i)

        def Logical(self):
            return self.getToken(XplorMRParser.Logical, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_proton_shift_anisotropy

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProton_shift_anisotropy" ):
                listener.enterProton_shift_anisotropy(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProton_shift_anisotropy" ):
                listener.exitProton_shift_anisotropy(self)




    def proton_shift_anisotropy(self):

        localctx = XplorMRParser.Proton_shift_anisotropyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 110, self.RULE_proton_shift_anisotropy)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1100
            self.match(XplorMRParser.Anisotropy)
            self.state = 1101
            self.selection()
            self.state = 1102
            self.selection()
            self.state = 1103
            self.selection()
            self.state = 1104
            self.match(XplorMRParser.Simple_name)
            self.state = 1106
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==XplorMRParser.Logical:
                self.state = 1105
                self.match(XplorMRParser.Logical)


            self.state = 1108
            self.match(XplorMRParser.Simple_name)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Proton_shift_amidesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Amides(self):
            return self.getToken(XplorMRParser.Amides, 0)

        def selection(self):
            return self.getTypedRuleContext(XplorMRParser.SelectionContext,0)


        def getRuleIndex(self):
            return XplorMRParser.RULE_proton_shift_amides

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProton_shift_amides" ):
                listener.enterProton_shift_amides(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProton_shift_amides" ):
                listener.exitProton_shift_amides(self)




    def proton_shift_amides(self):

        localctx = XplorMRParser.Proton_shift_amidesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 112, self.RULE_proton_shift_amides)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1110
            self.match(XplorMRParser.Amides)
            self.state = 1111
            self.selection()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Proton_shift_carbonsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Carbon(self):
            return self.getToken(XplorMRParser.Carbon, 0)

        def selection(self):
            return self.getTypedRuleContext(XplorMRParser.SelectionContext,0)


        def getRuleIndex(self):
            return XplorMRParser.RULE_proton_shift_carbons

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProton_shift_carbons" ):
                listener.enterProton_shift_carbons(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProton_shift_carbons" ):
                listener.exitProton_shift_carbons(self)




    def proton_shift_carbons(self):

        localctx = XplorMRParser.Proton_shift_carbonsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 114, self.RULE_proton_shift_carbons)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1113
            self.match(XplorMRParser.Carbon)
            self.state = 1114
            self.selection()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Proton_shift_nitrogensContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Nitrogens(self):
            return self.getToken(XplorMRParser.Nitrogens, 0)

        def selection(self):
            return self.getTypedRuleContext(XplorMRParser.SelectionContext,0)


        def getRuleIndex(self):
            return XplorMRParser.RULE_proton_shift_nitrogens

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProton_shift_nitrogens" ):
                listener.enterProton_shift_nitrogens(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProton_shift_nitrogens" ):
                listener.exitProton_shift_nitrogens(self)




    def proton_shift_nitrogens(self):

        localctx = XplorMRParser.Proton_shift_nitrogensContext(self, self._ctx, self.state)
        self.enterRule(localctx, 116, self.RULE_proton_shift_nitrogens)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1116
            self.match(XplorMRParser.Nitrogens)
            self.state = 1117
            self.selection()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Proton_shift_oxygensContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Oxygens(self):
            return self.getToken(XplorMRParser.Oxygens, 0)

        def selection(self):
            return self.getTypedRuleContext(XplorMRParser.SelectionContext,0)


        def getRuleIndex(self):
            return XplorMRParser.RULE_proton_shift_oxygens

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProton_shift_oxygens" ):
                listener.enterProton_shift_oxygens(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProton_shift_oxygens" ):
                listener.exitProton_shift_oxygens(self)




    def proton_shift_oxygens(self):

        localctx = XplorMRParser.Proton_shift_oxygensContext(self, self._ctx, self.state)
        self.enterRule(localctx, 118, self.RULE_proton_shift_oxygens)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1119
            self.match(XplorMRParser.Oxygens)
            self.state = 1120
            self.selection()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Proton_shift_ring_atomsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RingAtoms(self):
            return self.getToken(XplorMRParser.RingAtoms, 0)

        def Simple_name(self):
            return self.getToken(XplorMRParser.Simple_name, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.SelectionContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_proton_shift_ring_atoms

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProton_shift_ring_atoms" ):
                listener.enterProton_shift_ring_atoms(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProton_shift_ring_atoms" ):
                listener.exitProton_shift_ring_atoms(self)




    def proton_shift_ring_atoms(self):

        localctx = XplorMRParser.Proton_shift_ring_atomsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 120, self.RULE_proton_shift_ring_atoms)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1122
            self.match(XplorMRParser.RingAtoms)
            self.state = 1123
            self.match(XplorMRParser.Simple_name)
            self.state = 1124
            self.selection()
            self.state = 1125
            self.selection()
            self.state = 1126
            self.selection()
            self.state = 1127
            self.selection()
            self.state = 1128
            self.selection()
            self.state = 1130
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==XplorMRParser.L_paren:
                self.state = 1129
                self.selection()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Proton_shift_alphas_and_amidesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AlphasAndAmides(self):
            return self.getToken(XplorMRParser.AlphasAndAmides, 0)

        def selection(self):
            return self.getTypedRuleContext(XplorMRParser.SelectionContext,0)


        def getRuleIndex(self):
            return XplorMRParser.RULE_proton_shift_alphas_and_amides

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProton_shift_alphas_and_amides" ):
                listener.enterProton_shift_alphas_and_amides(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProton_shift_alphas_and_amides" ):
                listener.exitProton_shift_alphas_and_amides(self)




    def proton_shift_alphas_and_amides(self):

        localctx = XplorMRParser.Proton_shift_alphas_and_amidesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 122, self.RULE_proton_shift_alphas_and_amides)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1132
            self.match(XplorMRParser.AlphasAndAmides)
            self.state = 1133
            self.selection()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Ramachandran_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def rama_assign(self):
            return self.getTypedRuleContext(XplorMRParser.Rama_assignContext,0)


        def Classification(self):
            return self.getToken(XplorMRParser.Classification, 0)

        def Simple_name(self):
            return self.getToken(XplorMRParser.Simple_name, 0)

        def Cutoff(self):
            return self.getToken(XplorMRParser.Cutoff, 0)

        def number_s(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Number_sContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Number_sContext,i)


        def ForceConstant(self):
            return self.getToken(XplorMRParser.ForceConstant, 0)

        def Gaussian(self):
            return self.getToken(XplorMRParser.Gaussian, 0)

        def Nrestraints(self):
            return self.getToken(XplorMRParser.Nrestraints, 0)

        def Integer(self):
            return self.getToken(XplorMRParser.Integer, 0)

        def Phase(self):
            return self.getToken(XplorMRParser.Phase, 0)

        def Print(self):
            return self.getToken(XplorMRParser.Print, 0)

        def Threshold(self):
            return self.getToken(XplorMRParser.Threshold, 0)

        def All(self):
            return self.getToken(XplorMRParser.All, 0)

        def Quartic(self):
            return self.getToken(XplorMRParser.Quartic, 0)

        def Reset(self):
            return self.getToken(XplorMRParser.Reset, 0)

        def Scale(self):
            return self.getToken(XplorMRParser.Scale, 0)

        def Shape(self):
            return self.getToken(XplorMRParser.Shape, 0)

        def Gauss_or_Quart(self):
            return self.getToken(XplorMRParser.Gauss_or_Quart, 0)

        def Size(self):
            return self.getToken(XplorMRParser.Size, 0)

        def Dimensions(self):
            return self.getToken(XplorMRParser.Dimensions, 0)

        def Sort(self):
            return self.getToken(XplorMRParser.Sort, 0)

        def Zero(self):
            return self.getToken(XplorMRParser.Zero, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_ramachandran_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRamachandran_statement" ):
                listener.enterRamachandran_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRamachandran_statement" ):
                listener.exitRamachandran_statement(self)




    def ramachandran_statement(self):

        localctx = XplorMRParser.Ramachandran_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 124, self.RULE_ramachandran_statement)
        self._la = 0 # Token type
        try:
            self.state = 1237
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [XplorMRParser.Assign]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1135
                self.rama_assign()
                pass
            elif token in [XplorMRParser.Classification]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1136
                self.match(XplorMRParser.Classification)
                self.state = 1137
                self.match(XplorMRParser.Simple_name)
                pass
            elif token in [XplorMRParser.Cutoff]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1138
                self.match(XplorMRParser.Cutoff)
                self.state = 1139
                self.number_s()
                pass
            elif token in [XplorMRParser.ForceConstant]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1140
                self.match(XplorMRParser.ForceConstant)
                self.state = 1141
                self.number_s()
                pass
            elif token in [XplorMRParser.Gaussian]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1142
                self.match(XplorMRParser.Gaussian)
                self.state = 1143
                self.number_s()
                self.state = 1144
                self.number_s()
                self.state = 1145
                self.number_s()
                self.state = 1150
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,95,self._ctx)
                if la_ == 1:
                    self.state = 1146
                    self.number_s()
                    self.state = 1147
                    self.number_s()
                    self.state = 1148
                    self.number_s()


                self.state = 1156
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,96,self._ctx)
                if la_ == 1:
                    self.state = 1152
                    self.number_s()
                    self.state = 1153
                    self.number_s()
                    self.state = 1154
                    self.number_s()


                self.state = 1162
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Integer or _la==XplorMRParser.Real:
                    self.state = 1158
                    self.number_s()
                    self.state = 1159
                    self.number_s()
                    self.state = 1160
                    self.number_s()


                pass
            elif token in [XplorMRParser.Nrestraints]:
                self.enterOuterAlt(localctx, 6)
                self.state = 1164
                self.match(XplorMRParser.Nrestraints)
                self.state = 1165
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.Phase]:
                self.enterOuterAlt(localctx, 7)
                self.state = 1166
                self.match(XplorMRParser.Phase)
                self.state = 1167
                self.number_s()
                self.state = 1168
                self.number_s()
                self.state = 1169
                self.number_s()
                self.state = 1174
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,98,self._ctx)
                if la_ == 1:
                    self.state = 1170
                    self.number_s()
                    self.state = 1171
                    self.number_s()
                    self.state = 1172
                    self.number_s()


                self.state = 1180
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,99,self._ctx)
                if la_ == 1:
                    self.state = 1176
                    self.number_s()
                    self.state = 1177
                    self.number_s()
                    self.state = 1178
                    self.number_s()


                self.state = 1186
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Integer or _la==XplorMRParser.Real:
                    self.state = 1182
                    self.number_s()
                    self.state = 1183
                    self.number_s()
                    self.state = 1184
                    self.number_s()


                pass
            elif token in [XplorMRParser.Print]:
                self.enterOuterAlt(localctx, 8)
                self.state = 1188
                self.match(XplorMRParser.Print)
                self.state = 1189
                self.match(XplorMRParser.Threshold)
                self.state = 1190
                self.number_s()
                self.state = 1194
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [XplorMRParser.All]:
                    self.state = 1191
                    self.match(XplorMRParser.All)
                    pass
                elif token in [XplorMRParser.Classification]:
                    self.state = 1192
                    self.match(XplorMRParser.Classification)
                    self.state = 1193
                    self.match(XplorMRParser.Simple_name)
                    pass
                else:
                    raise NoViableAltException(self)

                pass
            elif token in [XplorMRParser.Quartic]:
                self.enterOuterAlt(localctx, 9)
                self.state = 1196
                self.match(XplorMRParser.Quartic)
                self.state = 1197
                self.number_s()
                self.state = 1198
                self.number_s()
                self.state = 1199
                self.number_s()
                self.state = 1204
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,102,self._ctx)
                if la_ == 1:
                    self.state = 1200
                    self.number_s()
                    self.state = 1201
                    self.number_s()
                    self.state = 1202
                    self.number_s()


                self.state = 1210
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,103,self._ctx)
                if la_ == 1:
                    self.state = 1206
                    self.number_s()
                    self.state = 1207
                    self.number_s()
                    self.state = 1208
                    self.number_s()


                self.state = 1216
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Integer or _la==XplorMRParser.Real:
                    self.state = 1212
                    self.number_s()
                    self.state = 1213
                    self.number_s()
                    self.state = 1214
                    self.number_s()


                pass
            elif token in [XplorMRParser.Reset]:
                self.enterOuterAlt(localctx, 10)
                self.state = 1218
                self.match(XplorMRParser.Reset)
                pass
            elif token in [XplorMRParser.Scale]:
                self.enterOuterAlt(localctx, 11)
                self.state = 1219
                self.match(XplorMRParser.Scale)
                self.state = 1220
                self.number_s()
                pass
            elif token in [XplorMRParser.Shape]:
                self.enterOuterAlt(localctx, 12)
                self.state = 1221
                self.match(XplorMRParser.Shape)
                self.state = 1222
                self.match(XplorMRParser.Gauss_or_Quart)
                pass
            elif token in [XplorMRParser.Size]:
                self.enterOuterAlt(localctx, 13)
                self.state = 1223
                self.match(XplorMRParser.Size)
                self.state = 1224
                self.match(XplorMRParser.Dimensions)
                self.state = 1225
                self.number_s()
                self.state = 1227
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,105,self._ctx)
                if la_ == 1:
                    self.state = 1226
                    self.number_s()


                self.state = 1230
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,106,self._ctx)
                if la_ == 1:
                    self.state = 1229
                    self.number_s()


                self.state = 1233
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Integer or _la==XplorMRParser.Real:
                    self.state = 1232
                    self.number_s()


                pass
            elif token in [XplorMRParser.Sort]:
                self.enterOuterAlt(localctx, 14)
                self.state = 1235
                self.match(XplorMRParser.Sort)
                pass
            elif token in [XplorMRParser.Zero]:
                self.enterOuterAlt(localctx, 15)
                self.state = 1236
                self.match(XplorMRParser.Zero)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Rama_assignContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Assign(self):
            return self.getToken(XplorMRParser.Assign, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.SelectionContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_rama_assign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRama_assign" ):
                listener.enterRama_assign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRama_assign" ):
                listener.exitRama_assign(self)




    def rama_assign(self):

        localctx = XplorMRParser.Rama_assignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 126, self.RULE_rama_assign)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1239
            self.match(XplorMRParser.Assign)
            self.state = 1240
            self.selection()
            self.state = 1241
            self.selection()
            self.state = 1242
            self.selection()
            self.state = 1243
            self.selection()
            self.state = 1249
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,109,self._ctx)
            if la_ == 1:
                self.state = 1244
                self.selection()
                self.state = 1245
                self.selection()
                self.state = 1246
                self.selection()
                self.state = 1247
                self.selection()


            self.state = 1256
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,110,self._ctx)
            if la_ == 1:
                self.state = 1251
                self.selection()
                self.state = 1252
                self.selection()
                self.state = 1253
                self.selection()
                self.state = 1254
                self.selection()


            self.state = 1263
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==XplorMRParser.L_paren:
                self.state = 1258
                self.selection()
                self.state = 1259
                self.selection()
                self.state = 1260
                self.selection()
                self.state = 1261
                self.selection()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Collapse_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def coll_assign(self):
            return self.getTypedRuleContext(XplorMRParser.Coll_assignContext,0)


        def Scale(self):
            return self.getToken(XplorMRParser.Scale, 0)

        def number_s(self):
            return self.getTypedRuleContext(XplorMRParser.Number_sContext,0)


        def Print(self):
            return self.getToken(XplorMRParser.Print, 0)

        def Reset(self):
            return self.getToken(XplorMRParser.Reset, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_collapse_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCollapse_statement" ):
                listener.enterCollapse_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCollapse_statement" ):
                listener.exitCollapse_statement(self)




    def collapse_statement(self):

        localctx = XplorMRParser.Collapse_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 128, self.RULE_collapse_statement)
        try:
            self.state = 1270
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [XplorMRParser.Assign]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1265
                self.coll_assign()
                pass
            elif token in [XplorMRParser.Scale]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1266
                self.match(XplorMRParser.Scale)
                self.state = 1267
                self.number_s()
                pass
            elif token in [XplorMRParser.Print]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1268
                self.match(XplorMRParser.Print)
                pass
            elif token in [XplorMRParser.Reset]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1269
                self.match(XplorMRParser.Reset)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Coll_assignContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Assign(self):
            return self.getToken(XplorMRParser.Assign, 0)

        def selection(self):
            return self.getTypedRuleContext(XplorMRParser.SelectionContext,0)


        def number(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.NumberContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.NumberContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_coll_assign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColl_assign" ):
                listener.enterColl_assign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColl_assign" ):
                listener.exitColl_assign(self)




    def coll_assign(self):

        localctx = XplorMRParser.Coll_assignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 130, self.RULE_coll_assign)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1272
            self.match(XplorMRParser.Assign)
            self.state = 1273
            self.selection()
            self.state = 1274
            self.number()
            self.state = 1275
            self.number()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Diffusion_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def dani_assign(self):
            return self.getTypedRuleContext(XplorMRParser.Dani_assignContext,0)


        def Classification(self):
            return self.getToken(XplorMRParser.Classification, 0)

        def Simple_name(self):
            return self.getToken(XplorMRParser.Simple_name, 0)

        def Coefficients(self):
            return self.getToken(XplorMRParser.Coefficients, 0)

        def number_s(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Number_sContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Number_sContext,i)


        def ForceConstant(self):
            return self.getToken(XplorMRParser.ForceConstant, 0)

        def Nrestraints(self):
            return self.getToken(XplorMRParser.Nrestraints, 0)

        def Integer(self):
            return self.getToken(XplorMRParser.Integer, 0)

        def Potential(self):
            return self.getToken(XplorMRParser.Potential, 0)

        def Potential_types(self):
            return self.getToken(XplorMRParser.Potential_types, 0)

        def Print(self):
            return self.getToken(XplorMRParser.Print, 0)

        def Threshold(self):
            return self.getToken(XplorMRParser.Threshold, 0)

        def Reset(self):
            return self.getToken(XplorMRParser.Reset, 0)

        def Type(self):
            return self.getToken(XplorMRParser.Type, 0)

        def Rdc_or_Diff_anis_types(self):
            return self.getToken(XplorMRParser.Rdc_or_Diff_anis_types, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_diffusion_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDiffusion_statement" ):
                listener.enterDiffusion_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDiffusion_statement" ):
                listener.exitDiffusion_statement(self)




    def diffusion_statement(self):

        localctx = XplorMRParser.Diffusion_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 132, self.RULE_diffusion_statement)
        try:
            self.state = 1299
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [XplorMRParser.Assign]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1277
                self.dani_assign()
                pass
            elif token in [XplorMRParser.Classification]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1278
                self.match(XplorMRParser.Classification)
                self.state = 1279
                self.match(XplorMRParser.Simple_name)
                pass
            elif token in [XplorMRParser.Coefficients]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1280
                self.match(XplorMRParser.Coefficients)
                self.state = 1281
                self.number_s()
                self.state = 1282
                self.number_s()
                self.state = 1283
                self.number_s()
                self.state = 1284
                self.number_s()
                self.state = 1285
                self.number_s()
                pass
            elif token in [XplorMRParser.ForceConstant]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1287
                self.match(XplorMRParser.ForceConstant)
                self.state = 1288
                self.number_s()
                pass
            elif token in [XplorMRParser.Nrestraints]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1289
                self.match(XplorMRParser.Nrestraints)
                self.state = 1290
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.Potential]:
                self.enterOuterAlt(localctx, 6)
                self.state = 1291
                self.match(XplorMRParser.Potential)
                self.state = 1292
                self.match(XplorMRParser.Potential_types)
                pass
            elif token in [XplorMRParser.Print]:
                self.enterOuterAlt(localctx, 7)
                self.state = 1293
                self.match(XplorMRParser.Print)
                self.state = 1294
                self.match(XplorMRParser.Threshold)
                self.state = 1295
                self.number_s()
                pass
            elif token in [XplorMRParser.Reset]:
                self.enterOuterAlt(localctx, 8)
                self.state = 1296
                self.match(XplorMRParser.Reset)
                pass
            elif token in [XplorMRParser.Type]:
                self.enterOuterAlt(localctx, 9)
                self.state = 1297
                self.match(XplorMRParser.Type)
                self.state = 1298
                self.match(XplorMRParser.Rdc_or_Diff_anis_types)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Dani_assignContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Assign(self):
            return self.getToken(XplorMRParser.Assign, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.SelectionContext,i)


        def number(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.NumberContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.NumberContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_dani_assign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDani_assign" ):
                listener.enterDani_assign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDani_assign" ):
                listener.exitDani_assign(self)




    def dani_assign(self):

        localctx = XplorMRParser.Dani_assignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 134, self.RULE_dani_assign)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1301
            self.match(XplorMRParser.Assign)
            self.state = 1302
            self.selection()
            self.state = 1303
            self.selection()
            self.state = 1304
            self.selection()
            self.state = 1305
            self.selection()
            self.state = 1306
            self.selection()
            self.state = 1307
            self.selection()
            self.state = 1308
            self.number()
            self.state = 1309
            self.number()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Orientation_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def orie_assign(self):
            return self.getTypedRuleContext(XplorMRParser.Orie_assignContext,0)


        def Classification(self):
            return self.getToken(XplorMRParser.Classification, 0)

        def Simple_name(self):
            return self.getToken(XplorMRParser.Simple_name, 0)

        def Cutoff(self):
            return self.getToken(XplorMRParser.Cutoff, 0)

        def number_s(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Number_sContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Number_sContext,i)


        def Height(self):
            return self.getToken(XplorMRParser.Height, 0)

        def ForceConstant(self):
            return self.getToken(XplorMRParser.ForceConstant, 0)

        def Gaussian(self):
            return self.getToken(XplorMRParser.Gaussian, 0)

        def MaxGaussians(self):
            return self.getToken(XplorMRParser.MaxGaussians, 0)

        def Integer(self):
            return self.getToken(XplorMRParser.Integer, 0)

        def NewGaussian(self):
            return self.getToken(XplorMRParser.NewGaussian, 0)

        def Nrestraints(self):
            return self.getToken(XplorMRParser.Nrestraints, 0)

        def Print(self):
            return self.getToken(XplorMRParser.Print, 0)

        def Threshold(self):
            return self.getToken(XplorMRParser.Threshold, 0)

        def All(self):
            return self.getToken(XplorMRParser.All, 0)

        def Quartic(self):
            return self.getToken(XplorMRParser.Quartic, 0)

        def Reset(self):
            return self.getToken(XplorMRParser.Reset, 0)

        def Residue(self):
            return self.getToken(XplorMRParser.Residue, 0)

        def Size(self):
            return self.getToken(XplorMRParser.Size, 0)

        def Zero(self):
            return self.getToken(XplorMRParser.Zero, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_orientation_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOrientation_statement" ):
                listener.enterOrientation_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOrientation_statement" ):
                listener.exitOrientation_statement(self)




    def orientation_statement(self):

        localctx = XplorMRParser.Orientation_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 136, self.RULE_orientation_statement)
        try:
            self.state = 1368
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [XplorMRParser.Assign]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1311
                self.orie_assign()
                pass
            elif token in [XplorMRParser.Classification]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1312
                self.match(XplorMRParser.Classification)
                self.state = 1313
                self.match(XplorMRParser.Simple_name)
                pass
            elif token in [XplorMRParser.Cutoff]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1314
                self.match(XplorMRParser.Cutoff)
                self.state = 1315
                self.number_s()
                pass
            elif token in [XplorMRParser.Height]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1316
                self.match(XplorMRParser.Height)
                self.state = 1317
                self.number_s()
                pass
            elif token in [XplorMRParser.ForceConstant]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1318
                self.match(XplorMRParser.ForceConstant)
                self.state = 1319
                self.number_s()
                pass
            elif token in [XplorMRParser.Gaussian]:
                self.enterOuterAlt(localctx, 6)
                self.state = 1320
                self.match(XplorMRParser.Gaussian)
                self.state = 1321
                self.number_s()
                self.state = 1322
                self.number_s()
                self.state = 1323
                self.number_s()
                self.state = 1324
                self.number_s()
                self.state = 1325
                self.number_s()
                self.state = 1326
                self.number_s()
                self.state = 1327
                self.number_s()
                pass
            elif token in [XplorMRParser.MaxGaussians]:
                self.enterOuterAlt(localctx, 7)
                self.state = 1329
                self.match(XplorMRParser.MaxGaussians)
                self.state = 1330
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.NewGaussian]:
                self.enterOuterAlt(localctx, 8)
                self.state = 1331
                self.match(XplorMRParser.NewGaussian)
                self.state = 1332
                self.number_s()
                self.state = 1333
                self.number_s()
                self.state = 1334
                self.number_s()
                self.state = 1335
                self.number_s()
                self.state = 1336
                self.number_s()
                self.state = 1337
                self.number_s()
                self.state = 1338
                self.number_s()
                self.state = 1339
                self.number_s()
                pass
            elif token in [XplorMRParser.Nrestraints]:
                self.enterOuterAlt(localctx, 9)
                self.state = 1341
                self.match(XplorMRParser.Nrestraints)
                self.state = 1342
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.Print]:
                self.enterOuterAlt(localctx, 10)
                self.state = 1343
                self.match(XplorMRParser.Print)
                self.state = 1344
                self.match(XplorMRParser.Threshold)
                self.state = 1345
                self.number_s()
                self.state = 1349
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [XplorMRParser.All]:
                    self.state = 1346
                    self.match(XplorMRParser.All)
                    pass
                elif token in [XplorMRParser.Classification]:
                    self.state = 1347
                    self.match(XplorMRParser.Classification)
                    self.state = 1348
                    self.match(XplorMRParser.Simple_name)
                    pass
                else:
                    raise NoViableAltException(self)

                pass
            elif token in [XplorMRParser.Quartic]:
                self.enterOuterAlt(localctx, 11)
                self.state = 1351
                self.match(XplorMRParser.Quartic)
                self.state = 1352
                self.number_s()
                self.state = 1353
                self.number_s()
                self.state = 1354
                self.number_s()
                self.state = 1355
                self.number_s()
                self.state = 1356
                self.number_s()
                self.state = 1357
                self.number_s()
                self.state = 1358
                self.number_s()
                pass
            elif token in [XplorMRParser.Reset]:
                self.enterOuterAlt(localctx, 12)
                self.state = 1360
                self.match(XplorMRParser.Reset)
                pass
            elif token in [XplorMRParser.Residue]:
                self.enterOuterAlt(localctx, 13)
                self.state = 1361
                self.match(XplorMRParser.Residue)
                self.state = 1362
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.Size]:
                self.enterOuterAlt(localctx, 14)
                self.state = 1363
                self.match(XplorMRParser.Size)
                self.state = 1364
                self.number_s()
                self.state = 1365
                self.number_s()
                pass
            elif token in [XplorMRParser.Zero]:
                self.enterOuterAlt(localctx, 15)
                self.state = 1367
                self.match(XplorMRParser.Zero)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Orie_assignContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Assign(self):
            return self.getToken(XplorMRParser.Assign, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.SelectionContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_orie_assign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOrie_assign" ):
                listener.enterOrie_assign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOrie_assign" ):
                listener.exitOrie_assign(self)




    def orie_assign(self):

        localctx = XplorMRParser.Orie_assignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 138, self.RULE_orie_assign)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1370
            self.match(XplorMRParser.Assign)
            self.state = 1371
            self.selection()
            self.state = 1372
            self.selection()
            self.state = 1373
            self.selection()
            self.state = 1374
            self.selection()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Csa_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def csa_assign(self):
            return self.getTypedRuleContext(XplorMRParser.Csa_assignContext,0)


        def Classification(self):
            return self.getToken(XplorMRParser.Classification, 0)

        def Simple_name(self):
            return self.getToken(XplorMRParser.Simple_name, 0)

        def Scale(self):
            return self.getToken(XplorMRParser.Scale, 0)

        def number_s(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Number_sContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Number_sContext,i)


        def Type(self):
            return self.getToken(XplorMRParser.Type, 0)

        def Csa_types(self):
            return self.getToken(XplorMRParser.Csa_types, 0)

        def Coefficients(self):
            return self.getToken(XplorMRParser.Coefficients, 0)

        def Sigma(self):
            return self.getToken(XplorMRParser.Sigma, 0)

        def ForceConstant(self):
            return self.getToken(XplorMRParser.ForceConstant, 0)

        def Nrestraints(self):
            return self.getToken(XplorMRParser.Nrestraints, 0)

        def Integer(self):
            return self.getToken(XplorMRParser.Integer, 0)

        def Potential(self):
            return self.getToken(XplorMRParser.Potential, 0)

        def Potential_types(self):
            return self.getToken(XplorMRParser.Potential_types, 0)

        def Print(self):
            return self.getToken(XplorMRParser.Print, 0)

        def Threshold(self):
            return self.getToken(XplorMRParser.Threshold, 0)

        def Reset(self):
            return self.getToken(XplorMRParser.Reset, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_csa_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCsa_statement" ):
                listener.enterCsa_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCsa_statement" ):
                listener.exitCsa_statement(self)




    def csa_statement(self):

        localctx = XplorMRParser.Csa_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 140, self.RULE_csa_statement)
        try:
            self.state = 1403
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [XplorMRParser.Assign]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1376
                self.csa_assign()
                pass
            elif token in [XplorMRParser.Classification]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1377
                self.match(XplorMRParser.Classification)
                self.state = 1378
                self.match(XplorMRParser.Simple_name)
                pass
            elif token in [XplorMRParser.Scale]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1379
                self.match(XplorMRParser.Scale)
                self.state = 1380
                self.number_s()
                pass
            elif token in [XplorMRParser.Type]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1381
                self.match(XplorMRParser.Type)
                self.state = 1382
                self.match(XplorMRParser.Csa_types)
                pass
            elif token in [XplorMRParser.Coefficients]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1383
                self.match(XplorMRParser.Coefficients)
                self.state = 1384
                self.number_s()
                self.state = 1385
                self.number_s()
                self.state = 1386
                self.number_s()
                pass
            elif token in [XplorMRParser.Sigma]:
                self.enterOuterAlt(localctx, 6)
                self.state = 1388
                self.match(XplorMRParser.Sigma)
                self.state = 1389
                self.number_s()
                self.state = 1390
                self.number_s()
                self.state = 1391
                self.number_s()
                pass
            elif token in [XplorMRParser.ForceConstant]:
                self.enterOuterAlt(localctx, 7)
                self.state = 1393
                self.match(XplorMRParser.ForceConstant)
                self.state = 1394
                self.number_s()
                pass
            elif token in [XplorMRParser.Nrestraints]:
                self.enterOuterAlt(localctx, 8)
                self.state = 1395
                self.match(XplorMRParser.Nrestraints)
                self.state = 1396
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.Potential]:
                self.enterOuterAlt(localctx, 9)
                self.state = 1397
                self.match(XplorMRParser.Potential)
                self.state = 1398
                self.match(XplorMRParser.Potential_types)
                pass
            elif token in [XplorMRParser.Print]:
                self.enterOuterAlt(localctx, 10)
                self.state = 1399
                self.match(XplorMRParser.Print)
                self.state = 1400
                self.match(XplorMRParser.Threshold)
                self.state = 1401
                self.number_s()
                pass
            elif token in [XplorMRParser.Reset]:
                self.enterOuterAlt(localctx, 11)
                self.state = 1402
                self.match(XplorMRParser.Reset)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Csa_assignContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Assign(self):
            return self.getToken(XplorMRParser.Assign, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.SelectionContext,i)


        def number(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.NumberContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.NumberContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_csa_assign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCsa_assign" ):
                listener.enterCsa_assign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCsa_assign" ):
                listener.exitCsa_assign(self)




    def csa_assign(self):

        localctx = XplorMRParser.Csa_assignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 142, self.RULE_csa_assign)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1405
            self.match(XplorMRParser.Assign)
            self.state = 1406
            self.selection()
            self.state = 1407
            self.selection()
            self.state = 1408
            self.selection()
            self.state = 1409
            self.selection()
            self.state = 1410
            self.selection()
            self.state = 1411
            self.selection()
            self.state = 1412
            self.selection()
            self.state = 1413
            self.number()
            self.state = 1414
            self.number()
            self.state = 1415
            self.number()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pcsa_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def csa_assign(self):
            return self.getTypedRuleContext(XplorMRParser.Csa_assignContext,0)


        def Classification(self):
            return self.getToken(XplorMRParser.Classification, 0)

        def Simple_name(self):
            return self.getToken(XplorMRParser.Simple_name, 0)

        def Scale(self):
            return self.getToken(XplorMRParser.Scale, 0)

        def number_s(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Number_sContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Number_sContext,i)


        def Coefficients(self):
            return self.getToken(XplorMRParser.Coefficients, 0)

        def Sigma(self):
            return self.getToken(XplorMRParser.Sigma, 0)

        def ForceConstant(self):
            return self.getToken(XplorMRParser.ForceConstant, 0)

        def Nrestraints(self):
            return self.getToken(XplorMRParser.Nrestraints, 0)

        def Integer(self):
            return self.getToken(XplorMRParser.Integer, 0)

        def Potential(self):
            return self.getToken(XplorMRParser.Potential, 0)

        def Potential_types(self):
            return self.getToken(XplorMRParser.Potential_types, 0)

        def Print(self):
            return self.getToken(XplorMRParser.Print, 0)

        def Threshold(self):
            return self.getToken(XplorMRParser.Threshold, 0)

        def Reset(self):
            return self.getToken(XplorMRParser.Reset, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_pcsa_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPcsa_statement" ):
                listener.enterPcsa_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPcsa_statement" ):
                listener.exitPcsa_statement(self)




    def pcsa_statement(self):

        localctx = XplorMRParser.Pcsa_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 144, self.RULE_pcsa_statement)
        try:
            self.state = 1443
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [XplorMRParser.Assign]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1417
                self.csa_assign()
                pass
            elif token in [XplorMRParser.Classification]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1418
                self.match(XplorMRParser.Classification)
                self.state = 1419
                self.match(XplorMRParser.Simple_name)
                pass
            elif token in [XplorMRParser.Scale]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1420
                self.match(XplorMRParser.Scale)
                self.state = 1421
                self.number_s()
                pass
            elif token in [XplorMRParser.Coefficients]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1422
                self.match(XplorMRParser.Coefficients)
                self.state = 1423
                self.number_s()
                self.state = 1424
                self.number_s()
                self.state = 1425
                self.number_s()
                pass
            elif token in [XplorMRParser.Sigma]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1427
                self.match(XplorMRParser.Sigma)
                self.state = 1428
                self.number_s()
                self.state = 1429
                self.number_s()
                self.state = 1430
                self.number_s()
                self.state = 1431
                self.number_s()
                pass
            elif token in [XplorMRParser.ForceConstant]:
                self.enterOuterAlt(localctx, 6)
                self.state = 1433
                self.match(XplorMRParser.ForceConstant)
                self.state = 1434
                self.number_s()
                pass
            elif token in [XplorMRParser.Nrestraints]:
                self.enterOuterAlt(localctx, 7)
                self.state = 1435
                self.match(XplorMRParser.Nrestraints)
                self.state = 1436
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.Potential]:
                self.enterOuterAlt(localctx, 8)
                self.state = 1437
                self.match(XplorMRParser.Potential)
                self.state = 1438
                self.match(XplorMRParser.Potential_types)
                pass
            elif token in [XplorMRParser.Print]:
                self.enterOuterAlt(localctx, 9)
                self.state = 1439
                self.match(XplorMRParser.Print)
                self.state = 1440
                self.match(XplorMRParser.Threshold)
                self.state = 1441
                self.number_s()
                pass
            elif token in [XplorMRParser.Reset]:
                self.enterOuterAlt(localctx, 10)
                self.state = 1442
                self.match(XplorMRParser.Reset)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class One_bond_coupling_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def one_bond_assign(self):
            return self.getTypedRuleContext(XplorMRParser.One_bond_assignContext,0)


        def Classification(self):
            return self.getToken(XplorMRParser.Classification, 0)

        def Simple_name(self):
            return self.getToken(XplorMRParser.Simple_name, 0)

        def Coefficients(self):
            return self.getToken(XplorMRParser.Coefficients, 0)

        def number_s(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Number_sContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Number_sContext,i)


        def ForceConstant(self):
            return self.getToken(XplorMRParser.ForceConstant, 0)

        def Nrestraints(self):
            return self.getToken(XplorMRParser.Nrestraints, 0)

        def Integer(self):
            return self.getToken(XplorMRParser.Integer, 0)

        def Potential(self):
            return self.getToken(XplorMRParser.Potential, 0)

        def Potential_types(self):
            return self.getToken(XplorMRParser.Potential_types, 0)

        def Print(self):
            return self.getToken(XplorMRParser.Print, 0)

        def Threshold(self):
            return self.getToken(XplorMRParser.Threshold, 0)

        def Reset(self):
            return self.getToken(XplorMRParser.Reset, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_one_bond_coupling_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOne_bond_coupling_statement" ):
                listener.enterOne_bond_coupling_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOne_bond_coupling_statement" ):
                listener.exitOne_bond_coupling_statement(self)




    def one_bond_coupling_statement(self):

        localctx = XplorMRParser.One_bond_coupling_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 146, self.RULE_one_bond_coupling_statement)
        try:
            self.state = 1467
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [XplorMRParser.Assign]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1445
                self.one_bond_assign()
                pass
            elif token in [XplorMRParser.Classification]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1446
                self.match(XplorMRParser.Classification)
                self.state = 1447
                self.match(XplorMRParser.Simple_name)
                pass
            elif token in [XplorMRParser.Coefficients]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1448
                self.match(XplorMRParser.Coefficients)
                self.state = 1449
                self.number_s()
                self.state = 1450
                self.number_s()
                self.state = 1451
                self.number_s()
                self.state = 1452
                self.number_s()
                self.state = 1453
                self.number_s()
                self.state = 1454
                self.number_s()
                self.state = 1455
                self.number_s()
                pass
            elif token in [XplorMRParser.ForceConstant]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1457
                self.match(XplorMRParser.ForceConstant)
                self.state = 1458
                self.number_s()
                pass
            elif token in [XplorMRParser.Nrestraints]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1459
                self.match(XplorMRParser.Nrestraints)
                self.state = 1460
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.Potential]:
                self.enterOuterAlt(localctx, 6)
                self.state = 1461
                self.match(XplorMRParser.Potential)
                self.state = 1462
                self.match(XplorMRParser.Potential_types)
                pass
            elif token in [XplorMRParser.Print]:
                self.enterOuterAlt(localctx, 7)
                self.state = 1463
                self.match(XplorMRParser.Print)
                self.state = 1464
                self.match(XplorMRParser.Threshold)
                self.state = 1465
                self.number_s()
                pass
            elif token in [XplorMRParser.Reset]:
                self.enterOuterAlt(localctx, 8)
                self.state = 1466
                self.match(XplorMRParser.Reset)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class One_bond_assignContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Assign(self):
            return self.getToken(XplorMRParser.Assign, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.SelectionContext,i)


        def number(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.NumberContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.NumberContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_one_bond_assign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOne_bond_assign" ):
                listener.enterOne_bond_assign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOne_bond_assign" ):
                listener.exitOne_bond_assign(self)




    def one_bond_assign(self):

        localctx = XplorMRParser.One_bond_assignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 148, self.RULE_one_bond_assign)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1469
            self.match(XplorMRParser.Assign)
            self.state = 1470
            self.selection()
            self.state = 1471
            self.selection()
            self.state = 1472
            self.selection()
            self.state = 1473
            self.selection()
            self.state = 1474
            self.selection()
            self.state = 1475
            self.selection()
            self.state = 1476
            self.selection()
            self.state = 1477
            self.selection()
            self.state = 1478
            self.number()
            self.state = 1479
            self.number()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Angle_db_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def angle_db_assign(self):
            return self.getTypedRuleContext(XplorMRParser.Angle_db_assignContext,0)


        def Classification(self):
            return self.getToken(XplorMRParser.Classification, 0)

        def Simple_name(self):
            return self.getToken(XplorMRParser.Simple_name, 0)

        def DerivFlag(self):
            return self.getToken(XplorMRParser.DerivFlag, 0)

        def Expectation(self):
            return self.getToken(XplorMRParser.Expectation, 0)

        def Integer(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Integer)
            else:
                return self.getToken(XplorMRParser.Integer, i)

        def number_s(self):
            return self.getTypedRuleContext(XplorMRParser.Number_sContext,0)


        def Error(self):
            return self.getToken(XplorMRParser.Error, 0)

        def ForceConstant(self):
            return self.getToken(XplorMRParser.ForceConstant, 0)

        def Nrestraints(self):
            return self.getToken(XplorMRParser.Nrestraints, 0)

        def Potential(self):
            return self.getToken(XplorMRParser.Potential, 0)

        def Potential_types(self):
            return self.getToken(XplorMRParser.Potential_types, 0)

        def Print(self):
            return self.getToken(XplorMRParser.Print, 0)

        def Threshold(self):
            return self.getToken(XplorMRParser.Threshold, 0)

        def All(self):
            return self.getToken(XplorMRParser.All, 0)

        def Reset(self):
            return self.getToken(XplorMRParser.Reset, 0)

        def Size(self):
            return self.getToken(XplorMRParser.Size, 0)

        def Angle_or_Dihedral(self):
            return self.getToken(XplorMRParser.Angle_or_Dihedral, 0)

        def Zero(self):
            return self.getToken(XplorMRParser.Zero, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_angle_db_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAngle_db_statement" ):
                listener.enterAngle_db_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAngle_db_statement" ):
                listener.exitAngle_db_statement(self)




    def angle_db_statement(self):

        localctx = XplorMRParser.Angle_db_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 150, self.RULE_angle_db_statement)
        try:
            self.state = 1512
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [XplorMRParser.Assign]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1481
                self.angle_db_assign()
                pass
            elif token in [XplorMRParser.Classification]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1482
                self.match(XplorMRParser.Classification)
                self.state = 1483
                self.match(XplorMRParser.Simple_name)
                pass
            elif token in [XplorMRParser.DerivFlag]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1484
                self.match(XplorMRParser.DerivFlag)
                self.state = 1485
                self.match(XplorMRParser.Simple_name)
                pass
            elif token in [XplorMRParser.Expectation]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1486
                self.match(XplorMRParser.Expectation)
                self.state = 1487
                self.match(XplorMRParser.Integer)
                self.state = 1488
                self.match(XplorMRParser.Integer)
                self.state = 1489
                self.number_s()
                pass
            elif token in [XplorMRParser.Error]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1490
                self.match(XplorMRParser.Error)
                self.state = 1491
                self.number_s()
                pass
            elif token in [XplorMRParser.ForceConstant]:
                self.enterOuterAlt(localctx, 6)
                self.state = 1492
                self.match(XplorMRParser.ForceConstant)
                self.state = 1493
                self.number_s()
                pass
            elif token in [XplorMRParser.Nrestraints]:
                self.enterOuterAlt(localctx, 7)
                self.state = 1494
                self.match(XplorMRParser.Nrestraints)
                self.state = 1495
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.Potential]:
                self.enterOuterAlt(localctx, 8)
                self.state = 1496
                self.match(XplorMRParser.Potential)
                self.state = 1497
                self.match(XplorMRParser.Potential_types)
                pass
            elif token in [XplorMRParser.Print]:
                self.enterOuterAlt(localctx, 9)
                self.state = 1498
                self.match(XplorMRParser.Print)
                self.state = 1499
                self.match(XplorMRParser.Threshold)
                self.state = 1500
                self.number_s()
                self.state = 1504
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [XplorMRParser.All]:
                    self.state = 1501
                    self.match(XplorMRParser.All)
                    pass
                elif token in [XplorMRParser.Classification]:
                    self.state = 1502
                    self.match(XplorMRParser.Classification)
                    self.state = 1503
                    self.match(XplorMRParser.Simple_name)
                    pass
                else:
                    raise NoViableAltException(self)

                pass
            elif token in [XplorMRParser.Reset]:
                self.enterOuterAlt(localctx, 10)
                self.state = 1506
                self.match(XplorMRParser.Reset)
                pass
            elif token in [XplorMRParser.Size]:
                self.enterOuterAlt(localctx, 11)
                self.state = 1507
                self.match(XplorMRParser.Size)
                self.state = 1508
                self.match(XplorMRParser.Angle_or_Dihedral)
                self.state = 1509
                self.match(XplorMRParser.Integer)
                self.state = 1510
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.Zero]:
                self.enterOuterAlt(localctx, 12)
                self.state = 1511
                self.match(XplorMRParser.Zero)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Angle_db_assignContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Assign(self):
            return self.getToken(XplorMRParser.Assign, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.SelectionContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_angle_db_assign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAngle_db_assign" ):
                listener.enterAngle_db_assign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAngle_db_assign" ):
                listener.exitAngle_db_assign(self)




    def angle_db_assign(self):

        localctx = XplorMRParser.Angle_db_assignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 152, self.RULE_angle_db_assign)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1514
            self.match(XplorMRParser.Assign)
            self.state = 1515
            self.selection()
            self.state = 1516
            self.selection()
            self.state = 1517
            self.selection()
            self.state = 1518
            self.selection()
            self.state = 1519
            self.selection()
            self.state = 1520
            self.selection()
            self.state = 1521
            self.selection()
            self.state = 1522
            self.selection()
            self.state = 1523
            self.selection()
            self.state = 1524
            self.selection()
            self.state = 1525
            self.selection()
            self.state = 1527
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==XplorMRParser.L_paren:
                self.state = 1526
                self.selection()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pre_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def pre_assign(self):
            return self.getTypedRuleContext(XplorMRParser.Pre_assignContext,0)


        def Classification(self):
            return self.getToken(XplorMRParser.Classification, 0)

        def Simple_name(self):
            return self.getToken(XplorMRParser.Simple_name, 0)

        def Equ_op(self):
            return self.getToken(XplorMRParser.Equ_op, 0)

        def ForceConstant(self):
            return self.getToken(XplorMRParser.ForceConstant, 0)

        def number_s(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Number_sContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Number_sContext,i)


        def Nrestraints(self):
            return self.getToken(XplorMRParser.Nrestraints, 0)

        def Integer(self):
            return self.getToken(XplorMRParser.Integer, 0)

        def Potential(self):
            return self.getToken(XplorMRParser.Potential, 0)

        def Simple_name_P(self):
            return self.getToken(XplorMRParser.Simple_name_P, 0)

        def Potential_types(self):
            return self.getToken(XplorMRParser.Potential_types, 0)

        def Equ_op_P(self):
            return self.getToken(XplorMRParser.Equ_op_P, 0)

        def Kconst(self):
            return self.getToken(XplorMRParser.Kconst, 0)

        def Omega(self):
            return self.getToken(XplorMRParser.Omega, 0)

        def Tauc(self):
            return self.getToken(XplorMRParser.Tauc, 0)

        def Print(self):
            return self.getToken(XplorMRParser.Print, 0)

        def Threshold(self):
            return self.getToken(XplorMRParser.Threshold, 0)

        def All(self):
            return self.getToken(XplorMRParser.All, 0)

        def Reset(self):
            return self.getToken(XplorMRParser.Reset, 0)

        def Debug(self):
            return self.getToken(XplorMRParser.Debug, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_pre_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPre_statement" ):
                listener.enterPre_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPre_statement" ):
                listener.exitPre_statement(self)




    def pre_statement(self):

        localctx = XplorMRParser.Pre_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 154, self.RULE_pre_statement)
        self._la = 0 # Token type
        try:
            self.state = 1582
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [XplorMRParser.Assign]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1529
                self.pre_assign()
                pass
            elif token in [XplorMRParser.Classification]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1530
                self.match(XplorMRParser.Classification)
                self.state = 1532
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 1531
                    self.match(XplorMRParser.Equ_op)


                self.state = 1534
                self.match(XplorMRParser.Simple_name)
                pass
            elif token in [XplorMRParser.ForceConstant]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1535
                self.match(XplorMRParser.ForceConstant)
                self.state = 1537
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 1536
                    self.match(XplorMRParser.Equ_op)


                self.state = 1539
                self.match(XplorMRParser.Simple_name)
                self.state = 1540
                self.number_s()
                pass
            elif token in [XplorMRParser.Nrestraints]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1541
                self.match(XplorMRParser.Nrestraints)
                self.state = 1543
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 1542
                    self.match(XplorMRParser.Equ_op)


                self.state = 1545
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.Potential]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1546
                self.match(XplorMRParser.Potential)
                self.state = 1548
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op_P:
                    self.state = 1547
                    self.match(XplorMRParser.Equ_op_P)


                self.state = 1550
                self.match(XplorMRParser.Simple_name_P)
                self.state = 1551
                self.match(XplorMRParser.Potential_types)
                pass
            elif token in [XplorMRParser.Kconst]:
                self.enterOuterAlt(localctx, 6)
                self.state = 1552
                self.match(XplorMRParser.Kconst)
                self.state = 1554
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 1553
                    self.match(XplorMRParser.Equ_op)


                self.state = 1556
                self.match(XplorMRParser.Simple_name)
                self.state = 1557
                self.number_s()
                pass
            elif token in [XplorMRParser.Omega]:
                self.enterOuterAlt(localctx, 7)
                self.state = 1558
                self.match(XplorMRParser.Omega)
                self.state = 1560
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 1559
                    self.match(XplorMRParser.Equ_op)


                self.state = 1562
                self.match(XplorMRParser.Simple_name)
                self.state = 1563
                self.number_s()
                pass
            elif token in [XplorMRParser.Tauc]:
                self.enterOuterAlt(localctx, 8)
                self.state = 1564
                self.match(XplorMRParser.Tauc)
                self.state = 1566
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 1565
                    self.match(XplorMRParser.Equ_op)


                self.state = 1568
                self.match(XplorMRParser.Simple_name)
                self.state = 1569
                self.number_s()
                self.state = 1570
                self.number_s()
                pass
            elif token in [XplorMRParser.Print]:
                self.enterOuterAlt(localctx, 9)
                self.state = 1572
                self.match(XplorMRParser.Print)
                self.state = 1573
                self.match(XplorMRParser.Threshold)
                self.state = 1574
                self.number_s()
                self.state = 1578
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [XplorMRParser.All]:
                    self.state = 1575
                    self.match(XplorMRParser.All)
                    pass
                elif token in [XplorMRParser.Classification]:
                    self.state = 1576
                    self.match(XplorMRParser.Classification)
                    self.state = 1577
                    self.match(XplorMRParser.Simple_name)
                    pass
                else:
                    raise NoViableAltException(self)

                pass
            elif token in [XplorMRParser.Reset]:
                self.enterOuterAlt(localctx, 10)
                self.state = 1580
                self.match(XplorMRParser.Reset)
                pass
            elif token in [XplorMRParser.Debug]:
                self.enterOuterAlt(localctx, 11)
                self.state = 1581
                self.match(XplorMRParser.Debug)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pre_assignContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Assign(self):
            return self.getToken(XplorMRParser.Assign, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.SelectionContext,i)


        def number(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.NumberContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.NumberContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_pre_assign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPre_assign" ):
                listener.enterPre_assign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPre_assign" ):
                listener.exitPre_assign(self)




    def pre_assign(self):

        localctx = XplorMRParser.Pre_assignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 156, self.RULE_pre_assign)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1584
            self.match(XplorMRParser.Assign)
            self.state = 1585
            self.selection()
            self.state = 1586
            self.selection()
            self.state = 1587
            self.number()
            self.state = 1588
            self.number()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pcs_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def pcs_assign(self):
            return self.getTypedRuleContext(XplorMRParser.Pcs_assignContext,0)


        def Classification(self):
            return self.getToken(XplorMRParser.Classification, 0)

        def Simple_name(self):
            return self.getToken(XplorMRParser.Simple_name, 0)

        def Tolerance(self):
            return self.getToken(XplorMRParser.Tolerance, 0)

        def Integer(self):
            return self.getToken(XplorMRParser.Integer, 0)

        def Coefficients(self):
            return self.getToken(XplorMRParser.Coefficients, 0)

        def number_s(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Number_sContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Number_sContext,i)


        def ForceConstant(self):
            return self.getToken(XplorMRParser.ForceConstant, 0)

        def Nrestraints(self):
            return self.getToken(XplorMRParser.Nrestraints, 0)

        def Print(self):
            return self.getToken(XplorMRParser.Print, 0)

        def Threshold(self):
            return self.getToken(XplorMRParser.Threshold, 0)

        def All(self):
            return self.getToken(XplorMRParser.All, 0)

        def Reset(self):
            return self.getToken(XplorMRParser.Reset, 0)

        def Save(self):
            return self.getToken(XplorMRParser.Save, 0)

        def Fmed(self):
            return self.getToken(XplorMRParser.Fmed, 0)

        def ErrOn(self):
            return self.getToken(XplorMRParser.ErrOn, 0)

        def ErrOff(self):
            return self.getToken(XplorMRParser.ErrOff, 0)

        def Fon(self):
            return self.getToken(XplorMRParser.Fon, 0)

        def Foff(self):
            return self.getToken(XplorMRParser.Foff, 0)

        def Son(self):
            return self.getToken(XplorMRParser.Son, 0)

        def Soff(self):
            return self.getToken(XplorMRParser.Soff, 0)

        def Frun(self):
            return self.getToken(XplorMRParser.Frun, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_pcs_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPcs_statement" ):
                listener.enterPcs_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPcs_statement" ):
                listener.exitPcs_statement(self)




    def pcs_statement(self):

        localctx = XplorMRParser.Pcs_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 158, self.RULE_pcs_statement)
        try:
            self.state = 1626
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [XplorMRParser.Assign]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1590
                self.pcs_assign()
                pass
            elif token in [XplorMRParser.Classification]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1591
                self.match(XplorMRParser.Classification)
                self.state = 1592
                self.match(XplorMRParser.Simple_name)
                pass
            elif token in [XplorMRParser.Tolerance]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1593
                self.match(XplorMRParser.Tolerance)
                self.state = 1594
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.Coefficients]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1595
                self.match(XplorMRParser.Coefficients)
                self.state = 1596
                self.number_s()
                self.state = 1597
                self.number_s()
                pass
            elif token in [XplorMRParser.ForceConstant]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1599
                self.match(XplorMRParser.ForceConstant)
                self.state = 1600
                self.number_s()
                pass
            elif token in [XplorMRParser.Nrestraints]:
                self.enterOuterAlt(localctx, 6)
                self.state = 1601
                self.match(XplorMRParser.Nrestraints)
                self.state = 1602
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.Print]:
                self.enterOuterAlt(localctx, 7)
                self.state = 1603
                self.match(XplorMRParser.Print)
                self.state = 1604
                self.match(XplorMRParser.Threshold)
                self.state = 1605
                self.number_s()
                self.state = 1609
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [XplorMRParser.All]:
                    self.state = 1606
                    self.match(XplorMRParser.All)
                    pass
                elif token in [XplorMRParser.Classification]:
                    self.state = 1607
                    self.match(XplorMRParser.Classification)
                    self.state = 1608
                    self.match(XplorMRParser.Simple_name)
                    pass
                else:
                    raise NoViableAltException(self)

                pass
            elif token in [XplorMRParser.Reset]:
                self.enterOuterAlt(localctx, 8)
                self.state = 1611
                self.match(XplorMRParser.Reset)
                pass
            elif token in [XplorMRParser.Save]:
                self.enterOuterAlt(localctx, 9)
                self.state = 1612
                self.match(XplorMRParser.Save)
                self.state = 1613
                self.match(XplorMRParser.Simple_name)
                pass
            elif token in [XplorMRParser.Fmed]:
                self.enterOuterAlt(localctx, 10)
                self.state = 1614
                self.match(XplorMRParser.Fmed)
                self.state = 1615
                self.number_s()
                self.state = 1616
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.ErrOn]:
                self.enterOuterAlt(localctx, 11)
                self.state = 1618
                self.match(XplorMRParser.ErrOn)
                pass
            elif token in [XplorMRParser.ErrOff]:
                self.enterOuterAlt(localctx, 12)
                self.state = 1619
                self.match(XplorMRParser.ErrOff)
                pass
            elif token in [XplorMRParser.Fon]:
                self.enterOuterAlt(localctx, 13)
                self.state = 1620
                self.match(XplorMRParser.Fon)
                pass
            elif token in [XplorMRParser.Foff]:
                self.enterOuterAlt(localctx, 14)
                self.state = 1621
                self.match(XplorMRParser.Foff)
                pass
            elif token in [XplorMRParser.Son]:
                self.enterOuterAlt(localctx, 15)
                self.state = 1622
                self.match(XplorMRParser.Son)
                pass
            elif token in [XplorMRParser.Soff]:
                self.enterOuterAlt(localctx, 16)
                self.state = 1623
                self.match(XplorMRParser.Soff)
                pass
            elif token in [XplorMRParser.Frun]:
                self.enterOuterAlt(localctx, 17)
                self.state = 1624
                self.match(XplorMRParser.Frun)
                self.state = 1625
                self.match(XplorMRParser.Integer)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pcs_assignContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Assign(self):
            return self.getToken(XplorMRParser.Assign, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.SelectionContext,i)


        def number(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.NumberContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.NumberContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_pcs_assign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPcs_assign" ):
                listener.enterPcs_assign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPcs_assign" ):
                listener.exitPcs_assign(self)




    def pcs_assign(self):

        localctx = XplorMRParser.Pcs_assignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 160, self.RULE_pcs_assign)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1628
            self.match(XplorMRParser.Assign)
            self.state = 1629
            self.selection()
            self.state = 1630
            self.selection()
            self.state = 1631
            self.selection()
            self.state = 1632
            self.selection()
            self.state = 1633
            self.selection()
            self.state = 1634
            self.number()
            self.state = 1635
            self.number()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Prdc_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def prdc_assign(self):
            return self.getTypedRuleContext(XplorMRParser.Prdc_assignContext,0)


        def Classification(self):
            return self.getToken(XplorMRParser.Classification, 0)

        def Simple_name(self):
            return self.getToken(XplorMRParser.Simple_name, 0)

        def Tolerance(self):
            return self.getToken(XplorMRParser.Tolerance, 0)

        def Integer(self):
            return self.getToken(XplorMRParser.Integer, 0)

        def Coefficients(self):
            return self.getToken(XplorMRParser.Coefficients, 0)

        def number_s(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Number_sContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Number_sContext,i)


        def ForceConstant(self):
            return self.getToken(XplorMRParser.ForceConstant, 0)

        def Nrestraints(self):
            return self.getToken(XplorMRParser.Nrestraints, 0)

        def ErrOn(self):
            return self.getToken(XplorMRParser.ErrOn, 0)

        def ErrOff(self):
            return self.getToken(XplorMRParser.ErrOff, 0)

        def Fmed(self):
            return self.getToken(XplorMRParser.Fmed, 0)

        def Fon(self):
            return self.getToken(XplorMRParser.Fon, 0)

        def Foff(self):
            return self.getToken(XplorMRParser.Foff, 0)

        def Frun(self):
            return self.getToken(XplorMRParser.Frun, 0)

        def Print(self):
            return self.getToken(XplorMRParser.Print, 0)

        def Threshold(self):
            return self.getToken(XplorMRParser.Threshold, 0)

        def Reset(self):
            return self.getToken(XplorMRParser.Reset, 0)

        def Save(self):
            return self.getToken(XplorMRParser.Save, 0)

        def Son(self):
            return self.getToken(XplorMRParser.Son, 0)

        def Soff(self):
            return self.getToken(XplorMRParser.Soff, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_prdc_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrdc_statement" ):
                listener.enterPrdc_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrdc_statement" ):
                listener.exitPrdc_statement(self)




    def prdc_statement(self):

        localctx = XplorMRParser.Prdc_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 162, self.RULE_prdc_statement)
        try:
            self.state = 1663
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [XplorMRParser.Assign]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1637
                self.prdc_assign()
                pass
            elif token in [XplorMRParser.Classification]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1638
                self.match(XplorMRParser.Classification)
                self.state = 1639
                self.match(XplorMRParser.Simple_name)
                pass
            elif token in [XplorMRParser.Tolerance]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1640
                self.match(XplorMRParser.Tolerance)
                self.state = 1641
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.Coefficients]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1642
                self.match(XplorMRParser.Coefficients)
                self.state = 1643
                self.number_s()
                self.state = 1644
                self.number_s()
                pass
            elif token in [XplorMRParser.ForceConstant]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1646
                self.match(XplorMRParser.ForceConstant)
                self.state = 1647
                self.number_s()
                pass
            elif token in [XplorMRParser.Nrestraints]:
                self.enterOuterAlt(localctx, 6)
                self.state = 1648
                self.match(XplorMRParser.Nrestraints)
                self.state = 1649
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.ErrOn]:
                self.enterOuterAlt(localctx, 7)
                self.state = 1650
                self.match(XplorMRParser.ErrOn)
                pass
            elif token in [XplorMRParser.ErrOff]:
                self.enterOuterAlt(localctx, 8)
                self.state = 1651
                self.match(XplorMRParser.ErrOff)
                pass
            elif token in [XplorMRParser.Fmed]:
                self.enterOuterAlt(localctx, 9)
                self.state = 1652
                self.match(XplorMRParser.Fmed)
                pass
            elif token in [XplorMRParser.Fon]:
                self.enterOuterAlt(localctx, 10)
                self.state = 1653
                self.match(XplorMRParser.Fon)
                pass
            elif token in [XplorMRParser.Foff]:
                self.enterOuterAlt(localctx, 11)
                self.state = 1654
                self.match(XplorMRParser.Foff)
                pass
            elif token in [XplorMRParser.Frun]:
                self.enterOuterAlt(localctx, 12)
                self.state = 1655
                self.match(XplorMRParser.Frun)
                pass
            elif token in [XplorMRParser.Print]:
                self.enterOuterAlt(localctx, 13)
                self.state = 1656
                self.match(XplorMRParser.Print)
                self.state = 1657
                self.match(XplorMRParser.Threshold)
                pass
            elif token in [XplorMRParser.Reset]:
                self.enterOuterAlt(localctx, 14)
                self.state = 1658
                self.match(XplorMRParser.Reset)
                pass
            elif token in [XplorMRParser.Save]:
                self.enterOuterAlt(localctx, 15)
                self.state = 1659
                self.match(XplorMRParser.Save)
                self.state = 1660
                self.match(XplorMRParser.Simple_name)
                pass
            elif token in [XplorMRParser.Son]:
                self.enterOuterAlt(localctx, 16)
                self.state = 1661
                self.match(XplorMRParser.Son)
                pass
            elif token in [XplorMRParser.Soff]:
                self.enterOuterAlt(localctx, 17)
                self.state = 1662
                self.match(XplorMRParser.Soff)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Prdc_assignContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Assign(self):
            return self.getToken(XplorMRParser.Assign, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.SelectionContext,i)


        def number(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.NumberContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.NumberContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_prdc_assign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrdc_assign" ):
                listener.enterPrdc_assign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrdc_assign" ):
                listener.exitPrdc_assign(self)




    def prdc_assign(self):

        localctx = XplorMRParser.Prdc_assignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 164, self.RULE_prdc_assign)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1665
            self.match(XplorMRParser.Assign)
            self.state = 1666
            self.selection()
            self.state = 1667
            self.selection()
            self.state = 1668
            self.selection()
            self.state = 1669
            self.selection()
            self.state = 1670
            self.selection()
            self.state = 1671
            self.selection()
            self.state = 1672
            self.number()
            self.state = 1673
            self.number()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Porientation_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def porientation_assign(self):
            return self.getTypedRuleContext(XplorMRParser.Porientation_assignContext,0)


        def Classification(self):
            return self.getToken(XplorMRParser.Classification, 0)

        def Simple_name(self):
            return self.getToken(XplorMRParser.Simple_name, 0)

        def ForceConstant(self):
            return self.getToken(XplorMRParser.ForceConstant, 0)

        def number_s(self):
            return self.getTypedRuleContext(XplorMRParser.Number_sContext,0)


        def Nrestraints(self):
            return self.getToken(XplorMRParser.Nrestraints, 0)

        def Integer(self):
            return self.getToken(XplorMRParser.Integer, 0)

        def Print(self):
            return self.getToken(XplorMRParser.Print, 0)

        def Threshold(self):
            return self.getToken(XplorMRParser.Threshold, 0)

        def Reset(self):
            return self.getToken(XplorMRParser.Reset, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_porientation_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPorientation_statement" ):
                listener.enterPorientation_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPorientation_statement" ):
                listener.exitPorientation_statement(self)




    def porientation_statement(self):

        localctx = XplorMRParser.Porientation_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 166, self.RULE_porientation_statement)
        try:
            self.state = 1686
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [XplorMRParser.Assign]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1675
                self.porientation_assign()
                pass
            elif token in [XplorMRParser.Classification]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1676
                self.match(XplorMRParser.Classification)
                self.state = 1677
                self.match(XplorMRParser.Simple_name)
                pass
            elif token in [XplorMRParser.ForceConstant]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1678
                self.match(XplorMRParser.ForceConstant)
                self.state = 1679
                self.number_s()
                pass
            elif token in [XplorMRParser.Nrestraints]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1680
                self.match(XplorMRParser.Nrestraints)
                self.state = 1681
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.Print]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1682
                self.match(XplorMRParser.Print)
                self.state = 1683
                self.match(XplorMRParser.Threshold)
                self.state = 1684
                self.number_s()
                pass
            elif token in [XplorMRParser.Reset]:
                self.enterOuterAlt(localctx, 6)
                self.state = 1685
                self.match(XplorMRParser.Reset)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Porientation_assignContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Assign(self):
            return self.getToken(XplorMRParser.Assign, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.SelectionContext,i)


        def number(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.NumberContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.NumberContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_porientation_assign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPorientation_assign" ):
                listener.enterPorientation_assign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPorientation_assign" ):
                listener.exitPorientation_assign(self)




    def porientation_assign(self):

        localctx = XplorMRParser.Porientation_assignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 168, self.RULE_porientation_assign)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1688
            self.match(XplorMRParser.Assign)
            self.state = 1689
            self.selection()
            self.state = 1690
            self.selection()
            self.state = 1691
            self.number()
            self.state = 1692
            self.number()
            self.state = 1693
            self.number()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pccr_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def pccr_assign(self):
            return self.getTypedRuleContext(XplorMRParser.Pccr_assignContext,0)


        def Classification(self):
            return self.getToken(XplorMRParser.Classification, 0)

        def Simple_name(self):
            return self.getToken(XplorMRParser.Simple_name, 0)

        def Weip(self):
            return self.getToken(XplorMRParser.Weip, 0)

        def Integer(self):
            return self.getToken(XplorMRParser.Integer, 0)

        def Coefficients(self):
            return self.getToken(XplorMRParser.Coefficients, 0)

        def number_s(self):
            return self.getTypedRuleContext(XplorMRParser.Number_sContext,0)


        def ForceConstant(self):
            return self.getToken(XplorMRParser.ForceConstant, 0)

        def Nrestraints(self):
            return self.getToken(XplorMRParser.Nrestraints, 0)

        def Print(self):
            return self.getToken(XplorMRParser.Print, 0)

        def Threshold(self):
            return self.getToken(XplorMRParser.Threshold, 0)

        def Reset(self):
            return self.getToken(XplorMRParser.Reset, 0)

        def Frun(self):
            return self.getToken(XplorMRParser.Frun, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_pccr_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPccr_statement" ):
                listener.enterPccr_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPccr_statement" ):
                listener.exitPccr_statement(self)




    def pccr_statement(self):

        localctx = XplorMRParser.Pccr_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 170, self.RULE_pccr_statement)
        try:
            self.state = 1712
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [XplorMRParser.Assign]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1695
                self.pccr_assign()
                pass
            elif token in [XplorMRParser.Classification]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1696
                self.match(XplorMRParser.Classification)
                self.state = 1697
                self.match(XplorMRParser.Simple_name)
                pass
            elif token in [XplorMRParser.Weip]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1698
                self.match(XplorMRParser.Weip)
                self.state = 1699
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.Coefficients]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1700
                self.match(XplorMRParser.Coefficients)
                self.state = 1701
                self.number_s()
                pass
            elif token in [XplorMRParser.ForceConstant]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1702
                self.match(XplorMRParser.ForceConstant)
                self.state = 1703
                self.number_s()
                pass
            elif token in [XplorMRParser.Nrestraints]:
                self.enterOuterAlt(localctx, 6)
                self.state = 1704
                self.match(XplorMRParser.Nrestraints)
                self.state = 1705
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.Print]:
                self.enterOuterAlt(localctx, 7)
                self.state = 1706
                self.match(XplorMRParser.Print)
                self.state = 1707
                self.match(XplorMRParser.Threshold)
                self.state = 1708
                self.number_s()
                pass
            elif token in [XplorMRParser.Reset]:
                self.enterOuterAlt(localctx, 8)
                self.state = 1709
                self.match(XplorMRParser.Reset)
                pass
            elif token in [XplorMRParser.Frun]:
                self.enterOuterAlt(localctx, 9)
                self.state = 1710
                self.match(XplorMRParser.Frun)
                self.state = 1711
                self.match(XplorMRParser.Integer)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pccr_assignContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Assign(self):
            return self.getToken(XplorMRParser.Assign, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.SelectionContext,i)


        def number(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.NumberContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.NumberContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_pccr_assign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPccr_assign" ):
                listener.enterPccr_assign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPccr_assign" ):
                listener.exitPccr_assign(self)




    def pccr_assign(self):

        localctx = XplorMRParser.Pccr_assignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 172, self.RULE_pccr_assign)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1714
            self.match(XplorMRParser.Assign)
            self.state = 1715
            self.selection()
            self.state = 1716
            self.selection()
            self.state = 1717
            self.selection()
            self.state = 1718
            self.number()
            self.state = 1719
            self.number()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Hbond_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def hbond_assign(self):
            return self.getTypedRuleContext(XplorMRParser.Hbond_assignContext,0)


        def Classification(self):
            return self.getToken(XplorMRParser.Classification, 0)

        def Simple_name(self):
            return self.getToken(XplorMRParser.Simple_name, 0)

        def ForceConstant(self):
            return self.getToken(XplorMRParser.ForceConstant, 0)

        def number_s(self):
            return self.getTypedRuleContext(XplorMRParser.Number_sContext,0)


        def Nrestraints(self):
            return self.getToken(XplorMRParser.Nrestraints, 0)

        def Integer(self):
            return self.getToken(XplorMRParser.Integer, 0)

        def Print(self):
            return self.getToken(XplorMRParser.Print, 0)

        def Threshold(self):
            return self.getToken(XplorMRParser.Threshold, 0)

        def Reset(self):
            return self.getToken(XplorMRParser.Reset, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_hbond_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHbond_statement" ):
                listener.enterHbond_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHbond_statement" ):
                listener.exitHbond_statement(self)




    def hbond_statement(self):

        localctx = XplorMRParser.Hbond_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 174, self.RULE_hbond_statement)
        try:
            self.state = 1732
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [XplorMRParser.Assign]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1721
                self.hbond_assign()
                pass
            elif token in [XplorMRParser.Classification]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1722
                self.match(XplorMRParser.Classification)
                self.state = 1723
                self.match(XplorMRParser.Simple_name)
                pass
            elif token in [XplorMRParser.ForceConstant]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1724
                self.match(XplorMRParser.ForceConstant)
                self.state = 1725
                self.number_s()
                pass
            elif token in [XplorMRParser.Nrestraints]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1726
                self.match(XplorMRParser.Nrestraints)
                self.state = 1727
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.Print]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1728
                self.match(XplorMRParser.Print)
                self.state = 1729
                self.match(XplorMRParser.Threshold)
                self.state = 1730
                self.number_s()
                pass
            elif token in [XplorMRParser.Reset]:
                self.enterOuterAlt(localctx, 6)
                self.state = 1731
                self.match(XplorMRParser.Reset)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Hbond_assignContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Assign(self):
            return self.getToken(XplorMRParser.Assign, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.SelectionContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_hbond_assign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHbond_assign" ):
                listener.enterHbond_assign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHbond_assign" ):
                listener.exitHbond_assign(self)




    def hbond_assign(self):

        localctx = XplorMRParser.Hbond_assignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 176, self.RULE_hbond_assign)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1734
            self.match(XplorMRParser.Assign)
            self.state = 1735
            self.selection()
            self.state = 1736
            self.selection()
            self.state = 1737
            self.selection()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Hbond_db_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def hbond_db_assign(self):
            return self.getTypedRuleContext(XplorMRParser.Hbond_db_assignContext,0)


        def Kdir(self):
            return self.getToken(XplorMRParser.Kdir, 0)

        def number_s(self):
            return self.getTypedRuleContext(XplorMRParser.Number_sContext,0)


        def Equ_op(self):
            return self.getToken(XplorMRParser.Equ_op, 0)

        def Klin(self):
            return self.getToken(XplorMRParser.Klin, 0)

        def Nseg(self):
            return self.getToken(XplorMRParser.Nseg, 0)

        def Integer(self):
            return self.getToken(XplorMRParser.Integer, 0)

        def Nmin(self):
            return self.getToken(XplorMRParser.Nmin, 0)

        def Nmax(self):
            return self.getToken(XplorMRParser.Nmax, 0)

        def Segm(self):
            return self.getToken(XplorMRParser.Segm, 0)

        def Simple_name(self):
            return self.getToken(XplorMRParser.Simple_name, 0)

        def Ohcut(self):
            return self.getToken(XplorMRParser.Ohcut, 0)

        def Coh1cut(self):
            return self.getToken(XplorMRParser.Coh1cut, 0)

        def Coh2cut(self):
            return self.getToken(XplorMRParser.Coh2cut, 0)

        def Ohncut(self):
            return self.getToken(XplorMRParser.Ohncut, 0)

        def Updfrq(self):
            return self.getToken(XplorMRParser.Updfrq, 0)

        def Prnfrq(self):
            return self.getToken(XplorMRParser.Prnfrq, 0)

        def Freemode(self):
            return self.getToken(XplorMRParser.Freemode, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_hbond_db_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHbond_db_statement" ):
                listener.enterHbond_db_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHbond_db_statement" ):
                listener.exitHbond_db_statement(self)




    def hbond_db_statement(self):

        localctx = XplorMRParser.Hbond_db_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 178, self.RULE_hbond_db_statement)
        self._la = 0 # Token type
        try:
            self.state = 1805
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [XplorMRParser.Assign]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1739
                self.hbond_db_assign()
                pass
            elif token in [XplorMRParser.Kdir]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1740
                self.match(XplorMRParser.Kdir)
                self.state = 1742
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 1741
                    self.match(XplorMRParser.Equ_op)


                self.state = 1744
                self.number_s()
                pass
            elif token in [XplorMRParser.Klin]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1745
                self.match(XplorMRParser.Klin)
                self.state = 1747
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 1746
                    self.match(XplorMRParser.Equ_op)


                self.state = 1749
                self.number_s()
                pass
            elif token in [XplorMRParser.Nseg]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1750
                self.match(XplorMRParser.Nseg)
                self.state = 1752
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 1751
                    self.match(XplorMRParser.Equ_op)


                self.state = 1754
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.Nmin]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1755
                self.match(XplorMRParser.Nmin)
                self.state = 1757
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 1756
                    self.match(XplorMRParser.Equ_op)


                self.state = 1759
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.Nmax]:
                self.enterOuterAlt(localctx, 6)
                self.state = 1760
                self.match(XplorMRParser.Nmax)
                self.state = 1762
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 1761
                    self.match(XplorMRParser.Equ_op)


                self.state = 1764
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.Segm]:
                self.enterOuterAlt(localctx, 7)
                self.state = 1765
                self.match(XplorMRParser.Segm)
                self.state = 1767
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 1766
                    self.match(XplorMRParser.Equ_op)


                self.state = 1769
                self.match(XplorMRParser.Simple_name)
                pass
            elif token in [XplorMRParser.Ohcut]:
                self.enterOuterAlt(localctx, 8)
                self.state = 1770
                self.match(XplorMRParser.Ohcut)
                self.state = 1772
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 1771
                    self.match(XplorMRParser.Equ_op)


                self.state = 1774
                self.number_s()
                pass
            elif token in [XplorMRParser.Coh1cut]:
                self.enterOuterAlt(localctx, 9)
                self.state = 1775
                self.match(XplorMRParser.Coh1cut)
                self.state = 1777
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 1776
                    self.match(XplorMRParser.Equ_op)


                self.state = 1779
                self.number_s()
                pass
            elif token in [XplorMRParser.Coh2cut]:
                self.enterOuterAlt(localctx, 10)
                self.state = 1780
                self.match(XplorMRParser.Coh2cut)
                self.state = 1782
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 1781
                    self.match(XplorMRParser.Equ_op)


                self.state = 1784
                self.number_s()
                pass
            elif token in [XplorMRParser.Ohncut]:
                self.enterOuterAlt(localctx, 11)
                self.state = 1785
                self.match(XplorMRParser.Ohncut)
                self.state = 1787
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 1786
                    self.match(XplorMRParser.Equ_op)


                self.state = 1789
                self.number_s()
                pass
            elif token in [XplorMRParser.Updfrq]:
                self.enterOuterAlt(localctx, 12)
                self.state = 1790
                self.match(XplorMRParser.Updfrq)
                self.state = 1792
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 1791
                    self.match(XplorMRParser.Equ_op)


                self.state = 1794
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.Prnfrq]:
                self.enterOuterAlt(localctx, 13)
                self.state = 1795
                self.match(XplorMRParser.Prnfrq)
                self.state = 1797
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 1796
                    self.match(XplorMRParser.Equ_op)


                self.state = 1799
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.Freemode]:
                self.enterOuterAlt(localctx, 14)
                self.state = 1800
                self.match(XplorMRParser.Freemode)
                self.state = 1802
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 1801
                    self.match(XplorMRParser.Equ_op)


                self.state = 1804
                self.match(XplorMRParser.Integer)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Hbond_db_assignContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Assign(self):
            return self.getToken(XplorMRParser.Assign, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.SelectionContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_hbond_db_assign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHbond_db_assign" ):
                listener.enterHbond_db_assign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHbond_db_assign" ):
                listener.exitHbond_db_assign(self)




    def hbond_db_assign(self):

        localctx = XplorMRParser.Hbond_db_assignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 180, self.RULE_hbond_db_assign)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1807
            self.match(XplorMRParser.Assign)
            self.state = 1808
            self.selection()
            self.state = 1809
            self.selection()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SelectionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def L_paren(self):
            return self.getToken(XplorMRParser.L_paren, 0)

        def selection_expression(self):
            return self.getTypedRuleContext(XplorMRParser.Selection_expressionContext,0)


        def R_paren(self):
            return self.getToken(XplorMRParser.R_paren, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_selection

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSelection" ):
                listener.enterSelection(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSelection" ):
                listener.exitSelection(self)




    def selection(self):

        localctx = XplorMRParser.SelectionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 182, self.RULE_selection)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1811
            self.match(XplorMRParser.L_paren)
            self.state = 1812
            self.selection_expression()
            self.state = 1813
            self.match(XplorMRParser.R_paren)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Selection_expressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def term(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.TermContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.TermContext,i)


        def Or_op(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Or_op)
            else:
                return self.getToken(XplorMRParser.Or_op, i)

        def getRuleIndex(self):
            return XplorMRParser.RULE_selection_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSelection_expression" ):
                listener.enterSelection_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSelection_expression" ):
                listener.exitSelection_expression(self)




    def selection_expression(self):

        localctx = XplorMRParser.Selection_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 184, self.RULE_selection_expression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1815
            self.term()
            self.state = 1820
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==XplorMRParser.Or_op:
                self.state = 1816
                self.match(XplorMRParser.Or_op)
                self.state = 1817
                self.term()
                self.state = 1822
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TermContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def factor(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.FactorContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.FactorContext,i)


        def And_op(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.And_op)
            else:
                return self.getToken(XplorMRParser.And_op, i)

        def getRuleIndex(self):
            return XplorMRParser.RULE_term

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTerm" ):
                listener.enterTerm(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTerm" ):
                listener.exitTerm(self)




    def term(self):

        localctx = XplorMRParser.TermContext(self, self._ctx, self.state)
        self.enterRule(localctx, 186, self.RULE_term)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1823
            self.factor(0)
            self.state = 1828
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==XplorMRParser.And_op:
                self.state = 1824
                self.match(XplorMRParser.And_op)
                self.state = 1825
                self.factor(0)
                self.state = 1830
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FactorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def L_paren(self):
            return self.getToken(XplorMRParser.L_paren, 0)

        def selection_expression(self):
            return self.getTypedRuleContext(XplorMRParser.Selection_expressionContext,0)


        def R_paren(self):
            return self.getToken(XplorMRParser.R_paren, 0)

        def All(self):
            return self.getToken(XplorMRParser.All, 0)

        def Atom(self):
            return self.getToken(XplorMRParser.Atom, 0)

        def Simple_names(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Simple_names)
            else:
                return self.getToken(XplorMRParser.Simple_names, i)

        def Simple_name(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Simple_name)
            else:
                return self.getToken(XplorMRParser.Simple_name, i)

        def Integers(self):
            return self.getToken(XplorMRParser.Integers, 0)

        def Integer(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Integer)
            else:
                return self.getToken(XplorMRParser.Integer, i)

        def Attribute(self):
            return self.getToken(XplorMRParser.Attribute, 0)

        def Attr_properties(self):
            return self.getToken(XplorMRParser.Attr_properties, 0)

        def Comparison_ops(self):
            return self.getToken(XplorMRParser.Comparison_ops, 0)

        def number_f(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Number_fContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Number_fContext,i)


        def Abs(self):
            return self.getToken(XplorMRParser.Abs, 0)

        def BondedTo(self):
            return self.getToken(XplorMRParser.BondedTo, 0)

        def factor(self):
            return self.getTypedRuleContext(XplorMRParser.FactorContext,0)


        def ByGroup(self):
            return self.getToken(XplorMRParser.ByGroup, 0)

        def ByRes(self):
            return self.getToken(XplorMRParser.ByRes, 0)

        def Chemical(self):
            return self.getToken(XplorMRParser.Chemical, 0)

        def Colon(self):
            return self.getToken(XplorMRParser.Colon, 0)

        def Hydrogen(self):
            return self.getToken(XplorMRParser.Hydrogen, 0)

        def Id(self):
            return self.getToken(XplorMRParser.Id, 0)

        def Known(self):
            return self.getToken(XplorMRParser.Known, 0)

        def Name(self):
            return self.getToken(XplorMRParser.Name, 0)

        def Not_op(self):
            return self.getToken(XplorMRParser.Not_op, 0)

        def Point(self):
            return self.getToken(XplorMRParser.Point, 0)

        def Cut(self):
            return self.getToken(XplorMRParser.Cut, 0)

        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Comma)
            else:
                return self.getToken(XplorMRParser.Comma, i)

        def Tail(self):
            return self.getToken(XplorMRParser.Tail, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.SelectionContext,i)


        def Equ_op(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Equ_op)
            else:
                return self.getToken(XplorMRParser.Equ_op, i)

        def Head(self):
            return self.getToken(XplorMRParser.Head, 0)

        def Previous(self):
            return self.getToken(XplorMRParser.Previous, 0)

        def Pseudo(self):
            return self.getToken(XplorMRParser.Pseudo, 0)

        def Residue(self):
            return self.getToken(XplorMRParser.Residue, 0)

        def Resname(self):
            return self.getToken(XplorMRParser.Resname, 0)

        def SegIdentifier(self):
            return self.getToken(XplorMRParser.SegIdentifier, 0)

        def Double_quote_string(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Double_quote_string)
            else:
                return self.getToken(XplorMRParser.Double_quote_string, i)

        def Store_1(self):
            return self.getToken(XplorMRParser.Store_1, 0)

        def Store_2(self):
            return self.getToken(XplorMRParser.Store_2, 0)

        def Store_3(self):
            return self.getToken(XplorMRParser.Store_3, 0)

        def Store_4(self):
            return self.getToken(XplorMRParser.Store_4, 0)

        def Store_5(self):
            return self.getToken(XplorMRParser.Store_5, 0)

        def Store_6(self):
            return self.getToken(XplorMRParser.Store_6, 0)

        def Store_7(self):
            return self.getToken(XplorMRParser.Store_7, 0)

        def Store_8(self):
            return self.getToken(XplorMRParser.Store_8, 0)

        def Store_9(self):
            return self.getToken(XplorMRParser.Store_9, 0)

        def Tag(self):
            return self.getToken(XplorMRParser.Tag, 0)

        def Donor(self):
            return self.getToken(XplorMRParser.Donor, 0)

        def Acceptor(self):
            return self.getToken(XplorMRParser.Acceptor, 0)

        def Around(self):
            return self.getToken(XplorMRParser.Around, 0)

        def Saround(self):
            return self.getToken(XplorMRParser.Saround, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_factor

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFactor" ):
                listener.enterFactor(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFactor" ):
                listener.exitFactor(self)



    def factor(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = XplorMRParser.FactorContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 188
        self.enterRecursionRule(localctx, 188, self.RULE_factor, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1960
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,171,self._ctx)
            if la_ == 1:
                self.state = 1832
                self.match(XplorMRParser.L_paren)
                self.state = 1833
                self.selection_expression()
                self.state = 1834
                self.match(XplorMRParser.R_paren)
                pass

            elif la_ == 2:
                self.state = 1836
                self.match(XplorMRParser.All)
                pass

            elif la_ == 3:
                self.state = 1837
                self.match(XplorMRParser.Atom)
                self.state = 1838
                _la = self._input.LA(1)
                if not(_la==XplorMRParser.Simple_name or _la==XplorMRParser.Simple_names):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1839
                _la = self._input.LA(1)
                if not(_la==XplorMRParser.Integer or _la==XplorMRParser.Integers):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1840
                _la = self._input.LA(1)
                if not(_la==XplorMRParser.Simple_name or _la==XplorMRParser.Simple_names):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass

            elif la_ == 4:
                self.state = 1841
                self.match(XplorMRParser.Attribute)
                self.state = 1843
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Abs:
                    self.state = 1842
                    self.match(XplorMRParser.Abs)


                self.state = 1845
                self.match(XplorMRParser.Attr_properties)
                self.state = 1846
                self.match(XplorMRParser.Comparison_ops)
                self.state = 1847
                self.number_f()
                pass

            elif la_ == 5:
                self.state = 1848
                self.match(XplorMRParser.BondedTo)
                self.state = 1849
                self.factor(29)
                pass

            elif la_ == 6:
                self.state = 1850
                self.match(XplorMRParser.ByGroup)
                self.state = 1851
                self.factor(28)
                pass

            elif la_ == 7:
                self.state = 1852
                self.match(XplorMRParser.ByRes)
                self.state = 1853
                self.factor(27)
                pass

            elif la_ == 8:
                self.state = 1854
                self.match(XplorMRParser.Chemical)
                self.state = 1861
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [XplorMRParser.Simple_names]:
                    self.state = 1855
                    self.match(XplorMRParser.Simple_names)
                    pass
                elif token in [XplorMRParser.Simple_name]:
                    self.state = 1856
                    self.match(XplorMRParser.Simple_name)
                    self.state = 1859
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,154,self._ctx)
                    if la_ == 1:
                        self.state = 1857
                        self.match(XplorMRParser.Colon)
                        self.state = 1858
                        self.match(XplorMRParser.Simple_name)


                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 9:
                self.state = 1863
                self.match(XplorMRParser.Hydrogen)
                pass

            elif la_ == 10:
                self.state = 1864
                self.match(XplorMRParser.Id)
                self.state = 1865
                self.match(XplorMRParser.Integer)
                pass

            elif la_ == 11:
                self.state = 1866
                self.match(XplorMRParser.Known)
                pass

            elif la_ == 12:
                self.state = 1867
                self.match(XplorMRParser.Name)
                self.state = 1874
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [XplorMRParser.Simple_names]:
                    self.state = 1868
                    self.match(XplorMRParser.Simple_names)
                    pass
                elif token in [XplorMRParser.Simple_name]:
                    self.state = 1869
                    self.match(XplorMRParser.Simple_name)
                    self.state = 1872
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,156,self._ctx)
                    if la_ == 1:
                        self.state = 1870
                        self.match(XplorMRParser.Colon)
                        self.state = 1871
                        self.match(XplorMRParser.Simple_name)


                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 13:
                self.state = 1876
                self.match(XplorMRParser.Not_op)
                self.state = 1877
                self.factor(21)
                pass

            elif la_ == 14:
                self.state = 1878
                self.match(XplorMRParser.Point)
                self.state = 1879
                self.match(XplorMRParser.L_paren)
                self.state = 1880
                self.number_f()
                self.state = 1882
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Comma:
                    self.state = 1881
                    self.match(XplorMRParser.Comma)


                self.state = 1884
                self.number_f()
                self.state = 1886
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Comma:
                    self.state = 1885
                    self.match(XplorMRParser.Comma)


                self.state = 1888
                self.number_f()
                self.state = 1889
                self.match(XplorMRParser.R_paren)
                self.state = 1890
                self.match(XplorMRParser.Cut)
                self.state = 1891
                self.number_f()
                pass

            elif la_ == 15:
                self.state = 1893
                self.match(XplorMRParser.Point)
                self.state = 1894
                self.match(XplorMRParser.L_paren)
                self.state = 1895
                self.match(XplorMRParser.Tail)
                self.state = 1897
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 1896
                    self.match(XplorMRParser.Equ_op)


                self.state = 1899
                self.selection()
                self.state = 1901
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Comma:
                    self.state = 1900
                    self.match(XplorMRParser.Comma)


                self.state = 1908
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Head:
                    self.state = 1903
                    self.match(XplorMRParser.Head)
                    self.state = 1905
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==XplorMRParser.Equ_op:
                        self.state = 1904
                        self.match(XplorMRParser.Equ_op)


                    self.state = 1907
                    self.selection()


                self.state = 1910
                self.match(XplorMRParser.R_paren)
                self.state = 1911
                self.match(XplorMRParser.Cut)
                self.state = 1912
                self.number_f()
                pass

            elif la_ == 16:
                self.state = 1914
                self.match(XplorMRParser.Previous)
                pass

            elif la_ == 17:
                self.state = 1915
                self.match(XplorMRParser.Pseudo)
                pass

            elif la_ == 18:
                self.state = 1916
                self.match(XplorMRParser.Residue)
                self.state = 1923
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [XplorMRParser.Integers]:
                    self.state = 1917
                    self.match(XplorMRParser.Integers)
                    pass
                elif token in [XplorMRParser.Integer]:
                    self.state = 1918
                    self.match(XplorMRParser.Integer)
                    self.state = 1921
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,164,self._ctx)
                    if la_ == 1:
                        self.state = 1919
                        self.match(XplorMRParser.Colon)
                        self.state = 1920
                        self.match(XplorMRParser.Integer)


                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 19:
                self.state = 1925
                self.match(XplorMRParser.Resname)
                self.state = 1932
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [XplorMRParser.Simple_names]:
                    self.state = 1926
                    self.match(XplorMRParser.Simple_names)
                    pass
                elif token in [XplorMRParser.Simple_name]:
                    self.state = 1927
                    self.match(XplorMRParser.Simple_name)
                    self.state = 1930
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,166,self._ctx)
                    if la_ == 1:
                        self.state = 1928
                        self.match(XplorMRParser.Colon)
                        self.state = 1929
                        self.match(XplorMRParser.Simple_name)


                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 20:
                self.state = 1934
                self.match(XplorMRParser.SegIdentifier)
                self.state = 1946
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [XplorMRParser.Simple_names]:
                    self.state = 1935
                    self.match(XplorMRParser.Simple_names)
                    pass
                elif token in [XplorMRParser.Simple_name]:
                    self.state = 1936
                    self.match(XplorMRParser.Simple_name)
                    self.state = 1939
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,168,self._ctx)
                    if la_ == 1:
                        self.state = 1937
                        self.match(XplorMRParser.Colon)
                        self.state = 1938
                        self.match(XplorMRParser.Simple_name)


                    pass
                elif token in [XplorMRParser.Double_quote_string]:
                    self.state = 1941
                    self.match(XplorMRParser.Double_quote_string)
                    self.state = 1944
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,169,self._ctx)
                    if la_ == 1:
                        self.state = 1942
                        self.match(XplorMRParser.Colon)
                        self.state = 1943
                        self.match(XplorMRParser.Double_quote_string)


                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 21:
                self.state = 1948
                self.match(XplorMRParser.Store_1)
                pass

            elif la_ == 22:
                self.state = 1949
                self.match(XplorMRParser.Store_2)
                pass

            elif la_ == 23:
                self.state = 1950
                self.match(XplorMRParser.Store_3)
                pass

            elif la_ == 24:
                self.state = 1951
                self.match(XplorMRParser.Store_4)
                pass

            elif la_ == 25:
                self.state = 1952
                self.match(XplorMRParser.Store_5)
                pass

            elif la_ == 26:
                self.state = 1953
                self.match(XplorMRParser.Store_6)
                pass

            elif la_ == 27:
                self.state = 1954
                self.match(XplorMRParser.Store_7)
                pass

            elif la_ == 28:
                self.state = 1955
                self.match(XplorMRParser.Store_8)
                pass

            elif la_ == 29:
                self.state = 1956
                self.match(XplorMRParser.Store_9)
                pass

            elif la_ == 30:
                self.state = 1957
                self.match(XplorMRParser.Tag)
                pass

            elif la_ == 31:
                self.state = 1958
                self.match(XplorMRParser.Donor)
                pass

            elif la_ == 32:
                self.state = 1959
                self.match(XplorMRParser.Acceptor)
                pass


            self._ctx.stop = self._input.LT(-1)
            self.state = 1970
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,173,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 1968
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,172,self._ctx)
                    if la_ == 1:
                        localctx = XplorMRParser.FactorContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_factor)
                        self.state = 1962
                        if not self.precpred(self._ctx, 32):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 32)")
                        self.state = 1963
                        self.match(XplorMRParser.Around)
                        self.state = 1964
                        self.number_f()
                        pass

                    elif la_ == 2:
                        localctx = XplorMRParser.FactorContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_factor)
                        self.state = 1965
                        if not self.precpred(self._ctx, 14):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 14)")
                        self.state = 1966
                        self.match(XplorMRParser.Saround)
                        self.state = 1967
                        self.number_f()
                        pass

             
                self.state = 1972
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,173,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class NumberContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Real(self):
            return self.getToken(XplorMRParser.Real, 0)

        def Integer(self):
            return self.getToken(XplorMRParser.Integer, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_number

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNumber" ):
                listener.enterNumber(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNumber" ):
                listener.exitNumber(self)




    def number(self):

        localctx = XplorMRParser.NumberContext(self, self._ctx, self.state)
        self.enterRule(localctx, 190, self.RULE_number)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1973
            _la = self._input.LA(1)
            if not(_la==XplorMRParser.Integer or _la==XplorMRParser.Real):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Number_fContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Real(self):
            return self.getToken(XplorMRParser.Real, 0)

        def Integer(self):
            return self.getToken(XplorMRParser.Integer, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_number_f

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNumber_f" ):
                listener.enterNumber_f(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNumber_f" ):
                listener.exitNumber_f(self)




    def number_f(self):

        localctx = XplorMRParser.Number_fContext(self, self._ctx, self.state)
        self.enterRule(localctx, 192, self.RULE_number_f)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1975
            _la = self._input.LA(1)
            if not(_la==XplorMRParser.Integer or _la==XplorMRParser.Real):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Number_sContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Real(self):
            return self.getToken(XplorMRParser.Real, 0)

        def Integer(self):
            return self.getToken(XplorMRParser.Integer, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_number_s

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNumber_s" ):
                listener.enterNumber_s(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNumber_s" ):
                listener.exitNumber_s(self)




    def number_s(self):

        localctx = XplorMRParser.Number_sContext(self, self._ctx, self.state)
        self.enterRule(localctx, 194, self.RULE_number_s)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1977
            _la = self._input.LA(1)
            if not(_la==XplorMRParser.Integer or _la==XplorMRParser.Real):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Number_aContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Real(self):
            return self.getToken(XplorMRParser.Real, 0)

        def Integer(self):
            return self.getToken(XplorMRParser.Integer, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_number_a

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNumber_a" ):
                listener.enterNumber_a(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNumber_a" ):
                listener.exitNumber_a(self)




    def number_a(self):

        localctx = XplorMRParser.Number_aContext(self, self._ctx, self.state)
        self.enterRule(localctx, 196, self.RULE_number_a)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1979
            _la = self._input.LA(1)
            if not(_la==XplorMRParser.Integer or _la==XplorMRParser.Real):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Flag_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Flags(self):
            return self.getToken(XplorMRParser.Flags, 0)

        def Include(self):
            return self.getToken(XplorMRParser.Include, 0)

        def End_F(self):
            return self.getToken(XplorMRParser.End_F, 0)

        def Exclude(self):
            return self.getToken(XplorMRParser.Exclude, 0)

        def Class_name(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Class_name)
            else:
                return self.getToken(XplorMRParser.Class_name, i)

        def Any_class(self):
            return self.getToken(XplorMRParser.Any_class, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_flag_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFlag_statement" ):
                listener.enterFlag_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFlag_statement" ):
                listener.exitFlag_statement(self)




    def flag_statement(self):

        localctx = XplorMRParser.Flag_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 198, self.RULE_flag_statement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1981
            self.match(XplorMRParser.Flags)
            self.state = 1992
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==XplorMRParser.Exclude:
                self.state = 1982
                self.match(XplorMRParser.Exclude)
                self.state = 1990
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [XplorMRParser.Include, XplorMRParser.Class_name]:
                    self.state = 1986
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==XplorMRParser.Class_name:
                        self.state = 1983
                        self.match(XplorMRParser.Class_name)
                        self.state = 1988
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    pass
                elif token in [XplorMRParser.Any_class]:
                    self.state = 1989
                    self.match(XplorMRParser.Any_class)
                    pass
                else:
                    raise NoViableAltException(self)



            self.state = 1994
            self.match(XplorMRParser.Include)
            self.state = 1998
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==XplorMRParser.Class_name:
                self.state = 1995
                self.match(XplorMRParser.Class_name)
                self.state = 2000
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2001
            self.match(XplorMRParser.End_F)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Vector_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Vector(self):
            return self.getToken(XplorMRParser.Vector, 0)

        def vector_mode(self):
            return self.getTypedRuleContext(XplorMRParser.Vector_modeContext,0)


        def selection(self):
            return self.getTypedRuleContext(XplorMRParser.SelectionContext,0)


        def getRuleIndex(self):
            return XplorMRParser.RULE_vector_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVector_statement" ):
                listener.enterVector_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVector_statement" ):
                listener.exitVector_statement(self)




    def vector_statement(self):

        localctx = XplorMRParser.Vector_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 200, self.RULE_vector_statement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2003
            self.match(XplorMRParser.Vector)
            self.state = 2004
            self.vector_mode()
            self.state = 2005
            self.selection()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Vector_modeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def vector_expression(self):
            return self.getTypedRuleContext(XplorMRParser.Vector_expressionContext,0)


        def R_paren_VE(self):
            return self.getToken(XplorMRParser.R_paren_VE, 0)

        def Do_Lp(self):
            return self.getToken(XplorMRParser.Do_Lp, 0)

        def Identify_Lp(self):
            return self.getToken(XplorMRParser.Identify_Lp, 0)

        def Show(self):
            return self.getToken(XplorMRParser.Show, 0)

        def vector_show_property(self):
            return self.getTypedRuleContext(XplorMRParser.Vector_show_propertyContext,0)


        def getRuleIndex(self):
            return XplorMRParser.RULE_vector_mode

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVector_mode" ):
                listener.enterVector_mode(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVector_mode" ):
                listener.exitVector_mode(self)




    def vector_mode(self):

        localctx = XplorMRParser.Vector_modeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 202, self.RULE_vector_mode)
        self._la = 0 # Token type
        try:
            self.state = 2013
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [XplorMRParser.Do_Lp, XplorMRParser.Identify_Lp]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2007
                _la = self._input.LA(1)
                if not(_la==XplorMRParser.Do_Lp or _la==XplorMRParser.Identify_Lp):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 2008
                self.vector_expression()
                self.state = 2009
                self.match(XplorMRParser.R_paren_VE)
                pass
            elif token in [XplorMRParser.Show]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2011
                self.match(XplorMRParser.Show)
                self.state = 2012
                self.vector_show_property()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Vector_expressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Atom_properties_VE(self):
            return self.getToken(XplorMRParser.Atom_properties_VE, 0)

        def Equ_op_VE(self):
            return self.getToken(XplorMRParser.Equ_op_VE, 0)

        def vector_operation(self):
            return self.getTypedRuleContext(XplorMRParser.Vector_operationContext,0)


        def getRuleIndex(self):
            return XplorMRParser.RULE_vector_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVector_expression" ):
                listener.enterVector_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVector_expression" ):
                listener.exitVector_expression(self)




    def vector_expression(self):

        localctx = XplorMRParser.Vector_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 204, self.RULE_vector_expression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2015
            self.match(XplorMRParser.Atom_properties_VE)
            self.state = 2018
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==XplorMRParser.Equ_op_VE:
                self.state = 2016
                self.match(XplorMRParser.Equ_op_VE)
                self.state = 2017
                self.vector_operation()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Vector_operationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def vflc(self):
            return self.getTypedRuleContext(XplorMRParser.VflcContext,0)


        def vector_operation(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Vector_operationContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Vector_operationContext,i)


        def Add_op_VE(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Add_op_VE)
            else:
                return self.getToken(XplorMRParser.Add_op_VE, i)

        def Sub_op_VE(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Sub_op_VE)
            else:
                return self.getToken(XplorMRParser.Sub_op_VE, i)

        def Mul_op_VE(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Mul_op_VE)
            else:
                return self.getToken(XplorMRParser.Mul_op_VE, i)

        def Div_op_VE(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Div_op_VE)
            else:
                return self.getToken(XplorMRParser.Div_op_VE, i)

        def Exp_op_VE(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Exp_op_VE)
            else:
                return self.getToken(XplorMRParser.Exp_op_VE, i)

        def getRuleIndex(self):
            return XplorMRParser.RULE_vector_operation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVector_operation" ):
                listener.enterVector_operation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVector_operation" ):
                listener.exitVector_operation(self)




    def vector_operation(self):

        localctx = XplorMRParser.Vector_operationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 206, self.RULE_vector_operation)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2020
            self.vflc()
            self.state = 2025
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,180,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2021
                    _la = self._input.LA(1)
                    if not(((((_la - 223)) & ~0x3f) == 0 and ((1 << (_la - 223)) & ((1 << (XplorMRParser.Add_op_VE - 223)) | (1 << (XplorMRParser.Sub_op_VE - 223)) | (1 << (XplorMRParser.Mul_op_VE - 223)) | (1 << (XplorMRParser.Div_op_VE - 223)) | (1 << (XplorMRParser.Exp_op_VE - 223)))) != 0)):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 2022
                    self.vector_operation() 
                self.state = 2027
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,180,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VflcContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Atom_properties_VE(self):
            return self.getToken(XplorMRParser.Atom_properties_VE, 0)

        def vector_func_call(self):
            return self.getTypedRuleContext(XplorMRParser.Vector_func_callContext,0)


        def Integer_VE(self):
            return self.getToken(XplorMRParser.Integer_VE, 0)

        def Real_VE(self):
            return self.getToken(XplorMRParser.Real_VE, 0)

        def Simple_name_VE(self):
            return self.getToken(XplorMRParser.Simple_name_VE, 0)

        def Double_quote_string_VE(self):
            return self.getToken(XplorMRParser.Double_quote_string_VE, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_vflc

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVflc" ):
                listener.enterVflc(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVflc" ):
                listener.exitVflc(self)




    def vflc(self):

        localctx = XplorMRParser.VflcContext(self, self._ctx, self.state)
        self.enterRule(localctx, 208, self.RULE_vflc)
        try:
            self.state = 2034
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [XplorMRParser.Atom_properties_VE]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2028
                self.match(XplorMRParser.Atom_properties_VE)
                pass
            elif token in [XplorMRParser.Abs_VE, XplorMRParser.Acos_VE, XplorMRParser.Cos_VE, XplorMRParser.Decode_VE, XplorMRParser.Encode_VE, XplorMRParser.Exp_VE, XplorMRParser.Gauss_VE, XplorMRParser.Heavy_VE, XplorMRParser.Int_VE, XplorMRParser.Log10_VE, XplorMRParser.Log_VE, XplorMRParser.Max_VE, XplorMRParser.Maxw_VE, XplorMRParser.Min_VE, XplorMRParser.Mod_VE, XplorMRParser.Norm_VE, XplorMRParser.Random_VE, XplorMRParser.Sign_VE, XplorMRParser.Sin_VE, XplorMRParser.Sqrt_VE, XplorMRParser.Tan_VE]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2029
                self.vector_func_call()
                pass
            elif token in [XplorMRParser.Integer_VE]:
                self.enterOuterAlt(localctx, 3)
                self.state = 2030
                self.match(XplorMRParser.Integer_VE)
                pass
            elif token in [XplorMRParser.Real_VE]:
                self.enterOuterAlt(localctx, 4)
                self.state = 2031
                self.match(XplorMRParser.Real_VE)
                pass
            elif token in [XplorMRParser.Simple_name_VE]:
                self.enterOuterAlt(localctx, 5)
                self.state = 2032
                self.match(XplorMRParser.Simple_name_VE)
                pass
            elif token in [XplorMRParser.Double_quote_string_VE]:
                self.enterOuterAlt(localctx, 6)
                self.state = 2033
                self.match(XplorMRParser.Double_quote_string_VE)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Vector_func_callContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Abs_VE(self):
            return self.getToken(XplorMRParser.Abs_VE, 0)

        def L_paren_VF(self):
            return self.getToken(XplorMRParser.L_paren_VF, 0)

        def vflc(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.VflcContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.VflcContext,i)


        def R_paren_VE(self):
            return self.getToken(XplorMRParser.R_paren_VE, 0)

        def Acos_VE(self):
            return self.getToken(XplorMRParser.Acos_VE, 0)

        def Cos_VE(self):
            return self.getToken(XplorMRParser.Cos_VE, 0)

        def Decode_VE(self):
            return self.getToken(XplorMRParser.Decode_VE, 0)

        def Encode_VE(self):
            return self.getToken(XplorMRParser.Encode_VE, 0)

        def Exp_VE(self):
            return self.getToken(XplorMRParser.Exp_VE, 0)

        def Gauss_VE(self):
            return self.getToken(XplorMRParser.Gauss_VE, 0)

        def Heavy_VE(self):
            return self.getToken(XplorMRParser.Heavy_VE, 0)

        def Int_VE(self):
            return self.getToken(XplorMRParser.Int_VE, 0)

        def Log10_VE(self):
            return self.getToken(XplorMRParser.Log10_VE, 0)

        def Log_VE(self):
            return self.getToken(XplorMRParser.Log_VE, 0)

        def Max_VE(self):
            return self.getToken(XplorMRParser.Max_VE, 0)

        def Comma_VE(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Comma_VE)
            else:
                return self.getToken(XplorMRParser.Comma_VE, i)

        def Maxw_VE(self):
            return self.getToken(XplorMRParser.Maxw_VE, 0)

        def Min_VE(self):
            return self.getToken(XplorMRParser.Min_VE, 0)

        def Mod_VE(self):
            return self.getToken(XplorMRParser.Mod_VE, 0)

        def Norm_VE(self):
            return self.getToken(XplorMRParser.Norm_VE, 0)

        def Random_VE(self):
            return self.getToken(XplorMRParser.Random_VE, 0)

        def Sign_VE(self):
            return self.getToken(XplorMRParser.Sign_VE, 0)

        def Sin_VE(self):
            return self.getToken(XplorMRParser.Sin_VE, 0)

        def Sqrt_VE(self):
            return self.getToken(XplorMRParser.Sqrt_VE, 0)

        def Tan_VE(self):
            return self.getToken(XplorMRParser.Tan_VE, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_vector_func_call

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVector_func_call" ):
                listener.enterVector_func_call(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVector_func_call" ):
                listener.exitVector_func_call(self)




    def vector_func_call(self):

        localctx = XplorMRParser.Vector_func_callContext(self, self._ctx, self.state)
        self.enterRule(localctx, 210, self.RULE_vector_func_call)
        self._la = 0 # Token type
        try:
            self.state = 2155
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [XplorMRParser.Abs_VE]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2036
                self.match(XplorMRParser.Abs_VE)
                self.state = 2037
                self.match(XplorMRParser.L_paren_VF)
                self.state = 2038
                self.vflc()
                self.state = 2039
                self.match(XplorMRParser.R_paren_VE)
                pass
            elif token in [XplorMRParser.Acos_VE]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2041
                self.match(XplorMRParser.Acos_VE)
                self.state = 2042
                self.match(XplorMRParser.L_paren_VF)
                self.state = 2043
                self.vflc()
                self.state = 2044
                self.match(XplorMRParser.R_paren_VE)
                pass
            elif token in [XplorMRParser.Cos_VE]:
                self.enterOuterAlt(localctx, 3)
                self.state = 2046
                self.match(XplorMRParser.Cos_VE)
                self.state = 2047
                self.match(XplorMRParser.L_paren_VF)
                self.state = 2048
                self.vflc()
                self.state = 2049
                self.match(XplorMRParser.R_paren_VE)
                pass
            elif token in [XplorMRParser.Decode_VE]:
                self.enterOuterAlt(localctx, 4)
                self.state = 2051
                self.match(XplorMRParser.Decode_VE)
                self.state = 2052
                self.match(XplorMRParser.L_paren_VF)
                self.state = 2053
                self.vflc()
                self.state = 2054
                self.match(XplorMRParser.R_paren_VE)
                pass
            elif token in [XplorMRParser.Encode_VE]:
                self.enterOuterAlt(localctx, 5)
                self.state = 2056
                self.match(XplorMRParser.Encode_VE)
                self.state = 2057
                self.match(XplorMRParser.L_paren_VF)
                self.state = 2058
                self.vflc()
                self.state = 2059
                self.match(XplorMRParser.R_paren_VE)
                pass
            elif token in [XplorMRParser.Exp_VE]:
                self.enterOuterAlt(localctx, 6)
                self.state = 2061
                self.match(XplorMRParser.Exp_VE)
                self.state = 2062
                self.match(XplorMRParser.L_paren_VF)
                self.state = 2063
                self.vflc()
                self.state = 2064
                self.match(XplorMRParser.R_paren_VE)
                pass
            elif token in [XplorMRParser.Gauss_VE]:
                self.enterOuterAlt(localctx, 7)
                self.state = 2066
                self.match(XplorMRParser.Gauss_VE)
                self.state = 2067
                self.match(XplorMRParser.L_paren_VF)
                self.state = 2068
                self.vflc()
                self.state = 2069
                self.match(XplorMRParser.R_paren_VE)
                pass
            elif token in [XplorMRParser.Heavy_VE]:
                self.enterOuterAlt(localctx, 8)
                self.state = 2071
                self.match(XplorMRParser.Heavy_VE)
                self.state = 2072
                self.match(XplorMRParser.L_paren_VF)
                self.state = 2073
                self.vflc()
                self.state = 2074
                self.match(XplorMRParser.R_paren_VE)
                pass
            elif token in [XplorMRParser.Int_VE]:
                self.enterOuterAlt(localctx, 9)
                self.state = 2076
                self.match(XplorMRParser.Int_VE)
                self.state = 2077
                self.match(XplorMRParser.L_paren_VF)
                self.state = 2078
                self.vflc()
                self.state = 2079
                self.match(XplorMRParser.R_paren_VE)
                pass
            elif token in [XplorMRParser.Log10_VE]:
                self.enterOuterAlt(localctx, 10)
                self.state = 2081
                self.match(XplorMRParser.Log10_VE)
                self.state = 2082
                self.match(XplorMRParser.L_paren_VF)
                self.state = 2083
                self.vflc()
                self.state = 2084
                self.match(XplorMRParser.R_paren_VE)
                pass
            elif token in [XplorMRParser.Log_VE]:
                self.enterOuterAlt(localctx, 11)
                self.state = 2086
                self.match(XplorMRParser.Log_VE)
                self.state = 2087
                self.match(XplorMRParser.L_paren_VF)
                self.state = 2088
                self.vflc()
                self.state = 2089
                self.match(XplorMRParser.R_paren_VE)
                pass
            elif token in [XplorMRParser.Max_VE]:
                self.enterOuterAlt(localctx, 12)
                self.state = 2091
                self.match(XplorMRParser.Max_VE)
                self.state = 2092
                self.match(XplorMRParser.L_paren_VF)
                self.state = 2093
                self.vflc()
                self.state = 2098
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==XplorMRParser.Comma_VE:
                    self.state = 2094
                    self.match(XplorMRParser.Comma_VE)
                    self.state = 2095
                    self.vflc()
                    self.state = 2100
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 2101
                self.match(XplorMRParser.R_paren_VE)
                pass
            elif token in [XplorMRParser.Maxw_VE]:
                self.enterOuterAlt(localctx, 13)
                self.state = 2103
                self.match(XplorMRParser.Maxw_VE)
                self.state = 2104
                self.match(XplorMRParser.L_paren_VF)
                self.state = 2105
                self.vflc()
                self.state = 2106
                self.match(XplorMRParser.R_paren_VE)
                pass
            elif token in [XplorMRParser.Min_VE]:
                self.enterOuterAlt(localctx, 14)
                self.state = 2108
                self.match(XplorMRParser.Min_VE)
                self.state = 2109
                self.match(XplorMRParser.L_paren_VF)
                self.state = 2110
                self.vflc()
                self.state = 2115
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==XplorMRParser.Comma_VE:
                    self.state = 2111
                    self.match(XplorMRParser.Comma_VE)
                    self.state = 2112
                    self.vflc()
                    self.state = 2117
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 2118
                self.match(XplorMRParser.R_paren_VE)
                pass
            elif token in [XplorMRParser.Mod_VE]:
                self.enterOuterAlt(localctx, 15)
                self.state = 2120
                self.match(XplorMRParser.Mod_VE)
                self.state = 2121
                self.match(XplorMRParser.L_paren_VF)
                self.state = 2122
                self.vflc()
                self.state = 2123
                self.match(XplorMRParser.Comma_VE)
                self.state = 2124
                self.vflc()
                self.state = 2125
                self.match(XplorMRParser.R_paren_VE)
                pass
            elif token in [XplorMRParser.Norm_VE]:
                self.enterOuterAlt(localctx, 16)
                self.state = 2127
                self.match(XplorMRParser.Norm_VE)
                self.state = 2128
                self.match(XplorMRParser.L_paren_VF)
                self.state = 2129
                self.vflc()
                self.state = 2130
                self.match(XplorMRParser.R_paren_VE)
                pass
            elif token in [XplorMRParser.Random_VE]:
                self.enterOuterAlt(localctx, 17)
                self.state = 2132
                self.match(XplorMRParser.Random_VE)
                self.state = 2133
                self.match(XplorMRParser.L_paren_VF)
                self.state = 2134
                self.match(XplorMRParser.R_paren_VE)
                pass
            elif token in [XplorMRParser.Sign_VE]:
                self.enterOuterAlt(localctx, 18)
                self.state = 2135
                self.match(XplorMRParser.Sign_VE)
                self.state = 2136
                self.match(XplorMRParser.L_paren_VF)
                self.state = 2137
                self.vflc()
                self.state = 2138
                self.match(XplorMRParser.R_paren_VE)
                pass
            elif token in [XplorMRParser.Sin_VE]:
                self.enterOuterAlt(localctx, 19)
                self.state = 2140
                self.match(XplorMRParser.Sin_VE)
                self.state = 2141
                self.match(XplorMRParser.L_paren_VF)
                self.state = 2142
                self.vflc()
                self.state = 2143
                self.match(XplorMRParser.R_paren_VE)
                pass
            elif token in [XplorMRParser.Sqrt_VE]:
                self.enterOuterAlt(localctx, 20)
                self.state = 2145
                self.match(XplorMRParser.Sqrt_VE)
                self.state = 2146
                self.match(XplorMRParser.L_paren_VF)
                self.state = 2147
                self.vflc()
                self.state = 2148
                self.match(XplorMRParser.R_paren_VE)
                pass
            elif token in [XplorMRParser.Tan_VE]:
                self.enterOuterAlt(localctx, 21)
                self.state = 2150
                self.match(XplorMRParser.Tan_VE)
                self.state = 2151
                self.match(XplorMRParser.L_paren_VF)
                self.state = 2152
                self.vflc()
                self.state = 2153
                self.match(XplorMRParser.R_paren_VE)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Vector_show_propertyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def L_paren_VS(self):
            return self.getToken(XplorMRParser.L_paren_VS, 0)

        def Atom_properties_VS(self):
            return self.getToken(XplorMRParser.Atom_properties_VS, 0)

        def R_paren_VS(self):
            return self.getToken(XplorMRParser.R_paren_VS, 0)

        def Average_VS(self):
            return self.getToken(XplorMRParser.Average_VS, 0)

        def Element_VS(self):
            return self.getToken(XplorMRParser.Element_VS, 0)

        def Max_VS(self):
            return self.getToken(XplorMRParser.Max_VS, 0)

        def Min_VS(self):
            return self.getToken(XplorMRParser.Min_VS, 0)

        def Norm_VS(self):
            return self.getToken(XplorMRParser.Norm_VS, 0)

        def Rms_VS(self):
            return self.getToken(XplorMRParser.Rms_VS, 0)

        def Sum_VS(self):
            return self.getToken(XplorMRParser.Sum_VS, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_vector_show_property

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVector_show_property" ):
                listener.enterVector_show_property(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVector_show_property" ):
                listener.exitVector_show_property(self)




    def vector_show_property(self):

        localctx = XplorMRParser.Vector_show_propertyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 212, self.RULE_vector_show_property)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2157
            _la = self._input.LA(1)
            if not(((((_la - 259)) & ~0x3f) == 0 and ((1 << (_la - 259)) & ((1 << (XplorMRParser.Average_VS - 259)) | (1 << (XplorMRParser.Element_VS - 259)) | (1 << (XplorMRParser.Max_VS - 259)) | (1 << (XplorMRParser.Min_VS - 259)) | (1 << (XplorMRParser.Norm_VS - 259)) | (1 << (XplorMRParser.Rms_VS - 259)) | (1 << (XplorMRParser.Sum_VS - 259)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 2158
            self.match(XplorMRParser.L_paren_VS)
            self.state = 2159
            self.match(XplorMRParser.Atom_properties_VS)
            self.state = 2160
            self.match(XplorMRParser.R_paren_VS)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx



    def sempred(self, localctx:RuleContext, ruleIndex:int, predIndex:int):
        if self._predicates == None:
            self._predicates = dict()
        self._predicates[94] = self.factor_sempred
        pred = self._predicates.get(ruleIndex, None)
        if pred is None:
            raise Exception("No predicate with index:" + str(ruleIndex))
        else:
            return pred(localctx, predIndex)

    def factor_sempred(self, localctx:FactorContext, predIndex:int):
            if predIndex == 0:
                return self.precpred(self._ctx, 32)
         

            if predIndex == 1:
                return self.precpred(self._ctx, 14)
         




