# Generated from CNS_MR_Parser.g4 by ANTLR 4.9
# encoding: utf-8
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
	from typing import TextIO
else:
	from typing.io import TextIO


def serializedATN():
    with StringIO() as buf:
        buf.write("\3\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964\3\u00a7")
        buf.write("\u04b4\4\2\t\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7\t\7")
        buf.write("\4\b\t\b\4\t\t\t\4\n\t\n\4\13\t\13\4\f\t\f\4\r\t\r\4\16")
        buf.write("\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22\t\22\4\23\t\23")
        buf.write("\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30\t\30\4\31")
        buf.write("\t\31\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t\35\4\36\t\36")
        buf.write("\4\37\t\37\4 \t \4!\t!\4\"\t\"\4#\t#\4$\t$\4%\t%\4&\t")
        buf.write("&\4\'\t\'\4(\t(\4)\t)\4*\t*\4+\t+\4,\t,\4-\t-\4.\t.\4")
        buf.write("/\t/\4\60\t\60\4\61\t\61\4\62\t\62\4\63\t\63\4\64\t\64")
        buf.write("\3\2\7\2j\n\2\f\2\16\2m\13\2\3\2\7\2p\n\2\f\2\16\2s\13")
        buf.write("\2\3\2\7\2v\n\2\f\2\16\2y\13\2\3\2\7\2|\n\2\f\2\16\2\177")
        buf.write("\13\2\3\2\7\2\u0082\n\2\f\2\16\2\u0085\13\2\3\2\7\2\u0088")
        buf.write("\n\2\f\2\16\2\u008b\13\2\3\2\7\2\u008e\n\2\f\2\16\2\u0091")
        buf.write("\13\2\3\2\7\2\u0094\n\2\f\2\16\2\u0097\13\2\3\2\7\2\u009a")
        buf.write("\n\2\f\2\16\2\u009d\13\2\3\2\7\2\u00a0\n\2\f\2\16\2\u00a3")
        buf.write("\13\2\3\2\7\2\u00a6\n\2\f\2\16\2\u00a9\13\2\3\2\7\2\u00ac")
        buf.write("\n\2\f\2\16\2\u00af\13\2\3\2\3\2\3\3\3\3\3\3\3\3\3\3\3")
        buf.write("\3\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\5\3\5\3\5\3\5\3\5\3\5")
        buf.write("\3\5\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\7\3\7\3\7\3\7\3\7\3")
        buf.write("\7\3\b\3\b\3\b\3\b\3\b\3\b\3\t\3\t\3\t\3\t\3\t\3\t\3\n")
        buf.write("\3\n\3\n\3\n\3\n\3\n\3\13\3\13\3\13\3\13\3\13\3\13\3\f")
        buf.write("\3\f\3\f\3\f\3\f\3\f\3\r\3\r\3\r\3\r\3\r\3\r\3\16\3\16")
        buf.write("\3\16\3\16\3\16\3\16\3\17\3\17\3\17\3\17\7\17\u0102\n")
        buf.write("\17\f\17\16\17\u0105\13\17\3\17\3\17\3\17\3\17\3\17\3")
        buf.write("\17\3\17\3\17\3\17\3\17\3\17\3\17\3\17\3\17\3\17\3\17")
        buf.write("\3\17\3\17\3\17\3\17\3\17\3\17\3\17\3\17\3\17\3\17\3\17")
        buf.write("\3\17\3\17\3\17\3\17\3\17\3\17\3\17\3\17\3\17\7\17\u012b")
        buf.write("\n\17\f\17\16\17\u012e\13\17\3\17\3\17\3\17\3\17\3\17")
        buf.write("\3\17\3\17\3\17\3\17\3\17\3\17\3\17\3\17\3\17\3\17\3\17")
        buf.write("\3\17\3\17\3\17\3\17\3\17\3\17\3\17\3\17\3\17\3\17\3\17")
        buf.write("\3\17\3\17\3\17\3\17\7\17\u014f\n\17\f\17\16\17\u0152")
        buf.write("\13\17\3\17\3\17\3\17\3\17\3\17\3\17\3\17\3\17\3\17\3")
        buf.write("\17\3\17\3\17\3\17\3\17\3\17\3\17\3\17\3\17\3\17\3\17")
        buf.write("\3\17\3\17\3\17\3\17\7\17\u016c\n\17\f\17\16\17\u016f")
        buf.write("\13\17\3\17\3\17\3\17\3\17\3\17\5\17\u0176\n\17\3\20\3")
        buf.write("\20\3\20\3\20\3\20\3\20\3\20\3\20\3\20\3\20\7\20\u0182")
        buf.write("\n\20\f\20\16\20\u0185\13\20\3\21\3\21\3\21\3\21\3\21")
        buf.write("\3\21\3\21\3\21\3\21\3\21\5\21\u0191\n\21\3\22\7\22\u0194")
        buf.write("\n\22\f\22\16\22\u0197\13\22\3\22\3\22\3\22\3\22\3\22")
        buf.write("\3\22\3\22\3\22\3\22\3\22\3\22\3\22\3\22\3\22\5\22\u01a7")
        buf.write("\n\22\3\23\3\23\3\23\3\23\3\23\3\23\3\23\3\23\3\23\3\23")
        buf.write("\3\24\3\24\3\24\3\24\3\24\3\24\3\24\5\24\u01ba\n\24\3")
        buf.write("\25\3\25\3\25\3\25\3\25\3\25\5\25\u01c2\n\25\3\26\3\26")
        buf.write("\3\26\3\26\3\26\3\26\5\26\u01ca\n\26\3\27\7\27\u01cd\n")
        buf.write("\27\f\27\16\27\u01d0\13\27\3\27\3\27\3\27\3\27\3\27\3")
        buf.write("\27\3\27\3\27\3\27\3\27\3\27\3\27\3\27\3\27\3\27\3\27")
        buf.write("\3\27\3\27\3\27\3\27\5\27\u01e6\n\27\3\30\3\30\3\30\3")
        buf.write("\30\3\30\3\30\3\30\3\30\3\30\3\30\3\31\7\31\u01f3\n\31")
        buf.write("\f\31\16\31\u01f6\13\31\3\31\3\31\3\31\3\31\3\31\3\31")
        buf.write("\3\31\3\31\3\31\3\31\3\31\3\31\3\31\3\31\5\31\u0206\n")
        buf.write("\31\3\31\3\31\3\31\3\31\3\31\3\31\3\31\3\31\3\31\3\31")
        buf.write("\3\31\3\31\3\31\3\31\3\31\3\31\5\31\u0218\n\31\3\31\5")
        buf.write("\31\u021b\n\31\3\32\3\32\3\32\3\32\3\32\3\32\3\32\3\32")
        buf.write("\3\32\3\32\5\32\u0227\n\32\3\32\3\32\3\32\3\32\5\32\u022d")
        buf.write("\n\32\3\33\7\33\u0230\n\33\f\33\16\33\u0233\13\33\3\33")
        buf.write("\3\33\3\33\3\33\3\33\3\33\3\33\3\33\3\33\3\33\3\33\3\33")
        buf.write("\3\33\3\33\3\33\3\33\3\33\3\33\3\33\3\33\3\33\3\33\3\33")
        buf.write("\3\33\3\33\3\33\3\33\3\33\7\33\u0251\n\33\f\33\16\33\u0254")
        buf.write("\13\33\3\33\3\33\5\33\u0258\n\33\3\34\3\34\3\34\3\34\3")
        buf.write("\34\3\34\3\34\3\34\3\34\3\35\3\35\3\35\3\35\3\35\3\36")
        buf.write("\7\36\u0269\n\36\f\36\16\36\u026c\13\36\3\36\7\36\u026f")
        buf.write("\n\36\f\36\16\36\u0272\13\36\3\36\7\36\u0275\n\36\f\36")
        buf.write("\16\36\u0278\13\36\3\36\7\36\u027b\n\36\f\36\16\36\u027e")
        buf.write("\13\36\3\36\7\36\u0281\n\36\f\36\16\36\u0284\13\36\3\36")
        buf.write("\7\36\u0287\n\36\f\36\16\36\u028a\13\36\3\36\7\36\u028d")
        buf.write("\n\36\f\36\16\36\u0290\13\36\3\36\7\36\u0293\n\36\f\36")
        buf.write("\16\36\u0296\13\36\3\36\7\36\u0299\n\36\f\36\16\36\u029c")
        buf.write("\13\36\3\36\3\36\3\36\3\36\3\36\5\36\u02a3\n\36\3\36\3")
        buf.write("\36\3\36\3\36\5\36\u02a9\n\36\3\36\3\36\3\36\3\36\3\36")
        buf.write("\3\36\3\36\3\36\3\36\5\36\u02b4\n\36\3\36\3\36\5\36\u02b8")
        buf.write("\n\36\3\37\3\37\3\37\5\37\u02bd\n\37\3\37\3\37\5\37\u02c1")
        buf.write("\n\37\3 \3 \3 \3 \3!\3!\3!\3!\3!\3!\5!\u02cd\n!\3!\3!")
        buf.write("\3\"\3\"\3\"\3#\3#\3#\3$\3$\3$\3%\3%\3%\3&\3&\3&\3&\3")
        buf.write("&\3&\3&\3&\5&\u02e5\n&\3\'\3\'\3\'\3(\7(\u02eb\n(\f(\16")
        buf.write("(\u02ee\13(\3(\3(\3(\3(\3(\3(\3(\5(\u02f7\n(\3(\5(\u02fa")
        buf.write("\n(\3(\5(\u02fd\n(\3(\3(\3(\3(\3(\3(\3(\3(\3(\3(\3(\3")
        buf.write("(\3(\3(\3(\3(\3(\5(\u0310\n(\3(\3(\3(\5(\u0315\n(\3(\3")
        buf.write("(\3(\5(\u031a\n(\3(\3(\3(\3(\3(\3(\3(\3(\3(\3(\5(\u0326")
        buf.write("\n(\3(\3(\3(\3(\3(\5(\u032d\n(\3(\5(\u0330\n(\3(\5(\u0333")
        buf.write("\n(\3(\5(\u0336\n(\3)\3)\3)\3)\3)\3)\3)\3)\3)\3)\5)\u0342")
        buf.write("\n)\3)\3)\3)\3)\3)\5)\u0349\n)\3)\3)\3)\3)\3)\5)\u0350")
        buf.write("\n)\3*\7*\u0353\n*\f*\16*\u0356\13*\3*\3*\3*\3*\3*\3*")
        buf.write("\3*\3*\3*\3*\3*\3*\3*\3*\3*\3*\3*\3*\3*\3*\3*\3*\5*\u036e")
        buf.write("\n*\3+\3+\3+\3+\3+\3+\3+\3+\3+\3+\3,\7,\u037b\n,\f,\16")
        buf.write(",\u037e\13,\3,\3,\3,\3,\3,\3,\3,\3,\3,\3,\3,\3,\3,\3,")
        buf.write("\3,\3,\3,\3,\3,\3,\3,\3,\3,\3,\5,\u0398\n,\3-\3-\3-\3")
        buf.write("-\3-\3-\3-\3-\3-\3-\3-\3-\3.\7.\u03a7\n.\f.\16.\u03aa")
        buf.write("\13.\3.\3.\3.\3.\3.\3.\3.\3.\3.\3.\3.\3.\3.\3.\3.\3.\3")
        buf.write(".\3.\3.\3.\3.\3.\3.\3.\3.\3.\3.\3.\3.\5.\u03c9\n.\3.\3")
        buf.write(".\3.\3.\3.\3.\5.\u03d1\n.\3/\3/\3/\3/\3/\3/\3/\3/\3/\3")
        buf.write("/\3/\3/\3/\5/\u03e0\n/\3\60\3\60\3\60\3\60\3\61\3\61\3")
        buf.write("\61\3\61\3\61\3\61\7\61\u03ec\n\61\f\61\16\61\u03ef\13")
        buf.write("\61\3\62\3\62\3\62\3\62\3\62\3\62\7\62\u03f7\n\62\f\62")
        buf.write("\16\62\u03fa\13\62\3\63\3\63\3\63\3\63\3\63\3\63\3\63")
        buf.write("\3\63\3\63\3\63\3\63\3\63\5\63\u0408\n\63\3\63\3\63\3")
        buf.write("\63\3\63\3\63\3\63\3\63\3\63\3\63\3\63\3\63\3\63\3\63")
        buf.write("\5\63\u0417\n\63\3\63\3\63\3\63\3\63\3\63\3\63\3\63\3")
        buf.write("\63\3\63\3\63\3\63\3\63\3\63\3\63\3\63\3\63\3\63\3\63")
        buf.write("\3\63\3\63\3\63\3\63\7\63\u042f\n\63\f\63\16\63\u0432")
        buf.write("\13\63\5\63\u0434\n\63\3\63\3\63\3\63\3\63\3\63\3\63\3")
        buf.write("\63\3\63\3\63\3\63\3\63\3\63\3\63\3\63\3\63\3\63\7\63")
        buf.write("\u0446\n\63\f\63\16\63\u0449\13\63\5\63\u044b\n\63\3\63")
        buf.write("\3\63\3\63\3\63\3\63\3\63\3\63\3\63\3\63\3\63\3\63\3\63")
        buf.write("\3\63\3\63\7\63\u045b\n\63\f\63\16\63\u045e\13\63\5\63")
        buf.write("\u0460\n\63\3\63\3\63\3\63\3\63\3\63\7\63\u0467\n\63\f")
        buf.write("\63\16\63\u046a\13\63\5\63\u046c\n\63\3\63\3\63\3\63\3")
        buf.write("\63\3\63\7\63\u0473\n\63\f\63\16\63\u0476\13\63\3\63\5")
        buf.write("\63\u0479\n\63\3\63\3\63\3\63\3\63\3\63\3\63\3\63\3\63")
        buf.write("\3\63\3\63\3\63\3\63\3\63\3\63\3\63\3\63\3\63\5\63\u048c")
        buf.write("\n\63\3\63\3\63\3\63\3\63\3\63\3\63\7\63\u0494\n\63\f")
        buf.write("\63\16\63\u0497\13\63\3\64\3\64\3\64\5\64\u049c\n\64\3")
        buf.write("\64\3\64\5\64\u04a0\n\64\3\64\3\64\3\64\3\64\3\64\3\64")
        buf.write("\3\64\5\64\u04a9\n\64\3\64\3\64\3\64\5\64\u04ae\n\64\3")
        buf.write("\64\3\64\5\64\u04b2\n\64\3\64\5\u012c\u0150\u016d\3d\65")
        buf.write("\2\4\6\b\n\f\16\20\22\24\26\30\32\34\36 \"$&(*,.\60\62")
        buf.write("\64\668:<>@BDFHJLNPRTVXZ\\^`bdf\2\2\2\u056f\2k\3\2\2\2")
        buf.write("\4\u00b2\3\2\2\2\6\u00b8\3\2\2\2\b\u00bf\3\2\2\2\n\u00c6")
        buf.write("\3\2\2\2\f\u00cd\3\2\2\2\16\u00d3\3\2\2\2\20\u00d9\3\2")
        buf.write("\2\2\22\u00df\3\2\2\2\24\u00e5\3\2\2\2\26\u00eb\3\2\2")
        buf.write("\2\30\u00f1\3\2\2\2\32\u00f7\3\2\2\2\34\u0175\3\2\2\2")
        buf.write("\36\u0177\3\2\2\2 \u0190\3\2\2\2\"\u01a6\3\2\2\2$\u01a8")
        buf.write("\3\2\2\2&\u01b9\3\2\2\2(\u01c1\3\2\2\2*\u01c9\3\2\2\2")
        buf.write(",\u01e5\3\2\2\2.\u01e7\3\2\2\2\60\u021a\3\2\2\2\62\u021c")
        buf.write("\3\2\2\2\64\u0257\3\2\2\2\66\u0259\3\2\2\28\u0262\3\2")
        buf.write("\2\2:\u02b7\3\2\2\2<\u02b9\3\2\2\2>\u02c2\3\2\2\2@\u02c6")
        buf.write("\3\2\2\2B\u02d0\3\2\2\2D\u02d3\3\2\2\2F\u02d6\3\2\2\2")
        buf.write("H\u02d9\3\2\2\2J\u02dc\3\2\2\2L\u02e6\3\2\2\2N\u0335\3")
        buf.write("\2\2\2P\u0337\3\2\2\2R\u036d\3\2\2\2T\u036f\3\2\2\2V\u0397")
        buf.write("\3\2\2\2X\u0399\3\2\2\2Z\u03d0\3\2\2\2\\\u03d2\3\2\2\2")
        buf.write("^\u03e1\3\2\2\2`\u03e5\3\2\2\2b\u03f0\3\2\2\2d\u048b\3")
        buf.write("\2\2\2f\u04b1\3\2\2\2hj\5\4\3\2ih\3\2\2\2jm\3\2\2\2ki")
        buf.write("\3\2\2\2kl\3\2\2\2lq\3\2\2\2mk\3\2\2\2np\5\6\4\2on\3\2")
        buf.write("\2\2ps\3\2\2\2qo\3\2\2\2qr\3\2\2\2rw\3\2\2\2sq\3\2\2\2")
        buf.write("tv\5\b\5\2ut\3\2\2\2vy\3\2\2\2wu\3\2\2\2wx\3\2\2\2x}\3")
        buf.write("\2\2\2yw\3\2\2\2z|\5\n\6\2{z\3\2\2\2|\177\3\2\2\2}{\3")
        buf.write("\2\2\2}~\3\2\2\2~\u0083\3\2\2\2\177}\3\2\2\2\u0080\u0082")
        buf.write("\5\f\7\2\u0081\u0080\3\2\2\2\u0082\u0085\3\2\2\2\u0083")
        buf.write("\u0081\3\2\2\2\u0083\u0084\3\2\2\2\u0084\u0089\3\2\2\2")
        buf.write("\u0085\u0083\3\2\2\2\u0086\u0088\5\16\b\2\u0087\u0086")
        buf.write("\3\2\2\2\u0088\u008b\3\2\2\2\u0089\u0087\3\2\2\2\u0089")
        buf.write("\u008a\3\2\2\2\u008a\u008f\3\2\2\2\u008b\u0089\3\2\2\2")
        buf.write("\u008c\u008e\5\20\t\2\u008d\u008c\3\2\2\2\u008e\u0091")
        buf.write("\3\2\2\2\u008f\u008d\3\2\2\2\u008f\u0090\3\2\2\2\u0090")
        buf.write("\u0095\3\2\2\2\u0091\u008f\3\2\2\2\u0092\u0094\5\22\n")
        buf.write("\2\u0093\u0092\3\2\2\2\u0094\u0097\3\2\2\2\u0095\u0093")
        buf.write("\3\2\2\2\u0095\u0096\3\2\2\2\u0096\u009b\3\2\2\2\u0097")
        buf.write("\u0095\3\2\2\2\u0098\u009a\5\24\13\2\u0099\u0098\3\2\2")
        buf.write("\2\u009a\u009d\3\2\2\2\u009b\u0099\3\2\2\2\u009b\u009c")
        buf.write("\3\2\2\2\u009c\u00a1\3\2\2\2\u009d\u009b\3\2\2\2\u009e")
        buf.write("\u00a0\5\26\f\2\u009f\u009e\3\2\2\2\u00a0\u00a3\3\2\2")
        buf.write("\2\u00a1\u009f\3\2\2\2\u00a1\u00a2\3\2\2\2\u00a2\u00a7")
        buf.write("\3\2\2\2\u00a3\u00a1\3\2\2\2\u00a4\u00a6\5\30\r\2\u00a5")
        buf.write("\u00a4\3\2\2\2\u00a6\u00a9\3\2\2\2\u00a7\u00a5\3\2\2\2")
        buf.write("\u00a7\u00a8\3\2\2\2\u00a8\u00ad\3\2\2\2\u00a9\u00a7\3")
        buf.write("\2\2\2\u00aa\u00ac\5\32\16\2\u00ab\u00aa\3\2\2\2\u00ac")
        buf.write("\u00af\3\2\2\2\u00ad\u00ab\3\2\2\2\u00ad\u00ae\3\2\2\2")
        buf.write("\u00ae\u00b0\3\2\2\2\u00af\u00ad\3\2\2\2\u00b0\u00b1\7")
        buf.write("\2\2\3\u00b1\3\3\2\2\2\u00b2\u00b3\7\4\2\2\u00b3\u00b4")
        buf.write("\7\u009c\2\2\u00b4\u00b5\5\34\17\2\u00b5\u00b6\7\u009d")
        buf.write("\2\2\u00b6\u00b7\7\3\2\2\u00b7\5\3\2\2\2\u00b8\u00b9\7")
        buf.write("/\2\2\u00b9\u00ba\7\60\2\2\u00ba\u00bb\7\u009c\2\2\u00bb")
        buf.write("\u00bc\5\"\22\2\u00bc\u00bd\7\u009d\2\2\u00bd\u00be\7")
        buf.write("\3\2\2\u00be\7\3\2\2\2\u00bf\u00c0\7/\2\2\u00c0\u00c1")
        buf.write("\7\63\2\2\u00c1\u00c2\7\u009c\2\2\u00c2\u00c3\5&\24\2")
        buf.write("\u00c3\u00c4\7\u009d\2\2\u00c4\u00c5\7\3\2\2\u00c5\t\3")
        buf.write("\2\2\2\u00c6\u00c7\7/\2\2\u00c7\u00c8\7\67\2\2\u00c8\u00c9")
        buf.write("\7\u009c\2\2\u00c9\u00ca\5*\26\2\u00ca\u00cb\7\u009d\2")
        buf.write("\2\u00cb\u00cc\7\3\2\2\u00cc\13\3\2\2\2\u00cd\u00ce\7")
        buf.write(":\2\2\u00ce\u00cf\7\u009c\2\2\u00cf\u00d0\5,\27\2\u00d0")
        buf.write("\u00d1\7\u009d\2\2\u00d1\u00d2\7\3\2\2\u00d2\r\3\2\2\2")
        buf.write("\u00d3\u00d4\7>\2\2\u00d4\u00d5\7\u009c\2\2\u00d5\u00d6")
        buf.write("\5\60\31\2\u00d6\u00d7\7\u009d\2\2\u00d7\u00d8\7\3\2\2")
        buf.write("\u00d8\17\3\2\2\2\u00d9\u00da\7@\2\2\u00da\u00db\7\u009c")
        buf.write("\2\2\u00db\u00dc\5\64\33\2\u00dc\u00dd\7\u009d\2\2\u00dd")
        buf.write("\u00de\7\3\2\2\u00de\21\3\2\2\2\u00df\u00e0\7F\2\2\u00e0")
        buf.write("\u00e1\7\u009c\2\2\u00e1\u00e2\5:\36\2\u00e2\u00e3\7\u009d")
        buf.write("\2\2\u00e3\u00e4\7\3\2\2\u00e4\23\3\2\2\2\u00e5\u00e6")
        buf.write("\7T\2\2\u00e6\u00e7\7\u009c\2\2\u00e7\u00e8\5N(\2\u00e8")
        buf.write("\u00e9\7\u009d\2\2\u00e9\u00ea\7\3\2\2\u00ea\25\3\2\2")
        buf.write("\2\u00eb\u00ec\7Y\2\2\u00ec\u00ed\7\u009c\2\2\u00ed\u00ee")
        buf.write("\5R*\2\u00ee\u00ef\7\u009d\2\2\u00ef\u00f0\7\3\2\2\u00f0")
        buf.write("\27\3\2\2\2\u00f1\u00f2\7Z\2\2\u00f2\u00f3\7\u009c\2\2")
        buf.write("\u00f3\u00f4\5V,\2\u00f4\u00f5\7\u009d\2\2\u00f5\u00f6")
        buf.write("\7\3\2\2\u00f6\31\3\2\2\2\u00f7\u00f8\7[\2\2\u00f8\u00f9")
        buf.write("\7\u009c\2\2\u00f9\u00fa\5Z.\2\u00fa\u00fb\7\u009d\2\2")
        buf.write("\u00fb\u00fc\7\3\2\2\u00fc\33\3\2\2\2\u00fd\u00fe\7\5")
        buf.write("\2\2\u00fe\u00ff\7\u009f\2\2\u00ff\u0176\7$\2\2\u0100")
        buf.write("\u0102\5\36\20\2\u0101\u0100\3\2\2\2\u0102\u0105\3\2\2")
        buf.write("\2\u0103\u0101\3\2\2\2\u0103\u0104\3\2\2\2\u0104\u0176")
        buf.write("\3\2\2\2\u0105\u0103\3\2\2\2\u0106\u0107\7\7\2\2\u0107")
        buf.write("\u0108\7\u008f\2\2\u0108\u0176\7\u008c\2\2\u0109\u010a")
        buf.write("\7\b\2\2\u010a\u010b\7\u008f\2\2\u010b\u0176\7)\2\2\u010c")
        buf.write("\u010d\7\t\2\2\u010d\u010e\7\u008f\2\2\u010e\u0176\7\u008c")
        buf.write("\2\2\u010f\u0110\7\n\2\2\u0110\u0111\7\u009f\2\2\u0111")
        buf.write("\u0176\7\u008c\2\2\u0112\u0113\7\13\2\2\u0113\u0114\7")
        buf.write("\u009f\2\2\u0114\u0176\7\u008e\2\2\u0115\u0116\7\f\2\2")
        buf.write("\u0116\u0176\7\u008e\2\2\u0117\u0118\7\r\2\2\u0118\u0119")
        buf.write("\7\u009f\2\2\u0119\u0176\7\u008a\2\2\u011a\u011b\7\16")
        buf.write("\2\2\u011b\u0176\7%\2\2\u011c\u011d\7\16\2\2\u011d\u011e")
        buf.write("\7&\2\2\u011e\u011f\7\'\2\2\u011f\u0120\7\u009f\2\2\u0120")
        buf.write("\u0121\7\u008c\2\2\u0121\u0122\7(\2\2\u0122\u0123\7\u009f")
        buf.write("\2\2\u0123\u0176\7\u008c\2\2\u0124\u0125\7\17\2\2\u0125")
        buf.write("\u0126\7\u008e\2\2\u0126\u0127\7\u008e\2\2\u0127\u0176")
        buf.write("\7\u008c\2\2\u0128\u012c\7\20\2\2\u0129\u012b\7\u009c")
        buf.write("\2\2\u012a\u0129\3\2\2\2\u012b\u012e\3\2\2\2\u012c\u012d")
        buf.write("\3\2\2\2\u012c\u012a\3\2\2\2\u012d\u012f\3\2\2\2\u012e")
        buf.write("\u012c\3\2\2\2\u012f\u0130\7\u009d\2\2\u0130\u0176\7\3")
        buf.write("\2\2\u0131\u0132\7\21\2\2\u0132\u0133\7\u008f\2\2\u0133")
        buf.write("\u0176\7\u008a\2\2\u0134\u0135\7\22\2\2\u0135\u0136\7")
        buf.write("\u008f\2\2\u0136\u0176\7\u008a\2\2\u0137\u0138\7\23\2")
        buf.write("\2\u0138\u0139\7\u009f\2\2\u0139\u0176\7\u008a\2\2\u013a")
        buf.write("\u0176\7\24\2\2\u013b\u013c\7\25\2\2\u013c\u013d\7\u009f")
        buf.write("\2\2\u013d\u0176\7\u008a\2\2\u013e\u013f\7\26\2\2\u013f")
        buf.write("\u0140\7\u008f\2\2\u0140\u0176\7*\2\2\u0141\u0142\7\27")
        buf.write("\2\2\u0142\u0143\7\u009c\2\2\u0143\u0144\5 \21\2\u0144")
        buf.write("\u0145\7\u009d\2\2\u0145\u0146\7\3\2\2\u0146\u0176\3\2")
        buf.write("\2\2\u0147\u0148\7\30\2\2\u0148\u0149\7\32\2\2\u0149\u014a")
        buf.write("\7\u009f\2\2\u014a\u0176\7\u008c\2\2\u014b\u014c\7\31")
        buf.write("\2\2\u014c\u0150\7\u008e\2\2\u014d\u014f\7\u009c\2\2\u014e")
        buf.write("\u014d\3\2\2\2\u014f\u0152\3\2\2\2\u0150\u0151\3\2\2\2")
        buf.write("\u0150\u014e\3\2\2\2\u0151\u0153\3\2\2\2\u0152\u0150\3")
        buf.write("\2\2\2\u0153\u0154\7\u009d\2\2\u0154\u0176\7\3\2\2\u0155")
        buf.write("\u0176\7\33\2\2\u0156\u0157\7\34\2\2\u0157\u0158\7\u008f")
        buf.write("\2\2\u0158\u0176\7\u008c\2\2\u0159\u015a\7\35\2\2\u015a")
        buf.write("\u015b\7\u008f\2\2\u015b\u0176\7\u008c\2\2\u015c\u015d")
        buf.write("\7\36\2\2\u015d\u015e\7\u008f\2\2\u015e\u0176\7\u008c")
        buf.write("\2\2\u015f\u0160\7\37\2\2\u0160\u0161\7\u008f\2\2\u0161")
        buf.write("\u0176\7\u008c\2\2\u0162\u0163\7 \2\2\u0163\u0164\7\u008f")
        buf.write("\2\2\u0164\u0176\7\u008c\2\2\u0165\u0166\7!\2\2\u0166")
        buf.write("\u0167\7\u008f\2\2\u0167\u0176\7\u008c\2\2\u0168\u0169")
        buf.write("\7\"\2\2\u0169\u016d\7\u008e\2\2\u016a\u016c\7\u009c\2")
        buf.write("\2\u016b\u016a\3\2\2\2\u016c\u016f\3\2\2\2\u016d\u016e")
        buf.write("\3\2\2\2\u016d\u016b\3\2\2\2\u016e\u0170\3\2\2\2\u016f")
        buf.write("\u016d\3\2\2\2\u0170\u0171\7\u009d\2\2\u0171\u0176\7\3")
        buf.write("\2\2\u0172\u0173\7#\2\2\u0173\u0174\7\u009f\2\2\u0174")
        buf.write("\u0176\7\u008c\2\2\u0175\u00fd\3\2\2\2\u0175\u0103\3\2")
        buf.write("\2\2\u0175\u0106\3\2\2\2\u0175\u0109\3\2\2\2\u0175\u010c")
        buf.write("\3\2\2\2\u0175\u010f\3\2\2\2\u0175\u0112\3\2\2\2\u0175")
        buf.write("\u0115\3\2\2\2\u0175\u0117\3\2\2\2\u0175\u011a\3\2\2\2")
        buf.write("\u0175\u011c\3\2\2\2\u0175\u0124\3\2\2\2\u0175\u0128\3")
        buf.write("\2\2\2\u0175\u0131\3\2\2\2\u0175\u0134\3\2\2\2\u0175\u0137")
        buf.write("\3\2\2\2\u0175\u013a\3\2\2\2\u0175\u013b\3\2\2\2\u0175")
        buf.write("\u013e\3\2\2\2\u0175\u0141\3\2\2\2\u0175\u0147\3\2\2\2")
        buf.write("\u0175\u014b\3\2\2\2\u0175\u0155\3\2\2\2\u0175\u0156\3")
        buf.write("\2\2\2\u0175\u0159\3\2\2\2\u0175\u015c\3\2\2\2\u0175\u015f")
        buf.write("\3\2\2\2\u0175\u0162\3\2\2\2\u0175\u0165\3\2\2\2\u0175")
        buf.write("\u0168\3\2\2\2\u0175\u0172\3\2\2\2\u0176\35\3\2\2\2\u0177")
        buf.write("\u0178\7\6\2\2\u0178\u0179\5^\60\2\u0179\u017a\5^\60\2")
        buf.write("\u017a\u017b\7\u008c\2\2\u017b\u017c\7\u008c\2\2\u017c")
        buf.write("\u0183\7\u008c\2\2\u017d\u017e\7\u0085\2\2\u017e\u017f")
        buf.write("\5^\60\2\u017f\u0180\5^\60\2\u0180\u0182\3\2\2\2\u0181")
        buf.write("\u017d\3\2\2\2\u0182\u0185\3\2\2\2\u0183\u0181\3\2\2\2")
        buf.write("\u0183\u0184\3\2\2\2\u0184\37\3\2\2\2\u0185\u0183\3\2")
        buf.write("\2\2\u0186\u0187\7+\2\2\u0187\u0188\7\u009f\2\2\u0188")
        buf.write("\u0191\7\u008c\2\2\u0189\u018a\7,\2\2\u018a\u018b\7\u009f")
        buf.write("\2\2\u018b\u0191\7\u008c\2\2\u018c\u018d\7-\2\2\u018d")
        buf.write("\u0191\5^\60\2\u018e\u018f\7.\2\2\u018f\u0191\5^\60\2")
        buf.write("\u0190\u0186\3\2\2\2\u0190\u0189\3\2\2\2\u0190\u018c\3")
        buf.write("\2\2\2\u0190\u018e\3\2\2\2\u0191!\3\2\2\2\u0192\u0194")
        buf.write("\5$\23\2\u0193\u0192\3\2\2\2\u0194\u0197\3\2\2\2\u0195")
        buf.write("\u0193\3\2\2\2\u0195\u0196\3\2\2\2\u0196\u01a7\3\2\2\2")
        buf.write("\u0197\u0195\3\2\2\2\u0198\u0199\7\r\2\2\u0199\u019a\7")
        buf.write("\u009f\2\2\u019a\u01a7\7\u008a\2\2\u019b\u019c\7\61\2")
        buf.write("\2\u019c\u019d\7\u009f\2\2\u019d\u01a7\7\u008a\2\2\u019e")
        buf.write("\u019f\7\25\2\2\u019f\u01a0\7\u009f\2\2\u01a0\u01a7\7")
        buf.write("\u008a\2\2\u01a1\u01a7\7\33\2\2\u01a2\u01a3\7\35\2\2\u01a3")
        buf.write("\u01a4\7\u009f\2\2\u01a4\u01a7\7\u008c\2\2\u01a5\u01a7")
        buf.write("\7\62\2\2\u01a6\u0195\3\2\2\2\u01a6\u0198\3\2\2\2\u01a6")
        buf.write("\u019b\3\2\2\2\u01a6\u019e\3\2\2\2\u01a6\u01a1\3\2\2\2")
        buf.write("\u01a6\u01a2\3\2\2\2\u01a6\u01a5\3\2\2\2\u01a7#\3\2\2")
        buf.write("\2\u01a8\u01a9\7\6\2\2\u01a9\u01aa\5^\60\2\u01aa\u01ab")
        buf.write("\5^\60\2\u01ab\u01ac\5^\60\2\u01ac\u01ad\5^\60\2\u01ad")
        buf.write("\u01ae\7\u008c\2\2\u01ae\u01af\7\u008c\2\2\u01af\u01b0")
        buf.write("\7\u008c\2\2\u01b0\u01b1\7\u008a\2\2\u01b1%\3\2\2\2\u01b2")
        buf.write("\u01b3\7\64\2\2\u01b3\u01b4\7\u009c\2\2\u01b4\u01b5\5")
        buf.write("(\25\2\u01b5\u01b6\7\u009d\2\2\u01b6\u01ba\3\2\2\2\u01b7")
        buf.write("\u01ba\7%\2\2\u01b8\u01ba\7\62\2\2\u01b9\u01b2\3\2\2\2")
        buf.write("\u01b9\u01b7\3\2\2\2\u01b9\u01b8\3\2\2\2\u01ba\'\3\2\2")
        buf.write("\2\u01bb\u01bc\7\65\2\2\u01bc\u01bd\7\u009f\2\2\u01bd")
        buf.write("\u01c2\5^\60\2\u01be\u01bf\7\66\2\2\u01bf\u01c0\7\u009f")
        buf.write("\2\2\u01c0\u01c2\7\u008c\2\2\u01c1\u01bb\3\2\2\2\u01c1")
        buf.write("\u01be\3\2\2\2\u01c2)\3\2\2\2\u01c3\u01c4\78\2\2\u01c4")
        buf.write("\u01c5\7\u009f\2\2\u01c5\u01ca\7\u008a\2\2\u01c6\u01c7")
        buf.write("\79\2\2\u01c7\u01c8\7\u009f\2\2\u01c8\u01ca\5f\64\2\u01c9")
        buf.write("\u01c3\3\2\2\2\u01c9\u01c6\3\2\2\2\u01ca+\3\2\2\2\u01cb")
        buf.write("\u01cd\5.\30\2\u01cc\u01cb\3\2\2\2\u01cd\u01d0\3\2\2\2")
        buf.write("\u01ce\u01cc\3\2\2\2\u01ce\u01cf\3\2\2\2\u01cf\u01e6\3")
        buf.write("\2\2\2\u01d0\u01ce\3\2\2\2\u01d1\u01d2\7\13\2\2\u01d2")
        buf.write("\u01d3\7\u009f\2\2\u01d3\u01e6\7\u008e\2\2\u01d4\u01d5")
        buf.write("\7;\2\2\u01d5\u01d6\7\u008c\2\2\u01d6\u01d7\7\u008c\2")
        buf.write("\2\u01d7\u01e6\7\u008c\2\2\u01d8\u01d9\7<\2\2\u01d9\u01da")
        buf.write("\7\u009f\2\2\u01da\u01e6\7\u008c\2\2\u01db\u01dc\7\23")
        buf.write("\2\2\u01dc\u01dd\7\u009f\2\2\u01dd\u01e6\7\u008a\2\2\u01de")
        buf.write("\u01df\7\26\2\2\u01df\u01e0\7\u009f\2\2\u01e0\u01e6\7")
        buf.write("=\2\2\u01e1\u01e2\7\30\2\2\u01e2\u01e3\7\32\2\2\u01e3")
        buf.write("\u01e6\7\u008c\2\2\u01e4\u01e6\7\33\2\2\u01e5\u01ce\3")
        buf.write("\2\2\2\u01e5\u01d1\3\2\2\2\u01e5\u01d4\3\2\2\2\u01e5\u01d8")
        buf.write("\3\2\2\2\u01e5\u01db\3\2\2\2\u01e5\u01de\3\2\2\2\u01e5")
        buf.write("\u01e1\3\2\2\2\u01e5\u01e4\3\2\2\2\u01e6-\3\2\2\2\u01e7")
        buf.write("\u01e8\7\6\2\2\u01e8\u01e9\5^\60\2\u01e9\u01ea\5^\60\2")
        buf.write("\u01ea\u01eb\5^\60\2\u01eb\u01ec\5^\60\2\u01ec\u01ed\5")
        buf.write("^\60\2\u01ed\u01ee\5^\60\2\u01ee\u01ef\7\u008c\2\2\u01ef")
        buf.write("\u01f0\7\u008c\2\2\u01f0/\3\2\2\2\u01f1\u01f3\5\62\32")
        buf.write("\2\u01f2\u01f1\3\2\2\2\u01f3\u01f6\3\2\2\2\u01f4\u01f2")
        buf.write("\3\2\2\2\u01f4\u01f5\3\2\2\2\u01f5\u021b\3\2\2\2\u01f6")
        buf.write("\u01f4\3\2\2\2\u01f7\u01f8\7\13\2\2\u01f8\u01f9\7\u009f")
        buf.write("\2\2\u01f9\u021b\7\u008e\2\2\u01fa\u01fb\7;\2\2\u01fb")
        buf.write("\u01fc\7\u008c\2\2\u01fc\u01fd\7\u008c\2\2\u01fd\u01fe")
        buf.write("\7\u008c\2\2\u01fe\u021b\7\u008c\2\2\u01ff\u0200\7\r\2")
        buf.write("\2\u0200\u0201\7\u009f\2\2\u0201\u021b\7\u008a\2\2\u0202")
        buf.write("\u0203\7<\2\2\u0203\u0205\7\u008c\2\2\u0204\u0206\7\u008c")
        buf.write("\2\2\u0205\u0204\3\2\2\2\u0205\u0206\3\2\2\2\u0206\u021b")
        buf.write("\3\2\2\2\u0207\u0208\7\23\2\2\u0208\u0209\7\u009f\2\2")
        buf.write("\u0209\u021b\7\u008a\2\2\u020a\u020b\7\25\2\2\u020b\u020c")
        buf.write("\7\u009f\2\2\u020c\u021b\7\u008a\2\2\u020d\u020e\7\26")
        buf.write("\2\2\u020e\u020f\7\u009f\2\2\u020f\u021b\7?\2\2\u0210")
        buf.write("\u0211\7\30\2\2\u0211\u0212\7\32\2\2\u0212\u0217\7\u008c")
        buf.write("\2\2\u0213\u0218\7_\2\2\u0214\u0215\7\13\2\2\u0215\u0216")
        buf.write("\7\u009f\2\2\u0216\u0218\7\u008e\2\2\u0217\u0213\3\2\2")
        buf.write("\2\u0217\u0214\3\2\2\2\u0218\u021b\3\2\2\2\u0219\u021b")
        buf.write("\7\33\2\2\u021a\u01f4\3\2\2\2\u021a\u01f7\3\2\2\2\u021a")
        buf.write("\u01fa\3\2\2\2\u021a\u01ff\3\2\2\2\u021a\u0202\3\2\2\2")
        buf.write("\u021a\u0207\3\2\2\2\u021a\u020a\3\2\2\2\u021a\u020d\3")
        buf.write("\2\2\2\u021a\u0210\3\2\2\2\u021a\u0219\3\2\2\2\u021b\61")
        buf.write("\3\2\2\2\u021c\u021d\7\6\2\2\u021d\u021e\5^\60\2\u021e")
        buf.write("\u021f\5^\60\2\u021f\u0220\5^\60\2\u0220\u0226\5^\60\2")
        buf.write("\u0221\u0222\5^\60\2\u0222\u0223\5^\60\2\u0223\u0224\5")
        buf.write("^\60\2\u0224\u0225\5^\60\2\u0225\u0227\3\2\2\2\u0226\u0221")
        buf.write("\3\2\2\2\u0226\u0227\3\2\2\2\u0227\u0228\3\2\2\2\u0228")
        buf.write("\u0229\7\u008c\2\2\u0229\u022c\7\u008c\2\2\u022a\u022b")
        buf.write("\7\u008c\2\2\u022b\u022d\7\u008c\2\2\u022c\u022a\3\2\2")
        buf.write("\2\u022c\u022d\3\2\2\2\u022d\63\3\2\2\2\u022e\u0230\5")
        buf.write("\66\34\2\u022f\u022e\3\2\2\2\u0230\u0233\3\2\2\2\u0231")
        buf.write("\u022f\3\2\2\2\u0231\u0232\3\2\2\2\u0232\u0258\3\2\2\2")
        buf.write("\u0233\u0231\3\2\2\2\u0234\u0235\7\13\2\2\u0235\u0236")
        buf.write("\7\u009f\2\2\u0236\u0258\7\u008e\2\2\u0237\u0238\7A\2")
        buf.write("\2\u0238\u0239\7\u008a\2\2\u0239\u023a\7\u008a\2\2\u023a")
        buf.write("\u023b\7\u008c\2\2\u023b\u023c\7\u008c\2\2\u023c\u0258")
        buf.write("\7\u008c\2\2\u023d\u023e\7<\2\2\u023e\u023f\7\u009f\2")
        buf.write("\2\u023f\u0258\7\u008c\2\2\u0240\u0241\7\23\2\2\u0241")
        buf.write("\u0242\7\u009f\2\2\u0242\u0258\7\u008a\2\2\u0243\u0244")
        buf.write("\7B\2\2\u0244\u0245\7\u009f\2\2\u0245\u0258\7\u008c\2")
        buf.write("\2\u0246\u0247\7C\2\2\u0247\u0248\7\u009f\2\2\u0248\u0258")
        buf.write("\7\u008c\2\2\u0249\u024a\7\26\2\2\u024a\u024b\7\u009f")
        buf.write("\2\2\u024b\u0258\7=\2\2\u024c\u024d\7\30\2\2\u024d\u024e")
        buf.write("\7\32\2\2\u024e\u0258\7\u008c\2\2\u024f\u0251\58\35\2")
        buf.write("\u0250\u024f\3\2\2\2\u0251\u0254\3\2\2\2\u0252\u0250\3")
        buf.write("\2\2\2\u0252\u0253\3\2\2\2\u0253\u0258\3\2\2\2\u0254\u0252")
        buf.write("\3\2\2\2\u0255\u0258\7\33\2\2\u0256\u0258\7E\2\2\u0257")
        buf.write("\u0231\3\2\2\2\u0257\u0234\3\2\2\2\u0257\u0237\3\2\2\2")
        buf.write("\u0257\u023d\3\2\2\2\u0257\u0240\3\2\2\2\u0257\u0243\3")
        buf.write("\2\2\2\u0257\u0246\3\2\2\2\u0257\u0249\3\2\2\2\u0257\u024c")
        buf.write("\3\2\2\2\u0257\u0252\3\2\2\2\u0257\u0255\3\2\2\2\u0257")
        buf.write("\u0256\3\2\2\2\u0258\65\3\2\2\2\u0259\u025a\7\6\2\2\u025a")
        buf.write("\u025b\5^\60\2\u025b\u025c\5^\60\2\u025c\u025d\5^\60\2")
        buf.write("\u025d\u025e\5^\60\2\u025e\u025f\5^\60\2\u025f\u0260\7")
        buf.write("\u008c\2\2\u0260\u0261\7\u008c\2\2\u0261\67\3\2\2\2\u0262")
        buf.write("\u0263\7D\2\2\u0263\u0264\5^\60\2\u0264\u0265\7\u008c")
        buf.write("\2\2\u0265\u0266\7\u008c\2\2\u02669\3\2\2\2\u0267\u0269")
        buf.write("\5<\37\2\u0268\u0267\3\2\2\2\u0269\u026c\3\2\2\2\u026a")
        buf.write("\u0268\3\2\2\2\u026a\u026b\3\2\2\2\u026b\u02b8\3\2\2\2")
        buf.write("\u026c\u026a\3\2\2\2\u026d\u026f\5> \2\u026e\u026d\3\2")
        buf.write("\2\2\u026f\u0272\3\2\2\2\u0270\u026e\3\2\2\2\u0270\u0271")
        buf.write("\3\2\2\2\u0271\u02b8\3\2\2\2\u0272\u0270\3\2\2\2\u0273")
        buf.write("\u0275\5@!\2\u0274\u0273\3\2\2\2\u0275\u0278\3\2\2\2\u0276")
        buf.write("\u0274\3\2\2\2\u0276\u0277\3\2\2\2\u0277\u02b8\3\2\2\2")
        buf.write("\u0278\u0276\3\2\2\2\u0279\u027b\5B\"\2\u027a\u0279\3")
        buf.write("\2\2\2\u027b\u027e\3\2\2\2\u027c\u027a\3\2\2\2\u027c\u027d")
        buf.write("\3\2\2\2\u027d\u02b8\3\2\2\2\u027e\u027c\3\2\2\2\u027f")
        buf.write("\u0281\5D#\2\u0280\u027f\3\2\2\2\u0281\u0284\3\2\2\2\u0282")
        buf.write("\u0280\3\2\2\2\u0282\u0283\3\2\2\2\u0283\u02b8\3\2\2\2")
        buf.write("\u0284\u0282\3\2\2\2\u0285\u0287\5F$\2\u0286\u0285\3\2")
        buf.write("\2\2\u0287\u028a\3\2\2\2\u0288\u0286\3\2\2\2\u0288\u0289")
        buf.write("\3\2\2\2\u0289\u02b8\3\2\2\2\u028a\u0288\3\2\2\2\u028b")
        buf.write("\u028d\5H%\2\u028c\u028b\3\2\2\2\u028d\u0290\3\2\2\2\u028e")
        buf.write("\u028c\3\2\2\2\u028e\u028f\3\2\2\2\u028f\u02b8\3\2\2\2")
        buf.write("\u0290\u028e\3\2\2\2\u0291\u0293\5J&\2\u0292\u0291\3\2")
        buf.write("\2\2\u0293\u0296\3\2\2\2\u0294\u0292\3\2\2\2\u0294\u0295")
        buf.write("\3\2\2\2\u0295\u02b8\3\2\2\2\u0296\u0294\3\2\2\2\u0297")
        buf.write("\u0299\5L\'\2\u0298\u0297\3\2\2\2\u0299\u029c\3\2\2\2")
        buf.write("\u029a\u0298\3\2\2\2\u029a\u029b\3\2\2\2\u029b\u02b8\3")
        buf.write("\2\2\2\u029c\u029a\3\2\2\2\u029d\u029e\7\13\2\2\u029e")
        buf.write("\u029f\7\u009f\2\2\u029f\u02b8\7\u008e\2\2\u02a0\u02a2")
        buf.write("\7O\2\2\u02a1\u02a3\7\u009f\2\2\u02a2\u02a1\3\2\2\2\u02a2")
        buf.write("\u02a3\3\2\2\2\u02a3\u02a4\3\2\2\2\u02a4\u02b8\7\u008c")
        buf.write("\2\2\u02a5\u02a6\7<\2\2\u02a6\u02a8\7\u008c\2\2\u02a7")
        buf.write("\u02a9\7\u008c\2\2\u02a8\u02a7\3\2\2\2\u02a8\u02a9\3\2")
        buf.write("\2\2\u02a9\u02b8\3\2\2\2\u02aa\u02ab\7\26\2\2\u02ab\u02b8")
        buf.write("\7?\2\2\u02ac\u02ad\7\30\2\2\u02ad\u02ae\7\32\2\2\u02ae")
        buf.write("\u02b3\7\u008c\2\2\u02af\u02b4\7_\2\2\u02b0\u02b1\7\13")
        buf.write("\2\2\u02b1\u02b2\7\u009f\2\2\u02b2\u02b4\7\u008e\2\2\u02b3")
        buf.write("\u02af\3\2\2\2\u02b3\u02b0\3\2\2\2\u02b4\u02b5\3\2\2\2")
        buf.write("\u02b5\u02b8\7S\2\2\u02b6\u02b8\7\33\2\2\u02b7\u026a\3")
        buf.write("\2\2\2\u02b7\u0270\3\2\2\2\u02b7\u0276\3\2\2\2\u02b7\u027c")
        buf.write("\3\2\2\2\u02b7\u0282\3\2\2\2\u02b7\u0288\3\2\2\2\u02b7")
        buf.write("\u028e\3\2\2\2\u02b7\u0294\3\2\2\2\u02b7\u029a\3\2\2\2")
        buf.write("\u02b7\u029d\3\2\2\2\u02b7\u02a0\3\2\2\2\u02b7\u02a5\3")
        buf.write("\2\2\2\u02b7\u02aa\3\2\2\2\u02b7\u02ac\3\2\2\2\u02b7\u02b6")
        buf.write("\3\2\2\2\u02b8;\3\2\2\2\u02b9\u02ba\7G\2\2\u02ba\u02bc")
        buf.write("\5^\60\2\u02bb\u02bd\5^\60\2\u02bc\u02bb\3\2\2\2\u02bc")
        buf.write("\u02bd\3\2\2\2\u02bd\u02be\3\2\2\2\u02be\u02c0\7\u008c")
        buf.write("\2\2\u02bf\u02c1\7\u008c\2\2\u02c0\u02bf\3\2\2\2\u02c0")
        buf.write("\u02c1\3\2\2\2\u02c1=\3\2\2\2\u02c2\u02c3\7D\2\2\u02c3")
        buf.write("\u02c4\5^\60\2\u02c4\u02c5\7\u008c\2\2\u02c5?\3\2\2\2")
        buf.write("\u02c6\u02c7\7H\2\2\u02c7\u02c8\5^\60\2\u02c8\u02c9\5")
        buf.write("^\60\2\u02c9\u02ca\5^\60\2\u02ca\u02cc\7P\2\2\u02cb\u02cd")
        buf.write("\7\u008b\2\2\u02cc\u02cb\3\2\2\2\u02cc\u02cd\3\2\2\2\u02cd")
        buf.write("\u02ce\3\2\2\2\u02ce\u02cf\7Q\2\2\u02cfA\3\2\2\2\u02d0")
        buf.write("\u02d1\7I\2\2\u02d1\u02d2\5^\60\2\u02d2C\3\2\2\2\u02d3")
        buf.write("\u02d4\7J\2\2\u02d4\u02d5\5^\60\2\u02d5E\3\2\2\2\u02d6")
        buf.write("\u02d7\7K\2\2\u02d7\u02d8\5^\60\2\u02d8G\3\2\2\2\u02d9")
        buf.write("\u02da\7L\2\2\u02da\u02db\5^\60\2\u02dbI\3\2\2\2\u02dc")
        buf.write("\u02dd\7M\2\2\u02dd\u02de\7R\2\2\u02de\u02df\5^\60\2\u02df")
        buf.write("\u02e0\5^\60\2\u02e0\u02e1\5^\60\2\u02e1\u02e2\5^\60\2")
        buf.write("\u02e2\u02e4\5^\60\2\u02e3\u02e5\5^\60\2\u02e4\u02e3\3")
        buf.write("\2\2\2\u02e4\u02e5\3\2\2\2\u02e5K\3\2\2\2\u02e6\u02e7")
        buf.write("\7N\2\2\u02e7\u02e8\5^\60\2\u02e8M\3\2\2\2\u02e9\u02eb")
        buf.write("\5P)\2\u02ea\u02e9\3\2\2\2\u02eb\u02ee\3\2\2\2\u02ec\u02ea")
        buf.write("\3\2\2\2\u02ec\u02ed\3\2\2\2\u02ed\u0336\3\2\2\2\u02ee")
        buf.write("\u02ec\3\2\2\2\u02ef\u02f0\7\13\2\2\u02f0\u02f1\7\u009f")
        buf.write("\2\2\u02f1\u0336\7\u008e\2\2\u02f2\u0336\7U\2\2\u02f3")
        buf.write("\u02f4\7A\2\2\u02f4\u02f6\7\u008a\2\2\u02f5\u02f7\7\u008a")
        buf.write("\2\2\u02f6\u02f5\3\2\2\2\u02f6\u02f7\3\2\2\2\u02f7\u02f9")
        buf.write("\3\2\2\2\u02f8\u02fa\7\u008a\2\2\u02f9\u02f8\3\2\2\2\u02f9")
        buf.write("\u02fa\3\2\2\2\u02fa\u02fc\3\2\2\2\u02fb\u02fd\7\u008a")
        buf.write("\2\2\u02fc\u02fb\3\2\2\2\u02fc\u02fd\3\2\2\2\u02fd\u02fe")
        buf.write("\3\2\2\2\u02fe\u0336\7\u008c\2\2\u02ff\u0300\7O\2\2\u0300")
        buf.write("\u0301\7\u009f\2\2\u0301\u0336\7\u008c\2\2\u0302\u0303")
        buf.write("\7<\2\2\u0303\u0304\7\u009f\2\2\u0304\u0336\7\u008c\2")
        buf.write("\2\u0305\u0306\7\23\2\2\u0306\u0307\7\u009f\2\2\u0307")
        buf.write("\u0336\7\u008a\2\2\u0308\u0309\7V\2\2\u0309\u030a\7\u008a")
        buf.write("\2\2\u030a\u030b\7\u008a\2\2\u030b\u030f\7\u008a\2\2\u030c")
        buf.write("\u030d\7\u008a\2\2\u030d\u030e\7\u008a\2\2\u030e\u0310")
        buf.write("\7\u008a\2\2\u030f\u030c\3\2\2\2\u030f\u0310\3\2\2\2\u0310")
        buf.write("\u0314\3\2\2\2\u0311\u0312\7\u008a\2\2\u0312\u0313\7\u008a")
        buf.write("\2\2\u0313\u0315\7\u008a\2\2\u0314\u0311\3\2\2\2\u0314")
        buf.write("\u0315\3\2\2\2\u0315\u0319\3\2\2\2\u0316\u0317\7\u008a")
        buf.write("\2\2\u0317\u0318\7\u008a\2\2\u0318\u031a\7\u008a\2\2\u0319")
        buf.write("\u0316\3\2\2\2\u0319\u031a\3\2\2\2\u031a\u0336\3\2\2\2")
        buf.write("\u031b\u031c\7\26\2\2\u031c\u031d\7\u009f\2\2\u031d\u0336")
        buf.write("\7=\2\2\u031e\u031f\7\30\2\2\u031f\u0320\7\32\2\2\u0320")
        buf.write("\u0325\7\u008c\2\2\u0321\u0326\7_\2\2\u0322\u0323\7\13")
        buf.write("\2\2\u0323\u0324\7\u009f\2\2\u0324\u0326\7\u008e\2\2\u0325")
        buf.write("\u0321\3\2\2\2\u0325\u0322\3\2\2\2\u0326\u0336\3\2\2\2")
        buf.write("\u0327\u0336\7\33\2\2\u0328\u0329\7W\2\2\u0329\u032a\7")
        buf.write("X\2\2\u032a\u032c\7\u008a\2\2\u032b\u032d\7\u008a\2\2")
        buf.write("\u032c\u032b\3\2\2\2\u032c\u032d\3\2\2\2\u032d\u032f\3")
        buf.write("\2\2\2\u032e\u0330\7\u008a\2\2\u032f\u032e\3\2\2\2\u032f")
        buf.write("\u0330\3\2\2\2\u0330\u0332\3\2\2\2\u0331\u0333\7\u008a")
        buf.write("\2\2\u0332\u0331\3\2\2\2\u0332\u0333\3\2\2\2\u0333\u0336")
        buf.write("\3\2\2\2\u0334\u0336\7E\2\2\u0335\u02ec\3\2\2\2\u0335")
        buf.write("\u02ef\3\2\2\2\u0335\u02f2\3\2\2\2\u0335\u02f3\3\2\2\2")
        buf.write("\u0335\u02ff\3\2\2\2\u0335\u0302\3\2\2\2\u0335\u0305\3")
        buf.write("\2\2\2\u0335\u0308\3\2\2\2\u0335\u031b\3\2\2\2\u0335\u031e")
        buf.write("\3\2\2\2\u0335\u0327\3\2\2\2\u0335\u0328\3\2\2\2\u0335")
        buf.write("\u0334\3\2\2\2\u0336O\3\2\2\2\u0337\u0338\7\6\2\2\u0338")
        buf.write("\u0339\5^\60\2\u0339\u033a\5^\60\2\u033a\u033b\5^\60\2")
        buf.write("\u033b\u0341\5^\60\2\u033c\u033d\5^\60\2\u033d\u033e\5")
        buf.write("^\60\2\u033e\u033f\5^\60\2\u033f\u0340\5^\60\2\u0340\u0342")
        buf.write("\3\2\2\2\u0341\u033c\3\2\2\2\u0341\u0342\3\2\2\2\u0342")
        buf.write("\u0348\3\2\2\2\u0343\u0344\5^\60\2\u0344\u0345\5^\60\2")
        buf.write("\u0345\u0346\5^\60\2\u0346\u0347\5^\60\2\u0347\u0349\3")
        buf.write("\2\2\2\u0348\u0343\3\2\2\2\u0348\u0349\3\2\2\2\u0349\u034f")
        buf.write("\3\2\2\2\u034a\u034b\5^\60\2\u034b\u034c\5^\60\2\u034c")
        buf.write("\u034d\5^\60\2\u034d\u034e\5^\60\2\u034e\u0350\3\2\2\2")
        buf.write("\u034f\u034a\3\2\2\2\u034f\u0350\3\2\2\2\u0350Q\3\2\2")
        buf.write("\2\u0351\u0353\5T+\2\u0352\u0351\3\2\2\2\u0353\u0356\3")
        buf.write("\2\2\2\u0354\u0352\3\2\2\2\u0354\u0355\3\2\2\2\u0355\u036e")
        buf.write("\3\2\2\2\u0356\u0354\3\2\2\2\u0357\u0358\7\13\2\2\u0358")
        buf.write("\u0359\7\u009f\2\2\u0359\u036e\7\u008e\2\2\u035a\u035b")
        buf.write("\7;\2\2\u035b\u035c\7\u008c\2\2\u035c\u035d\7\u008c\2")
        buf.write("\2\u035d\u035e\7\u008c\2\2\u035e\u035f\7\u008c\2\2\u035f")
        buf.write("\u036e\7\u008c\2\2\u0360\u0361\7<\2\2\u0361\u0362\7\u009f")
        buf.write("\2\2\u0362\u036e\7\u008c\2\2\u0363\u0364\7\23\2\2\u0364")
        buf.write("\u0365\7\u009f\2\2\u0365\u036e\7\u008a\2\2\u0366\u0367")
        buf.write("\7\26\2\2\u0367\u0368\7\u009f\2\2\u0368\u036e\7=\2\2\u0369")
        buf.write("\u036a\7\30\2\2\u036a\u036b\7\32\2\2\u036b\u036e\7\u008c")
        buf.write("\2\2\u036c\u036e\7\33\2\2\u036d\u0354\3\2\2\2\u036d\u0357")
        buf.write("\3\2\2\2\u036d\u035a\3\2\2\2\u036d\u0360\3\2\2\2\u036d")
        buf.write("\u0363\3\2\2\2\u036d\u0366\3\2\2\2\u036d\u0369\3\2\2\2")
        buf.write("\u036d\u036c\3\2\2\2\u036eS\3\2\2\2\u036f\u0370\7\6\2")
        buf.write("\2\u0370\u0371\5^\60\2\u0371\u0372\5^\60\2\u0372\u0373")
        buf.write("\5^\60\2\u0373\u0374\5^\60\2\u0374\u0375\5^\60\2\u0375")
        buf.write("\u0376\5^\60\2\u0376\u0377\7\u008c\2\2\u0377\u0378\7\u008c")
        buf.write("\2\2\u0378U\3\2\2\2\u0379\u037b\5X-\2\u037a\u0379\3\2")
        buf.write("\2\2\u037b\u037e\3\2\2\2\u037c\u037a\3\2\2\2\u037c\u037d")
        buf.write("\3\2\2\2\u037d\u0398\3\2\2\2\u037e\u037c\3\2\2\2\u037f")
        buf.write("\u0380\7\13\2\2\u0380\u0381\7\u009f\2\2\u0381\u0398\7")
        buf.write("\u008e\2\2\u0382\u0383\7;\2\2\u0383\u0384\7\u008c\2\2")
        buf.write("\u0384\u0385\7\u008c\2\2\u0385\u0386\7\u008c\2\2\u0386")
        buf.write("\u0387\7\u008c\2\2\u0387\u0388\7\u008c\2\2\u0388\u0389")
        buf.write("\7\u008c\2\2\u0389\u0398\7\u008c\2\2\u038a\u038b\7<\2")
        buf.write("\2\u038b\u038c\7\u009f\2\2\u038c\u0398\7\u008c\2\2\u038d")
        buf.write("\u038e\7\23\2\2\u038e\u038f\7\u009f\2\2\u038f\u0398\7")
        buf.write("\u008a\2\2\u0390\u0391\7\26\2\2\u0391\u0392\7\u009f\2")
        buf.write("\2\u0392\u0398\7=\2\2\u0393\u0394\7\30\2\2\u0394\u0395")
        buf.write("\7\32\2\2\u0395\u0398\7\u008c\2\2\u0396\u0398\7\33\2\2")
        buf.write("\u0397\u037c\3\2\2\2\u0397\u037f\3\2\2\2\u0397\u0382\3")
        buf.write("\2\2\2\u0397\u038a\3\2\2\2\u0397\u038d\3\2\2\2\u0397\u0390")
        buf.write("\3\2\2\2\u0397\u0393\3\2\2\2\u0397\u0396\3\2\2\2\u0398")
        buf.write("W\3\2\2\2\u0399\u039a\7\6\2\2\u039a\u039b\5^\60\2\u039b")
        buf.write("\u039c\5^\60\2\u039c\u039d\5^\60\2\u039d\u039e\5^\60\2")
        buf.write("\u039e\u039f\5^\60\2\u039f\u03a0\5^\60\2\u03a0\u03a1\5")
        buf.write("^\60\2\u03a1\u03a2\5^\60\2\u03a2\u03a3\7\u008c\2\2\u03a3")
        buf.write("\u03a4\7\u008c\2\2\u03a4Y\3\2\2\2\u03a5\u03a7\5\\/\2\u03a6")
        buf.write("\u03a5\3\2\2\2\u03a7\u03aa\3\2\2\2\u03a8\u03a6\3\2\2\2")
        buf.write("\u03a8\u03a9\3\2\2\2\u03a9\u03d1\3\2\2\2\u03aa\u03a8\3")
        buf.write("\2\2\2\u03ab\u03ac\7\13\2\2\u03ac\u03ad\7\u009f\2\2\u03ad")
        buf.write("\u03d1\7\u008e\2\2\u03ae\u03af\7\\\2\2\u03af\u03b0\7\u009f")
        buf.write("\2\2\u03b0\u03d1\7]\2\2\u03b1\u03b2\7A\2\2\u03b2\u03b3")
        buf.write("\7\u008a\2\2\u03b3\u03b4\7\u008a\2\2\u03b4\u03d1\7\u008c")
        buf.write("\2\2\u03b5\u03b6\7O\2\2\u03b6\u03b7\7\u009f\2\2\u03b7")
        buf.write("\u03d1\7\u008c\2\2\u03b8\u03b9\7<\2\2\u03b9\u03ba\7\u009f")
        buf.write("\2\2\u03ba\u03d1\7\u008c\2\2\u03bb\u03bc\7\23\2\2\u03bc")
        buf.write("\u03bd\7\u009f\2\2\u03bd\u03d1\7\u008a\2\2\u03be\u03bf")
        buf.write("\7\26\2\2\u03bf\u03c0\7\u009f\2\2\u03c0\u03d1\7=\2\2\u03c1")
        buf.write("\u03c2\7\30\2\2\u03c2\u03c3\7\32\2\2\u03c3\u03c8\7\u008c")
        buf.write("\2\2\u03c4\u03c9\7_\2\2\u03c5\u03c6\7\13\2\2\u03c6\u03c7")
        buf.write("\7\u009f\2\2\u03c7\u03c9\7\u008e\2\2\u03c8\u03c4\3\2\2")
        buf.write("\2\u03c8\u03c5\3\2\2\2\u03c9\u03d1\3\2\2\2\u03ca\u03d1")
        buf.write("\7\33\2\2\u03cb\u03cc\7W\2\2\u03cc\u03cd\7^\2\2\u03cd")
        buf.write("\u03ce\7\u008a\2\2\u03ce\u03d1\7\u008a\2\2\u03cf\u03d1")
        buf.write("\7E\2\2\u03d0\u03a8\3\2\2\2\u03d0\u03ab\3\2\2\2\u03d0")
        buf.write("\u03ae\3\2\2\2\u03d0\u03b1\3\2\2\2\u03d0\u03b5\3\2\2\2")
        buf.write("\u03d0\u03b8\3\2\2\2\u03d0\u03bb\3\2\2\2\u03d0\u03be\3")
        buf.write("\2\2\2\u03d0\u03c1\3\2\2\2\u03d0\u03ca\3\2\2\2\u03d0\u03cb")
        buf.write("\3\2\2\2\u03d0\u03cf\3\2\2\2\u03d1[\3\2\2\2\u03d2\u03d3")
        buf.write("\7\6\2\2\u03d3\u03d4\5^\60\2\u03d4\u03d5\5^\60\2\u03d5")
        buf.write("\u03d6\5^\60\2\u03d6\u03d7\5^\60\2\u03d7\u03d8\5^\60\2")
        buf.write("\u03d8\u03d9\5^\60\2\u03d9\u03da\5^\60\2\u03da\u03db\5")
        buf.write("^\60\2\u03db\u03dc\5^\60\2\u03dc\u03dd\5^\60\2\u03dd\u03df")
        buf.write("\5^\60\2\u03de\u03e0\5^\60\2\u03df\u03de\3\2\2\2\u03df")
        buf.write("\u03e0\3\2\2\2\u03e0]\3\2\2\2\u03e1\u03e2\7\u009a\2\2")
        buf.write("\u03e2\u03e3\5`\61\2\u03e3\u03e4\7\u009b\2\2\u03e4_\3")
        buf.write("\2\2\2\u03e5\u03ed\5b\62\2\u03e6\u03e7\7\u009c\2\2\u03e7")
        buf.write("\u03e8\7\u0085\2\2\u03e8\u03e9\5b\62\2\u03e9\u03ea\7\u009d")
        buf.write("\2\2\u03ea\u03ec\3\2\2\2\u03eb\u03e6\3\2\2\2\u03ec\u03ef")
        buf.write("\3\2\2\2\u03ed\u03eb\3\2\2\2\u03ed\u03ee\3\2\2\2\u03ee")
        buf.write("a\3\2\2\2\u03ef\u03ed\3\2\2\2\u03f0\u03f8\5d\63\2\u03f1")
        buf.write("\u03f2\7\u009c\2\2\u03f2\u03f3\7\u0086\2\2\u03f3\u03f4")
        buf.write("\5d\63\2\u03f4\u03f5\7\u009d\2\2\u03f5\u03f7\3\2\2\2\u03f6")
        buf.write("\u03f1\3\2\2\2\u03f7\u03fa\3\2\2\2\u03f8\u03f6\3\2\2\2")
        buf.write("\u03f8\u03f9\3\2\2\2\u03f9c\3\2\2\2\u03fa\u03f8\3\2\2")
        buf.write("\2\u03fb\u03fc\b\63\1\2\u03fc\u03fd\7\u009a\2\2\u03fd")
        buf.write("\u03fe\5`\61\2\u03fe\u03ff\7\u009b\2\2\u03ff\u048c\3\2")
        buf.write("\2\2\u0400\u048c\7_\2\2\u0401\u0402\7a\2\2\u0402\u0403")
        buf.write("\7\u0091\2\2\u0403\u0404\7\u0093\2\2\u0404\u048c\7\u0097")
        buf.write("\2\2\u0405\u0407\7b\2\2\u0406\u0408\7\177\2\2\u0407\u0406")
        buf.write("\3\2\2\2\u0407\u0408\3\2\2\2\u0408\u0409\3\2\2\2\u0409")
        buf.write("\u040a\7\u0080\2\2\u040a\u040b\7\u0081\2\2\u040b\u048c")
        buf.write("\7\u008c\2\2\u040c\u040d\7b\2\2\u040d\u040e\7f\2\2\u040e")
        buf.write("\u040f\7\u0082\2\2\u040f\u048c\7\u0098\2\2\u0410\u0411")
        buf.write("\7b\2\2\u0411\u0412\7k\2\2\u0412\u0413\7\u0082\2\2\u0413")
        buf.write("\u048c\7\u0096\2\2\u0414\u0416\7b\2\2\u0415\u0417\7\177")
        buf.write("\2\2\u0416\u0415\3\2\2\2\u0416\u0417\3\2\2\2\u0417\u0418")
        buf.write("\3\2\2\2\u0418\u0419\7p\2\2\u0419\u041a\7\u0081\2\2\u041a")
        buf.write("\u048c\7\u0092\2\2\u041b\u041c\7b\2\2\u041c\u041d\7q\2")
        buf.write("\2\u041d\u041e\7\u0082\2\2\u041e\u048c\7\u0094\2\2\u041f")
        buf.write("\u0420\7b\2\2\u0420\u0421\7s\2\2\u0421\u0422\7\u0082\2")
        buf.write("\2\u0422\u048c\7\u0090\2\2\u0423\u0424\7c\2\2\u0424\u048c")
        buf.write("\5d\63\36\u0425\u0426\7d\2\2\u0426\u048c\5d\63\35\u0427")
        buf.write("\u0428\7e\2\2\u0428\u048c\5d\63\34\u0429\u0433\7f\2\2")
        buf.write("\u042a\u0434\7\u0099\2\2\u042b\u0430\7\u0098\2\2\u042c")
        buf.write("\u042d\7\u009e\2\2\u042d\u042f\7\u0098\2\2\u042e\u042c")
        buf.write("\3\2\2\2\u042f\u0432\3\2\2\2\u0430\u042e\3\2\2\2\u0430")
        buf.write("\u0431\3\2\2\2\u0431\u0434\3\2\2\2\u0432\u0430\3\2\2\2")
        buf.write("\u0433\u042a\3\2\2\2\u0433\u042b\3\2\2\2\u0434\u048c\3")
        buf.write("\2\2\2\u0435\u0436\7g\2\2\u0436\u0437\7\u008c\2\2\u0437")
        buf.write("\u0438\7\u008c\2\2\u0438\u0439\7\u008c\2\2\u0439\u043a")
        buf.write("\7\u008c\2\2\u043a\u043b\7\u008c\2\2\u043b\u048c\7\u008c")
        buf.write("\2\2\u043c\u048c\7h\2\2\u043d\u043e\7i\2\2\u043e\u048c")
        buf.write("\7\u008a\2\2\u043f\u048c\7j\2\2\u0440\u044a\7k\2\2\u0441")
        buf.write("\u044b\7\u0097\2\2\u0442\u0447\7\u0096\2\2\u0443\u0444")
        buf.write("\7\u009e\2\2\u0444\u0446\7\u0096\2\2\u0445\u0443\3\2\2")
        buf.write("\2\u0446\u0449\3\2\2\2\u0447\u0445\3\2\2\2\u0447\u0448")
        buf.write("\3\2\2\2\u0448\u044b\3\2\2\2\u0449\u0447\3\2\2\2\u044a")
        buf.write("\u0441\3\2\2\2\u044a\u0442\3\2\2\2\u044b\u048c\3\2\2\2")
        buf.write("\u044c\u044d\7\u0087\2\2\u044d\u048c\5d\63\25\u044e\u044f")
        buf.write("\7l\2\2\u044f\u0450\5f\64\2\u0450\u0451\7m\2\2\u0451\u0452")
        buf.write("\7\u008c\2\2\u0452\u048c\3\2\2\2\u0453\u048c\7n\2\2\u0454")
        buf.write("\u048c\7o\2\2\u0455\u045f\7p\2\2\u0456\u0460\7\u0093\2")
        buf.write("\2\u0457\u045c\7\u0092\2\2\u0458\u0459\7\u009e\2\2\u0459")
        buf.write("\u045b\7\u0092\2\2\u045a\u0458\3\2\2\2\u045b\u045e\3\2")
        buf.write("\2\2\u045c\u045a\3\2\2\2\u045c\u045d\3\2\2\2\u045d\u0460")
        buf.write("\3\2\2\2\u045e\u045c\3\2\2\2\u045f\u0456\3\2\2\2\u045f")
        buf.write("\u0457\3\2\2\2\u0460\u048c\3\2\2\2\u0461\u046b\7q\2\2")
        buf.write("\u0462\u046c\7\u0095\2\2\u0463\u0468\7\u0094\2\2\u0464")
        buf.write("\u0465\7\u009e\2\2\u0465\u0467\7\u0094\2\2\u0466\u0464")
        buf.write("\3\2\2\2\u0467\u046a\3\2\2\2\u0468\u0466\3\2\2\2\u0468")
        buf.write("\u0469\3\2\2\2\u0469\u046c\3\2\2\2\u046a\u0468\3\2\2\2")
        buf.write("\u046b\u0462\3\2\2\2\u046b\u0463\3\2\2\2\u046c\u048c\3")
        buf.write("\2\2\2\u046d\u0478\7s\2\2\u046e\u0479\7\u0091\2\2\u046f")
        buf.write("\u0474\7\u0090\2\2\u0470\u0471\7\u009e\2\2\u0471\u0473")
        buf.write("\7\u0090\2\2\u0472\u0470\3\2\2\2\u0473\u0476\3\2\2\2\u0474")
        buf.write("\u0472\3\2\2\2\u0474\u0475\3\2\2\2\u0475\u0479\3\2\2\2")
        buf.write("\u0476\u0474\3\2\2\2\u0477\u0479\7\u008d\2\2\u0478\u046e")
        buf.write("\3\2\2\2\u0478\u046f\3\2\2\2\u0478\u0477\3\2\2\2\u0479")
        buf.write("\u048c\3\2\2\2\u047a\u047b\7t\2\2\u047b\u047c\7\u008c")
        buf.write("\2\2\u047c\u047d\7\u008c\2\2\u047d\u047e\7\u008c\2\2\u047e")
        buf.write("\u047f\7\u008c\2\2\u047f\u0480\7\u008c\2\2\u0480\u048c")
        buf.write("\7\u008c\2\2\u0481\u048c\7u\2\2\u0482\u048c\7v\2\2\u0483")
        buf.write("\u048c\7w\2\2\u0484\u048c\7x\2\2\u0485\u048c\7y\2\2\u0486")
        buf.write("\u048c\7z\2\2\u0487\u048c\7{\2\2\u0488\u048c\7|\2\2\u0489")
        buf.write("\u048c\7}\2\2\u048a\u048c\7~\2\2\u048b\u03fb\3\2\2\2\u048b")
        buf.write("\u0400\3\2\2\2\u048b\u0401\3\2\2\2\u048b\u0405\3\2\2\2")
        buf.write("\u048b\u040c\3\2\2\2\u048b\u0410\3\2\2\2\u048b\u0414\3")
        buf.write("\2\2\2\u048b\u041b\3\2\2\2\u048b\u041f\3\2\2\2\u048b\u0423")
        buf.write("\3\2\2\2\u048b\u0425\3\2\2\2\u048b\u0427\3\2\2\2\u048b")
        buf.write("\u0429\3\2\2\2\u048b\u0435\3\2\2\2\u048b\u043c\3\2\2\2")
        buf.write("\u048b\u043d\3\2\2\2\u048b\u043f\3\2\2\2\u048b\u0440\3")
        buf.write("\2\2\2\u048b\u044c\3\2\2\2\u048b\u044e\3\2\2\2\u048b\u0453")
        buf.write("\3\2\2\2\u048b\u0454\3\2\2\2\u048b\u0455\3\2\2\2\u048b")
        buf.write("\u0461\3\2\2\2\u048b\u046d\3\2\2\2\u048b\u047a\3\2\2\2")
        buf.write("\u048b\u0481\3\2\2\2\u048b\u0482\3\2\2\2\u048b\u0483\3")
        buf.write("\2\2\2\u048b\u0484\3\2\2\2\u048b\u0485\3\2\2\2\u048b\u0486")
        buf.write("\3\2\2\2\u048b\u0487\3\2\2\2\u048b\u0488\3\2\2\2\u048b")
        buf.write("\u0489\3\2\2\2\u048b\u048a\3\2\2\2\u048c\u0495\3\2\2\2")
        buf.write("\u048d\u048e\f&\2\2\u048e\u048f\7`\2\2\u048f\u0494\7\u008c")
        buf.write("\2\2\u0490\u0491\f\17\2\2\u0491\u0492\7r\2\2\u0492\u0494")
        buf.write("\7\u008c\2\2\u0493\u048d\3\2\2\2\u0493\u0490\3\2\2\2\u0494")
        buf.write("\u0497\3\2\2\2\u0495\u0493\3\2\2\2\u0495\u0496\3\2\2\2")
        buf.write("\u0496e\3\2\2\2\u0497\u0495\3\2\2\2\u0498\u0499\7\u009a")
        buf.write("\2\2\u0499\u049b\7\u008c\2\2\u049a\u049c\7\u0088\2\2\u049b")
        buf.write("\u049a\3\2\2\2\u049b\u049c\3\2\2\2\u049c\u049d\3\2\2\2")
        buf.write("\u049d\u049f\7\u008c\2\2\u049e\u04a0\7\u0088\2\2\u049f")
        buf.write("\u049e\3\2\2\2\u049f\u04a0\3\2\2\2\u04a0\u04a1\3\2\2\2")
        buf.write("\u04a1\u04a2\7\u008c\2\2\u04a2\u04b2\7\u009b\2\2\u04a3")
        buf.write("\u04a4\7\u009a\2\2\u04a4\u04a5\7\u0083\2\2\u04a5\u04a6")
        buf.write("\7\u009f\2\2\u04a6\u04a8\5^\60\2\u04a7\u04a9\7\u0088\2")
        buf.write("\2\u04a8\u04a7\3\2\2\2\u04a8\u04a9\3\2\2\2\u04a9\u04ad")
        buf.write("\3\2\2\2\u04aa\u04ab\7\u0084\2\2\u04ab\u04ac\7\u009f\2")
        buf.write("\2\u04ac\u04ae\5^\60\2\u04ad\u04aa\3\2\2\2\u04ad\u04ae")
        buf.write("\3\2\2\2\u04ae\u04af\3\2\2\2\u04af\u04b0\7\u009b\2\2\u04b0")
        buf.write("\u04b2\3\2\2\2\u04b1\u0498\3\2\2\2\u04b1\u04a3\3\2\2\2")
        buf.write("\u04b2g\3\2\2\2ckqw}\u0083\u0089\u008f\u0095\u009b\u00a1")
        buf.write("\u00a7\u00ad\u0103\u012c\u0150\u016d\u0175\u0183\u0190")
        buf.write("\u0195\u01a6\u01b9\u01c1\u01c9\u01ce\u01e5\u01f4\u0205")
        buf.write("\u0217\u021a\u0226\u022c\u0231\u0252\u0257\u026a\u0270")
        buf.write("\u0276\u027c\u0282\u0288\u028e\u0294\u029a\u02a2\u02a8")
        buf.write("\u02b3\u02b7\u02bc\u02c0\u02cc\u02e4\u02ec\u02f6\u02f9")
        buf.write("\u02fc\u030f\u0314\u0319\u0325\u032c\u032f\u0332\u0335")
        buf.write("\u0341\u0348\u034f\u0354\u036d\u037c\u0397\u03a8\u03c8")
        buf.write("\u03d0\u03df\u03ed\u03f8\u0407\u0416\u0430\u0433\u0447")
        buf.write("\u044a\u045c\u045f\u0468\u046b\u0474\u0478\u048b\u0493")
        buf.write("\u0495\u049b\u049f\u04a8\u04ad\u04b1")
        return buf.getvalue()


class CNS_MR_Parser ( Parser ):

    grammarFileName = "CNS_MR_Parser.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "'?'", "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "','", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "'('", "')'", "'{'", "'}'", 
                     "':'", "'='", "'<'", "'>'", "'<='", "'>='", "'#'" ]

    symbolicNames = [ "<INVALID>", "End", "Noe", "Analysis", "Assign", "Asymptote", 
                      "Averaging", "Bgig", "Ceiling", "Classification", 
                      "CountViol", "Cv", "Den", "Distribute", "Ensemble", 
                      "Monomers", "Ncount", "Nrestraints", "Outd", "Partition", 
                      "Potential", "Predict", "Print", "Raverage", "Threshold", 
                      "Reset", "Rswitch", "Scale", "SoExponent", "SqConstant", 
                      "SqExponent", "SqOffset", "Taverage", "Temperature", 
                      "Noe_analysis", "Initialize", "Update", "Gamma", "Kappa", 
                      "Noe_avr_methods", "Noe_potential", "Cutoff", "Cuton", 
                      "From", "To", "Restraints", "Dihedral", "Nassign", 
                      "Print_any", "Plane", "Group", "Selection", "Weight", 
                      "Harmonic", "Exponent", "Normal", "Sanisotropy", "Coefficients", 
                      "ForceConstant", "Rdc_potential", "Coupling", "Coupling_potential", 
                      "Carbon", "Expectation", "PhiStep", "PsiStep", "Rcoil", 
                      "Zero", "Proton", "Observed", "Anisotropy", "Amides", 
                      "Carbons", "Nitrogens", "Oxygens", "RingAtoms", "AlphasAndAmides", 
                      "Error", "CO_or_CN", "SC_or_BB", "Ring_resname", "Rmsd_or_Not", 
                      "Conformation", "Compressed", "Phase", "Size", "Dimensions", 
                      "Danisotropy", "OneBond", "AngleDb", "DerivFlag", 
                      "On_or_Off", "Angle_dihedral", "All", "Around", "Atom", 
                      "Attribute", "BondedTo", "ByGroup", "ByRes", "Chemical", 
                      "Fbox", "Hydrogen", "Id", "Known", "Name", "Point", 
                      "Cut", "Previous", "Pseudo", "Residue", "Resname", 
                      "Saround", "SegIdentifier", "Sfbox", "Store_1", "Store_2", 
                      "Store_3", "Store_4", "Store_5", "Store_6", "Store_7", 
                      "Store_8", "Store_9", "Tag", "Abs", "Attr_properties", 
                      "Comparison_ops", "String_comp_ops", "Tail", "Head", 
                      "Or_op", "And_op", "Not_op", "Comma", "Complex", "Integer", 
                      "Logical", "Real", "Double_quote_string", "Class_name", 
                      "Class_names", "Segment_name", "Segment_names", "Residue_number", 
                      "Residue_numbers", "Residue_name", "Residue_names", 
                      "Atom_name", "Atom_names", "Atom_type", "Atom_types", 
                      "L_paren", "R_paren", "L_brace", "R_brace", "Colon", 
                      "Equ_op", "Lt_op", "Gt_op", "Leq_op", "Geq_op", "Neq_op", 
                      "SPACE", "COMMENT", "LINE_COMMENT" ]

    RULE_cns_mr = 0
    RULE_distance_restraint = 1
    RULE_dihedral_angle_restraint = 2
    RULE_plane_restraint = 3
    RULE_harmonic_restraint = 4
    RULE_rdc_restraint = 5
    RULE_coupling_restraint = 6
    RULE_carbon_shift_restraint = 7
    RULE_proton_shift_restraint = 8
    RULE_conformation_db_restraint = 9
    RULE_diffusion_anisotropy_restraint = 10
    RULE_one_bond_coupling_restraint = 11
    RULE_angle_db_restraint = 12
    RULE_noe_statement = 13
    RULE_noe_assign = 14
    RULE_predict_statement = 15
    RULE_dihedral_statement = 16
    RULE_dihedral_assign = 17
    RULE_plane_statement = 18
    RULE_group_statement = 19
    RULE_harmonic_statement = 20
    RULE_sani_statement = 21
    RULE_sani_assign = 22
    RULE_coupling_statement = 23
    RULE_coup_assign = 24
    RULE_carbon_shift_statement = 25
    RULE_carbon_shift_assign = 26
    RULE_carbon_shift_rcoil = 27
    RULE_proton_shift_statement = 28
    RULE_observed = 29
    RULE_proton_shift_rcoil = 30
    RULE_proton_shift_anisotropy = 31
    RULE_proton_shift_amides = 32
    RULE_proton_shift_carbons = 33
    RULE_proton_shift_nitrogens = 34
    RULE_proton_shift_oxygens = 35
    RULE_proton_shift_ring_atoms = 36
    RULE_proton_shift_alphas_and_amides = 37
    RULE_conformation_statement = 38
    RULE_conf_assign = 39
    RULE_diffusion_statement = 40
    RULE_dani_assign = 41
    RULE_one_bond_coupling_statement = 42
    RULE_one_bond_assign = 43
    RULE_angle_db_statement = 44
    RULE_angle_db_assign = 45
    RULE_selection = 46
    RULE_selection_expression = 47
    RULE_term = 48
    RULE_factor = 49
    RULE_vector_3d = 50

    ruleNames =  [ "cns_mr", "distance_restraint", "dihedral_angle_restraint", 
                   "plane_restraint", "harmonic_restraint", "rdc_restraint", 
                   "coupling_restraint", "carbon_shift_restraint", "proton_shift_restraint", 
                   "conformation_db_restraint", "diffusion_anisotropy_restraint", 
                   "one_bond_coupling_restraint", "angle_db_restraint", 
                   "noe_statement", "noe_assign", "predict_statement", "dihedral_statement", 
                   "dihedral_assign", "plane_statement", "group_statement", 
                   "harmonic_statement", "sani_statement", "sani_assign", 
                   "coupling_statement", "coup_assign", "carbon_shift_statement", 
                   "carbon_shift_assign", "carbon_shift_rcoil", "proton_shift_statement", 
                   "observed", "proton_shift_rcoil", "proton_shift_anisotropy", 
                   "proton_shift_amides", "proton_shift_carbons", "proton_shift_nitrogens", 
                   "proton_shift_oxygens", "proton_shift_ring_atoms", "proton_shift_alphas_and_amides", 
                   "conformation_statement", "conf_assign", "diffusion_statement", 
                   "dani_assign", "one_bond_coupling_statement", "one_bond_assign", 
                   "angle_db_statement", "angle_db_assign", "selection", 
                   "selection_expression", "term", "factor", "vector_3d" ]

    EOF = Token.EOF
    End=1
    Noe=2
    Analysis=3
    Assign=4
    Asymptote=5
    Averaging=6
    Bgig=7
    Ceiling=8
    Classification=9
    CountViol=10
    Cv=11
    Den=12
    Distribute=13
    Ensemble=14
    Monomers=15
    Ncount=16
    Nrestraints=17
    Outd=18
    Partition=19
    Potential=20
    Predict=21
    Print=22
    Raverage=23
    Threshold=24
    Reset=25
    Rswitch=26
    Scale=27
    SoExponent=28
    SqConstant=29
    SqExponent=30
    SqOffset=31
    Taverage=32
    Temperature=33
    Noe_analysis=34
    Initialize=35
    Update=36
    Gamma=37
    Kappa=38
    Noe_avr_methods=39
    Noe_potential=40
    Cutoff=41
    Cuton=42
    From=43
    To=44
    Restraints=45
    Dihedral=46
    Nassign=47
    Print_any=48
    Plane=49
    Group=50
    Selection=51
    Weight=52
    Harmonic=53
    Exponent=54
    Normal=55
    Sanisotropy=56
    Coefficients=57
    ForceConstant=58
    Rdc_potential=59
    Coupling=60
    Coupling_potential=61
    Carbon=62
    Expectation=63
    PhiStep=64
    PsiStep=65
    Rcoil=66
    Zero=67
    Proton=68
    Observed=69
    Anisotropy=70
    Amides=71
    Carbons=72
    Nitrogens=73
    Oxygens=74
    RingAtoms=75
    AlphasAndAmides=76
    Error=77
    CO_or_CN=78
    SC_or_BB=79
    Ring_resname=80
    Rmsd_or_Not=81
    Conformation=82
    Compressed=83
    Phase=84
    Size=85
    Dimensions=86
    Danisotropy=87
    OneBond=88
    AngleDb=89
    DerivFlag=90
    On_or_Off=91
    Angle_dihedral=92
    All=93
    Around=94
    Atom=95
    Attribute=96
    BondedTo=97
    ByGroup=98
    ByRes=99
    Chemical=100
    Fbox=101
    Hydrogen=102
    Id=103
    Known=104
    Name=105
    Point=106
    Cut=107
    Previous=108
    Pseudo=109
    Residue=110
    Resname=111
    Saround=112
    SegIdentifier=113
    Sfbox=114
    Store_1=115
    Store_2=116
    Store_3=117
    Store_4=118
    Store_5=119
    Store_6=120
    Store_7=121
    Store_8=122
    Store_9=123
    Tag=124
    Abs=125
    Attr_properties=126
    Comparison_ops=127
    String_comp_ops=128
    Tail=129
    Head=130
    Or_op=131
    And_op=132
    Not_op=133
    Comma=134
    Complex=135
    Integer=136
    Logical=137
    Real=138
    Double_quote_string=139
    Class_name=140
    Class_names=141
    Segment_name=142
    Segment_names=143
    Residue_number=144
    Residue_numbers=145
    Residue_name=146
    Residue_names=147
    Atom_name=148
    Atom_names=149
    Atom_type=150
    Atom_types=151
    L_paren=152
    R_paren=153
    L_brace=154
    R_brace=155
    Colon=156
    Equ_op=157
    Lt_op=158
    Gt_op=159
    Leq_op=160
    Geq_op=161
    Neq_op=162
    SPACE=163
    COMMENT=164
    LINE_COMMENT=165

    def __init__(self, input:TokenStream, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.9")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None




    class Cns_mrContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EOF(self):
            return self.getToken(CNS_MR_Parser.EOF, 0)

        def distance_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CNS_MR_Parser.Distance_restraintContext)
            else:
                return self.getTypedRuleContext(CNS_MR_Parser.Distance_restraintContext,i)


        def dihedral_angle_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CNS_MR_Parser.Dihedral_angle_restraintContext)
            else:
                return self.getTypedRuleContext(CNS_MR_Parser.Dihedral_angle_restraintContext,i)


        def plane_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CNS_MR_Parser.Plane_restraintContext)
            else:
                return self.getTypedRuleContext(CNS_MR_Parser.Plane_restraintContext,i)


        def harmonic_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CNS_MR_Parser.Harmonic_restraintContext)
            else:
                return self.getTypedRuleContext(CNS_MR_Parser.Harmonic_restraintContext,i)


        def rdc_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CNS_MR_Parser.Rdc_restraintContext)
            else:
                return self.getTypedRuleContext(CNS_MR_Parser.Rdc_restraintContext,i)


        def coupling_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CNS_MR_Parser.Coupling_restraintContext)
            else:
                return self.getTypedRuleContext(CNS_MR_Parser.Coupling_restraintContext,i)


        def carbon_shift_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CNS_MR_Parser.Carbon_shift_restraintContext)
            else:
                return self.getTypedRuleContext(CNS_MR_Parser.Carbon_shift_restraintContext,i)


        def proton_shift_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CNS_MR_Parser.Proton_shift_restraintContext)
            else:
                return self.getTypedRuleContext(CNS_MR_Parser.Proton_shift_restraintContext,i)


        def conformation_db_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CNS_MR_Parser.Conformation_db_restraintContext)
            else:
                return self.getTypedRuleContext(CNS_MR_Parser.Conformation_db_restraintContext,i)


        def diffusion_anisotropy_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CNS_MR_Parser.Diffusion_anisotropy_restraintContext)
            else:
                return self.getTypedRuleContext(CNS_MR_Parser.Diffusion_anisotropy_restraintContext,i)


        def one_bond_coupling_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CNS_MR_Parser.One_bond_coupling_restraintContext)
            else:
                return self.getTypedRuleContext(CNS_MR_Parser.One_bond_coupling_restraintContext,i)


        def angle_db_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CNS_MR_Parser.Angle_db_restraintContext)
            else:
                return self.getTypedRuleContext(CNS_MR_Parser.Angle_db_restraintContext,i)


        def getRuleIndex(self):
            return CNS_MR_Parser.RULE_cns_mr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCns_mr" ):
                listener.enterCns_mr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCns_mr" ):
                listener.exitCns_mr(self)




    def cns_mr(self):

        localctx = CNS_MR_Parser.Cns_mrContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_cns_mr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 105
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==CNS_MR_Parser.Noe:
                self.state = 102
                self.distance_restraint()
                self.state = 107
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 111
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,1,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 108
                    self.dihedral_angle_restraint() 
                self.state = 113
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,1,self._ctx)

            self.state = 117
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,2,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 114
                    self.plane_restraint() 
                self.state = 119
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,2,self._ctx)

            self.state = 123
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==CNS_MR_Parser.Restraints:
                self.state = 120
                self.harmonic_restraint()
                self.state = 125
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 129
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==CNS_MR_Parser.Sanisotropy:
                self.state = 126
                self.rdc_restraint()
                self.state = 131
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 135
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==CNS_MR_Parser.Coupling:
                self.state = 132
                self.coupling_restraint()
                self.state = 137
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 141
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==CNS_MR_Parser.Carbon:
                self.state = 138
                self.carbon_shift_restraint()
                self.state = 143
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 147
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==CNS_MR_Parser.Proton:
                self.state = 144
                self.proton_shift_restraint()
                self.state = 149
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 153
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==CNS_MR_Parser.Conformation:
                self.state = 150
                self.conformation_db_restraint()
                self.state = 155
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 159
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==CNS_MR_Parser.Danisotropy:
                self.state = 156
                self.diffusion_anisotropy_restraint()
                self.state = 161
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 165
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==CNS_MR_Parser.OneBond:
                self.state = 162
                self.one_bond_coupling_restraint()
                self.state = 167
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 171
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==CNS_MR_Parser.AngleDb:
                self.state = 168
                self.angle_db_restraint()
                self.state = 173
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 174
            self.match(CNS_MR_Parser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Distance_restraintContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Noe(self):
            return self.getToken(CNS_MR_Parser.Noe, 0)

        def L_brace(self):
            return self.getToken(CNS_MR_Parser.L_brace, 0)

        def noe_statement(self):
            return self.getTypedRuleContext(CNS_MR_Parser.Noe_statementContext,0)


        def R_brace(self):
            return self.getToken(CNS_MR_Parser.R_brace, 0)

        def End(self):
            return self.getToken(CNS_MR_Parser.End, 0)

        def getRuleIndex(self):
            return CNS_MR_Parser.RULE_distance_restraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDistance_restraint" ):
                listener.enterDistance_restraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDistance_restraint" ):
                listener.exitDistance_restraint(self)




    def distance_restraint(self):

        localctx = CNS_MR_Parser.Distance_restraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_distance_restraint)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 176
            self.match(CNS_MR_Parser.Noe)
            self.state = 177
            self.match(CNS_MR_Parser.L_brace)
            self.state = 178
            self.noe_statement()
            self.state = 179
            self.match(CNS_MR_Parser.R_brace)
            self.state = 180
            self.match(CNS_MR_Parser.End)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Dihedral_angle_restraintContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Restraints(self):
            return self.getToken(CNS_MR_Parser.Restraints, 0)

        def Dihedral(self):
            return self.getToken(CNS_MR_Parser.Dihedral, 0)

        def L_brace(self):
            return self.getToken(CNS_MR_Parser.L_brace, 0)

        def dihedral_statement(self):
            return self.getTypedRuleContext(CNS_MR_Parser.Dihedral_statementContext,0)


        def R_brace(self):
            return self.getToken(CNS_MR_Parser.R_brace, 0)

        def End(self):
            return self.getToken(CNS_MR_Parser.End, 0)

        def getRuleIndex(self):
            return CNS_MR_Parser.RULE_dihedral_angle_restraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDihedral_angle_restraint" ):
                listener.enterDihedral_angle_restraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDihedral_angle_restraint" ):
                listener.exitDihedral_angle_restraint(self)




    def dihedral_angle_restraint(self):

        localctx = CNS_MR_Parser.Dihedral_angle_restraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_dihedral_angle_restraint)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 182
            self.match(CNS_MR_Parser.Restraints)
            self.state = 183
            self.match(CNS_MR_Parser.Dihedral)
            self.state = 184
            self.match(CNS_MR_Parser.L_brace)
            self.state = 185
            self.dihedral_statement()
            self.state = 186
            self.match(CNS_MR_Parser.R_brace)
            self.state = 187
            self.match(CNS_MR_Parser.End)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Plane_restraintContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Restraints(self):
            return self.getToken(CNS_MR_Parser.Restraints, 0)

        def Plane(self):
            return self.getToken(CNS_MR_Parser.Plane, 0)

        def L_brace(self):
            return self.getToken(CNS_MR_Parser.L_brace, 0)

        def plane_statement(self):
            return self.getTypedRuleContext(CNS_MR_Parser.Plane_statementContext,0)


        def R_brace(self):
            return self.getToken(CNS_MR_Parser.R_brace, 0)

        def End(self):
            return self.getToken(CNS_MR_Parser.End, 0)

        def getRuleIndex(self):
            return CNS_MR_Parser.RULE_plane_restraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPlane_restraint" ):
                listener.enterPlane_restraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPlane_restraint" ):
                listener.exitPlane_restraint(self)




    def plane_restraint(self):

        localctx = CNS_MR_Parser.Plane_restraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_plane_restraint)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 189
            self.match(CNS_MR_Parser.Restraints)
            self.state = 190
            self.match(CNS_MR_Parser.Plane)
            self.state = 191
            self.match(CNS_MR_Parser.L_brace)
            self.state = 192
            self.plane_statement()
            self.state = 193
            self.match(CNS_MR_Parser.R_brace)
            self.state = 194
            self.match(CNS_MR_Parser.End)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Harmonic_restraintContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Restraints(self):
            return self.getToken(CNS_MR_Parser.Restraints, 0)

        def Harmonic(self):
            return self.getToken(CNS_MR_Parser.Harmonic, 0)

        def L_brace(self):
            return self.getToken(CNS_MR_Parser.L_brace, 0)

        def harmonic_statement(self):
            return self.getTypedRuleContext(CNS_MR_Parser.Harmonic_statementContext,0)


        def R_brace(self):
            return self.getToken(CNS_MR_Parser.R_brace, 0)

        def End(self):
            return self.getToken(CNS_MR_Parser.End, 0)

        def getRuleIndex(self):
            return CNS_MR_Parser.RULE_harmonic_restraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHarmonic_restraint" ):
                listener.enterHarmonic_restraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHarmonic_restraint" ):
                listener.exitHarmonic_restraint(self)




    def harmonic_restraint(self):

        localctx = CNS_MR_Parser.Harmonic_restraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_harmonic_restraint)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 196
            self.match(CNS_MR_Parser.Restraints)
            self.state = 197
            self.match(CNS_MR_Parser.Harmonic)
            self.state = 198
            self.match(CNS_MR_Parser.L_brace)
            self.state = 199
            self.harmonic_statement()
            self.state = 200
            self.match(CNS_MR_Parser.R_brace)
            self.state = 201
            self.match(CNS_MR_Parser.End)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Rdc_restraintContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Sanisotropy(self):
            return self.getToken(CNS_MR_Parser.Sanisotropy, 0)

        def L_brace(self):
            return self.getToken(CNS_MR_Parser.L_brace, 0)

        def sani_statement(self):
            return self.getTypedRuleContext(CNS_MR_Parser.Sani_statementContext,0)


        def R_brace(self):
            return self.getToken(CNS_MR_Parser.R_brace, 0)

        def End(self):
            return self.getToken(CNS_MR_Parser.End, 0)

        def getRuleIndex(self):
            return CNS_MR_Parser.RULE_rdc_restraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRdc_restraint" ):
                listener.enterRdc_restraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRdc_restraint" ):
                listener.exitRdc_restraint(self)




    def rdc_restraint(self):

        localctx = CNS_MR_Parser.Rdc_restraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_rdc_restraint)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 203
            self.match(CNS_MR_Parser.Sanisotropy)
            self.state = 204
            self.match(CNS_MR_Parser.L_brace)
            self.state = 205
            self.sani_statement()
            self.state = 206
            self.match(CNS_MR_Parser.R_brace)
            self.state = 207
            self.match(CNS_MR_Parser.End)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Coupling_restraintContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Coupling(self):
            return self.getToken(CNS_MR_Parser.Coupling, 0)

        def L_brace(self):
            return self.getToken(CNS_MR_Parser.L_brace, 0)

        def coupling_statement(self):
            return self.getTypedRuleContext(CNS_MR_Parser.Coupling_statementContext,0)


        def R_brace(self):
            return self.getToken(CNS_MR_Parser.R_brace, 0)

        def End(self):
            return self.getToken(CNS_MR_Parser.End, 0)

        def getRuleIndex(self):
            return CNS_MR_Parser.RULE_coupling_restraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCoupling_restraint" ):
                listener.enterCoupling_restraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCoupling_restraint" ):
                listener.exitCoupling_restraint(self)




    def coupling_restraint(self):

        localctx = CNS_MR_Parser.Coupling_restraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_coupling_restraint)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 209
            self.match(CNS_MR_Parser.Coupling)
            self.state = 210
            self.match(CNS_MR_Parser.L_brace)
            self.state = 211
            self.coupling_statement()
            self.state = 212
            self.match(CNS_MR_Parser.R_brace)
            self.state = 213
            self.match(CNS_MR_Parser.End)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Carbon_shift_restraintContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Carbon(self):
            return self.getToken(CNS_MR_Parser.Carbon, 0)

        def L_brace(self):
            return self.getToken(CNS_MR_Parser.L_brace, 0)

        def carbon_shift_statement(self):
            return self.getTypedRuleContext(CNS_MR_Parser.Carbon_shift_statementContext,0)


        def R_brace(self):
            return self.getToken(CNS_MR_Parser.R_brace, 0)

        def End(self):
            return self.getToken(CNS_MR_Parser.End, 0)

        def getRuleIndex(self):
            return CNS_MR_Parser.RULE_carbon_shift_restraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCarbon_shift_restraint" ):
                listener.enterCarbon_shift_restraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCarbon_shift_restraint" ):
                listener.exitCarbon_shift_restraint(self)




    def carbon_shift_restraint(self):

        localctx = CNS_MR_Parser.Carbon_shift_restraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_carbon_shift_restraint)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 215
            self.match(CNS_MR_Parser.Carbon)
            self.state = 216
            self.match(CNS_MR_Parser.L_brace)
            self.state = 217
            self.carbon_shift_statement()
            self.state = 218
            self.match(CNS_MR_Parser.R_brace)
            self.state = 219
            self.match(CNS_MR_Parser.End)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Proton_shift_restraintContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Proton(self):
            return self.getToken(CNS_MR_Parser.Proton, 0)

        def L_brace(self):
            return self.getToken(CNS_MR_Parser.L_brace, 0)

        def proton_shift_statement(self):
            return self.getTypedRuleContext(CNS_MR_Parser.Proton_shift_statementContext,0)


        def R_brace(self):
            return self.getToken(CNS_MR_Parser.R_brace, 0)

        def End(self):
            return self.getToken(CNS_MR_Parser.End, 0)

        def getRuleIndex(self):
            return CNS_MR_Parser.RULE_proton_shift_restraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProton_shift_restraint" ):
                listener.enterProton_shift_restraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProton_shift_restraint" ):
                listener.exitProton_shift_restraint(self)




    def proton_shift_restraint(self):

        localctx = CNS_MR_Parser.Proton_shift_restraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_proton_shift_restraint)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 221
            self.match(CNS_MR_Parser.Proton)
            self.state = 222
            self.match(CNS_MR_Parser.L_brace)
            self.state = 223
            self.proton_shift_statement()
            self.state = 224
            self.match(CNS_MR_Parser.R_brace)
            self.state = 225
            self.match(CNS_MR_Parser.End)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Conformation_db_restraintContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Conformation(self):
            return self.getToken(CNS_MR_Parser.Conformation, 0)

        def L_brace(self):
            return self.getToken(CNS_MR_Parser.L_brace, 0)

        def conformation_statement(self):
            return self.getTypedRuleContext(CNS_MR_Parser.Conformation_statementContext,0)


        def R_brace(self):
            return self.getToken(CNS_MR_Parser.R_brace, 0)

        def End(self):
            return self.getToken(CNS_MR_Parser.End, 0)

        def getRuleIndex(self):
            return CNS_MR_Parser.RULE_conformation_db_restraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConformation_db_restraint" ):
                listener.enterConformation_db_restraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConformation_db_restraint" ):
                listener.exitConformation_db_restraint(self)




    def conformation_db_restraint(self):

        localctx = CNS_MR_Parser.Conformation_db_restraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_conformation_db_restraint)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 227
            self.match(CNS_MR_Parser.Conformation)
            self.state = 228
            self.match(CNS_MR_Parser.L_brace)
            self.state = 229
            self.conformation_statement()
            self.state = 230
            self.match(CNS_MR_Parser.R_brace)
            self.state = 231
            self.match(CNS_MR_Parser.End)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Diffusion_anisotropy_restraintContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Danisotropy(self):
            return self.getToken(CNS_MR_Parser.Danisotropy, 0)

        def L_brace(self):
            return self.getToken(CNS_MR_Parser.L_brace, 0)

        def diffusion_statement(self):
            return self.getTypedRuleContext(CNS_MR_Parser.Diffusion_statementContext,0)


        def R_brace(self):
            return self.getToken(CNS_MR_Parser.R_brace, 0)

        def End(self):
            return self.getToken(CNS_MR_Parser.End, 0)

        def getRuleIndex(self):
            return CNS_MR_Parser.RULE_diffusion_anisotropy_restraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDiffusion_anisotropy_restraint" ):
                listener.enterDiffusion_anisotropy_restraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDiffusion_anisotropy_restraint" ):
                listener.exitDiffusion_anisotropy_restraint(self)




    def diffusion_anisotropy_restraint(self):

        localctx = CNS_MR_Parser.Diffusion_anisotropy_restraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_diffusion_anisotropy_restraint)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 233
            self.match(CNS_MR_Parser.Danisotropy)
            self.state = 234
            self.match(CNS_MR_Parser.L_brace)
            self.state = 235
            self.diffusion_statement()
            self.state = 236
            self.match(CNS_MR_Parser.R_brace)
            self.state = 237
            self.match(CNS_MR_Parser.End)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class One_bond_coupling_restraintContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OneBond(self):
            return self.getToken(CNS_MR_Parser.OneBond, 0)

        def L_brace(self):
            return self.getToken(CNS_MR_Parser.L_brace, 0)

        def one_bond_coupling_statement(self):
            return self.getTypedRuleContext(CNS_MR_Parser.One_bond_coupling_statementContext,0)


        def R_brace(self):
            return self.getToken(CNS_MR_Parser.R_brace, 0)

        def End(self):
            return self.getToken(CNS_MR_Parser.End, 0)

        def getRuleIndex(self):
            return CNS_MR_Parser.RULE_one_bond_coupling_restraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOne_bond_coupling_restraint" ):
                listener.enterOne_bond_coupling_restraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOne_bond_coupling_restraint" ):
                listener.exitOne_bond_coupling_restraint(self)




    def one_bond_coupling_restraint(self):

        localctx = CNS_MR_Parser.One_bond_coupling_restraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_one_bond_coupling_restraint)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 239
            self.match(CNS_MR_Parser.OneBond)
            self.state = 240
            self.match(CNS_MR_Parser.L_brace)
            self.state = 241
            self.one_bond_coupling_statement()
            self.state = 242
            self.match(CNS_MR_Parser.R_brace)
            self.state = 243
            self.match(CNS_MR_Parser.End)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Angle_db_restraintContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AngleDb(self):
            return self.getToken(CNS_MR_Parser.AngleDb, 0)

        def L_brace(self):
            return self.getToken(CNS_MR_Parser.L_brace, 0)

        def angle_db_statement(self):
            return self.getTypedRuleContext(CNS_MR_Parser.Angle_db_statementContext,0)


        def R_brace(self):
            return self.getToken(CNS_MR_Parser.R_brace, 0)

        def End(self):
            return self.getToken(CNS_MR_Parser.End, 0)

        def getRuleIndex(self):
            return CNS_MR_Parser.RULE_angle_db_restraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAngle_db_restraint" ):
                listener.enterAngle_db_restraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAngle_db_restraint" ):
                listener.exitAngle_db_restraint(self)




    def angle_db_restraint(self):

        localctx = CNS_MR_Parser.Angle_db_restraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_angle_db_restraint)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 245
            self.match(CNS_MR_Parser.AngleDb)
            self.state = 246
            self.match(CNS_MR_Parser.L_brace)
            self.state = 247
            self.angle_db_statement()
            self.state = 248
            self.match(CNS_MR_Parser.R_brace)
            self.state = 249
            self.match(CNS_MR_Parser.End)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Noe_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Analysis(self):
            return self.getToken(CNS_MR_Parser.Analysis, 0)

        def Equ_op(self, i:int=None):
            if i is None:
                return self.getTokens(CNS_MR_Parser.Equ_op)
            else:
                return self.getToken(CNS_MR_Parser.Equ_op, i)

        def Noe_analysis(self):
            return self.getToken(CNS_MR_Parser.Noe_analysis, 0)

        def noe_assign(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CNS_MR_Parser.Noe_assignContext)
            else:
                return self.getTypedRuleContext(CNS_MR_Parser.Noe_assignContext,i)


        def Asymptote(self):
            return self.getToken(CNS_MR_Parser.Asymptote, 0)

        def Class_names(self):
            return self.getToken(CNS_MR_Parser.Class_names, 0)

        def Real(self, i:int=None):
            if i is None:
                return self.getTokens(CNS_MR_Parser.Real)
            else:
                return self.getToken(CNS_MR_Parser.Real, i)

        def Averaging(self):
            return self.getToken(CNS_MR_Parser.Averaging, 0)

        def Noe_avr_methods(self):
            return self.getToken(CNS_MR_Parser.Noe_avr_methods, 0)

        def Bgig(self):
            return self.getToken(CNS_MR_Parser.Bgig, 0)

        def Ceiling(self):
            return self.getToken(CNS_MR_Parser.Ceiling, 0)

        def Classification(self):
            return self.getToken(CNS_MR_Parser.Classification, 0)

        def Class_name(self, i:int=None):
            if i is None:
                return self.getTokens(CNS_MR_Parser.Class_name)
            else:
                return self.getToken(CNS_MR_Parser.Class_name, i)

        def CountViol(self):
            return self.getToken(CNS_MR_Parser.CountViol, 0)

        def Cv(self):
            return self.getToken(CNS_MR_Parser.Cv, 0)

        def Integer(self):
            return self.getToken(CNS_MR_Parser.Integer, 0)

        def Den(self):
            return self.getToken(CNS_MR_Parser.Den, 0)

        def Initialize(self):
            return self.getToken(CNS_MR_Parser.Initialize, 0)

        def Update(self):
            return self.getToken(CNS_MR_Parser.Update, 0)

        def Gamma(self):
            return self.getToken(CNS_MR_Parser.Gamma, 0)

        def Kappa(self):
            return self.getToken(CNS_MR_Parser.Kappa, 0)

        def Distribute(self):
            return self.getToken(CNS_MR_Parser.Distribute, 0)

        def Ensemble(self):
            return self.getToken(CNS_MR_Parser.Ensemble, 0)

        def R_brace(self):
            return self.getToken(CNS_MR_Parser.R_brace, 0)

        def End(self):
            return self.getToken(CNS_MR_Parser.End, 0)

        def L_brace(self, i:int=None):
            if i is None:
                return self.getTokens(CNS_MR_Parser.L_brace)
            else:
                return self.getToken(CNS_MR_Parser.L_brace, i)

        def Monomers(self):
            return self.getToken(CNS_MR_Parser.Monomers, 0)

        def Ncount(self):
            return self.getToken(CNS_MR_Parser.Ncount, 0)

        def Nrestraints(self):
            return self.getToken(CNS_MR_Parser.Nrestraints, 0)

        def Outd(self):
            return self.getToken(CNS_MR_Parser.Outd, 0)

        def Partition(self):
            return self.getToken(CNS_MR_Parser.Partition, 0)

        def Potential(self):
            return self.getToken(CNS_MR_Parser.Potential, 0)

        def Noe_potential(self):
            return self.getToken(CNS_MR_Parser.Noe_potential, 0)

        def Predict(self):
            return self.getToken(CNS_MR_Parser.Predict, 0)

        def predict_statement(self):
            return self.getTypedRuleContext(CNS_MR_Parser.Predict_statementContext,0)


        def Print(self):
            return self.getToken(CNS_MR_Parser.Print, 0)

        def Threshold(self):
            return self.getToken(CNS_MR_Parser.Threshold, 0)

        def Raverage(self):
            return self.getToken(CNS_MR_Parser.Raverage, 0)

        def Reset(self):
            return self.getToken(CNS_MR_Parser.Reset, 0)

        def Rswitch(self):
            return self.getToken(CNS_MR_Parser.Rswitch, 0)

        def Scale(self):
            return self.getToken(CNS_MR_Parser.Scale, 0)

        def SoExponent(self):
            return self.getToken(CNS_MR_Parser.SoExponent, 0)

        def SqConstant(self):
            return self.getToken(CNS_MR_Parser.SqConstant, 0)

        def SqExponent(self):
            return self.getToken(CNS_MR_Parser.SqExponent, 0)

        def SqOffset(self):
            return self.getToken(CNS_MR_Parser.SqOffset, 0)

        def Taverage(self):
            return self.getToken(CNS_MR_Parser.Taverage, 0)

        def Temperature(self):
            return self.getToken(CNS_MR_Parser.Temperature, 0)

        def getRuleIndex(self):
            return CNS_MR_Parser.RULE_noe_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNoe_statement" ):
                listener.enterNoe_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNoe_statement" ):
                listener.exitNoe_statement(self)




    def noe_statement(self):

        localctx = CNS_MR_Parser.Noe_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_noe_statement)
        self._la = 0 # Token type
        try:
            self.state = 371
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,16,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 251
                self.match(CNS_MR_Parser.Analysis)
                self.state = 252
                self.match(CNS_MR_Parser.Equ_op)
                self.state = 253
                self.match(CNS_MR_Parser.Noe_analysis)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 257
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==CNS_MR_Parser.Assign:
                    self.state = 254
                    self.noe_assign()
                    self.state = 259
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 260
                self.match(CNS_MR_Parser.Asymptote)
                self.state = 261
                self.match(CNS_MR_Parser.Class_names)
                self.state = 262
                self.match(CNS_MR_Parser.Real)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 263
                self.match(CNS_MR_Parser.Averaging)
                self.state = 264
                self.match(CNS_MR_Parser.Class_names)
                self.state = 265
                self.match(CNS_MR_Parser.Noe_avr_methods)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 266
                self.match(CNS_MR_Parser.Bgig)
                self.state = 267
                self.match(CNS_MR_Parser.Class_names)
                self.state = 268
                self.match(CNS_MR_Parser.Real)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 269
                self.match(CNS_MR_Parser.Ceiling)
                self.state = 270
                self.match(CNS_MR_Parser.Equ_op)
                self.state = 271
                self.match(CNS_MR_Parser.Real)
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 272
                self.match(CNS_MR_Parser.Classification)
                self.state = 273
                self.match(CNS_MR_Parser.Equ_op)
                self.state = 274
                self.match(CNS_MR_Parser.Class_name)
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 275
                self.match(CNS_MR_Parser.CountViol)
                self.state = 276
                self.match(CNS_MR_Parser.Class_name)
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 277
                self.match(CNS_MR_Parser.Cv)
                self.state = 278
                self.match(CNS_MR_Parser.Equ_op)
                self.state = 279
                self.match(CNS_MR_Parser.Integer)
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 280
                self.match(CNS_MR_Parser.Den)
                self.state = 281
                self.match(CNS_MR_Parser.Initialize)
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 282
                self.match(CNS_MR_Parser.Den)
                self.state = 283
                self.match(CNS_MR_Parser.Update)
                self.state = 284
                self.match(CNS_MR_Parser.Gamma)
                self.state = 285
                self.match(CNS_MR_Parser.Equ_op)
                self.state = 286
                self.match(CNS_MR_Parser.Real)
                self.state = 287
                self.match(CNS_MR_Parser.Kappa)
                self.state = 288
                self.match(CNS_MR_Parser.Equ_op)
                self.state = 289
                self.match(CNS_MR_Parser.Real)
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 290
                self.match(CNS_MR_Parser.Distribute)
                self.state = 291
                self.match(CNS_MR_Parser.Class_name)
                self.state = 292
                self.match(CNS_MR_Parser.Class_name)
                self.state = 293
                self.match(CNS_MR_Parser.Real)
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 294
                self.match(CNS_MR_Parser.Ensemble)
                self.state = 298
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,13,self._ctx)
                while _alt!=1 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1+1:
                        self.state = 295
                        self.match(CNS_MR_Parser.L_brace) 
                    self.state = 300
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,13,self._ctx)

                self.state = 301
                self.match(CNS_MR_Parser.R_brace)
                self.state = 302
                self.match(CNS_MR_Parser.End)
                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 303
                self.match(CNS_MR_Parser.Monomers)
                self.state = 304
                self.match(CNS_MR_Parser.Class_names)
                self.state = 305
                self.match(CNS_MR_Parser.Integer)
                pass

            elif la_ == 15:
                self.enterOuterAlt(localctx, 15)
                self.state = 306
                self.match(CNS_MR_Parser.Ncount)
                self.state = 307
                self.match(CNS_MR_Parser.Class_names)
                self.state = 308
                self.match(CNS_MR_Parser.Integer)
                pass

            elif la_ == 16:
                self.enterOuterAlt(localctx, 16)
                self.state = 309
                self.match(CNS_MR_Parser.Nrestraints)
                self.state = 310
                self.match(CNS_MR_Parser.Equ_op)
                self.state = 311
                self.match(CNS_MR_Parser.Integer)
                pass

            elif la_ == 17:
                self.enterOuterAlt(localctx, 17)
                self.state = 312
                self.match(CNS_MR_Parser.Outd)
                pass

            elif la_ == 18:
                self.enterOuterAlt(localctx, 18)
                self.state = 313
                self.match(CNS_MR_Parser.Partition)
                self.state = 314
                self.match(CNS_MR_Parser.Equ_op)
                self.state = 315
                self.match(CNS_MR_Parser.Integer)
                pass

            elif la_ == 19:
                self.enterOuterAlt(localctx, 19)
                self.state = 316
                self.match(CNS_MR_Parser.Potential)
                self.state = 317
                self.match(CNS_MR_Parser.Class_names)
                self.state = 318
                self.match(CNS_MR_Parser.Noe_potential)
                pass

            elif la_ == 20:
                self.enterOuterAlt(localctx, 20)
                self.state = 319
                self.match(CNS_MR_Parser.Predict)
                self.state = 320
                self.match(CNS_MR_Parser.L_brace)
                self.state = 321
                self.predict_statement()
                self.state = 322
                self.match(CNS_MR_Parser.R_brace)
                self.state = 323
                self.match(CNS_MR_Parser.End)
                pass

            elif la_ == 21:
                self.enterOuterAlt(localctx, 21)
                self.state = 325
                self.match(CNS_MR_Parser.Print)
                self.state = 326
                self.match(CNS_MR_Parser.Threshold)
                self.state = 327
                self.match(CNS_MR_Parser.Equ_op)
                self.state = 328
                self.match(CNS_MR_Parser.Real)
                pass

            elif la_ == 22:
                self.enterOuterAlt(localctx, 22)
                self.state = 329
                self.match(CNS_MR_Parser.Raverage)
                self.state = 330
                self.match(CNS_MR_Parser.Class_name)
                self.state = 334
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,14,self._ctx)
                while _alt!=1 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1+1:
                        self.state = 331
                        self.match(CNS_MR_Parser.L_brace) 
                    self.state = 336
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,14,self._ctx)

                self.state = 337
                self.match(CNS_MR_Parser.R_brace)
                self.state = 338
                self.match(CNS_MR_Parser.End)
                pass

            elif la_ == 23:
                self.enterOuterAlt(localctx, 23)
                self.state = 339
                self.match(CNS_MR_Parser.Reset)
                pass

            elif la_ == 24:
                self.enterOuterAlt(localctx, 24)
                self.state = 340
                self.match(CNS_MR_Parser.Rswitch)
                self.state = 341
                self.match(CNS_MR_Parser.Class_names)
                self.state = 342
                self.match(CNS_MR_Parser.Real)
                pass

            elif la_ == 25:
                self.enterOuterAlt(localctx, 25)
                self.state = 343
                self.match(CNS_MR_Parser.Scale)
                self.state = 344
                self.match(CNS_MR_Parser.Class_names)
                self.state = 345
                self.match(CNS_MR_Parser.Real)
                pass

            elif la_ == 26:
                self.enterOuterAlt(localctx, 26)
                self.state = 346
                self.match(CNS_MR_Parser.SoExponent)
                self.state = 347
                self.match(CNS_MR_Parser.Class_names)
                self.state = 348
                self.match(CNS_MR_Parser.Real)
                pass

            elif la_ == 27:
                self.enterOuterAlt(localctx, 27)
                self.state = 349
                self.match(CNS_MR_Parser.SqConstant)
                self.state = 350
                self.match(CNS_MR_Parser.Class_names)
                self.state = 351
                self.match(CNS_MR_Parser.Real)
                pass

            elif la_ == 28:
                self.enterOuterAlt(localctx, 28)
                self.state = 352
                self.match(CNS_MR_Parser.SqExponent)
                self.state = 353
                self.match(CNS_MR_Parser.Class_names)
                self.state = 354
                self.match(CNS_MR_Parser.Real)
                pass

            elif la_ == 29:
                self.enterOuterAlt(localctx, 29)
                self.state = 355
                self.match(CNS_MR_Parser.SqOffset)
                self.state = 356
                self.match(CNS_MR_Parser.Class_names)
                self.state = 357
                self.match(CNS_MR_Parser.Real)
                pass

            elif la_ == 30:
                self.enterOuterAlt(localctx, 30)
                self.state = 358
                self.match(CNS_MR_Parser.Taverage)
                self.state = 359
                self.match(CNS_MR_Parser.Class_name)
                self.state = 363
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,15,self._ctx)
                while _alt!=1 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1+1:
                        self.state = 360
                        self.match(CNS_MR_Parser.L_brace) 
                    self.state = 365
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,15,self._ctx)

                self.state = 366
                self.match(CNS_MR_Parser.R_brace)
                self.state = 367
                self.match(CNS_MR_Parser.End)
                pass

            elif la_ == 31:
                self.enterOuterAlt(localctx, 31)
                self.state = 368
                self.match(CNS_MR_Parser.Temperature)
                self.state = 369
                self.match(CNS_MR_Parser.Equ_op)
                self.state = 370
                self.match(CNS_MR_Parser.Real)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Noe_assignContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Assign(self):
            return self.getToken(CNS_MR_Parser.Assign, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CNS_MR_Parser.SelectionContext)
            else:
                return self.getTypedRuleContext(CNS_MR_Parser.SelectionContext,i)


        def Real(self, i:int=None):
            if i is None:
                return self.getTokens(CNS_MR_Parser.Real)
            else:
                return self.getToken(CNS_MR_Parser.Real, i)

        def Or_op(self, i:int=None):
            if i is None:
                return self.getTokens(CNS_MR_Parser.Or_op)
            else:
                return self.getToken(CNS_MR_Parser.Or_op, i)

        def getRuleIndex(self):
            return CNS_MR_Parser.RULE_noe_assign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNoe_assign" ):
                listener.enterNoe_assign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNoe_assign" ):
                listener.exitNoe_assign(self)




    def noe_assign(self):

        localctx = CNS_MR_Parser.Noe_assignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_noe_assign)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 373
            self.match(CNS_MR_Parser.Assign)
            self.state = 374
            self.selection()
            self.state = 375
            self.selection()
            self.state = 376
            self.match(CNS_MR_Parser.Real)
            self.state = 377
            self.match(CNS_MR_Parser.Real)
            self.state = 378
            self.match(CNS_MR_Parser.Real)
            self.state = 385
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==CNS_MR_Parser.Or_op:
                self.state = 379
                self.match(CNS_MR_Parser.Or_op)
                self.state = 380
                self.selection()
                self.state = 381
                self.selection()
                self.state = 387
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Predict_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Cutoff(self):
            return self.getToken(CNS_MR_Parser.Cutoff, 0)

        def Equ_op(self):
            return self.getToken(CNS_MR_Parser.Equ_op, 0)

        def Real(self):
            return self.getToken(CNS_MR_Parser.Real, 0)

        def Cuton(self):
            return self.getToken(CNS_MR_Parser.Cuton, 0)

        def From(self):
            return self.getToken(CNS_MR_Parser.From, 0)

        def selection(self):
            return self.getTypedRuleContext(CNS_MR_Parser.SelectionContext,0)


        def To(self):
            return self.getToken(CNS_MR_Parser.To, 0)

        def getRuleIndex(self):
            return CNS_MR_Parser.RULE_predict_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPredict_statement" ):
                listener.enterPredict_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPredict_statement" ):
                listener.exitPredict_statement(self)




    def predict_statement(self):

        localctx = CNS_MR_Parser.Predict_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_predict_statement)
        try:
            self.state = 398
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CNS_MR_Parser.Cutoff]:
                self.enterOuterAlt(localctx, 1)
                self.state = 388
                self.match(CNS_MR_Parser.Cutoff)
                self.state = 389
                self.match(CNS_MR_Parser.Equ_op)
                self.state = 390
                self.match(CNS_MR_Parser.Real)
                pass
            elif token in [CNS_MR_Parser.Cuton]:
                self.enterOuterAlt(localctx, 2)
                self.state = 391
                self.match(CNS_MR_Parser.Cuton)
                self.state = 392
                self.match(CNS_MR_Parser.Equ_op)
                self.state = 393
                self.match(CNS_MR_Parser.Real)
                pass
            elif token in [CNS_MR_Parser.From]:
                self.enterOuterAlt(localctx, 3)
                self.state = 394
                self.match(CNS_MR_Parser.From)
                self.state = 395
                self.selection()
                pass
            elif token in [CNS_MR_Parser.To]:
                self.enterOuterAlt(localctx, 4)
                self.state = 396
                self.match(CNS_MR_Parser.To)
                self.state = 397
                self.selection()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Dihedral_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def dihedral_assign(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CNS_MR_Parser.Dihedral_assignContext)
            else:
                return self.getTypedRuleContext(CNS_MR_Parser.Dihedral_assignContext,i)


        def Cv(self):
            return self.getToken(CNS_MR_Parser.Cv, 0)

        def Equ_op(self):
            return self.getToken(CNS_MR_Parser.Equ_op, 0)

        def Integer(self):
            return self.getToken(CNS_MR_Parser.Integer, 0)

        def Nassign(self):
            return self.getToken(CNS_MR_Parser.Nassign, 0)

        def Partition(self):
            return self.getToken(CNS_MR_Parser.Partition, 0)

        def Reset(self):
            return self.getToken(CNS_MR_Parser.Reset, 0)

        def Scale(self):
            return self.getToken(CNS_MR_Parser.Scale, 0)

        def Real(self):
            return self.getToken(CNS_MR_Parser.Real, 0)

        def Print_any(self):
            return self.getToken(CNS_MR_Parser.Print_any, 0)

        def getRuleIndex(self):
            return CNS_MR_Parser.RULE_dihedral_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDihedral_statement" ):
                listener.enterDihedral_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDihedral_statement" ):
                listener.exitDihedral_statement(self)




    def dihedral_statement(self):

        localctx = CNS_MR_Parser.Dihedral_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_dihedral_statement)
        self._la = 0 # Token type
        try:
            self.state = 420
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CNS_MR_Parser.Assign, CNS_MR_Parser.R_brace]:
                self.enterOuterAlt(localctx, 1)
                self.state = 403
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==CNS_MR_Parser.Assign:
                    self.state = 400
                    self.dihedral_assign()
                    self.state = 405
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass
            elif token in [CNS_MR_Parser.Cv]:
                self.enterOuterAlt(localctx, 2)
                self.state = 406
                self.match(CNS_MR_Parser.Cv)
                self.state = 407
                self.match(CNS_MR_Parser.Equ_op)
                self.state = 408
                self.match(CNS_MR_Parser.Integer)
                pass
            elif token in [CNS_MR_Parser.Nassign]:
                self.enterOuterAlt(localctx, 3)
                self.state = 409
                self.match(CNS_MR_Parser.Nassign)
                self.state = 410
                self.match(CNS_MR_Parser.Equ_op)
                self.state = 411
                self.match(CNS_MR_Parser.Integer)
                pass
            elif token in [CNS_MR_Parser.Partition]:
                self.enterOuterAlt(localctx, 4)
                self.state = 412
                self.match(CNS_MR_Parser.Partition)
                self.state = 413
                self.match(CNS_MR_Parser.Equ_op)
                self.state = 414
                self.match(CNS_MR_Parser.Integer)
                pass
            elif token in [CNS_MR_Parser.Reset]:
                self.enterOuterAlt(localctx, 5)
                self.state = 415
                self.match(CNS_MR_Parser.Reset)
                pass
            elif token in [CNS_MR_Parser.Scale]:
                self.enterOuterAlt(localctx, 6)
                self.state = 416
                self.match(CNS_MR_Parser.Scale)
                self.state = 417
                self.match(CNS_MR_Parser.Equ_op)
                self.state = 418
                self.match(CNS_MR_Parser.Real)
                pass
            elif token in [CNS_MR_Parser.Print_any]:
                self.enterOuterAlt(localctx, 7)
                self.state = 419
                self.match(CNS_MR_Parser.Print_any)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Dihedral_assignContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Assign(self):
            return self.getToken(CNS_MR_Parser.Assign, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CNS_MR_Parser.SelectionContext)
            else:
                return self.getTypedRuleContext(CNS_MR_Parser.SelectionContext,i)


        def Real(self, i:int=None):
            if i is None:
                return self.getTokens(CNS_MR_Parser.Real)
            else:
                return self.getToken(CNS_MR_Parser.Real, i)

        def Integer(self):
            return self.getToken(CNS_MR_Parser.Integer, 0)

        def getRuleIndex(self):
            return CNS_MR_Parser.RULE_dihedral_assign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDihedral_assign" ):
                listener.enterDihedral_assign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDihedral_assign" ):
                listener.exitDihedral_assign(self)




    def dihedral_assign(self):

        localctx = CNS_MR_Parser.Dihedral_assignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_dihedral_assign)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 422
            self.match(CNS_MR_Parser.Assign)
            self.state = 423
            self.selection()
            self.state = 424
            self.selection()
            self.state = 425
            self.selection()
            self.state = 426
            self.selection()
            self.state = 427
            self.match(CNS_MR_Parser.Real)
            self.state = 428
            self.match(CNS_MR_Parser.Real)
            self.state = 429
            self.match(CNS_MR_Parser.Real)
            self.state = 430
            self.match(CNS_MR_Parser.Integer)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Plane_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Group(self):
            return self.getToken(CNS_MR_Parser.Group, 0)

        def L_brace(self):
            return self.getToken(CNS_MR_Parser.L_brace, 0)

        def group_statement(self):
            return self.getTypedRuleContext(CNS_MR_Parser.Group_statementContext,0)


        def R_brace(self):
            return self.getToken(CNS_MR_Parser.R_brace, 0)

        def Initialize(self):
            return self.getToken(CNS_MR_Parser.Initialize, 0)

        def Print_any(self):
            return self.getToken(CNS_MR_Parser.Print_any, 0)

        def getRuleIndex(self):
            return CNS_MR_Parser.RULE_plane_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPlane_statement" ):
                listener.enterPlane_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPlane_statement" ):
                listener.exitPlane_statement(self)




    def plane_statement(self):

        localctx = CNS_MR_Parser.Plane_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_plane_statement)
        try:
            self.state = 439
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CNS_MR_Parser.Group]:
                self.enterOuterAlt(localctx, 1)
                self.state = 432
                self.match(CNS_MR_Parser.Group)
                self.state = 433
                self.match(CNS_MR_Parser.L_brace)
                self.state = 434
                self.group_statement()
                self.state = 435
                self.match(CNS_MR_Parser.R_brace)
                pass
            elif token in [CNS_MR_Parser.Initialize]:
                self.enterOuterAlt(localctx, 2)
                self.state = 437
                self.match(CNS_MR_Parser.Initialize)
                pass
            elif token in [CNS_MR_Parser.Print_any]:
                self.enterOuterAlt(localctx, 3)
                self.state = 438
                self.match(CNS_MR_Parser.Print_any)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Group_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Selection(self):
            return self.getToken(CNS_MR_Parser.Selection, 0)

        def Equ_op(self):
            return self.getToken(CNS_MR_Parser.Equ_op, 0)

        def selection(self):
            return self.getTypedRuleContext(CNS_MR_Parser.SelectionContext,0)


        def Weight(self):
            return self.getToken(CNS_MR_Parser.Weight, 0)

        def Real(self):
            return self.getToken(CNS_MR_Parser.Real, 0)

        def getRuleIndex(self):
            return CNS_MR_Parser.RULE_group_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGroup_statement" ):
                listener.enterGroup_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGroup_statement" ):
                listener.exitGroup_statement(self)




    def group_statement(self):

        localctx = CNS_MR_Parser.Group_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_group_statement)
        try:
            self.state = 447
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CNS_MR_Parser.Selection]:
                self.enterOuterAlt(localctx, 1)
                self.state = 441
                self.match(CNS_MR_Parser.Selection)
                self.state = 442
                self.match(CNS_MR_Parser.Equ_op)
                self.state = 443
                self.selection()
                pass
            elif token in [CNS_MR_Parser.Weight]:
                self.enterOuterAlt(localctx, 2)
                self.state = 444
                self.match(CNS_MR_Parser.Weight)
                self.state = 445
                self.match(CNS_MR_Parser.Equ_op)
                self.state = 446
                self.match(CNS_MR_Parser.Real)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Harmonic_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Exponent(self):
            return self.getToken(CNS_MR_Parser.Exponent, 0)

        def Equ_op(self):
            return self.getToken(CNS_MR_Parser.Equ_op, 0)

        def Integer(self):
            return self.getToken(CNS_MR_Parser.Integer, 0)

        def Normal(self):
            return self.getToken(CNS_MR_Parser.Normal, 0)

        def vector_3d(self):
            return self.getTypedRuleContext(CNS_MR_Parser.Vector_3dContext,0)


        def getRuleIndex(self):
            return CNS_MR_Parser.RULE_harmonic_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHarmonic_statement" ):
                listener.enterHarmonic_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHarmonic_statement" ):
                listener.exitHarmonic_statement(self)




    def harmonic_statement(self):

        localctx = CNS_MR_Parser.Harmonic_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_harmonic_statement)
        try:
            self.state = 455
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CNS_MR_Parser.Exponent]:
                self.enterOuterAlt(localctx, 1)
                self.state = 449
                self.match(CNS_MR_Parser.Exponent)
                self.state = 450
                self.match(CNS_MR_Parser.Equ_op)
                self.state = 451
                self.match(CNS_MR_Parser.Integer)
                pass
            elif token in [CNS_MR_Parser.Normal]:
                self.enterOuterAlt(localctx, 2)
                self.state = 452
                self.match(CNS_MR_Parser.Normal)
                self.state = 453
                self.match(CNS_MR_Parser.Equ_op)
                self.state = 454
                self.vector_3d()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Sani_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def sani_assign(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CNS_MR_Parser.Sani_assignContext)
            else:
                return self.getTypedRuleContext(CNS_MR_Parser.Sani_assignContext,i)


        def Classification(self):
            return self.getToken(CNS_MR_Parser.Classification, 0)

        def Equ_op(self):
            return self.getToken(CNS_MR_Parser.Equ_op, 0)

        def Class_name(self):
            return self.getToken(CNS_MR_Parser.Class_name, 0)

        def Coefficients(self):
            return self.getToken(CNS_MR_Parser.Coefficients, 0)

        def Real(self, i:int=None):
            if i is None:
                return self.getTokens(CNS_MR_Parser.Real)
            else:
                return self.getToken(CNS_MR_Parser.Real, i)

        def ForceConstant(self):
            return self.getToken(CNS_MR_Parser.ForceConstant, 0)

        def Nrestraints(self):
            return self.getToken(CNS_MR_Parser.Nrestraints, 0)

        def Integer(self):
            return self.getToken(CNS_MR_Parser.Integer, 0)

        def Potential(self):
            return self.getToken(CNS_MR_Parser.Potential, 0)

        def Rdc_potential(self):
            return self.getToken(CNS_MR_Parser.Rdc_potential, 0)

        def Print(self):
            return self.getToken(CNS_MR_Parser.Print, 0)

        def Threshold(self):
            return self.getToken(CNS_MR_Parser.Threshold, 0)

        def Reset(self):
            return self.getToken(CNS_MR_Parser.Reset, 0)

        def getRuleIndex(self):
            return CNS_MR_Parser.RULE_sani_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSani_statement" ):
                listener.enterSani_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSani_statement" ):
                listener.exitSani_statement(self)




    def sani_statement(self):

        localctx = CNS_MR_Parser.Sani_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_sani_statement)
        self._la = 0 # Token type
        try:
            self.state = 483
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CNS_MR_Parser.Assign, CNS_MR_Parser.R_brace]:
                self.enterOuterAlt(localctx, 1)
                self.state = 460
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==CNS_MR_Parser.Assign:
                    self.state = 457
                    self.sani_assign()
                    self.state = 462
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass
            elif token in [CNS_MR_Parser.Classification]:
                self.enterOuterAlt(localctx, 2)
                self.state = 463
                self.match(CNS_MR_Parser.Classification)
                self.state = 464
                self.match(CNS_MR_Parser.Equ_op)
                self.state = 465
                self.match(CNS_MR_Parser.Class_name)
                pass
            elif token in [CNS_MR_Parser.Coefficients]:
                self.enterOuterAlt(localctx, 3)
                self.state = 466
                self.match(CNS_MR_Parser.Coefficients)
                self.state = 467
                self.match(CNS_MR_Parser.Real)
                self.state = 468
                self.match(CNS_MR_Parser.Real)
                self.state = 469
                self.match(CNS_MR_Parser.Real)
                pass
            elif token in [CNS_MR_Parser.ForceConstant]:
                self.enterOuterAlt(localctx, 4)
                self.state = 470
                self.match(CNS_MR_Parser.ForceConstant)
                self.state = 471
                self.match(CNS_MR_Parser.Equ_op)
                self.state = 472
                self.match(CNS_MR_Parser.Real)
                pass
            elif token in [CNS_MR_Parser.Nrestraints]:
                self.enterOuterAlt(localctx, 5)
                self.state = 473
                self.match(CNS_MR_Parser.Nrestraints)
                self.state = 474
                self.match(CNS_MR_Parser.Equ_op)
                self.state = 475
                self.match(CNS_MR_Parser.Integer)
                pass
            elif token in [CNS_MR_Parser.Potential]:
                self.enterOuterAlt(localctx, 6)
                self.state = 476
                self.match(CNS_MR_Parser.Potential)
                self.state = 477
                self.match(CNS_MR_Parser.Equ_op)
                self.state = 478
                self.match(CNS_MR_Parser.Rdc_potential)
                pass
            elif token in [CNS_MR_Parser.Print]:
                self.enterOuterAlt(localctx, 7)
                self.state = 479
                self.match(CNS_MR_Parser.Print)
                self.state = 480
                self.match(CNS_MR_Parser.Threshold)
                self.state = 481
                self.match(CNS_MR_Parser.Real)
                pass
            elif token in [CNS_MR_Parser.Reset]:
                self.enterOuterAlt(localctx, 8)
                self.state = 482
                self.match(CNS_MR_Parser.Reset)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Sani_assignContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Assign(self):
            return self.getToken(CNS_MR_Parser.Assign, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CNS_MR_Parser.SelectionContext)
            else:
                return self.getTypedRuleContext(CNS_MR_Parser.SelectionContext,i)


        def Real(self, i:int=None):
            if i is None:
                return self.getTokens(CNS_MR_Parser.Real)
            else:
                return self.getToken(CNS_MR_Parser.Real, i)

        def getRuleIndex(self):
            return CNS_MR_Parser.RULE_sani_assign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSani_assign" ):
                listener.enterSani_assign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSani_assign" ):
                listener.exitSani_assign(self)




    def sani_assign(self):

        localctx = CNS_MR_Parser.Sani_assignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_sani_assign)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 485
            self.match(CNS_MR_Parser.Assign)
            self.state = 486
            self.selection()
            self.state = 487
            self.selection()
            self.state = 488
            self.selection()
            self.state = 489
            self.selection()
            self.state = 490
            self.selection()
            self.state = 491
            self.selection()
            self.state = 492
            self.match(CNS_MR_Parser.Real)
            self.state = 493
            self.match(CNS_MR_Parser.Real)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Coupling_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def coup_assign(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CNS_MR_Parser.Coup_assignContext)
            else:
                return self.getTypedRuleContext(CNS_MR_Parser.Coup_assignContext,i)


        def Classification(self):
            return self.getToken(CNS_MR_Parser.Classification, 0)

        def Equ_op(self):
            return self.getToken(CNS_MR_Parser.Equ_op, 0)

        def Class_name(self):
            return self.getToken(CNS_MR_Parser.Class_name, 0)

        def Coefficients(self):
            return self.getToken(CNS_MR_Parser.Coefficients, 0)

        def Real(self, i:int=None):
            if i is None:
                return self.getTokens(CNS_MR_Parser.Real)
            else:
                return self.getToken(CNS_MR_Parser.Real, i)

        def Cv(self):
            return self.getToken(CNS_MR_Parser.Cv, 0)

        def Integer(self):
            return self.getToken(CNS_MR_Parser.Integer, 0)

        def ForceConstant(self):
            return self.getToken(CNS_MR_Parser.ForceConstant, 0)

        def Nrestraints(self):
            return self.getToken(CNS_MR_Parser.Nrestraints, 0)

        def Partition(self):
            return self.getToken(CNS_MR_Parser.Partition, 0)

        def Potential(self):
            return self.getToken(CNS_MR_Parser.Potential, 0)

        def Coupling_potential(self):
            return self.getToken(CNS_MR_Parser.Coupling_potential, 0)

        def Print(self):
            return self.getToken(CNS_MR_Parser.Print, 0)

        def Threshold(self):
            return self.getToken(CNS_MR_Parser.Threshold, 0)

        def All(self):
            return self.getToken(CNS_MR_Parser.All, 0)

        def Reset(self):
            return self.getToken(CNS_MR_Parser.Reset, 0)

        def getRuleIndex(self):
            return CNS_MR_Parser.RULE_coupling_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCoupling_statement" ):
                listener.enterCoupling_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCoupling_statement" ):
                listener.exitCoupling_statement(self)




    def coupling_statement(self):

        localctx = CNS_MR_Parser.Coupling_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_coupling_statement)
        self._la = 0 # Token type
        try:
            self.state = 536
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CNS_MR_Parser.Assign, CNS_MR_Parser.R_brace]:
                self.enterOuterAlt(localctx, 1)
                self.state = 498
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==CNS_MR_Parser.Assign:
                    self.state = 495
                    self.coup_assign()
                    self.state = 500
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass
            elif token in [CNS_MR_Parser.Classification]:
                self.enterOuterAlt(localctx, 2)
                self.state = 501
                self.match(CNS_MR_Parser.Classification)
                self.state = 502
                self.match(CNS_MR_Parser.Equ_op)
                self.state = 503
                self.match(CNS_MR_Parser.Class_name)
                pass
            elif token in [CNS_MR_Parser.Coefficients]:
                self.enterOuterAlt(localctx, 3)
                self.state = 504
                self.match(CNS_MR_Parser.Coefficients)
                self.state = 505
                self.match(CNS_MR_Parser.Real)
                self.state = 506
                self.match(CNS_MR_Parser.Real)
                self.state = 507
                self.match(CNS_MR_Parser.Real)
                self.state = 508
                self.match(CNS_MR_Parser.Real)
                pass
            elif token in [CNS_MR_Parser.Cv]:
                self.enterOuterAlt(localctx, 4)
                self.state = 509
                self.match(CNS_MR_Parser.Cv)
                self.state = 510
                self.match(CNS_MR_Parser.Equ_op)
                self.state = 511
                self.match(CNS_MR_Parser.Integer)
                pass
            elif token in [CNS_MR_Parser.ForceConstant]:
                self.enterOuterAlt(localctx, 5)
                self.state = 512
                self.match(CNS_MR_Parser.ForceConstant)
                self.state = 513
                self.match(CNS_MR_Parser.Real)
                self.state = 515
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CNS_MR_Parser.Real:
                    self.state = 514
                    self.match(CNS_MR_Parser.Real)


                pass
            elif token in [CNS_MR_Parser.Nrestraints]:
                self.enterOuterAlt(localctx, 6)
                self.state = 517
                self.match(CNS_MR_Parser.Nrestraints)
                self.state = 518
                self.match(CNS_MR_Parser.Equ_op)
                self.state = 519
                self.match(CNS_MR_Parser.Integer)
                pass
            elif token in [CNS_MR_Parser.Partition]:
                self.enterOuterAlt(localctx, 7)
                self.state = 520
                self.match(CNS_MR_Parser.Partition)
                self.state = 521
                self.match(CNS_MR_Parser.Equ_op)
                self.state = 522
                self.match(CNS_MR_Parser.Integer)
                pass
            elif token in [CNS_MR_Parser.Potential]:
                self.enterOuterAlt(localctx, 8)
                self.state = 523
                self.match(CNS_MR_Parser.Potential)
                self.state = 524
                self.match(CNS_MR_Parser.Equ_op)
                self.state = 525
                self.match(CNS_MR_Parser.Coupling_potential)
                pass
            elif token in [CNS_MR_Parser.Print]:
                self.enterOuterAlt(localctx, 9)
                self.state = 526
                self.match(CNS_MR_Parser.Print)
                self.state = 527
                self.match(CNS_MR_Parser.Threshold)
                self.state = 528
                self.match(CNS_MR_Parser.Real)
                self.state = 533
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [CNS_MR_Parser.All]:
                    self.state = 529
                    self.match(CNS_MR_Parser.All)
                    pass
                elif token in [CNS_MR_Parser.Classification]:
                    self.state = 530
                    self.match(CNS_MR_Parser.Classification)
                    self.state = 531
                    self.match(CNS_MR_Parser.Equ_op)
                    self.state = 532
                    self.match(CNS_MR_Parser.Class_name)
                    pass
                else:
                    raise NoViableAltException(self)

                pass
            elif token in [CNS_MR_Parser.Reset]:
                self.enterOuterAlt(localctx, 10)
                self.state = 535
                self.match(CNS_MR_Parser.Reset)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Coup_assignContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Assign(self):
            return self.getToken(CNS_MR_Parser.Assign, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CNS_MR_Parser.SelectionContext)
            else:
                return self.getTypedRuleContext(CNS_MR_Parser.SelectionContext,i)


        def Real(self, i:int=None):
            if i is None:
                return self.getTokens(CNS_MR_Parser.Real)
            else:
                return self.getToken(CNS_MR_Parser.Real, i)

        def getRuleIndex(self):
            return CNS_MR_Parser.RULE_coup_assign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCoup_assign" ):
                listener.enterCoup_assign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCoup_assign" ):
                listener.exitCoup_assign(self)




    def coup_assign(self):

        localctx = CNS_MR_Parser.Coup_assignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_coup_assign)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 538
            self.match(CNS_MR_Parser.Assign)
            self.state = 539
            self.selection()
            self.state = 540
            self.selection()
            self.state = 541
            self.selection()
            self.state = 542
            self.selection()
            self.state = 548
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CNS_MR_Parser.L_paren:
                self.state = 543
                self.selection()
                self.state = 544
                self.selection()
                self.state = 545
                self.selection()
                self.state = 546
                self.selection()


            self.state = 550
            self.match(CNS_MR_Parser.Real)
            self.state = 551
            self.match(CNS_MR_Parser.Real)
            self.state = 554
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CNS_MR_Parser.Real:
                self.state = 552
                self.match(CNS_MR_Parser.Real)
                self.state = 553
                self.match(CNS_MR_Parser.Real)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Carbon_shift_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def carbon_shift_assign(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CNS_MR_Parser.Carbon_shift_assignContext)
            else:
                return self.getTypedRuleContext(CNS_MR_Parser.Carbon_shift_assignContext,i)


        def Classification(self):
            return self.getToken(CNS_MR_Parser.Classification, 0)

        def Equ_op(self):
            return self.getToken(CNS_MR_Parser.Equ_op, 0)

        def Class_name(self):
            return self.getToken(CNS_MR_Parser.Class_name, 0)

        def Expectation(self):
            return self.getToken(CNS_MR_Parser.Expectation, 0)

        def Integer(self, i:int=None):
            if i is None:
                return self.getTokens(CNS_MR_Parser.Integer)
            else:
                return self.getToken(CNS_MR_Parser.Integer, i)

        def Real(self, i:int=None):
            if i is None:
                return self.getTokens(CNS_MR_Parser.Real)
            else:
                return self.getToken(CNS_MR_Parser.Real, i)

        def ForceConstant(self):
            return self.getToken(CNS_MR_Parser.ForceConstant, 0)

        def Nrestraints(self):
            return self.getToken(CNS_MR_Parser.Nrestraints, 0)

        def PhiStep(self):
            return self.getToken(CNS_MR_Parser.PhiStep, 0)

        def PsiStep(self):
            return self.getToken(CNS_MR_Parser.PsiStep, 0)

        def Potential(self):
            return self.getToken(CNS_MR_Parser.Potential, 0)

        def Rdc_potential(self):
            return self.getToken(CNS_MR_Parser.Rdc_potential, 0)

        def Print(self):
            return self.getToken(CNS_MR_Parser.Print, 0)

        def Threshold(self):
            return self.getToken(CNS_MR_Parser.Threshold, 0)

        def carbon_shift_rcoil(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CNS_MR_Parser.Carbon_shift_rcoilContext)
            else:
                return self.getTypedRuleContext(CNS_MR_Parser.Carbon_shift_rcoilContext,i)


        def Reset(self):
            return self.getToken(CNS_MR_Parser.Reset, 0)

        def Zero(self):
            return self.getToken(CNS_MR_Parser.Zero, 0)

        def getRuleIndex(self):
            return CNS_MR_Parser.RULE_carbon_shift_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCarbon_shift_statement" ):
                listener.enterCarbon_shift_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCarbon_shift_statement" ):
                listener.exitCarbon_shift_statement(self)




    def carbon_shift_statement(self):

        localctx = CNS_MR_Parser.Carbon_shift_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_carbon_shift_statement)
        self._la = 0 # Token type
        try:
            self.state = 597
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,34,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 559
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==CNS_MR_Parser.Assign:
                    self.state = 556
                    self.carbon_shift_assign()
                    self.state = 561
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 562
                self.match(CNS_MR_Parser.Classification)
                self.state = 563
                self.match(CNS_MR_Parser.Equ_op)
                self.state = 564
                self.match(CNS_MR_Parser.Class_name)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 565
                self.match(CNS_MR_Parser.Expectation)
                self.state = 566
                self.match(CNS_MR_Parser.Integer)
                self.state = 567
                self.match(CNS_MR_Parser.Integer)
                self.state = 568
                self.match(CNS_MR_Parser.Real)
                self.state = 569
                self.match(CNS_MR_Parser.Real)
                self.state = 570
                self.match(CNS_MR_Parser.Real)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 571
                self.match(CNS_MR_Parser.ForceConstant)
                self.state = 572
                self.match(CNS_MR_Parser.Equ_op)
                self.state = 573
                self.match(CNS_MR_Parser.Real)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 574
                self.match(CNS_MR_Parser.Nrestraints)
                self.state = 575
                self.match(CNS_MR_Parser.Equ_op)
                self.state = 576
                self.match(CNS_MR_Parser.Integer)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 577
                self.match(CNS_MR_Parser.PhiStep)
                self.state = 578
                self.match(CNS_MR_Parser.Equ_op)
                self.state = 579
                self.match(CNS_MR_Parser.Real)
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 580
                self.match(CNS_MR_Parser.PsiStep)
                self.state = 581
                self.match(CNS_MR_Parser.Equ_op)
                self.state = 582
                self.match(CNS_MR_Parser.Real)
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 583
                self.match(CNS_MR_Parser.Potential)
                self.state = 584
                self.match(CNS_MR_Parser.Equ_op)
                self.state = 585
                self.match(CNS_MR_Parser.Rdc_potential)
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 586
                self.match(CNS_MR_Parser.Print)
                self.state = 587
                self.match(CNS_MR_Parser.Threshold)
                self.state = 588
                self.match(CNS_MR_Parser.Real)
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 592
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==CNS_MR_Parser.Rcoil:
                    self.state = 589
                    self.carbon_shift_rcoil()
                    self.state = 594
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 595
                self.match(CNS_MR_Parser.Reset)
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 596
                self.match(CNS_MR_Parser.Zero)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Carbon_shift_assignContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Assign(self):
            return self.getToken(CNS_MR_Parser.Assign, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CNS_MR_Parser.SelectionContext)
            else:
                return self.getTypedRuleContext(CNS_MR_Parser.SelectionContext,i)


        def Real(self, i:int=None):
            if i is None:
                return self.getTokens(CNS_MR_Parser.Real)
            else:
                return self.getToken(CNS_MR_Parser.Real, i)

        def getRuleIndex(self):
            return CNS_MR_Parser.RULE_carbon_shift_assign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCarbon_shift_assign" ):
                listener.enterCarbon_shift_assign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCarbon_shift_assign" ):
                listener.exitCarbon_shift_assign(self)




    def carbon_shift_assign(self):

        localctx = CNS_MR_Parser.Carbon_shift_assignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_carbon_shift_assign)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 599
            self.match(CNS_MR_Parser.Assign)
            self.state = 600
            self.selection()
            self.state = 601
            self.selection()
            self.state = 602
            self.selection()
            self.state = 603
            self.selection()
            self.state = 604
            self.selection()
            self.state = 605
            self.match(CNS_MR_Parser.Real)
            self.state = 606
            self.match(CNS_MR_Parser.Real)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Carbon_shift_rcoilContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Rcoil(self):
            return self.getToken(CNS_MR_Parser.Rcoil, 0)

        def selection(self):
            return self.getTypedRuleContext(CNS_MR_Parser.SelectionContext,0)


        def Real(self, i:int=None):
            if i is None:
                return self.getTokens(CNS_MR_Parser.Real)
            else:
                return self.getToken(CNS_MR_Parser.Real, i)

        def getRuleIndex(self):
            return CNS_MR_Parser.RULE_carbon_shift_rcoil

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCarbon_shift_rcoil" ):
                listener.enterCarbon_shift_rcoil(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCarbon_shift_rcoil" ):
                listener.exitCarbon_shift_rcoil(self)




    def carbon_shift_rcoil(self):

        localctx = CNS_MR_Parser.Carbon_shift_rcoilContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_carbon_shift_rcoil)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 608
            self.match(CNS_MR_Parser.Rcoil)
            self.state = 609
            self.selection()
            self.state = 610
            self.match(CNS_MR_Parser.Real)
            self.state = 611
            self.match(CNS_MR_Parser.Real)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Proton_shift_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def observed(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CNS_MR_Parser.ObservedContext)
            else:
                return self.getTypedRuleContext(CNS_MR_Parser.ObservedContext,i)


        def proton_shift_rcoil(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CNS_MR_Parser.Proton_shift_rcoilContext)
            else:
                return self.getTypedRuleContext(CNS_MR_Parser.Proton_shift_rcoilContext,i)


        def proton_shift_anisotropy(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CNS_MR_Parser.Proton_shift_anisotropyContext)
            else:
                return self.getTypedRuleContext(CNS_MR_Parser.Proton_shift_anisotropyContext,i)


        def proton_shift_amides(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CNS_MR_Parser.Proton_shift_amidesContext)
            else:
                return self.getTypedRuleContext(CNS_MR_Parser.Proton_shift_amidesContext,i)


        def proton_shift_carbons(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CNS_MR_Parser.Proton_shift_carbonsContext)
            else:
                return self.getTypedRuleContext(CNS_MR_Parser.Proton_shift_carbonsContext,i)


        def proton_shift_nitrogens(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CNS_MR_Parser.Proton_shift_nitrogensContext)
            else:
                return self.getTypedRuleContext(CNS_MR_Parser.Proton_shift_nitrogensContext,i)


        def proton_shift_oxygens(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CNS_MR_Parser.Proton_shift_oxygensContext)
            else:
                return self.getTypedRuleContext(CNS_MR_Parser.Proton_shift_oxygensContext,i)


        def proton_shift_ring_atoms(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CNS_MR_Parser.Proton_shift_ring_atomsContext)
            else:
                return self.getTypedRuleContext(CNS_MR_Parser.Proton_shift_ring_atomsContext,i)


        def proton_shift_alphas_and_amides(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CNS_MR_Parser.Proton_shift_alphas_and_amidesContext)
            else:
                return self.getTypedRuleContext(CNS_MR_Parser.Proton_shift_alphas_and_amidesContext,i)


        def Classification(self):
            return self.getToken(CNS_MR_Parser.Classification, 0)

        def Equ_op(self):
            return self.getToken(CNS_MR_Parser.Equ_op, 0)

        def Class_name(self):
            return self.getToken(CNS_MR_Parser.Class_name, 0)

        def Error(self):
            return self.getToken(CNS_MR_Parser.Error, 0)

        def Real(self, i:int=None):
            if i is None:
                return self.getTokens(CNS_MR_Parser.Real)
            else:
                return self.getToken(CNS_MR_Parser.Real, i)

        def ForceConstant(self):
            return self.getToken(CNS_MR_Parser.ForceConstant, 0)

        def Potential(self):
            return self.getToken(CNS_MR_Parser.Potential, 0)

        def Coupling_potential(self):
            return self.getToken(CNS_MR_Parser.Coupling_potential, 0)

        def Print(self):
            return self.getToken(CNS_MR_Parser.Print, 0)

        def Threshold(self):
            return self.getToken(CNS_MR_Parser.Threshold, 0)

        def Rmsd_or_Not(self):
            return self.getToken(CNS_MR_Parser.Rmsd_or_Not, 0)

        def All(self):
            return self.getToken(CNS_MR_Parser.All, 0)

        def Reset(self):
            return self.getToken(CNS_MR_Parser.Reset, 0)

        def getRuleIndex(self):
            return CNS_MR_Parser.RULE_proton_shift_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProton_shift_statement" ):
                listener.enterProton_shift_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProton_shift_statement" ):
                listener.exitProton_shift_statement(self)




    def proton_shift_statement(self):

        localctx = CNS_MR_Parser.Proton_shift_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_proton_shift_statement)
        self._la = 0 # Token type
        try:
            self.state = 693
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,47,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 616
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==CNS_MR_Parser.Observed:
                    self.state = 613
                    self.observed()
                    self.state = 618
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 622
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==CNS_MR_Parser.Rcoil:
                    self.state = 619
                    self.proton_shift_rcoil()
                    self.state = 624
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 628
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==CNS_MR_Parser.Anisotropy:
                    self.state = 625
                    self.proton_shift_anisotropy()
                    self.state = 630
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 634
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==CNS_MR_Parser.Amides:
                    self.state = 631
                    self.proton_shift_amides()
                    self.state = 636
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 640
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==CNS_MR_Parser.Carbons:
                    self.state = 637
                    self.proton_shift_carbons()
                    self.state = 642
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 646
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==CNS_MR_Parser.Nitrogens:
                    self.state = 643
                    self.proton_shift_nitrogens()
                    self.state = 648
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 652
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==CNS_MR_Parser.Oxygens:
                    self.state = 649
                    self.proton_shift_oxygens()
                    self.state = 654
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 658
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==CNS_MR_Parser.RingAtoms:
                    self.state = 655
                    self.proton_shift_ring_atoms()
                    self.state = 660
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 664
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==CNS_MR_Parser.AlphasAndAmides:
                    self.state = 661
                    self.proton_shift_alphas_and_amides()
                    self.state = 666
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 667
                self.match(CNS_MR_Parser.Classification)
                self.state = 668
                self.match(CNS_MR_Parser.Equ_op)
                self.state = 669
                self.match(CNS_MR_Parser.Class_name)
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 670
                self.match(CNS_MR_Parser.Error)
                self.state = 672
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CNS_MR_Parser.Equ_op:
                    self.state = 671
                    self.match(CNS_MR_Parser.Equ_op)


                self.state = 674
                self.match(CNS_MR_Parser.Real)
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 675
                self.match(CNS_MR_Parser.ForceConstant)
                self.state = 676
                self.match(CNS_MR_Parser.Real)
                self.state = 678
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CNS_MR_Parser.Real:
                    self.state = 677
                    self.match(CNS_MR_Parser.Real)


                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 680
                self.match(CNS_MR_Parser.Potential)
                self.state = 681
                self.match(CNS_MR_Parser.Coupling_potential)
                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 682
                self.match(CNS_MR_Parser.Print)
                self.state = 683
                self.match(CNS_MR_Parser.Threshold)
                self.state = 684
                self.match(CNS_MR_Parser.Real)
                self.state = 689
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [CNS_MR_Parser.All]:
                    self.state = 685
                    self.match(CNS_MR_Parser.All)
                    pass
                elif token in [CNS_MR_Parser.Classification]:
                    self.state = 686
                    self.match(CNS_MR_Parser.Classification)
                    self.state = 687
                    self.match(CNS_MR_Parser.Equ_op)
                    self.state = 688
                    self.match(CNS_MR_Parser.Class_name)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 691
                self.match(CNS_MR_Parser.Rmsd_or_Not)
                pass

            elif la_ == 15:
                self.enterOuterAlt(localctx, 15)
                self.state = 692
                self.match(CNS_MR_Parser.Reset)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ObservedContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Observed(self):
            return self.getToken(CNS_MR_Parser.Observed, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CNS_MR_Parser.SelectionContext)
            else:
                return self.getTypedRuleContext(CNS_MR_Parser.SelectionContext,i)


        def Real(self, i:int=None):
            if i is None:
                return self.getTokens(CNS_MR_Parser.Real)
            else:
                return self.getToken(CNS_MR_Parser.Real, i)

        def getRuleIndex(self):
            return CNS_MR_Parser.RULE_observed

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterObserved" ):
                listener.enterObserved(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitObserved" ):
                listener.exitObserved(self)




    def observed(self):

        localctx = CNS_MR_Parser.ObservedContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_observed)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 695
            self.match(CNS_MR_Parser.Observed)
            self.state = 696
            self.selection()
            self.state = 698
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CNS_MR_Parser.L_paren:
                self.state = 697
                self.selection()


            self.state = 700
            self.match(CNS_MR_Parser.Real)
            self.state = 702
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CNS_MR_Parser.Real:
                self.state = 701
                self.match(CNS_MR_Parser.Real)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Proton_shift_rcoilContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Rcoil(self):
            return self.getToken(CNS_MR_Parser.Rcoil, 0)

        def selection(self):
            return self.getTypedRuleContext(CNS_MR_Parser.SelectionContext,0)


        def Real(self):
            return self.getToken(CNS_MR_Parser.Real, 0)

        def getRuleIndex(self):
            return CNS_MR_Parser.RULE_proton_shift_rcoil

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProton_shift_rcoil" ):
                listener.enterProton_shift_rcoil(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProton_shift_rcoil" ):
                listener.exitProton_shift_rcoil(self)




    def proton_shift_rcoil(self):

        localctx = CNS_MR_Parser.Proton_shift_rcoilContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_proton_shift_rcoil)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 704
            self.match(CNS_MR_Parser.Rcoil)
            self.state = 705
            self.selection()
            self.state = 706
            self.match(CNS_MR_Parser.Real)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Proton_shift_anisotropyContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Anisotropy(self):
            return self.getToken(CNS_MR_Parser.Anisotropy, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CNS_MR_Parser.SelectionContext)
            else:
                return self.getTypedRuleContext(CNS_MR_Parser.SelectionContext,i)


        def CO_or_CN(self):
            return self.getToken(CNS_MR_Parser.CO_or_CN, 0)

        def SC_or_BB(self):
            return self.getToken(CNS_MR_Parser.SC_or_BB, 0)

        def Logical(self):
            return self.getToken(CNS_MR_Parser.Logical, 0)

        def getRuleIndex(self):
            return CNS_MR_Parser.RULE_proton_shift_anisotropy

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProton_shift_anisotropy" ):
                listener.enterProton_shift_anisotropy(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProton_shift_anisotropy" ):
                listener.exitProton_shift_anisotropy(self)




    def proton_shift_anisotropy(self):

        localctx = CNS_MR_Parser.Proton_shift_anisotropyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_proton_shift_anisotropy)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 708
            self.match(CNS_MR_Parser.Anisotropy)
            self.state = 709
            self.selection()
            self.state = 710
            self.selection()
            self.state = 711
            self.selection()
            self.state = 712
            self.match(CNS_MR_Parser.CO_or_CN)
            self.state = 714
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CNS_MR_Parser.Logical:
                self.state = 713
                self.match(CNS_MR_Parser.Logical)


            self.state = 716
            self.match(CNS_MR_Parser.SC_or_BB)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Proton_shift_amidesContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Amides(self):
            return self.getToken(CNS_MR_Parser.Amides, 0)

        def selection(self):
            return self.getTypedRuleContext(CNS_MR_Parser.SelectionContext,0)


        def getRuleIndex(self):
            return CNS_MR_Parser.RULE_proton_shift_amides

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProton_shift_amides" ):
                listener.enterProton_shift_amides(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProton_shift_amides" ):
                listener.exitProton_shift_amides(self)




    def proton_shift_amides(self):

        localctx = CNS_MR_Parser.Proton_shift_amidesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_proton_shift_amides)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 718
            self.match(CNS_MR_Parser.Amides)
            self.state = 719
            self.selection()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Proton_shift_carbonsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Carbons(self):
            return self.getToken(CNS_MR_Parser.Carbons, 0)

        def selection(self):
            return self.getTypedRuleContext(CNS_MR_Parser.SelectionContext,0)


        def getRuleIndex(self):
            return CNS_MR_Parser.RULE_proton_shift_carbons

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProton_shift_carbons" ):
                listener.enterProton_shift_carbons(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProton_shift_carbons" ):
                listener.exitProton_shift_carbons(self)




    def proton_shift_carbons(self):

        localctx = CNS_MR_Parser.Proton_shift_carbonsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_proton_shift_carbons)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 721
            self.match(CNS_MR_Parser.Carbons)
            self.state = 722
            self.selection()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Proton_shift_nitrogensContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Nitrogens(self):
            return self.getToken(CNS_MR_Parser.Nitrogens, 0)

        def selection(self):
            return self.getTypedRuleContext(CNS_MR_Parser.SelectionContext,0)


        def getRuleIndex(self):
            return CNS_MR_Parser.RULE_proton_shift_nitrogens

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProton_shift_nitrogens" ):
                listener.enterProton_shift_nitrogens(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProton_shift_nitrogens" ):
                listener.exitProton_shift_nitrogens(self)




    def proton_shift_nitrogens(self):

        localctx = CNS_MR_Parser.Proton_shift_nitrogensContext(self, self._ctx, self.state)
        self.enterRule(localctx, 68, self.RULE_proton_shift_nitrogens)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 724
            self.match(CNS_MR_Parser.Nitrogens)
            self.state = 725
            self.selection()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Proton_shift_oxygensContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Oxygens(self):
            return self.getToken(CNS_MR_Parser.Oxygens, 0)

        def selection(self):
            return self.getTypedRuleContext(CNS_MR_Parser.SelectionContext,0)


        def getRuleIndex(self):
            return CNS_MR_Parser.RULE_proton_shift_oxygens

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProton_shift_oxygens" ):
                listener.enterProton_shift_oxygens(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProton_shift_oxygens" ):
                listener.exitProton_shift_oxygens(self)




    def proton_shift_oxygens(self):

        localctx = CNS_MR_Parser.Proton_shift_oxygensContext(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_proton_shift_oxygens)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 727
            self.match(CNS_MR_Parser.Oxygens)
            self.state = 728
            self.selection()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Proton_shift_ring_atomsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RingAtoms(self):
            return self.getToken(CNS_MR_Parser.RingAtoms, 0)

        def Ring_resname(self):
            return self.getToken(CNS_MR_Parser.Ring_resname, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CNS_MR_Parser.SelectionContext)
            else:
                return self.getTypedRuleContext(CNS_MR_Parser.SelectionContext,i)


        def getRuleIndex(self):
            return CNS_MR_Parser.RULE_proton_shift_ring_atoms

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProton_shift_ring_atoms" ):
                listener.enterProton_shift_ring_atoms(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProton_shift_ring_atoms" ):
                listener.exitProton_shift_ring_atoms(self)




    def proton_shift_ring_atoms(self):

        localctx = CNS_MR_Parser.Proton_shift_ring_atomsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_proton_shift_ring_atoms)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 730
            self.match(CNS_MR_Parser.RingAtoms)
            self.state = 731
            self.match(CNS_MR_Parser.Ring_resname)
            self.state = 732
            self.selection()
            self.state = 733
            self.selection()
            self.state = 734
            self.selection()
            self.state = 735
            self.selection()
            self.state = 736
            self.selection()
            self.state = 738
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CNS_MR_Parser.L_paren:
                self.state = 737
                self.selection()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Proton_shift_alphas_and_amidesContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AlphasAndAmides(self):
            return self.getToken(CNS_MR_Parser.AlphasAndAmides, 0)

        def selection(self):
            return self.getTypedRuleContext(CNS_MR_Parser.SelectionContext,0)


        def getRuleIndex(self):
            return CNS_MR_Parser.RULE_proton_shift_alphas_and_amides

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProton_shift_alphas_and_amides" ):
                listener.enterProton_shift_alphas_and_amides(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProton_shift_alphas_and_amides" ):
                listener.exitProton_shift_alphas_and_amides(self)




    def proton_shift_alphas_and_amides(self):

        localctx = CNS_MR_Parser.Proton_shift_alphas_and_amidesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_proton_shift_alphas_and_amides)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 740
            self.match(CNS_MR_Parser.AlphasAndAmides)
            self.state = 741
            self.selection()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Conformation_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def conf_assign(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CNS_MR_Parser.Conf_assignContext)
            else:
                return self.getTypedRuleContext(CNS_MR_Parser.Conf_assignContext,i)


        def Classification(self):
            return self.getToken(CNS_MR_Parser.Classification, 0)

        def Equ_op(self):
            return self.getToken(CNS_MR_Parser.Equ_op, 0)

        def Class_name(self):
            return self.getToken(CNS_MR_Parser.Class_name, 0)

        def Compressed(self):
            return self.getToken(CNS_MR_Parser.Compressed, 0)

        def Expectation(self):
            return self.getToken(CNS_MR_Parser.Expectation, 0)

        def Integer(self, i:int=None):
            if i is None:
                return self.getTokens(CNS_MR_Parser.Integer)
            else:
                return self.getToken(CNS_MR_Parser.Integer, i)

        def Real(self):
            return self.getToken(CNS_MR_Parser.Real, 0)

        def Error(self):
            return self.getToken(CNS_MR_Parser.Error, 0)

        def ForceConstant(self):
            return self.getToken(CNS_MR_Parser.ForceConstant, 0)

        def Nrestraints(self):
            return self.getToken(CNS_MR_Parser.Nrestraints, 0)

        def Phase(self):
            return self.getToken(CNS_MR_Parser.Phase, 0)

        def Potential(self):
            return self.getToken(CNS_MR_Parser.Potential, 0)

        def Rdc_potential(self):
            return self.getToken(CNS_MR_Parser.Rdc_potential, 0)

        def Print(self):
            return self.getToken(CNS_MR_Parser.Print, 0)

        def Threshold(self):
            return self.getToken(CNS_MR_Parser.Threshold, 0)

        def All(self):
            return self.getToken(CNS_MR_Parser.All, 0)

        def Reset(self):
            return self.getToken(CNS_MR_Parser.Reset, 0)

        def Size(self):
            return self.getToken(CNS_MR_Parser.Size, 0)

        def Dimensions(self):
            return self.getToken(CNS_MR_Parser.Dimensions, 0)

        def Zero(self):
            return self.getToken(CNS_MR_Parser.Zero, 0)

        def getRuleIndex(self):
            return CNS_MR_Parser.RULE_conformation_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConformation_statement" ):
                listener.enterConformation_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConformation_statement" ):
                listener.exitConformation_statement(self)




    def conformation_statement(self):

        localctx = CNS_MR_Parser.Conformation_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 76, self.RULE_conformation_statement)
        self._la = 0 # Token type
        try:
            self.state = 819
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CNS_MR_Parser.Assign, CNS_MR_Parser.R_brace]:
                self.enterOuterAlt(localctx, 1)
                self.state = 746
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==CNS_MR_Parser.Assign:
                    self.state = 743
                    self.conf_assign()
                    self.state = 748
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass
            elif token in [CNS_MR_Parser.Classification]:
                self.enterOuterAlt(localctx, 2)
                self.state = 749
                self.match(CNS_MR_Parser.Classification)
                self.state = 750
                self.match(CNS_MR_Parser.Equ_op)
                self.state = 751
                self.match(CNS_MR_Parser.Class_name)
                pass
            elif token in [CNS_MR_Parser.Compressed]:
                self.enterOuterAlt(localctx, 3)
                self.state = 752
                self.match(CNS_MR_Parser.Compressed)
                pass
            elif token in [CNS_MR_Parser.Expectation]:
                self.enterOuterAlt(localctx, 4)
                self.state = 753
                self.match(CNS_MR_Parser.Expectation)
                self.state = 754
                self.match(CNS_MR_Parser.Integer)
                self.state = 756
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,53,self._ctx)
                if la_ == 1:
                    self.state = 755
                    self.match(CNS_MR_Parser.Integer)


                self.state = 759
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,54,self._ctx)
                if la_ == 1:
                    self.state = 758
                    self.match(CNS_MR_Parser.Integer)


                self.state = 762
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CNS_MR_Parser.Integer:
                    self.state = 761
                    self.match(CNS_MR_Parser.Integer)


                self.state = 764
                self.match(CNS_MR_Parser.Real)
                pass
            elif token in [CNS_MR_Parser.Error]:
                self.enterOuterAlt(localctx, 5)
                self.state = 765
                self.match(CNS_MR_Parser.Error)
                self.state = 766
                self.match(CNS_MR_Parser.Equ_op)
                self.state = 767
                self.match(CNS_MR_Parser.Real)
                pass
            elif token in [CNS_MR_Parser.ForceConstant]:
                self.enterOuterAlt(localctx, 6)
                self.state = 768
                self.match(CNS_MR_Parser.ForceConstant)
                self.state = 769
                self.match(CNS_MR_Parser.Equ_op)
                self.state = 770
                self.match(CNS_MR_Parser.Real)
                pass
            elif token in [CNS_MR_Parser.Nrestraints]:
                self.enterOuterAlt(localctx, 7)
                self.state = 771
                self.match(CNS_MR_Parser.Nrestraints)
                self.state = 772
                self.match(CNS_MR_Parser.Equ_op)
                self.state = 773
                self.match(CNS_MR_Parser.Integer)
                pass
            elif token in [CNS_MR_Parser.Phase]:
                self.enterOuterAlt(localctx, 8)
                self.state = 774
                self.match(CNS_MR_Parser.Phase)
                self.state = 775
                self.match(CNS_MR_Parser.Integer)
                self.state = 776
                self.match(CNS_MR_Parser.Integer)
                self.state = 777
                self.match(CNS_MR_Parser.Integer)
                self.state = 781
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,56,self._ctx)
                if la_ == 1:
                    self.state = 778
                    self.match(CNS_MR_Parser.Integer)
                    self.state = 779
                    self.match(CNS_MR_Parser.Integer)
                    self.state = 780
                    self.match(CNS_MR_Parser.Integer)


                self.state = 786
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,57,self._ctx)
                if la_ == 1:
                    self.state = 783
                    self.match(CNS_MR_Parser.Integer)
                    self.state = 784
                    self.match(CNS_MR_Parser.Integer)
                    self.state = 785
                    self.match(CNS_MR_Parser.Integer)


                self.state = 791
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CNS_MR_Parser.Integer:
                    self.state = 788
                    self.match(CNS_MR_Parser.Integer)
                    self.state = 789
                    self.match(CNS_MR_Parser.Integer)
                    self.state = 790
                    self.match(CNS_MR_Parser.Integer)


                pass
            elif token in [CNS_MR_Parser.Potential]:
                self.enterOuterAlt(localctx, 9)
                self.state = 793
                self.match(CNS_MR_Parser.Potential)
                self.state = 794
                self.match(CNS_MR_Parser.Equ_op)
                self.state = 795
                self.match(CNS_MR_Parser.Rdc_potential)
                pass
            elif token in [CNS_MR_Parser.Print]:
                self.enterOuterAlt(localctx, 10)
                self.state = 796
                self.match(CNS_MR_Parser.Print)
                self.state = 797
                self.match(CNS_MR_Parser.Threshold)
                self.state = 798
                self.match(CNS_MR_Parser.Real)
                self.state = 803
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [CNS_MR_Parser.All]:
                    self.state = 799
                    self.match(CNS_MR_Parser.All)
                    pass
                elif token in [CNS_MR_Parser.Classification]:
                    self.state = 800
                    self.match(CNS_MR_Parser.Classification)
                    self.state = 801
                    self.match(CNS_MR_Parser.Equ_op)
                    self.state = 802
                    self.match(CNS_MR_Parser.Class_name)
                    pass
                else:
                    raise NoViableAltException(self)

                pass
            elif token in [CNS_MR_Parser.Reset]:
                self.enterOuterAlt(localctx, 11)
                self.state = 805
                self.match(CNS_MR_Parser.Reset)
                pass
            elif token in [CNS_MR_Parser.Size]:
                self.enterOuterAlt(localctx, 12)
                self.state = 806
                self.match(CNS_MR_Parser.Size)
                self.state = 807
                self.match(CNS_MR_Parser.Dimensions)
                self.state = 808
                self.match(CNS_MR_Parser.Integer)
                self.state = 810
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,60,self._ctx)
                if la_ == 1:
                    self.state = 809
                    self.match(CNS_MR_Parser.Integer)


                self.state = 813
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,61,self._ctx)
                if la_ == 1:
                    self.state = 812
                    self.match(CNS_MR_Parser.Integer)


                self.state = 816
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CNS_MR_Parser.Integer:
                    self.state = 815
                    self.match(CNS_MR_Parser.Integer)


                pass
            elif token in [CNS_MR_Parser.Zero]:
                self.enterOuterAlt(localctx, 13)
                self.state = 818
                self.match(CNS_MR_Parser.Zero)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Conf_assignContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Assign(self):
            return self.getToken(CNS_MR_Parser.Assign, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CNS_MR_Parser.SelectionContext)
            else:
                return self.getTypedRuleContext(CNS_MR_Parser.SelectionContext,i)


        def getRuleIndex(self):
            return CNS_MR_Parser.RULE_conf_assign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConf_assign" ):
                listener.enterConf_assign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConf_assign" ):
                listener.exitConf_assign(self)




    def conf_assign(self):

        localctx = CNS_MR_Parser.Conf_assignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 78, self.RULE_conf_assign)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 821
            self.match(CNS_MR_Parser.Assign)
            self.state = 822
            self.selection()
            self.state = 823
            self.selection()
            self.state = 824
            self.selection()
            self.state = 825
            self.selection()
            self.state = 831
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,64,self._ctx)
            if la_ == 1:
                self.state = 826
                self.selection()
                self.state = 827
                self.selection()
                self.state = 828
                self.selection()
                self.state = 829
                self.selection()


            self.state = 838
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,65,self._ctx)
            if la_ == 1:
                self.state = 833
                self.selection()
                self.state = 834
                self.selection()
                self.state = 835
                self.selection()
                self.state = 836
                self.selection()


            self.state = 845
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CNS_MR_Parser.L_paren:
                self.state = 840
                self.selection()
                self.state = 841
                self.selection()
                self.state = 842
                self.selection()
                self.state = 843
                self.selection()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Diffusion_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def dani_assign(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CNS_MR_Parser.Dani_assignContext)
            else:
                return self.getTypedRuleContext(CNS_MR_Parser.Dani_assignContext,i)


        def Classification(self):
            return self.getToken(CNS_MR_Parser.Classification, 0)

        def Equ_op(self):
            return self.getToken(CNS_MR_Parser.Equ_op, 0)

        def Class_name(self):
            return self.getToken(CNS_MR_Parser.Class_name, 0)

        def Coefficients(self):
            return self.getToken(CNS_MR_Parser.Coefficients, 0)

        def Real(self, i:int=None):
            if i is None:
                return self.getTokens(CNS_MR_Parser.Real)
            else:
                return self.getToken(CNS_MR_Parser.Real, i)

        def ForceConstant(self):
            return self.getToken(CNS_MR_Parser.ForceConstant, 0)

        def Nrestraints(self):
            return self.getToken(CNS_MR_Parser.Nrestraints, 0)

        def Integer(self):
            return self.getToken(CNS_MR_Parser.Integer, 0)

        def Potential(self):
            return self.getToken(CNS_MR_Parser.Potential, 0)

        def Rdc_potential(self):
            return self.getToken(CNS_MR_Parser.Rdc_potential, 0)

        def Print(self):
            return self.getToken(CNS_MR_Parser.Print, 0)

        def Threshold(self):
            return self.getToken(CNS_MR_Parser.Threshold, 0)

        def Reset(self):
            return self.getToken(CNS_MR_Parser.Reset, 0)

        def getRuleIndex(self):
            return CNS_MR_Parser.RULE_diffusion_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDiffusion_statement" ):
                listener.enterDiffusion_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDiffusion_statement" ):
                listener.exitDiffusion_statement(self)




    def diffusion_statement(self):

        localctx = CNS_MR_Parser.Diffusion_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 80, self.RULE_diffusion_statement)
        self._la = 0 # Token type
        try:
            self.state = 875
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CNS_MR_Parser.Assign, CNS_MR_Parser.R_brace]:
                self.enterOuterAlt(localctx, 1)
                self.state = 850
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==CNS_MR_Parser.Assign:
                    self.state = 847
                    self.dani_assign()
                    self.state = 852
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass
            elif token in [CNS_MR_Parser.Classification]:
                self.enterOuterAlt(localctx, 2)
                self.state = 853
                self.match(CNS_MR_Parser.Classification)
                self.state = 854
                self.match(CNS_MR_Parser.Equ_op)
                self.state = 855
                self.match(CNS_MR_Parser.Class_name)
                pass
            elif token in [CNS_MR_Parser.Coefficients]:
                self.enterOuterAlt(localctx, 3)
                self.state = 856
                self.match(CNS_MR_Parser.Coefficients)
                self.state = 857
                self.match(CNS_MR_Parser.Real)
                self.state = 858
                self.match(CNS_MR_Parser.Real)
                self.state = 859
                self.match(CNS_MR_Parser.Real)
                self.state = 860
                self.match(CNS_MR_Parser.Real)
                self.state = 861
                self.match(CNS_MR_Parser.Real)
                pass
            elif token in [CNS_MR_Parser.ForceConstant]:
                self.enterOuterAlt(localctx, 4)
                self.state = 862
                self.match(CNS_MR_Parser.ForceConstant)
                self.state = 863
                self.match(CNS_MR_Parser.Equ_op)
                self.state = 864
                self.match(CNS_MR_Parser.Real)
                pass
            elif token in [CNS_MR_Parser.Nrestraints]:
                self.enterOuterAlt(localctx, 5)
                self.state = 865
                self.match(CNS_MR_Parser.Nrestraints)
                self.state = 866
                self.match(CNS_MR_Parser.Equ_op)
                self.state = 867
                self.match(CNS_MR_Parser.Integer)
                pass
            elif token in [CNS_MR_Parser.Potential]:
                self.enterOuterAlt(localctx, 6)
                self.state = 868
                self.match(CNS_MR_Parser.Potential)
                self.state = 869
                self.match(CNS_MR_Parser.Equ_op)
                self.state = 870
                self.match(CNS_MR_Parser.Rdc_potential)
                pass
            elif token in [CNS_MR_Parser.Print]:
                self.enterOuterAlt(localctx, 7)
                self.state = 871
                self.match(CNS_MR_Parser.Print)
                self.state = 872
                self.match(CNS_MR_Parser.Threshold)
                self.state = 873
                self.match(CNS_MR_Parser.Real)
                pass
            elif token in [CNS_MR_Parser.Reset]:
                self.enterOuterAlt(localctx, 8)
                self.state = 874
                self.match(CNS_MR_Parser.Reset)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Dani_assignContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Assign(self):
            return self.getToken(CNS_MR_Parser.Assign, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CNS_MR_Parser.SelectionContext)
            else:
                return self.getTypedRuleContext(CNS_MR_Parser.SelectionContext,i)


        def Real(self, i:int=None):
            if i is None:
                return self.getTokens(CNS_MR_Parser.Real)
            else:
                return self.getToken(CNS_MR_Parser.Real, i)

        def getRuleIndex(self):
            return CNS_MR_Parser.RULE_dani_assign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDani_assign" ):
                listener.enterDani_assign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDani_assign" ):
                listener.exitDani_assign(self)




    def dani_assign(self):

        localctx = CNS_MR_Parser.Dani_assignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 82, self.RULE_dani_assign)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 877
            self.match(CNS_MR_Parser.Assign)
            self.state = 878
            self.selection()
            self.state = 879
            self.selection()
            self.state = 880
            self.selection()
            self.state = 881
            self.selection()
            self.state = 882
            self.selection()
            self.state = 883
            self.selection()
            self.state = 884
            self.match(CNS_MR_Parser.Real)
            self.state = 885
            self.match(CNS_MR_Parser.Real)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class One_bond_coupling_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def one_bond_assign(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CNS_MR_Parser.One_bond_assignContext)
            else:
                return self.getTypedRuleContext(CNS_MR_Parser.One_bond_assignContext,i)


        def Classification(self):
            return self.getToken(CNS_MR_Parser.Classification, 0)

        def Equ_op(self):
            return self.getToken(CNS_MR_Parser.Equ_op, 0)

        def Class_name(self):
            return self.getToken(CNS_MR_Parser.Class_name, 0)

        def Coefficients(self):
            return self.getToken(CNS_MR_Parser.Coefficients, 0)

        def Real(self, i:int=None):
            if i is None:
                return self.getTokens(CNS_MR_Parser.Real)
            else:
                return self.getToken(CNS_MR_Parser.Real, i)

        def ForceConstant(self):
            return self.getToken(CNS_MR_Parser.ForceConstant, 0)

        def Nrestraints(self):
            return self.getToken(CNS_MR_Parser.Nrestraints, 0)

        def Integer(self):
            return self.getToken(CNS_MR_Parser.Integer, 0)

        def Potential(self):
            return self.getToken(CNS_MR_Parser.Potential, 0)

        def Rdc_potential(self):
            return self.getToken(CNS_MR_Parser.Rdc_potential, 0)

        def Print(self):
            return self.getToken(CNS_MR_Parser.Print, 0)

        def Threshold(self):
            return self.getToken(CNS_MR_Parser.Threshold, 0)

        def Reset(self):
            return self.getToken(CNS_MR_Parser.Reset, 0)

        def getRuleIndex(self):
            return CNS_MR_Parser.RULE_one_bond_coupling_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOne_bond_coupling_statement" ):
                listener.enterOne_bond_coupling_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOne_bond_coupling_statement" ):
                listener.exitOne_bond_coupling_statement(self)




    def one_bond_coupling_statement(self):

        localctx = CNS_MR_Parser.One_bond_coupling_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 84, self.RULE_one_bond_coupling_statement)
        self._la = 0 # Token type
        try:
            self.state = 917
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CNS_MR_Parser.Assign, CNS_MR_Parser.R_brace]:
                self.enterOuterAlt(localctx, 1)
                self.state = 890
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==CNS_MR_Parser.Assign:
                    self.state = 887
                    self.one_bond_assign()
                    self.state = 892
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass
            elif token in [CNS_MR_Parser.Classification]:
                self.enterOuterAlt(localctx, 2)
                self.state = 893
                self.match(CNS_MR_Parser.Classification)
                self.state = 894
                self.match(CNS_MR_Parser.Equ_op)
                self.state = 895
                self.match(CNS_MR_Parser.Class_name)
                pass
            elif token in [CNS_MR_Parser.Coefficients]:
                self.enterOuterAlt(localctx, 3)
                self.state = 896
                self.match(CNS_MR_Parser.Coefficients)
                self.state = 897
                self.match(CNS_MR_Parser.Real)
                self.state = 898
                self.match(CNS_MR_Parser.Real)
                self.state = 899
                self.match(CNS_MR_Parser.Real)
                self.state = 900
                self.match(CNS_MR_Parser.Real)
                self.state = 901
                self.match(CNS_MR_Parser.Real)
                self.state = 902
                self.match(CNS_MR_Parser.Real)
                self.state = 903
                self.match(CNS_MR_Parser.Real)
                pass
            elif token in [CNS_MR_Parser.ForceConstant]:
                self.enterOuterAlt(localctx, 4)
                self.state = 904
                self.match(CNS_MR_Parser.ForceConstant)
                self.state = 905
                self.match(CNS_MR_Parser.Equ_op)
                self.state = 906
                self.match(CNS_MR_Parser.Real)
                pass
            elif token in [CNS_MR_Parser.Nrestraints]:
                self.enterOuterAlt(localctx, 5)
                self.state = 907
                self.match(CNS_MR_Parser.Nrestraints)
                self.state = 908
                self.match(CNS_MR_Parser.Equ_op)
                self.state = 909
                self.match(CNS_MR_Parser.Integer)
                pass
            elif token in [CNS_MR_Parser.Potential]:
                self.enterOuterAlt(localctx, 6)
                self.state = 910
                self.match(CNS_MR_Parser.Potential)
                self.state = 911
                self.match(CNS_MR_Parser.Equ_op)
                self.state = 912
                self.match(CNS_MR_Parser.Rdc_potential)
                pass
            elif token in [CNS_MR_Parser.Print]:
                self.enterOuterAlt(localctx, 7)
                self.state = 913
                self.match(CNS_MR_Parser.Print)
                self.state = 914
                self.match(CNS_MR_Parser.Threshold)
                self.state = 915
                self.match(CNS_MR_Parser.Real)
                pass
            elif token in [CNS_MR_Parser.Reset]:
                self.enterOuterAlt(localctx, 8)
                self.state = 916
                self.match(CNS_MR_Parser.Reset)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class One_bond_assignContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Assign(self):
            return self.getToken(CNS_MR_Parser.Assign, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CNS_MR_Parser.SelectionContext)
            else:
                return self.getTypedRuleContext(CNS_MR_Parser.SelectionContext,i)


        def Real(self, i:int=None):
            if i is None:
                return self.getTokens(CNS_MR_Parser.Real)
            else:
                return self.getToken(CNS_MR_Parser.Real, i)

        def getRuleIndex(self):
            return CNS_MR_Parser.RULE_one_bond_assign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOne_bond_assign" ):
                listener.enterOne_bond_assign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOne_bond_assign" ):
                listener.exitOne_bond_assign(self)




    def one_bond_assign(self):

        localctx = CNS_MR_Parser.One_bond_assignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 86, self.RULE_one_bond_assign)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 919
            self.match(CNS_MR_Parser.Assign)
            self.state = 920
            self.selection()
            self.state = 921
            self.selection()
            self.state = 922
            self.selection()
            self.state = 923
            self.selection()
            self.state = 924
            self.selection()
            self.state = 925
            self.selection()
            self.state = 926
            self.selection()
            self.state = 927
            self.selection()
            self.state = 928
            self.match(CNS_MR_Parser.Real)
            self.state = 929
            self.match(CNS_MR_Parser.Real)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Angle_db_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def angle_db_assign(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CNS_MR_Parser.Angle_db_assignContext)
            else:
                return self.getTypedRuleContext(CNS_MR_Parser.Angle_db_assignContext,i)


        def Classification(self):
            return self.getToken(CNS_MR_Parser.Classification, 0)

        def Equ_op(self):
            return self.getToken(CNS_MR_Parser.Equ_op, 0)

        def Class_name(self):
            return self.getToken(CNS_MR_Parser.Class_name, 0)

        def DerivFlag(self):
            return self.getToken(CNS_MR_Parser.DerivFlag, 0)

        def On_or_Off(self):
            return self.getToken(CNS_MR_Parser.On_or_Off, 0)

        def Expectation(self):
            return self.getToken(CNS_MR_Parser.Expectation, 0)

        def Integer(self, i:int=None):
            if i is None:
                return self.getTokens(CNS_MR_Parser.Integer)
            else:
                return self.getToken(CNS_MR_Parser.Integer, i)

        def Real(self):
            return self.getToken(CNS_MR_Parser.Real, 0)

        def Error(self):
            return self.getToken(CNS_MR_Parser.Error, 0)

        def ForceConstant(self):
            return self.getToken(CNS_MR_Parser.ForceConstant, 0)

        def Nrestraints(self):
            return self.getToken(CNS_MR_Parser.Nrestraints, 0)

        def Potential(self):
            return self.getToken(CNS_MR_Parser.Potential, 0)

        def Rdc_potential(self):
            return self.getToken(CNS_MR_Parser.Rdc_potential, 0)

        def Print(self):
            return self.getToken(CNS_MR_Parser.Print, 0)

        def Threshold(self):
            return self.getToken(CNS_MR_Parser.Threshold, 0)

        def All(self):
            return self.getToken(CNS_MR_Parser.All, 0)

        def Reset(self):
            return self.getToken(CNS_MR_Parser.Reset, 0)

        def Size(self):
            return self.getToken(CNS_MR_Parser.Size, 0)

        def Angle_dihedral(self):
            return self.getToken(CNS_MR_Parser.Angle_dihedral, 0)

        def Zero(self):
            return self.getToken(CNS_MR_Parser.Zero, 0)

        def getRuleIndex(self):
            return CNS_MR_Parser.RULE_angle_db_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAngle_db_statement" ):
                listener.enterAngle_db_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAngle_db_statement" ):
                listener.exitAngle_db_statement(self)




    def angle_db_statement(self):

        localctx = CNS_MR_Parser.Angle_db_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 88, self.RULE_angle_db_statement)
        self._la = 0 # Token type
        try:
            self.state = 974
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CNS_MR_Parser.Assign, CNS_MR_Parser.R_brace]:
                self.enterOuterAlt(localctx, 1)
                self.state = 934
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==CNS_MR_Parser.Assign:
                    self.state = 931
                    self.angle_db_assign()
                    self.state = 936
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass
            elif token in [CNS_MR_Parser.Classification]:
                self.enterOuterAlt(localctx, 2)
                self.state = 937
                self.match(CNS_MR_Parser.Classification)
                self.state = 938
                self.match(CNS_MR_Parser.Equ_op)
                self.state = 939
                self.match(CNS_MR_Parser.Class_name)
                pass
            elif token in [CNS_MR_Parser.DerivFlag]:
                self.enterOuterAlt(localctx, 3)
                self.state = 940
                self.match(CNS_MR_Parser.DerivFlag)
                self.state = 941
                self.match(CNS_MR_Parser.Equ_op)
                self.state = 942
                self.match(CNS_MR_Parser.On_or_Off)
                pass
            elif token in [CNS_MR_Parser.Expectation]:
                self.enterOuterAlt(localctx, 4)
                self.state = 943
                self.match(CNS_MR_Parser.Expectation)
                self.state = 944
                self.match(CNS_MR_Parser.Integer)
                self.state = 945
                self.match(CNS_MR_Parser.Integer)
                self.state = 946
                self.match(CNS_MR_Parser.Real)
                pass
            elif token in [CNS_MR_Parser.Error]:
                self.enterOuterAlt(localctx, 5)
                self.state = 947
                self.match(CNS_MR_Parser.Error)
                self.state = 948
                self.match(CNS_MR_Parser.Equ_op)
                self.state = 949
                self.match(CNS_MR_Parser.Real)
                pass
            elif token in [CNS_MR_Parser.ForceConstant]:
                self.enterOuterAlt(localctx, 6)
                self.state = 950
                self.match(CNS_MR_Parser.ForceConstant)
                self.state = 951
                self.match(CNS_MR_Parser.Equ_op)
                self.state = 952
                self.match(CNS_MR_Parser.Real)
                pass
            elif token in [CNS_MR_Parser.Nrestraints]:
                self.enterOuterAlt(localctx, 7)
                self.state = 953
                self.match(CNS_MR_Parser.Nrestraints)
                self.state = 954
                self.match(CNS_MR_Parser.Equ_op)
                self.state = 955
                self.match(CNS_MR_Parser.Integer)
                pass
            elif token in [CNS_MR_Parser.Potential]:
                self.enterOuterAlt(localctx, 8)
                self.state = 956
                self.match(CNS_MR_Parser.Potential)
                self.state = 957
                self.match(CNS_MR_Parser.Equ_op)
                self.state = 958
                self.match(CNS_MR_Parser.Rdc_potential)
                pass
            elif token in [CNS_MR_Parser.Print]:
                self.enterOuterAlt(localctx, 9)
                self.state = 959
                self.match(CNS_MR_Parser.Print)
                self.state = 960
                self.match(CNS_MR_Parser.Threshold)
                self.state = 961
                self.match(CNS_MR_Parser.Real)
                self.state = 966
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [CNS_MR_Parser.All]:
                    self.state = 962
                    self.match(CNS_MR_Parser.All)
                    pass
                elif token in [CNS_MR_Parser.Classification]:
                    self.state = 963
                    self.match(CNS_MR_Parser.Classification)
                    self.state = 964
                    self.match(CNS_MR_Parser.Equ_op)
                    self.state = 965
                    self.match(CNS_MR_Parser.Class_name)
                    pass
                else:
                    raise NoViableAltException(self)

                pass
            elif token in [CNS_MR_Parser.Reset]:
                self.enterOuterAlt(localctx, 10)
                self.state = 968
                self.match(CNS_MR_Parser.Reset)
                pass
            elif token in [CNS_MR_Parser.Size]:
                self.enterOuterAlt(localctx, 11)
                self.state = 969
                self.match(CNS_MR_Parser.Size)
                self.state = 970
                self.match(CNS_MR_Parser.Angle_dihedral)
                self.state = 971
                self.match(CNS_MR_Parser.Integer)
                self.state = 972
                self.match(CNS_MR_Parser.Integer)
                pass
            elif token in [CNS_MR_Parser.Zero]:
                self.enterOuterAlt(localctx, 12)
                self.state = 973
                self.match(CNS_MR_Parser.Zero)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Angle_db_assignContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Assign(self):
            return self.getToken(CNS_MR_Parser.Assign, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CNS_MR_Parser.SelectionContext)
            else:
                return self.getTypedRuleContext(CNS_MR_Parser.SelectionContext,i)


        def getRuleIndex(self):
            return CNS_MR_Parser.RULE_angle_db_assign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAngle_db_assign" ):
                listener.enterAngle_db_assign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAngle_db_assign" ):
                listener.exitAngle_db_assign(self)




    def angle_db_assign(self):

        localctx = CNS_MR_Parser.Angle_db_assignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 90, self.RULE_angle_db_assign)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 976
            self.match(CNS_MR_Parser.Assign)
            self.state = 977
            self.selection()
            self.state = 978
            self.selection()
            self.state = 979
            self.selection()
            self.state = 980
            self.selection()
            self.state = 981
            self.selection()
            self.state = 982
            self.selection()
            self.state = 983
            self.selection()
            self.state = 984
            self.selection()
            self.state = 985
            self.selection()
            self.state = 986
            self.selection()
            self.state = 987
            self.selection()
            self.state = 989
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CNS_MR_Parser.L_paren:
                self.state = 988
                self.selection()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SelectionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def L_paren(self):
            return self.getToken(CNS_MR_Parser.L_paren, 0)

        def selection_expression(self):
            return self.getTypedRuleContext(CNS_MR_Parser.Selection_expressionContext,0)


        def R_paren(self):
            return self.getToken(CNS_MR_Parser.R_paren, 0)

        def getRuleIndex(self):
            return CNS_MR_Parser.RULE_selection

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSelection" ):
                listener.enterSelection(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSelection" ):
                listener.exitSelection(self)




    def selection(self):

        localctx = CNS_MR_Parser.SelectionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 92, self.RULE_selection)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 991
            self.match(CNS_MR_Parser.L_paren)
            self.state = 992
            self.selection_expression()
            self.state = 993
            self.match(CNS_MR_Parser.R_paren)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Selection_expressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def term(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CNS_MR_Parser.TermContext)
            else:
                return self.getTypedRuleContext(CNS_MR_Parser.TermContext,i)


        def L_brace(self, i:int=None):
            if i is None:
                return self.getTokens(CNS_MR_Parser.L_brace)
            else:
                return self.getToken(CNS_MR_Parser.L_brace, i)

        def Or_op(self, i:int=None):
            if i is None:
                return self.getTokens(CNS_MR_Parser.Or_op)
            else:
                return self.getToken(CNS_MR_Parser.Or_op, i)

        def R_brace(self, i:int=None):
            if i is None:
                return self.getTokens(CNS_MR_Parser.R_brace)
            else:
                return self.getToken(CNS_MR_Parser.R_brace, i)

        def getRuleIndex(self):
            return CNS_MR_Parser.RULE_selection_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSelection_expression" ):
                listener.enterSelection_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSelection_expression" ):
                listener.exitSelection_expression(self)




    def selection_expression(self):

        localctx = CNS_MR_Parser.Selection_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 94, self.RULE_selection_expression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 995
            self.term()
            self.state = 1003
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==CNS_MR_Parser.L_brace:
                self.state = 996
                self.match(CNS_MR_Parser.L_brace)
                self.state = 997
                self.match(CNS_MR_Parser.Or_op)
                self.state = 998
                self.term()
                self.state = 999
                self.match(CNS_MR_Parser.R_brace)
                self.state = 1005
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TermContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def factor(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CNS_MR_Parser.FactorContext)
            else:
                return self.getTypedRuleContext(CNS_MR_Parser.FactorContext,i)


        def L_brace(self, i:int=None):
            if i is None:
                return self.getTokens(CNS_MR_Parser.L_brace)
            else:
                return self.getToken(CNS_MR_Parser.L_brace, i)

        def And_op(self, i:int=None):
            if i is None:
                return self.getTokens(CNS_MR_Parser.And_op)
            else:
                return self.getToken(CNS_MR_Parser.And_op, i)

        def R_brace(self, i:int=None):
            if i is None:
                return self.getTokens(CNS_MR_Parser.R_brace)
            else:
                return self.getToken(CNS_MR_Parser.R_brace, i)

        def getRuleIndex(self):
            return CNS_MR_Parser.RULE_term

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTerm" ):
                listener.enterTerm(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTerm" ):
                listener.exitTerm(self)




    def term(self):

        localctx = CNS_MR_Parser.TermContext(self, self._ctx, self.state)
        self.enterRule(localctx, 96, self.RULE_term)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1006
            self.factor(0)
            self.state = 1014
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,76,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1007
                    self.match(CNS_MR_Parser.L_brace)
                    self.state = 1008
                    self.match(CNS_MR_Parser.And_op)
                    self.state = 1009
                    self.factor(0)
                    self.state = 1010
                    self.match(CNS_MR_Parser.R_brace) 
                self.state = 1016
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,76,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FactorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def L_paren(self):
            return self.getToken(CNS_MR_Parser.L_paren, 0)

        def selection_expression(self):
            return self.getTypedRuleContext(CNS_MR_Parser.Selection_expressionContext,0)


        def R_paren(self):
            return self.getToken(CNS_MR_Parser.R_paren, 0)

        def All(self):
            return self.getToken(CNS_MR_Parser.All, 0)

        def Atom(self):
            return self.getToken(CNS_MR_Parser.Atom, 0)

        def Segment_names(self):
            return self.getToken(CNS_MR_Parser.Segment_names, 0)

        def Residue_numbers(self):
            return self.getToken(CNS_MR_Parser.Residue_numbers, 0)

        def Atom_names(self):
            return self.getToken(CNS_MR_Parser.Atom_names, 0)

        def Attribute(self):
            return self.getToken(CNS_MR_Parser.Attribute, 0)

        def Attr_properties(self):
            return self.getToken(CNS_MR_Parser.Attr_properties, 0)

        def Comparison_ops(self):
            return self.getToken(CNS_MR_Parser.Comparison_ops, 0)

        def Real(self, i:int=None):
            if i is None:
                return self.getTokens(CNS_MR_Parser.Real)
            else:
                return self.getToken(CNS_MR_Parser.Real, i)

        def Abs(self):
            return self.getToken(CNS_MR_Parser.Abs, 0)

        def Chemical(self):
            return self.getToken(CNS_MR_Parser.Chemical, 0)

        def String_comp_ops(self):
            return self.getToken(CNS_MR_Parser.String_comp_ops, 0)

        def Atom_type(self, i:int=None):
            if i is None:
                return self.getTokens(CNS_MR_Parser.Atom_type)
            else:
                return self.getToken(CNS_MR_Parser.Atom_type, i)

        def Name(self):
            return self.getToken(CNS_MR_Parser.Name, 0)

        def Atom_name(self, i:int=None):
            if i is None:
                return self.getTokens(CNS_MR_Parser.Atom_name)
            else:
                return self.getToken(CNS_MR_Parser.Atom_name, i)

        def Residue(self):
            return self.getToken(CNS_MR_Parser.Residue, 0)

        def Residue_number(self, i:int=None):
            if i is None:
                return self.getTokens(CNS_MR_Parser.Residue_number)
            else:
                return self.getToken(CNS_MR_Parser.Residue_number, i)

        def Resname(self):
            return self.getToken(CNS_MR_Parser.Resname, 0)

        def Residue_name(self, i:int=None):
            if i is None:
                return self.getTokens(CNS_MR_Parser.Residue_name)
            else:
                return self.getToken(CNS_MR_Parser.Residue_name, i)

        def SegIdentifier(self):
            return self.getToken(CNS_MR_Parser.SegIdentifier, 0)

        def Segment_name(self, i:int=None):
            if i is None:
                return self.getTokens(CNS_MR_Parser.Segment_name)
            else:
                return self.getToken(CNS_MR_Parser.Segment_name, i)

        def BondedTo(self):
            return self.getToken(CNS_MR_Parser.BondedTo, 0)

        def factor(self):
            return self.getTypedRuleContext(CNS_MR_Parser.FactorContext,0)


        def ByGroup(self):
            return self.getToken(CNS_MR_Parser.ByGroup, 0)

        def ByRes(self):
            return self.getToken(CNS_MR_Parser.ByRes, 0)

        def Atom_types(self):
            return self.getToken(CNS_MR_Parser.Atom_types, 0)

        def Colon(self, i:int=None):
            if i is None:
                return self.getTokens(CNS_MR_Parser.Colon)
            else:
                return self.getToken(CNS_MR_Parser.Colon, i)

        def Fbox(self):
            return self.getToken(CNS_MR_Parser.Fbox, 0)

        def Hydrogen(self):
            return self.getToken(CNS_MR_Parser.Hydrogen, 0)

        def Id(self):
            return self.getToken(CNS_MR_Parser.Id, 0)

        def Integer(self):
            return self.getToken(CNS_MR_Parser.Integer, 0)

        def Known(self):
            return self.getToken(CNS_MR_Parser.Known, 0)

        def Not_op(self):
            return self.getToken(CNS_MR_Parser.Not_op, 0)

        def Point(self):
            return self.getToken(CNS_MR_Parser.Point, 0)

        def vector_3d(self):
            return self.getTypedRuleContext(CNS_MR_Parser.Vector_3dContext,0)


        def Cut(self):
            return self.getToken(CNS_MR_Parser.Cut, 0)

        def Previous(self):
            return self.getToken(CNS_MR_Parser.Previous, 0)

        def Pseudo(self):
            return self.getToken(CNS_MR_Parser.Pseudo, 0)

        def Residue_names(self):
            return self.getToken(CNS_MR_Parser.Residue_names, 0)

        def Double_quote_string(self):
            return self.getToken(CNS_MR_Parser.Double_quote_string, 0)

        def Sfbox(self):
            return self.getToken(CNS_MR_Parser.Sfbox, 0)

        def Store_1(self):
            return self.getToken(CNS_MR_Parser.Store_1, 0)

        def Store_2(self):
            return self.getToken(CNS_MR_Parser.Store_2, 0)

        def Store_3(self):
            return self.getToken(CNS_MR_Parser.Store_3, 0)

        def Store_4(self):
            return self.getToken(CNS_MR_Parser.Store_4, 0)

        def Store_5(self):
            return self.getToken(CNS_MR_Parser.Store_5, 0)

        def Store_6(self):
            return self.getToken(CNS_MR_Parser.Store_6, 0)

        def Store_7(self):
            return self.getToken(CNS_MR_Parser.Store_7, 0)

        def Store_8(self):
            return self.getToken(CNS_MR_Parser.Store_8, 0)

        def Store_9(self):
            return self.getToken(CNS_MR_Parser.Store_9, 0)

        def Tag(self):
            return self.getToken(CNS_MR_Parser.Tag, 0)

        def Around(self):
            return self.getToken(CNS_MR_Parser.Around, 0)

        def Saround(self):
            return self.getToken(CNS_MR_Parser.Saround, 0)

        def getRuleIndex(self):
            return CNS_MR_Parser.RULE_factor

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFactor" ):
                listener.enterFactor(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFactor" ):
                listener.exitFactor(self)



    def factor(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = CNS_MR_Parser.FactorContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 98
        self.enterRecursionRule(localctx, 98, self.RULE_factor, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1161
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,89,self._ctx)
            if la_ == 1:
                self.state = 1018
                self.match(CNS_MR_Parser.L_paren)
                self.state = 1019
                self.selection_expression()
                self.state = 1020
                self.match(CNS_MR_Parser.R_paren)
                pass

            elif la_ == 2:
                self.state = 1022
                self.match(CNS_MR_Parser.All)
                pass

            elif la_ == 3:
                self.state = 1023
                self.match(CNS_MR_Parser.Atom)
                self.state = 1024
                self.match(CNS_MR_Parser.Segment_names)
                self.state = 1025
                self.match(CNS_MR_Parser.Residue_numbers)
                self.state = 1026
                self.match(CNS_MR_Parser.Atom_names)
                pass

            elif la_ == 4:
                self.state = 1027
                self.match(CNS_MR_Parser.Attribute)
                self.state = 1029
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CNS_MR_Parser.Abs:
                    self.state = 1028
                    self.match(CNS_MR_Parser.Abs)


                self.state = 1031
                self.match(CNS_MR_Parser.Attr_properties)
                self.state = 1032
                self.match(CNS_MR_Parser.Comparison_ops)
                self.state = 1033
                self.match(CNS_MR_Parser.Real)
                pass

            elif la_ == 5:
                self.state = 1034
                self.match(CNS_MR_Parser.Attribute)
                self.state = 1035
                self.match(CNS_MR_Parser.Chemical)
                self.state = 1036
                self.match(CNS_MR_Parser.String_comp_ops)
                self.state = 1037
                self.match(CNS_MR_Parser.Atom_type)
                pass

            elif la_ == 6:
                self.state = 1038
                self.match(CNS_MR_Parser.Attribute)
                self.state = 1039
                self.match(CNS_MR_Parser.Name)
                self.state = 1040
                self.match(CNS_MR_Parser.String_comp_ops)
                self.state = 1041
                self.match(CNS_MR_Parser.Atom_name)
                pass

            elif la_ == 7:
                self.state = 1042
                self.match(CNS_MR_Parser.Attribute)
                self.state = 1044
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CNS_MR_Parser.Abs:
                    self.state = 1043
                    self.match(CNS_MR_Parser.Abs)


                self.state = 1046
                self.match(CNS_MR_Parser.Residue)
                self.state = 1047
                self.match(CNS_MR_Parser.Comparison_ops)
                self.state = 1048
                self.match(CNS_MR_Parser.Residue_number)
                pass

            elif la_ == 8:
                self.state = 1049
                self.match(CNS_MR_Parser.Attribute)
                self.state = 1050
                self.match(CNS_MR_Parser.Resname)
                self.state = 1051
                self.match(CNS_MR_Parser.String_comp_ops)
                self.state = 1052
                self.match(CNS_MR_Parser.Residue_name)
                pass

            elif la_ == 9:
                self.state = 1053
                self.match(CNS_MR_Parser.Attribute)
                self.state = 1054
                self.match(CNS_MR_Parser.SegIdentifier)
                self.state = 1055
                self.match(CNS_MR_Parser.String_comp_ops)
                self.state = 1056
                self.match(CNS_MR_Parser.Segment_name)
                pass

            elif la_ == 10:
                self.state = 1057
                self.match(CNS_MR_Parser.BondedTo)
                self.state = 1058
                self.factor(28)
                pass

            elif la_ == 11:
                self.state = 1059
                self.match(CNS_MR_Parser.ByGroup)
                self.state = 1060
                self.factor(27)
                pass

            elif la_ == 12:
                self.state = 1061
                self.match(CNS_MR_Parser.ByRes)
                self.state = 1062
                self.factor(26)
                pass

            elif la_ == 13:
                self.state = 1063
                self.match(CNS_MR_Parser.Chemical)
                self.state = 1073
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [CNS_MR_Parser.Atom_types]:
                    self.state = 1064
                    self.match(CNS_MR_Parser.Atom_types)
                    pass
                elif token in [CNS_MR_Parser.Atom_type]:
                    self.state = 1065
                    self.match(CNS_MR_Parser.Atom_type)
                    self.state = 1070
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,79,self._ctx)
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt==1:
                            self.state = 1066
                            self.match(CNS_MR_Parser.Colon)
                            self.state = 1067
                            self.match(CNS_MR_Parser.Atom_type) 
                        self.state = 1072
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,79,self._ctx)

                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 14:
                self.state = 1075
                self.match(CNS_MR_Parser.Fbox)
                self.state = 1076
                self.match(CNS_MR_Parser.Real)
                self.state = 1077
                self.match(CNS_MR_Parser.Real)
                self.state = 1078
                self.match(CNS_MR_Parser.Real)
                self.state = 1079
                self.match(CNS_MR_Parser.Real)
                self.state = 1080
                self.match(CNS_MR_Parser.Real)
                self.state = 1081
                self.match(CNS_MR_Parser.Real)
                pass

            elif la_ == 15:
                self.state = 1082
                self.match(CNS_MR_Parser.Hydrogen)
                pass

            elif la_ == 16:
                self.state = 1083
                self.match(CNS_MR_Parser.Id)
                self.state = 1084
                self.match(CNS_MR_Parser.Integer)
                pass

            elif la_ == 17:
                self.state = 1085
                self.match(CNS_MR_Parser.Known)
                pass

            elif la_ == 18:
                self.state = 1086
                self.match(CNS_MR_Parser.Name)
                self.state = 1096
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [CNS_MR_Parser.Atom_names]:
                    self.state = 1087
                    self.match(CNS_MR_Parser.Atom_names)
                    pass
                elif token in [CNS_MR_Parser.Atom_name]:
                    self.state = 1088
                    self.match(CNS_MR_Parser.Atom_name)
                    self.state = 1093
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,81,self._ctx)
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt==1:
                            self.state = 1089
                            self.match(CNS_MR_Parser.Colon)
                            self.state = 1090
                            self.match(CNS_MR_Parser.Atom_name) 
                        self.state = 1095
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,81,self._ctx)

                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 19:
                self.state = 1098
                self.match(CNS_MR_Parser.Not_op)
                self.state = 1099
                self.factor(19)
                pass

            elif la_ == 20:
                self.state = 1100
                self.match(CNS_MR_Parser.Point)
                self.state = 1101
                self.vector_3d()
                self.state = 1102
                self.match(CNS_MR_Parser.Cut)
                self.state = 1103
                self.match(CNS_MR_Parser.Real)
                pass

            elif la_ == 21:
                self.state = 1105
                self.match(CNS_MR_Parser.Previous)
                pass

            elif la_ == 22:
                self.state = 1106
                self.match(CNS_MR_Parser.Pseudo)
                pass

            elif la_ == 23:
                self.state = 1107
                self.match(CNS_MR_Parser.Residue)
                self.state = 1117
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [CNS_MR_Parser.Residue_numbers]:
                    self.state = 1108
                    self.match(CNS_MR_Parser.Residue_numbers)
                    pass
                elif token in [CNS_MR_Parser.Residue_number]:
                    self.state = 1109
                    self.match(CNS_MR_Parser.Residue_number)
                    self.state = 1114
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,83,self._ctx)
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt==1:
                            self.state = 1110
                            self.match(CNS_MR_Parser.Colon)
                            self.state = 1111
                            self.match(CNS_MR_Parser.Residue_number) 
                        self.state = 1116
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,83,self._ctx)

                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 24:
                self.state = 1119
                self.match(CNS_MR_Parser.Resname)
                self.state = 1129
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [CNS_MR_Parser.Residue_names]:
                    self.state = 1120
                    self.match(CNS_MR_Parser.Residue_names)
                    pass
                elif token in [CNS_MR_Parser.Residue_name]:
                    self.state = 1121
                    self.match(CNS_MR_Parser.Residue_name)
                    self.state = 1126
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,85,self._ctx)
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt==1:
                            self.state = 1122
                            self.match(CNS_MR_Parser.Colon)
                            self.state = 1123
                            self.match(CNS_MR_Parser.Residue_name) 
                        self.state = 1128
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,85,self._ctx)

                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 25:
                self.state = 1131
                self.match(CNS_MR_Parser.SegIdentifier)
                self.state = 1142
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [CNS_MR_Parser.Segment_names]:
                    self.state = 1132
                    self.match(CNS_MR_Parser.Segment_names)
                    pass
                elif token in [CNS_MR_Parser.Segment_name]:
                    self.state = 1133
                    self.match(CNS_MR_Parser.Segment_name)
                    self.state = 1138
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,87,self._ctx)
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt==1:
                            self.state = 1134
                            self.match(CNS_MR_Parser.Colon)
                            self.state = 1135
                            self.match(CNS_MR_Parser.Segment_name) 
                        self.state = 1140
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,87,self._ctx)

                    pass
                elif token in [CNS_MR_Parser.Double_quote_string]:
                    self.state = 1141
                    self.match(CNS_MR_Parser.Double_quote_string)
                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 26:
                self.state = 1144
                self.match(CNS_MR_Parser.Sfbox)
                self.state = 1145
                self.match(CNS_MR_Parser.Real)
                self.state = 1146
                self.match(CNS_MR_Parser.Real)
                self.state = 1147
                self.match(CNS_MR_Parser.Real)
                self.state = 1148
                self.match(CNS_MR_Parser.Real)
                self.state = 1149
                self.match(CNS_MR_Parser.Real)
                self.state = 1150
                self.match(CNS_MR_Parser.Real)
                pass

            elif la_ == 27:
                self.state = 1151
                self.match(CNS_MR_Parser.Store_1)
                pass

            elif la_ == 28:
                self.state = 1152
                self.match(CNS_MR_Parser.Store_2)
                pass

            elif la_ == 29:
                self.state = 1153
                self.match(CNS_MR_Parser.Store_3)
                pass

            elif la_ == 30:
                self.state = 1154
                self.match(CNS_MR_Parser.Store_4)
                pass

            elif la_ == 31:
                self.state = 1155
                self.match(CNS_MR_Parser.Store_5)
                pass

            elif la_ == 32:
                self.state = 1156
                self.match(CNS_MR_Parser.Store_6)
                pass

            elif la_ == 33:
                self.state = 1157
                self.match(CNS_MR_Parser.Store_7)
                pass

            elif la_ == 34:
                self.state = 1158
                self.match(CNS_MR_Parser.Store_8)
                pass

            elif la_ == 35:
                self.state = 1159
                self.match(CNS_MR_Parser.Store_9)
                pass

            elif la_ == 36:
                self.state = 1160
                self.match(CNS_MR_Parser.Tag)
                pass


            self._ctx.stop = self._input.LT(-1)
            self.state = 1171
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,91,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 1169
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,90,self._ctx)
                    if la_ == 1:
                        localctx = CNS_MR_Parser.FactorContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_factor)
                        self.state = 1163
                        if not self.precpred(self._ctx, 36):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 36)")
                        self.state = 1164
                        self.match(CNS_MR_Parser.Around)
                        self.state = 1165
                        self.match(CNS_MR_Parser.Real)
                        pass

                    elif la_ == 2:
                        localctx = CNS_MR_Parser.FactorContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_factor)
                        self.state = 1166
                        if not self.precpred(self._ctx, 13):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 13)")
                        self.state = 1167
                        self.match(CNS_MR_Parser.Saround)
                        self.state = 1168
                        self.match(CNS_MR_Parser.Real)
                        pass

             
                self.state = 1173
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,91,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class Vector_3dContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def L_paren(self):
            return self.getToken(CNS_MR_Parser.L_paren, 0)

        def Real(self, i:int=None):
            if i is None:
                return self.getTokens(CNS_MR_Parser.Real)
            else:
                return self.getToken(CNS_MR_Parser.Real, i)

        def R_paren(self):
            return self.getToken(CNS_MR_Parser.R_paren, 0)

        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(CNS_MR_Parser.Comma)
            else:
                return self.getToken(CNS_MR_Parser.Comma, i)

        def Tail(self):
            return self.getToken(CNS_MR_Parser.Tail, 0)

        def Equ_op(self, i:int=None):
            if i is None:
                return self.getTokens(CNS_MR_Parser.Equ_op)
            else:
                return self.getToken(CNS_MR_Parser.Equ_op, i)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CNS_MR_Parser.SelectionContext)
            else:
                return self.getTypedRuleContext(CNS_MR_Parser.SelectionContext,i)


        def Head(self):
            return self.getToken(CNS_MR_Parser.Head, 0)

        def getRuleIndex(self):
            return CNS_MR_Parser.RULE_vector_3d

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVector_3d" ):
                listener.enterVector_3d(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVector_3d" ):
                listener.exitVector_3d(self)




    def vector_3d(self):

        localctx = CNS_MR_Parser.Vector_3dContext(self, self._ctx, self.state)
        self.enterRule(localctx, 100, self.RULE_vector_3d)
        self._la = 0 # Token type
        try:
            self.state = 1199
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,96,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1174
                self.match(CNS_MR_Parser.L_paren)
                self.state = 1175
                self.match(CNS_MR_Parser.Real)
                self.state = 1177
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CNS_MR_Parser.Comma:
                    self.state = 1176
                    self.match(CNS_MR_Parser.Comma)


                self.state = 1179
                self.match(CNS_MR_Parser.Real)
                self.state = 1181
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CNS_MR_Parser.Comma:
                    self.state = 1180
                    self.match(CNS_MR_Parser.Comma)


                self.state = 1183
                self.match(CNS_MR_Parser.Real)
                self.state = 1184
                self.match(CNS_MR_Parser.R_paren)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1185
                self.match(CNS_MR_Parser.L_paren)
                self.state = 1186
                self.match(CNS_MR_Parser.Tail)
                self.state = 1187
                self.match(CNS_MR_Parser.Equ_op)
                self.state = 1188
                self.selection()
                self.state = 1190
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CNS_MR_Parser.Comma:
                    self.state = 1189
                    self.match(CNS_MR_Parser.Comma)


                self.state = 1195
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CNS_MR_Parser.Head:
                    self.state = 1192
                    self.match(CNS_MR_Parser.Head)
                    self.state = 1193
                    self.match(CNS_MR_Parser.Equ_op)
                    self.state = 1194
                    self.selection()


                self.state = 1197
                self.match(CNS_MR_Parser.R_paren)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx



    def sempred(self, localctx:RuleContext, ruleIndex:int, predIndex:int):
        if self._predicates == None:
            self._predicates = dict()
        self._predicates[49] = self.factor_sempred
        pred = self._predicates.get(ruleIndex, None)
        if pred is None:
            raise Exception("No predicate with index:" + str(ruleIndex))
        else:
            return pred(localctx, predIndex)

    def factor_sempred(self, localctx:FactorContext, predIndex:int):
            if predIndex == 0:
                return self.precpred(self._ctx, 36)
         

            if predIndex == 1:
                return self.precpred(self._ctx, 13)
         




