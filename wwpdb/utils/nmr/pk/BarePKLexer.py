# Generated from BarePKLexer.g4 by ANTLR 4.13.0
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,11,268,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,1,0,3,0,43,8,0,1,0,1,0,1,1,3,1,48,8,1,1,1,1,1,3,1,52,8,1,1,2,
        3,2,55,8,2,1,2,1,2,3,2,59,8,2,1,2,1,2,3,2,63,8,2,1,2,3,2,66,8,2,
        1,3,1,3,1,3,1,3,1,3,1,3,3,3,74,8,3,1,4,1,4,1,5,4,5,79,8,5,11,5,12,
        5,80,1,6,4,6,84,8,6,11,6,12,6,85,1,6,5,6,89,8,6,10,6,12,6,92,9,6,
        1,6,5,6,95,8,6,10,6,12,6,98,9,6,1,6,5,6,101,8,6,10,6,12,6,104,9,
        6,1,6,1,6,1,7,4,7,109,8,7,11,7,12,7,110,1,7,5,7,114,8,7,10,7,12,
        7,117,9,7,1,7,5,7,120,8,7,10,7,12,7,123,9,7,1,7,5,7,126,8,7,10,7,
        12,7,129,9,7,1,7,1,7,1,8,4,8,134,8,8,11,8,12,8,135,1,8,5,8,139,8,
        8,10,8,12,8,142,9,8,1,8,5,8,145,8,8,10,8,12,8,148,9,8,1,8,5,8,151,
        8,8,10,8,12,8,154,9,8,1,8,1,8,1,9,1,9,1,10,1,10,1,11,1,11,3,11,164,
        8,11,1,12,1,12,3,12,168,8,12,1,13,1,13,3,13,172,8,13,1,14,1,14,5,
        14,176,8,14,10,14,12,14,179,9,14,1,15,4,15,182,8,15,11,15,12,15,
        183,1,15,1,15,1,16,4,16,189,8,16,11,16,12,16,190,1,17,1,17,1,18,
        1,18,1,18,4,18,198,8,18,11,18,12,18,199,1,18,1,18,4,18,204,8,18,
        11,18,12,18,205,1,18,1,18,4,18,210,8,18,11,18,12,18,211,1,18,1,18,
        1,18,1,18,1,18,1,18,3,18,220,8,18,1,18,5,18,223,8,18,10,18,12,18,
        226,9,18,1,18,1,18,1,18,1,18,1,19,1,19,1,19,4,19,235,8,19,11,19,
        12,19,236,1,19,1,19,4,19,241,8,19,11,19,12,19,242,1,19,1,19,4,19,
        247,8,19,11,19,12,19,248,1,19,1,19,1,19,1,19,1,19,1,19,3,19,257,
        8,19,1,19,5,19,260,8,19,10,19,12,19,263,9,19,1,19,1,19,1,19,1,19,
        0,0,20,1,1,3,2,5,3,7,0,9,0,11,0,13,4,15,5,17,6,19,7,21,0,23,0,25,
        0,27,0,29,0,31,8,33,9,35,0,37,10,39,11,1,0,9,2,0,43,43,45,45,2,0,
        69,69,101,101,1,0,48,57,2,0,10,10,13,13,2,0,65,90,97,122,6,0,40,
        40,42,43,45,46,63,63,95,95,123,123,8,0,34,35,37,37,39,39,41,41,44,
        44,47,47,59,59,124,125,2,0,9,9,32,32,7,0,33,33,35,35,38,38,42,42,
        47,47,61,61,92,92,301,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,13,1,
        0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,31,1,0,0,0,0,33,1,
        0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,1,42,1,0,0,0,3,47,1,0,0,0,5,54,1,
        0,0,0,7,73,1,0,0,0,9,75,1,0,0,0,11,78,1,0,0,0,13,83,1,0,0,0,15,108,
        1,0,0,0,17,133,1,0,0,0,19,157,1,0,0,0,21,159,1,0,0,0,23,163,1,0,
        0,0,25,167,1,0,0,0,27,171,1,0,0,0,29,173,1,0,0,0,31,181,1,0,0,0,
        33,188,1,0,0,0,35,192,1,0,0,0,37,219,1,0,0,0,39,256,1,0,0,0,41,43,
        7,0,0,0,42,41,1,0,0,0,42,43,1,0,0,0,43,44,1,0,0,0,44,45,3,11,5,0,
        45,2,1,0,0,0,46,48,7,0,0,0,47,46,1,0,0,0,47,48,1,0,0,0,48,51,1,0,
        0,0,49,52,3,11,5,0,50,52,3,7,3,0,51,49,1,0,0,0,51,50,1,0,0,0,52,
        4,1,0,0,0,53,55,7,0,0,0,54,53,1,0,0,0,54,55,1,0,0,0,55,58,1,0,0,
        0,56,59,3,11,5,0,57,59,3,7,3,0,58,56,1,0,0,0,58,57,1,0,0,0,59,65,
        1,0,0,0,60,62,7,1,0,0,61,63,7,0,0,0,62,61,1,0,0,0,62,63,1,0,0,0,
        63,64,1,0,0,0,64,66,3,11,5,0,65,60,1,0,0,0,65,66,1,0,0,0,66,6,1,
        0,0,0,67,68,3,11,5,0,68,69,5,46,0,0,69,70,3,11,5,0,70,74,1,0,0,0,
        71,72,5,46,0,0,72,74,3,11,5,0,73,67,1,0,0,0,73,71,1,0,0,0,74,8,1,
        0,0,0,75,76,7,2,0,0,76,10,1,0,0,0,77,79,3,9,4,0,78,77,1,0,0,0,79,
        80,1,0,0,0,80,78,1,0,0,0,80,81,1,0,0,0,81,12,1,0,0,0,82,84,5,35,
        0,0,83,82,1,0,0,0,84,85,1,0,0,0,85,83,1,0,0,0,85,86,1,0,0,0,86,90,
        1,0,0,0,87,89,8,3,0,0,88,87,1,0,0,0,89,92,1,0,0,0,90,88,1,0,0,0,
        90,91,1,0,0,0,91,96,1,0,0,0,92,90,1,0,0,0,93,95,5,35,0,0,94,93,1,
        0,0,0,95,98,1,0,0,0,96,94,1,0,0,0,96,97,1,0,0,0,97,102,1,0,0,0,98,
        96,1,0,0,0,99,101,8,3,0,0,100,99,1,0,0,0,101,104,1,0,0,0,102,100,
        1,0,0,0,102,103,1,0,0,0,103,105,1,0,0,0,104,102,1,0,0,0,105,106,
        6,6,0,0,106,14,1,0,0,0,107,109,5,33,0,0,108,107,1,0,0,0,109,110,
        1,0,0,0,110,108,1,0,0,0,110,111,1,0,0,0,111,115,1,0,0,0,112,114,
        8,3,0,0,113,112,1,0,0,0,114,117,1,0,0,0,115,113,1,0,0,0,115,116,
        1,0,0,0,116,121,1,0,0,0,117,115,1,0,0,0,118,120,5,33,0,0,119,118,
        1,0,0,0,120,123,1,0,0,0,121,119,1,0,0,0,121,122,1,0,0,0,122,127,
        1,0,0,0,123,121,1,0,0,0,124,126,8,3,0,0,125,124,1,0,0,0,126,129,
        1,0,0,0,127,125,1,0,0,0,127,128,1,0,0,0,128,130,1,0,0,0,129,127,
        1,0,0,0,130,131,6,7,0,0,131,16,1,0,0,0,132,134,5,59,0,0,133,132,
        1,0,0,0,134,135,1,0,0,0,135,133,1,0,0,0,135,136,1,0,0,0,136,140,
        1,0,0,0,137,139,8,3,0,0,138,137,1,0,0,0,139,142,1,0,0,0,140,138,
        1,0,0,0,140,141,1,0,0,0,141,146,1,0,0,0,142,140,1,0,0,0,143,145,
        5,59,0,0,144,143,1,0,0,0,145,148,1,0,0,0,146,144,1,0,0,0,146,147,
        1,0,0,0,147,152,1,0,0,0,148,146,1,0,0,0,149,151,8,3,0,0,150,149,
        1,0,0,0,151,154,1,0,0,0,152,150,1,0,0,0,152,153,1,0,0,0,153,155,
        1,0,0,0,154,152,1,0,0,0,155,156,6,8,0,0,156,18,1,0,0,0,157,158,3,
        29,14,0,158,20,1,0,0,0,159,160,7,4,0,0,160,22,1,0,0,0,161,164,3,
        21,10,0,162,164,3,9,4,0,163,161,1,0,0,0,163,162,1,0,0,0,164,24,1,
        0,0,0,165,168,3,23,11,0,166,168,7,5,0,0,167,165,1,0,0,0,167,166,
        1,0,0,0,168,26,1,0,0,0,169,172,3,25,12,0,170,172,7,6,0,0,171,169,
        1,0,0,0,171,170,1,0,0,0,172,28,1,0,0,0,173,177,3,25,12,0,174,176,
        3,27,13,0,175,174,1,0,0,0,176,179,1,0,0,0,177,175,1,0,0,0,177,178,
        1,0,0,0,178,30,1,0,0,0,179,177,1,0,0,0,180,182,7,7,0,0,181,180,1,
        0,0,0,182,183,1,0,0,0,183,181,1,0,0,0,183,184,1,0,0,0,184,185,1,
        0,0,0,185,186,6,15,1,0,186,32,1,0,0,0,187,189,7,3,0,0,188,187,1,
        0,0,0,189,190,1,0,0,0,190,188,1,0,0,0,190,191,1,0,0,0,191,34,1,0,
        0,0,192,193,7,8,0,0,193,36,1,0,0,0,194,220,3,35,17,0,195,197,3,35,
        17,0,196,198,5,47,0,0,197,196,1,0,0,0,198,199,1,0,0,0,199,197,1,
        0,0,0,199,200,1,0,0,0,200,220,1,0,0,0,201,203,3,35,17,0,202,204,
        5,42,0,0,203,202,1,0,0,0,204,205,1,0,0,0,205,203,1,0,0,0,205,206,
        1,0,0,0,206,220,1,0,0,0,207,209,3,35,17,0,208,210,5,61,0,0,209,208,
        1,0,0,0,210,211,1,0,0,0,211,209,1,0,0,0,211,212,1,0,0,0,212,220,
        1,0,0,0,213,214,5,82,0,0,214,215,5,69,0,0,215,216,5,77,0,0,216,217,
        5,65,0,0,217,218,5,82,0,0,218,220,5,75,0,0,219,194,1,0,0,0,219,195,
        1,0,0,0,219,201,1,0,0,0,219,207,1,0,0,0,219,213,1,0,0,0,220,224,
        1,0,0,0,221,223,5,32,0,0,222,221,1,0,0,0,223,226,1,0,0,0,224,222,
        1,0,0,0,224,225,1,0,0,0,225,227,1,0,0,0,226,224,1,0,0,0,227,228,
        3,33,16,0,228,229,1,0,0,0,229,230,6,18,0,0,230,38,1,0,0,0,231,257,
        3,35,17,0,232,234,3,35,17,0,233,235,5,47,0,0,234,233,1,0,0,0,235,
        236,1,0,0,0,236,234,1,0,0,0,236,237,1,0,0,0,237,257,1,0,0,0,238,
        240,3,35,17,0,239,241,5,42,0,0,240,239,1,0,0,0,241,242,1,0,0,0,242,
        240,1,0,0,0,242,243,1,0,0,0,243,257,1,0,0,0,244,246,3,35,17,0,245,
        247,5,61,0,0,246,245,1,0,0,0,247,248,1,0,0,0,248,246,1,0,0,0,248,
        249,1,0,0,0,249,257,1,0,0,0,250,251,5,82,0,0,251,252,5,69,0,0,252,
        253,5,77,0,0,253,254,5,65,0,0,254,255,5,82,0,0,255,257,5,75,0,0,
        256,231,1,0,0,0,256,232,1,0,0,0,256,238,1,0,0,0,256,244,1,0,0,0,
        256,250,1,0,0,0,257,261,1,0,0,0,258,260,8,3,0,0,259,258,1,0,0,0,
        260,263,1,0,0,0,261,259,1,0,0,0,261,262,1,0,0,0,262,264,1,0,0,0,
        263,261,1,0,0,0,264,265,3,33,16,0,265,266,1,0,0,0,266,267,6,19,0,
        0,267,40,1,0,0,0,38,0,42,47,51,54,58,62,65,73,80,85,90,96,102,110,
        115,121,127,135,140,146,152,163,167,171,177,183,190,199,205,211,
        219,224,236,242,248,256,261,2,0,1,0,6,0,0
    ]

class BarePKLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    Integer = 1
    Float = 2
    Real = 3
    SHARP_COMMENT = 4
    EXCLM_COMMENT = 5
    SMCLN_COMMENT = 6
    Simple_name = 7
    SPACE = 8
    RETURN = 9
    SECTION_COMMENT = 10
    LINE_COMMENT = 11

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
 ]

    symbolicNames = [ "<INVALID>",
            "Integer", "Float", "Real", "SHARP_COMMENT", "EXCLM_COMMENT", 
            "SMCLN_COMMENT", "Simple_name", "SPACE", "RETURN", "SECTION_COMMENT", 
            "LINE_COMMENT" ]

    ruleNames = [ "Integer", "Float", "Real", "DEC_DOT_DEC", "DEC_DIGIT", 
                  "DECIMAL", "SHARP_COMMENT", "EXCLM_COMMENT", "SMCLN_COMMENT", 
                  "Simple_name", "ALPHA", "ALPHA_NUM", "START_CHAR", "NAME_CHAR", 
                  "SIMPLE_NAME", "SPACE", "RETURN", "COMMENT_START_CHAR", 
                  "SECTION_COMMENT", "LINE_COMMENT" ]

    grammarFileName = "BarePKLexer.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.0")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


