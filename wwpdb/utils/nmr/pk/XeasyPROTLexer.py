# Generated from XeasyPROTLexer.g4 by ANTLR 4.13.0
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,11,266,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,1,0,3,0,43,8,0,1,0,1,0,1,1,3,1,48,8,1,1,1,1,1,3,1,52,8,1,1,2,
        1,2,1,2,1,2,1,2,1,2,3,2,60,8,2,1,3,1,3,1,4,4,4,65,8,4,11,4,12,4,
        66,1,5,4,5,70,8,5,11,5,12,5,71,1,5,5,5,75,8,5,10,5,12,5,78,9,5,1,
        5,5,5,81,8,5,10,5,12,5,84,9,5,1,5,5,5,87,8,5,10,5,12,5,90,9,5,1,
        5,1,5,1,6,4,6,95,8,6,11,6,12,6,96,1,6,5,6,100,8,6,10,6,12,6,103,
        9,6,1,6,5,6,106,8,6,10,6,12,6,109,9,6,1,6,5,6,112,8,6,10,6,12,6,
        115,9,6,1,6,1,6,1,7,4,7,120,8,7,11,7,12,7,121,1,7,5,7,125,8,7,10,
        7,12,7,128,9,7,1,7,5,7,131,8,7,10,7,12,7,134,9,7,1,7,5,7,137,8,7,
        10,7,12,7,140,9,7,1,7,1,7,1,8,1,8,1,9,1,9,1,10,1,10,3,10,150,8,10,
        1,11,1,11,3,11,154,8,11,1,12,1,12,3,12,158,8,12,1,13,1,13,5,13,162,
        8,13,10,13,12,13,165,9,13,1,14,4,14,168,8,14,11,14,12,14,169,1,14,
        1,14,1,15,4,15,175,8,15,11,15,12,15,176,1,16,1,16,1,17,1,17,1,17,
        5,17,184,8,17,10,17,12,17,187,9,17,1,17,1,17,1,17,1,17,1,18,1,18,
        1,18,4,18,196,8,18,11,18,12,18,197,1,18,1,18,4,18,202,8,18,11,18,
        12,18,203,1,18,1,18,4,18,208,8,18,11,18,12,18,209,1,18,1,18,1,18,
        1,18,1,18,1,18,3,18,218,8,18,1,18,5,18,221,8,18,10,18,12,18,224,
        9,18,1,18,1,18,1,18,1,18,1,19,1,19,1,19,4,19,233,8,19,11,19,12,19,
        234,1,19,1,19,4,19,239,8,19,11,19,12,19,240,1,19,1,19,4,19,245,8,
        19,11,19,12,19,246,1,19,1,19,1,19,1,19,1,19,1,19,3,19,255,8,19,1,
        19,5,19,258,8,19,10,19,12,19,261,9,19,1,19,1,19,1,19,1,19,1,185,
        0,20,1,1,3,2,5,0,7,0,9,0,11,3,13,4,15,5,17,6,19,0,21,0,23,0,25,0,
        27,0,29,7,31,8,33,0,35,9,37,10,39,11,1,0,8,2,0,43,43,45,45,1,0,48,
        57,2,0,10,10,13,13,2,0,65,90,97,122,5,0,35,35,42,43,45,46,63,63,
        95,95,2,0,34,34,39,39,2,0,9,9,32,32,8,0,33,33,35,35,38,38,42,42,
        47,47,59,59,61,61,92,92,297,0,1,1,0,0,0,0,3,1,0,0,0,0,11,1,0,0,0,
        0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,
        0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,1,42,1,0,0,0,3,47,1,0,0,0,
        5,59,1,0,0,0,7,61,1,0,0,0,9,64,1,0,0,0,11,69,1,0,0,0,13,94,1,0,0,
        0,15,119,1,0,0,0,17,143,1,0,0,0,19,145,1,0,0,0,21,149,1,0,0,0,23,
        153,1,0,0,0,25,157,1,0,0,0,27,159,1,0,0,0,29,167,1,0,0,0,31,174,
        1,0,0,0,33,178,1,0,0,0,35,180,1,0,0,0,37,217,1,0,0,0,39,254,1,0,
        0,0,41,43,7,0,0,0,42,41,1,0,0,0,42,43,1,0,0,0,43,44,1,0,0,0,44,45,
        3,9,4,0,45,2,1,0,0,0,46,48,7,0,0,0,47,46,1,0,0,0,47,48,1,0,0,0,48,
        51,1,0,0,0,49,52,3,9,4,0,50,52,3,5,2,0,51,49,1,0,0,0,51,50,1,0,0,
        0,52,4,1,0,0,0,53,54,3,9,4,0,54,55,5,46,0,0,55,56,3,9,4,0,56,60,
        1,0,0,0,57,58,5,46,0,0,58,60,3,9,4,0,59,53,1,0,0,0,59,57,1,0,0,0,
        60,6,1,0,0,0,61,62,7,1,0,0,62,8,1,0,0,0,63,65,3,7,3,0,64,63,1,0,
        0,0,65,66,1,0,0,0,66,64,1,0,0,0,66,67,1,0,0,0,67,10,1,0,0,0,68,70,
        5,35,0,0,69,68,1,0,0,0,70,71,1,0,0,0,71,69,1,0,0,0,71,72,1,0,0,0,
        72,76,1,0,0,0,73,75,8,2,0,0,74,73,1,0,0,0,75,78,1,0,0,0,76,74,1,
        0,0,0,76,77,1,0,0,0,77,82,1,0,0,0,78,76,1,0,0,0,79,81,5,35,0,0,80,
        79,1,0,0,0,81,84,1,0,0,0,82,80,1,0,0,0,82,83,1,0,0,0,83,88,1,0,0,
        0,84,82,1,0,0,0,85,87,8,2,0,0,86,85,1,0,0,0,87,90,1,0,0,0,88,86,
        1,0,0,0,88,89,1,0,0,0,89,91,1,0,0,0,90,88,1,0,0,0,91,92,6,5,0,0,
        92,12,1,0,0,0,93,95,5,33,0,0,94,93,1,0,0,0,95,96,1,0,0,0,96,94,1,
        0,0,0,96,97,1,0,0,0,97,101,1,0,0,0,98,100,8,2,0,0,99,98,1,0,0,0,
        100,103,1,0,0,0,101,99,1,0,0,0,101,102,1,0,0,0,102,107,1,0,0,0,103,
        101,1,0,0,0,104,106,5,33,0,0,105,104,1,0,0,0,106,109,1,0,0,0,107,
        105,1,0,0,0,107,108,1,0,0,0,108,113,1,0,0,0,109,107,1,0,0,0,110,
        112,8,2,0,0,111,110,1,0,0,0,112,115,1,0,0,0,113,111,1,0,0,0,113,
        114,1,0,0,0,114,116,1,0,0,0,115,113,1,0,0,0,116,117,6,6,0,0,117,
        14,1,0,0,0,118,120,5,59,0,0,119,118,1,0,0,0,120,121,1,0,0,0,121,
        119,1,0,0,0,121,122,1,0,0,0,122,126,1,0,0,0,123,125,8,2,0,0,124,
        123,1,0,0,0,125,128,1,0,0,0,126,124,1,0,0,0,126,127,1,0,0,0,127,
        132,1,0,0,0,128,126,1,0,0,0,129,131,5,59,0,0,130,129,1,0,0,0,131,
        134,1,0,0,0,132,130,1,0,0,0,132,133,1,0,0,0,133,138,1,0,0,0,134,
        132,1,0,0,0,135,137,8,2,0,0,136,135,1,0,0,0,137,140,1,0,0,0,138,
        136,1,0,0,0,138,139,1,0,0,0,139,141,1,0,0,0,140,138,1,0,0,0,141,
        142,6,7,0,0,142,16,1,0,0,0,143,144,3,27,13,0,144,18,1,0,0,0,145,
        146,7,3,0,0,146,20,1,0,0,0,147,150,3,19,9,0,148,150,3,7,3,0,149,
        147,1,0,0,0,149,148,1,0,0,0,150,22,1,0,0,0,151,154,3,21,10,0,152,
        154,7,4,0,0,153,151,1,0,0,0,153,152,1,0,0,0,154,24,1,0,0,0,155,158,
        3,23,11,0,156,158,7,5,0,0,157,155,1,0,0,0,157,156,1,0,0,0,158,26,
        1,0,0,0,159,163,3,23,11,0,160,162,3,25,12,0,161,160,1,0,0,0,162,
        165,1,0,0,0,163,161,1,0,0,0,163,164,1,0,0,0,164,28,1,0,0,0,165,163,
        1,0,0,0,166,168,7,6,0,0,167,166,1,0,0,0,168,169,1,0,0,0,169,167,
        1,0,0,0,169,170,1,0,0,0,170,171,1,0,0,0,171,172,6,14,1,0,172,30,
        1,0,0,0,173,175,7,2,0,0,174,173,1,0,0,0,175,176,1,0,0,0,176,174,
        1,0,0,0,176,177,1,0,0,0,177,32,1,0,0,0,178,179,7,7,0,0,179,34,1,
        0,0,0,180,185,5,123,0,0,181,184,3,35,17,0,182,184,9,0,0,0,183,181,
        1,0,0,0,183,182,1,0,0,0,184,187,1,0,0,0,185,186,1,0,0,0,185,183,
        1,0,0,0,186,188,1,0,0,0,187,185,1,0,0,0,188,189,5,125,0,0,189,190,
        1,0,0,0,190,191,6,17,0,0,191,36,1,0,0,0,192,218,3,33,16,0,193,195,
        3,33,16,0,194,196,5,47,0,0,195,194,1,0,0,0,196,197,1,0,0,0,197,195,
        1,0,0,0,197,198,1,0,0,0,198,218,1,0,0,0,199,201,3,33,16,0,200,202,
        5,42,0,0,201,200,1,0,0,0,202,203,1,0,0,0,203,201,1,0,0,0,203,204,
        1,0,0,0,204,218,1,0,0,0,205,207,3,33,16,0,206,208,5,61,0,0,207,206,
        1,0,0,0,208,209,1,0,0,0,209,207,1,0,0,0,209,210,1,0,0,0,210,218,
        1,0,0,0,211,212,5,82,0,0,212,213,5,69,0,0,213,214,5,77,0,0,214,215,
        5,65,0,0,215,216,5,82,0,0,216,218,5,75,0,0,217,192,1,0,0,0,217,193,
        1,0,0,0,217,199,1,0,0,0,217,205,1,0,0,0,217,211,1,0,0,0,218,222,
        1,0,0,0,219,221,5,32,0,0,220,219,1,0,0,0,221,224,1,0,0,0,222,220,
        1,0,0,0,222,223,1,0,0,0,223,225,1,0,0,0,224,222,1,0,0,0,225,226,
        3,31,15,0,226,227,1,0,0,0,227,228,6,18,0,0,228,38,1,0,0,0,229,255,
        3,33,16,0,230,232,3,33,16,0,231,233,5,47,0,0,232,231,1,0,0,0,233,
        234,1,0,0,0,234,232,1,0,0,0,234,235,1,0,0,0,235,255,1,0,0,0,236,
        238,3,33,16,0,237,239,5,42,0,0,238,237,1,0,0,0,239,240,1,0,0,0,240,
        238,1,0,0,0,240,241,1,0,0,0,241,255,1,0,0,0,242,244,3,33,16,0,243,
        245,5,61,0,0,244,243,1,0,0,0,245,246,1,0,0,0,246,244,1,0,0,0,246,
        247,1,0,0,0,247,255,1,0,0,0,248,249,5,82,0,0,249,250,5,69,0,0,250,
        251,5,77,0,0,251,252,5,65,0,0,252,253,5,82,0,0,253,255,5,75,0,0,
        254,229,1,0,0,0,254,230,1,0,0,0,254,236,1,0,0,0,254,242,1,0,0,0,
        254,248,1,0,0,0,255,259,1,0,0,0,256,258,8,2,0,0,257,256,1,0,0,0,
        258,261,1,0,0,0,259,257,1,0,0,0,259,260,1,0,0,0,260,262,1,0,0,0,
        261,259,1,0,0,0,262,263,3,31,15,0,263,264,1,0,0,0,264,265,6,19,0,
        0,265,40,1,0,0,0,36,0,42,47,51,59,66,71,76,82,88,96,101,107,113,
        121,126,132,138,149,153,157,163,169,176,183,185,197,203,209,217,
        222,234,240,246,254,259,2,0,1,0,6,0,0
    ]

class XeasyPROTLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    Integer = 1
    Float = 2
    SHARP_COMMENT = 3
    EXCLM_COMMENT = 4
    SMCLN_COMMENT = 5
    Simple_name = 6
    SPACE = 7
    RETURN = 8
    ENCLOSE_COMMENT = 9
    SECTION_COMMENT = 10
    LINE_COMMENT = 11

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
 ]

    symbolicNames = [ "<INVALID>",
            "Integer", "Float", "SHARP_COMMENT", "EXCLM_COMMENT", "SMCLN_COMMENT", 
            "Simple_name", "SPACE", "RETURN", "ENCLOSE_COMMENT", "SECTION_COMMENT", 
            "LINE_COMMENT" ]

    ruleNames = [ "Integer", "Float", "DEC_DOT_DEC", "DEC_DIGIT", "DECIMAL", 
                  "SHARP_COMMENT", "EXCLM_COMMENT", "SMCLN_COMMENT", "Simple_name", 
                  "ALPHA", "ALPHA_NUM", "START_CHAR", "NAME_CHAR", "SIMPLE_NAME", 
                  "SPACE", "RETURN", "COMMENT_START_CHAR", "ENCLOSE_COMMENT", 
                  "SECTION_COMMENT", "LINE_COMMENT" ]

    grammarFileName = "XeasyPROTLexer.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.0")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


