# Generated from XeasyPROTLexer.g4 by ANTLR 4.13.0
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,11,262,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,1,0,3,
        0,41,8,0,1,0,1,0,1,1,3,1,46,8,1,1,1,1,1,3,1,50,8,1,1,2,1,2,1,2,1,
        2,1,2,1,2,3,2,58,8,2,1,3,1,3,1,4,4,4,63,8,4,11,4,12,4,64,1,5,4,5,
        68,8,5,11,5,12,5,69,1,5,5,5,73,8,5,10,5,12,5,76,9,5,1,5,5,5,79,8,
        5,10,5,12,5,82,9,5,1,5,5,5,85,8,5,10,5,12,5,88,9,5,1,5,1,5,1,6,4,
        6,93,8,6,11,6,12,6,94,1,6,5,6,98,8,6,10,6,12,6,101,9,6,1,6,5,6,104,
        8,6,10,6,12,6,107,9,6,1,6,5,6,110,8,6,10,6,12,6,113,9,6,1,6,1,6,
        1,7,4,7,118,8,7,11,7,12,7,119,1,7,5,7,123,8,7,10,7,12,7,126,9,7,
        1,7,5,7,129,8,7,10,7,12,7,132,9,7,1,7,5,7,135,8,7,10,7,12,7,138,
        9,7,1,7,1,7,1,8,1,8,1,9,1,9,1,10,1,10,3,10,148,8,10,1,11,1,11,3,
        11,152,8,11,1,12,1,12,3,12,156,8,12,1,13,1,13,5,13,160,8,13,10,13,
        12,13,163,9,13,1,14,4,14,166,8,14,11,14,12,14,167,1,14,1,14,1,15,
        4,15,173,8,15,11,15,12,15,174,1,16,1,16,1,16,5,16,180,8,16,10,16,
        12,16,183,9,16,1,16,1,16,1,16,1,16,1,17,1,17,1,17,4,17,192,8,17,
        11,17,12,17,193,1,17,1,17,4,17,198,8,17,11,17,12,17,199,1,17,1,17,
        4,17,204,8,17,11,17,12,17,205,1,17,1,17,1,17,1,17,1,17,1,17,3,17,
        214,8,17,1,17,5,17,217,8,17,10,17,12,17,220,9,17,1,17,1,17,1,17,
        1,17,1,18,1,18,1,18,4,18,229,8,18,11,18,12,18,230,1,18,1,18,4,18,
        235,8,18,11,18,12,18,236,1,18,1,18,4,18,241,8,18,11,18,12,18,242,
        1,18,1,18,1,18,1,18,1,18,1,18,3,18,251,8,18,1,18,5,18,254,8,18,10,
        18,12,18,257,9,18,1,18,1,18,1,18,1,18,1,181,0,19,1,1,3,2,5,0,7,0,
        9,0,11,3,13,4,15,5,17,6,19,0,21,0,23,0,25,0,27,0,29,7,31,8,33,9,
        35,10,37,11,1,0,8,2,0,43,43,45,45,1,0,48,57,2,0,10,10,13,13,2,0,
        65,90,97,122,5,0,35,35,42,43,45,46,63,63,95,95,2,0,34,34,39,39,2,
        0,9,9,32,32,5,0,33,33,35,35,38,38,59,59,92,92,294,0,1,1,0,0,0,0,
        3,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,
        29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,1,
        40,1,0,0,0,3,45,1,0,0,0,5,57,1,0,0,0,7,59,1,0,0,0,9,62,1,0,0,0,11,
        67,1,0,0,0,13,92,1,0,0,0,15,117,1,0,0,0,17,141,1,0,0,0,19,143,1,
        0,0,0,21,147,1,0,0,0,23,151,1,0,0,0,25,155,1,0,0,0,27,157,1,0,0,
        0,29,165,1,0,0,0,31,172,1,0,0,0,33,176,1,0,0,0,35,213,1,0,0,0,37,
        250,1,0,0,0,39,41,7,0,0,0,40,39,1,0,0,0,40,41,1,0,0,0,41,42,1,0,
        0,0,42,43,3,9,4,0,43,2,1,0,0,0,44,46,7,0,0,0,45,44,1,0,0,0,45,46,
        1,0,0,0,46,49,1,0,0,0,47,50,3,9,4,0,48,50,3,5,2,0,49,47,1,0,0,0,
        49,48,1,0,0,0,50,4,1,0,0,0,51,52,3,9,4,0,52,53,5,46,0,0,53,54,3,
        9,4,0,54,58,1,0,0,0,55,56,5,46,0,0,56,58,3,9,4,0,57,51,1,0,0,0,57,
        55,1,0,0,0,58,6,1,0,0,0,59,60,7,1,0,0,60,8,1,0,0,0,61,63,3,7,3,0,
        62,61,1,0,0,0,63,64,1,0,0,0,64,62,1,0,0,0,64,65,1,0,0,0,65,10,1,
        0,0,0,66,68,5,35,0,0,67,66,1,0,0,0,68,69,1,0,0,0,69,67,1,0,0,0,69,
        70,1,0,0,0,70,74,1,0,0,0,71,73,8,2,0,0,72,71,1,0,0,0,73,76,1,0,0,
        0,74,72,1,0,0,0,74,75,1,0,0,0,75,80,1,0,0,0,76,74,1,0,0,0,77,79,
        5,35,0,0,78,77,1,0,0,0,79,82,1,0,0,0,80,78,1,0,0,0,80,81,1,0,0,0,
        81,86,1,0,0,0,82,80,1,0,0,0,83,85,8,2,0,0,84,83,1,0,0,0,85,88,1,
        0,0,0,86,84,1,0,0,0,86,87,1,0,0,0,87,89,1,0,0,0,88,86,1,0,0,0,89,
        90,6,5,0,0,90,12,1,0,0,0,91,93,5,33,0,0,92,91,1,0,0,0,93,94,1,0,
        0,0,94,92,1,0,0,0,94,95,1,0,0,0,95,99,1,0,0,0,96,98,8,2,0,0,97,96,
        1,0,0,0,98,101,1,0,0,0,99,97,1,0,0,0,99,100,1,0,0,0,100,105,1,0,
        0,0,101,99,1,0,0,0,102,104,5,33,0,0,103,102,1,0,0,0,104,107,1,0,
        0,0,105,103,1,0,0,0,105,106,1,0,0,0,106,111,1,0,0,0,107,105,1,0,
        0,0,108,110,8,2,0,0,109,108,1,0,0,0,110,113,1,0,0,0,111,109,1,0,
        0,0,111,112,1,0,0,0,112,114,1,0,0,0,113,111,1,0,0,0,114,115,6,6,
        0,0,115,14,1,0,0,0,116,118,5,59,0,0,117,116,1,0,0,0,118,119,1,0,
        0,0,119,117,1,0,0,0,119,120,1,0,0,0,120,124,1,0,0,0,121,123,8,2,
        0,0,122,121,1,0,0,0,123,126,1,0,0,0,124,122,1,0,0,0,124,125,1,0,
        0,0,125,130,1,0,0,0,126,124,1,0,0,0,127,129,5,59,0,0,128,127,1,0,
        0,0,129,132,1,0,0,0,130,128,1,0,0,0,130,131,1,0,0,0,131,136,1,0,
        0,0,132,130,1,0,0,0,133,135,8,2,0,0,134,133,1,0,0,0,135,138,1,0,
        0,0,136,134,1,0,0,0,136,137,1,0,0,0,137,139,1,0,0,0,138,136,1,0,
        0,0,139,140,6,7,0,0,140,16,1,0,0,0,141,142,3,27,13,0,142,18,1,0,
        0,0,143,144,7,3,0,0,144,20,1,0,0,0,145,148,3,19,9,0,146,148,3,7,
        3,0,147,145,1,0,0,0,147,146,1,0,0,0,148,22,1,0,0,0,149,152,3,21,
        10,0,150,152,7,4,0,0,151,149,1,0,0,0,151,150,1,0,0,0,152,24,1,0,
        0,0,153,156,3,23,11,0,154,156,7,5,0,0,155,153,1,0,0,0,155,154,1,
        0,0,0,156,26,1,0,0,0,157,161,3,23,11,0,158,160,3,25,12,0,159,158,
        1,0,0,0,160,163,1,0,0,0,161,159,1,0,0,0,161,162,1,0,0,0,162,28,1,
        0,0,0,163,161,1,0,0,0,164,166,7,6,0,0,165,164,1,0,0,0,166,167,1,
        0,0,0,167,165,1,0,0,0,167,168,1,0,0,0,168,169,1,0,0,0,169,170,6,
        14,1,0,170,30,1,0,0,0,171,173,7,2,0,0,172,171,1,0,0,0,173,174,1,
        0,0,0,174,172,1,0,0,0,174,175,1,0,0,0,175,32,1,0,0,0,176,181,5,123,
        0,0,177,180,3,33,16,0,178,180,9,0,0,0,179,177,1,0,0,0,179,178,1,
        0,0,0,180,183,1,0,0,0,181,182,1,0,0,0,181,179,1,0,0,0,182,184,1,
        0,0,0,183,181,1,0,0,0,184,185,5,125,0,0,185,186,1,0,0,0,186,187,
        6,16,0,0,187,34,1,0,0,0,188,214,7,7,0,0,189,191,5,47,0,0,190,192,
        5,47,0,0,191,190,1,0,0,0,192,193,1,0,0,0,193,191,1,0,0,0,193,194,
        1,0,0,0,194,214,1,0,0,0,195,197,5,42,0,0,196,198,5,42,0,0,197,196,
        1,0,0,0,198,199,1,0,0,0,199,197,1,0,0,0,199,200,1,0,0,0,200,214,
        1,0,0,0,201,203,5,61,0,0,202,204,5,61,0,0,203,202,1,0,0,0,204,205,
        1,0,0,0,205,203,1,0,0,0,205,206,1,0,0,0,206,214,1,0,0,0,207,208,
        5,82,0,0,208,209,5,69,0,0,209,210,5,77,0,0,210,211,5,65,0,0,211,
        212,5,82,0,0,212,214,5,75,0,0,213,188,1,0,0,0,213,189,1,0,0,0,213,
        195,1,0,0,0,213,201,1,0,0,0,213,207,1,0,0,0,214,218,1,0,0,0,215,
        217,5,32,0,0,216,215,1,0,0,0,217,220,1,0,0,0,218,216,1,0,0,0,218,
        219,1,0,0,0,219,221,1,0,0,0,220,218,1,0,0,0,221,222,3,31,15,0,222,
        223,1,0,0,0,223,224,6,17,0,0,224,36,1,0,0,0,225,251,7,7,0,0,226,
        228,5,47,0,0,227,229,5,47,0,0,228,227,1,0,0,0,229,230,1,0,0,0,230,
        228,1,0,0,0,230,231,1,0,0,0,231,251,1,0,0,0,232,234,5,42,0,0,233,
        235,5,42,0,0,234,233,1,0,0,0,235,236,1,0,0,0,236,234,1,0,0,0,236,
        237,1,0,0,0,237,251,1,0,0,0,238,240,5,61,0,0,239,241,5,61,0,0,240,
        239,1,0,0,0,241,242,1,0,0,0,242,240,1,0,0,0,242,243,1,0,0,0,243,
        251,1,0,0,0,244,245,5,82,0,0,245,246,5,69,0,0,246,247,5,77,0,0,247,
        248,5,65,0,0,248,249,5,82,0,0,249,251,5,75,0,0,250,225,1,0,0,0,250,
        226,1,0,0,0,250,232,1,0,0,0,250,238,1,0,0,0,250,244,1,0,0,0,251,
        255,1,0,0,0,252,254,8,2,0,0,253,252,1,0,0,0,254,257,1,0,0,0,255,
        253,1,0,0,0,255,256,1,0,0,0,256,258,1,0,0,0,257,255,1,0,0,0,258,
        259,3,31,15,0,259,260,1,0,0,0,260,261,6,18,0,0,261,38,1,0,0,0,36,
        0,40,45,49,57,64,69,74,80,86,94,99,105,111,119,124,130,136,147,151,
        155,161,167,174,179,181,193,199,205,213,218,230,236,242,250,255,
        2,0,1,0,6,0,0
    ]

class XeasyPROTLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    Integer = 1
    Float = 2
    SHARP_COMMENT = 3
    EXCLM_COMMENT = 4
    SMCLN_COMMENT = 5
    Simple_name = 6
    SPACE = 7
    RETURN = 8
    ENCLOSE_COMMENT = 9
    SECTION_COMMENT = 10
    LINE_COMMENT = 11

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
 ]

    symbolicNames = [ "<INVALID>",
            "Integer", "Float", "SHARP_COMMENT", "EXCLM_COMMENT", "SMCLN_COMMENT", 
            "Simple_name", "SPACE", "RETURN", "ENCLOSE_COMMENT", "SECTION_COMMENT", 
            "LINE_COMMENT" ]

    ruleNames = [ "Integer", "Float", "DEC_DOT_DEC", "DEC_DIGIT", "DECIMAL", 
                  "SHARP_COMMENT", "EXCLM_COMMENT", "SMCLN_COMMENT", "Simple_name", 
                  "ALPHA", "ALPHA_NUM", "START_CHAR", "NAME_CHAR", "SIMPLE_NAME", 
                  "SPACE", "RETURN", "ENCLOSE_COMMENT", "SECTION_COMMENT", 
                  "LINE_COMMENT" ]

    grammarFileName = "XeasyPROTLexer.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.0")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


